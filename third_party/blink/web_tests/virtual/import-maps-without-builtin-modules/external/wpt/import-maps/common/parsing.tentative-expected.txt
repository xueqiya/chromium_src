This is a testharness.js-based test.
Found 67 tests; 62 PASS, 5 FAIL, 0 TIMEOUT, 0 NOTRUN.
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-addresses-absolute.json
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-addresses-invalid.json
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-addresses.json
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-invalid-json.json
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-schema-normalization.json
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-schema-scope.json
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-schema-specifier-map.json
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-schema-toplevel.json
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-scope-keys.json
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-specifier-keys.json
PASS Test helper: fetching and sanity checking test JSON: resources/parsing-trailing-slashes.json
PASS Absolute URL addresses: should only accept absolute URL addresses with fetch schemes
FAIL Absolute URL addresses: should parse absolute URLs, ignoring unparseable ones assert_equals: expected "{\"imports\":{\"invalidButParseable1\":\"https://example.org/\",\"invalidButParseable2\":\"https://example.com///\",\"percentDecoding\":\"https://example.com/\",\"prettyNormal\":\"https://example.net/\"},\"scopes\":{}}" but got "{\"imports\":{\"invalidButParseable1\":\"https://example.org/\",\"invalidButParseable2\":\"https://example.com///\",\"percentDecoding\":\"https://example.com/\",\"prettyNormal\":\"https://example.net/\",\"unparseable2\":[],\"unparseable3\":[]},\"scopes\":{}}"
FAIL Other invalid addresses: should ignore unprefixed strings that are not absolute URLs assert_equals: expected "{\"imports\":{},\"scopes\":{}}" but got "{\"imports\":{\"foo1\":[],\"foo2\":[],\"foo3\":[],\"foo4\":[],\"foo5\":[]},\"scopes\":{}}"
PASS Relative URL-like addresses: should accept strings prefixed with ./, ../, or /
FAIL Relative URL-like addresses: should not accept strings prefixed with ./, ../, or / for data: base URLs assert_equals: expected "{\"imports\":{},\"scopes\":{}}" but got "{\"imports\":{\"dotDotSlash\":[],\"dotSlash\":[],\"slash\":[]},\"scopes\":{}}"
PASS Relative URL-like addresses: should accept the literal strings ./, ../, or / with no suffix
FAIL Relative URL-like addresses: should ignore percent-encoded variants of ./, ../, or / assert_equals: expected "{\"imports\":{},\"scopes\":{}}" but got "{\"imports\":{\"dotDotSlash1\":[],\"dotDotSlash2\":[],\"dotDotSlash3\":[],\"dotSlash1\":[],\"dotSlash2\":[],\"dotSlash3\":[],\"slash2\":[]},\"scopes\":{}}"
PASS Invalid JSON
PASS Normalization: should normalize empty import maps to have imports and scopes keys
PASS Normalization: should normalize an import map without imports to have imports
PASS Normalization: should normalize an import map without scopes to have scopes
PASS Mismatching scopes schema: should throw if a scope's value is not an object: null
PASS Mismatching scopes schema: should throw if a scope's value is not an object: boolean
PASS Mismatching scopes schema: should throw if a scope's value is not an object: number
PASS Mismatching scopes schema: should throw if a scope's value is not an object: string
PASS Mismatching scopes schema: should throw if a scope's value is not an object: array
PASS Mismatching the specifier map schema: should ignore entries where the address is not a string
PASS Mismatching the specifier map schema: should ignore entries where the specifier key is an empty string
PASS Mismatching the top-level schema: should throw for top-level non-objects: null
PASS Mismatching the top-level schema: should throw for top-level non-objects: boolean
PASS Mismatching the top-level schema: should throw for top-level non-objects: number
PASS Mismatching the top-level schema: should throw for top-level non-objects: string
PASS Mismatching the top-level schema: should throw for top-level non-objects: array
PASS Mismatching the top-level schema: should throw if imports is a non-object: null
PASS Mismatching the top-level schema: should throw if imports is a non-object: boolean
PASS Mismatching the top-level schema: should throw if imports is a non-object: number
PASS Mismatching the top-level schema: should throw if imports is a non-object: string
PASS Mismatching the top-level schema: should throw if imports is a non-object: array
PASS Mismatching the top-level schema: should throw if scopes is a non-object: null
PASS Mismatching the top-level schema: should throw if scopes is a non-object: boolean
PASS Mismatching the top-level schema: should throw if scopes is a non-object: number
PASS Mismatching the top-level schema: should throw if scopes is a non-object: string
PASS Mismatching the top-level schema: should throw if scopes is a non-object: array
PASS Mismatching the top-level schema: should ignore unspecified top-level entries
PASS Relative URL scope keys should work with no prefix
PASS Relative URL scope keys should work with ./, ../, and / prefixes
PASS Absolute URL scope keys should ignore relative URL scope keys when the base URL is a data: URL
PASS Relative URL scope keys should work with ./, ../, or / with no suffix
PASS Relative URL scope keys should work with /s, ?s, and #s
PASS Relative URL scope keys should work with an empty string scope key
PASS Relative URL scope keys should work with / suffixes
PASS Relative URL scope keys should deduplicate based on URL parsing rules
PASS Absolute URL scope keys should accept all absolute URL scope keys, with or without fetch schemes
PASS Absolute URL scope keys should parse absolute URL scope keys, ignoring unparseable ones
PASS Relative URL specifier keys should absolutize strings prefixed with ./, ../, or / into the corresponding URLs
PASS Relative URL specifier keys should not absolutize strings prefixed with ./, ../, or / with a data: URL base
PASS Relative URL specifier keys should absolutize the literal strings ./, ../, or / with no suffix
PASS Relative URL specifier keys should work with /s, ?s, and #s
PASS Relative URL specifier keys should ignore an empty string key
PASS Relative URL specifier keys should treat percent-encoded variants of ./, ../, or / as bare specifiers
PASS Relative URL specifier keys should deduplicate based on URL parsing rules
PASS Absolute URL specifier keys should accept all absolute URL specifier keys, with or without fetch schemes
PASS Absolute URL specifier keys should parse absolute URLs, treating unparseable ones as bare specifiers
PASS Specifier keys should be sort correctly (issue #181) - Test #1
PASS Specifier keys should be sort correctly (issue #181) - Test #2
FAIL Failing addresses: mismatched trailing slashes assert_equals: expected "{\"imports\":{},\"scopes\":{}}" but got "{\"imports\":{\"trailer/\":[]},\"scopes\":{}}"
Harness: the test ran to completion.

