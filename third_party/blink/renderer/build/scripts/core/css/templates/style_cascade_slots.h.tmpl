{% from 'templates/macros.tmpl' import license %}
{{license()}}

#ifndef THIRD_PARTY_BLINK_RENDERER_CORE_CSS_STYLE_CASCADE_SLOTS_H_
#define THIRD_PARTY_BLINK_RENDERER_CORE_CSS_STYLE_CASCADE_SLOTS_H_

#include "third_party/blink/renderer/core/css/resolver/style_cascade.h"

namespace blink {

class CSSProperty;
class StyleResolverState;

class CORE_EXPORT StyleCascadeSlots {
  STACK_ALLOCATED();
  using Priority = StyleCascade::Priority;
 public:
  // The default behavior for Set is to do nothing and return 'true'.
  // By using AllowDefault::kNo, we'll instead hit a DCHECK if the default
  // behavior is used, which is useful for direction-aware properties.
  enum class AllowDefault { kNo, kYes };

  // Attempt to set the slots associated with the given property to the given
  // priority. If the incoming priority is higher or equal to the priority
  // in each associated slot, the Set will succeed. Otheriwse, it will fail.
  //
  // If there are no slots for the given property, Set will succeed.
  bool Set(const CSSProperty&,
           Priority,
           const StyleResolverState&,
           AllowDefault allow_default = AllowDefault::kYes);
 private:
{% for property in properties %}
  {% if property.is_slot %}
  Priority {{property.name.to_class_data_member()}};
  {% endif %}
{% endfor %}
};

}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_CORE_CSS_STYLE_CASCADE_SLOTS_H_
