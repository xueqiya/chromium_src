{% from 'templates/macros.tmpl' import license %}
{{license()}}

#include "third_party/blink/renderer/core/css/style_cascade_slots.h"

#include "third_party/blink/renderer/core/css/resolver/style_resolver_state.h"
#include "third_party/blink/renderer/core/style/computed_style.h"

namespace blink {

namespace {

const CSSProperty& ResolveDirectionAware(
    const CSSProperty& property,
    const StyleResolverState& state) {
  const CSSProperty& resolved = property.ResolveDirectionAwareProperty(
      state.Style()->Direction(), state.Style()->GetWritingMode());
  DCHECK_NE(&property, &resolved);
  return resolved;
}

}  // anonymous namespace

bool StyleCascadeSlots::Set(const CSSProperty& property,
                            Priority priority,
                            const StyleResolverState& state,
                            AllowDefault allow_default) {
  switch (property.PropertyID()) {
    // Slots:
{% for property in properties %}
  {% if property.is_slot %}
    case CSSPropertyID::{{property.enum_key}}:
      if (priority < {{property.name.to_class_data_member()}})
        return false;
      {{property.name.to_class_data_member()}} = priority;
      return true;
  {% endif %}
{% endfor %}
    // Properties which use slots:
{% for property in properties %}
  {% if property.slots %}
    case CSSPropertyID::{{property.enum_key}}:
    {% for slot in property.slots %}
      if (priority < {{slot.name.to_class_data_member()}})
        return false;
    {% endfor %}
    {% for slot in property.slots %}
      {{slot.name.to_class_data_member()}} = priority;
    {% endfor %}
      return true;
  {% endif %}
{% endfor %}
    // Direction-aware properties:
{% for property in properties %}
  {% if property.direction_aware_options %}
    case CSSPropertyID::{{property.enum_key}}:
  {% endif %}
{% endfor %}
      return Set(ResolveDirectionAware(property, state),
          priority, state, AllowDefault::kNo);
    default:
      // If you hit this DCHECK, you may need to mark the properties resolved
      // to by css-logical properties as 'is_slot:true' in css_properties.json5.
      DCHECK_EQ(allow_default, AllowDefault::kYes);
      return true;
  }
}

}  // namespace blink
