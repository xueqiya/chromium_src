// weblayer/browser/webui/weblayer_internals.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "weblayer/browser/webui/weblayer_internals.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef WEBLAYER_BROWSER_WEBUI_WEBLAYER_INTERNALS_MOJOM_JUMBO_H_
#define WEBLAYER_BROWSER_WEBUI_WEBLAYER_INTERNALS_MOJOM_JUMBO_H_
#endif


namespace weblayer_internals {
namespace mojom {


void PageHandlerInterceptorForTesting::GetRemoteDebuggingEnabled(GetRemoteDebuggingEnabledCallback callback) {
  GetForwardingInterface()->GetRemoteDebuggingEnabled(std::move(callback));
}
void PageHandlerInterceptorForTesting::SetRemoteDebuggingEnabled(bool enabled) {
  GetForwardingInterface()->SetRemoteDebuggingEnabled(std::move(enabled));
}
PageHandlerAsyncWaiter::PageHandlerAsyncWaiter(
    PageHandler* proxy) : proxy_(proxy) {}

PageHandlerAsyncWaiter::~PageHandlerAsyncWaiter() = default;

void PageHandlerAsyncWaiter::GetRemoteDebuggingEnabled(
    bool* out_enabled) {
  base::RunLoop loop;
  proxy_->GetRemoteDebuggingEnabled(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_enabled
,
             bool enabled) {*out_enabled = std::move(enabled);
            loop->Quit();
          },
          &loop,
          out_enabled));
  loop.Run();
}





}  // namespace mojom
}  // namespace weblayer_internals

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif