// weblayer/browser/webui/weblayer_internals.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');







goog.provide('weblayerInternals.mojom.PageHandler');
goog.provide('weblayerInternals.mojom.PageHandlerReceiver');
goog.provide('weblayerInternals.mojom.PageHandlerCallbackRouter');
goog.provide('weblayerInternals.mojom.PageHandlerInterface');
goog.provide('weblayerInternals.mojom.PageHandlerRemote');
goog.provide('weblayerInternals.mojom.PageHandlerPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
weblayerInternals.mojom.PageHandlerPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
weblayerInternals.mojom.PageHandlerInterface = class {
  
  /**
   * @return {Promise<{
        enabled: !boolean,
   *  }>}
   */

  getRemoteDebuggingEnabled() {}
  
  /**
   * @param { !boolean } enabled
   */

  setRemoteDebuggingEnabled(enabled) {}
};

/**
 * @export
 * @implements { weblayerInternals.mojom.PageHandlerInterface }
 */
weblayerInternals.mojom.PageHandlerRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!weblayerInternals.mojom.PageHandlerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          weblayerInternals.mojom.PageHandlerPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!weblayerInternals.mojom.PageHandlerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {Promise<{
        enabled: !boolean,
   *  }>}
   */

  getRemoteDebuggingEnabled() {
    return this.proxy.sendMessage(
        0,
        weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ParamsSpec.$,
        weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !boolean } enabled
   */

  setRemoteDebuggingEnabled(
      enabled) {
    this.proxy.sendMessage(
        1,
        weblayerInternals.mojom.PageHandler_SetRemoteDebuggingEnabled_ParamsSpec.$,
        null,
        [
          enabled
        ]);
  }
};

/**
 * An object which receives request messages for the PageHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
weblayerInternals.mojom.PageHandlerReceiver = class {
  /**
   * @param {!weblayerInternals.mojom.PageHandlerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!weblayerInternals.mojom.PageHandlerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        weblayerInternals.mojom.PageHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!weblayerInternals.mojom.PageHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ParamsSpec.$,
        weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ResponseParamsSpec.$,
        impl.getRemoteDebuggingEnabled.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        weblayerInternals.mojom.PageHandler_SetRemoteDebuggingEnabled_ParamsSpec.$,
        null,
        impl.setRemoteDebuggingEnabled.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
weblayerInternals.mojom.PageHandler = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "weblayer_internals.mojom.PageHandler";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!weblayerInternals.mojom.PageHandlerRemote}
   * @export
   */
  static getRemote(useBrowserInterfaceBroker = false) {
    let remote = new weblayerInternals.mojom.PageHandlerRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle,
                       "context", useBrowserInterfaceBroker);
    return remote;
  }
};


/**
 * An object which receives request messages for the PageHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
weblayerInternals.mojom.PageHandlerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      weblayerInternals.mojom.PageHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!weblayerInternals.mojom.PageHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getRemoteDebuggingEnabled =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ParamsSpec.$,
        weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ResponseParamsSpec.$,
        this.getRemoteDebuggingEnabled.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setRemoteDebuggingEnabled =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        weblayerInternals.mojom.PageHandler_SetRemoteDebuggingEnabled_ParamsSpec.$,
        null,
        this.setRemoteDebuggingEnabled.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('weblayerInternals.mojom.PageHandler_SetRemoteDebuggingEnabled_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
weblayerInternals.mojom.PageHandler_SetRemoteDebuggingEnabled_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ParamsSpec.$,
    'PageHandler_GetRemoteDebuggingEnabled_Params',
    0,
    [
    ]);



goog.provide('weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_Params');


/** @typedef {Object} */

weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_Params;



mojo.internal.Struct(
    weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ResponseParamsSpec.$,
    'PageHandler_GetRemoteDebuggingEnabled_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'enabled', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);



goog.provide('weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ResponseParams');


/**
 * @typedef { {
 *   enabled: !boolean,
 * } }
 */

weblayerInternals.mojom.PageHandler_GetRemoteDebuggingEnabled_ResponseParams;



mojo.internal.Struct(
    weblayerInternals.mojom.PageHandler_SetRemoteDebuggingEnabled_ParamsSpec.$,
    'PageHandler_SetRemoteDebuggingEnabled_Params',
    8,
    [
      mojo.internal.StructField(
        'enabled', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);



goog.provide('weblayerInternals.mojom.PageHandler_SetRemoteDebuggingEnabled_Params');


/**
 * @typedef { {
 *   enabled: !boolean,
 * } }
 */

weblayerInternals.mojom.PageHandler_SetRemoteDebuggingEnabled_Params;

