// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/weblayer_private/TopControlsContainerView

#ifndef org_chromium_weblayer_private_TopControlsContainerView_JNI
#define org_chromium_weblayer_private_TopControlsContainerView_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_weblayer_1private_TopControlsContainerView[];
const char kClassPath_org_chromium_weblayer_1private_TopControlsContainerView[] =
    "org/chromium/weblayer_private/TopControlsContainerView";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_weblayer_1private_TopControlsContainerView_clazz(nullptr);
#ifndef org_chromium_weblayer_1private_TopControlsContainerView_clazz_defined
#define org_chromium_weblayer_1private_TopControlsContainerView_clazz_defined
inline jclass org_chromium_weblayer_1private_TopControlsContainerView_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_weblayer_1private_TopControlsContainerView,
      &g_org_chromium_weblayer_1private_TopControlsContainerView_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace weblayer {

static jlong JNI_TopControlsContainerView_CreateTopControlsContainerView(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& view,
    jlong nativeContentViewRenderView);

JNI_GENERATOR_EXPORT jlong Java_J_N_MxBee_0002483(
    JNIEnv* env,
    jclass jcaller,
    jobject view,
    jlong nativeContentViewRenderView) {
  return JNI_TopControlsContainerView_CreateTopControlsContainerView(env,
      base::android::JavaParamRef<jobject>(env, view), nativeContentViewRenderView);
}

JNI_GENERATOR_EXPORT void Java_J_N_MDsa1RkB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTopControlsContainerView,
    jobject caller) {
  TopControlsContainerView* native =
      reinterpret_cast<TopControlsContainerView*>(nativeTopControlsContainerView);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteTopControlsContainerView");
  return native->DeleteTopControlsContainerView(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M_1eicmWU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTopControlsContainerView,
    jobject caller,
    jint id) {
  TopControlsContainerView* native =
      reinterpret_cast<TopControlsContainerView*>(nativeTopControlsContainerView);
  CHECK_NATIVE_PTR(env, jcaller, native, "CreateTopControlsLayer");
  return native->CreateTopControlsLayer(env, base::android::JavaParamRef<jobject>(env, caller), id);
}

JNI_GENERATOR_EXPORT void Java_J_N_M0ErzYW_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTopControlsContainerView,
    jobject caller) {
  TopControlsContainerView* native =
      reinterpret_cast<TopControlsContainerView*>(nativeTopControlsContainerView);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteTopControlsLayer");
  return native->DeleteTopControlsLayer(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MSVvJOat(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTopControlsContainerView,
    jobject caller,
    jint topControlsOffsetY,
    jint topContentOffsetY) {
  TopControlsContainerView* native =
      reinterpret_cast<TopControlsContainerView*>(nativeTopControlsContainerView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTopControlsOffset");
  return native->SetTopControlsOffset(env, base::android::JavaParamRef<jobject>(env, caller),
      topControlsOffsetY, topContentOffsetY);
}

JNI_GENERATOR_EXPORT void Java_J_N_M6kNhy4_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTopControlsContainerView,
    jobject caller,
    jint width,
    jint height) {
  TopControlsContainerView* native =
      reinterpret_cast<TopControlsContainerView*>(nativeTopControlsContainerView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTopControlsSize");
  return native->SetTopControlsSize(env, base::android::JavaParamRef<jobject>(env, caller), width,
      height);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mxe_1p5sj(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTopControlsContainerView,
    jobject caller) {
  TopControlsContainerView* native =
      reinterpret_cast<TopControlsContainerView*>(nativeTopControlsContainerView);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateTopControlsResource");
  return native->UpdateTopControlsResource(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MAiLwgGG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTopControlsContainerView,
    jobject caller,
    jobject webContents) {
  TopControlsContainerView* native =
      reinterpret_cast<TopControlsContainerView*>(nativeTopControlsContainerView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetWebContents");
  return native->SetWebContents(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}


static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_TopControlsContainerView_didToggleFullscreenModeForTab(nullptr);
static void Java_TopControlsContainerView_didToggleFullscreenModeForTab(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isFullscreen) {
  jclass clazz = org_chromium_weblayer_1private_TopControlsContainerView_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_TopControlsContainerView_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "didToggleFullscreenModeForTab",
          "(Z)V",
          &g_org_chromium_weblayer_1private_TopControlsContainerView_didToggleFullscreenModeForTab);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, isFullscreen);
}

}  // namespace weblayer

// Step 4: Generated test functions (optional).


#endif  // org_chromium_weblayer_private_TopControlsContainerView_JNI
