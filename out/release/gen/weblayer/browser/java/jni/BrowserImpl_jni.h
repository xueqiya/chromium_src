// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/weblayer_private/BrowserImpl

#ifndef org_chromium_weblayer_private_BrowserImpl_JNI
#define org_chromium_weblayer_private_BrowserImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_weblayer_1private_BrowserImpl[];
const char kClassPath_org_chromium_weblayer_1private_BrowserImpl[] =
    "org/chromium/weblayer_private/BrowserImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_weblayer_1private_BrowserImpl_clazz(nullptr);
#ifndef org_chromium_weblayer_1private_BrowserImpl_clazz_defined
#define org_chromium_weblayer_1private_BrowserImpl_clazz_defined
inline jclass org_chromium_weblayer_1private_BrowserImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_weblayer_1private_BrowserImpl,
      &g_org_chromium_weblayer_1private_BrowserImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace weblayer {

static jlong JNI_BrowserImpl_CreateBrowser(JNIEnv* env, jlong profile,
    const base::android::JavaParamRef<jstring>& persistenceId,
    const base::android::JavaParamRef<jbyteArray>& persistenceCryptoKey,
    const base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MChsAOfs(
    JNIEnv* env,
    jclass jcaller,
    jlong profile,
    jstring persistenceId,
    jbyteArray persistenceCryptoKey,
    jobject caller) {
  return JNI_BrowserImpl_CreateBrowser(env, profile, base::android::JavaParamRef<jstring>(env,
      persistenceId), base::android::JavaParamRef<jbyteArray>(env, persistenceCryptoKey),
      base::android::JavaParamRef<jobject>(env, caller));
}

static void JNI_BrowserImpl_DeleteBrowser(JNIEnv* env, jlong browser);

JNI_GENERATOR_EXPORT void Java_J_N_MaMrnX9h(
    JNIEnv* env,
    jclass jcaller,
    jlong browser) {
  return JNI_BrowserImpl_DeleteBrowser(env, browser);
}

JNI_GENERATOR_EXPORT void Java_J_N_MJ_00024RHdW5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowserImpl,
    jobject browser,
    jlong nativeTab) {
  BrowserImpl* native = reinterpret_cast<BrowserImpl*>(nativeBrowserImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddTab");
  return native->AddTab(env, base::android::JavaParamRef<jobject>(env, browser), nativeTab);
}

JNI_GENERATOR_EXPORT void Java_J_N_M2kEkJ8E(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowserImpl,
    jobject browser,
    jlong nativeTab) {
  BrowserImpl* native = reinterpret_cast<BrowserImpl*>(nativeBrowserImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveTab");
  return native->RemoveTab(env, base::android::JavaParamRef<jobject>(env, browser), nativeTab);
}

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MGDfuPeL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowserImpl,
    jobject browser) {
  BrowserImpl* native = reinterpret_cast<BrowserImpl*>(nativeBrowserImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTabs", NULL);
  return native->GetTabs(env, base::android::JavaParamRef<jobject>(env, browser)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MBT5EbFP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowserImpl,
    jobject browser,
    jlong nativeTab) {
  BrowserImpl* native = reinterpret_cast<BrowserImpl*>(nativeBrowserImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetActiveTab");
  return native->SetActiveTab(env, base::android::JavaParamRef<jobject>(env, browser), nativeTab);
}

JNI_GENERATOR_EXPORT jobject Java_J_N_Ms4h_00024LOA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowserImpl,
    jobject browser) {
  BrowserImpl* native = reinterpret_cast<BrowserImpl*>(nativeBrowserImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetActiveTab", NULL);
  return native->GetActiveTab(env, base::android::JavaParamRef<jobject>(env, browser)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MM5Y8Vdi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowserImpl,
    jobject browser) {
  BrowserImpl* native = reinterpret_cast<BrowserImpl*>(nativeBrowserImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PrepareForShutdown");
  return native->PrepareForShutdown(env, base::android::JavaParamRef<jobject>(env, browser));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_Mtk_1_1Xyp(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowserImpl,
    jobject browser) {
  BrowserImpl* native = reinterpret_cast<BrowserImpl*>(nativeBrowserImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPersistenceId", NULL);
  return native->GetPersistenceId(env, base::android::JavaParamRef<jobject>(env,
      browser)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MzXbCRNG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowserImpl,
    jobject browser) {
  BrowserImpl* native = reinterpret_cast<BrowserImpl*>(nativeBrowserImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SaveSessionServiceIfNecessary");
  return native->SaveSessionServiceIfNecessary(env, base::android::JavaParamRef<jobject>(env,
      browser));
}

JNI_GENERATOR_EXPORT jbyteArray Java_J_N_M6R_00024gymF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowserImpl,
    jobject browser) {
  BrowserImpl* native = reinterpret_cast<BrowserImpl*>(nativeBrowserImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSessionServiceCryptoKey", NULL);
  return native->GetSessionServiceCryptoKey(env, base::android::JavaParamRef<jobject>(env,
      browser)).Release();
}

JNI_GENERATOR_EXPORT jbyteArray Java_J_N_MtZQkZrN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBrowserImpl,
    jobject browser) {
  BrowserImpl* native = reinterpret_cast<BrowserImpl*>(nativeBrowserImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetMinimalPersistenceState", NULL);
  return native->GetMinimalPersistenceState(env, base::android::JavaParamRef<jobject>(env,
      browser)).Release();
}


static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_BrowserImpl_createTabForSessionRestore(nullptr);
static void Java_BrowserImpl_createTabForSessionRestore(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeTab) {
  jclass clazz = org_chromium_weblayer_1private_BrowserImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_BrowserImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "createTabForSessionRestore",
          "(J)V",
          &g_org_chromium_weblayer_1private_BrowserImpl_createTabForSessionRestore);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativeTab);
}

static std::atomic<jmethodID> g_org_chromium_weblayer_1private_BrowserImpl_onTabAdded(nullptr);
static void Java_BrowserImpl_onTabAdded(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& tab) {
  jclass clazz = org_chromium_weblayer_1private_BrowserImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_BrowserImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onTabAdded",
          "(Lorg/chromium/weblayer_private/TabImpl;)V",
          &g_org_chromium_weblayer_1private_BrowserImpl_onTabAdded);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, tab.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_BrowserImpl_onActiveTabChanged(nullptr);
static void Java_BrowserImpl_onActiveTabChanged(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& tab) {
  jclass clazz = org_chromium_weblayer_1private_BrowserImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_BrowserImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onActiveTabChanged",
          "(Lorg/chromium/weblayer_private/TabImpl;)V",
          &g_org_chromium_weblayer_1private_BrowserImpl_onActiveTabChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, tab.obj());
}

static std::atomic<jmethodID> g_org_chromium_weblayer_1private_BrowserImpl_onTabRemoved(nullptr);
static void Java_BrowserImpl_onTabRemoved(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& tab) {
  jclass clazz = org_chromium_weblayer_1private_BrowserImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_BrowserImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onTabRemoved",
          "(Lorg/chromium/weblayer_private/TabImpl;)V",
          &g_org_chromium_weblayer_1private_BrowserImpl_onTabRemoved);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, tab.obj());
}

}  // namespace weblayer

// Step 4: Generated test functions (optional).


#endif  // org_chromium_weblayer_private_BrowserImpl_JNI
