// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/weblayer_private/DownloadCallbackProxy

#ifndef org_chromium_weblayer_private_DownloadCallbackProxy_JNI
#define org_chromium_weblayer_private_DownloadCallbackProxy_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_weblayer_1private_DownloadCallbackProxy[];
const char kClassPath_org_chromium_weblayer_1private_DownloadCallbackProxy[] =
    "org/chromium/weblayer_private/DownloadCallbackProxy";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(nullptr);
#ifndef org_chromium_weblayer_1private_DownloadCallbackProxy_clazz_defined
#define org_chromium_weblayer_1private_DownloadCallbackProxy_clazz_defined
inline jclass org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_weblayer_1private_DownloadCallbackProxy,
      &g_org_chromium_weblayer_1private_DownloadCallbackProxy_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace weblayer {

static jlong JNI_DownloadCallbackProxy_CreateDownloadCallbackProxy(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& proxy,
    jlong tab);

JNI_GENERATOR_EXPORT jlong Java_J_N_McPAi5G9(
    JNIEnv* env,
    jclass jcaller,
    jobject proxy,
    jlong tab) {
  return JNI_DownloadCallbackProxy_CreateDownloadCallbackProxy(env,
      base::android::JavaParamRef<jobject>(env, proxy), tab);
}

static void JNI_DownloadCallbackProxy_DeleteDownloadCallbackProxy(JNIEnv* env, jlong proxy);

JNI_GENERATOR_EXPORT void Java_J_N_Mq3U77nO(
    JNIEnv* env,
    jclass jcaller,
    jlong proxy) {
  return JNI_DownloadCallbackProxy_DeleteDownloadCallbackProxy(env, proxy);
}

static void JNI_DownloadCallbackProxy_AllowDownload(JNIEnv* env, jlong callbackId,
    jboolean allow);

JNI_GENERATOR_EXPORT void Java_J_N_MYOOvdZV(
    JNIEnv* env,
    jclass jcaller,
    jlong callbackId,
    jboolean allow) {
  return JNI_DownloadCallbackProxy_AllowDownload(env, callbackId, allow);
}


static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_DownloadCallbackProxy_interceptDownload(nullptr);
static jboolean Java_DownloadCallbackProxy_interceptDownload(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& userAgent,
    const base::android::JavaRef<jstring>& contentDisposition,
    const base::android::JavaRef<jstring>& mimetype,
    jlong contentLength) {
  jclass clazz = org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "interceptDownload",
          "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)Z",
          &g_org_chromium_weblayer_1private_DownloadCallbackProxy_interceptDownload);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, url.obj(), userAgent.obj(), contentDisposition.obj(),
              mimetype.obj(), contentLength);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_DownloadCallbackProxy_allowDownload(nullptr);
static void Java_DownloadCallbackProxy_allowDownload(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& requestMethod,
    const base::android::JavaRef<jstring>& requestInitiator,
    jlong callbackId) {
  jclass clazz = org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "allowDownload",
          "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V",
          &g_org_chromium_weblayer_1private_DownloadCallbackProxy_allowDownload);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), requestMethod.obj(), requestInitiator.obj(),
              callbackId);
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_DownloadCallbackProxy_createDownload(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_DownloadCallbackProxy_createDownload(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, jlong nativeDownloadImpl) {
  jclass clazz = org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "createDownload",
          "(J)Lorg/chromium/weblayer_private/DownloadImpl;",
          &g_org_chromium_weblayer_1private_DownloadCallbackProxy_createDownload);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, nativeDownloadImpl);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_DownloadCallbackProxy_downloadStarted(nullptr);
static void Java_DownloadCallbackProxy_downloadStarted(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& download) {
  jclass clazz = org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "downloadStarted",
          "(Lorg/chromium/weblayer_private/DownloadImpl;)V",
          &g_org_chromium_weblayer_1private_DownloadCallbackProxy_downloadStarted);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, download.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_DownloadCallbackProxy_downloadProgressChanged(nullptr);
static void Java_DownloadCallbackProxy_downloadProgressChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& download) {
  jclass clazz = org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "downloadProgressChanged",
          "(Lorg/chromium/weblayer_private/DownloadImpl;)V",
          &g_org_chromium_weblayer_1private_DownloadCallbackProxy_downloadProgressChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, download.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_DownloadCallbackProxy_downloadCompleted(nullptr);
static void Java_DownloadCallbackProxy_downloadCompleted(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& download) {
  jclass clazz = org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "downloadCompleted",
          "(Lorg/chromium/weblayer_private/DownloadImpl;)V",
          &g_org_chromium_weblayer_1private_DownloadCallbackProxy_downloadCompleted);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, download.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_DownloadCallbackProxy_downloadFailed(nullptr);
static void Java_DownloadCallbackProxy_downloadFailed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& download) {
  jclass clazz = org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_DownloadCallbackProxy_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "downloadFailed",
          "(Lorg/chromium/weblayer_private/DownloadImpl;)V",
          &g_org_chromium_weblayer_1private_DownloadCallbackProxy_downloadFailed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, download.obj());
}

}  // namespace weblayer

// Step 4: Generated test functions (optional).


#endif  // org_chromium_weblayer_private_DownloadCallbackProxy_JNI
