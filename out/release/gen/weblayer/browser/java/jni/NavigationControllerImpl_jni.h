// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/weblayer_private/NavigationControllerImpl

#ifndef org_chromium_weblayer_private_NavigationControllerImpl_JNI
#define org_chromium_weblayer_private_NavigationControllerImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_weblayer_1private_NavigationControllerImpl[];
const char kClassPath_org_chromium_weblayer_1private_NavigationControllerImpl[] =
    "org/chromium/weblayer_private/NavigationControllerImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_weblayer_1private_NavigationControllerImpl_clazz(nullptr);
#ifndef org_chromium_weblayer_1private_NavigationControllerImpl_clazz_defined
#define org_chromium_weblayer_1private_NavigationControllerImpl_clazz_defined
inline jclass org_chromium_weblayer_1private_NavigationControllerImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_weblayer_1private_NavigationControllerImpl,
      &g_org_chromium_weblayer_1private_NavigationControllerImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace weblayer {

JNI_GENERATOR_EXPORT void Java_J_N_MpejyhKI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetNavigationControllerImpl");
  return native->SetNavigationControllerImpl(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

static jlong JNI_NavigationControllerImpl_GetNavigationController(JNIEnv* env, jlong tab);

JNI_GENERATOR_EXPORT jlong Java_J_N_MuaFsixb(
    JNIEnv* env,
    jclass jcaller,
    jlong tab) {
  return JNI_NavigationControllerImpl_GetNavigationController(env, tab);
}

JNI_GENERATOR_EXPORT void Java_J_N_MdNsGAMH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller,
    jstring uri) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "Navigate");
  return native->Navigate(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, uri));
}

JNI_GENERATOR_EXPORT void Java_J_N_MZrOkH8X(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GoBack");
  return native->GoBack(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MDkifRYV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GoForward");
  return native->GoForward(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mk5Op77A(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "CanGoBack", false);
  return native->CanGoBack(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Myt080DX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "CanGoForward", false);
  return native->CanGoForward(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M0Oi_00024rdJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller,
    jint index) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GoToIndex");
  return native->GoToIndex(env, base::android::JavaParamRef<jobject>(env, caller), index);
}

JNI_GENERATOR_EXPORT void Java_J_N_MgCpZ61D(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "Reload");
  return native->Reload(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mcpd2RLR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "Stop");
  return native->Stop(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_MTQXD9PA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetNavigationListSize", 0);
  return native->GetNavigationListSize(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_MYvsya1k(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetNavigationListCurrentIndex", 0);
  return native->GetNavigationListCurrentIndex(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MdarrSGz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller,
    jint index) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetNavigationEntryDisplayUri", NULL);
  return native->GetNavigationEntryDisplayUri(env, base::android::JavaParamRef<jobject>(env,
      caller), index).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_ME_1QUEJm(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerImpl,
    jobject caller,
    jint index) {
  NavigationControllerImpl* native =
      reinterpret_cast<NavigationControllerImpl*>(nativeNavigationControllerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetNavigationEntryTitle", NULL);
  return native->GetNavigationEntryTitle(env, base::android::JavaParamRef<jobject>(env, caller),
      index).Release();
}


static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_NavigationControllerImpl_createNavigation(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_NavigationControllerImpl_createNavigation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeNavigationImpl) {
  jclass clazz = org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "createNavigation",
          "(J)Lorg/chromium/weblayer_private/NavigationImpl;",
          &g_org_chromium_weblayer_1private_NavigationControllerImpl_createNavigation);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, nativeNavigationImpl);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_NavigationControllerImpl_navigationStarted(nullptr);
static void Java_NavigationControllerImpl_navigationStarted(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& navigation) {
  jclass clazz = org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "navigationStarted",
          "(Lorg/chromium/weblayer_private/NavigationImpl;)V",
          &g_org_chromium_weblayer_1private_NavigationControllerImpl_navigationStarted);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, navigation.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_NavigationControllerImpl_navigationRedirected(nullptr);
static void Java_NavigationControllerImpl_navigationRedirected(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& navigation) {
  jclass clazz = org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "navigationRedirected",
          "(Lorg/chromium/weblayer_private/NavigationImpl;)V",
          &g_org_chromium_weblayer_1private_NavigationControllerImpl_navigationRedirected);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, navigation.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_NavigationControllerImpl_readyToCommitNavigation(nullptr);
static void Java_NavigationControllerImpl_readyToCommitNavigation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& navigation) {
  jclass clazz = org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "readyToCommitNavigation",
          "(Lorg/chromium/weblayer_private/NavigationImpl;)V",
          &g_org_chromium_weblayer_1private_NavigationControllerImpl_readyToCommitNavigation);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, navigation.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_NavigationControllerImpl_navigationCompleted(nullptr);
static void Java_NavigationControllerImpl_navigationCompleted(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& navigation) {
  jclass clazz = org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "navigationCompleted",
          "(Lorg/chromium/weblayer_private/NavigationImpl;)V",
          &g_org_chromium_weblayer_1private_NavigationControllerImpl_navigationCompleted);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, navigation.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_NavigationControllerImpl_navigationFailed(nullptr);
static void Java_NavigationControllerImpl_navigationFailed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& navigation) {
  jclass clazz = org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "navigationFailed",
          "(Lorg/chromium/weblayer_private/NavigationImpl;)V",
          &g_org_chromium_weblayer_1private_NavigationControllerImpl_navigationFailed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, navigation.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_NavigationControllerImpl_loadStateChanged(nullptr);
static void Java_NavigationControllerImpl_loadStateChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isLoading,
    jboolean toDifferentDocument) {
  jclass clazz = org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "loadStateChanged",
          "(ZZ)V",
          &g_org_chromium_weblayer_1private_NavigationControllerImpl_loadStateChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, isLoading, toDifferentDocument);
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_NavigationControllerImpl_loadProgressChanged(nullptr);
static void Java_NavigationControllerImpl_loadProgressChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jdouble progress) {
  jclass clazz = org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "loadProgressChanged",
          "(D)V",
          &g_org_chromium_weblayer_1private_NavigationControllerImpl_loadProgressChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, progress);
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_NavigationControllerImpl_onFirstContentfulPaint(nullptr);
static void Java_NavigationControllerImpl_onFirstContentfulPaint(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_NavigationControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onFirstContentfulPaint",
          "()V",
          &g_org_chromium_weblayer_1private_NavigationControllerImpl_onFirstContentfulPaint);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace weblayer

// Step 4: Generated test functions (optional).


#endif  // org_chromium_weblayer_private_NavigationControllerImpl_JNI
