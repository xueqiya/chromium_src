// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/weblayer_private/NavigationImpl

#ifndef org_chromium_weblayer_private_NavigationImpl_JNI
#define org_chromium_weblayer_private_NavigationImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_weblayer_1private_NavigationImpl[];
const char kClassPath_org_chromium_weblayer_1private_NavigationImpl[] =
    "org/chromium/weblayer_private/NavigationImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_weblayer_1private_NavigationImpl_clazz(nullptr);
#ifndef org_chromium_weblayer_1private_NavigationImpl_clazz_defined
#define org_chromium_weblayer_1private_NavigationImpl_clazz_defined
inline jclass org_chromium_weblayer_1private_NavigationImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_weblayer_1private_NavigationImpl,
      &g_org_chromium_weblayer_1private_NavigationImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace weblayer {

JNI_GENERATOR_EXPORT void Java_J_N_MAxzZ9OU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationImpl,
    jobject caller) {
  NavigationImpl* native = reinterpret_cast<NavigationImpl*>(nativeNavigationImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetJavaNavigation");
  return native->SetJavaNavigation(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_MOjYwlCQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationImpl,
    jobject caller) {
  NavigationImpl* native = reinterpret_cast<NavigationImpl*>(nativeNavigationImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetState", 0);
  return native->GetState(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MLe5UH8x(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationImpl,
    jobject caller) {
  NavigationImpl* native = reinterpret_cast<NavigationImpl*>(nativeNavigationImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetUri", NULL);
  return native->GetUri(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_M4_00024r2b34(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationImpl,
    jobject caller) {
  NavigationImpl* native = reinterpret_cast<NavigationImpl*>(nativeNavigationImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetRedirectChain", NULL);
  return native->GetRedirectChain(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jint Java_J_N_MavL_1hzo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationImpl,
    jobject caller) {
  NavigationImpl* native = reinterpret_cast<NavigationImpl*>(nativeNavigationImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetHttpStatusCode", 0);
  return native->GetHttpStatusCode(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MNvdMHI6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationImpl,
    jobject caller) {
  NavigationImpl* native = reinterpret_cast<NavigationImpl*>(nativeNavigationImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSameDocument", false);
  return native->IsSameDocument(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MIFgE7DZ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationImpl,
    jobject caller) {
  NavigationImpl* native = reinterpret_cast<NavigationImpl*>(nativeNavigationImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsErrorPage", false);
  return native->IsErrorPage(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_Mu3sbx92(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationImpl,
    jobject caller) {
  NavigationImpl* native = reinterpret_cast<NavigationImpl*>(nativeNavigationImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLoadError", 0);
  return native->GetLoadError(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_NavigationImpl_onNativeDestroyed(nullptr);
static void Java_NavigationImpl_onNativeDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_weblayer_1private_NavigationImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_NavigationImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroyed",
          "()V",
          &g_org_chromium_weblayer_1private_NavigationImpl_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace weblayer

// Step 4: Generated test functions (optional).


#endif  // org_chromium_weblayer_private_NavigationImpl_JNI
