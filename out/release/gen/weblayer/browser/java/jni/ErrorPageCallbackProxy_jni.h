// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/weblayer_private/ErrorPageCallbackProxy

#ifndef org_chromium_weblayer_private_ErrorPageCallbackProxy_JNI
#define org_chromium_weblayer_private_ErrorPageCallbackProxy_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_weblayer_1private_ErrorPageCallbackProxy[];
const char kClassPath_org_chromium_weblayer_1private_ErrorPageCallbackProxy[] =
    "org/chromium/weblayer_private/ErrorPageCallbackProxy";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_weblayer_1private_ErrorPageCallbackProxy_clazz(nullptr);
#ifndef org_chromium_weblayer_1private_ErrorPageCallbackProxy_clazz_defined
#define org_chromium_weblayer_1private_ErrorPageCallbackProxy_clazz_defined
inline jclass org_chromium_weblayer_1private_ErrorPageCallbackProxy_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_weblayer_1private_ErrorPageCallbackProxy,
      &g_org_chromium_weblayer_1private_ErrorPageCallbackProxy_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace weblayer {

static jlong JNI_ErrorPageCallbackProxy_CreateErrorPageCallbackProxy(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& proxy,
    jlong tab);

JNI_GENERATOR_EXPORT jlong Java_J_N_M0JND2JE(
    JNIEnv* env,
    jclass jcaller,
    jobject proxy,
    jlong tab) {
  return JNI_ErrorPageCallbackProxy_CreateErrorPageCallbackProxy(env,
      base::android::JavaParamRef<jobject>(env, proxy), tab);
}

static void JNI_ErrorPageCallbackProxy_DeleteErrorPageCallbackProxy(JNIEnv* env, jlong proxy);

JNI_GENERATOR_EXPORT void Java_J_N_MRiF9eNE(
    JNIEnv* env,
    jclass jcaller,
    jlong proxy) {
  return JNI_ErrorPageCallbackProxy_DeleteErrorPageCallbackProxy(env, proxy);
}


static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_ErrorPageCallbackProxy_onBackToSafety(nullptr);
static jboolean Java_ErrorPageCallbackProxy_onBackToSafety(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_weblayer_1private_ErrorPageCallbackProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_ErrorPageCallbackProxy_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onBackToSafety",
          "()Z",
          &g_org_chromium_weblayer_1private_ErrorPageCallbackProxy_onBackToSafety);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace weblayer

// Step 4: Generated test functions (optional).


#endif  // org_chromium_weblayer_private_ErrorPageCallbackProxy_JNI
