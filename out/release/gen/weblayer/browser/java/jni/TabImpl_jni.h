// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/weblayer_private/TabImpl

#ifndef org_chromium_weblayer_private_TabImpl_JNI
#define org_chromium_weblayer_private_TabImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_weblayer_1private_TabImpl[];
const char kClassPath_org_chromium_weblayer_1private_TabImpl[] =
    "org/chromium/weblayer_private/TabImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_weblayer_1private_TabImpl_clazz(nullptr);
#ifndef org_chromium_weblayer_1private_TabImpl_clazz_defined
#define org_chromium_weblayer_1private_TabImpl_clazz_defined
inline jclass org_chromium_weblayer_1private_TabImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_weblayer_1private_TabImpl,
      &g_org_chromium_weblayer_1private_TabImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace weblayer {

static jlong JNI_TabImpl_CreateTab(JNIEnv* env, jlong profile,
    const base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_M0NNPeB3(
    JNIEnv* env,
    jclass jcaller,
    jlong profile,
    jobject caller) {
  return JNI_TabImpl_CreateTab(env, profile, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MKSJ4vB6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabImpl,
    jobject impl) {
  TabImpl* native = reinterpret_cast<TabImpl*>(nativeTabImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetJavaImpl");
  return native->SetJavaImpl(env, base::android::JavaParamRef<jobject>(env, impl));
}

JNI_GENERATOR_EXPORT void Java_J_N_Myi236il(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabImpl,
    jobject autofillProvider) {
  TabImpl* native = reinterpret_cast<TabImpl*>(nativeTabImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAutofillProviderChanged");
  return native->OnAutofillProviderChanged(env, base::android::JavaParamRef<jobject>(env,
      autofillProvider));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mdvft_00024Wr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabImpl,
    jobject caller,
    jlong nativeTopControlsContainerView) {
  TabImpl* native = reinterpret_cast<TabImpl*>(nativeTabImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTopControlsContainerView");
  return native->SetTopControlsContainerView(env, base::android::JavaParamRef<jobject>(env, caller),
      nativeTopControlsContainerView);
}

static void JNI_TabImpl_DeleteTab(JNIEnv* env, jlong tab);

JNI_GENERATOR_EXPORT void Java_J_N_MD18T2Ck(
    JNIEnv* env,
    jclass jcaller,
    jlong tab) {
  return JNI_TabImpl_DeleteTab(env, tab);
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MV_1K4t5p(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabImpl,
    jobject caller) {
  TabImpl* native = reinterpret_cast<TabImpl*>(nativeTabImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetWebContents", NULL);
  return native->GetWebContents(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_M9gymlSj(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabImpl,
    jstring script,
    jboolean useSeparateIsolate,
    jobject callback) {
  TabImpl* native = reinterpret_cast<TabImpl*>(nativeTabImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ExecuteScript");
  return native->ExecuteScript(env, base::android::JavaParamRef<jstring>(env, script),
      useSeparateIsolate, base::android::JavaParamRef<jobject>(env, callback));
}


static std::atomic<jmethodID> g_org_chromium_weblayer_1private_TabImpl_createRectF(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TabImpl_createRectF(JNIEnv* env, jfloat x,
    jfloat y,
    jfloat right,
    jfloat bottom) {
  jclass clazz = org_chromium_weblayer_1private_TabImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_weblayer_1private_TabImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createRectF",
          "(FFFF)Landroid/graphics/RectF;",
          &g_org_chromium_weblayer_1private_TabImpl_createRectF);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, x, y, right, bottom);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_TabImpl_createFindMatchRectsDetails(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TabImpl_createFindMatchRectsDetails(JNIEnv*
    env, JniIntWrapper version,
    JniIntWrapper numRects,
    const base::android::JavaRef<jobject>& activeRect) {
  jclass clazz = org_chromium_weblayer_1private_TabImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_weblayer_1private_TabImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createFindMatchRectsDetails",
"(IILandroid/graphics/RectF;)Lorg/chromium/components/find_in_page/FindMatchRectsDetails;",
          &g_org_chromium_weblayer_1private_TabImpl_createFindMatchRectsDetails);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(version), as_jint(numRects), activeRect.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_weblayer_1private_TabImpl_setMatchRectByIndex(nullptr);
static void Java_TabImpl_setMatchRectByIndex(JNIEnv* env, const base::android::JavaRef<jobject>&
    findMatchRectsDetails,
    JniIntWrapper index,
    const base::android::JavaRef<jobject>& rect) {
  jclass clazz = org_chromium_weblayer_1private_TabImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_weblayer_1private_TabImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setMatchRectByIndex",
"(Lorg/chromium/components/find_in_page/FindMatchRectsDetails;ILandroid/graphics/RectF;)V",
          &g_org_chromium_weblayer_1private_TabImpl_setMatchRectByIndex);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, findMatchRectsDetails.obj(), as_jint(index), rect.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_TabImpl_onFindResultAvailable(nullptr);
static void Java_TabImpl_onFindResultAvailable(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper numberOfMatches,
    JniIntWrapper activeMatchOrdinal,
    jboolean finalUpdate) {
  jclass clazz = org_chromium_weblayer_1private_TabImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_TabImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onFindResultAvailable",
          "(IIZ)V",
          &g_org_chromium_weblayer_1private_TabImpl_onFindResultAvailable);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(numberOfMatches), as_jint(activeMatchOrdinal),
              finalUpdate);
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_TabImpl_onFindMatchRectsAvailable(nullptr);
static void Java_TabImpl_onFindMatchRectsAvailable(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& matchRects) {
  jclass clazz = org_chromium_weblayer_1private_TabImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_TabImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onFindMatchRectsAvailable",
          "(Lorg/chromium/components/find_in_page/FindMatchRectsDetails;)V",
          &g_org_chromium_weblayer_1private_TabImpl_onFindMatchRectsAvailable);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, matchRects.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_TabImpl_doBrowserControlsShrinkRendererSize(nullptr);
static jboolean Java_TabImpl_doBrowserControlsShrinkRendererSize(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_weblayer_1private_TabImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_TabImpl_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "doBrowserControlsShrinkRendererSize",
          "()Z",
          &g_org_chromium_weblayer_1private_TabImpl_doBrowserControlsShrinkRendererSize);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace weblayer

// Step 4: Generated test functions (optional).


#endif  // org_chromium_weblayer_private_TabImpl_JNI
