// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/weblayer_private/TabCallbackProxy

#ifndef org_chromium_weblayer_private_TabCallbackProxy_JNI
#define org_chromium_weblayer_private_TabCallbackProxy_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_weblayer_1private_TabCallbackProxy[];
const char kClassPath_org_chromium_weblayer_1private_TabCallbackProxy[] =
    "org/chromium/weblayer_private/TabCallbackProxy";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_weblayer_1private_TabCallbackProxy_clazz(nullptr);
#ifndef org_chromium_weblayer_1private_TabCallbackProxy_clazz_defined
#define org_chromium_weblayer_1private_TabCallbackProxy_clazz_defined
inline jclass org_chromium_weblayer_1private_TabCallbackProxy_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_weblayer_1private_TabCallbackProxy,
      &g_org_chromium_weblayer_1private_TabCallbackProxy_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace weblayer {

static jlong JNI_TabCallbackProxy_CreateTabCallbackProxy(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& proxy,
    jlong tab);

JNI_GENERATOR_EXPORT jlong Java_J_N_MOUs9Qy6(
    JNIEnv* env,
    jclass jcaller,
    jobject proxy,
    jlong tab) {
  return JNI_TabCallbackProxy_CreateTabCallbackProxy(env, base::android::JavaParamRef<jobject>(env,
      proxy), tab);
}

static void JNI_TabCallbackProxy_DeleteTabCallbackProxy(JNIEnv* env, jlong proxy);

JNI_GENERATOR_EXPORT void Java_J_N_Mpl66Ope(
    JNIEnv* env,
    jclass jcaller,
    jlong proxy) {
  return JNI_TabCallbackProxy_DeleteTabCallbackProxy(env, proxy);
}


static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_TabCallbackProxy_visibleUriChanged(nullptr);
static void Java_TabCallbackProxy_visibleUriChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& string) {
  jclass clazz = org_chromium_weblayer_1private_TabCallbackProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_TabCallbackProxy_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "visibleUriChanged",
          "(Ljava/lang/String;)V",
          &g_org_chromium_weblayer_1private_TabCallbackProxy_visibleUriChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, string.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_TabCallbackProxy_onRenderProcessGone(nullptr);
static void Java_TabCallbackProxy_onRenderProcessGone(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_weblayer_1private_TabCallbackProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_TabCallbackProxy_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onRenderProcessGone",
          "()V",
          &g_org_chromium_weblayer_1private_TabCallbackProxy_onRenderProcessGone);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace weblayer

// Step 4: Generated test functions (optional).


#endif  // org_chromium_weblayer_private_TabCallbackProxy_JNI
