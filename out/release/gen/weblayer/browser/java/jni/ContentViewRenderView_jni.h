// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/weblayer_private/ContentViewRenderView

#ifndef org_chromium_weblayer_private_ContentViewRenderView_JNI
#define org_chromium_weblayer_private_ContentViewRenderView_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_weblayer_1private_ContentViewRenderView[];
const char kClassPath_org_chromium_weblayer_1private_ContentViewRenderView[] =
    "org/chromium/weblayer_private/ContentViewRenderView";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_weblayer_1private_ContentViewRenderView_clazz(nullptr);
#ifndef org_chromium_weblayer_1private_ContentViewRenderView_clazz_defined
#define org_chromium_weblayer_1private_ContentViewRenderView_clazz_defined
inline jclass org_chromium_weblayer_1private_ContentViewRenderView_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_weblayer_1private_ContentViewRenderView,
      &g_org_chromium_weblayer_1private_ContentViewRenderView_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace weblayer {

static jlong JNI_ContentViewRenderView_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    const base::android::JavaParamRef<jobject>& rootWindow);

JNI_GENERATOR_EXPORT jlong Java_J_N_MuuxVGQm(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject rootWindow) {
  return JNI_ContentViewRenderView_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, rootWindow));
}

JNI_GENERATOR_EXPORT void Java_J_N_MAIaE0OG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentViewRenderView) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MYMjn0mf(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentViewRenderView,
    jobject webContents) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetCurrentWebContents");
  return native->SetCurrentWebContents(env, base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_MQtCkWmJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentViewRenderView,
    jobject webContents,
    jint width,
    jint height) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPhysicalBackingSizeChanged");
  return native->OnPhysicalBackingSizeChanged(env, base::android::JavaParamRef<jobject>(env,
      webContents), width, height);
}

JNI_GENERATOR_EXPORT void Java_J_N_MUdnoeZS(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentViewRenderView) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceCreated");
  return native->SurfaceCreated(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MfxYKOP7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentViewRenderView,
    jboolean cacheBackBuffer) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceDestroyed");
  return native->SurfaceDestroyed(env, cacheBackBuffer);
}

JNI_GENERATOR_EXPORT void Java_J_N_M4g6Q4ab(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentViewRenderView,
    jboolean canBeUsedWithSurfaceControl,
    jint format,
    jint width,
    jint height,
    jobject surface) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceChanged");
  return native->SurfaceChanged(env, canBeUsedWithSurfaceControl, format, width, height,
      base::android::JavaParamRef<jobject>(env, surface));
}

JNI_GENERATOR_EXPORT void Java_J_N_M9bR5p1w(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentViewRenderView) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "EvictCachedSurface");
  return native->EvictCachedSurface(env);
}

JNI_GENERATOR_EXPORT jobject Java_J_N_M7ewD88L(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentViewRenderView) {
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetResourceManager", NULL);
  return native->GetResourceManager(env).Release();
}


static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_ContentViewRenderView_didSwapFrame(nullptr);
static jboolean Java_ContentViewRenderView_didSwapFrame(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_weblayer_1private_ContentViewRenderView_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_ContentViewRenderView_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "didSwapFrame",
          "()Z",
          &g_org_chromium_weblayer_1private_ContentViewRenderView_didSwapFrame);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace weblayer

// Step 4: Generated test functions (optional).


#endif  // org_chromium_weblayer_private_ContentViewRenderView_JNI
