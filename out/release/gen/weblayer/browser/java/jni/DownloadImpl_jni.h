// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/weblayer_private/DownloadImpl

#ifndef org_chromium_weblayer_private_DownloadImpl_JNI
#define org_chromium_weblayer_private_DownloadImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_weblayer_1private_DownloadImpl[];
const char kClassPath_org_chromium_weblayer_1private_DownloadImpl[] =
    "org/chromium/weblayer_private/DownloadImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_weblayer_1private_DownloadImpl_clazz(nullptr);
#ifndef org_chromium_weblayer_1private_DownloadImpl_clazz_defined
#define org_chromium_weblayer_1private_DownloadImpl_clazz_defined
inline jclass org_chromium_weblayer_1private_DownloadImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_weblayer_1private_DownloadImpl,
      &g_org_chromium_weblayer_1private_DownloadImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace weblayer {

JNI_GENERATOR_EXPORT void Java_J_N_MCQjxfAX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadImpl,
    jobject caller) {
  DownloadImpl* native = reinterpret_cast<DownloadImpl*>(nativeDownloadImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetJavaDownload");
  return native->SetJavaDownload(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_Mg9vWlA3(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadImpl,
    jobject caller) {
  DownloadImpl* native = reinterpret_cast<DownloadImpl*>(nativeDownloadImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetState", 0);
  return native->GetState(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jlong Java_J_N_MLQnpV49(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadImpl,
    jobject caller) {
  DownloadImpl* native = reinterpret_cast<DownloadImpl*>(nativeDownloadImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTotalBytes", 0);
  return native->GetTotalBytes(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jlong Java_J_N_MLPJbQwI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadImpl,
    jobject caller) {
  DownloadImpl* native = reinterpret_cast<DownloadImpl*>(nativeDownloadImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetReceivedBytes", 0);
  return native->GetReceivedBytes(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mmh9t8Wp(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadImpl,
    jobject caller) {
  DownloadImpl* native = reinterpret_cast<DownloadImpl*>(nativeDownloadImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "Pause");
  return native->Pause(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MBdFHh_1o(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadImpl,
    jobject caller) {
  DownloadImpl* native = reinterpret_cast<DownloadImpl*>(nativeDownloadImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "Resume");
  return native->Resume(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M7ycbCea(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadImpl,
    jobject caller) {
  DownloadImpl* native = reinterpret_cast<DownloadImpl*>(nativeDownloadImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "Cancel");
  return native->Cancel(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MBNW0Bg1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadImpl,
    jobject caller) {
  DownloadImpl* native = reinterpret_cast<DownloadImpl*>(nativeDownloadImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLocation", NULL);
  return native->GetLocation(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MiYZ62wR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadImpl,
    jobject caller) {
  DownloadImpl* native = reinterpret_cast<DownloadImpl*>(nativeDownloadImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetMimeTypeImpl", NULL);
  return native->GetMimeTypeImpl(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jint Java_J_N_MMo_00024maOT(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadImpl,
    jobject caller) {
  DownloadImpl* native = reinterpret_cast<DownloadImpl*>(nativeDownloadImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetError", 0);
  return native->GetError(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_weblayer_1private_DownloadImpl_onNativeDestroyed(nullptr);
static void Java_DownloadImpl_onNativeDestroyed(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_weblayer_1private_DownloadImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_weblayer_1private_DownloadImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroyed",
          "()V",
          &g_org_chromium_weblayer_1private_DownloadImpl_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace weblayer

// Step 4: Generated test functions (optional).


#endif  // org_chromium_weblayer_private_DownloadImpl_JNI
