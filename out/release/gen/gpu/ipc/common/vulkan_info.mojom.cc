// gpu/ipc/common/vulkan_info.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "gpu/ipc/common/vulkan_info.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "gpu/ipc/common/vulkan_info.mojom-params-data.h"
#include "gpu/ipc/common/vulkan_info.mojom-shared-message-ids.h"

#include "gpu/ipc/common/vulkan_info.mojom-import-headers.h"


#ifndef GPU_IPC_COMMON_VULKAN_INFO_MOJOM_JUMBO_H_
#define GPU_IPC_COMMON_VULKAN_INFO_MOJOM_JUMBO_H_
#include "gpu/ipc/common/vulkan_info_mojom_traits.h"
#include "gpu/ipc/common/vulkan_types_mojom_traits.h"
#endif
namespace gpu {
namespace mojom {
VulkanPhysicalDeviceInfo::VulkanPhysicalDeviceInfo()
    : properties(),
      extensions(),
      layers(),
      features(),
      feature_sampler_ycbcr_conversion(),
      feature_protected_memory(),
      queue_families() {}

VulkanPhysicalDeviceInfo::VulkanPhysicalDeviceInfo(
    const ::VkPhysicalDeviceProperties& properties_in,
    std::vector<::VkExtensionProperties> extensions_in,
    std::vector<::VkLayerProperties> layers_in,
    const ::VkPhysicalDeviceFeatures& features_in,
    bool feature_sampler_ycbcr_conversion_in,
    bool feature_protected_memory_in,
    std::vector<::VkQueueFamilyProperties> queue_families_in)
    : properties(std::move(properties_in)),
      extensions(std::move(extensions_in)),
      layers(std::move(layers_in)),
      features(std::move(features_in)),
      feature_sampler_ycbcr_conversion(std::move(feature_sampler_ycbcr_conversion_in)),
      feature_protected_memory(std::move(feature_protected_memory_in)),
      queue_families(std::move(queue_families_in)) {}

VulkanPhysicalDeviceInfo::~VulkanPhysicalDeviceInfo() = default;

bool VulkanPhysicalDeviceInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
VulkanInfo::VulkanInfo()
    : api_version(),
      used_api_version(),
      instance_extensions(),
      enabled_instance_extensions(),
      instance_layers(),
      physical_devices() {}

VulkanInfo::VulkanInfo(
    uint32_t api_version_in,
    uint32_t used_api_version_in,
    std::vector<::VkExtensionProperties> instance_extensions_in,
    std::vector<std::string> enabled_instance_extensions_in,
    std::vector<::VkLayerProperties> instance_layers_in,
    std::vector<::gpu::VulkanPhysicalDeviceInfo> physical_devices_in)
    : api_version(std::move(api_version_in)),
      used_api_version(std::move(used_api_version_in)),
      instance_extensions(std::move(instance_extensions_in)),
      enabled_instance_extensions(std::move(enabled_instance_extensions_in)),
      instance_layers(std::move(instance_layers_in)),
      physical_devices(std::move(physical_devices_in)) {}

VulkanInfo::~VulkanInfo() = default;

bool VulkanInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace gpu

namespace mojo {


// static
bool StructTraits<::gpu::mojom::VulkanPhysicalDeviceInfo::DataView, ::gpu::mojom::VulkanPhysicalDeviceInfoPtr>::Read(
    ::gpu::mojom::VulkanPhysicalDeviceInfo::DataView input,
    ::gpu::mojom::VulkanPhysicalDeviceInfoPtr* output) {
  bool success = true;
  ::gpu::mojom::VulkanPhysicalDeviceInfoPtr result(::gpu::mojom::VulkanPhysicalDeviceInfo::New());
  
      if (success && !input.ReadProperties(&result->properties))
        success = false;
      if (success && !input.ReadExtensions(&result->extensions))
        success = false;
      if (success && !input.ReadLayers(&result->layers))
        success = false;
      if (success && !input.ReadFeatures(&result->features))
        success = false;
      if (success)
        result->feature_sampler_ycbcr_conversion = input.feature_sampler_ycbcr_conversion();
      if (success)
        result->feature_protected_memory = input.feature_protected_memory();
      if (success && !input.ReadQueueFamilies(&result->queue_families))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::gpu::mojom::VulkanInfo::DataView, ::gpu::mojom::VulkanInfoPtr>::Read(
    ::gpu::mojom::VulkanInfo::DataView input,
    ::gpu::mojom::VulkanInfoPtr* output) {
  bool success = true;
  ::gpu::mojom::VulkanInfoPtr result(::gpu::mojom::VulkanInfo::New());
  
      if (success)
        result->api_version = input.api_version();
      if (success)
        result->used_api_version = input.used_api_version();
      if (success && !input.ReadInstanceExtensions(&result->instance_extensions))
        success = false;
      if (success && !input.ReadEnabledInstanceExtensions(&result->enabled_instance_extensions))
        success = false;
      if (success && !input.ReadInstanceLayers(&result->instance_layers))
        success = false;
      if (success && !input.ReadPhysicalDevices(&result->physical_devices))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif