// gpu/ipc/common/gpu_extra_info.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "gpu/ipc/common/gpu_extra_info.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "gpu/ipc/common/gpu_extra_info.mojom-params-data.h"
#include "gpu/ipc/common/gpu_extra_info.mojom-shared-message-ids.h"

#include "gpu/ipc/common/gpu_extra_info.mojom-import-headers.h"


#ifndef GPU_IPC_COMMON_GPU_EXTRA_INFO_MOJOM_JUMBO_H_
#define GPU_IPC_COMMON_GPU_EXTRA_INFO_MOJOM_JUMBO_H_
#include "gpu/ipc/common/gpu_extra_info_mojom_traits.h"
#endif
namespace gpu {
namespace mojom {
ANGLEFeature::ANGLEFeature()
    : name(),
      category(),
      description(),
      bug(),
      status(),
      condition() {}

ANGLEFeature::ANGLEFeature(
    const std::string& name_in,
    const std::string& category_in,
    const std::string& description_in,
    const std::string& bug_in,
    const std::string& status_in,
    const std::string& condition_in)
    : name(std::move(name_in)),
      category(std::move(category_in)),
      description(std::move(description_in)),
      bug(std::move(bug_in)),
      status(std::move(status_in)),
      condition(std::move(condition_in)) {}

ANGLEFeature::~ANGLEFeature() = default;

bool ANGLEFeature::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
GpuExtraInfo::GpuExtraInfo()
    : angle_features() {}

GpuExtraInfo::GpuExtraInfo(
    std::vector<::gpu::ANGLEFeature> angle_features_in)
    : angle_features(std::move(angle_features_in)) {}

GpuExtraInfo::~GpuExtraInfo() = default;

bool GpuExtraInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace gpu

namespace mojo {


// static
bool StructTraits<::gpu::mojom::ANGLEFeature::DataView, ::gpu::mojom::ANGLEFeaturePtr>::Read(
    ::gpu::mojom::ANGLEFeature::DataView input,
    ::gpu::mojom::ANGLEFeaturePtr* output) {
  bool success = true;
  ::gpu::mojom::ANGLEFeaturePtr result(::gpu::mojom::ANGLEFeature::New());
  
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadCategory(&result->category))
        success = false;
      if (success && !input.ReadDescription(&result->description))
        success = false;
      if (success && !input.ReadBug(&result->bug))
        success = false;
      if (success && !input.ReadStatus(&result->status))
        success = false;
      if (success && !input.ReadCondition(&result->condition))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::gpu::mojom::GpuExtraInfo::DataView, ::gpu::mojom::GpuExtraInfoPtr>::Read(
    ::gpu::mojom::GpuExtraInfo::DataView input,
    ::gpu::mojom::GpuExtraInfoPtr* output) {
  bool success = true;
  ::gpu::mojom::GpuExtraInfoPtr result(::gpu::mojom::GpuExtraInfo::New());
  
      if (success && !input.ReadAngleFeatures(&result->angle_features))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif