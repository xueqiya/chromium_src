// gpu/ipc/common/gpu_extra_info.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef GPU_IPC_COMMON_GPU_EXTRA_INFO_MOJOM_H_
#define GPU_IPC_COMMON_GPU_EXTRA_INFO_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "gpu/ipc/common/gpu_extra_info.mojom-shared.h"
#include "gpu/ipc/common/gpu_extra_info.mojom-forward.h"
#include "ui/gfx/mojom/buffer_types.mojom.h"
#include <string>
#include <vector>




#include "gpu/config/gpu_extra_info.h"




namespace gpu {
namespace mojom {









class  ANGLEFeature {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ANGLEFeature, T>::value>;
  using DataView = ANGLEFeatureDataView;
  using Data_ = internal::ANGLEFeature_Data;

  template <typename... Args>
  static ANGLEFeaturePtr New(Args&&... args) {
    return ANGLEFeaturePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ANGLEFeaturePtr From(const U& u) {
    return mojo::TypeConverter<ANGLEFeaturePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ANGLEFeature>::Convert(*this);
  }


  ANGLEFeature();

  ANGLEFeature(
      const std::string& name,
      const std::string& category,
      const std::string& description,
      const std::string& bug,
      const std::string& status,
      const std::string& condition);

  ~ANGLEFeature();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ANGLEFeaturePtr>
  ANGLEFeaturePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ANGLEFeature::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ANGLEFeature::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ANGLEFeature::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ANGLEFeature_UnserializedMessageContext<
            UserType, ANGLEFeature::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<ANGLEFeature::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ANGLEFeature::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ANGLEFeature_UnserializedMessageContext<
            UserType, ANGLEFeature::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ANGLEFeature::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  std::string name;
  
  std::string category;
  
  std::string description;
  
  std::string bug;
  
  std::string status;
  
  std::string condition;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ANGLEFeature::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ANGLEFeature::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ANGLEFeature::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ANGLEFeature::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  GpuExtraInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<GpuExtraInfo, T>::value>;
  using DataView = GpuExtraInfoDataView;
  using Data_ = internal::GpuExtraInfo_Data;

  template <typename... Args>
  static GpuExtraInfoPtr New(Args&&... args) {
    return GpuExtraInfoPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static GpuExtraInfoPtr From(const U& u) {
    return mojo::TypeConverter<GpuExtraInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, GpuExtraInfo>::Convert(*this);
  }


  GpuExtraInfo();

  explicit GpuExtraInfo(
      std::vector<::gpu::ANGLEFeature> angle_features);

  ~GpuExtraInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = GpuExtraInfoPtr>
  GpuExtraInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, GpuExtraInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        GpuExtraInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        GpuExtraInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::GpuExtraInfo_UnserializedMessageContext<
            UserType, GpuExtraInfo::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<GpuExtraInfo::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return GpuExtraInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::GpuExtraInfo_UnserializedMessageContext<
            UserType, GpuExtraInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<GpuExtraInfo::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  std::vector<::gpu::ANGLEFeature> angle_features;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, GpuExtraInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, GpuExtraInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, GpuExtraInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, GpuExtraInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
ANGLEFeaturePtr ANGLEFeature::Clone() const {
  return New(
      mojo::Clone(name),
      mojo::Clone(category),
      mojo::Clone(description),
      mojo::Clone(bug),
      mojo::Clone(status),
      mojo::Clone(condition)
  );
}

template <typename T, ANGLEFeature::EnableIfSame<T>*>
bool ANGLEFeature::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->name, other_struct.name))
    return false;
  if (!mojo::Equals(this->category, other_struct.category))
    return false;
  if (!mojo::Equals(this->description, other_struct.description))
    return false;
  if (!mojo::Equals(this->bug, other_struct.bug))
    return false;
  if (!mojo::Equals(this->status, other_struct.status))
    return false;
  if (!mojo::Equals(this->condition, other_struct.condition))
    return false;
  return true;
}

template <typename T, ANGLEFeature::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.name < rhs.name)
    return true;
  if (rhs.name < lhs.name)
    return false;
  if (lhs.category < rhs.category)
    return true;
  if (rhs.category < lhs.category)
    return false;
  if (lhs.description < rhs.description)
    return true;
  if (rhs.description < lhs.description)
    return false;
  if (lhs.bug < rhs.bug)
    return true;
  if (rhs.bug < lhs.bug)
    return false;
  if (lhs.status < rhs.status)
    return true;
  if (rhs.status < lhs.status)
    return false;
  if (lhs.condition < rhs.condition)
    return true;
  if (rhs.condition < lhs.condition)
    return false;
  return false;
}
template <typename StructPtrType>
GpuExtraInfoPtr GpuExtraInfo::Clone() const {
  return New(
      mojo::Clone(angle_features)
  );
}

template <typename T, GpuExtraInfo::EnableIfSame<T>*>
bool GpuExtraInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->angle_features, other_struct.angle_features))
    return false;
  return true;
}

template <typename T, GpuExtraInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.angle_features < rhs.angle_features)
    return true;
  if (rhs.angle_features < lhs.angle_features)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace gpu

namespace mojo {


template <>
struct  StructTraits<::gpu::mojom::ANGLEFeature::DataView,
                                         ::gpu::mojom::ANGLEFeaturePtr> {
  static bool IsNull(const ::gpu::mojom::ANGLEFeaturePtr& input) { return !input; }
  static void SetToNull(::gpu::mojom::ANGLEFeaturePtr* output) { output->reset(); }

  static const decltype(::gpu::mojom::ANGLEFeature::name)& name(
      const ::gpu::mojom::ANGLEFeaturePtr& input) {
    return input->name;
  }

  static const decltype(::gpu::mojom::ANGLEFeature::category)& category(
      const ::gpu::mojom::ANGLEFeaturePtr& input) {
    return input->category;
  }

  static const decltype(::gpu::mojom::ANGLEFeature::description)& description(
      const ::gpu::mojom::ANGLEFeaturePtr& input) {
    return input->description;
  }

  static const decltype(::gpu::mojom::ANGLEFeature::bug)& bug(
      const ::gpu::mojom::ANGLEFeaturePtr& input) {
    return input->bug;
  }

  static const decltype(::gpu::mojom::ANGLEFeature::status)& status(
      const ::gpu::mojom::ANGLEFeaturePtr& input) {
    return input->status;
  }

  static const decltype(::gpu::mojom::ANGLEFeature::condition)& condition(
      const ::gpu::mojom::ANGLEFeaturePtr& input) {
    return input->condition;
  }

  static bool Read(::gpu::mojom::ANGLEFeature::DataView input, ::gpu::mojom::ANGLEFeaturePtr* output);
};


template <>
struct  StructTraits<::gpu::mojom::GpuExtraInfo::DataView,
                                         ::gpu::mojom::GpuExtraInfoPtr> {
  static bool IsNull(const ::gpu::mojom::GpuExtraInfoPtr& input) { return !input; }
  static void SetToNull(::gpu::mojom::GpuExtraInfoPtr* output) { output->reset(); }

  static const decltype(::gpu::mojom::GpuExtraInfo::angle_features)& angle_features(
      const ::gpu::mojom::GpuExtraInfoPtr& input) {
    return input->angle_features;
  }

  static bool Read(::gpu::mojom::GpuExtraInfo::DataView input, ::gpu::mojom::GpuExtraInfoPtr* output);
};

}  // namespace mojo

#endif  // GPU_IPC_COMMON_GPU_EXTRA_INFO_MOJOM_H_