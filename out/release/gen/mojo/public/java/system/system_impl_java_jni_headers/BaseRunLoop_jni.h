// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/mojo/system/impl/BaseRunLoop

#ifndef org_chromium_mojo_system_impl_BaseRunLoop_JNI
#define org_chromium_mojo_system_impl_BaseRunLoop_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_mojo_system_impl_BaseRunLoop[];
const char kClassPath_org_chromium_mojo_system_impl_BaseRunLoop[] =
    "org/chromium/mojo/system/impl/BaseRunLoop";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_mojo_system_impl_BaseRunLoop_clazz(nullptr);
#ifndef org_chromium_mojo_system_impl_BaseRunLoop_clazz_defined
#define org_chromium_mojo_system_impl_BaseRunLoop_clazz_defined
inline jclass org_chromium_mojo_system_impl_BaseRunLoop_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_mojo_system_impl_BaseRunLoop,
      &g_org_chromium_mojo_system_impl_BaseRunLoop_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace mojo {
namespace android {

static jlong JNI_BaseRunLoop_CreateBaseRunLoop(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MOJ55i7J(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_BaseRunLoop_CreateBaseRunLoop(env, base::android::JavaParamRef<jobject>(env, caller));
}

static void JNI_BaseRunLoop_Run(JNIEnv* env, const base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT void Java_J_N_MWXT8JHC(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_BaseRunLoop_Run(env, base::android::JavaParamRef<jobject>(env, caller));
}

static void JNI_BaseRunLoop_RunUntilIdle(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT void Java_J_N_MeWGVAnX(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_BaseRunLoop_RunUntilIdle(env, base::android::JavaParamRef<jobject>(env, caller));
}

static void JNI_BaseRunLoop_Quit(JNIEnv* env, const base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT void Java_J_N_MvPYY0Pk(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_BaseRunLoop_Quit(env, base::android::JavaParamRef<jobject>(env, caller));
}

static void JNI_BaseRunLoop_PostDelayedTask(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    jlong runLoopID,
    const base::android::JavaParamRef<jobject>& runnable,
    jlong delay);

JNI_GENERATOR_EXPORT void Java_J_N_Mg_00024AGbqU(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong runLoopID,
    jobject runnable,
    jlong delay) {
  return JNI_BaseRunLoop_PostDelayedTask(env, base::android::JavaParamRef<jobject>(env, caller),
      runLoopID, base::android::JavaParamRef<jobject>(env, runnable), delay);
}

static void JNI_BaseRunLoop_DeleteMessageLoop(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jlong runLoopID);

JNI_GENERATOR_EXPORT void Java_J_N_MEexSuCr(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong runLoopID) {
  return JNI_BaseRunLoop_DeleteMessageLoop(env, base::android::JavaParamRef<jobject>(env, caller),
      runLoopID);
}


static std::atomic<jmethodID> g_org_chromium_mojo_system_impl_BaseRunLoop_runRunnable(nullptr);
static void Java_BaseRunLoop_runRunnable(JNIEnv* env, const base::android::JavaRef<jobject>&
    runnable) {
  jclass clazz = org_chromium_mojo_system_impl_BaseRunLoop_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_mojo_system_impl_BaseRunLoop_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "runRunnable",
          "(Ljava/lang/Runnable;)V",
          &g_org_chromium_mojo_system_impl_BaseRunLoop_runRunnable);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, runnable.obj());
}

}  // namespace android
}  // namespace mojo

// Step 4: Generated test functions (optional).


#endif  // org_chromium_mojo_system_impl_BaseRunLoop_JNI
