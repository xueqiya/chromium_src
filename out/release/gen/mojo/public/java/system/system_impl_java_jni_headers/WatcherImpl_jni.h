// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/mojo/system/impl/WatcherImpl

#ifndef org_chromium_mojo_system_impl_WatcherImpl_JNI
#define org_chromium_mojo_system_impl_WatcherImpl_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_mojo_system_impl_WatcherImpl[];
const char kClassPath_org_chromium_mojo_system_impl_WatcherImpl[] =
    "org/chromium/mojo/system/impl/WatcherImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_mojo_system_impl_WatcherImpl_clazz(nullptr);
#ifndef org_chromium_mojo_system_impl_WatcherImpl_clazz_defined
#define org_chromium_mojo_system_impl_WatcherImpl_clazz_defined
inline jclass org_chromium_mojo_system_impl_WatcherImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_mojo_system_impl_WatcherImpl,
      &g_org_chromium_mojo_system_impl_WatcherImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace mojo {
namespace android {

static jlong JNI_WatcherImpl_CreateWatcher(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MXGgOw9k(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_WatcherImpl_CreateWatcher(env, base::android::JavaParamRef<jobject>(env, caller));
}

static jint JNI_WatcherImpl_Start(JNIEnv* env, const base::android::JavaParamRef<jobject>& caller,
    jlong implPtr,
    jint mojoHandle,
    jint flags);

JNI_GENERATOR_EXPORT jint Java_J_N_MOmBVeTt(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong implPtr,
    jint mojoHandle,
    jint flags) {
  return JNI_WatcherImpl_Start(env, base::android::JavaParamRef<jobject>(env, caller), implPtr,
      mojoHandle, flags);
}

static void JNI_WatcherImpl_Cancel(JNIEnv* env, const base::android::JavaParamRef<jobject>& caller,
    jlong implPtr);

JNI_GENERATOR_EXPORT void Java_J_N_MPTT407x(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong implPtr) {
  return JNI_WatcherImpl_Cancel(env, base::android::JavaParamRef<jobject>(env, caller), implPtr);
}

static void JNI_WatcherImpl_Delete(JNIEnv* env, const base::android::JavaParamRef<jobject>& caller,
    jlong implPtr);

JNI_GENERATOR_EXPORT void Java_J_N_Mi32vqDA(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong implPtr) {
  return JNI_WatcherImpl_Delete(env, base::android::JavaParamRef<jobject>(env, caller), implPtr);
}


static std::atomic<jmethodID> g_org_chromium_mojo_system_impl_WatcherImpl_onHandleReady(nullptr);
static void Java_WatcherImpl_onHandleReady(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    JniIntWrapper result) {
  jclass clazz = org_chromium_mojo_system_impl_WatcherImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_mojo_system_impl_WatcherImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onHandleReady",
          "(I)V",
          &g_org_chromium_mojo_system_impl_WatcherImpl_onHandleReady);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(result));
}

}  // namespace android
}  // namespace mojo

// Step 4: Generated test functions (optional).


#endif  // org_chromium_mojo_system_impl_WatcherImpl_JNI
