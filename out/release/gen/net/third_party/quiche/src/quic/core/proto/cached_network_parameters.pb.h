// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cached_network_parameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cached_5fnetwork_5fparameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cached_5fnetwork_5fparameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include "net/base/net_export.h"
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cached_5fnetwork_5fparameters_2eproto NET_EXPORT_PRIVATE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct NET_EXPORT_PRIVATE TableStruct_cached_5fnetwork_5fparameters_2eproto {
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace quic {
class CachedNetworkParameters;
class CachedNetworkParametersDefaultTypeInternal;
NET_EXPORT_PRIVATE extern CachedNetworkParametersDefaultTypeInternal _CachedNetworkParameters_default_instance_;
}  // namespace quic
PROTOBUF_NAMESPACE_OPEN
template<> NET_EXPORT_PRIVATE ::quic::CachedNetworkParameters* Arena::CreateMaybeMessage<::quic::CachedNetworkParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace quic {

enum CachedNetworkParameters_PreviousConnectionState : int {
CachedNetworkParameters_PreviousConnectionState_SLOW_START = 0,
CachedNetworkParameters_PreviousConnectionState_CONGESTION_AVOIDANCE = 1
};
NET_EXPORT_PRIVATE bool CachedNetworkParameters_PreviousConnectionState_IsValid(int value);
constexpr CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_MIN = CachedNetworkParameters_PreviousConnectionState_SLOW_START;
constexpr CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_MAX = CachedNetworkParameters_PreviousConnectionState_CONGESTION_AVOIDANCE;
constexpr int CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_ARRAYSIZE = CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_MAX + 1;

const std::string& CachedNetworkParameters_PreviousConnectionState_Name(CachedNetworkParameters_PreviousConnectionState value);
template<typename T>
inline const std::string& CachedNetworkParameters_PreviousConnectionState_Name(T enum_t_value) {
static_assert(::std::is_same<T, CachedNetworkParameters_PreviousConnectionState>::value ||
::std::is_integral<T>::value,
"Incorrect type passed to function CachedNetworkParameters_PreviousConnectionState_Name.");
return CachedNetworkParameters_PreviousConnectionState_Name(static_cast<CachedNetworkParameters_PreviousConnectionState>(enum_t_value));
}
bool CachedNetworkParameters_PreviousConnectionState_Parse(
const std::string& name, CachedNetworkParameters_PreviousConnectionState* value);
// ===================================================================

class NET_EXPORT_PRIVATE CachedNetworkParameters :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:quic.CachedNetworkParameters) */ {
public:
CachedNetworkParameters();
virtual ~CachedNetworkParameters();

CachedNetworkParameters(const CachedNetworkParameters& from);
CachedNetworkParameters(CachedNetworkParameters&& from) noexcept
: CachedNetworkParameters() {
*this = ::std::move(from);
}

inline CachedNetworkParameters& operator=(const CachedNetworkParameters& from) {
CopyFrom(from);
return *this;
}
inline CachedNetworkParameters& operator=(CachedNetworkParameters&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const CachedNetworkParameters& default_instance();

static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
static inline const CachedNetworkParameters* internal_default_instance() {
return reinterpret_cast<const CachedNetworkParameters*>(
&_CachedNetworkParameters_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

friend void swap(CachedNetworkParameters& a, CachedNetworkParameters& b) {
a.Swap(&b);
}
inline void Swap(CachedNetworkParameters* other) {
if (other == this) return;
InternalSwap(other);
}

// implements Message ----------------------------------------------

inline CachedNetworkParameters* New() const final {
return CreateMaybeMessage<CachedNetworkParameters>(nullptr);
}

CachedNetworkParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
return CreateMaybeMessage<CachedNetworkParameters>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
final;
void CopyFrom(const CachedNetworkParameters& from);
void MergeFrom(const CachedNetworkParameters& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
bool MergePartialFromCodedStream(
::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
void SerializeWithCachedSizes(
::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
void DiscardUnknownFields();
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
inline void SharedCtor();
inline void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(CachedNetworkParameters* other);
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "quic.CachedNetworkParameters";
}
private:
inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
return nullptr;
}
inline void* MaybeArenaPtr() const {
return nullptr;
}
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

typedef CachedNetworkParameters_PreviousConnectionState PreviousConnectionState;
static constexpr PreviousConnectionState SLOW_START =
CachedNetworkParameters_PreviousConnectionState_SLOW_START;
static constexpr PreviousConnectionState CONGESTION_AVOIDANCE =
CachedNetworkParameters_PreviousConnectionState_CONGESTION_AVOIDANCE;
static inline bool PreviousConnectionState_IsValid(int value) {
return CachedNetworkParameters_PreviousConnectionState_IsValid(value);
}
static constexpr PreviousConnectionState PreviousConnectionState_MIN =
CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_MIN;
static constexpr PreviousConnectionState PreviousConnectionState_MAX =
CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_MAX;
static constexpr int PreviousConnectionState_ARRAYSIZE =
CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_ARRAYSIZE;
template<typename T>
static inline const std::string& PreviousConnectionState_Name(T enum_t_value) {
static_assert(::std::is_same<T, PreviousConnectionState>::value ||
::std::is_integral<T>::value,
"Incorrect type passed to function PreviousConnectionState_Name.");
return CachedNetworkParameters_PreviousConnectionState_Name(enum_t_value);
}
static inline bool PreviousConnectionState_Parse(const std::string& name,
PreviousConnectionState* value) {
return CachedNetworkParameters_PreviousConnectionState_Parse(name, value);
}

// accessors -------------------------------------------------------

enum : int {
kServingRegionFieldNumber = 1,
kBandwidthEstimateBytesPerSecondFieldNumber = 2,
kMinRttMsFieldNumber = 3,
kPreviousConnectionStateFieldNumber = 4,
kMaxBandwidthEstimateBytesPerSecondFieldNumber = 5,
kMaxBandwidthTimestampSecondsFieldNumber = 6,
kTimestampFieldNumber = 7,
};
// optional string serving_region = 1;
bool has_serving_region() const;
void clear_serving_region();
const std::string& serving_region() const;
void set_serving_region(const std::string& value);
void set_serving_region(std::string&& value);
void set_serving_region(const char* value);
void set_serving_region(const char* value, size_t size);
std::string* mutable_serving_region();
std::string* release_serving_region();
void set_allocated_serving_region(std::string* serving_region);

// optional int32 bandwidth_estimate_bytes_per_second = 2;
bool has_bandwidth_estimate_bytes_per_second() const;
void clear_bandwidth_estimate_bytes_per_second();
::PROTOBUF_NAMESPACE_ID::int32 bandwidth_estimate_bytes_per_second() const;
void set_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);

// optional int32 min_rtt_ms = 3;
bool has_min_rtt_ms() const;
void clear_min_rtt_ms();
::PROTOBUF_NAMESPACE_ID::int32 min_rtt_ms() const;
void set_min_rtt_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

// optional int32 previous_connection_state = 4;
bool has_previous_connection_state() const;
void clear_previous_connection_state();
::PROTOBUF_NAMESPACE_ID::int32 previous_connection_state() const;
void set_previous_connection_state(::PROTOBUF_NAMESPACE_ID::int32 value);

// optional int32 max_bandwidth_estimate_bytes_per_second = 5;
bool has_max_bandwidth_estimate_bytes_per_second() const;
void clear_max_bandwidth_estimate_bytes_per_second();
::PROTOBUF_NAMESPACE_ID::int32 max_bandwidth_estimate_bytes_per_second() const;
void set_max_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);

// optional int64 max_bandwidth_timestamp_seconds = 6;
bool has_max_bandwidth_timestamp_seconds() const;
void clear_max_bandwidth_timestamp_seconds();
::PROTOBUF_NAMESPACE_ID::int64 max_bandwidth_timestamp_seconds() const;
void set_max_bandwidth_timestamp_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);

// optional int64 timestamp = 7;
bool has_timestamp() const;
void clear_timestamp();
::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

// @@protoc_insertion_point(class_scope:quic.CachedNetworkParameters)
private:
class _Internal;

::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serving_region_;
::PROTOBUF_NAMESPACE_ID::int32 bandwidth_estimate_bytes_per_second_;
::PROTOBUF_NAMESPACE_ID::int32 min_rtt_ms_;
::PROTOBUF_NAMESPACE_ID::int32 previous_connection_state_;
::PROTOBUF_NAMESPACE_ID::int32 max_bandwidth_estimate_bytes_per_second_;
::PROTOBUF_NAMESPACE_ID::int64 max_bandwidth_timestamp_seconds_;
::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
friend struct ::TableStruct_cached_5fnetwork_5fparameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CachedNetworkParameters

// optional string serving_region = 1;
inline bool CachedNetworkParameters::has_serving_region() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CachedNetworkParameters::clear_serving_region() {
serving_region_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CachedNetworkParameters::serving_region() const {
// @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.serving_region)
return serving_region_.GetNoArena();
}
inline void CachedNetworkParameters::set_serving_region(const std::string& value) {
_has_bits_[0] |= 0x00000001u;
serving_region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.serving_region)
}
inline void CachedNetworkParameters::set_serving_region(std::string&& value) {
_has_bits_[0] |= 0x00000001u;
serving_region_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:quic.CachedNetworkParameters.serving_region)
}
inline void CachedNetworkParameters::set_serving_region(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000001u;
serving_region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:quic.CachedNetworkParameters.serving_region)
}
inline void CachedNetworkParameters::set_serving_region(const char* value, size_t size) {
_has_bits_[0] |= 0x00000001u;
serving_region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:quic.CachedNetworkParameters.serving_region)
}
inline std::string* CachedNetworkParameters::mutable_serving_region() {
_has_bits_[0] |= 0x00000001u;
// @@protoc_insertion_point(field_mutable:quic.CachedNetworkParameters.serving_region)
return serving_region_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CachedNetworkParameters::release_serving_region() {
// @@protoc_insertion_point(field_release:quic.CachedNetworkParameters.serving_region)
if (!has_serving_region()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000001u;
return serving_region_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CachedNetworkParameters::set_allocated_serving_region(std::string* serving_region) {
if (serving_region != nullptr) {
_has_bits_[0] |= 0x00000001u;
} else {
_has_bits_[0] &= ~0x00000001u;
}
serving_region_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serving_region);
// @@protoc_insertion_point(field_set_allocated:quic.CachedNetworkParameters.serving_region)
}

// optional int32 bandwidth_estimate_bytes_per_second = 2;
inline bool CachedNetworkParameters::has_bandwidth_estimate_bytes_per_second() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CachedNetworkParameters::clear_bandwidth_estimate_bytes_per_second() {
bandwidth_estimate_bytes_per_second_ = 0;
_has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::bandwidth_estimate_bytes_per_second() const {
// @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.bandwidth_estimate_bytes_per_second)
return bandwidth_estimate_bytes_per_second_;
}
inline void CachedNetworkParameters::set_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
_has_bits_[0] |= 0x00000002u;
bandwidth_estimate_bytes_per_second_ = value;
// @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.bandwidth_estimate_bytes_per_second)
}

// optional int32 max_bandwidth_estimate_bytes_per_second = 5;
inline bool CachedNetworkParameters::has_max_bandwidth_estimate_bytes_per_second() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CachedNetworkParameters::clear_max_bandwidth_estimate_bytes_per_second() {
max_bandwidth_estimate_bytes_per_second_ = 0;
_has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::max_bandwidth_estimate_bytes_per_second() const {
// @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.max_bandwidth_estimate_bytes_per_second)
return max_bandwidth_estimate_bytes_per_second_;
}
inline void CachedNetworkParameters::set_max_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
_has_bits_[0] |= 0x00000010u;
max_bandwidth_estimate_bytes_per_second_ = value;
// @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.max_bandwidth_estimate_bytes_per_second)
}

// optional int64 max_bandwidth_timestamp_seconds = 6;
inline bool CachedNetworkParameters::has_max_bandwidth_timestamp_seconds() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CachedNetworkParameters::clear_max_bandwidth_timestamp_seconds() {
max_bandwidth_timestamp_seconds_ = PROTOBUF_LONGLONG(0);
_has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachedNetworkParameters::max_bandwidth_timestamp_seconds() const {
// @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.max_bandwidth_timestamp_seconds)
return max_bandwidth_timestamp_seconds_;
}
inline void CachedNetworkParameters::set_max_bandwidth_timestamp_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
_has_bits_[0] |= 0x00000020u;
max_bandwidth_timestamp_seconds_ = value;
// @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.max_bandwidth_timestamp_seconds)
}

// optional int32 min_rtt_ms = 3;
inline bool CachedNetworkParameters::has_min_rtt_ms() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CachedNetworkParameters::clear_min_rtt_ms() {
min_rtt_ms_ = 0;
_has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::min_rtt_ms() const {
// @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.min_rtt_ms)
return min_rtt_ms_;
}
inline void CachedNetworkParameters::set_min_rtt_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
_has_bits_[0] |= 0x00000004u;
min_rtt_ms_ = value;
// @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.min_rtt_ms)
}

// optional int32 previous_connection_state = 4;
inline bool CachedNetworkParameters::has_previous_connection_state() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CachedNetworkParameters::clear_previous_connection_state() {
previous_connection_state_ = 0;
_has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::previous_connection_state() const {
// @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.previous_connection_state)
return previous_connection_state_;
}
inline void CachedNetworkParameters::set_previous_connection_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
_has_bits_[0] |= 0x00000008u;
previous_connection_state_ = value;
// @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.previous_connection_state)
}

// optional int64 timestamp = 7;
inline bool CachedNetworkParameters::has_timestamp() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CachedNetworkParameters::clear_timestamp() {
timestamp_ = PROTOBUF_LONGLONG(0);
_has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachedNetworkParameters::timestamp() const {
// @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.timestamp)
return timestamp_;
}
inline void CachedNetworkParameters::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
_has_bits_[0] |= 0x00000040u;
timestamp_ = value;
// @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.timestamp)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace quic

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::quic::CachedNetworkParameters_PreviousConnectionState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cached_5fnetwork_5fparameters_2eproto
