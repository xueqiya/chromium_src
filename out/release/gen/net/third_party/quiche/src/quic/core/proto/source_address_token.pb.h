// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source_address_token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_source_5faddress_5ftoken_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_source_5faddress_5ftoken_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "cached_network_parameters.pb.h"
// @@protoc_insertion_point(includes)
#include "net/base/net_export.h"
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_source_5faddress_5ftoken_2eproto NET_EXPORT_PRIVATE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct NET_EXPORT_PRIVATE TableStruct_source_5faddress_5ftoken_2eproto {
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace quic {
class SourceAddressToken;
class SourceAddressTokenDefaultTypeInternal;
NET_EXPORT_PRIVATE extern SourceAddressTokenDefaultTypeInternal _SourceAddressToken_default_instance_;
class SourceAddressTokens;
class SourceAddressTokensDefaultTypeInternal;
NET_EXPORT_PRIVATE extern SourceAddressTokensDefaultTypeInternal _SourceAddressTokens_default_instance_;
}  // namespace quic
PROTOBUF_NAMESPACE_OPEN
template<> NET_EXPORT_PRIVATE ::quic::SourceAddressToken* Arena::CreateMaybeMessage<::quic::SourceAddressToken>(Arena*);
template<> NET_EXPORT_PRIVATE ::quic::SourceAddressTokens* Arena::CreateMaybeMessage<::quic::SourceAddressTokens>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace quic {

// ===================================================================

class NET_EXPORT_PRIVATE SourceAddressToken :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:quic.SourceAddressToken) */ {
public:
SourceAddressToken();
virtual ~SourceAddressToken();

SourceAddressToken(const SourceAddressToken& from);
SourceAddressToken(SourceAddressToken&& from) noexcept
: SourceAddressToken() {
*this = ::std::move(from);
}

inline SourceAddressToken& operator=(const SourceAddressToken& from) {
CopyFrom(from);
return *this;
}
inline SourceAddressToken& operator=(SourceAddressToken&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const SourceAddressToken& default_instance();

static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
static inline const SourceAddressToken* internal_default_instance() {
return reinterpret_cast<const SourceAddressToken*>(
&_SourceAddressToken_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

friend void swap(SourceAddressToken& a, SourceAddressToken& b) {
a.Swap(&b);
}
inline void Swap(SourceAddressToken* other) {
if (other == this) return;
InternalSwap(other);
}

// implements Message ----------------------------------------------

inline SourceAddressToken* New() const final {
return CreateMaybeMessage<SourceAddressToken>(nullptr);
}

SourceAddressToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
return CreateMaybeMessage<SourceAddressToken>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
final;
void CopyFrom(const SourceAddressToken& from);
void MergeFrom(const SourceAddressToken& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
bool MergePartialFromCodedStream(
::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
void SerializeWithCachedSizes(
::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
void DiscardUnknownFields();
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
inline void SharedCtor();
inline void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(SourceAddressToken* other);
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "quic.SourceAddressToken";
}
private:
inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
return nullptr;
}
inline void* MaybeArenaPtr() const {
return nullptr;
}
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

enum : int {
kIpFieldNumber = 1,
kCachedNetworkParametersFieldNumber = 3,
kTimestampFieldNumber = 2,
};
// required bytes ip = 1;
bool has_ip() const;
void clear_ip();
const std::string& ip() const;
void set_ip(const std::string& value);
void set_ip(std::string&& value);
void set_ip(const char* value);
void set_ip(const void* value, size_t size);
std::string* mutable_ip();
std::string* release_ip();
void set_allocated_ip(std::string* ip);

// optional .quic.CachedNetworkParameters cached_network_parameters = 3;
bool has_cached_network_parameters() const;
void clear_cached_network_parameters();
const ::quic::CachedNetworkParameters& cached_network_parameters() const;
::quic::CachedNetworkParameters* release_cached_network_parameters();
::quic::CachedNetworkParameters* mutable_cached_network_parameters();
void set_allocated_cached_network_parameters(::quic::CachedNetworkParameters* cached_network_parameters);

// required int64 timestamp = 2;
bool has_timestamp() const;
void clear_timestamp();
::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

// @@protoc_insertion_point(class_scope:quic.SourceAddressToken)
private:
class _Internal;

// helper for ByteSizeLong()
size_t RequiredFieldsByteSizeFallback() const;

::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
::quic::CachedNetworkParameters* cached_network_parameters_;
::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
friend struct ::TableStruct_source_5faddress_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class NET_EXPORT_PRIVATE SourceAddressTokens :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:quic.SourceAddressTokens) */ {
public:
SourceAddressTokens();
virtual ~SourceAddressTokens();

SourceAddressTokens(const SourceAddressTokens& from);
SourceAddressTokens(SourceAddressTokens&& from) noexcept
: SourceAddressTokens() {
*this = ::std::move(from);
}

inline SourceAddressTokens& operator=(const SourceAddressTokens& from) {
CopyFrom(from);
return *this;
}
inline SourceAddressTokens& operator=(SourceAddressTokens&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const SourceAddressTokens& default_instance();

static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
static inline const SourceAddressTokens* internal_default_instance() {
return reinterpret_cast<const SourceAddressTokens*>(
&_SourceAddressTokens_default_instance_);
}
static constexpr int kIndexInFileMessages =
1;

friend void swap(SourceAddressTokens& a, SourceAddressTokens& b) {
a.Swap(&b);
}
inline void Swap(SourceAddressTokens* other) {
if (other == this) return;
InternalSwap(other);
}

// implements Message ----------------------------------------------

inline SourceAddressTokens* New() const final {
return CreateMaybeMessage<SourceAddressTokens>(nullptr);
}

SourceAddressTokens* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
return CreateMaybeMessage<SourceAddressTokens>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
final;
void CopyFrom(const SourceAddressTokens& from);
void MergeFrom(const SourceAddressTokens& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
bool MergePartialFromCodedStream(
::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
void SerializeWithCachedSizes(
::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
void DiscardUnknownFields();
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
inline void SharedCtor();
inline void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(SourceAddressTokens* other);
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "quic.SourceAddressTokens";
}
private:
inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
return nullptr;
}
inline void* MaybeArenaPtr() const {
return nullptr;
}
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

enum : int {
kTokensFieldNumber = 4,
};
// repeated .quic.SourceAddressToken tokens = 4;
int tokens_size() const;
void clear_tokens();
::quic::SourceAddressToken* mutable_tokens(int index);
::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::SourceAddressToken >*
mutable_tokens();
const ::quic::SourceAddressToken& tokens(int index) const;
::quic::SourceAddressToken* add_tokens();
const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::SourceAddressToken >&
tokens() const;

// @@protoc_insertion_point(class_scope:quic.SourceAddressTokens)
private:
class _Internal;

::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::SourceAddressToken > tokens_;
friend struct ::TableStruct_source_5faddress_5ftoken_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SourceAddressToken

// required bytes ip = 1;
inline bool SourceAddressToken::has_ip() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceAddressToken::clear_ip() {
ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SourceAddressToken::ip() const {
// @@protoc_insertion_point(field_get:quic.SourceAddressToken.ip)
return ip_.GetNoArena();
}
inline void SourceAddressToken::set_ip(const std::string& value) {
_has_bits_[0] |= 0x00000001u;
ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:quic.SourceAddressToken.ip)
}
inline void SourceAddressToken::set_ip(std::string&& value) {
_has_bits_[0] |= 0x00000001u;
ip_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:quic.SourceAddressToken.ip)
}
inline void SourceAddressToken::set_ip(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000001u;
ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:quic.SourceAddressToken.ip)
}
inline void SourceAddressToken::set_ip(const void* value, size_t size) {
_has_bits_[0] |= 0x00000001u;
ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:quic.SourceAddressToken.ip)
}
inline std::string* SourceAddressToken::mutable_ip() {
_has_bits_[0] |= 0x00000001u;
// @@protoc_insertion_point(field_mutable:quic.SourceAddressToken.ip)
return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SourceAddressToken::release_ip() {
// @@protoc_insertion_point(field_release:quic.SourceAddressToken.ip)
if (!has_ip()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000001u;
return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SourceAddressToken::set_allocated_ip(std::string* ip) {
if (ip != nullptr) {
_has_bits_[0] |= 0x00000001u;
} else {
_has_bits_[0] &= ~0x00000001u;
}
ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
// @@protoc_insertion_point(field_set_allocated:quic.SourceAddressToken.ip)
}

// required int64 timestamp = 2;
inline bool SourceAddressToken::has_timestamp() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceAddressToken::clear_timestamp() {
timestamp_ = PROTOBUF_LONGLONG(0);
_has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SourceAddressToken::timestamp() const {
// @@protoc_insertion_point(field_get:quic.SourceAddressToken.timestamp)
return timestamp_;
}
inline void SourceAddressToken::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
_has_bits_[0] |= 0x00000004u;
timestamp_ = value;
// @@protoc_insertion_point(field_set:quic.SourceAddressToken.timestamp)
}

// optional .quic.CachedNetworkParameters cached_network_parameters = 3;
inline bool SourceAddressToken::has_cached_network_parameters() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::quic::CachedNetworkParameters& SourceAddressToken::cached_network_parameters() const {
const ::quic::CachedNetworkParameters* p = cached_network_parameters_;
// @@protoc_insertion_point(field_get:quic.SourceAddressToken.cached_network_parameters)
return p != nullptr ? *p : *reinterpret_cast<const ::quic::CachedNetworkParameters*>(
&::quic::_CachedNetworkParameters_default_instance_);
}
inline ::quic::CachedNetworkParameters* SourceAddressToken::release_cached_network_parameters() {
// @@protoc_insertion_point(field_release:quic.SourceAddressToken.cached_network_parameters)
_has_bits_[0] &= ~0x00000002u;
::quic::CachedNetworkParameters* temp = cached_network_parameters_;
cached_network_parameters_ = nullptr;
return temp;
}
inline ::quic::CachedNetworkParameters* SourceAddressToken::mutable_cached_network_parameters() {
_has_bits_[0] |= 0x00000002u;
if (cached_network_parameters_ == nullptr) {
auto* p = CreateMaybeMessage<::quic::CachedNetworkParameters>(GetArenaNoVirtual());
cached_network_parameters_ = p;
}
// @@protoc_insertion_point(field_mutable:quic.SourceAddressToken.cached_network_parameters)
return cached_network_parameters_;
}
inline void SourceAddressToken::set_allocated_cached_network_parameters(::quic::CachedNetworkParameters* cached_network_parameters) {
::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
if (message_arena == nullptr) {
delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cached_network_parameters_);
}
if (cached_network_parameters) {
::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
if (message_arena != submessage_arena) {
cached_network_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
message_arena, cached_network_parameters, submessage_arena);
}
_has_bits_[0] |= 0x00000002u;
} else {
_has_bits_[0] &= ~0x00000002u;
}
cached_network_parameters_ = cached_network_parameters;
// @@protoc_insertion_point(field_set_allocated:quic.SourceAddressToken.cached_network_parameters)
}

// -------------------------------------------------------------------

// SourceAddressTokens

// repeated .quic.SourceAddressToken tokens = 4;
inline int SourceAddressTokens::tokens_size() const {
return tokens_.size();
}
inline void SourceAddressTokens::clear_tokens() {
tokens_.Clear();
}
inline ::quic::SourceAddressToken* SourceAddressTokens::mutable_tokens(int index) {
// @@protoc_insertion_point(field_mutable:quic.SourceAddressTokens.tokens)
return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::SourceAddressToken >*
SourceAddressTokens::mutable_tokens() {
// @@protoc_insertion_point(field_mutable_list:quic.SourceAddressTokens.tokens)
return &tokens_;
}
inline const ::quic::SourceAddressToken& SourceAddressTokens::tokens(int index) const {
// @@protoc_insertion_point(field_get:quic.SourceAddressTokens.tokens)
return tokens_.Get(index);
}
inline ::quic::SourceAddressToken* SourceAddressTokens::add_tokens() {
// @@protoc_insertion_point(field_add:quic.SourceAddressTokens.tokens)
return tokens_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::SourceAddressToken >&
SourceAddressTokens::tokens() const {
// @@protoc_insertion_point(field_list:quic.SourceAddressTokens.tokens)
return tokens_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace quic

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_source_5faddress_5ftoken_2eproto
