// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: send_algorithm_test_result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_send_5falgorithm_5ftest_5fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_send_5falgorithm_5ftest_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include "net/base/net_export.h"
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_send_5falgorithm_5ftest_5fresult_2eproto NET_EXPORT_PRIVATE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct NET_EXPORT_PRIVATE TableStruct_send_5falgorithm_5ftest_5fresult_2eproto {
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace quic {
class SendAlgorithmTestResult;
class SendAlgorithmTestResultDefaultTypeInternal;
NET_EXPORT_PRIVATE extern SendAlgorithmTestResultDefaultTypeInternal _SendAlgorithmTestResult_default_instance_;
}  // namespace quic
PROTOBUF_NAMESPACE_OPEN
template<> NET_EXPORT_PRIVATE ::quic::SendAlgorithmTestResult* Arena::CreateMaybeMessage<::quic::SendAlgorithmTestResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace quic {

// ===================================================================

class NET_EXPORT_PRIVATE SendAlgorithmTestResult :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:quic.SendAlgorithmTestResult) */ {
public:
SendAlgorithmTestResult();
virtual ~SendAlgorithmTestResult();

SendAlgorithmTestResult(const SendAlgorithmTestResult& from);
SendAlgorithmTestResult(SendAlgorithmTestResult&& from) noexcept
: SendAlgorithmTestResult() {
*this = ::std::move(from);
}

inline SendAlgorithmTestResult& operator=(const SendAlgorithmTestResult& from) {
CopyFrom(from);
return *this;
}
inline SendAlgorithmTestResult& operator=(SendAlgorithmTestResult&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const SendAlgorithmTestResult& default_instance();

static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
static inline const SendAlgorithmTestResult* internal_default_instance() {
return reinterpret_cast<const SendAlgorithmTestResult*>(
&_SendAlgorithmTestResult_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

friend void swap(SendAlgorithmTestResult& a, SendAlgorithmTestResult& b) {
a.Swap(&b);
}
inline void Swap(SendAlgorithmTestResult* other) {
if (other == this) return;
InternalSwap(other);
}

// implements Message ----------------------------------------------

inline SendAlgorithmTestResult* New() const final {
return CreateMaybeMessage<SendAlgorithmTestResult>(nullptr);
}

SendAlgorithmTestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
return CreateMaybeMessage<SendAlgorithmTestResult>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
final;
void CopyFrom(const SendAlgorithmTestResult& from);
void MergeFrom(const SendAlgorithmTestResult& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
bool MergePartialFromCodedStream(
::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
void SerializeWithCachedSizes(
::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
void DiscardUnknownFields();
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
inline void SharedCtor();
inline void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(SendAlgorithmTestResult* other);
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "quic.SendAlgorithmTestResult";
}
private:
inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
return nullptr;
}
inline void* MaybeArenaPtr() const {
return nullptr;
}
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

enum : int {
kTestNameFieldNumber = 1,
kRandomSeedFieldNumber = 2,
kSimulatedDurationMicrosFieldNumber = 3,
};
// optional string test_name = 1;
bool has_test_name() const;
void clear_test_name();
const std::string& test_name() const;
void set_test_name(const std::string& value);
void set_test_name(std::string&& value);
void set_test_name(const char* value);
void set_test_name(const char* value, size_t size);
std::string* mutable_test_name();
std::string* release_test_name();
void set_allocated_test_name(std::string* test_name);

// optional uint64 random_seed = 2;
bool has_random_seed() const;
void clear_random_seed();
::PROTOBUF_NAMESPACE_ID::uint64 random_seed() const;
void set_random_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);

// optional int64 simulated_duration_micros = 3;
bool has_simulated_duration_micros() const;
void clear_simulated_duration_micros();
::PROTOBUF_NAMESPACE_ID::int64 simulated_duration_micros() const;
void set_simulated_duration_micros(::PROTOBUF_NAMESPACE_ID::int64 value);

// @@protoc_insertion_point(class_scope:quic.SendAlgorithmTestResult)
private:
class _Internal;

::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_name_;
::PROTOBUF_NAMESPACE_ID::uint64 random_seed_;
::PROTOBUF_NAMESPACE_ID::int64 simulated_duration_micros_;
friend struct ::TableStruct_send_5falgorithm_5ftest_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendAlgorithmTestResult

// optional string test_name = 1;
inline bool SendAlgorithmTestResult::has_test_name() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendAlgorithmTestResult::clear_test_name() {
test_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SendAlgorithmTestResult::test_name() const {
// @@protoc_insertion_point(field_get:quic.SendAlgorithmTestResult.test_name)
return test_name_.GetNoArena();
}
inline void SendAlgorithmTestResult::set_test_name(const std::string& value) {
_has_bits_[0] |= 0x00000001u;
test_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:quic.SendAlgorithmTestResult.test_name)
}
inline void SendAlgorithmTestResult::set_test_name(std::string&& value) {
_has_bits_[0] |= 0x00000001u;
test_name_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:quic.SendAlgorithmTestResult.test_name)
}
inline void SendAlgorithmTestResult::set_test_name(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000001u;
test_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:quic.SendAlgorithmTestResult.test_name)
}
inline void SendAlgorithmTestResult::set_test_name(const char* value, size_t size) {
_has_bits_[0] |= 0x00000001u;
test_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:quic.SendAlgorithmTestResult.test_name)
}
inline std::string* SendAlgorithmTestResult::mutable_test_name() {
_has_bits_[0] |= 0x00000001u;
// @@protoc_insertion_point(field_mutable:quic.SendAlgorithmTestResult.test_name)
return test_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendAlgorithmTestResult::release_test_name() {
// @@protoc_insertion_point(field_release:quic.SendAlgorithmTestResult.test_name)
if (!has_test_name()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000001u;
return test_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendAlgorithmTestResult::set_allocated_test_name(std::string* test_name) {
if (test_name != nullptr) {
_has_bits_[0] |= 0x00000001u;
} else {
_has_bits_[0] &= ~0x00000001u;
}
test_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_name);
// @@protoc_insertion_point(field_set_allocated:quic.SendAlgorithmTestResult.test_name)
}

// optional uint64 random_seed = 2;
inline bool SendAlgorithmTestResult::has_random_seed() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendAlgorithmTestResult::clear_random_seed() {
random_seed_ = PROTOBUF_ULONGLONG(0);
_has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendAlgorithmTestResult::random_seed() const {
// @@protoc_insertion_point(field_get:quic.SendAlgorithmTestResult.random_seed)
return random_seed_;
}
inline void SendAlgorithmTestResult::set_random_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
_has_bits_[0] |= 0x00000002u;
random_seed_ = value;
// @@protoc_insertion_point(field_set:quic.SendAlgorithmTestResult.random_seed)
}

// optional int64 simulated_duration_micros = 3;
inline bool SendAlgorithmTestResult::has_simulated_duration_micros() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendAlgorithmTestResult::clear_simulated_duration_micros() {
simulated_duration_micros_ = PROTOBUF_LONGLONG(0);
_has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendAlgorithmTestResult::simulated_duration_micros() const {
// @@protoc_insertion_point(field_get:quic.SendAlgorithmTestResult.simulated_duration_micros)
return simulated_duration_micros_;
}
inline void SendAlgorithmTestResult::set_simulated_duration_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
_has_bits_[0] |= 0x00000004u;
simulated_duration_micros_ = value;
// @@protoc_insertion_point(field_set:quic.SendAlgorithmTestResult.simulated_duration_micros)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace quic

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_send_5falgorithm_5ftest_5fresult_2eproto
