// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_server_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5fserver_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5fserver_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include "net/base/net_export.h"
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5fserver_5fconfig_2eproto NET_EXPORT_PRIVATE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct NET_EXPORT_PRIVATE TableStruct_crypto_5fserver_5fconfig_2eproto {
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace quic {
class QuicServerConfigProtobuf;
class QuicServerConfigProtobufDefaultTypeInternal;
NET_EXPORT_PRIVATE extern QuicServerConfigProtobufDefaultTypeInternal _QuicServerConfigProtobuf_default_instance_;
class QuicServerConfigProtobuf_PrivateKey;
class QuicServerConfigProtobuf_PrivateKeyDefaultTypeInternal;
NET_EXPORT_PRIVATE extern QuicServerConfigProtobuf_PrivateKeyDefaultTypeInternal _QuicServerConfigProtobuf_PrivateKey_default_instance_;
}  // namespace quic
PROTOBUF_NAMESPACE_OPEN
template<> NET_EXPORT_PRIVATE ::quic::QuicServerConfigProtobuf* Arena::CreateMaybeMessage<::quic::QuicServerConfigProtobuf>(Arena*);
template<> NET_EXPORT_PRIVATE ::quic::QuicServerConfigProtobuf_PrivateKey* Arena::CreateMaybeMessage<::quic::QuicServerConfigProtobuf_PrivateKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace quic {

// ===================================================================

class NET_EXPORT_PRIVATE QuicServerConfigProtobuf_PrivateKey :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:quic.QuicServerConfigProtobuf.PrivateKey) */ {
public:
QuicServerConfigProtobuf_PrivateKey();
virtual ~QuicServerConfigProtobuf_PrivateKey();

QuicServerConfigProtobuf_PrivateKey(const QuicServerConfigProtobuf_PrivateKey& from);
QuicServerConfigProtobuf_PrivateKey(QuicServerConfigProtobuf_PrivateKey&& from) noexcept
: QuicServerConfigProtobuf_PrivateKey() {
*this = ::std::move(from);
}

inline QuicServerConfigProtobuf_PrivateKey& operator=(const QuicServerConfigProtobuf_PrivateKey& from) {
CopyFrom(from);
return *this;
}
inline QuicServerConfigProtobuf_PrivateKey& operator=(QuicServerConfigProtobuf_PrivateKey&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const QuicServerConfigProtobuf_PrivateKey& default_instance();

static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
static inline const QuicServerConfigProtobuf_PrivateKey* internal_default_instance() {
return reinterpret_cast<const QuicServerConfigProtobuf_PrivateKey*>(
&_QuicServerConfigProtobuf_PrivateKey_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

friend void swap(QuicServerConfigProtobuf_PrivateKey& a, QuicServerConfigProtobuf_PrivateKey& b) {
a.Swap(&b);
}
inline void Swap(QuicServerConfigProtobuf_PrivateKey* other) {
if (other == this) return;
InternalSwap(other);
}

// implements Message ----------------------------------------------

inline QuicServerConfigProtobuf_PrivateKey* New() const final {
return CreateMaybeMessage<QuicServerConfigProtobuf_PrivateKey>(nullptr);
}

QuicServerConfigProtobuf_PrivateKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
return CreateMaybeMessage<QuicServerConfigProtobuf_PrivateKey>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
final;
void CopyFrom(const QuicServerConfigProtobuf_PrivateKey& from);
void MergeFrom(const QuicServerConfigProtobuf_PrivateKey& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
bool MergePartialFromCodedStream(
::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
void SerializeWithCachedSizes(
::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
void DiscardUnknownFields();
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
inline void SharedCtor();
inline void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(QuicServerConfigProtobuf_PrivateKey* other);
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "quic.QuicServerConfigProtobuf.PrivateKey";
}
private:
inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
return nullptr;
}
inline void* MaybeArenaPtr() const {
return nullptr;
}
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

enum : int {
kPrivateKeyFieldNumber = 2,
kTagFieldNumber = 1,
};
// required bytes private_key = 2;
bool has_private_key() const;
void clear_private_key();
const std::string& private_key() const;
void set_private_key(const std::string& value);
void set_private_key(std::string&& value);
void set_private_key(const char* value);
void set_private_key(const void* value, size_t size);
std::string* mutable_private_key();
std::string* release_private_key();
void set_allocated_private_key(std::string* private_key);

// required uint32 tag = 1;
bool has_tag() const;
void clear_tag();
::PROTOBUF_NAMESPACE_ID::uint32 tag() const;
void set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);

// @@protoc_insertion_point(class_scope:quic.QuicServerConfigProtobuf.PrivateKey)
private:
class _Internal;

// helper for ByteSizeLong()
size_t RequiredFieldsByteSizeFallback() const;

::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
::PROTOBUF_NAMESPACE_ID::uint32 tag_;
friend struct ::TableStruct_crypto_5fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NET_EXPORT_PRIVATE QuicServerConfigProtobuf :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:quic.QuicServerConfigProtobuf) */ {
public:
QuicServerConfigProtobuf();
virtual ~QuicServerConfigProtobuf();

QuicServerConfigProtobuf(const QuicServerConfigProtobuf& from);
QuicServerConfigProtobuf(QuicServerConfigProtobuf&& from) noexcept
: QuicServerConfigProtobuf() {
*this = ::std::move(from);
}

inline QuicServerConfigProtobuf& operator=(const QuicServerConfigProtobuf& from) {
CopyFrom(from);
return *this;
}
inline QuicServerConfigProtobuf& operator=(QuicServerConfigProtobuf&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const QuicServerConfigProtobuf& default_instance();

static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
static inline const QuicServerConfigProtobuf* internal_default_instance() {
return reinterpret_cast<const QuicServerConfigProtobuf*>(
&_QuicServerConfigProtobuf_default_instance_);
}
static constexpr int kIndexInFileMessages =
1;

friend void swap(QuicServerConfigProtobuf& a, QuicServerConfigProtobuf& b) {
a.Swap(&b);
}
inline void Swap(QuicServerConfigProtobuf* other) {
if (other == this) return;
InternalSwap(other);
}

// implements Message ----------------------------------------------

inline QuicServerConfigProtobuf* New() const final {
return CreateMaybeMessage<QuicServerConfigProtobuf>(nullptr);
}

QuicServerConfigProtobuf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
return CreateMaybeMessage<QuicServerConfigProtobuf>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
final;
void CopyFrom(const QuicServerConfigProtobuf& from);
void MergeFrom(const QuicServerConfigProtobuf& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
bool MergePartialFromCodedStream(
::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
void SerializeWithCachedSizes(
::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
void DiscardUnknownFields();
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
inline void SharedCtor();
inline void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(QuicServerConfigProtobuf* other);
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "quic.QuicServerConfigProtobuf";
}
private:
inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
return nullptr;
}
inline void* MaybeArenaPtr() const {
return nullptr;
}
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

typedef QuicServerConfigProtobuf_PrivateKey PrivateKey;

// accessors -------------------------------------------------------

enum : int {
kKeyFieldNumber = 2,
kConfigFieldNumber = 1,
kPrimaryTimeFieldNumber = 3,
kPriorityFieldNumber = 4,
};
// repeated .quic.QuicServerConfigProtobuf.PrivateKey key = 2;
int key_size() const;
void clear_key();
::quic::QuicServerConfigProtobuf_PrivateKey* mutable_key(int index);
::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::QuicServerConfigProtobuf_PrivateKey >*
mutable_key();
const ::quic::QuicServerConfigProtobuf_PrivateKey& key(int index) const;
::quic::QuicServerConfigProtobuf_PrivateKey* add_key();
const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::QuicServerConfigProtobuf_PrivateKey >&
key() const;

// required bytes config = 1;
bool has_config() const;
void clear_config();
const std::string& config() const;
void set_config(const std::string& value);
void set_config(std::string&& value);
void set_config(const char* value);
void set_config(const void* value, size_t size);
std::string* mutable_config();
std::string* release_config();
void set_allocated_config(std::string* config);

// optional int64 primary_time = 3;
bool has_primary_time() const;
void clear_primary_time();
::PROTOBUF_NAMESPACE_ID::int64 primary_time() const;
void set_primary_time(::PROTOBUF_NAMESPACE_ID::int64 value);

// optional uint64 priority = 4;
bool has_priority() const;
void clear_priority();
::PROTOBUF_NAMESPACE_ID::uint64 priority() const;
void set_priority(::PROTOBUF_NAMESPACE_ID::uint64 value);

// @@protoc_insertion_point(class_scope:quic.QuicServerConfigProtobuf)
private:
class _Internal;

::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::QuicServerConfigProtobuf_PrivateKey > key_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_;
::PROTOBUF_NAMESPACE_ID::int64 primary_time_;
::PROTOBUF_NAMESPACE_ID::uint64 priority_;
friend struct ::TableStruct_crypto_5fserver_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuicServerConfigProtobuf_PrivateKey

// required uint32 tag = 1;
inline bool QuicServerConfigProtobuf_PrivateKey::has_tag() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuicServerConfigProtobuf_PrivateKey::clear_tag() {
tag_ = 0u;
_has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuicServerConfigProtobuf_PrivateKey::tag() const {
// @@protoc_insertion_point(field_get:quic.QuicServerConfigProtobuf.PrivateKey.tag)
return tag_;
}
inline void QuicServerConfigProtobuf_PrivateKey::set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
_has_bits_[0] |= 0x00000002u;
tag_ = value;
// @@protoc_insertion_point(field_set:quic.QuicServerConfigProtobuf.PrivateKey.tag)
}

// required bytes private_key = 2;
inline bool QuicServerConfigProtobuf_PrivateKey::has_private_key() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuicServerConfigProtobuf_PrivateKey::clear_private_key() {
private_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QuicServerConfigProtobuf_PrivateKey::private_key() const {
// @@protoc_insertion_point(field_get:quic.QuicServerConfigProtobuf.PrivateKey.private_key)
return private_key_.GetNoArena();
}
inline void QuicServerConfigProtobuf_PrivateKey::set_private_key(const std::string& value) {
_has_bits_[0] |= 0x00000001u;
private_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:quic.QuicServerConfigProtobuf.PrivateKey.private_key)
}
inline void QuicServerConfigProtobuf_PrivateKey::set_private_key(std::string&& value) {
_has_bits_[0] |= 0x00000001u;
private_key_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:quic.QuicServerConfigProtobuf.PrivateKey.private_key)
}
inline void QuicServerConfigProtobuf_PrivateKey::set_private_key(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000001u;
private_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:quic.QuicServerConfigProtobuf.PrivateKey.private_key)
}
inline void QuicServerConfigProtobuf_PrivateKey::set_private_key(const void* value, size_t size) {
_has_bits_[0] |= 0x00000001u;
private_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:quic.QuicServerConfigProtobuf.PrivateKey.private_key)
}
inline std::string* QuicServerConfigProtobuf_PrivateKey::mutable_private_key() {
_has_bits_[0] |= 0x00000001u;
// @@protoc_insertion_point(field_mutable:quic.QuicServerConfigProtobuf.PrivateKey.private_key)
return private_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuicServerConfigProtobuf_PrivateKey::release_private_key() {
// @@protoc_insertion_point(field_release:quic.QuicServerConfigProtobuf.PrivateKey.private_key)
if (!has_private_key()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000001u;
return private_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuicServerConfigProtobuf_PrivateKey::set_allocated_private_key(std::string* private_key) {
if (private_key != nullptr) {
_has_bits_[0] |= 0x00000001u;
} else {
_has_bits_[0] &= ~0x00000001u;
}
private_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key);
// @@protoc_insertion_point(field_set_allocated:quic.QuicServerConfigProtobuf.PrivateKey.private_key)
}

// -------------------------------------------------------------------

// QuicServerConfigProtobuf

// required bytes config = 1;
inline bool QuicServerConfigProtobuf::has_config() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuicServerConfigProtobuf::clear_config() {
config_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QuicServerConfigProtobuf::config() const {
// @@protoc_insertion_point(field_get:quic.QuicServerConfigProtobuf.config)
return config_.GetNoArena();
}
inline void QuicServerConfigProtobuf::set_config(const std::string& value) {
_has_bits_[0] |= 0x00000001u;
config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:quic.QuicServerConfigProtobuf.config)
}
inline void QuicServerConfigProtobuf::set_config(std::string&& value) {
_has_bits_[0] |= 0x00000001u;
config_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:quic.QuicServerConfigProtobuf.config)
}
inline void QuicServerConfigProtobuf::set_config(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000001u;
config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:quic.QuicServerConfigProtobuf.config)
}
inline void QuicServerConfigProtobuf::set_config(const void* value, size_t size) {
_has_bits_[0] |= 0x00000001u;
config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:quic.QuicServerConfigProtobuf.config)
}
inline std::string* QuicServerConfigProtobuf::mutable_config() {
_has_bits_[0] |= 0x00000001u;
// @@protoc_insertion_point(field_mutable:quic.QuicServerConfigProtobuf.config)
return config_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuicServerConfigProtobuf::release_config() {
// @@protoc_insertion_point(field_release:quic.QuicServerConfigProtobuf.config)
if (!has_config()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000001u;
return config_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuicServerConfigProtobuf::set_allocated_config(std::string* config) {
if (config != nullptr) {
_has_bits_[0] |= 0x00000001u;
} else {
_has_bits_[0] &= ~0x00000001u;
}
config_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config);
// @@protoc_insertion_point(field_set_allocated:quic.QuicServerConfigProtobuf.config)
}

// repeated .quic.QuicServerConfigProtobuf.PrivateKey key = 2;
inline int QuicServerConfigProtobuf::key_size() const {
return key_.size();
}
inline void QuicServerConfigProtobuf::clear_key() {
key_.Clear();
}
inline ::quic::QuicServerConfigProtobuf_PrivateKey* QuicServerConfigProtobuf::mutable_key(int index) {
// @@protoc_insertion_point(field_mutable:quic.QuicServerConfigProtobuf.key)
return key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::QuicServerConfigProtobuf_PrivateKey >*
QuicServerConfigProtobuf::mutable_key() {
// @@protoc_insertion_point(field_mutable_list:quic.QuicServerConfigProtobuf.key)
return &key_;
}
inline const ::quic::QuicServerConfigProtobuf_PrivateKey& QuicServerConfigProtobuf::key(int index) const {
// @@protoc_insertion_point(field_get:quic.QuicServerConfigProtobuf.key)
return key_.Get(index);
}
inline ::quic::QuicServerConfigProtobuf_PrivateKey* QuicServerConfigProtobuf::add_key() {
// @@protoc_insertion_point(field_add:quic.QuicServerConfigProtobuf.key)
return key_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::QuicServerConfigProtobuf_PrivateKey >&
QuicServerConfigProtobuf::key() const {
// @@protoc_insertion_point(field_list:quic.QuicServerConfigProtobuf.key)
return key_;
}

// optional int64 primary_time = 3;
inline bool QuicServerConfigProtobuf::has_primary_time() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuicServerConfigProtobuf::clear_primary_time() {
primary_time_ = PROTOBUF_LONGLONG(0);
_has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuicServerConfigProtobuf::primary_time() const {
// @@protoc_insertion_point(field_get:quic.QuicServerConfigProtobuf.primary_time)
return primary_time_;
}
inline void QuicServerConfigProtobuf::set_primary_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
_has_bits_[0] |= 0x00000002u;
primary_time_ = value;
// @@protoc_insertion_point(field_set:quic.QuicServerConfigProtobuf.primary_time)
}

// optional uint64 priority = 4;
inline bool QuicServerConfigProtobuf::has_priority() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuicServerConfigProtobuf::clear_priority() {
priority_ = PROTOBUF_ULONGLONG(0);
_has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QuicServerConfigProtobuf::priority() const {
// @@protoc_insertion_point(field_get:quic.QuicServerConfigProtobuf.priority)
return priority_;
}
inline void QuicServerConfigProtobuf::set_priority(::PROTOBUF_NAMESPACE_ID::uint64 value) {
_has_bits_[0] |= 0x00000004u;
priority_ = value;
// @@protoc_insertion_point(field_set:quic.QuicServerConfigProtobuf.priority)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace quic

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5fserver_5fconfig_2eproto
