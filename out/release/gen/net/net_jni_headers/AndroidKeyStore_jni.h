// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/AndroidKeyStore

#ifndef org_chromium_net_AndroidKeyStore_JNI
#define org_chromium_net_AndroidKeyStore_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_net_AndroidKeyStore[];
const char kClassPath_org_chromium_net_AndroidKeyStore[] = "org/chromium/net/AndroidKeyStore";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_net_AndroidKeyStore_clazz(nullptr);
#ifndef org_chromium_net_AndroidKeyStore_clazz_defined
#define org_chromium_net_AndroidKeyStore_clazz_defined
inline jclass org_chromium_net_AndroidKeyStore_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_net_AndroidKeyStore,
      &g_org_chromium_net_AndroidKeyStore_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace net {
namespace android {


static std::atomic<jmethodID> g_org_chromium_net_AndroidKeyStore_getPrivateKeyClassName(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_AndroidKeyStore_getPrivateKeyClassName(JNIEnv* env, const base::android::JavaRef<jobject>&
    privateKey) {
  jclass clazz = org_chromium_net_AndroidKeyStore_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_net_AndroidKeyStore_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getPrivateKeyClassName",
          "(Ljava/security/PrivateKey;)Ljava/lang/String;",
          &g_org_chromium_net_AndroidKeyStore_getPrivateKeyClassName);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, privateKey.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_net_AndroidKeyStore_privateKeySupportsSignature(nullptr);
static jboolean Java_AndroidKeyStore_privateKeySupportsSignature(JNIEnv* env, const
    base::android::JavaRef<jobject>& privateKey,
    const base::android::JavaRef<jstring>& algorithm) {
  jclass clazz = org_chromium_net_AndroidKeyStore_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_net_AndroidKeyStore_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "privateKeySupportsSignature",
          "(Ljava/security/PrivateKey;Ljava/lang/String;)Z",
          &g_org_chromium_net_AndroidKeyStore_privateKeySupportsSignature);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, privateKey.obj(), algorithm.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_net_AndroidKeyStore_privateKeySupportsCipher(nullptr);
static jboolean Java_AndroidKeyStore_privateKeySupportsCipher(JNIEnv* env, const
    base::android::JavaRef<jobject>& privateKey,
    const base::android::JavaRef<jstring>& algorithm) {
  jclass clazz = org_chromium_net_AndroidKeyStore_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_net_AndroidKeyStore_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "privateKeySupportsCipher",
          "(Ljava/security/PrivateKey;Ljava/lang/String;)Z",
          &g_org_chromium_net_AndroidKeyStore_privateKeySupportsCipher);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, privateKey.obj(), algorithm.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_net_AndroidKeyStore_signWithPrivateKey(nullptr);
static base::android::ScopedJavaLocalRef<jbyteArray> Java_AndroidKeyStore_signWithPrivateKey(JNIEnv*
    env, const base::android::JavaRef<jobject>& privateKey,
    const base::android::JavaRef<jstring>& algorithm,
    const base::android::JavaRef<jbyteArray>& message) {
  jclass clazz = org_chromium_net_AndroidKeyStore_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_net_AndroidKeyStore_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "signWithPrivateKey",
          "(Ljava/security/PrivateKey;Ljava/lang/String;[B)[B",
          &g_org_chromium_net_AndroidKeyStore_signWithPrivateKey);

  jbyteArray ret =
      static_cast<jbyteArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, privateKey.obj(), algorithm.obj(), message.obj()));
  return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_net_AndroidKeyStore_encryptWithPrivateKey(nullptr);
static base::android::ScopedJavaLocalRef<jbyteArray>
    Java_AndroidKeyStore_encryptWithPrivateKey(JNIEnv* env, const base::android::JavaRef<jobject>&
    privateKey,
    const base::android::JavaRef<jstring>& algorithm,
    const base::android::JavaRef<jbyteArray>& message) {
  jclass clazz = org_chromium_net_AndroidKeyStore_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_net_AndroidKeyStore_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "encryptWithPrivateKey",
          "(Ljava/security/PrivateKey;Ljava/lang/String;[B)[B",
          &g_org_chromium_net_AndroidKeyStore_encryptWithPrivateKey);

  jbyteArray ret =
      static_cast<jbyteArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, privateKey.obj(), algorithm.obj(), message.obj()));
  return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

}  // namespace android
}  // namespace net

// Step 4: Generated test functions (optional).


#endif  // org_chromium_net_AndroidKeyStore_JNI
