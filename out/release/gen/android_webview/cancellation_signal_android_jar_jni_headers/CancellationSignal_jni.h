// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     android/os/CancellationSignal

#ifndef android_os_CancellationSignal_JNI
#define android_os_CancellationSignal_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_android_os_CancellationSignal[];
const char kClassPath_android_os_CancellationSignal[] = "android/os/CancellationSignal";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_android_os_CancellationSignal_clazz(nullptr);
#ifndef android_os_CancellationSignal_clazz_defined
#define android_os_CancellationSignal_clazz_defined
inline jclass android_os_CancellationSignal_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_android_os_CancellationSignal,
      &g_android_os_CancellationSignal_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace JNI_CancellationSignal {


static std::atomic<jmethodID> g_android_os_CancellationSignal_isCanceled(nullptr);
static jboolean Java_CancellationSignal_isCanceled(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jboolean Java_CancellationSignal_isCanceled(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = android_os_CancellationSignal_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_os_CancellationSignal_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isCanceled",
          "()Z",
          &g_android_os_CancellationSignal_isCanceled);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_android_os_CancellationSignal_throwIfCanceled(nullptr);
static void Java_CancellationSignal_throwIfCanceled(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static void Java_CancellationSignal_throwIfCanceled(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = android_os_CancellationSignal_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_os_CancellationSignal_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "throwIfCanceled",
          "()V",
          &g_android_os_CancellationSignal_throwIfCanceled);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_android_os_CancellationSignal_cancel(nullptr);
static void Java_CancellationSignal_cancel(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static void Java_CancellationSignal_cancel(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = android_os_CancellationSignal_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_os_CancellationSignal_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "cancel",
          "()V",
          &g_android_os_CancellationSignal_cancel);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_android_os_CancellationSignal_setOnCancelListener(nullptr);
static void Java_CancellationSignal_setOnCancelListener(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0) __attribute__
    ((unused));
static void Java_CancellationSignal_setOnCancelListener(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0) {
  jclass clazz = android_os_CancellationSignal_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_os_CancellationSignal_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setOnCancelListener",
          "(Landroid/os/CancellationSignal$OnCancelListener;)V",
          &g_android_os_CancellationSignal_setOnCancelListener);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
}

static std::atomic<jmethodID> g_android_os_CancellationSignal_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_CancellationSignal_Constructor(JNIEnv* env)
    __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_CancellationSignal_Constructor(JNIEnv* env) {
  jclass clazz = android_os_CancellationSignal_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_os_CancellationSignal_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "()V",
          &g_android_os_CancellationSignal_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace JNI_CancellationSignal

// Step 4: Generated test functions (optional).


#endif  // android_os_CancellationSignal_JNI
