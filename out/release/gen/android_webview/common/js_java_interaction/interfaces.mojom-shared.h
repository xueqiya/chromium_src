// android_webview/common/js_java_interaction/interfaces.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef ANDROID_WEBVIEW_COMMON_JS_JAVA_INTERACTION_INTERFACES_MOJOM_SHARED_H_
#define ANDROID_WEBVIEW_COMMON_JS_JAVA_INTERACTION_INTERFACES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "android_webview/common/js_java_interaction/interfaces.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "services/network/public/mojom/proxy_config.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace android_webview {
namespace mojom {
class JsObjectDataView;



}  // namespace mojom
}  // namespace android_webview

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::android_webview::mojom::JsObjectDataView> {
  using Data = ::android_webview::mojom::internal::JsObject_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace android_webview {
namespace mojom {
// Interface base classes. They are used for type safety check.
class JsToJavaMessagingInterfaceBase {};

using JsToJavaMessagingPtrDataView =
    mojo::InterfacePtrDataView<JsToJavaMessagingInterfaceBase>;
using JsToJavaMessagingRequestDataView =
    mojo::InterfaceRequestDataView<JsToJavaMessagingInterfaceBase>;
using JsToJavaMessagingAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<JsToJavaMessagingInterfaceBase>;
using JsToJavaMessagingAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<JsToJavaMessagingInterfaceBase>;
class JavaToJsMessagingInterfaceBase {};

using JavaToJsMessagingPtrDataView =
    mojo::InterfacePtrDataView<JavaToJsMessagingInterfaceBase>;
using JavaToJsMessagingRequestDataView =
    mojo::InterfaceRequestDataView<JavaToJsMessagingInterfaceBase>;
using JavaToJsMessagingAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<JavaToJsMessagingInterfaceBase>;
using JavaToJsMessagingAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<JavaToJsMessagingInterfaceBase>;
class JsJavaConfiguratorInterfaceBase {};

using JsJavaConfiguratorPtrDataView =
    mojo::InterfacePtrDataView<JsJavaConfiguratorInterfaceBase>;
using JsJavaConfiguratorRequestDataView =
    mojo::InterfaceRequestDataView<JsJavaConfiguratorInterfaceBase>;
using JsJavaConfiguratorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<JsJavaConfiguratorInterfaceBase>;
using JsJavaConfiguratorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<JsJavaConfiguratorInterfaceBase>;
class JsObjectDataView {
 public:
  JsObjectDataView() {}

  JsObjectDataView(
      internal::JsObject_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetJsObjectNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadJsObjectName(UserType* output) {
    auto* pointer = data_->js_object_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeJsToJavaMessaging() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::android_webview::mojom::JsToJavaMessagingAssociatedPtrInfoDataView>(
            &data_->js_to_java_messaging, &result, context_);
    DCHECK(ret);
    return result;
  }
  inline void GetAllowedOriginRulesDataView(
      ::network::mojom::ProxyBypassRulesDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAllowedOriginRules(UserType* output) {
    auto* pointer = data_->allowed_origin_rules.Get();
    return mojo::internal::Deserialize<::network::mojom::ProxyBypassRulesDataView>(
        pointer, output, context_);
  }
 private:
  internal::JsObject_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace android_webview

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::android_webview::mojom::JsObjectDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::android_webview::mojom::JsObjectDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::android_webview::mojom::internal::JsObject_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::js_object_name(input)) in_js_object_name = Traits::js_object_name(input);
    typename decltype((*output)->js_object_name)::BaseType::BufferWriter
        js_object_name_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_js_object_name, buffer, &js_object_name_writer, context);
    (*output)->js_object_name.Set(
        js_object_name_writer.is_null() ? nullptr : js_object_name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->js_object_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null js_object_name in JsObject struct");
    decltype(Traits::js_to_java_messaging(input)) in_js_to_java_messaging = Traits::js_to_java_messaging(input);
    mojo::internal::Serialize<::android_webview::mojom::JsToJavaMessagingAssociatedPtrInfoDataView>(
        in_js_to_java_messaging, &(*output)->js_to_java_messaging, context);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid((*output)->js_to_java_messaging),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
        "invalid js_to_java_messaging in JsObject struct");
    decltype(Traits::allowed_origin_rules(input)) in_allowed_origin_rules = Traits::allowed_origin_rules(input);
    typename decltype((*output)->allowed_origin_rules)::BaseType::BufferWriter
        allowed_origin_rules_writer;
    mojo::internal::Serialize<::network::mojom::ProxyBypassRulesDataView>(
        in_allowed_origin_rules, buffer, &allowed_origin_rules_writer, context);
    (*output)->allowed_origin_rules.Set(
        allowed_origin_rules_writer.is_null() ? nullptr : allowed_origin_rules_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->allowed_origin_rules.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null allowed_origin_rules in JsObject struct");
  }

  static bool Deserialize(::android_webview::mojom::internal::JsObject_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::android_webview::mojom::JsObjectDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace android_webview {
namespace mojom {

inline void JsObjectDataView::GetJsObjectNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->js_object_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void JsObjectDataView::GetAllowedOriginRulesDataView(
    ::network::mojom::ProxyBypassRulesDataView* output) {
  auto pointer = data_->allowed_origin_rules.Get();
  *output = ::network::mojom::ProxyBypassRulesDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace android_webview

#endif  // ANDROID_WEBVIEW_COMMON_JS_JAVA_INTERACTION_INTERFACES_MOJOM_SHARED_H_