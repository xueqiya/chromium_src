// android_webview/common/js_java_interaction/interfaces.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef ANDROID_WEBVIEW_COMMON_JS_JAVA_INTERACTION_INTERFACES_MOJOM_H_
#define ANDROID_WEBVIEW_COMMON_JS_JAVA_INTERACTION_INTERFACES_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "android_webview/common/js_java_interaction/interfaces.mojom-shared.h"
#include "android_webview/common/js_java_interaction/interfaces.mojom-forward.h"
#include "mojo/public/mojom/base/string16.mojom.h"
#include "services/network/public/mojom/proxy_config.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"






namespace android_webview {
namespace mojom {

class JsToJavaMessagingProxy;

template <typename ImplRefTraits>
class JsToJavaMessagingStub;

class JsToJavaMessagingRequestValidator;


class  JsToJavaMessaging
    : public JsToJavaMessagingInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = JsToJavaMessagingInterfaceBase;
  using Proxy_ = JsToJavaMessagingProxy;

  template <typename ImplRefTraits>
  using Stub_ = JsToJavaMessagingStub<ImplRefTraits>;

  using RequestValidator_ = JsToJavaMessagingRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kPostMessageMinVersion = 0,
    kSetJavaToJsMessagingMinVersion = 0,
  };
  virtual ~JsToJavaMessaging() {}

  
  virtual void PostMessage(const ::base::string16& message, std::vector<mojo::ScopedMessagePipeHandle> ports) = 0;

  
  virtual void SetJavaToJsMessaging(mojo::PendingAssociatedRemote<JavaToJsMessaging> java_to_js_messaging) = 0;
};

class JavaToJsMessagingProxy;

template <typename ImplRefTraits>
class JavaToJsMessagingStub;

class JavaToJsMessagingRequestValidator;


class  JavaToJsMessaging
    : public JavaToJsMessagingInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = JavaToJsMessagingInterfaceBase;
  using Proxy_ = JavaToJsMessagingProxy;

  template <typename ImplRefTraits>
  using Stub_ = JavaToJsMessagingStub<ImplRefTraits>;

  using RequestValidator_ = JavaToJsMessagingRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnPostMessageMinVersion = 0,
  };
  virtual ~JavaToJsMessaging() {}

  
  virtual void OnPostMessage(const ::base::string16& message) = 0;
};

class JsJavaConfiguratorProxy;

template <typename ImplRefTraits>
class JsJavaConfiguratorStub;

class JsJavaConfiguratorRequestValidator;


class  JsJavaConfigurator
    : public JsJavaConfiguratorInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = JsJavaConfiguratorInterfaceBase;
  using Proxy_ = JsJavaConfiguratorProxy;

  template <typename ImplRefTraits>
  using Stub_ = JsJavaConfiguratorStub<ImplRefTraits>;

  using RequestValidator_ = JsJavaConfiguratorRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kSetJsObjectsMinVersion = 0,
  };
  virtual ~JsJavaConfigurator() {}

  
  virtual void SetJsObjects(std::vector<JsObjectPtr> js_objects) = 0;
};



class  JsToJavaMessagingProxy
    : public JsToJavaMessaging {
 public:
  using InterfaceType = JsToJavaMessaging;

  explicit JsToJavaMessagingProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void PostMessage(const ::base::string16& message, std::vector<mojo::ScopedMessagePipeHandle> ports) final;
  
  void SetJavaToJsMessaging(mojo::PendingAssociatedRemote<JavaToJsMessaging> java_to_js_messaging) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  JavaToJsMessagingProxy
    : public JavaToJsMessaging {
 public:
  using InterfaceType = JavaToJsMessaging;

  explicit JavaToJsMessagingProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnPostMessage(const ::base::string16& message) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  JsJavaConfiguratorProxy
    : public JsJavaConfigurator {
 public:
  using InterfaceType = JsJavaConfigurator;

  explicit JsJavaConfiguratorProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void SetJsObjects(std::vector<JsObjectPtr> js_objects) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  JsToJavaMessagingStubDispatch {
 public:
  static bool Accept(JsToJavaMessaging* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      JsToJavaMessaging* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<JsToJavaMessaging>>
class JsToJavaMessagingStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  JsToJavaMessagingStub() {}
  ~JsToJavaMessagingStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return JsToJavaMessagingStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return JsToJavaMessagingStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  JavaToJsMessagingStubDispatch {
 public:
  static bool Accept(JavaToJsMessaging* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      JavaToJsMessaging* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<JavaToJsMessaging>>
class JavaToJsMessagingStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  JavaToJsMessagingStub() {}
  ~JavaToJsMessagingStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return JavaToJsMessagingStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return JavaToJsMessagingStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  JsJavaConfiguratorStubDispatch {
 public:
  static bool Accept(JsJavaConfigurator* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      JsJavaConfigurator* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<JsJavaConfigurator>>
class JsJavaConfiguratorStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  JsJavaConfiguratorStub() {}
  ~JsJavaConfiguratorStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return JsJavaConfiguratorStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return JsJavaConfiguratorStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  JsToJavaMessagingRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  JavaToJsMessagingRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  JsJavaConfiguratorRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};








class  JsObject {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<JsObject, T>::value>;
  using DataView = JsObjectDataView;
  using Data_ = internal::JsObject_Data;

  template <typename... Args>
  static JsObjectPtr New(Args&&... args) {
    return JsObjectPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static JsObjectPtr From(const U& u) {
    return mojo::TypeConverter<JsObjectPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, JsObject>::Convert(*this);
  }


  JsObject();

  JsObject(
      const ::base::string16& js_object_name,
      mojo::PendingAssociatedRemote<JsToJavaMessaging> js_to_java_messaging,
      const ::net::ProxyBypassRules& allowed_origin_rules);

  ~JsObject();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = JsObjectPtr>
  JsObjectPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, JsObject::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        JsObject::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        JsObject::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::JsObject_UnserializedMessageContext<
            UserType, JsObject::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<JsObject::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return JsObject::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::JsObject_UnserializedMessageContext<
            UserType, JsObject::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<JsObject::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  ::base::string16 js_object_name;
  
  mojo::PendingAssociatedRemote<JsToJavaMessaging> js_to_java_messaging;
  
  ::net::ProxyBypassRules allowed_origin_rules;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(JsObject);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, JsObject::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, JsObject::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, JsObject::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, JsObject::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
JsObjectPtr JsObject::Clone() const {
  return New(
      mojo::Clone(js_object_name),
      mojo::Clone(js_to_java_messaging),
      mojo::Clone(allowed_origin_rules)
  );
}

template <typename T, JsObject::EnableIfSame<T>*>
bool JsObject::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->js_object_name, other_struct.js_object_name))
    return false;
  if (!mojo::Equals(this->js_to_java_messaging, other_struct.js_to_java_messaging))
    return false;
  if (!mojo::Equals(this->allowed_origin_rules, other_struct.allowed_origin_rules))
    return false;
  return true;
}

template <typename T, JsObject::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.js_object_name < rhs.js_object_name)
    return true;
  if (rhs.js_object_name < lhs.js_object_name)
    return false;
  if (lhs.js_to_java_messaging < rhs.js_to_java_messaging)
    return true;
  if (rhs.js_to_java_messaging < lhs.js_to_java_messaging)
    return false;
  if (lhs.allowed_origin_rules < rhs.allowed_origin_rules)
    return true;
  if (rhs.allowed_origin_rules < lhs.allowed_origin_rules)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace android_webview

namespace mojo {


template <>
struct  StructTraits<::android_webview::mojom::JsObject::DataView,
                                         ::android_webview::mojom::JsObjectPtr> {
  static bool IsNull(const ::android_webview::mojom::JsObjectPtr& input) { return !input; }
  static void SetToNull(::android_webview::mojom::JsObjectPtr* output) { output->reset(); }

  static const decltype(::android_webview::mojom::JsObject::js_object_name)& js_object_name(
      const ::android_webview::mojom::JsObjectPtr& input) {
    return input->js_object_name;
  }

  static  decltype(::android_webview::mojom::JsObject::js_to_java_messaging)& js_to_java_messaging(
       ::android_webview::mojom::JsObjectPtr& input) {
    return input->js_to_java_messaging;
  }

  static const decltype(::android_webview::mojom::JsObject::allowed_origin_rules)& allowed_origin_rules(
      const ::android_webview::mojom::JsObjectPtr& input) {
    return input->allowed_origin_rules;
  }

  static bool Read(::android_webview::mojom::JsObject::DataView input, ::android_webview::mojom::JsObjectPtr* output);
};

}  // namespace mojo

#endif  // ANDROID_WEBVIEW_COMMON_JS_JAVA_INTERACTION_INTERFACES_MOJOM_H_