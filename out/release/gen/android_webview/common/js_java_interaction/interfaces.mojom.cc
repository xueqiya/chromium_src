// android_webview/common/js_java_interaction/interfaces.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "android_webview/common/js_java_interaction/interfaces.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "android_webview/common/js_java_interaction/interfaces.mojom-params-data.h"
#include "android_webview/common/js_java_interaction/interfaces.mojom-shared-message-ids.h"

#include "android_webview/common/js_java_interaction/interfaces.mojom-import-headers.h"


#ifndef ANDROID_WEBVIEW_COMMON_JS_JAVA_INTERACTION_INTERFACES_MOJOM_JUMBO_H_
#define ANDROID_WEBVIEW_COMMON_JS_JAVA_INTERACTION_INTERFACES_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/string16_mojom_traits.h"
#include "services/network/public/cpp/proxy_config_mojom_traits.h"
#endif
namespace android_webview {
namespace mojom {
JsObject::JsObject()
    : js_object_name(),
      js_to_java_messaging(),
      allowed_origin_rules() {}

JsObject::JsObject(
    const ::base::string16& js_object_name_in,
    mojo::PendingAssociatedRemote<JsToJavaMessaging> js_to_java_messaging_in,
    const ::net::ProxyBypassRules& allowed_origin_rules_in)
    : js_object_name(std::move(js_object_name_in)),
      js_to_java_messaging(std::move(js_to_java_messaging_in)),
      allowed_origin_rules(std::move(allowed_origin_rules_in)) {}

JsObject::~JsObject() = default;

bool JsObject::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char JsToJavaMessaging::Name_[] = "android_webview.mojom.JsToJavaMessaging";

JsToJavaMessagingProxy::JsToJavaMessagingProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void JsToJavaMessagingProxy::PostMessage(
    const ::base::string16& in_message, std::vector<mojo::ScopedMessagePipeHandle> in_ports) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "android_webview::mojom::JsToJavaMessaging::PostMessage");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kJsToJavaMessaging_PostMessage_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::android_webview::mojom::internal::JsToJavaMessaging_PostMessage_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->message)::BaseType::BufferWriter
      message_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_message, buffer, &message_writer, &serialization_context);
  params->message.Set(
      message_writer.is_null() ? nullptr : message_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null message in JsToJavaMessaging.PostMessage request");
  typename decltype(params->ports)::BaseType::BufferWriter
      ports_writer;
  const mojo::internal::ContainerValidateParams ports_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<mojo::ScopedMessagePipeHandle>>(
      in_ports, buffer, &ports_writer, &ports_validate_params,
      &serialization_context);
  params->ports.Set(
      ports_writer.is_null() ? nullptr : ports_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->ports.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null ports in JsToJavaMessaging.PostMessage request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(JsToJavaMessaging::Name_);
  message.set_method_name("PostMessage");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void JsToJavaMessagingProxy::SetJavaToJsMessaging(
    mojo::PendingAssociatedRemote<JavaToJsMessaging> in_java_to_js_messaging) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "android_webview::mojom::JsToJavaMessaging::SetJavaToJsMessaging");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kJsToJavaMessaging_SetJavaToJsMessaging_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::android_webview::mojom::internal::JsToJavaMessaging_SetJavaToJsMessaging_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::android_webview::mojom::JavaToJsMessagingAssociatedPtrInfoDataView>(
      in_java_to_js_messaging, &params->java_to_js_messaging, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->java_to_js_messaging),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid java_to_js_messaging in JsToJavaMessaging.SetJavaToJsMessaging request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(JsToJavaMessaging::Name_);
  message.set_method_name("SetJavaToJsMessaging");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool JsToJavaMessagingStubDispatch::Accept(
    JsToJavaMessaging* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kJsToJavaMessaging_PostMessage_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)android_webview::mojom::JsToJavaMessaging::PostMessage",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)android_webview::mojom::JsToJavaMessaging::PostMessage");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::JsToJavaMessaging_PostMessage_Params_Data* params =
          reinterpret_cast<internal::JsToJavaMessaging_PostMessage_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::base::string16 p_message{};
      std::vector<mojo::ScopedMessagePipeHandle> p_ports{};
      JsToJavaMessaging_PostMessage_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadMessage(&p_message))
        success = false;
      if (success && !input_data_view.ReadPorts(&p_ports))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            JsToJavaMessaging::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PostMessage(
std::move(p_message), 
std::move(p_ports));
      return true;
    }
    case internal::kJsToJavaMessaging_SetJavaToJsMessaging_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)android_webview::mojom::JsToJavaMessaging::SetJavaToJsMessaging",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)android_webview::mojom::JsToJavaMessaging::SetJavaToJsMessaging");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::JsToJavaMessaging_SetJavaToJsMessaging_Params_Data* params =
          reinterpret_cast<internal::JsToJavaMessaging_SetJavaToJsMessaging_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      mojo::PendingAssociatedRemote<JavaToJsMessaging> p_java_to_js_messaging{};
      JsToJavaMessaging_SetJavaToJsMessaging_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_java_to_js_messaging =
            input_data_view.TakeJavaToJsMessaging<decltype(p_java_to_js_messaging)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            JsToJavaMessaging::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetJavaToJsMessaging(
std::move(p_java_to_js_messaging));
      return true;
    }
  }
  return false;
}

// static
bool JsToJavaMessagingStubDispatch::AcceptWithResponder(
    JsToJavaMessaging* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kJsToJavaMessaging_PostMessage_Name: {
      break;
    }
    case internal::kJsToJavaMessaging_SetJavaToJsMessaging_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kJsToJavaMessagingValidationInfo[] = {
    {&internal::JsToJavaMessaging_PostMessage_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::JsToJavaMessaging_SetJavaToJsMessaging_Params_Data::Validate,
     nullptr /* no response */},
};

bool JsToJavaMessagingRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::android_webview::mojom::JsToJavaMessaging::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kJsToJavaMessagingValidationInfo);
}

const char JavaToJsMessaging::Name_[] = "android_webview.mojom.JavaToJsMessaging";

JavaToJsMessagingProxy::JavaToJsMessagingProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void JavaToJsMessagingProxy::OnPostMessage(
    const ::base::string16& in_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "android_webview::mojom::JavaToJsMessaging::OnPostMessage");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kJavaToJsMessaging_OnPostMessage_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::android_webview::mojom::internal::JavaToJsMessaging_OnPostMessage_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->message)::BaseType::BufferWriter
      message_writer;
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_message, buffer, &message_writer, &serialization_context);
  params->message.Set(
      message_writer.is_null() ? nullptr : message_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null message in JavaToJsMessaging.OnPostMessage request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(JavaToJsMessaging::Name_);
  message.set_method_name("OnPostMessage");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool JavaToJsMessagingStubDispatch::Accept(
    JavaToJsMessaging* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kJavaToJsMessaging_OnPostMessage_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)android_webview::mojom::JavaToJsMessaging::OnPostMessage",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)android_webview::mojom::JavaToJsMessaging::OnPostMessage");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::JavaToJsMessaging_OnPostMessage_Params_Data* params =
          reinterpret_cast<internal::JavaToJsMessaging_OnPostMessage_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::base::string16 p_message{};
      JavaToJsMessaging_OnPostMessage_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadMessage(&p_message))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            JavaToJsMessaging::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnPostMessage(
std::move(p_message));
      return true;
    }
  }
  return false;
}

// static
bool JavaToJsMessagingStubDispatch::AcceptWithResponder(
    JavaToJsMessaging* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kJavaToJsMessaging_OnPostMessage_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kJavaToJsMessagingValidationInfo[] = {
    {&internal::JavaToJsMessaging_OnPostMessage_Params_Data::Validate,
     nullptr /* no response */},
};

bool JavaToJsMessagingRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::android_webview::mojom::JavaToJsMessaging::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kJavaToJsMessagingValidationInfo);
}

const char JsJavaConfigurator::Name_[] = "android_webview.mojom.JsJavaConfigurator";

JsJavaConfiguratorProxy::JsJavaConfiguratorProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void JsJavaConfiguratorProxy::SetJsObjects(
    std::vector<JsObjectPtr> in_js_objects) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "android_webview::mojom::JsJavaConfigurator::SetJsObjects");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kJsJavaConfigurator_SetJsObjects_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::android_webview::mojom::internal::JsJavaConfigurator_SetJsObjects_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->js_objects)::BaseType::BufferWriter
      js_objects_writer;
  const mojo::internal::ContainerValidateParams js_objects_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::android_webview::mojom::JsObjectDataView>>(
      in_js_objects, buffer, &js_objects_writer, &js_objects_validate_params,
      &serialization_context);
  params->js_objects.Set(
      js_objects_writer.is_null() ? nullptr : js_objects_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->js_objects.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null js_objects in JsJavaConfigurator.SetJsObjects request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(JsJavaConfigurator::Name_);
  message.set_method_name("SetJsObjects");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool JsJavaConfiguratorStubDispatch::Accept(
    JsJavaConfigurator* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kJsJavaConfigurator_SetJsObjects_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)android_webview::mojom::JsJavaConfigurator::SetJsObjects",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)android_webview::mojom::JsJavaConfigurator::SetJsObjects");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::JsJavaConfigurator_SetJsObjects_Params_Data* params =
          reinterpret_cast<internal::JsJavaConfigurator_SetJsObjects_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      std::vector<JsObjectPtr> p_js_objects{};
      JsJavaConfigurator_SetJsObjects_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadJsObjects(&p_js_objects))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            JsJavaConfigurator::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetJsObjects(
std::move(p_js_objects));
      return true;
    }
  }
  return false;
}

// static
bool JsJavaConfiguratorStubDispatch::AcceptWithResponder(
    JsJavaConfigurator* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kJsJavaConfigurator_SetJsObjects_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kJsJavaConfiguratorValidationInfo[] = {
    {&internal::JsJavaConfigurator_SetJsObjects_Params_Data::Validate,
     nullptr /* no response */},
};

bool JsJavaConfiguratorRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::android_webview::mojom::JsJavaConfigurator::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kJsJavaConfiguratorValidationInfo);
}

}  // namespace mojom
}  // namespace android_webview

namespace mojo {


// static
bool StructTraits<::android_webview::mojom::JsObject::DataView, ::android_webview::mojom::JsObjectPtr>::Read(
    ::android_webview::mojom::JsObject::DataView input,
    ::android_webview::mojom::JsObjectPtr* output) {
  bool success = true;
  ::android_webview::mojom::JsObjectPtr result(::android_webview::mojom::JsObject::New());
  
      if (success && !input.ReadJsObjectName(&result->js_object_name))
        success = false;
      if (success) {
        result->js_to_java_messaging =
            input.TakeJsToJavaMessaging<decltype(result->js_to_java_messaging)>();
      }
      if (success && !input.ReadAllowedOriginRules(&result->allowed_origin_rules))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif