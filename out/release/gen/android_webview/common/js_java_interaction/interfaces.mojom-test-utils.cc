// android_webview/common/js_java_interaction/interfaces.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "android_webview/common/js_java_interaction/interfaces.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/string16.mojom.h"
#include "services/network/public/mojom/proxy_config.mojom.h"


#ifndef ANDROID_WEBVIEW_COMMON_JS_JAVA_INTERACTION_INTERFACES_MOJOM_JUMBO_H_
#define ANDROID_WEBVIEW_COMMON_JS_JAVA_INTERACTION_INTERFACES_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/string16_mojom_traits.h"
#include "services/network/public/cpp/proxy_config_mojom_traits.h"
#endif


namespace android_webview {
namespace mojom {


void JsToJavaMessagingInterceptorForTesting::PostMessage(const ::base::string16& message, std::vector<mojo::ScopedMessagePipeHandle> ports) {
  GetForwardingInterface()->PostMessage(std::move(message), std::move(ports));
}
void JsToJavaMessagingInterceptorForTesting::SetJavaToJsMessaging(mojo::PendingAssociatedRemote<JavaToJsMessaging> java_to_js_messaging) {
  GetForwardingInterface()->SetJavaToJsMessaging(std::move(java_to_js_messaging));
}
JsToJavaMessagingAsyncWaiter::JsToJavaMessagingAsyncWaiter(
    JsToJavaMessaging* proxy) : proxy_(proxy) {}

JsToJavaMessagingAsyncWaiter::~JsToJavaMessagingAsyncWaiter() = default;




void JavaToJsMessagingInterceptorForTesting::OnPostMessage(const ::base::string16& message) {
  GetForwardingInterface()->OnPostMessage(std::move(message));
}
JavaToJsMessagingAsyncWaiter::JavaToJsMessagingAsyncWaiter(
    JavaToJsMessaging* proxy) : proxy_(proxy) {}

JavaToJsMessagingAsyncWaiter::~JavaToJsMessagingAsyncWaiter() = default;




void JsJavaConfiguratorInterceptorForTesting::SetJsObjects(std::vector<JsObjectPtr> js_objects) {
  GetForwardingInterface()->SetJsObjects(std::move(js_objects));
}
JsJavaConfiguratorAsyncWaiter::JsJavaConfiguratorAsyncWaiter(
    JsJavaConfigurator* proxy) : proxy_(proxy) {}

JsJavaConfiguratorAsyncWaiter::~JsJavaConfiguratorAsyncWaiter() = default;






}  // namespace mojom
}  // namespace android_webview

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif