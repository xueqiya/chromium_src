// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwWebResourceResponse

#ifndef org_chromium_android_webview_AwWebResourceResponse_JNI
#define org_chromium_android_webview_AwWebResourceResponse_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AwWebResourceResponse[];
const char kClassPath_org_chromium_android_1webview_AwWebResourceResponse[] =
    "org/chromium/android_webview/AwWebResourceResponse";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwWebResourceResponse_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwWebResourceResponse_clazz_defined
#define org_chromium_android_1webview_AwWebResourceResponse_clazz_defined
inline jclass org_chromium_android_1webview_AwWebResourceResponse_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_AwWebResourceResponse,
      &g_org_chromium_android_1webview_AwWebResourceResponse_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebResourceResponse_getMimeType(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AwWebResourceResponse_getMimeType(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwWebResourceResponse_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebResourceResponse_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMimeType",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwWebResourceResponse_getMimeType);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebResourceResponse_getCharset(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AwWebResourceResponse_getCharset(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwWebResourceResponse_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebResourceResponse_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getCharset",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwWebResourceResponse_getCharset);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebResourceResponse_getData(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_AwWebResourceResponse_getData(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwWebResourceResponse_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebResourceResponse_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getData",
          "()Ljava/io/InputStream;",
          &g_org_chromium_android_1webview_AwWebResourceResponse_getData);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebResourceResponse_getStatusCode(nullptr);
static jint Java_AwWebResourceResponse_getStatusCode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwWebResourceResponse_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebResourceResponse_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getStatusCode",
          "()I",
          &g_org_chromium_android_1webview_AwWebResourceResponse_getStatusCode);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebResourceResponse_getReasonPhrase(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AwWebResourceResponse_getReasonPhrase(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwWebResourceResponse_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebResourceResponse_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getReasonPhrase",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwWebResourceResponse_getReasonPhrase);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebResourceResponse_getResponseHeaderNames(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_AwWebResourceResponse_getResponseHeaderNames(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwWebResourceResponse_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebResourceResponse_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getResponseHeaderNames",
          "()[Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwWebResourceResponse_getResponseHeaderNames);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebResourceResponse_getResponseHeaderValues(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_AwWebResourceResponse_getResponseHeaderValues(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwWebResourceResponse_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebResourceResponse_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getResponseHeaderValues",
          "()[Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwWebResourceResponse_getResponseHeaderValues);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwWebResourceResponse_JNI
