// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/PopupTouchHandleDrawable

#ifndef org_chromium_android_webview_PopupTouchHandleDrawable_JNI
#define org_chromium_android_webview_PopupTouchHandleDrawable_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_PopupTouchHandleDrawable[];
const char kClassPath_org_chromium_android_1webview_PopupTouchHandleDrawable[] =
    "org/chromium/android_webview/PopupTouchHandleDrawable";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(nullptr);
#ifndef org_chromium_android_1webview_PopupTouchHandleDrawable_clazz_defined
#define org_chromium_android_1webview_PopupTouchHandleDrawable_clazz_defined
inline jclass org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_PopupTouchHandleDrawable,
      &g_org_chromium_android_1webview_PopupTouchHandleDrawable_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static jlong JNI_PopupTouchHandleDrawable_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jfloat horizontalPaddingRatio);

JNI_GENERATOR_EXPORT jlong Java_J_N_MQ7e2Y0w(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jfloat horizontalPaddingRatio) {
  return JNI_PopupTouchHandleDrawable_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      horizontalPaddingRatio);
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_setOrientation(nullptr);
static void Java_PopupTouchHandleDrawable_setOrientation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper orientation,
    jboolean mirrorVertical,
    jboolean mirrorHorizontal) {
  jclass clazz = org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setOrientation",
          "(IZZ)V",
          &g_org_chromium_android_1webview_PopupTouchHandleDrawable_setOrientation);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(orientation), mirrorVertical, mirrorHorizontal);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_destroy(nullptr);
static void Java_PopupTouchHandleDrawable_destroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_android_1webview_PopupTouchHandleDrawable_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_show(nullptr);
static void Java_PopupTouchHandleDrawable_show(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "show",
          "()V",
          &g_org_chromium_android_1webview_PopupTouchHandleDrawable_show);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_hide(nullptr);
static void Java_PopupTouchHandleDrawable_hide(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "hide",
          "()V",
          &g_org_chromium_android_1webview_PopupTouchHandleDrawable_hide);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_setOrigin(nullptr);
static void Java_PopupTouchHandleDrawable_setOrigin(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jfloat originXDip,
    jfloat originYDip) {
  jclass clazz = org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setOrigin",
          "(FF)V",
          &g_org_chromium_android_1webview_PopupTouchHandleDrawable_setOrigin);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, originXDip, originYDip);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_setVisible(nullptr);
static void Java_PopupTouchHandleDrawable_setVisible(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean visible) {
  jclass clazz = org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setVisible",
          "(Z)V",
          &g_org_chromium_android_1webview_PopupTouchHandleDrawable_setVisible);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, visible);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_getOriginXDip(nullptr);
static jfloat Java_PopupTouchHandleDrawable_getOriginXDip(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getOriginXDip",
          "()F",
          &g_org_chromium_android_1webview_PopupTouchHandleDrawable_getOriginXDip);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_getOriginYDip(nullptr);
static jfloat Java_PopupTouchHandleDrawable_getOriginYDip(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getOriginYDip",
          "()F",
          &g_org_chromium_android_1webview_PopupTouchHandleDrawable_getOriginYDip);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_getVisibleWidthDip(nullptr);
static jfloat Java_PopupTouchHandleDrawable_getVisibleWidthDip(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getVisibleWidthDip",
          "()F",
          &g_org_chromium_android_1webview_PopupTouchHandleDrawable_getVisibleWidthDip);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_PopupTouchHandleDrawable_getVisibleHeightDip(nullptr);
static jfloat Java_PopupTouchHandleDrawable_getVisibleHeightDip(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_PopupTouchHandleDrawable_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getVisibleHeightDip",
          "()F",
          &g_org_chromium_android_1webview_PopupTouchHandleDrawable_getVisibleHeightDip);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_PopupTouchHandleDrawable_JNI
