// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwTracingController

#ifndef org_chromium_android_webview_AwTracingController_JNI
#define org_chromium_android_webview_AwTracingController_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AwTracingController[];
const char kClassPath_org_chromium_android_1webview_AwTracingController[] =
    "org/chromium/android_webview/AwTracingController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwTracingController_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwTracingController_clazz_defined
#define org_chromium_android_1webview_AwTracingController_clazz_defined
inline jclass org_chromium_android_1webview_AwTracingController_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_AwTracingController,
      &g_org_chromium_android_1webview_AwTracingController_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static jlong JNI_AwTracingController_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MJiQrQ3Z(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_AwTracingController_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MDhATp5G(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwTracingController,
    jobject caller,
    jstring categories,
    jint traceMode) {
  AwTracingController* native = reinterpret_cast<AwTracingController*>(nativeAwTracingController);
  CHECK_NATIVE_PTR(env, jcaller, native, "Start", false);
  return native->Start(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, categories), traceMode);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MVnr_10Jw(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwTracingController,
    jobject caller) {
  AwTracingController* native = reinterpret_cast<AwTracingController*>(nativeAwTracingController);
  CHECK_NATIVE_PTR(env, jcaller, native, "StopAndFlush", false);
  return native->StopAndFlush(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MI9fwsnY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwTracingController,
    jobject caller) {
  AwTracingController* native = reinterpret_cast<AwTracingController*>(nativeAwTracingController);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsTracing", false);
  return native->IsTracing(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwTracingController_onTraceDataChunkReceived(nullptr);
static void Java_AwTracingController_onTraceDataChunkReceived(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jbyteArray>& data) {
  jclass clazz = org_chromium_android_1webview_AwTracingController_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwTracingController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onTraceDataChunkReceived",
          "([B)V",
          &g_org_chromium_android_1webview_AwTracingController_onTraceDataChunkReceived);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, data.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwTracingController_onTraceDataComplete(nullptr);
static void Java_AwTracingController_onTraceDataComplete(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwTracingController_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwTracingController_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onTraceDataComplete",
          "()V",
          &g_org_chromium_android_1webview_AwTracingController_onTraceDataComplete);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwTracingController_JNI
