// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwContentsIoThreadClient

#ifndef org_chromium_android_webview_AwContentsIoThreadClient_JNI
#define org_chromium_android_webview_AwContentsIoThreadClient_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AwContentsIoThreadClient[];
const char kClassPath_org_chromium_android_1webview_AwContentsIoThreadClient[] =
    "org/chromium/android_webview/AwContentsIoThreadClient";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwContentsIoThreadClient_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwContentsIoThreadClient_clazz_defined
#define org_chromium_android_1webview_AwContentsIoThreadClient_clazz_defined
inline jclass org_chromium_android_1webview_AwContentsIoThreadClient_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_AwContentsIoThreadClient,
      &g_org_chromium_android_1webview_AwContentsIoThreadClient_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsIoThreadClient_getCacheMode(nullptr);
static jint Java_AwContentsIoThreadClient_getCacheMode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getCacheMode",
          "()I",
          &g_org_chromium_android_1webview_AwContentsIoThreadClient_getCacheMode);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsIoThreadClient_shouldBlockContentUrls(nullptr);
static jboolean Java_AwContentsIoThreadClient_shouldBlockContentUrls(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "shouldBlockContentUrls",
          "()Z",
          &g_org_chromium_android_1webview_AwContentsIoThreadClient_shouldBlockContentUrls);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsIoThreadClient_shouldBlockFileUrls(nullptr);
static jboolean Java_AwContentsIoThreadClient_shouldBlockFileUrls(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "shouldBlockFileUrls",
          "()Z",
          &g_org_chromium_android_1webview_AwContentsIoThreadClient_shouldBlockFileUrls);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsIoThreadClient_shouldBlockNetworkLoads(nullptr);
static jboolean Java_AwContentsIoThreadClient_shouldBlockNetworkLoads(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "shouldBlockNetworkLoads",
          "()Z",
          &g_org_chromium_android_1webview_AwContentsIoThreadClient_shouldBlockNetworkLoads);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsIoThreadClient_shouldAcceptThirdPartyCookies(nullptr);
static jboolean Java_AwContentsIoThreadClient_shouldAcceptThirdPartyCookies(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "shouldAcceptThirdPartyCookies",
          "()Z",
          &g_org_chromium_android_1webview_AwContentsIoThreadClient_shouldAcceptThirdPartyCookies);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsIoThreadClient_getSafeBrowsingEnabled(nullptr);
static jboolean Java_AwContentsIoThreadClient_getSafeBrowsingEnabled(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSafeBrowsingEnabled",
          "()Z",
          &g_org_chromium_android_1webview_AwContentsIoThreadClient_getSafeBrowsingEnabled);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsIoThreadClient_getBackgroundThreadClient(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_AwContentsIoThreadClient_getBackgroundThreadClient(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsIoThreadClient_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getBackgroundThreadClient",
          "()Lorg/chromium/android_webview/AwContentsBackgroundThreadClient;",
          &g_org_chromium_android_1webview_AwContentsIoThreadClient_getBackgroundThreadClient);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwContentsIoThreadClient_JNI
