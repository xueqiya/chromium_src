// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwContentsClientBridge

#ifndef org_chromium_android_webview_AwContentsClientBridge_JNI
#define org_chromium_android_webview_AwContentsClientBridge_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AwContentsClientBridge[];
const char kClassPath_org_chromium_android_1webview_AwContentsClientBridge[] =
    "org/chromium/android_webview/AwContentsClientBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwContentsClientBridge_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwContentsClientBridge_clazz_defined
#define org_chromium_android_1webview_AwContentsClientBridge_clazz_defined
inline jclass org_chromium_android_1webview_AwContentsClientBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_AwContentsClientBridge,
      &g_org_chromium_android_1webview_AwContentsClientBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

JNI_GENERATOR_EXPORT void Java_J_N_MXMPzQYm(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContentsClientBridge,
    jobject caller,
    jint action,
    jboolean reporting,
    jint requestId) {
  AwContentsClientBridge* native =
      reinterpret_cast<AwContentsClientBridge*>(nativeAwContentsClientBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "TakeSafeBrowsingAction");
  return native->TakeSafeBrowsingAction(env, base::android::JavaParamRef<jobject>(env, caller),
      action, reporting, requestId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MgWlsTs7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContentsClientBridge,
    jobject caller,
    jboolean proceed,
    jint id) {
  AwContentsClientBridge* native =
      reinterpret_cast<AwContentsClientBridge*>(nativeAwContentsClientBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "ProceedSslError");
  return native->ProceedSslError(env, base::android::JavaParamRef<jobject>(env, caller), proceed,
      id);
}

JNI_GENERATOR_EXPORT void Java_J_N_MZT_1Y79r(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContentsClientBridge,
    jobject caller,
    jint id,
    jobjectArray certChain,
    jobject androidKey) {
  AwContentsClientBridge* native =
      reinterpret_cast<AwContentsClientBridge*>(nativeAwContentsClientBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "ProvideClientCertificateResponse");
  return native->ProvideClientCertificateResponse(env, base::android::JavaParamRef<jobject>(env,
      caller), id, base::android::JavaParamRef<jobjectArray>(env, certChain),
      base::android::JavaParamRef<jobject>(env, androidKey));
}

JNI_GENERATOR_EXPORT void Java_J_N_MNISBPG1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContentsClientBridge,
    jobject caller,
    jint id,
    jstring prompt) {
  AwContentsClientBridge* native =
      reinterpret_cast<AwContentsClientBridge*>(nativeAwContentsClientBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "ConfirmJsResult");
  return native->ConfirmJsResult(env, base::android::JavaParamRef<jobject>(env, caller), id,
      base::android::JavaParamRef<jstring>(env, prompt));
}

JNI_GENERATOR_EXPORT void Java_J_N_MXWyhv9x(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContentsClientBridge,
    jobject caller,
    jint id) {
  AwContentsClientBridge* native =
      reinterpret_cast<AwContentsClientBridge*>(nativeAwContentsClientBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelJsResult");
  return native->CancelJsResult(env, base::android::JavaParamRef<jobject>(env, caller), id);
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_setNativeContentsClientBridge(nullptr);
static void Java_AwContentsClientBridge_setNativeContentsClientBridge(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeContentsClientBridge) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setNativeContentsClientBridge",
          "(J)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_setNativeContentsClientBridge);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativeContentsClientBridge);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_allowCertificateError(nullptr);
static jboolean Java_AwContentsClientBridge_allowCertificateError(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper certError,
    const base::android::JavaRef<jbyteArray>& derBytes,
    const base::android::JavaRef<jstring>& url,
    JniIntWrapper id) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "allowCertificateError",
          "(I[BLjava/lang/String;I)Z",
          &g_org_chromium_android_1webview_AwContentsClientBridge_allowCertificateError);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, as_jint(certError), derBytes.obj(), url.obj(), as_jint(id));
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_selectClientCertificate(nullptr);
static void Java_AwContentsClientBridge_selectClientCertificate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper id,
    const base::android::JavaRef<jobjectArray>& keyTypes,
    const base::android::JavaRef<jobjectArray>& encodedPrincipals,
    const base::android::JavaRef<jstring>& host,
    JniIntWrapper port) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "selectClientCertificate",
          "(I[Ljava/lang/String;[[BLjava/lang/String;I)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_selectClientCertificate);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(id), keyTypes.obj(), encodedPrincipals.obj(),
              host.obj(), as_jint(port));
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_handleJsAlert(nullptr);
static void Java_AwContentsClientBridge_handleJsAlert(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& message,
    JniIntWrapper id) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleJsAlert",
          "(Ljava/lang/String;Ljava/lang/String;I)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_handleJsAlert);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), message.obj(), as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_handleJsConfirm(nullptr);
static void Java_AwContentsClientBridge_handleJsConfirm(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& message,
    JniIntWrapper id) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleJsConfirm",
          "(Ljava/lang/String;Ljava/lang/String;I)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_handleJsConfirm);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), message.obj(), as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_handleJsPrompt(nullptr);
static void Java_AwContentsClientBridge_handleJsPrompt(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& message,
    const base::android::JavaRef<jstring>& defaultValue,
    JniIntWrapper id) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleJsPrompt",
          "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_handleJsPrompt);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), message.obj(), defaultValue.obj(), as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_handleJsBeforeUnload(nullptr);
static void Java_AwContentsClientBridge_handleJsBeforeUnload(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& message,
    JniIntWrapper id) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleJsBeforeUnload",
          "(Ljava/lang/String;Ljava/lang/String;I)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_handleJsBeforeUnload);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), message.obj(), as_jint(id));
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_newDownload(nullptr);
static void Java_AwContentsClientBridge_newDownload(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& userAgent,
    const base::android::JavaRef<jstring>& contentDisposition,
    const base::android::JavaRef<jstring>& mimeType,
    jlong contentLength) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "newDownload",
          "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_newDownload);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), userAgent.obj(), contentDisposition.obj(),
              mimeType.obj(), contentLength);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_newLoginRequest(nullptr);
static void Java_AwContentsClientBridge_newLoginRequest(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& realm,
    const base::android::JavaRef<jstring>& account,
    const base::android::JavaRef<jstring>& args) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "newLoginRequest",
          "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_newLoginRequest);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, realm.obj(), account.obj(), args.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_onReceivedError(nullptr);
static void Java_AwContentsClientBridge_onReceivedError(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    jboolean isMainFrame,
    jboolean hasUserGesture,
    jboolean isRendererInitiated,
    const base::android::JavaRef<jstring>& method,
    const base::android::JavaRef<jobjectArray>& requestHeaderNames,
    const base::android::JavaRef<jobjectArray>& requestHeaderValues,
    JniIntWrapper errorCode,
    const base::android::JavaRef<jstring>& description,
    jboolean safebrowsingHit,
    jboolean shouldOmitNotificationsForSafeBrowsingHit) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onReceivedError",
"(Ljava/lang/String;ZZZLjava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ILjava/lang/String;ZZ)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_onReceivedError);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), isMainFrame, hasUserGesture, isRendererInitiated,
              method.obj(), requestHeaderNames.obj(), requestHeaderValues.obj(), as_jint(errorCode),
              description.obj(), safebrowsingHit, shouldOmitNotificationsForSafeBrowsingHit);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_onSafeBrowsingHit(nullptr);
static void Java_AwContentsClientBridge_onSafeBrowsingHit(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    jboolean isMainFrame,
    jboolean hasUserGesture,
    const base::android::JavaRef<jstring>& method,
    const base::android::JavaRef<jobjectArray>& requestHeaderNames,
    const base::android::JavaRef<jobjectArray>& requestHeaderValues,
    JniIntWrapper threatType,
    JniIntWrapper requestId) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onSafeBrowsingHit",
          "(Ljava/lang/String;ZZLjava/lang/String;[Ljava/lang/String;[Ljava/lang/String;II)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_onSafeBrowsingHit);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), isMainFrame, hasUserGesture, method.obj(),
              requestHeaderNames.obj(), requestHeaderValues.obj(), as_jint(threatType),
              as_jint(requestId));
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_onReceivedHttpError(nullptr);
static void Java_AwContentsClientBridge_onReceivedHttpError(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    jboolean isMainFrame,
    jboolean hasUserGesture,
    const base::android::JavaRef<jstring>& method,
    const base::android::JavaRef<jobjectArray>& requestHeaderNames,
    const base::android::JavaRef<jobjectArray>& requestHeaderValues,
    const base::android::JavaRef<jstring>& mimeType,
    const base::android::JavaRef<jstring>& encoding,
    JniIntWrapper statusCode,
    const base::android::JavaRef<jstring>& reasonPhrase,
    const base::android::JavaRef<jobjectArray>& responseHeaderNames,
    const base::android::JavaRef<jobjectArray>& responseHeaderValues) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onReceivedHttpError",
"(Ljava/lang/String;ZZLjava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V",
          &g_org_chromium_android_1webview_AwContentsClientBridge_onReceivedHttpError);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), isMainFrame, hasUserGesture, method.obj(),
              requestHeaderNames.obj(), requestHeaderValues.obj(), mimeType.obj(), encoding.obj(),
              as_jint(statusCode), reasonPhrase.obj(), responseHeaderNames.obj(),
              responseHeaderValues.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsClientBridge_shouldOverrideUrlLoading(nullptr);
static jboolean Java_AwContentsClientBridge_shouldOverrideUrlLoading(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    jboolean hasUserGesture,
    jboolean isRedirect,
    jboolean isMainFrame) {
  jclass clazz = org_chromium_android_1webview_AwContentsClientBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContentsClientBridge_clazz(env), false);

  jni_generator::JniJavaCallContextUnchecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "shouldOverrideUrlLoading",
          "(Ljava/lang/String;ZZZ)Z",
          &g_org_chromium_android_1webview_AwContentsClientBridge_shouldOverrideUrlLoading);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.method_id, url.obj(), hasUserGesture, isRedirect, isMainFrame);
  return ret;
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwContentsClientBridge_JNI
