// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwCookieManager

#ifndef org_chromium_android_webview_AwCookieManager_JNI
#define org_chromium_android_webview_AwCookieManager_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static jlong JNI_AwCookieManager_GetDefaultCookieManager(JNIEnv* env);

JNI_GENERATOR_EXPORT jlong Java_J_N_M2x3bkF7(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwCookieManager_GetDefaultCookieManager(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MxGz1CMI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller,
    jboolean accept) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetShouldAcceptCookies");
  return native->SetShouldAcceptCookies(env, base::android::JavaParamRef<jobject>(env, caller),
      accept);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MIaWBQxt(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetShouldAcceptCookies", false);
  return native->GetShouldAcceptCookies(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MqWxZVFj(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller,
    jstring url,
    jstring value,
    jobject callback) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetCookie");
  return native->SetCookie(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, url), base::android::JavaParamRef<jstring>(env,
      value), base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_M521ruQI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller,
    jstring url,
    jstring value) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetCookieSync");
  return native->SetCookieSync(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, url), base::android::JavaParamRef<jstring>(env,
      value));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MwtyXc6D(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller,
    jstring url) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCookie", NULL);
  return native->GetCookie(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, url)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MPH4p3lP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller,
    jobject callback) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveSessionCookies");
  return native->RemoveSessionCookies(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MCvO0Hcd(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveSessionCookiesSync");
  return native->RemoveSessionCookiesSync(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MYNMnyIh(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller,
    jobject callback) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveAllCookies");
  return native->RemoveAllCookies(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_M8tXWfBc(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveAllCookiesSync");
  return native->RemoveAllCookiesSync(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MtpZW_1Jk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveExpiredCookies");
  return native->RemoveExpiredCookies(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MgWRfeHz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "FlushCookieStore");
  return native->FlushCookieStore(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MLEl9vQp(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasCookies", false);
  return native->HasCookies(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MjZje8ZY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAllowFileSchemeCookies", false);
  return native->GetAllowFileSchemeCookies(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mfo4YHeg(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieManager,
    jobject caller,
    jboolean allow) {
  CookieManager* native = reinterpret_cast<CookieManager*>(nativeCookieManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAllowFileSchemeCookies");
  return native->SetAllowFileSchemeCookies(env, base::android::JavaParamRef<jobject>(env, caller),
      allow);
}


}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwCookieManager_JNI
