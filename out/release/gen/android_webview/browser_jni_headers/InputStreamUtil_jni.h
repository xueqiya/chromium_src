// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/InputStreamUtil

#ifndef org_chromium_android_webview_InputStreamUtil_JNI
#define org_chromium_android_webview_InputStreamUtil_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_InputStreamUtil[];
const char kClassPath_org_chromium_android_1webview_InputStreamUtil[] =
    "org/chromium/android_webview/InputStreamUtil";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_InputStreamUtil_clazz(nullptr);
#ifndef org_chromium_android_1webview_InputStreamUtil_clazz_defined
#define org_chromium_android_1webview_InputStreamUtil_clazz_defined
inline jclass org_chromium_android_1webview_InputStreamUtil_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_android_1webview_InputStreamUtil,
      &g_org_chromium_android_1webview_InputStreamUtil_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {


static std::atomic<jmethodID> g_org_chromium_android_1webview_InputStreamUtil_close(nullptr);
static void Java_InputStreamUtil_close(JNIEnv* env, const base::android::JavaRef<jobject>& stream) {
  jclass clazz = org_chromium_android_1webview_InputStreamUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_InputStreamUtil_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "close",
          "(Ljava/io/InputStream;)V",
          &g_org_chromium_android_1webview_InputStreamUtil_close);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, stream.obj());
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_InputStreamUtil_available(nullptr);
static jint Java_InputStreamUtil_available(JNIEnv* env, const base::android::JavaRef<jobject>&
    stream) {
  jclass clazz = org_chromium_android_1webview_InputStreamUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_InputStreamUtil_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "available",
          "(Ljava/io/InputStream;)I",
          &g_org_chromium_android_1webview_InputStreamUtil_available);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, stream.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_InputStreamUtil_read(nullptr);
static jint Java_InputStreamUtil_read(JNIEnv* env, const base::android::JavaRef<jobject>& stream,
    const base::android::JavaRef<jbyteArray>& b,
    JniIntWrapper off,
    JniIntWrapper len) {
  jclass clazz = org_chromium_android_1webview_InputStreamUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_InputStreamUtil_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "read",
          "(Ljava/io/InputStream;[BII)I",
          &g_org_chromium_android_1webview_InputStreamUtil_read);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, stream.obj(), b.obj(), as_jint(off), as_jint(len));
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_InputStreamUtil_skip(nullptr);
static jlong Java_InputStreamUtil_skip(JNIEnv* env, const base::android::JavaRef<jobject>& stream,
    jlong n) {
  jclass clazz = org_chromium_android_1webview_InputStreamUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_InputStreamUtil_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "skip",
          "(Ljava/io/InputStream;J)J",
          &g_org_chromium_android_1webview_InputStreamUtil_skip);

  jlong ret =
      env->CallStaticLongMethod(clazz,
          call_context.base.method_id, stream.obj(), n);
  return ret;
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_InputStreamUtil_JNI
