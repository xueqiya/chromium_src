// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/gfx/JavaBrowserViewRendererHelper

#ifndef org_chromium_android_webview_gfx_JavaBrowserViewRendererHelper_JNI
#define org_chromium_android_webview_gfx_JavaBrowserViewRendererHelper_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper[];
const char kClassPath_org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper[] =
    "org/chromium/android_webview/gfx/JavaBrowserViewRendererHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_clazz(nullptr);
#ifndef org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_clazz_defined
#define org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_clazz_defined
inline jclass org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper,
      &g_org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_createBitmap(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_JavaBrowserViewRendererHelper_createBitmap(JNIEnv* env, JniIntWrapper width,
    JniIntWrapper height,
    const base::android::JavaRef<jobject>& canvas) {
  jclass clazz = org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createBitmap",
          "(IILandroid/graphics/Canvas;)Landroid/graphics/Bitmap;",
          &g_org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_createBitmap);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(width), as_jint(height), canvas.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_drawBitmapIntoCanvas(nullptr);
static void Java_JavaBrowserViewRendererHelper_drawBitmapIntoCanvas(JNIEnv* env, const
    base::android::JavaRef<jobject>& bitmap,
    const base::android::JavaRef<jobject>& canvas,
    JniIntWrapper scrollX,
    JniIntWrapper scrollY) {
  jclass clazz = org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "drawBitmapIntoCanvas",
          "(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;II)V",
          &g_org_chromium_android_1webview_gfx_JavaBrowserViewRendererHelper_drawBitmapIntoCanvas);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, bitmap.obj(), canvas.obj(), as_jint(scrollX),
              as_jint(scrollY));
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_gfx_JavaBrowserViewRendererHelper_JNI
