// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwSettings

#ifndef org_chromium_android_webview_AwSettings_JNI
#define org_chromium_android_webview_AwSettings_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_android_1webview_AwSettings[];
const char kClassPath_org_chromium_android_1webview_AwSettings[] =
    "org/chromium/android_webview/AwSettings";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwSettings_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwSettings_clazz_defined
#define org_chromium_android_1webview_AwSettings_clazz_defined
inline jclass org_chromium_android_1webview_AwSettings_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_android_1webview_AwSettings,
      &g_org_chromium_android_1webview_AwSettings_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static jlong JNI_AwSettings_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong Java_J_N_M4GPw_1sx(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject webContents) {
  return JNI_AwSettings_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_MtdU4vpL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MrAp8rc4(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller,
    jlong webPrefsPtr) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "PopulateWebPreferencesLocked");
  return native->PopulateWebPreferencesLocked(env, base::android::JavaParamRef<jobject>(env,
      caller), webPrefsPtr);
}

JNI_GENERATOR_EXPORT void Java_J_N_MYBohkOD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResetScrollAndScaleState");
  return native->ResetScrollAndScaleState(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mq8l4Aae(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateEverythingLocked");
  return native->UpdateEverythingLocked(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_ManPyeB5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateInitialPageScaleLocked");
  return native->UpdateInitialPageScaleLocked(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MShmU87b(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateUserAgentLocked");
  return native->UpdateUserAgentLocked(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MuI9Jt0j(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateWebkitPreferencesLocked");
  return native->UpdateWebkitPreferencesLocked(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

static base::android::ScopedJavaLocalRef<jstring> JNI_AwSettings_GetDefaultUserAgent(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_MEzAefkM(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwSettings_GetDefaultUserAgent(env).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_Mt45ai_1h(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateFormDataPreferencesLocked");
  return native->UpdateFormDataPreferencesLocked(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MbLkcpTV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateRendererPreferencesLocked");
  return native->UpdateRendererPreferencesLocked(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_ML5KB9Yq(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateOffscreenPreRasterLocked");
  return native->UpdateOffscreenPreRasterLocked(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MVXG782O(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateWillSuppressErrorStateLocked");
  return native->UpdateWillSuppressErrorStateLocked(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2EmJ2_00024z(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateCookiePolicyLocked");
  return native->UpdateCookiePolicyLocked(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M_1GO18v7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwSettings,
    jobject caller) {
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateAllowFileAccessLocked");
  return native->UpdateAllowFileAccessLocked(env, base::android::JavaParamRef<jobject>(env,
      caller));
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_nativeAwSettingsGone(nullptr);
static void Java_AwSettings_nativeAwSettingsGone(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jlong nativeAwSettings) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "nativeAwSettingsGone",
          "(J)V",
          &g_org_chromium_android_1webview_AwSettings_nativeAwSettingsGone);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativeAwSettings);
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_AwSettings_getDIPScaleLocked(nullptr);
static jdouble Java_AwSettings_getDIPScaleLocked(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDIPScaleLocked",
          "()D",
          &g_org_chromium_android_1webview_AwSettings_getDIPScaleLocked);

  jdouble ret =
      env->CallDoubleMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getAcceptThirdPartyCookiesLocked(nullptr);
static jboolean Java_AwSettings_getAcceptThirdPartyCookiesLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAcceptThirdPartyCookiesLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getAcceptThirdPartyCookiesLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getAllowFileAccess(nullptr);
static jboolean Java_AwSettings_getAllowFileAccess(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAllowFileAccess",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getAllowFileAccess);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getInitialPageScalePercentLocked(nullptr);
static jfloat Java_AwSettings_getInitialPageScalePercentLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getInitialPageScalePercentLocked",
          "()F",
          &g_org_chromium_android_1webview_AwSettings_getInitialPageScalePercentLocked);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getSpatialNavigationLocked(nullptr);
static jboolean Java_AwSettings_getSpatialNavigationLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSpatialNavigationLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getSpatialNavigationLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getEnableSupportedHardwareAcceleratedFeaturesLocked(nullptr);
static jboolean Java_AwSettings_getEnableSupportedHardwareAcceleratedFeaturesLocked(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getEnableSupportedHardwareAcceleratedFeaturesLocked",
          "()Z",
&g_org_chromium_android_1webview_AwSettings_getEnableSupportedHardwareAcceleratedFeaturesLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getFullscreenSupportedLocked(nullptr);
static jboolean Java_AwSettings_getFullscreenSupportedLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getFullscreenSupportedLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getFullscreenSupportedLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getSaveFormDataLocked(nullptr);
static jboolean Java_AwSettings_getSaveFormDataLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSaveFormDataLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getSaveFormDataLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getAllowSniffingFileUrls(nullptr);
static jboolean Java_AwSettings_getAllowSniffingFileUrls(JNIEnv* env) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAllowSniffingFileUrls",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getAllowSniffingFileUrls);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getUserAgentLocked(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AwSettings_getUserAgentLocked(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getUserAgentLocked",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwSettings_getUserAgentLocked);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getLoadWithOverviewModeLocked(nullptr);
static jboolean Java_AwSettings_getLoadWithOverviewModeLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getLoadWithOverviewModeLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getLoadWithOverviewModeLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getTextSizePercentLocked(nullptr);
static jint Java_AwSettings_getTextSizePercentLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getTextSizePercentLocked",
          "()I",
          &g_org_chromium_android_1webview_AwSettings_getTextSizePercentLocked);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getStandardFontFamilyLocked(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_AwSettings_getStandardFontFamilyLocked(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getStandardFontFamilyLocked",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwSettings_getStandardFontFamilyLocked);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getFixedFontFamilyLocked(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AwSettings_getFixedFontFamilyLocked(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getFixedFontFamilyLocked",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwSettings_getFixedFontFamilyLocked);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getSansSerifFontFamilyLocked(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_AwSettings_getSansSerifFontFamilyLocked(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSansSerifFontFamilyLocked",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwSettings_getSansSerifFontFamilyLocked);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getSerifFontFamilyLocked(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AwSettings_getSerifFontFamilyLocked(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSerifFontFamilyLocked",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwSettings_getSerifFontFamilyLocked);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getCursiveFontFamilyLocked(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AwSettings_getCursiveFontFamilyLocked(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getCursiveFontFamilyLocked",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwSettings_getCursiveFontFamilyLocked);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getFantasyFontFamilyLocked(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AwSettings_getFantasyFontFamilyLocked(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getFantasyFontFamilyLocked",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwSettings_getFantasyFontFamilyLocked);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getMinimumFontSizeLocked(nullptr);
static jint Java_AwSettings_getMinimumFontSizeLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMinimumFontSizeLocked",
          "()I",
          &g_org_chromium_android_1webview_AwSettings_getMinimumFontSizeLocked);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getMinimumLogicalFontSizeLocked(nullptr);
static jint Java_AwSettings_getMinimumLogicalFontSizeLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMinimumLogicalFontSizeLocked",
          "()I",
          &g_org_chromium_android_1webview_AwSettings_getMinimumLogicalFontSizeLocked);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getDefaultFontSizeLocked(nullptr);
static jint Java_AwSettings_getDefaultFontSizeLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDefaultFontSizeLocked",
          "()I",
          &g_org_chromium_android_1webview_AwSettings_getDefaultFontSizeLocked);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getDefaultFixedFontSizeLocked(nullptr);
static jint Java_AwSettings_getDefaultFixedFontSizeLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDefaultFixedFontSizeLocked",
          "()I",
          &g_org_chromium_android_1webview_AwSettings_getDefaultFixedFontSizeLocked);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getLoadsImagesAutomaticallyLocked(nullptr);
static jboolean Java_AwSettings_getLoadsImagesAutomaticallyLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getLoadsImagesAutomaticallyLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getLoadsImagesAutomaticallyLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getImagesEnabledLocked(nullptr);
static jboolean Java_AwSettings_getImagesEnabledLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getImagesEnabledLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getImagesEnabledLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getJavaScriptEnabledLocked(nullptr);
static jboolean Java_AwSettings_getJavaScriptEnabledLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getJavaScriptEnabledLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getJavaScriptEnabledLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getAllowUniversalAccessFromFileURLsLocked(nullptr);
static jboolean Java_AwSettings_getAllowUniversalAccessFromFileURLsLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAllowUniversalAccessFromFileURLsLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getAllowUniversalAccessFromFileURLsLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getAllowFileAccessFromFileURLsLocked(nullptr);
static jboolean Java_AwSettings_getAllowFileAccessFromFileURLsLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAllowFileAccessFromFileURLsLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getAllowFileAccessFromFileURLsLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getJavaScriptCanOpenWindowsAutomaticallyLocked(nullptr);
static jboolean Java_AwSettings_getJavaScriptCanOpenWindowsAutomaticallyLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getJavaScriptCanOpenWindowsAutomaticallyLocked",
          "()Z",
&g_org_chromium_android_1webview_AwSettings_getJavaScriptCanOpenWindowsAutomaticallyLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getTextAutosizingEnabledLocked(nullptr);
static jboolean Java_AwSettings_getTextAutosizingEnabledLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getTextAutosizingEnabledLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getTextAutosizingEnabledLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getSupportMultipleWindowsLocked(nullptr);
static jboolean Java_AwSettings_getSupportMultipleWindowsLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSupportMultipleWindowsLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getSupportMultipleWindowsLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getCSSHexAlphaColorEnabledLocked(nullptr);
static jboolean Java_AwSettings_getCSSHexAlphaColorEnabledLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getCSSHexAlphaColorEnabledLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getCSSHexAlphaColorEnabledLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getScrollTopLeftInteropEnabledLocked(nullptr);
static jboolean Java_AwSettings_getScrollTopLeftInteropEnabledLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getScrollTopLeftInteropEnabledLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getScrollTopLeftInteropEnabledLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getWillSuppressErrorPageLocked(nullptr);
static jboolean Java_AwSettings_getWillSuppressErrorPageLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getWillSuppressErrorPageLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getWillSuppressErrorPageLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getSupportLegacyQuirksLocked(nullptr);
static jboolean Java_AwSettings_getSupportLegacyQuirksLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSupportLegacyQuirksLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getSupportLegacyQuirksLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getAllowEmptyDocumentPersistenceLocked(nullptr);
static jboolean Java_AwSettings_getAllowEmptyDocumentPersistenceLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAllowEmptyDocumentPersistenceLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getAllowEmptyDocumentPersistenceLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getAllowGeolocationOnInsecureOrigins(nullptr);
static jboolean Java_AwSettings_getAllowGeolocationOnInsecureOrigins(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAllowGeolocationOnInsecureOrigins",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getAllowGeolocationOnInsecureOrigins);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getDoNotUpdateSelectionOnMutatingSelectionRange(nullptr);
static jboolean Java_AwSettings_getDoNotUpdateSelectionOnMutatingSelectionRange(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDoNotUpdateSelectionOnMutatingSelectionRange",
          "()Z",
&g_org_chromium_android_1webview_AwSettings_getDoNotUpdateSelectionOnMutatingSelectionRange);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getUseWideViewportLocked(nullptr);
static jboolean Java_AwSettings_getUseWideViewportLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getUseWideViewportLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getUseWideViewportLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getZeroLayoutHeightDisablesViewportQuirkLocked(nullptr);
static jboolean Java_AwSettings_getZeroLayoutHeightDisablesViewportQuirkLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getZeroLayoutHeightDisablesViewportQuirkLocked",
          "()Z",
&g_org_chromium_android_1webview_AwSettings_getZeroLayoutHeightDisablesViewportQuirkLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getForceZeroLayoutHeightLocked(nullptr);
static jboolean Java_AwSettings_getForceZeroLayoutHeightLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getForceZeroLayoutHeightLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getForceZeroLayoutHeightLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getPasswordEchoEnabledLocked(nullptr);
static jboolean Java_AwSettings_getPasswordEchoEnabledLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getPasswordEchoEnabledLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getPasswordEchoEnabledLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getAppCacheEnabledLocked(nullptr);
static jboolean Java_AwSettings_getAppCacheEnabledLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAppCacheEnabledLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getAppCacheEnabledLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getDomStorageEnabledLocked(nullptr);
static jboolean Java_AwSettings_getDomStorageEnabledLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDomStorageEnabledLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getDomStorageEnabledLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getDatabaseEnabledLocked(nullptr);
static jboolean Java_AwSettings_getDatabaseEnabledLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDatabaseEnabledLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getDatabaseEnabledLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getDefaultTextEncodingLocked(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_AwSettings_getDefaultTextEncodingLocked(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDefaultTextEncodingLocked",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwSettings_getDefaultTextEncodingLocked);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getMediaPlaybackRequiresUserGestureLocked(nullptr);
static jboolean Java_AwSettings_getMediaPlaybackRequiresUserGestureLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMediaPlaybackRequiresUserGestureLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getMediaPlaybackRequiresUserGestureLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getDefaultVideoPosterURLLocked(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_AwSettings_getDefaultVideoPosterURLLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDefaultVideoPosterURLLocked",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwSettings_getDefaultVideoPosterURLLocked);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getForceDarkModeLocked(nullptr);
static jint Java_AwSettings_getForceDarkModeLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getForceDarkModeLocked",
          "()I",
          &g_org_chromium_android_1webview_AwSettings_getForceDarkModeLocked);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getForceDarkBehaviorLocked(nullptr);
static jint Java_AwSettings_getForceDarkBehaviorLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getForceDarkBehaviorLocked",
          "()I",
          &g_org_chromium_android_1webview_AwSettings_getForceDarkBehaviorLocked);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getAllowRunningInsecureContentLocked(nullptr);
static jboolean Java_AwSettings_getAllowRunningInsecureContentLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAllowRunningInsecureContentLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getAllowRunningInsecureContentLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getUseStricMixedContentCheckingLocked(nullptr);
static jboolean Java_AwSettings_getUseStricMixedContentCheckingLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getUseStricMixedContentCheckingLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getUseStricMixedContentCheckingLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getAllowMixedContentAutoupgradesLocked(nullptr);
static jboolean Java_AwSettings_getAllowMixedContentAutoupgradesLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAllowMixedContentAutoupgradesLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getAllowMixedContentAutoupgradesLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getOffscreenPreRasterLocked(nullptr);
static jboolean Java_AwSettings_getOffscreenPreRasterLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getOffscreenPreRasterLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getOffscreenPreRasterLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_supportsDoubleTapZoomLocked(nullptr);
static jboolean Java_AwSettings_supportsDoubleTapZoomLocked(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "supportsDoubleTapZoomLocked",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_supportsDoubleTapZoomLocked);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_getRecordFullDocument(nullptr);
static jboolean Java_AwSettings_getRecordFullDocument(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getRecordFullDocument",
          "()Z",
          &g_org_chromium_android_1webview_AwSettings_getRecordFullDocument);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_AwSettings_updateEverything(nullptr);
static void Java_AwSettings_updateEverything(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateEverything",
          "()V",
          &g_org_chromium_android_1webview_AwSettings_updateEverything);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwSettings_populateWebPreferences(nullptr);
static void Java_AwSettings_populateWebPreferences(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong webPrefsPtr) {
  jclass clazz = org_chromium_android_1webview_AwSettings_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwSettings_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "populateWebPreferences",
          "(J)V",
          &g_org_chromium_android_1webview_AwSettings_populateWebPreferences);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, webPrefsPtr);
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwSettings_JNI
