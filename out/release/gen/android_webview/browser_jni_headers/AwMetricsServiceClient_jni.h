// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/metrics/AwMetricsServiceClient

#ifndef org_chromium_android_webview_metrics_AwMetricsServiceClient_JNI
#define org_chromium_android_webview_metrics_AwMetricsServiceClient_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_metrics_AwMetricsServiceClient[];
const char kClassPath_org_chromium_android_1webview_metrics_AwMetricsServiceClient[] =
    "org/chromium/android_webview/metrics/AwMetricsServiceClient";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz(nullptr);
#ifndef org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz_defined
#define org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz_defined
inline jclass org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_metrics_AwMetricsServiceClient,
      &g_org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static void JNI_AwMetricsServiceClient_SetHaveMetricsConsent(JNIEnv* env, jboolean userConsent,
    jboolean appConsent);

JNI_GENERATOR_EXPORT void Java_J_N_Mdl6A1eo(
    JNIEnv* env,
    jclass jcaller,
    jboolean userConsent,
    jboolean appConsent) {
  return JNI_AwMetricsServiceClient_SetHaveMetricsConsent(env, userConsent, appConsent);
}

static void JNI_AwMetricsServiceClient_SetFastStartupForTesting(JNIEnv* env, jboolean
    fastStartupForTesting);

JNI_GENERATOR_EXPORT void Java_J_N_M3qPS3Ay(
    JNIEnv* env,
    jclass jcaller,
    jboolean fastStartupForTesting) {
  return JNI_AwMetricsServiceClient_SetFastStartupForTesting(env, fastStartupForTesting);
}

static void JNI_AwMetricsServiceClient_SetUploadIntervalForTesting(JNIEnv* env, jlong
    uploadIntervalMs);

JNI_GENERATOR_EXPORT void Java_J_N_Mo7ROkjk(
    JNIEnv* env,
    jclass jcaller,
    jlong uploadIntervalMs) {
  return JNI_AwMetricsServiceClient_SetUploadIntervalForTesting(env, uploadIntervalMs);
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_metrics_AwMetricsServiceClient_canRecordPackageNameForAppType(nullptr);
static jboolean Java_AwMetricsServiceClient_canRecordPackageNameForAppType(JNIEnv* env) {
  jclass clazz = org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "canRecordPackageNameForAppType",
          "()Z",
&g_org_chromium_android_1webview_metrics_AwMetricsServiceClient_canRecordPackageNameForAppType);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_metrics_AwMetricsServiceClient_getAppPackageName(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_AwMetricsServiceClient_getAppPackageName(JNIEnv* env) {
  jclass clazz = org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAppPackageName",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_metrics_AwMetricsServiceClient_getAppPackageName);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_metrics_AwMetricsServiceClient_getAppInstallTime(nullptr);
static jlong Java_AwMetricsServiceClient_getAppInstallTime(JNIEnv* env) {
  jclass clazz = org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_metrics_AwMetricsServiceClient_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAppInstallTime",
          "()J",
          &g_org_chromium_android_1webview_metrics_AwMetricsServiceClient_getAppInstallTime);

  jlong ret =
      env->CallStaticLongMethod(clazz,
          call_context.base.method_id);
  return ret;
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_metrics_AwMetricsServiceClient_JNI
