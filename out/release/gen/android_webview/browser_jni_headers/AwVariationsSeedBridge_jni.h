// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwVariationsSeedBridge

#ifndef org_chromium_android_webview_AwVariationsSeedBridge_JNI
#define org_chromium_android_webview_AwVariationsSeedBridge_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AwVariationsSeedBridge[];
const char kClassPath_org_chromium_android_1webview_AwVariationsSeedBridge[] =
    "org/chromium/android_webview/AwVariationsSeedBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwVariationsSeedBridge_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwVariationsSeedBridge_clazz_defined
#define org_chromium_android_1webview_AwVariationsSeedBridge_clazz_defined
inline jclass org_chromium_android_1webview_AwVariationsSeedBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_AwVariationsSeedBridge,
      &g_org_chromium_android_1webview_AwVariationsSeedBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwVariationsSeedBridge_haveSeed(nullptr);
static jboolean Java_AwVariationsSeedBridge_haveSeed(JNIEnv* env) {
  jclass clazz = org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "haveSeed",
          "()Z",
          &g_org_chromium_android_1webview_AwVariationsSeedBridge_haveSeed);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwVariationsSeedBridge_clearSeed(nullptr);
static void Java_AwVariationsSeedBridge_clearSeed(JNIEnv* env) {
  jclass clazz = org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "clearSeed",
          "()V",
          &g_org_chromium_android_1webview_AwVariationsSeedBridge_clearSeed);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwVariationsSeedBridge_getSignature(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AwVariationsSeedBridge_getSignature(JNIEnv*
    env) {
  jclass clazz = org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getSignature",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwVariationsSeedBridge_getSignature);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwVariationsSeedBridge_getCountry(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AwVariationsSeedBridge_getCountry(JNIEnv*
    env) {
  jclass clazz = org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getCountry",
          "()Ljava/lang/String;",
          &g_org_chromium_android_1webview_AwVariationsSeedBridge_getCountry);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwVariationsSeedBridge_getDate(nullptr);
static jlong Java_AwVariationsSeedBridge_getDate(JNIEnv* env) {
  jclass clazz = org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getDate",
          "()J",
          &g_org_chromium_android_1webview_AwVariationsSeedBridge_getDate);

  jlong ret =
      env->CallStaticLongMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwVariationsSeedBridge_getIsGzipCompressed(nullptr);
static jboolean Java_AwVariationsSeedBridge_getIsGzipCompressed(JNIEnv* env) {
  jclass clazz = org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getIsGzipCompressed",
          "()Z",
          &g_org_chromium_android_1webview_AwVariationsSeedBridge_getIsGzipCompressed);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwVariationsSeedBridge_getData(nullptr);
static base::android::ScopedJavaLocalRef<jbyteArray> Java_AwVariationsSeedBridge_getData(JNIEnv*
    env) {
  jclass clazz = org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getData",
          "()[B",
          &g_org_chromium_android_1webview_AwVariationsSeedBridge_getData);

  jbyteArray ret =
      static_cast<jbyteArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwVariationsSeedBridge_isLoadedSeedFresh(nullptr);
static jboolean Java_AwVariationsSeedBridge_isLoadedSeedFresh(JNIEnv* env) {
  jclass clazz = org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwVariationsSeedBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isLoadedSeedFresh",
          "()Z",
          &g_org_chromium_android_1webview_AwVariationsSeedBridge_isLoadedSeedFresh);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwVariationsSeedBridge_JNI
