// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/gfx/AwGLFunctor

#ifndef org_chromium_android_webview_gfx_AwGLFunctor_JNI
#define org_chromium_android_webview_gfx_AwGLFunctor_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_gfx_AwGLFunctor[];
const char kClassPath_org_chromium_android_1webview_gfx_AwGLFunctor[] =
    "org/chromium/android_webview/gfx/AwGLFunctor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_gfx_AwGLFunctor_clazz(nullptr);
#ifndef org_chromium_android_1webview_gfx_AwGLFunctor_clazz_defined
#define org_chromium_android_1webview_gfx_AwGLFunctor_clazz_defined
inline jclass org_chromium_android_1webview_gfx_AwGLFunctor_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_android_1webview_gfx_AwGLFunctor,
      &g_org_chromium_android_1webview_gfx_AwGLFunctor_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

JNI_GENERATOR_EXPORT void Java_J_N_MsCe5UVl(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwGLFunctor,
    jobject caller) {
  AwGLFunctor* native = reinterpret_cast<AwGLFunctor*>(nativeAwGLFunctor);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteHardwareRenderer");
  return native->DeleteHardwareRenderer(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MOiMYd0I(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwGLFunctor,
    jobject caller) {
  AwGLFunctor* native = reinterpret_cast<AwGLFunctor*>(nativeAwGLFunctor);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveFromCompositorFrameProducer");
  return native->RemoveFromCompositorFrameProducer(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT jlong Java_J_N_MfRoRhka(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwGLFunctor,
    jobject caller) {
  AwGLFunctor* native = reinterpret_cast<AwGLFunctor*>(nativeAwGLFunctor);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCompositorFrameConsumer", 0);
  return native->GetCompositorFrameConsumer(env, base::android::JavaParamRef<jobject>(env, caller));
}

static jlong JNI_AwGLFunctor_GetAwDrawGLFunction(JNIEnv* env);

JNI_GENERATOR_EXPORT jlong Java_J_N_Mq4IKpgt(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwGLFunctor_GetAwDrawGLFunction(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_Ms3_1fBgF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwGLFunctor) {
  AwGLFunctor* native = reinterpret_cast<AwGLFunctor*>(nativeAwGLFunctor);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

static jlong JNI_AwGLFunctor_Create(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    javaProxy);

JNI_GENERATOR_EXPORT jlong Java_J_N_Me9QwrxV(
    JNIEnv* env,
    jclass jcaller,
    jobject javaProxy) {
  return JNI_AwGLFunctor_Create(env, base::android::JavaParamRef<jobject>(env, javaProxy));
}

static jint JNI_AwGLFunctor_GetNativeInstanceCount(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_MW0m24ct(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwGLFunctor_GetNativeInstanceCount(env);
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_gfx_AwGLFunctor_requestInvokeGL(nullptr);
static jboolean Java_AwGLFunctor_requestInvokeGL(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jboolean waitForCompletion) {
  jclass clazz = org_chromium_android_1webview_gfx_AwGLFunctor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_gfx_AwGLFunctor_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "requestInvokeGL",
          "(Z)Z",
          &g_org_chromium_android_1webview_gfx_AwGLFunctor_requestInvokeGL);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, waitForCompletion);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_gfx_AwGLFunctor_detachFunctorFromView(nullptr);
static void Java_AwGLFunctor_detachFunctorFromView(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_gfx_AwGLFunctor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_gfx_AwGLFunctor_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "detachFunctorFromView",
          "()V",
          &g_org_chromium_android_1webview_gfx_AwGLFunctor_detachFunctorFromView);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_gfx_AwGLFunctor_JNI
