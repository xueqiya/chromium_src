// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/WebMessageListenerHolder

#ifndef org_chromium_android_webview_WebMessageListenerHolder_JNI
#define org_chromium_android_webview_WebMessageListenerHolder_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_WebMessageListenerHolder[];
const char kClassPath_org_chromium_android_1webview_WebMessageListenerHolder[] =
    "org/chromium/android_webview/WebMessageListenerHolder";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_WebMessageListenerHolder_clazz(nullptr);
#ifndef org_chromium_android_1webview_WebMessageListenerHolder_clazz_defined
#define org_chromium_android_1webview_WebMessageListenerHolder_clazz_defined
inline jclass org_chromium_android_1webview_WebMessageListenerHolder_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_WebMessageListenerHolder,
      &g_org_chromium_android_1webview_WebMessageListenerHolder_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_WebMessageListenerHolder_onPostMessage(nullptr);
static void Java_WebMessageListenerHolder_onPostMessage(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& message,
    const base::android::JavaRef<jstring>& sourceOrigin,
    jboolean isMainFrame,
    const base::android::JavaRef<jintArray>& ports,
    const base::android::JavaRef<jobject>& replyProxy) {
  jclass clazz = org_chromium_android_1webview_WebMessageListenerHolder_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_WebMessageListenerHolder_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onPostMessage",
          "(Ljava/lang/String;Ljava/lang/String;Z[ILorg/chromium/android_webview/JsReplyProxy;)V",
          &g_org_chromium_android_1webview_WebMessageListenerHolder_onPostMessage);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, message.obj(), sourceOrigin.obj(), isMainFrame, ports.obj(),
              replyProxy.obj());
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_WebMessageListenerHolder_JNI
