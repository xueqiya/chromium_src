// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwBrowserContext

#ifndef org_chromium_android_webview_AwBrowserContext_JNI
#define org_chromium_android_webview_AwBrowserContext_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AwBrowserContext[];
const char kClassPath_org_chromium_android_1webview_AwBrowserContext[] =
    "org/chromium/android_webview/AwBrowserContext";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwBrowserContext_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwBrowserContext_clazz_defined
#define org_chromium_android_1webview_AwBrowserContext_clazz_defined
inline jclass org_chromium_android_1webview_AwBrowserContext_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_android_1webview_AwBrowserContext,
      &g_org_chromium_android_1webview_AwBrowserContext_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static base::android::ScopedJavaLocalRef<jobject> JNI_AwBrowserContext_GetDefaultJava(JNIEnv* env);

JNI_GENERATOR_EXPORT jobject Java_J_N_MCLx2xtg(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwBrowserContext_GetDefaultJava(env).Release();
}

JNI_GENERATOR_EXPORT jlong Java_J_N_MyGX0Tx3(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwBrowserContext) {
  AwBrowserContext* native = reinterpret_cast<AwBrowserContext*>(nativeAwBrowserContext);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetQuotaManagerBridge", 0);
  return native->GetQuotaManagerBridge(env);
}


static std::atomic<jmethodID> g_org_chromium_android_1webview_AwBrowserContext_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_AwBrowserContext_create(JNIEnv* env, jlong
    nativeAwBrowserContext,
    jboolean isDefault) {
  jclass clazz = org_chromium_android_1webview_AwBrowserContext_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwBrowserContext_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(JZ)Lorg/chromium/android_webview/AwBrowserContext;",
          &g_org_chromium_android_1webview_AwBrowserContext_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeAwBrowserContext, isDefault);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwBrowserContext_JNI
