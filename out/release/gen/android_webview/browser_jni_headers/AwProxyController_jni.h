// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwProxyController

#ifndef org_chromium_android_webview_AwProxyController_JNI
#define org_chromium_android_webview_AwProxyController_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AwProxyController[];
const char kClassPath_org_chromium_android_1webview_AwProxyController[] =
    "org/chromium/android_webview/AwProxyController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwProxyController_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwProxyController_clazz_defined
#define org_chromium_android_1webview_AwProxyController_clazz_defined
inline jclass org_chromium_android_1webview_AwProxyController_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_AwProxyController,
      &g_org_chromium_android_1webview_AwProxyController_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static base::android::ScopedJavaLocalRef<jstring> JNI_AwProxyController_SetProxyOverride(JNIEnv*
    env, const base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobjectArray>& urlSchemes,
    const base::android::JavaParamRef<jobjectArray>& proxyUrls,
    const base::android::JavaParamRef<jobjectArray>& bypassRules,
    const base::android::JavaParamRef<jobject>& listener,
    const base::android::JavaParamRef<jobject>& executor);

JNI_GENERATOR_EXPORT jstring Java_J_N_M8RBhX3H(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobjectArray urlSchemes,
    jobjectArray proxyUrls,
    jobjectArray bypassRules,
    jobject listener,
    jobject executor) {
  return JNI_AwProxyController_SetProxyOverride(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobjectArray>(env, urlSchemes),
      base::android::JavaParamRef<jobjectArray>(env, proxyUrls),
      base::android::JavaParamRef<jobjectArray>(env, bypassRules),
      base::android::JavaParamRef<jobject>(env, listener), base::android::JavaParamRef<jobject>(env,
      executor)).Release();
}

static void JNI_AwProxyController_ClearProxyOverride(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& listener,
    const base::android::JavaParamRef<jobject>& executor);

JNI_GENERATOR_EXPORT void Java_J_N_Mx5cEreM(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject listener,
    jobject executor) {
  return JNI_AwProxyController_ClearProxyOverride(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, listener),
      base::android::JavaParamRef<jobject>(env, executor));
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwProxyController_proxyOverrideChanged(nullptr);
static void Java_AwProxyController_proxyOverrideChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& listener,
    const base::android::JavaRef<jobject>& executor) {
  jclass clazz = org_chromium_android_1webview_AwProxyController_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwProxyController_clazz(env));

  jni_generator::JniJavaCallContextUnchecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "proxyOverrideChanged",
          "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)V",
          &g_org_chromium_android_1webview_AwProxyController_proxyOverrideChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.method_id, listener.obj(), executor.obj());
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwProxyController_JNI
