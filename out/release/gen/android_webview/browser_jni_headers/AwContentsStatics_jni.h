// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwContentsStatics

#ifndef org_chromium_android_webview_AwContentsStatics_JNI
#define org_chromium_android_webview_AwContentsStatics_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AwContentsStatics[];
const char kClassPath_org_chromium_android_1webview_AwContentsStatics[] =
    "org/chromium/android_webview/AwContentsStatics";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwContentsStatics_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwContentsStatics_clazz_defined
#define org_chromium_android_1webview_AwContentsStatics_clazz_defined
inline jclass org_chromium_android_1webview_AwContentsStatics_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_AwContentsStatics,
      &g_org_chromium_android_1webview_AwContentsStatics_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static void JNI_AwContentsStatics_LogCommandLineForDebugging(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MjT_1gThK(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwContentsStatics_LogCommandLineForDebugging(env);
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_AwContentsStatics_GetSafeBrowsingPrivacyPolicyUrl(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_Mdfl4F0j(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwContentsStatics_GetSafeBrowsingPrivacyPolicyUrl(env).Release();
}

static void JNI_AwContentsStatics_ClearClientCertPreferences(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_Ml71D_00024Ud(
    JNIEnv* env,
    jclass jcaller,
    jobject callback) {
  return JNI_AwContentsStatics_ClearClientCertPreferences(env,
      base::android::JavaParamRef<jobject>(env, callback));
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_AwContentsStatics_GetUnreachableWebDataUrl(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_M0AyjO_00024E(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwContentsStatics_GetUnreachableWebDataUrl(env).Release();
}

static base::android::ScopedJavaLocalRef<jstring> JNI_AwContentsStatics_GetProductVersion(JNIEnv*
    env);

JNI_GENERATOR_EXPORT jstring Java_J_N_MhBmyxCD(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwContentsStatics_GetProductVersion(env).Release();
}

static void JNI_AwContentsStatics_SetServiceWorkerIoThreadClient(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& ioThreadClient,
    const base::android::JavaParamRef<jobject>& browserContext);

JNI_GENERATOR_EXPORT void Java_J_N_MhYNFMfv(
    JNIEnv* env,
    jclass jcaller,
    jobject ioThreadClient,
    jobject browserContext) {
  return JNI_AwContentsStatics_SetServiceWorkerIoThreadClient(env,
      base::android::JavaParamRef<jobject>(env, ioThreadClient),
      base::android::JavaParamRef<jobject>(env, browserContext));
}

static void JNI_AwContentsStatics_SetSafeBrowsingWhitelist(JNIEnv* env, const
    base::android::JavaParamRef<jobjectArray>& urls,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MlIL02rX(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray urls,
    jobject callback) {
  return JNI_AwContentsStatics_SetSafeBrowsingWhitelist(env,
      base::android::JavaParamRef<jobjectArray>(env, urls),
      base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_AwContentsStatics_SetCheckClearTextPermitted(JNIEnv* env, jboolean permitted);

JNI_GENERATOR_EXPORT void Java_J_N_Mu0fMVv8(
    JNIEnv* env,
    jclass jcaller,
    jboolean permitted) {
  return JNI_AwContentsStatics_SetCheckClearTextPermitted(env, permitted);
}

static jboolean JNI_AwContentsStatics_IsMultiProcessEnabled(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M04mALrd(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwContentsStatics_IsMultiProcessEnabled(env);
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsStatics_clientCertificatesCleared(nullptr);
static void Java_AwContentsStatics_clientCertificatesCleared(JNIEnv* env, const
    base::android::JavaRef<jobject>& callback) {
  jclass clazz = org_chromium_android_1webview_AwContentsStatics_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwContentsStatics_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "clientCertificatesCleared",
          "(Ljava/lang/Runnable;)V",
          &g_org_chromium_android_1webview_AwContentsStatics_clientCertificatesCleared);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, callback.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContentsStatics_safeBrowsingWhitelistAssigned(nullptr);
static void Java_AwContentsStatics_safeBrowsingWhitelistAssigned(JNIEnv* env, const
    base::android::JavaRef<jobject>& callback,
    jboolean success) {
  jclass clazz = org_chromium_android_1webview_AwContentsStatics_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwContentsStatics_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "safeBrowsingWhitelistAssigned",
          "(Lorg/chromium/base/Callback;Z)V",
          &g_org_chromium_android_1webview_AwContentsStatics_safeBrowsingWhitelistAssigned);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, callback.obj(), success);
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwContentsStatics_JNI
