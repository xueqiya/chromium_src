// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwWebContentsDelegate

#ifndef org_chromium_android_webview_AwWebContentsDelegate_JNI
#define org_chromium_android_webview_AwWebContentsDelegate_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AwWebContentsDelegate[];
const char kClassPath_org_chromium_android_1webview_AwWebContentsDelegate[] =
    "org/chromium/android_webview/AwWebContentsDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwWebContentsDelegate_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwWebContentsDelegate_clazz_defined
#define org_chromium_android_1webview_AwWebContentsDelegate_clazz_defined
inline jclass org_chromium_android_1webview_AwWebContentsDelegate_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_AwWebContentsDelegate,
      &g_org_chromium_android_1webview_AwWebContentsDelegate_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static void JNI_AwWebContentsDelegate_FilesSelectedInChooser(JNIEnv* env, jint processId,
    jint renderId,
    jint modeFlags,
    const base::android::JavaParamRef<jobjectArray>& filePath,
    const base::android::JavaParamRef<jobjectArray>& displayName);

JNI_GENERATOR_EXPORT void Java_J_N_MB5V_00024olG(
    JNIEnv* env,
    jclass jcaller,
    jint processId,
    jint renderId,
    jint modeFlags,
    jobjectArray filePath,
    jobjectArray displayName) {
  return JNI_AwWebContentsDelegate_FilesSelectedInChooser(env, processId, renderId, modeFlags,
      base::android::JavaParamRef<jobjectArray>(env, filePath),
      base::android::JavaParamRef<jobjectArray>(env, displayName));
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebContentsDelegate_runFileChooser(nullptr);
static void Java_AwWebContentsDelegate_runFileChooser(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper processId,
    JniIntWrapper renderId,
    JniIntWrapper modeFlags,
    const base::android::JavaRef<jstring>& acceptTypes,
    const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& defaultFilename,
    jboolean capture) {
  jclass clazz = org_chromium_android_1webview_AwWebContentsDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebContentsDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "runFileChooser",
          "(IIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V",
          &g_org_chromium_android_1webview_AwWebContentsDelegate_runFileChooser);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(processId), as_jint(renderId), as_jint(modeFlags),
              acceptTypes.obj(), title.obj(), defaultFilename.obj(), capture);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebContentsDelegate_addNewContents(nullptr);
static jboolean Java_AwWebContentsDelegate_addNewContents(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isDialog,
    jboolean isUserGesture) {
  jclass clazz = org_chromium_android_1webview_AwWebContentsDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebContentsDelegate_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "addNewContents",
          "(ZZ)Z",
          &g_org_chromium_android_1webview_AwWebContentsDelegate_addNewContents);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, isDialog, isUserGesture);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebContentsDelegate_closeContents(nullptr);
static void Java_AwWebContentsDelegate_closeContents(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwWebContentsDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebContentsDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "closeContents",
          "()V",
          &g_org_chromium_android_1webview_AwWebContentsDelegate_closeContents);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebContentsDelegate_activateContents(nullptr);
static void Java_AwWebContentsDelegate_activateContents(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwWebContentsDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebContentsDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "activateContents",
          "()V",
          &g_org_chromium_android_1webview_AwWebContentsDelegate_activateContents);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebContentsDelegate_navigationStateChanged(nullptr);
static void Java_AwWebContentsDelegate_navigationStateChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper flags) {
  jclass clazz = org_chromium_android_1webview_AwWebContentsDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebContentsDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "navigationStateChanged",
          "(I)V",
          &g_org_chromium_android_1webview_AwWebContentsDelegate_navigationStateChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(flags));
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwWebContentsDelegate_loadingStateChanged(nullptr);
static void Java_AwWebContentsDelegate_loadingStateChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwWebContentsDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwWebContentsDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "loadingStateChanged",
          "()V",
          &g_org_chromium_android_1webview_AwWebContentsDelegate_loadingStateChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwWebContentsDelegate_JNI
