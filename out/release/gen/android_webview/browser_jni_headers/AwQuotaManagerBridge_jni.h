// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwQuotaManagerBridge

#ifndef org_chromium_android_webview_AwQuotaManagerBridge_JNI
#define org_chromium_android_webview_AwQuotaManagerBridge_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AwQuotaManagerBridge[];
const char kClassPath_org_chromium_android_1webview_AwQuotaManagerBridge[] =
    "org/chromium/android_webview/AwQuotaManagerBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwQuotaManagerBridge_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwQuotaManagerBridge_clazz_defined
#define org_chromium_android_1webview_AwQuotaManagerBridge_clazz_defined
inline jclass org_chromium_android_1webview_AwQuotaManagerBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_AwQuotaManagerBridge,
      &g_org_chromium_android_1webview_AwQuotaManagerBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

JNI_GENERATOR_EXPORT void Java_J_N_MIrzsg_1q(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwQuotaManagerBridge,
    jobject caller) {
  AwQuotaManagerBridge* native =
      reinterpret_cast<AwQuotaManagerBridge*>(nativeAwQuotaManagerBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Init");
  return native->Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MMBD8oze(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwQuotaManagerBridge,
    jobject caller) {
  AwQuotaManagerBridge* native =
      reinterpret_cast<AwQuotaManagerBridge*>(nativeAwQuotaManagerBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteAllData");
  return native->DeleteAllData(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MVmZoL1a(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwQuotaManagerBridge,
    jobject caller,
    jstring origin) {
  AwQuotaManagerBridge* native =
      reinterpret_cast<AwQuotaManagerBridge*>(nativeAwQuotaManagerBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteOrigin");
  return native->DeleteOrigin(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, origin));
}

JNI_GENERATOR_EXPORT void Java_J_N_MBqEItUo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwQuotaManagerBridge,
    jobject caller,
    jint callbackId) {
  AwQuotaManagerBridge* native =
      reinterpret_cast<AwQuotaManagerBridge*>(nativeAwQuotaManagerBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOrigins");
  return native->GetOrigins(env, base::android::JavaParamRef<jobject>(env, caller), callbackId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MJn4yzAu(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwQuotaManagerBridge,
    jobject caller,
    jstring origin,
    jint callbackId,
    jboolean isQuota) {
  AwQuotaManagerBridge* native =
      reinterpret_cast<AwQuotaManagerBridge*>(nativeAwQuotaManagerBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetUsageAndQuotaForOrigin");
  return native->GetUsageAndQuotaForOrigin(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, origin), callbackId, isQuota);
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwQuotaManagerBridge_onGetOriginsCallback(nullptr);
static void Java_AwQuotaManagerBridge_onGetOriginsCallback(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper callbackId,
    const base::android::JavaRef<jobjectArray>& origin,
    const base::android::JavaRef<jlongArray>& usages,
    const base::android::JavaRef<jlongArray>& quotas) {
  jclass clazz = org_chromium_android_1webview_AwQuotaManagerBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwQuotaManagerBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onGetOriginsCallback",
          "(I[Ljava/lang/String;[J[J)V",
          &g_org_chromium_android_1webview_AwQuotaManagerBridge_onGetOriginsCallback);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(callbackId), origin.obj(), usages.obj(),
              quotas.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwQuotaManagerBridge_onGetUsageAndQuotaForOriginCallback(nullptr);
static void Java_AwQuotaManagerBridge_onGetUsageAndQuotaForOriginCallback(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper callbackId,
    jboolean isQuota,
    jlong usage,
    jlong quota) {
  jclass clazz = org_chromium_android_1webview_AwQuotaManagerBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwQuotaManagerBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onGetUsageAndQuotaForOriginCallback",
          "(IZJJ)V",
&g_org_chromium_android_1webview_AwQuotaManagerBridge_onGetUsageAndQuotaForOriginCallback);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(callbackId), isQuota, usage, quota);
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwQuotaManagerBridge_JNI
