// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwContents

#ifndef org_chromium_android_webview_AwContents_JNI
#define org_chromium_android_webview_AwContents_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_android_1webview_AwContents[];
const char kClassPath_org_chromium_android_1webview_AwContents[] =
    "org/chromium/android_webview/AwContents";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AwContents_clazz(nullptr);
#ifndef org_chromium_android_1webview_AwContents_clazz_defined
#define org_chromium_android_1webview_AwContents_clazz_defined
inline jclass org_chromium_android_1webview_AwContents_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_android_1webview_AwContents,
      &g_org_chromium_android_1webview_AwContents_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static jlong JNI_AwContents_Init(JNIEnv* env, jlong browserContextPointer);

JNI_GENERATOR_EXPORT jlong Java_J_N_MFiR_1zHY(
    JNIEnv* env,
    jclass jcaller,
    jlong browserContextPointer) {
  return JNI_AwContents_Init(env, browserContextPointer);
}

JNI_GENERATOR_EXPORT void Java_J_N_MQGusfGb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

static jboolean JNI_AwContents_HasRequiredHardwareExtensions(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MmfcaMzE(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwContents_HasRequiredHardwareExtensions(env);
}

static void JNI_AwContents_SetAwDrawSWFunctionTable(JNIEnv* env, jlong functionTablePointer);

JNI_GENERATOR_EXPORT void Java_J_N_M1aUwTSB(
    JNIEnv* env,
    jclass jcaller,
    jlong functionTablePointer) {
  return JNI_AwContents_SetAwDrawSWFunctionTable(env, functionTablePointer);
}

static void JNI_AwContents_SetAwDrawGLFunctionTable(JNIEnv* env, jlong functionTablePointer);

JNI_GENERATOR_EXPORT void Java_J_N_MHELqQxx(
    JNIEnv* env,
    jclass jcaller,
    jlong functionTablePointer) {
  return JNI_AwContents_SetAwDrawGLFunctionTable(env, functionTablePointer);
}

static jint JNI_AwContents_GetNativeInstanceCount(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_MpyFb_00024bm(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwContents_GetNativeInstanceCount(env);
}

static void JNI_AwContents_SetShouldDownloadFavicons(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_Mbm7UXr0(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwContents_SetShouldDownloadFavicons(env);
}

static void JNI_AwContents_UpdateDefaultLocale(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& locale,
    const base::android::JavaParamRef<jstring>& localeList);

JNI_GENERATOR_EXPORT void Java_J_N_Mer1B1Jd(
    JNIEnv* env,
    jclass jcaller,
    jstring locale,
    jstring localeList) {
  return JNI_AwContents_UpdateDefaultLocale(env, base::android::JavaParamRef<jstring>(env, locale),
      base::android::JavaParamRef<jstring>(env, localeList));
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_AwContents_GetSafeBrowsingLocaleForTesting(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_M8bzablT(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AwContents_GetSafeBrowsingLocaleForTesting(env).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MpysRKyN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jstring script,
    jobject jsCallback) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScriptOnInterstitialForTesting");
  return native->EvaluateJavaScriptOnInterstitialForTesting(env,
      base::android::JavaParamRef<jobject>(env, caller), base::android::JavaParamRef<jstring>(env,
      script), base::android::JavaParamRef<jobject>(env, jsCallback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MaOp_000242xn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jobject awContents,
    jobject webViewWebContentsDelegate,
    jobject contentsClientBridge,
    jobject ioThreadClient,
    jobject navigationInterceptionDelegate,
    jobject autofillProvider) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetJavaPeers");
  return native->SetJavaPeers(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, awContents),
      base::android::JavaParamRef<jobject>(env, webViewWebContentsDelegate),
      base::android::JavaParamRef<jobject>(env, contentsClientBridge),
      base::android::JavaParamRef<jobject>(env, ioThreadClient),
      base::android::JavaParamRef<jobject>(env, navigationInterceptionDelegate),
      base::android::JavaParamRef<jobject>(env, autofillProvider));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MybAxcKt(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetWebContents", NULL);
  return native->GetWebContents(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_Mg88vWvb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetBrowserContext", NULL);
  return native->GetBrowserContext(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MzAVKSgA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jlong nativeCompositorFrameConsumer) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetCompositorFrameConsumer");
  return native->SetCompositorFrameConsumer(env, base::android::JavaParamRef<jobject>(env, caller),
      nativeCompositorFrameConsumer);
}

JNI_GENERATOR_EXPORT void Java_J_N_M74pgHWN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jobject message) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "DocumentHasImages");
  return native->DocumentHasImages(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, message));
}

JNI_GENERATOR_EXPORT void Java_J_N_MfwgZRb_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jstring path,
    jobject callback) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "GenerateMHTML");
  return native->GenerateMHTML(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, path), base::android::JavaParamRef<jobject>(env,
      callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MGEWt61o(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jobjectArray visitedLinks) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddVisitedLinks");
  return native->AddVisitedLinks(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobjectArray>(env, visitedLinks));
}

JNI_GENERATOR_EXPORT void Java_J_N_MuRWIe_00024h(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jfloat delta) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "ZoomBy");
  return native->ZoomBy(env, base::android::JavaParamRef<jobject>(env, caller), delta);
}

JNI_GENERATOR_EXPORT void Java_J_N_MkR1ETvU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jlong currentAnimationTimeMillis) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnComputeScroll");
  return native->OnComputeScroll(env, base::android::JavaParamRef<jobject>(env, caller),
      currentAnimationTimeMillis);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MTXp4fn_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jobject canvas,
    jboolean isHardwareAccelerated,
    jint scrollX,
    jint scrollY,
    jint visibleLeft,
    jint visibleTop,
    jint visibleRight,
    jint visibleBottom,
    jboolean forceAuxiliaryBitmapRendering) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDraw", false);
  return native->OnDraw(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, canvas), isHardwareAccelerated, scrollX, scrollY,
      visibleLeft, visibleTop, visibleRight, visibleBottom, forceAuxiliaryBitmapRendering);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mcwwaem4(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "NeedToDrawBackgroundColor", false);
  return native->NeedToDrawBackgroundColor(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MkkpS1L9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jstring searchString) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "FindAllAsync");
  return native->FindAllAsync(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, searchString));
}

JNI_GENERATOR_EXPORT void Java_J_N_M21lr0OA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jboolean forward) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "FindNext");
  return native->FindNext(env, base::android::JavaParamRef<jobject>(env, caller), forward);
}

JNI_GENERATOR_EXPORT void Java_J_N_MFtcGkhm(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearMatches");
  return native->ClearMatches(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MhT_00024Vsgm(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jboolean includeDiskFiles) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearCache");
  return native->ClearCache(env, base::android::JavaParamRef<jobject>(env, caller),
      includeDiskFiles);
}

JNI_GENERATOR_EXPORT void Java_J_N_M6HE38c5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "KillRenderProcess");
  return native->KillRenderProcess(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jbyteArray Java_J_N_MJl6bbdC(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCertificate", NULL);
  return native->GetCertificate(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MbVTYFDu(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jfloat x,
    jfloat y,
    jfloat touchMajor) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestNewHitTestDataAt");
  return native->RequestNewHitTestDataAt(env, base::android::JavaParamRef<jobject>(env, caller), x,
      y, touchMajor);
}

JNI_GENERATOR_EXPORT void Java_J_N_MHBuiDmd(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateLastHitTestData");
  return native->UpdateLastHitTestData(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MNxSIAOu(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jint w,
    jint h,
    jint ow,
    jint oh) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSizeChanged");
  return native->OnSizeChanged(env, base::android::JavaParamRef<jobject>(env, caller), w, h, ow,
      oh);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mnc0PDKE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jint x,
    jint y) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollTo");
  return native->ScrollTo(env, base::android::JavaParamRef<jobject>(env, caller), x, y);
}

JNI_GENERATOR_EXPORT void Java_J_N_MFKs48sP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jint x,
    jint y) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "RestoreScrollAfterTransition");
  return native->RestoreScrollAfterTransition(env, base::android::JavaParamRef<jobject>(env,
      caller), x, y);
}

JNI_GENERATOR_EXPORT void Java_J_N_MgUWjwjs(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jint targetX,
    jint targetY,
    jlong durationMs) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "SmoothScroll");
  return native->SmoothScroll(env, base::android::JavaParamRef<jobject>(env, caller), targetX,
      targetY, durationMs);
}

JNI_GENERATOR_EXPORT void Java_J_N_MJqblGS2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jboolean visible) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetViewVisibility");
  return native->SetViewVisibility(env, base::android::JavaParamRef<jobject>(env, caller), visible);
}

JNI_GENERATOR_EXPORT void Java_J_N_MkfSbdDV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jboolean visible) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetWindowVisibility");
  return native->SetWindowVisibility(env, base::android::JavaParamRef<jobject>(env, caller),
      visible);
}

JNI_GENERATOR_EXPORT void Java_J_N_M11ykFVM(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jboolean paused) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetIsPaused");
  return native->SetIsPaused(env, base::android::JavaParamRef<jobject>(env, caller), paused);
}

JNI_GENERATOR_EXPORT void Java_J_N_MtQhJq6u(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jint w,
    jint h) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAttachedToWindow");
  return native->OnAttachedToWindow(env, base::android::JavaParamRef<jobject>(env, caller), w, h);
}

JNI_GENERATOR_EXPORT void Java_J_N_MqVX7tnS(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDetachedFromWindow");
  return native->OnDetachedFromWindow(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M5_000243H1S_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsVisible", false);
  return native->IsVisible(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MYvj_1j_000248(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsDisplayingInterstitialForTesting", false);
  return native->IsDisplayingInterstitialForTesting(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MYYge55A(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jfloat dipScale) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetDipScale");
  return native->SetDipScale(env, base::android::JavaParamRef<jobject>(env, caller), dipScale);
}

JNI_GENERATOR_EXPORT void Java_J_N_MQn4UPnT(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnInputEvent");
  return native->OnInputEvent(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jbyteArray Java_J_N_MtUUIkJC(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOpaqueState", NULL);
  return native->GetOpaqueState(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M_00024ugXLRy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jbyteArray state) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "RestoreFromOpaqueState", false);
  return native->RestoreFromOpaqueState(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jbyteArray>(env, state));
}

JNI_GENERATOR_EXPORT jlong Java_J_N_MOttaOmZ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "ReleasePopupAwContents", 0);
  return native->ReleasePopupAwContents(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MunvchpP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "FocusFirstNode");
  return native->FocusFirstNode(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MLVoXr_1n(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jint color) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetBackgroundColor");
  return native->SetBackgroundColor(env, base::android::JavaParamRef<jobject>(env, caller), color);
}

JNI_GENERATOR_EXPORT jlong Java_J_N_MpPu_1UgV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jint width,
    jint height) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "CapturePicture", 0);
  return native->CapturePicture(env, base::android::JavaParamRef<jobject>(env, caller), width,
      height);
}

JNI_GENERATOR_EXPORT void Java_J_N_MjvLhcRF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jboolean enabled) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "EnableOnNewPicture");
  return native->EnableOnNewPicture(env, base::android::JavaParamRef<jobject>(env, caller),
      enabled);
}

JNI_GENERATOR_EXPORT void Java_J_N_ME4bwr8X(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jlong requestId,
    jobject callback) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "InsertVisualStateCallback");
  return native->InsertVisualStateCallback(env, base::android::JavaParamRef<jobject>(env, caller),
      requestId, base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MsURZ4Xi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearView");
  return native->ClearView(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Me4_00024sHFE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jstring url,
    jstring extraHeaders) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetExtraHeadersForUrl");
  return native->SetExtraHeadersForUrl(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, url), base::android::JavaParamRef<jstring>(env,
      extraHeaders));
}

JNI_GENERATOR_EXPORT void Java_J_N_M0cKB_1Do(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jboolean value,
    jstring requestingFrame) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "InvokeGeolocationCallback");
  return native->InvokeGeolocationCallback(env, base::android::JavaParamRef<jobject>(env, caller),
      value, base::android::JavaParamRef<jstring>(env, requestingFrame));
}

JNI_GENERATOR_EXPORT jint Java_J_N_MmkSmonh(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetEffectivePriority", 0);
  return native->GetEffectivePriority(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MSO7DbfT(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jboolean networkUp) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetJsOnlineProperty");
  return native->SetJsOnlineProperty(env, base::android::JavaParamRef<jobject>(env, caller),
      networkUp);
}

JNI_GENERATOR_EXPORT void Java_J_N_MxV2T4AB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jint level,
    jboolean visible) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "TrimMemory");
  return native->TrimMemory(env, base::android::JavaParamRef<jobject>(env, caller), level, visible);
}

JNI_GENERATOR_EXPORT void Java_J_N_MND9REwd(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jobject awPdfExporter) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "CreatePdfExporter");
  return native->CreatePdfExporter(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, awPdfExporter));
}

JNI_GENERATOR_EXPORT void Java_J_N_MZm6NYk2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jstring origin,
    jlong resources) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "PreauthorizePermission");
  return native->PreauthorizePermission(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, origin), resources);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mt543z_00024z(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "GrantFileSchemeAccesstoChildProcess");
  return native->GrantFileSchemeAccesstoChildProcess(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MlAm1rvf(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResumeLoadingCreatedPopupWebContents");
  return native->ResumeLoadingCreatedPopupWebContents(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_Mj2HEglc(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetRenderProcess", NULL);
  return native->GetRenderProcess(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MxPw2eDG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jobject listener,
    jstring jsObjectName,
    jobjectArray allowedOrigins) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddWebMessageListener", NULL);
  return native->AddWebMessageListener(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, listener), base::android::JavaParamRef<jstring>(env,
      jsObjectName), base::android::JavaParamRef<jobjectArray>(env, allowedOrigins)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MJJ_19Fzq(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAwContents,
    jobject caller,
    jstring jsObjectName) {
  AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveWebMessageListener");
  return native->RemoveWebMessageListener(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, jsObjectName));
}


static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onRendererResponsive(nullptr);
static void Java_AwContents_onRendererResponsive(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& renderProcess) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onRendererResponsive",
          "(Lorg/chromium/android_webview/AwRenderProcess;)V",
          &g_org_chromium_android_1webview_AwContents_onRendererResponsive);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, renderProcess.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onRendererUnresponsive(nullptr);
static void Java_AwContents_onRendererUnresponsive(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& renderProcess) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onRendererUnresponsive",
          "(Lorg/chromium/android_webview/AwRenderProcess;)V",
          &g_org_chromium_android_1webview_AwContents_onRendererUnresponsive);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, renderProcess.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onRenderProcessGone(nullptr);
static jboolean Java_AwContents_onRenderProcessGone(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper childProcessID,
    jboolean crashed) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env), false);

  jni_generator::JniJavaCallContextUnchecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onRenderProcessGone",
          "(IZ)Z",
          &g_org_chromium_android_1webview_AwContents_onRenderProcessGone);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.method_id, as_jint(childProcessID), crashed);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onDocumentHasImagesResponse(nullptr);
static void Java_AwContents_onDocumentHasImagesResponse(JNIEnv* env, jboolean result,
    const base::android::JavaRef<jobject>& message) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onDocumentHasImagesResponse",
          "(ZLandroid/os/Message;)V",
          &g_org_chromium_android_1webview_AwContents_onDocumentHasImagesResponse);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, result, message.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onReceivedTouchIconUrl(nullptr);
static void Java_AwContents_onReceivedTouchIconUrl(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& url,
    jboolean precomposed) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onReceivedTouchIconUrl",
          "(Ljava/lang/String;Z)V",
          &g_org_chromium_android_1webview_AwContents_onReceivedTouchIconUrl);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), precomposed);
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_AwContents_onReceivedIcon(nullptr);
static void Java_AwContents_onReceivedIcon(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& bitmap) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onReceivedIcon",
          "(Landroid/graphics/Bitmap;)V",
          &g_org_chromium_android_1webview_AwContents_onReceivedIcon);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, bitmap.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onCreateTouchHandle(nullptr);
static jlong Java_AwContents_onCreateTouchHandle(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onCreateTouchHandle",
          "()J",
          &g_org_chromium_android_1webview_AwContents_onCreateTouchHandle);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_generateMHTMLCallback(nullptr);
static void Java_AwContents_generateMHTMLCallback(JNIEnv* env, const
    base::android::JavaRef<jstring>& path,
    jlong size,
    const base::android::JavaRef<jobject>& callback) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "generateMHTMLCallback",
          "(Ljava/lang/String;JLorg/chromium/base/Callback;)V",
          &g_org_chromium_android_1webview_AwContents_generateMHTMLCallback);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, path.obj(), size, callback.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onReceivedHttpAuthRequest(nullptr);
static void Java_AwContents_onReceivedHttpAuthRequest(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& handler,
    const base::android::JavaRef<jstring>& host,
    const base::android::JavaRef<jstring>& realm) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onReceivedHttpAuthRequest",
          "(Lorg/chromium/android_webview/AwHttpAuthHandler;Ljava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_android_1webview_AwContents_onReceivedHttpAuthRequest);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, handler.obj(), host.obj(), realm.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onGeolocationPermissionsShowPrompt(nullptr);
static void Java_AwContents_onGeolocationPermissionsShowPrompt(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& origin) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onGeolocationPermissionsShowPrompt",
          "(Ljava/lang/String;)V",
          &g_org_chromium_android_1webview_AwContents_onGeolocationPermissionsShowPrompt);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, origin.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onGeolocationPermissionsHidePrompt(nullptr);
static void Java_AwContents_onGeolocationPermissionsHidePrompt(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onGeolocationPermissionsHidePrompt",
          "()V",
          &g_org_chromium_android_1webview_AwContents_onGeolocationPermissionsHidePrompt);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onPermissionRequest(nullptr);
static void Java_AwContents_onPermissionRequest(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& awPermissionRequest) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onPermissionRequest",
          "(Lorg/chromium/android_webview/permission/AwPermissionRequest;)V",
          &g_org_chromium_android_1webview_AwContents_onPermissionRequest);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, awPermissionRequest.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onPermissionRequestCanceled(nullptr);
static void Java_AwContents_onPermissionRequestCanceled(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    awPermissionRequest) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onPermissionRequestCanceled",
          "(Lorg/chromium/android_webview/permission/AwPermissionRequest;)V",
          &g_org_chromium_android_1webview_AwContents_onPermissionRequestCanceled);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, awPermissionRequest.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onFindResultReceived(nullptr);
static void Java_AwContents_onFindResultReceived(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper activeMatchOrdinal,
    JniIntWrapper numberOfMatches,
    jboolean isDoneCounting) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onFindResultReceived",
          "(IIZ)V",
          &g_org_chromium_android_1webview_AwContents_onFindResultReceived);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(activeMatchOrdinal), as_jint(numberOfMatches),
              isDoneCounting);
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_AwContents_onNewPicture(nullptr);
static void Java_AwContents_onNewPicture(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNewPicture",
          "()V",
          &g_org_chromium_android_1webview_AwContents_onNewPicture);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_invokeVisualStateCallback(nullptr);
static void Java_AwContents_invokeVisualStateCallback(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& callback,
    jlong requestId) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "invokeVisualStateCallback",
          "(Lorg/chromium/android_webview/AwContents$VisualStateCallback;J)V",
          &g_org_chromium_android_1webview_AwContents_invokeVisualStateCallback);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, callback.obj(), requestId);
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_AwContents_updateHitTestData(nullptr);
static void Java_AwContents_updateHitTestData(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper type,
    const base::android::JavaRef<jstring>& extra,
    const base::android::JavaRef<jstring>& href,
    const base::android::JavaRef<jstring>& anchorText,
    const base::android::JavaRef<jstring>& imgSrc) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateHitTestData",
          "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_android_1webview_AwContents_updateHitTestData);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(type), extra.obj(), href.obj(), anchorText.obj(),
              imgSrc.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_postInvalidateOnAnimation(nullptr);
static void Java_AwContents_postInvalidateOnAnimation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "postInvalidateOnAnimation",
          "()V",
          &g_org_chromium_android_1webview_AwContents_postInvalidateOnAnimation);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_getLocationOnScreen(nullptr);
static base::android::ScopedJavaLocalRef<jintArray> Java_AwContents_getLocationOnScreen(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getLocationOnScreen",
          "()[I",
          &g_org_chromium_android_1webview_AwContents_getLocationOnScreen);

  jintArray ret =
      static_cast<jintArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onWebLayoutPageScaleFactorChanged(nullptr);
static void Java_AwContents_onWebLayoutPageScaleFactorChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jfloat webLayoutPageScaleFactor) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onWebLayoutPageScaleFactorChanged",
          "(F)V",
          &g_org_chromium_android_1webview_AwContents_onWebLayoutPageScaleFactorChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, webLayoutPageScaleFactor);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onWebLayoutContentsSizeChanged(nullptr);
static void Java_AwContents_onWebLayoutContentsSizeChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper widthCss,
    JniIntWrapper heightCss) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onWebLayoutContentsSizeChanged",
          "(II)V",
          &g_org_chromium_android_1webview_AwContents_onWebLayoutContentsSizeChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(widthCss), as_jint(heightCss));
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_scrollContainerViewTo(nullptr);
static void Java_AwContents_scrollContainerViewTo(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper xPx,
    JniIntWrapper yPx) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "scrollContainerViewTo",
          "(II)V",
          &g_org_chromium_android_1webview_AwContents_scrollContainerViewTo);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(xPx), as_jint(yPx));
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_AwContents_updateScrollState(nullptr);
static void Java_AwContents_updateScrollState(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper maxContainerViewScrollOffsetX,
    JniIntWrapper maxContainerViewScrollOffsetY,
    jfloat contentWidthDip,
    jfloat contentHeightDip,
    jfloat pageScaleFactor,
    jfloat minPageScaleFactor,
    jfloat maxPageScaleFactor) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateScrollState",
          "(IIFFFFF)V",
          &g_org_chromium_android_1webview_AwContents_updateScrollState);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(maxContainerViewScrollOffsetX),
              as_jint(maxContainerViewScrollOffsetY), contentWidthDip, contentHeightDip,
              pageScaleFactor, minPageScaleFactor, maxPageScaleFactor);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_setAwAutofillClient(nullptr);
static void Java_AwContents_setAwAutofillClient(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& client) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAwAutofillClient",
          "(Lorg/chromium/android_webview/AwAutofillClient;)V",
          &g_org_chromium_android_1webview_AwContents_setAwAutofillClient);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, client.obj());
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_AwContents_didOverscroll(nullptr);
static void Java_AwContents_didOverscroll(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    JniIntWrapper deltaX,
    JniIntWrapper deltaY,
    jfloat velocityX,
    jfloat velocityY) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "didOverscroll",
          "(IIFF)V",
          &g_org_chromium_android_1webview_AwContents_didOverscroll);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(deltaX), as_jint(deltaY), velocityX, velocityY);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_canShowInterstitial(nullptr);
static jboolean Java_AwContents_canShowInterstitial(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "canShowInterstitial",
          "()Z",
          &g_org_chromium_android_1webview_AwContents_canShowInterstitial);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_android_1webview_AwContents_getErrorUiType(nullptr);
static jint Java_AwContents_getErrorUiType(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getErrorUiType",
          "()I",
          &g_org_chromium_android_1webview_AwContents_getErrorUiType);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_onEvaluateJavaScriptResultForTesting(nullptr);
static void Java_AwContents_onEvaluateJavaScriptResultForTesting(JNIEnv* env, const
    base::android::JavaRef<jstring>& jsonResult,
    const base::android::JavaRef<jobject>& callback) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AwContents_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onEvaluateJavaScriptResultForTesting",
          "(Ljava/lang/String;Lorg/chromium/content_public/browser/JavaScriptCallback;)V",
          &g_org_chromium_android_1webview_AwContents_onEvaluateJavaScriptResultForTesting);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, jsonResult.obj(), callback.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AwContents_useLegacyGeolocationPermissionAPI(nullptr);
static jboolean Java_AwContents_useLegacyGeolocationPermissionAPI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_android_1webview_AwContents_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_android_1webview_AwContents_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "useLegacyGeolocationPermissionAPI",
          "()Z",
          &g_org_chromium_android_1webview_AwContents_useLegacyGeolocationPermissionAPI);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AwContents_JNI
