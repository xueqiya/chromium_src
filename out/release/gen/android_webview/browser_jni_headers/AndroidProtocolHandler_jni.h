// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AndroidProtocolHandler

#ifndef org_chromium_android_webview_AndroidProtocolHandler_JNI
#define org_chromium_android_webview_AndroidProtocolHandler_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_android_1webview_AndroidProtocolHandler[];
const char kClassPath_org_chromium_android_1webview_AndroidProtocolHandler[] =
    "org/chromium/android_webview/AndroidProtocolHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_android_1webview_AndroidProtocolHandler_clazz(nullptr);
#ifndef org_chromium_android_1webview_AndroidProtocolHandler_clazz_defined
#define org_chromium_android_1webview_AndroidProtocolHandler_clazz_defined
inline jclass org_chromium_android_1webview_AndroidProtocolHandler_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_android_1webview_AndroidProtocolHandler,
      &g_org_chromium_android_1webview_AndroidProtocolHandler_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android_webview {

static base::android::ScopedJavaLocalRef<jstring>
    JNI_AndroidProtocolHandler_GetAndroidAssetPath(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_Myi_1XSsy(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AndroidProtocolHandler_GetAndroidAssetPath(env).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_AndroidProtocolHandler_GetAndroidResourcePath(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_MZEbjzws(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_AndroidProtocolHandler_GetAndroidResourcePath(env).Release();
}


static std::atomic<jmethodID> g_org_chromium_android_1webview_AndroidProtocolHandler_open(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_AndroidProtocolHandler_open(JNIEnv* env,
    const base::android::JavaRef<jstring>& url) {
  jclass clazz = org_chromium_android_1webview_AndroidProtocolHandler_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AndroidProtocolHandler_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "open",
          "(Ljava/lang/String;)Ljava/io/InputStream;",
          &g_org_chromium_android_1webview_AndroidProtocolHandler_open);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, url.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_android_1webview_AndroidProtocolHandler_getMimeType(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AndroidProtocolHandler_getMimeType(JNIEnv*
    env, const base::android::JavaRef<jobject>& stream,
    const base::android::JavaRef<jstring>& url) {
  jclass clazz = org_chromium_android_1webview_AndroidProtocolHandler_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_android_1webview_AndroidProtocolHandler_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getMimeType",
          "(Ljava/io/InputStream;Ljava/lang/String;)Ljava/lang/String;",
          &g_org_chromium_android_1webview_AndroidProtocolHandler_getMimeType);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, stream.obj(), url.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

}  // namespace android_webview

// Step 4: Generated test functions (optional).


#endif  // org_chromium_android_webview_AndroidProtocolHandler_JNI
