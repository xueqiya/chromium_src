// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_test_internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5ftest_5finternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5ftest_5finternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "client_protocol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5ftest_5finternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5ftest_5finternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace ipc {
namespace invalidation {
class RegistrationManagerStateP;
class RegistrationManagerStatePDefaultTypeInternal;
extern RegistrationManagerStatePDefaultTypeInternal _RegistrationManagerStateP_default_instance_;
}  // namespace invalidation
}  // namespace ipc
PROTOBUF_NAMESPACE_OPEN
template<> ::ipc::invalidation::RegistrationManagerStateP* Arena::CreateMaybeMessage<::ipc::invalidation::RegistrationManagerStateP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ipc {
namespace invalidation {

// ===================================================================

class RegistrationManagerStateP :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.RegistrationManagerStateP) */ {
 public:
  RegistrationManagerStateP();
  virtual ~RegistrationManagerStateP();

  RegistrationManagerStateP(const RegistrationManagerStateP& from);
  RegistrationManagerStateP(RegistrationManagerStateP&& from) noexcept
    : RegistrationManagerStateP() {
    *this = ::std::move(from);
  }

  inline RegistrationManagerStateP& operator=(const RegistrationManagerStateP& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistrationManagerStateP& operator=(RegistrationManagerStateP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RegistrationManagerStateP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistrationManagerStateP* internal_default_instance() {
    return reinterpret_cast<const RegistrationManagerStateP*>(
               &_RegistrationManagerStateP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegistrationManagerStateP& a, RegistrationManagerStateP& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistrationManagerStateP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistrationManagerStateP* New() const final {
    return CreateMaybeMessage<RegistrationManagerStateP>(nullptr);
  }

  RegistrationManagerStateP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistrationManagerStateP>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RegistrationManagerStateP& from);
  void MergeFrom(const RegistrationManagerStateP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegistrationManagerStateP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.RegistrationManagerStateP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegisteredObjectsFieldNumber = 3,
    kClientSummaryFieldNumber = 1,
    kServerSummaryFieldNumber = 2,
  };
  // repeated .ipc.invalidation.ObjectIdP registered_objects = 3;
  int registered_objects_size() const;
  void clear_registered_objects();
  ::ipc::invalidation::ObjectIdP* mutable_registered_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc::invalidation::ObjectIdP >*
      mutable_registered_objects();
  const ::ipc::invalidation::ObjectIdP& registered_objects(int index) const;
  ::ipc::invalidation::ObjectIdP* add_registered_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc::invalidation::ObjectIdP >&
      registered_objects() const;

  // optional .ipc.invalidation.RegistrationSummary client_summary = 1;
  bool has_client_summary() const;
  void clear_client_summary();
  const ::ipc::invalidation::RegistrationSummary& client_summary() const;
  ::ipc::invalidation::RegistrationSummary* release_client_summary();
  ::ipc::invalidation::RegistrationSummary* mutable_client_summary();
  void set_allocated_client_summary(::ipc::invalidation::RegistrationSummary* client_summary);

  // optional .ipc.invalidation.RegistrationSummary server_summary = 2;
  bool has_server_summary() const;
  void clear_server_summary();
  const ::ipc::invalidation::RegistrationSummary& server_summary() const;
  ::ipc::invalidation::RegistrationSummary* release_server_summary();
  ::ipc::invalidation::RegistrationSummary* mutable_server_summary();
  void set_allocated_server_summary(::ipc::invalidation::RegistrationSummary* server_summary);

  // @@protoc_insertion_point(class_scope:ipc.invalidation.RegistrationManagerStateP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc::invalidation::ObjectIdP > registered_objects_;
  ::ipc::invalidation::RegistrationSummary* client_summary_;
  ::ipc::invalidation::RegistrationSummary* server_summary_;
  friend struct ::TableStruct_client_5ftest_5finternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegistrationManagerStateP

// optional .ipc.invalidation.RegistrationSummary client_summary = 1;
inline bool RegistrationManagerStateP::has_client_summary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::ipc::invalidation::RegistrationSummary& RegistrationManagerStateP::client_summary() const {
  const ::ipc::invalidation::RegistrationSummary* p = client_summary_;
  // @@protoc_insertion_point(field_get:ipc.invalidation.RegistrationManagerStateP.client_summary)
  return p != nullptr ? *p : *reinterpret_cast<const ::ipc::invalidation::RegistrationSummary*>(
      &::ipc::invalidation::_RegistrationSummary_default_instance_);
}
inline ::ipc::invalidation::RegistrationSummary* RegistrationManagerStateP::release_client_summary() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.RegistrationManagerStateP.client_summary)
  _has_bits_[0] &= ~0x00000001u;
  ::ipc::invalidation::RegistrationSummary* temp = client_summary_;
  client_summary_ = nullptr;
  return temp;
}
inline ::ipc::invalidation::RegistrationSummary* RegistrationManagerStateP::mutable_client_summary() {
  _has_bits_[0] |= 0x00000001u;
  if (client_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipc::invalidation::RegistrationSummary>(GetArenaNoVirtual());
    client_summary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.RegistrationManagerStateP.client_summary)
  return client_summary_;
}
inline void RegistrationManagerStateP::set_allocated_client_summary(::ipc::invalidation::RegistrationSummary* client_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_summary_);
  }
  if (client_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_summary_ = client_summary;
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.RegistrationManagerStateP.client_summary)
}

// optional .ipc.invalidation.RegistrationSummary server_summary = 2;
inline bool RegistrationManagerStateP::has_server_summary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::ipc::invalidation::RegistrationSummary& RegistrationManagerStateP::server_summary() const {
  const ::ipc::invalidation::RegistrationSummary* p = server_summary_;
  // @@protoc_insertion_point(field_get:ipc.invalidation.RegistrationManagerStateP.server_summary)
  return p != nullptr ? *p : *reinterpret_cast<const ::ipc::invalidation::RegistrationSummary*>(
      &::ipc::invalidation::_RegistrationSummary_default_instance_);
}
inline ::ipc::invalidation::RegistrationSummary* RegistrationManagerStateP::release_server_summary() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.RegistrationManagerStateP.server_summary)
  _has_bits_[0] &= ~0x00000002u;
  ::ipc::invalidation::RegistrationSummary* temp = server_summary_;
  server_summary_ = nullptr;
  return temp;
}
inline ::ipc::invalidation::RegistrationSummary* RegistrationManagerStateP::mutable_server_summary() {
  _has_bits_[0] |= 0x00000002u;
  if (server_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipc::invalidation::RegistrationSummary>(GetArenaNoVirtual());
    server_summary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.RegistrationManagerStateP.server_summary)
  return server_summary_;
}
inline void RegistrationManagerStateP::set_allocated_server_summary(::ipc::invalidation::RegistrationSummary* server_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_summary_);
  }
  if (server_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  server_summary_ = server_summary;
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.RegistrationManagerStateP.server_summary)
}

// repeated .ipc.invalidation.ObjectIdP registered_objects = 3;
inline int RegistrationManagerStateP::registered_objects_size() const {
  return registered_objects_.size();
}
inline ::ipc::invalidation::ObjectIdP* RegistrationManagerStateP::mutable_registered_objects(int index) {
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.RegistrationManagerStateP.registered_objects)
  return registered_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc::invalidation::ObjectIdP >*
RegistrationManagerStateP::mutable_registered_objects() {
  // @@protoc_insertion_point(field_mutable_list:ipc.invalidation.RegistrationManagerStateP.registered_objects)
  return &registered_objects_;
}
inline const ::ipc::invalidation::ObjectIdP& RegistrationManagerStateP::registered_objects(int index) const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.RegistrationManagerStateP.registered_objects)
  return registered_objects_.Get(index);
}
inline ::ipc::invalidation::ObjectIdP* RegistrationManagerStateP::add_registered_objects() {
  // @@protoc_insertion_point(field_add:ipc.invalidation.RegistrationManagerStateP.registered_objects)
  return registered_objects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc::invalidation::ObjectIdP >&
RegistrationManagerStateP::registered_objects() const {
  // @@protoc_insertion_point(field_list:ipc.invalidation.RegistrationManagerStateP.registered_objects)
  return registered_objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace invalidation
}  // namespace ipc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5ftest_5finternal_2eproto
