// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "client_protocol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace ipc {
namespace invalidation {
class AckHandleP;
class AckHandlePDefaultTypeInternal;
extern AckHandlePDefaultTypeInternal _AckHandleP_default_instance_;
class PersistentStateBlob;
class PersistentStateBlobDefaultTypeInternal;
extern PersistentStateBlobDefaultTypeInternal _PersistentStateBlob_default_instance_;
class PersistentTiclState;
class PersistentTiclStateDefaultTypeInternal;
extern PersistentTiclStateDefaultTypeInternal _PersistentTiclState_default_instance_;
class RunStateP;
class RunStatePDefaultTypeInternal;
extern RunStatePDefaultTypeInternal _RunStateP_default_instance_;
}  // namespace invalidation
}  // namespace ipc
PROTOBUF_NAMESPACE_OPEN
template<> ::ipc::invalidation::AckHandleP* Arena::CreateMaybeMessage<::ipc::invalidation::AckHandleP>(Arena*);
template<> ::ipc::invalidation::PersistentStateBlob* Arena::CreateMaybeMessage<::ipc::invalidation::PersistentStateBlob>(Arena*);
template<> ::ipc::invalidation::PersistentTiclState* Arena::CreateMaybeMessage<::ipc::invalidation::PersistentTiclState>(Arena*);
template<> ::ipc::invalidation::RunStateP* Arena::CreateMaybeMessage<::ipc::invalidation::RunStateP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ipc {
namespace invalidation {

enum RunStateP_State : int {
  RunStateP_State_NOT_STARTED = 1,
  RunStateP_State_STARTED = 2,
  RunStateP_State_STOPPED = 3
};
bool RunStateP_State_IsValid(int value);
constexpr RunStateP_State RunStateP_State_State_MIN = RunStateP_State_NOT_STARTED;
constexpr RunStateP_State RunStateP_State_State_MAX = RunStateP_State_STOPPED;
constexpr int RunStateP_State_State_ARRAYSIZE = RunStateP_State_State_MAX + 1;

const std::string& RunStateP_State_Name(RunStateP_State value);
template<typename T>
inline const std::string& RunStateP_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RunStateP_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RunStateP_State_Name.");
  return RunStateP_State_Name(static_cast<RunStateP_State>(enum_t_value));
}
bool RunStateP_State_Parse(
    const std::string& name, RunStateP_State* value);
// ===================================================================

class AckHandleP :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.AckHandleP) */ {
 public:
  AckHandleP();
  virtual ~AckHandleP();

  AckHandleP(const AckHandleP& from);
  AckHandleP(AckHandleP&& from) noexcept
    : AckHandleP() {
    *this = ::std::move(from);
  }

  inline AckHandleP& operator=(const AckHandleP& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckHandleP& operator=(AckHandleP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AckHandleP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckHandleP* internal_default_instance() {
    return reinterpret_cast<const AckHandleP*>(
               &_AckHandleP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AckHandleP& a, AckHandleP& b) {
    a.Swap(&b);
  }
  inline void Swap(AckHandleP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckHandleP* New() const final {
    return CreateMaybeMessage<AckHandleP>(nullptr);
  }

  AckHandleP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckHandleP>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AckHandleP& from);
  void MergeFrom(const AckHandleP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckHandleP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.AckHandleP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvalidationFieldNumber = 1,
  };
  // optional .ipc.invalidation.InvalidationP invalidation = 1;
  bool has_invalidation() const;
  void clear_invalidation();
  const ::ipc::invalidation::InvalidationP& invalidation() const;
  ::ipc::invalidation::InvalidationP* release_invalidation();
  ::ipc::invalidation::InvalidationP* mutable_invalidation();
  void set_allocated_invalidation(::ipc::invalidation::InvalidationP* invalidation);

  // @@protoc_insertion_point(class_scope:ipc.invalidation.AckHandleP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ipc::invalidation::InvalidationP* invalidation_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class PersistentTiclState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.PersistentTiclState) */ {
 public:
  PersistentTiclState();
  virtual ~PersistentTiclState();

  PersistentTiclState(const PersistentTiclState& from);
  PersistentTiclState(PersistentTiclState&& from) noexcept
    : PersistentTiclState() {
    *this = ::std::move(from);
  }

  inline PersistentTiclState& operator=(const PersistentTiclState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentTiclState& operator=(PersistentTiclState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PersistentTiclState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistentTiclState* internal_default_instance() {
    return reinterpret_cast<const PersistentTiclState*>(
               &_PersistentTiclState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PersistentTiclState& a, PersistentTiclState& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentTiclState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistentTiclState* New() const final {
    return CreateMaybeMessage<PersistentTiclState>(nullptr);
  }

  PersistentTiclState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistentTiclState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PersistentTiclState& from);
  void MergeFrom(const PersistentTiclState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PersistentTiclState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.PersistentTiclState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTokenFieldNumber = 1,
    kLastMessageSendTimeMsFieldNumber = 2,
  };
  // optional bytes client_token = 1;
  bool has_client_token() const;
  void clear_client_token();
  const std::string& client_token() const;
  void set_client_token(const std::string& value);
  void set_client_token(std::string&& value);
  void set_client_token(const char* value);
  void set_client_token(const void* value, size_t size);
  std::string* mutable_client_token();
  std::string* release_client_token();
  void set_allocated_client_token(std::string* client_token);

  // optional int64 last_message_send_time_ms = 2 [default = 0];
  bool has_last_message_send_time_ms() const;
  void clear_last_message_send_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_message_send_time_ms() const;
  void set_last_message_send_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:ipc.invalidation.PersistentTiclState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_token_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_message_send_time_ms_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class PersistentStateBlob :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.PersistentStateBlob) */ {
 public:
  PersistentStateBlob();
  virtual ~PersistentStateBlob();

  PersistentStateBlob(const PersistentStateBlob& from);
  PersistentStateBlob(PersistentStateBlob&& from) noexcept
    : PersistentStateBlob() {
    *this = ::std::move(from);
  }

  inline PersistentStateBlob& operator=(const PersistentStateBlob& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentStateBlob& operator=(PersistentStateBlob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PersistentStateBlob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistentStateBlob* internal_default_instance() {
    return reinterpret_cast<const PersistentStateBlob*>(
               &_PersistentStateBlob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PersistentStateBlob& a, PersistentStateBlob& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentStateBlob* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistentStateBlob* New() const final {
    return CreateMaybeMessage<PersistentStateBlob>(nullptr);
  }

  PersistentStateBlob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistentStateBlob>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PersistentStateBlob& from);
  void MergeFrom(const PersistentStateBlob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PersistentStateBlob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.PersistentStateBlob";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthenticationCodeFieldNumber = 2,
    kTiclStateFieldNumber = 1,
  };
  // optional bytes authentication_code = 2;
  bool has_authentication_code() const;
  void clear_authentication_code();
  const std::string& authentication_code() const;
  void set_authentication_code(const std::string& value);
  void set_authentication_code(std::string&& value);
  void set_authentication_code(const char* value);
  void set_authentication_code(const void* value, size_t size);
  std::string* mutable_authentication_code();
  std::string* release_authentication_code();
  void set_allocated_authentication_code(std::string* authentication_code);

  // optional .ipc.invalidation.PersistentTiclState ticl_state = 1;
  bool has_ticl_state() const;
  void clear_ticl_state();
  const ::ipc::invalidation::PersistentTiclState& ticl_state() const;
  ::ipc::invalidation::PersistentTiclState* release_ticl_state();
  ::ipc::invalidation::PersistentTiclState* mutable_ticl_state();
  void set_allocated_ticl_state(::ipc::invalidation::PersistentTiclState* ticl_state);

  // @@protoc_insertion_point(class_scope:ipc.invalidation.PersistentStateBlob)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authentication_code_;
  ::ipc::invalidation::PersistentTiclState* ticl_state_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class RunStateP :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.RunStateP) */ {
 public:
  RunStateP();
  virtual ~RunStateP();

  RunStateP(const RunStateP& from);
  RunStateP(RunStateP&& from) noexcept
    : RunStateP() {
    *this = ::std::move(from);
  }

  inline RunStateP& operator=(const RunStateP& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunStateP& operator=(RunStateP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RunStateP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunStateP* internal_default_instance() {
    return reinterpret_cast<const RunStateP*>(
               &_RunStateP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RunStateP& a, RunStateP& b) {
    a.Swap(&b);
  }
  inline void Swap(RunStateP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunStateP* New() const final {
    return CreateMaybeMessage<RunStateP>(nullptr);
  }

  RunStateP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunStateP>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RunStateP& from);
  void MergeFrom(const RunStateP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RunStateP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.RunStateP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RunStateP_State State;
  static constexpr State NOT_STARTED =
    RunStateP_State_NOT_STARTED;
  static constexpr State STARTED =
    RunStateP_State_STARTED;
  static constexpr State STOPPED =
    RunStateP_State_STOPPED;
  static inline bool State_IsValid(int value) {
    return RunStateP_State_IsValid(value);
  }
  static constexpr State State_MIN =
    RunStateP_State_State_MIN;
  static constexpr State State_MAX =
    RunStateP_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    RunStateP_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return RunStateP_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return RunStateP_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional .ipc.invalidation.RunStateP.State state = 1;
  bool has_state() const;
  void clear_state();
  ::ipc::invalidation::RunStateP_State state() const;
  void set_state(::ipc::invalidation::RunStateP_State value);

  // @@protoc_insertion_point(class_scope:ipc.invalidation.RunStateP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int state_;
  friend struct ::TableStruct_client_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AckHandleP

// optional .ipc.invalidation.InvalidationP invalidation = 1;
inline bool AckHandleP::has_invalidation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::ipc::invalidation::InvalidationP& AckHandleP::invalidation() const {
  const ::ipc::invalidation::InvalidationP* p = invalidation_;
  // @@protoc_insertion_point(field_get:ipc.invalidation.AckHandleP.invalidation)
  return p != nullptr ? *p : *reinterpret_cast<const ::ipc::invalidation::InvalidationP*>(
      &::ipc::invalidation::_InvalidationP_default_instance_);
}
inline ::ipc::invalidation::InvalidationP* AckHandleP::release_invalidation() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.AckHandleP.invalidation)
  _has_bits_[0] &= ~0x00000001u;
  ::ipc::invalidation::InvalidationP* temp = invalidation_;
  invalidation_ = nullptr;
  return temp;
}
inline ::ipc::invalidation::InvalidationP* AckHandleP::mutable_invalidation() {
  _has_bits_[0] |= 0x00000001u;
  if (invalidation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipc::invalidation::InvalidationP>(GetArenaNoVirtual());
    invalidation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.AckHandleP.invalidation)
  return invalidation_;
}
inline void AckHandleP::set_allocated_invalidation(::ipc::invalidation::InvalidationP* invalidation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invalidation_);
  }
  if (invalidation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invalidation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invalidation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invalidation_ = invalidation;
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.AckHandleP.invalidation)
}

// -------------------------------------------------------------------

// PersistentTiclState

// optional bytes client_token = 1;
inline bool PersistentTiclState::has_client_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistentTiclState::clear_client_token() {
  client_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PersistentTiclState::client_token() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.PersistentTiclState.client_token)
  return client_token_.GetNoArena();
}
inline void PersistentTiclState::set_client_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.invalidation.PersistentTiclState.client_token)
}
inline void PersistentTiclState::set_client_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipc.invalidation.PersistentTiclState.client_token)
}
inline void PersistentTiclState::set_client_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.invalidation.PersistentTiclState.client_token)
}
inline void PersistentTiclState::set_client_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.invalidation.PersistentTiclState.client_token)
}
inline std::string* PersistentTiclState::mutable_client_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.PersistentTiclState.client_token)
  return client_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PersistentTiclState::release_client_token() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.PersistentTiclState.client_token)
  if (!has_client_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PersistentTiclState::set_allocated_client_token(std::string* client_token) {
  if (client_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_token);
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.PersistentTiclState.client_token)
}

// optional int64 last_message_send_time_ms = 2 [default = 0];
inline bool PersistentTiclState::has_last_message_send_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersistentTiclState::clear_last_message_send_time_ms() {
  last_message_send_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PersistentTiclState::last_message_send_time_ms() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.PersistentTiclState.last_message_send_time_ms)
  return last_message_send_time_ms_;
}
inline void PersistentTiclState::set_last_message_send_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  last_message_send_time_ms_ = value;
  // @@protoc_insertion_point(field_set:ipc.invalidation.PersistentTiclState.last_message_send_time_ms)
}

// -------------------------------------------------------------------

// PersistentStateBlob

// optional .ipc.invalidation.PersistentTiclState ticl_state = 1;
inline bool PersistentStateBlob::has_ticl_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersistentStateBlob::clear_ticl_state() {
  if (ticl_state_ != nullptr) ticl_state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ipc::invalidation::PersistentTiclState& PersistentStateBlob::ticl_state() const {
  const ::ipc::invalidation::PersistentTiclState* p = ticl_state_;
  // @@protoc_insertion_point(field_get:ipc.invalidation.PersistentStateBlob.ticl_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::ipc::invalidation::PersistentTiclState*>(
      &::ipc::invalidation::_PersistentTiclState_default_instance_);
}
inline ::ipc::invalidation::PersistentTiclState* PersistentStateBlob::release_ticl_state() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.PersistentStateBlob.ticl_state)
  _has_bits_[0] &= ~0x00000002u;
  ::ipc::invalidation::PersistentTiclState* temp = ticl_state_;
  ticl_state_ = nullptr;
  return temp;
}
inline ::ipc::invalidation::PersistentTiclState* PersistentStateBlob::mutable_ticl_state() {
  _has_bits_[0] |= 0x00000002u;
  if (ticl_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipc::invalidation::PersistentTiclState>(GetArenaNoVirtual());
    ticl_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.PersistentStateBlob.ticl_state)
  return ticl_state_;
}
inline void PersistentStateBlob::set_allocated_ticl_state(::ipc::invalidation::PersistentTiclState* ticl_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ticl_state_;
  }
  if (ticl_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ticl_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticl_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ticl_state_ = ticl_state;
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.PersistentStateBlob.ticl_state)
}

// optional bytes authentication_code = 2;
inline bool PersistentStateBlob::has_authentication_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistentStateBlob::clear_authentication_code() {
  authentication_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PersistentStateBlob::authentication_code() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.PersistentStateBlob.authentication_code)
  return authentication_code_.GetNoArena();
}
inline void PersistentStateBlob::set_authentication_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  authentication_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.invalidation.PersistentStateBlob.authentication_code)
}
inline void PersistentStateBlob::set_authentication_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  authentication_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipc.invalidation.PersistentStateBlob.authentication_code)
}
inline void PersistentStateBlob::set_authentication_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  authentication_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.invalidation.PersistentStateBlob.authentication_code)
}
inline void PersistentStateBlob::set_authentication_code(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  authentication_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.invalidation.PersistentStateBlob.authentication_code)
}
inline std::string* PersistentStateBlob::mutable_authentication_code() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.PersistentStateBlob.authentication_code)
  return authentication_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PersistentStateBlob::release_authentication_code() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.PersistentStateBlob.authentication_code)
  if (!has_authentication_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return authentication_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PersistentStateBlob::set_allocated_authentication_code(std::string* authentication_code) {
  if (authentication_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  authentication_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authentication_code);
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.PersistentStateBlob.authentication_code)
}

// -------------------------------------------------------------------

// RunStateP

// optional .ipc.invalidation.RunStateP.State state = 1;
inline bool RunStateP::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunStateP::clear_state() {
  state_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ipc::invalidation::RunStateP_State RunStateP::state() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.RunStateP.state)
  return static_cast< ::ipc::invalidation::RunStateP_State >(state_);
}
inline void RunStateP::set_state(::ipc::invalidation::RunStateP_State value) {
  assert(::ipc::invalidation::RunStateP_State_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
  // @@protoc_insertion_point(field_set:ipc.invalidation.RunStateP.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace invalidation
}  // namespace ipc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ipc::invalidation::RunStateP_State> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_2eproto
