// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_client_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InvalidationP_client_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistentTiclState_client_2eproto;
namespace ipc {
namespace invalidation {
class AckHandlePDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckHandleP> _instance;
} _AckHandleP_default_instance_;
class PersistentTiclStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistentTiclState> _instance;
} _PersistentTiclState_default_instance_;
class PersistentStateBlobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistentStateBlob> _instance;
} _PersistentStateBlob_default_instance_;
class RunStatePDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunStateP> _instance;
} _RunStateP_default_instance_;
}  // namespace invalidation
}  // namespace ipc
static void InitDefaultsscc_info_AckHandleP_client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc::invalidation::_AckHandleP_default_instance_;
    new (ptr) ::ipc::invalidation::AckHandleP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipc::invalidation::AckHandleP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckHandleP_client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AckHandleP_client_2eproto}, {
      &scc_info_InvalidationP_client_5fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_PersistentStateBlob_client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc::invalidation::_PersistentStateBlob_default_instance_;
    new (ptr) ::ipc::invalidation::PersistentStateBlob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipc::invalidation::PersistentStateBlob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PersistentStateBlob_client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PersistentStateBlob_client_2eproto}, {
      &scc_info_PersistentTiclState_client_2eproto.base,}};

static void InitDefaultsscc_info_PersistentTiclState_client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc::invalidation::_PersistentTiclState_default_instance_;
    new (ptr) ::ipc::invalidation::PersistentTiclState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipc::invalidation::PersistentTiclState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistentTiclState_client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PersistentTiclState_client_2eproto}, {}};

static void InitDefaultsscc_info_RunStateP_client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc::invalidation::_RunStateP_default_instance_;
    new (ptr) ::ipc::invalidation::RunStateP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipc::invalidation::RunStateP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunStateP_client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RunStateP_client_2eproto}, {}};

namespace ipc {
namespace invalidation {
bool RunStateP_State_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RunStateP_State_strings[3] = {};

static const char RunStateP_State_names[] =
  "NOT_STARTED"
  "STARTED"
  "STOPPED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RunStateP_State_entries[] = {
  { {RunStateP_State_names + 0, 11}, 1 },
  { {RunStateP_State_names + 11, 7}, 2 },
  { {RunStateP_State_names + 18, 7}, 3 },
};

static const int RunStateP_State_entries_by_number[] = {
  0, // 1 -> NOT_STARTED
  1, // 2 -> STARTED
  2, // 3 -> STOPPED
};

const std::string& RunStateP_State_Name(
    RunStateP_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RunStateP_State_entries,
          RunStateP_State_entries_by_number,
          3, RunStateP_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RunStateP_State_entries,
      RunStateP_State_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RunStateP_State_strings[idx].get();
}
bool RunStateP_State_Parse(
    const std::string& name, RunStateP_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RunStateP_State_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RunStateP_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RunStateP_State RunStateP::NOT_STARTED;
constexpr RunStateP_State RunStateP::STARTED;
constexpr RunStateP_State RunStateP::STOPPED;
constexpr RunStateP_State RunStateP::State_MIN;
constexpr RunStateP_State RunStateP::State_MAX;
constexpr int RunStateP::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AckHandleP::InitAsDefaultInstance() {
  ::ipc::invalidation::_AckHandleP_default_instance_._instance.get_mutable()->invalidation_ = const_cast< ::ipc::invalidation::InvalidationP*>(
      ::ipc::invalidation::InvalidationP::internal_default_instance());
}
class AckHandleP::_Internal {
 public:
  using HasBits = decltype(std::declval<AckHandleP>()._has_bits_);
  static const ::ipc::invalidation::InvalidationP& invalidation(const AckHandleP* msg);
  static void set_has_invalidation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ipc::invalidation::InvalidationP&
AckHandleP::_Internal::invalidation(const AckHandleP* msg) {
  return *msg->invalidation_;
}
void AckHandleP::clear_invalidation() {
  if (invalidation_ != nullptr) invalidation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AckHandleP::AckHandleP()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.AckHandleP)
}
AckHandleP::AckHandleP(const AckHandleP& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_invalidation()) {
    invalidation_ = new ::ipc::invalidation::InvalidationP(*from.invalidation_);
  } else {
    invalidation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.AckHandleP)
}

void AckHandleP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckHandleP_client_2eproto.base);
  invalidation_ = nullptr;
}

AckHandleP::~AckHandleP() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.AckHandleP)
  SharedDtor();
}

void AckHandleP::SharedDtor() {
  if (this != internal_default_instance()) delete invalidation_;
}

void AckHandleP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckHandleP& AckHandleP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckHandleP_client_2eproto.base);
  return *internal_default_instance();
}


void AckHandleP::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.AckHandleP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(invalidation_ != nullptr);
    invalidation_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AckHandleP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ipc.invalidation.InvalidationP invalidation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_invalidation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AckHandleP::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.AckHandleP)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.invalidation.InvalidationP invalidation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_invalidation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.AckHandleP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.AckHandleP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AckHandleP::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.AckHandleP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ipc.invalidation.InvalidationP invalidation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::invalidation(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.AckHandleP)
}

size_t AckHandleP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.AckHandleP)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ipc.invalidation.InvalidationP invalidation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invalidation_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckHandleP::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AckHandleP*>(
      &from));
}

void AckHandleP::MergeFrom(const AckHandleP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.AckHandleP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_invalidation()) {
    mutable_invalidation()->::ipc::invalidation::InvalidationP::MergeFrom(from.invalidation());
  }
}

void AckHandleP::CopyFrom(const AckHandleP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.AckHandleP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHandleP::IsInitialized() const {
  return true;
}

void AckHandleP::InternalSwap(AckHandleP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(invalidation_, other->invalidation_);
}

std::string AckHandleP::GetTypeName() const {
  return "ipc.invalidation.AckHandleP";
}


// ===================================================================

void PersistentTiclState::InitAsDefaultInstance() {
}
class PersistentTiclState::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistentTiclState>()._has_bits_);
  static void set_has_client_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_message_send_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PersistentTiclState::PersistentTiclState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.PersistentTiclState)
}
PersistentTiclState::PersistentTiclState(const PersistentTiclState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_token()) {
    client_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_token_);
  }
  last_message_send_time_ms_ = from.last_message_send_time_ms_;
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.PersistentTiclState)
}

void PersistentTiclState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistentTiclState_client_2eproto.base);
  client_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_message_send_time_ms_ = PROTOBUF_LONGLONG(0);
}

PersistentTiclState::~PersistentTiclState() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.PersistentTiclState)
  SharedDtor();
}

void PersistentTiclState::SharedDtor() {
  client_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PersistentTiclState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistentTiclState& PersistentTiclState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistentTiclState_client_2eproto.base);
  return *internal_default_instance();
}


void PersistentTiclState::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.PersistentTiclState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_token_.ClearNonDefaultToEmptyNoArena();
  }
  last_message_send_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistentTiclState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes client_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_client_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_message_send_time_ms = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_message_send_time_ms(&has_bits);
          last_message_send_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistentTiclState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.PersistentTiclState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes client_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_message_send_time_ms = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_last_message_send_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_message_send_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.PersistentTiclState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.PersistentTiclState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistentTiclState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.PersistentTiclState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes client_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->client_token(), output);
  }

  // optional int64 last_message_send_time_ms = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->last_message_send_time_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.PersistentTiclState)
}

size_t PersistentTiclState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.PersistentTiclState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes client_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->client_token());
    }

    // optional int64 last_message_send_time_ms = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_message_send_time_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistentTiclState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PersistentTiclState*>(
      &from));
}

void PersistentTiclState::MergeFrom(const PersistentTiclState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.PersistentTiclState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      client_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      last_message_send_time_ms_ = from.last_message_send_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PersistentTiclState::CopyFrom(const PersistentTiclState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.PersistentTiclState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentTiclState::IsInitialized() const {
  return true;
}

void PersistentTiclState::InternalSwap(PersistentTiclState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_token_.Swap(&other->client_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_message_send_time_ms_, other->last_message_send_time_ms_);
}

std::string PersistentTiclState::GetTypeName() const {
  return "ipc.invalidation.PersistentTiclState";
}


// ===================================================================

void PersistentStateBlob::InitAsDefaultInstance() {
  ::ipc::invalidation::_PersistentStateBlob_default_instance_._instance.get_mutable()->ticl_state_ = const_cast< ::ipc::invalidation::PersistentTiclState*>(
      ::ipc::invalidation::PersistentTiclState::internal_default_instance());
}
class PersistentStateBlob::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistentStateBlob>()._has_bits_);
  static const ::ipc::invalidation::PersistentTiclState& ticl_state(const PersistentStateBlob* msg);
  static void set_has_ticl_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_authentication_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ipc::invalidation::PersistentTiclState&
PersistentStateBlob::_Internal::ticl_state(const PersistentStateBlob* msg) {
  return *msg->ticl_state_;
}
PersistentStateBlob::PersistentStateBlob()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.PersistentStateBlob)
}
PersistentStateBlob::PersistentStateBlob(const PersistentStateBlob& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authentication_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_authentication_code()) {
    authentication_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.authentication_code_);
  }
  if (from.has_ticl_state()) {
    ticl_state_ = new ::ipc::invalidation::PersistentTiclState(*from.ticl_state_);
  } else {
    ticl_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.PersistentStateBlob)
}

void PersistentStateBlob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistentStateBlob_client_2eproto.base);
  authentication_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticl_state_ = nullptr;
}

PersistentStateBlob::~PersistentStateBlob() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.PersistentStateBlob)
  SharedDtor();
}

void PersistentStateBlob::SharedDtor() {
  authentication_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ticl_state_;
}

void PersistentStateBlob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistentStateBlob& PersistentStateBlob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistentStateBlob_client_2eproto.base);
  return *internal_default_instance();
}


void PersistentStateBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.PersistentStateBlob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      authentication_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ticl_state_ != nullptr);
      ticl_state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistentStateBlob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ipc.invalidation.PersistentTiclState ticl_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ticl_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes authentication_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_authentication_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistentStateBlob::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.PersistentStateBlob)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.invalidation.PersistentTiclState ticl_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ticl_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes authentication_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_authentication_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.PersistentStateBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.PersistentStateBlob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistentStateBlob::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.PersistentStateBlob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ipc.invalidation.PersistentTiclState ticl_state = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::ticl_state(this), output);
  }

  // optional bytes authentication_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->authentication_code(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.PersistentStateBlob)
}

size_t PersistentStateBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.PersistentStateBlob)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes authentication_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->authentication_code());
    }

    // optional .ipc.invalidation.PersistentTiclState ticl_state = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ticl_state_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistentStateBlob::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PersistentStateBlob*>(
      &from));
}

void PersistentStateBlob::MergeFrom(const PersistentStateBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.PersistentStateBlob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      authentication_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.authentication_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ticl_state()->::ipc::invalidation::PersistentTiclState::MergeFrom(from.ticl_state());
    }
  }
}

void PersistentStateBlob::CopyFrom(const PersistentStateBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.PersistentStateBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentStateBlob::IsInitialized() const {
  return true;
}

void PersistentStateBlob::InternalSwap(PersistentStateBlob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  authentication_code_.Swap(&other->authentication_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ticl_state_, other->ticl_state_);
}

std::string PersistentStateBlob::GetTypeName() const {
  return "ipc.invalidation.PersistentStateBlob";
}


// ===================================================================

void RunStateP::InitAsDefaultInstance() {
}
class RunStateP::_Internal {
 public:
  using HasBits = decltype(std::declval<RunStateP>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RunStateP::RunStateP()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.RunStateP)
}
RunStateP::RunStateP(const RunStateP& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.RunStateP)
}

void RunStateP::SharedCtor() {
  state_ = 1;
}

RunStateP::~RunStateP() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.RunStateP)
  SharedDtor();
}

void RunStateP::SharedDtor() {
}

void RunStateP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunStateP& RunStateP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunStateP_client_2eproto.base);
  return *internal_default_instance();
}


void RunStateP::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.RunStateP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunStateP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ipc.invalidation.RunStateP.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ipc::invalidation::RunStateP_State_IsValid(val))) {
            set_state(static_cast<::ipc::invalidation::RunStateP_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunStateP::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.RunStateP)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.invalidation.RunStateP.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ipc::invalidation::RunStateP_State_IsValid(value)) {
            set_state(static_cast< ::ipc::invalidation::RunStateP_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.RunStateP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.RunStateP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunStateP::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.RunStateP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ipc.invalidation.RunStateP.State state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.RunStateP)
}

size_t RunStateP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.RunStateP)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ipc.invalidation.RunStateP.State state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunStateP::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RunStateP*>(
      &from));
}

void RunStateP::MergeFrom(const RunStateP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.RunStateP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void RunStateP::CopyFrom(const RunStateP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.RunStateP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStateP::IsInitialized() const {
  return true;
}

void RunStateP::InternalSwap(RunStateP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

std::string RunStateP::GetTypeName() const {
  return "ipc.invalidation.RunStateP";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace invalidation
}  // namespace ipc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ipc::invalidation::AckHandleP* Arena::CreateMaybeMessage< ::ipc::invalidation::AckHandleP >(Arena* arena) {
  return Arena::CreateInternal< ::ipc::invalidation::AckHandleP >(arena);
}
template<> PROTOBUF_NOINLINE ::ipc::invalidation::PersistentTiclState* Arena::CreateMaybeMessage< ::ipc::invalidation::PersistentTiclState >(Arena* arena) {
  return Arena::CreateInternal< ::ipc::invalidation::PersistentTiclState >(arena);
}
template<> PROTOBUF_NOINLINE ::ipc::invalidation::PersistentStateBlob* Arena::CreateMaybeMessage< ::ipc::invalidation::PersistentStateBlob >(Arena* arena) {
  return Arena::CreateInternal< ::ipc::invalidation::PersistentStateBlob >(arena);
}
template<> PROTOBUF_NOINLINE ::ipc::invalidation::RunStateP* Arena::CreateMaybeMessage< ::ipc::invalidation::RunStateP >(Arena* arena) {
  return Arena::CreateInternal< ::ipc::invalidation::RunStateP >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
