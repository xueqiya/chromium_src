// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace ipc {
namespace invalidation {
class ClientType;
class ClientTypeDefaultTypeInternal;
extern ClientTypeDefaultTypeInternal _ClientType_default_instance_;
class Constants;
class ConstantsDefaultTypeInternal;
extern ConstantsDefaultTypeInternal _Constants_default_instance_;
class ObjectSource;
class ObjectSourceDefaultTypeInternal;
extern ObjectSourceDefaultTypeInternal _ObjectSource_default_instance_;
}  // namespace invalidation
}  // namespace ipc
PROTOBUF_NAMESPACE_OPEN
template<> ::ipc::invalidation::ClientType* Arena::CreateMaybeMessage<::ipc::invalidation::ClientType>(Arena*);
template<> ::ipc::invalidation::Constants* Arena::CreateMaybeMessage<::ipc::invalidation::Constants>(Arena*);
template<> ::ipc::invalidation::ObjectSource* Arena::CreateMaybeMessage<::ipc::invalidation::ObjectSource>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ipc {
namespace invalidation {

enum ClientType_Type : int {
  ClientType_Type_INTERNAL = 1,
  ClientType_Type_TEST = 2,
  ClientType_Type_DEMO = 4,
  ClientType_Type_CHROME_SYNC = 1004,
  ClientType_Type_CHROME_SYNC_ANDROID = 1018,
  ClientType_Type_CHROME_SYNC_IOS = 1038,
  ClientType_Type_CHROME_SYNC_GCM_DESKTOP = 1055,
  ClientType_Type_CHROME_SYNC_GCM_IOS = 1056
};
bool ClientType_Type_IsValid(int value);
constexpr ClientType_Type ClientType_Type_Type_MIN = ClientType_Type_INTERNAL;
constexpr ClientType_Type ClientType_Type_Type_MAX = ClientType_Type_CHROME_SYNC_GCM_IOS;
constexpr int ClientType_Type_Type_ARRAYSIZE = ClientType_Type_Type_MAX + 1;

const std::string& ClientType_Type_Name(ClientType_Type value);
template<typename T>
inline const std::string& ClientType_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientType_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientType_Type_Name.");
  return ClientType_Type_Name(static_cast<ClientType_Type>(enum_t_value));
}
bool ClientType_Type_Parse(
    const std::string& name, ClientType_Type* value);
enum ObjectSource_Type : int {
  ObjectSource_Type_INTERNAL = 1,
  ObjectSource_Type_TEST = 2,
  ObjectSource_Type_DEMO = 4,
  ObjectSource_Type_CHROME_SYNC = 1004,
  ObjectSource_Type_COSMO_CHANGELOG = 1014,
  ObjectSource_Type_CHROME_COMPONENTS = 1025,
  ObjectSource_Type_CHROME_PUSH_MESSAGING = 1030
};
bool ObjectSource_Type_IsValid(int value);
constexpr ObjectSource_Type ObjectSource_Type_Type_MIN = ObjectSource_Type_INTERNAL;
constexpr ObjectSource_Type ObjectSource_Type_Type_MAX = ObjectSource_Type_CHROME_PUSH_MESSAGING;
constexpr int ObjectSource_Type_Type_ARRAYSIZE = ObjectSource_Type_Type_MAX + 1;

const std::string& ObjectSource_Type_Name(ObjectSource_Type value);
template<typename T>
inline const std::string& ObjectSource_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectSource_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectSource_Type_Name.");
  return ObjectSource_Type_Name(static_cast<ObjectSource_Type>(enum_t_value));
}
bool ObjectSource_Type_Parse(
    const std::string& name, ObjectSource_Type* value);
enum Constants_ObjectVersion : int {
  Constants_ObjectVersion_UNKNOWN = 0
};
bool Constants_ObjectVersion_IsValid(int value);
constexpr Constants_ObjectVersion Constants_ObjectVersion_ObjectVersion_MIN = Constants_ObjectVersion_UNKNOWN;
constexpr Constants_ObjectVersion Constants_ObjectVersion_ObjectVersion_MAX = Constants_ObjectVersion_UNKNOWN;
constexpr int Constants_ObjectVersion_ObjectVersion_ARRAYSIZE = Constants_ObjectVersion_ObjectVersion_MAX + 1;

const std::string& Constants_ObjectVersion_Name(Constants_ObjectVersion value);
template<typename T>
inline const std::string& Constants_ObjectVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Constants_ObjectVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Constants_ObjectVersion_Name.");
  return Constants_ObjectVersion_Name(static_cast<Constants_ObjectVersion>(enum_t_value));
}
bool Constants_ObjectVersion_Parse(
    const std::string& name, Constants_ObjectVersion* value);
// ===================================================================

class ClientType :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.ClientType) */ {
 public:
  ClientType();
  virtual ~ClientType();

  ClientType(const ClientType& from);
  ClientType(ClientType&& from) noexcept
    : ClientType() {
    *this = ::std::move(from);
  }

  inline ClientType& operator=(const ClientType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientType& operator=(ClientType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientType* internal_default_instance() {
    return reinterpret_cast<const ClientType*>(
               &_ClientType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientType& a, ClientType& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientType* New() const final {
    return CreateMaybeMessage<ClientType>(nullptr);
  }

  ClientType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClientType& from);
  void MergeFrom(const ClientType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.ClientType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientType_Type Type;
  static constexpr Type INTERNAL =
    ClientType_Type_INTERNAL;
  static constexpr Type TEST =
    ClientType_Type_TEST;
  static constexpr Type DEMO =
    ClientType_Type_DEMO;
  static constexpr Type CHROME_SYNC =
    ClientType_Type_CHROME_SYNC;
  static constexpr Type CHROME_SYNC_ANDROID =
    ClientType_Type_CHROME_SYNC_ANDROID;
  static constexpr Type CHROME_SYNC_IOS =
    ClientType_Type_CHROME_SYNC_IOS;
  static constexpr Type CHROME_SYNC_GCM_DESKTOP =
    ClientType_Type_CHROME_SYNC_GCM_DESKTOP;
  static constexpr Type CHROME_SYNC_GCM_IOS =
    ClientType_Type_CHROME_SYNC_GCM_IOS;
  static inline bool Type_IsValid(int value) {
    return ClientType_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ClientType_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ClientType_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ClientType_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ClientType_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return ClientType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .ipc.invalidation.ClientType.Type type = 1;
  bool has_type() const;
  void clear_type();
  ::ipc::invalidation::ClientType_Type type() const;
  void set_type(::ipc::invalidation::ClientType_Type value);

  // @@protoc_insertion_point(class_scope:ipc.invalidation.ClientType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class ObjectSource :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.ObjectSource) */ {
 public:
  ObjectSource();
  virtual ~ObjectSource();

  ObjectSource(const ObjectSource& from);
  ObjectSource(ObjectSource&& from) noexcept
    : ObjectSource() {
    *this = ::std::move(from);
  }

  inline ObjectSource& operator=(const ObjectSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectSource& operator=(ObjectSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ObjectSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectSource* internal_default_instance() {
    return reinterpret_cast<const ObjectSource*>(
               &_ObjectSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectSource& a, ObjectSource& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectSource* New() const final {
    return CreateMaybeMessage<ObjectSource>(nullptr);
  }

  ObjectSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectSource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ObjectSource& from);
  void MergeFrom(const ObjectSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.ObjectSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ObjectSource_Type Type;
  static constexpr Type INTERNAL =
    ObjectSource_Type_INTERNAL;
  static constexpr Type TEST =
    ObjectSource_Type_TEST;
  static constexpr Type DEMO =
    ObjectSource_Type_DEMO;
  static constexpr Type CHROME_SYNC =
    ObjectSource_Type_CHROME_SYNC;
  static constexpr Type COSMO_CHANGELOG =
    ObjectSource_Type_COSMO_CHANGELOG;
  static constexpr Type CHROME_COMPONENTS =
    ObjectSource_Type_CHROME_COMPONENTS;
  static constexpr Type CHROME_PUSH_MESSAGING =
    ObjectSource_Type_CHROME_PUSH_MESSAGING;
  static inline bool Type_IsValid(int value) {
    return ObjectSource_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ObjectSource_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ObjectSource_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ObjectSource_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ObjectSource_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return ObjectSource_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .ipc.invalidation.ObjectSource.Type type = 1;
  bool has_type() const;
  void clear_type();
  ::ipc::invalidation::ObjectSource_Type type() const;
  void set_type(::ipc::invalidation::ObjectSource_Type value);

  // @@protoc_insertion_point(class_scope:ipc.invalidation.ObjectSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Constants :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.Constants) */ {
 public:
  Constants();
  virtual ~Constants();

  Constants(const Constants& from);
  Constants(Constants&& from) noexcept
    : Constants() {
    *this = ::std::move(from);
  }

  inline Constants& operator=(const Constants& from) {
    CopyFrom(from);
    return *this;
  }
  inline Constants& operator=(Constants&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Constants& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Constants* internal_default_instance() {
    return reinterpret_cast<const Constants*>(
               &_Constants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Constants& a, Constants& b) {
    a.Swap(&b);
  }
  inline void Swap(Constants* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Constants* New() const final {
    return CreateMaybeMessage<Constants>(nullptr);
  }

  Constants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Constants>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Constants& from);
  void MergeFrom(const Constants& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Constants* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.Constants";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Constants_ObjectVersion ObjectVersion;
  static constexpr ObjectVersion UNKNOWN =
    Constants_ObjectVersion_UNKNOWN;
  static inline bool ObjectVersion_IsValid(int value) {
    return Constants_ObjectVersion_IsValid(value);
  }
  static constexpr ObjectVersion ObjectVersion_MIN =
    Constants_ObjectVersion_ObjectVersion_MIN;
  static constexpr ObjectVersion ObjectVersion_MAX =
    Constants_ObjectVersion_ObjectVersion_MAX;
  static constexpr int ObjectVersion_ARRAYSIZE =
    Constants_ObjectVersion_ObjectVersion_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ObjectVersion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjectVersion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjectVersion_Name.");
    return Constants_ObjectVersion_Name(enum_t_value);
  }
  static inline bool ObjectVersion_Parse(const std::string& name,
      ObjectVersion* value) {
    return Constants_ObjectVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipc.invalidation.Constants)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientType

// optional .ipc.invalidation.ClientType.Type type = 1;
inline bool ClientType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientType::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ipc::invalidation::ClientType_Type ClientType::type() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.ClientType.type)
  return static_cast< ::ipc::invalidation::ClientType_Type >(type_);
}
inline void ClientType::set_type(::ipc::invalidation::ClientType_Type value) {
  assert(::ipc::invalidation::ClientType_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:ipc.invalidation.ClientType.type)
}

// -------------------------------------------------------------------

// ObjectSource

// optional .ipc.invalidation.ObjectSource.Type type = 1;
inline bool ObjectSource::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectSource::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ipc::invalidation::ObjectSource_Type ObjectSource::type() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.ObjectSource.type)
  return static_cast< ::ipc::invalidation::ObjectSource_Type >(type_);
}
inline void ObjectSource::set_type(::ipc::invalidation::ObjectSource_Type value) {
  assert(::ipc::invalidation::ObjectSource_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:ipc.invalidation.ObjectSource.type)
}

// -------------------------------------------------------------------

// Constants

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace invalidation
}  // namespace ipc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ipc::invalidation::ClientType_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::ipc::invalidation::ObjectSource_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::ipc::invalidation::Constants_ObjectVersion> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto
