// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ipc {
namespace invalidation {
class ClientTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientType> _instance;
} _ClientType_default_instance_;
class ObjectSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectSource> _instance;
} _ObjectSource_default_instance_;
class ConstantsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Constants> _instance;
} _Constants_default_instance_;
}  // namespace invalidation
}  // namespace ipc
static void InitDefaultsscc_info_ClientType_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc::invalidation::_ClientType_default_instance_;
    new (ptr) ::ipc::invalidation::ClientType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipc::invalidation::ClientType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientType_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientType_types_2eproto}, {}};

static void InitDefaultsscc_info_Constants_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc::invalidation::_Constants_default_instance_;
    new (ptr) ::ipc::invalidation::Constants();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipc::invalidation::Constants::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Constants_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Constants_types_2eproto}, {}};

static void InitDefaultsscc_info_ObjectSource_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc::invalidation::_ObjectSource_default_instance_;
    new (ptr) ::ipc::invalidation::ObjectSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipc::invalidation::ObjectSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectSource_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ObjectSource_types_2eproto}, {}};

namespace ipc {
namespace invalidation {
bool ClientType_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 1004:
    case 1018:
    case 1038:
    case 1055:
    case 1056:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientType_Type_strings[8] = {};

static const char ClientType_Type_names[] =
  "CHROME_SYNC"
  "CHROME_SYNC_ANDROID"
  "CHROME_SYNC_GCM_DESKTOP"
  "CHROME_SYNC_GCM_IOS"
  "CHROME_SYNC_IOS"
  "DEMO"
  "INTERNAL"
  "TEST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientType_Type_entries[] = {
  { {ClientType_Type_names + 0, 11}, 1004 },
  { {ClientType_Type_names + 11, 19}, 1018 },
  { {ClientType_Type_names + 30, 23}, 1055 },
  { {ClientType_Type_names + 53, 19}, 1056 },
  { {ClientType_Type_names + 72, 15}, 1038 },
  { {ClientType_Type_names + 87, 4}, 4 },
  { {ClientType_Type_names + 91, 8}, 1 },
  { {ClientType_Type_names + 99, 4}, 2 },
};

static const int ClientType_Type_entries_by_number[] = {
  6, // 1 -> INTERNAL
  7, // 2 -> TEST
  5, // 4 -> DEMO
  0, // 1004 -> CHROME_SYNC
  1, // 1018 -> CHROME_SYNC_ANDROID
  4, // 1038 -> CHROME_SYNC_IOS
  2, // 1055 -> CHROME_SYNC_GCM_DESKTOP
  3, // 1056 -> CHROME_SYNC_GCM_IOS
};

const std::string& ClientType_Type_Name(
    ClientType_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientType_Type_entries,
          ClientType_Type_entries_by_number,
          8, ClientType_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientType_Type_entries,
      ClientType_Type_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientType_Type_strings[idx].get();
}
bool ClientType_Type_Parse(
    const std::string& name, ClientType_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientType_Type_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<ClientType_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientType_Type ClientType::INTERNAL;
constexpr ClientType_Type ClientType::TEST;
constexpr ClientType_Type ClientType::DEMO;
constexpr ClientType_Type ClientType::CHROME_SYNC;
constexpr ClientType_Type ClientType::CHROME_SYNC_ANDROID;
constexpr ClientType_Type ClientType::CHROME_SYNC_IOS;
constexpr ClientType_Type ClientType::CHROME_SYNC_GCM_DESKTOP;
constexpr ClientType_Type ClientType::CHROME_SYNC_GCM_IOS;
constexpr ClientType_Type ClientType::Type_MIN;
constexpr ClientType_Type ClientType::Type_MAX;
constexpr int ClientType::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ObjectSource_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 1004:
    case 1014:
    case 1025:
    case 1030:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ObjectSource_Type_strings[7] = {};

static const char ObjectSource_Type_names[] =
  "CHROME_COMPONENTS"
  "CHROME_PUSH_MESSAGING"
  "CHROME_SYNC"
  "COSMO_CHANGELOG"
  "DEMO"
  "INTERNAL"
  "TEST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ObjectSource_Type_entries[] = {
  { {ObjectSource_Type_names + 0, 17}, 1025 },
  { {ObjectSource_Type_names + 17, 21}, 1030 },
  { {ObjectSource_Type_names + 38, 11}, 1004 },
  { {ObjectSource_Type_names + 49, 15}, 1014 },
  { {ObjectSource_Type_names + 64, 4}, 4 },
  { {ObjectSource_Type_names + 68, 8}, 1 },
  { {ObjectSource_Type_names + 76, 4}, 2 },
};

static const int ObjectSource_Type_entries_by_number[] = {
  5, // 1 -> INTERNAL
  6, // 2 -> TEST
  4, // 4 -> DEMO
  2, // 1004 -> CHROME_SYNC
  3, // 1014 -> COSMO_CHANGELOG
  0, // 1025 -> CHROME_COMPONENTS
  1, // 1030 -> CHROME_PUSH_MESSAGING
};

const std::string& ObjectSource_Type_Name(
    ObjectSource_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ObjectSource_Type_entries,
          ObjectSource_Type_entries_by_number,
          7, ObjectSource_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ObjectSource_Type_entries,
      ObjectSource_Type_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ObjectSource_Type_strings[idx].get();
}
bool ObjectSource_Type_Parse(
    const std::string& name, ObjectSource_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ObjectSource_Type_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<ObjectSource_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObjectSource_Type ObjectSource::INTERNAL;
constexpr ObjectSource_Type ObjectSource::TEST;
constexpr ObjectSource_Type ObjectSource::DEMO;
constexpr ObjectSource_Type ObjectSource::CHROME_SYNC;
constexpr ObjectSource_Type ObjectSource::COSMO_CHANGELOG;
constexpr ObjectSource_Type ObjectSource::CHROME_COMPONENTS;
constexpr ObjectSource_Type ObjectSource::CHROME_PUSH_MESSAGING;
constexpr ObjectSource_Type ObjectSource::Type_MIN;
constexpr ObjectSource_Type ObjectSource::Type_MAX;
constexpr int ObjectSource::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Constants_ObjectVersion_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Constants_ObjectVersion_strings[1] = {};

static const char Constants_ObjectVersion_names[] =
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Constants_ObjectVersion_entries[] = {
  { {Constants_ObjectVersion_names + 0, 7}, 0 },
};

static const int Constants_ObjectVersion_entries_by_number[] = {
  0, // 0 -> UNKNOWN
};

const std::string& Constants_ObjectVersion_Name(
    Constants_ObjectVersion value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Constants_ObjectVersion_entries,
          Constants_ObjectVersion_entries_by_number,
          1, Constants_ObjectVersion_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Constants_ObjectVersion_entries,
      Constants_ObjectVersion_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Constants_ObjectVersion_strings[idx].get();
}
bool Constants_ObjectVersion_Parse(
    const std::string& name, Constants_ObjectVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Constants_ObjectVersion_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<Constants_ObjectVersion>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Constants_ObjectVersion Constants::UNKNOWN;
constexpr Constants_ObjectVersion Constants::ObjectVersion_MIN;
constexpr Constants_ObjectVersion Constants::ObjectVersion_MAX;
constexpr int Constants::ObjectVersion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientType::InitAsDefaultInstance() {
}
class ClientType::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientType>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientType::ClientType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.ClientType)
}
ClientType::ClientType(const ClientType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.ClientType)
}

void ClientType::SharedCtor() {
  type_ = 1;
}

ClientType::~ClientType() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.ClientType)
  SharedDtor();
}

void ClientType::SharedDtor() {
}

void ClientType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientType& ClientType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientType_types_2eproto.base);
  return *internal_default_instance();
}


void ClientType::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.ClientType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ipc.invalidation.ClientType.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ipc::invalidation::ClientType_Type_IsValid(val))) {
            set_type(static_cast<::ipc::invalidation::ClientType_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.ClientType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.invalidation.ClientType.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ipc::invalidation::ClientType_Type_IsValid(value)) {
            set_type(static_cast< ::ipc::invalidation::ClientType_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.ClientType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.ClientType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.ClientType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ipc.invalidation.ClientType.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.ClientType)
}

size_t ClientType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.ClientType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ipc.invalidation.ClientType.Type type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientType*>(
      &from));
}

void ClientType::MergeFrom(const ClientType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.ClientType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void ClientType::CopyFrom(const ClientType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.ClientType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientType::IsInitialized() const {
  return true;
}

void ClientType::InternalSwap(ClientType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

std::string ClientType::GetTypeName() const {
  return "ipc.invalidation.ClientType";
}


// ===================================================================

void ObjectSource::InitAsDefaultInstance() {
}
class ObjectSource::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectSource>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObjectSource::ObjectSource()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.ObjectSource)
}
ObjectSource::ObjectSource(const ObjectSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.ObjectSource)
}

void ObjectSource::SharedCtor() {
  type_ = 1;
}

ObjectSource::~ObjectSource() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.ObjectSource)
  SharedDtor();
}

void ObjectSource::SharedDtor() {
}

void ObjectSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectSource& ObjectSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectSource_types_2eproto.base);
  return *internal_default_instance();
}


void ObjectSource::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.ObjectSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ipc.invalidation.ObjectSource.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ipc::invalidation::ObjectSource_Type_IsValid(val))) {
            set_type(static_cast<::ipc::invalidation::ObjectSource_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectSource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.ObjectSource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.invalidation.ObjectSource.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ipc::invalidation::ObjectSource_Type_IsValid(value)) {
            set_type(static_cast< ::ipc::invalidation::ObjectSource_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.ObjectSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.ObjectSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectSource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.ObjectSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ipc.invalidation.ObjectSource.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.ObjectSource)
}

size_t ObjectSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.ObjectSource)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ipc.invalidation.ObjectSource.Type type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ObjectSource*>(
      &from));
}

void ObjectSource::MergeFrom(const ObjectSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.ObjectSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void ObjectSource::CopyFrom(const ObjectSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.ObjectSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSource::IsInitialized() const {
  return true;
}

void ObjectSource::InternalSwap(ObjectSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

std::string ObjectSource::GetTypeName() const {
  return "ipc.invalidation.ObjectSource";
}


// ===================================================================

void Constants::InitAsDefaultInstance() {
}
class Constants::_Internal {
 public:
  using HasBits = decltype(std::declval<Constants>()._has_bits_);
};

Constants::Constants()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.Constants)
}
Constants::Constants(const Constants& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.Constants)
}

void Constants::SharedCtor() {
}

Constants::~Constants() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.Constants)
  SharedDtor();
}

void Constants::SharedDtor() {
}

void Constants::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Constants& Constants::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Constants_types_2eproto.base);
  return *internal_default_instance();
}


void Constants::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.Constants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Constants::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Constants::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.Constants)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.Constants)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.Constants)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Constants::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.Constants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.Constants)
}

size_t Constants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.Constants)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Constants::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Constants*>(
      &from));
}

void Constants::MergeFrom(const Constants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.Constants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Constants::CopyFrom(const Constants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.Constants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constants::IsInitialized() const {
  return true;
}

void Constants::InternalSwap(Constants* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string Constants::GetTypeName() const {
  return "ipc.invalidation.Constants";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace invalidation
}  // namespace ipc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ipc::invalidation::ClientType* Arena::CreateMaybeMessage< ::ipc::invalidation::ClientType >(Arena* arena) {
  return Arena::CreateInternal< ::ipc::invalidation::ClientType >(arena);
}
template<> PROTOBUF_NOINLINE ::ipc::invalidation::ObjectSource* Arena::CreateMaybeMessage< ::ipc::invalidation::ObjectSource >(Arena* arena) {
  return Arena::CreateInternal< ::ipc::invalidation::ObjectSource >(arena);
}
template<> PROTOBUF_NOINLINE ::ipc::invalidation::Constants* Arena::CreateMaybeMessage< ::ipc::invalidation::Constants >(Arena* arena) {
  return Arena::CreateInternal< ::ipc::invalidation::Constants >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
