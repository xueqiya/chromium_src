// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_test_internal.proto

#include "client_test_internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_client_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectIdP_client_5fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegistrationSummary_client_5fprotocol_2eproto;
namespace ipc {
namespace invalidation {
class RegistrationManagerStatePDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegistrationManagerStateP> _instance;
} _RegistrationManagerStateP_default_instance_;
}  // namespace invalidation
}  // namespace ipc
static void InitDefaultsscc_info_RegistrationManagerStateP_client_5ftest_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc::invalidation::_RegistrationManagerStateP_default_instance_;
    new (ptr) ::ipc::invalidation::RegistrationManagerStateP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipc::invalidation::RegistrationManagerStateP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegistrationManagerStateP_client_5ftest_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegistrationManagerStateP_client_5ftest_5finternal_2eproto}, {
      &scc_info_RegistrationSummary_client_5fprotocol_2eproto.base,
      &scc_info_ObjectIdP_client_5fprotocol_2eproto.base,}};

namespace ipc {
namespace invalidation {

// ===================================================================

void RegistrationManagerStateP::InitAsDefaultInstance() {
  ::ipc::invalidation::_RegistrationManagerStateP_default_instance_._instance.get_mutable()->client_summary_ = const_cast< ::ipc::invalidation::RegistrationSummary*>(
      ::ipc::invalidation::RegistrationSummary::internal_default_instance());
  ::ipc::invalidation::_RegistrationManagerStateP_default_instance_._instance.get_mutable()->server_summary_ = const_cast< ::ipc::invalidation::RegistrationSummary*>(
      ::ipc::invalidation::RegistrationSummary::internal_default_instance());
}
class RegistrationManagerStateP::_Internal {
 public:
  using HasBits = decltype(std::declval<RegistrationManagerStateP>()._has_bits_);
  static const ::ipc::invalidation::RegistrationSummary& client_summary(const RegistrationManagerStateP* msg);
  static void set_has_client_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ipc::invalidation::RegistrationSummary& server_summary(const RegistrationManagerStateP* msg);
  static void set_has_server_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ipc::invalidation::RegistrationSummary&
RegistrationManagerStateP::_Internal::client_summary(const RegistrationManagerStateP* msg) {
  return *msg->client_summary_;
}
const ::ipc::invalidation::RegistrationSummary&
RegistrationManagerStateP::_Internal::server_summary(const RegistrationManagerStateP* msg) {
  return *msg->server_summary_;
}
void RegistrationManagerStateP::clear_client_summary() {
  if (client_summary_ != nullptr) client_summary_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RegistrationManagerStateP::clear_server_summary() {
  if (server_summary_ != nullptr) server_summary_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RegistrationManagerStateP::clear_registered_objects() {
  registered_objects_.Clear();
}
RegistrationManagerStateP::RegistrationManagerStateP()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.RegistrationManagerStateP)
}
RegistrationManagerStateP::RegistrationManagerStateP(const RegistrationManagerStateP& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      registered_objects_(from.registered_objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_client_summary()) {
    client_summary_ = new ::ipc::invalidation::RegistrationSummary(*from.client_summary_);
  } else {
    client_summary_ = nullptr;
  }
  if (from.has_server_summary()) {
    server_summary_ = new ::ipc::invalidation::RegistrationSummary(*from.server_summary_);
  } else {
    server_summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.RegistrationManagerStateP)
}

void RegistrationManagerStateP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegistrationManagerStateP_client_5ftest_5finternal_2eproto.base);
  ::memset(&client_summary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_summary_) -
      reinterpret_cast<char*>(&client_summary_)) + sizeof(server_summary_));
}

RegistrationManagerStateP::~RegistrationManagerStateP() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.RegistrationManagerStateP)
  SharedDtor();
}

void RegistrationManagerStateP::SharedDtor() {
  if (this != internal_default_instance()) delete client_summary_;
  if (this != internal_default_instance()) delete server_summary_;
}

void RegistrationManagerStateP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistrationManagerStateP& RegistrationManagerStateP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegistrationManagerStateP_client_5ftest_5finternal_2eproto.base);
  return *internal_default_instance();
}


void RegistrationManagerStateP::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.RegistrationManagerStateP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  registered_objects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(client_summary_ != nullptr);
      client_summary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(server_summary_ != nullptr);
      server_summary_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegistrationManagerStateP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ipc.invalidation.RegistrationSummary client_summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_client_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ipc.invalidation.RegistrationSummary server_summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_server_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ipc.invalidation.ObjectIdP registered_objects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_registered_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegistrationManagerStateP::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.RegistrationManagerStateP)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.invalidation.RegistrationSummary client_summary = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_client_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ipc.invalidation.RegistrationSummary server_summary = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ipc.invalidation.ObjectIdP registered_objects = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_registered_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.RegistrationManagerStateP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.RegistrationManagerStateP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegistrationManagerStateP::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.RegistrationManagerStateP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ipc.invalidation.RegistrationSummary client_summary = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::client_summary(this), output);
  }

  // optional .ipc.invalidation.RegistrationSummary server_summary = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::server_summary(this), output);
  }

  // repeated .ipc.invalidation.ObjectIdP registered_objects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->registered_objects_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->registered_objects(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.RegistrationManagerStateP)
}

size_t RegistrationManagerStateP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.RegistrationManagerStateP)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ipc.invalidation.ObjectIdP registered_objects = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->registered_objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->registered_objects(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ipc.invalidation.RegistrationSummary client_summary = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_summary_);
    }

    // optional .ipc.invalidation.RegistrationSummary server_summary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_summary_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistrationManagerStateP::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RegistrationManagerStateP*>(
      &from));
}

void RegistrationManagerStateP::MergeFrom(const RegistrationManagerStateP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.RegistrationManagerStateP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  registered_objects_.MergeFrom(from.registered_objects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_client_summary()->::ipc::invalidation::RegistrationSummary::MergeFrom(from.client_summary());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_server_summary()->::ipc::invalidation::RegistrationSummary::MergeFrom(from.server_summary());
    }
  }
}

void RegistrationManagerStateP::CopyFrom(const RegistrationManagerStateP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.RegistrationManagerStateP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationManagerStateP::IsInitialized() const {
  return true;
}

void RegistrationManagerStateP::InternalSwap(RegistrationManagerStateP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&registered_objects_)->InternalSwap(CastToBase(&other->registered_objects_));
  swap(client_summary_, other->client_summary_);
  swap(server_summary_, other->server_summary_);
}

std::string RegistrationManagerStateP::GetTypeName() const {
  return "ipc.invalidation.RegistrationManagerStateP";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace invalidation
}  // namespace ipc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ipc::invalidation::RegistrationManagerStateP* Arena::CreateMaybeMessage< ::ipc::invalidation::RegistrationManagerStateP >(Arena* arena) {
  return Arena::CreateInternal< ::ipc::invalidation::RegistrationManagerStateP >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
