// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/gamepad/GamepadList

#ifndef org_chromium_device_gamepad_GamepadList_JNI
#define org_chromium_device_gamepad_GamepadList_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_device_gamepad_GamepadList[];
const char kClassPath_org_chromium_device_gamepad_GamepadList[] =
    "org/chromium/device/gamepad/GamepadList";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_device_gamepad_GamepadList_clazz(nullptr);
#ifndef org_chromium_device_gamepad_GamepadList_clazz_defined
#define org_chromium_device_gamepad_GamepadList_clazz_defined
inline jclass org_chromium_device_gamepad_GamepadList_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_device_gamepad_GamepadList,
      &g_org_chromium_device_gamepad_GamepadList_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace device {

static void JNI_GamepadList_SetGamepadData(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    jlong webGamepadsPtr,
    jint index,
    jboolean mapping,
    jboolean connected,
    const base::android::JavaParamRef<jstring>& devicename,
    jlong timestamp,
    const base::android::JavaParamRef<jfloatArray>& axes,
    const base::android::JavaParamRef<jfloatArray>& buttons);

JNI_GENERATOR_EXPORT void Java_J_N_MOkngxPY(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong webGamepadsPtr,
    jint index,
    jboolean mapping,
    jboolean connected,
    jstring devicename,
    jlong timestamp,
    jfloatArray axes,
    jfloatArray buttons) {
  return JNI_GamepadList_SetGamepadData(env, base::android::JavaParamRef<jobject>(env, caller),
      webGamepadsPtr, index, mapping, connected, base::android::JavaParamRef<jstring>(env,
      devicename), timestamp, base::android::JavaParamRef<jfloatArray>(env, axes),
      base::android::JavaParamRef<jfloatArray>(env, buttons));
}


static std::atomic<jmethodID> g_org_chromium_device_gamepad_GamepadList_updateGamepadData(nullptr);
static void Java_GamepadList_updateGamepadData(JNIEnv* env, jlong webGamepadsPtr) {
  jclass clazz = org_chromium_device_gamepad_GamepadList_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_device_gamepad_GamepadList_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "updateGamepadData",
          "(J)V",
          &g_org_chromium_device_gamepad_GamepadList_updateGamepadData);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, webGamepadsPtr);
}

static std::atomic<jmethodID>
    g_org_chromium_device_gamepad_GamepadList_setGamepadAPIActive(nullptr);
static void Java_GamepadList_setGamepadAPIActive(JNIEnv* env, jboolean isActive) {
  jclass clazz = org_chromium_device_gamepad_GamepadList_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_device_gamepad_GamepadList_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setGamepadAPIActive",
          "(Z)V",
          &g_org_chromium_device_gamepad_GamepadList_setGamepadAPIActive);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, isActive);
}

}  // namespace device

// Step 4: Generated test functions (optional).


#endif  // org_chromium_device_gamepad_GamepadList_JNI
