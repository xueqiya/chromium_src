// device/vr/public/mojom/browser_test_interfaces.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_PARAMS_DATA_H_
#define DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace device_test {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_OnFrameSubmitted_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_OnFrameSubmitted_Params_Data));
      new (data()) XRTestHook_OnFrameSubmitted_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_OnFrameSubmitted_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_OnFrameSubmitted_Params_Data>(index_);
    }
    XRTestHook_OnFrameSubmitted_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SubmittedFrameData_Data> frame_data;

 private:
  XRTestHook_OnFrameSubmitted_Params_Data();
  ~XRTestHook_OnFrameSubmitted_Params_Data() = delete;
};
static_assert(sizeof(XRTestHook_OnFrameSubmitted_Params_Data) == 16,
              "Bad sizeof(XRTestHook_OnFrameSubmitted_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_OnFrameSubmitted_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_OnFrameSubmitted_ResponseParams_Data));
      new (data()) XRTestHook_OnFrameSubmitted_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_OnFrameSubmitted_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_OnFrameSubmitted_ResponseParams_Data>(index_);
    }
    XRTestHook_OnFrameSubmitted_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  XRTestHook_OnFrameSubmitted_ResponseParams_Data();
  ~XRTestHook_OnFrameSubmitted_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRTestHook_OnFrameSubmitted_ResponseParams_Data) == 8,
              "Bad sizeof(XRTestHook_OnFrameSubmitted_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetDeviceConfig_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetDeviceConfig_Params_Data));
      new (data()) XRTestHook_WaitGetDeviceConfig_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetDeviceConfig_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetDeviceConfig_Params_Data>(index_);
    }
    XRTestHook_WaitGetDeviceConfig_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  XRTestHook_WaitGetDeviceConfig_Params_Data();
  ~XRTestHook_WaitGetDeviceConfig_Params_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetDeviceConfig_Params_Data) == 8,
              "Bad sizeof(XRTestHook_WaitGetDeviceConfig_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetDeviceConfig_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetDeviceConfig_ResponseParams_Data));
      new (data()) XRTestHook_WaitGetDeviceConfig_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetDeviceConfig_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetDeviceConfig_ResponseParams_Data>(index_);
    }
    XRTestHook_WaitGetDeviceConfig_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::DeviceConfig_Data> config;

 private:
  XRTestHook_WaitGetDeviceConfig_ResponseParams_Data();
  ~XRTestHook_WaitGetDeviceConfig_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetDeviceConfig_ResponseParams_Data) == 16,
              "Bad sizeof(XRTestHook_WaitGetDeviceConfig_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetPresentingPose_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetPresentingPose_Params_Data));
      new (data()) XRTestHook_WaitGetPresentingPose_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetPresentingPose_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetPresentingPose_Params_Data>(index_);
    }
    XRTestHook_WaitGetPresentingPose_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  XRTestHook_WaitGetPresentingPose_Params_Data();
  ~XRTestHook_WaitGetPresentingPose_Params_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetPresentingPose_Params_Data) == 8,
              "Bad sizeof(XRTestHook_WaitGetPresentingPose_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetPresentingPose_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetPresentingPose_ResponseParams_Data));
      new (data()) XRTestHook_WaitGetPresentingPose_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetPresentingPose_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetPresentingPose_ResponseParams_Data>(index_);
    }
    XRTestHook_WaitGetPresentingPose_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PoseFrameData_Data> data;

 private:
  XRTestHook_WaitGetPresentingPose_ResponseParams_Data();
  ~XRTestHook_WaitGetPresentingPose_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetPresentingPose_ResponseParams_Data) == 16,
              "Bad sizeof(XRTestHook_WaitGetPresentingPose_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetMagicWindowPose_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetMagicWindowPose_Params_Data));
      new (data()) XRTestHook_WaitGetMagicWindowPose_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetMagicWindowPose_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetMagicWindowPose_Params_Data>(index_);
    }
    XRTestHook_WaitGetMagicWindowPose_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  XRTestHook_WaitGetMagicWindowPose_Params_Data();
  ~XRTestHook_WaitGetMagicWindowPose_Params_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetMagicWindowPose_Params_Data) == 8,
              "Bad sizeof(XRTestHook_WaitGetMagicWindowPose_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data));
      new (data()) XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data>(index_);
    }
    XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PoseFrameData_Data> data;

 private:
  XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data();
  ~XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data) == 16,
              "Bad sizeof(XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data));
      new (data()) XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data>(index_);
    }
    XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t index;
  uint8_t padfinal_[4];

 private:
  XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data();
  ~XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data) == 16,
              "Bad sizeof(XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data));
      new (data()) XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data>(index_);
    }
    XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t role;
  uint8_t padfinal_[4];

 private:
  XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data();
  ~XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data) == 16,
              "Bad sizeof(XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetTrackedDeviceClass_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetTrackedDeviceClass_Params_Data));
      new (data()) XRTestHook_WaitGetTrackedDeviceClass_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetTrackedDeviceClass_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetTrackedDeviceClass_Params_Data>(index_);
    }
    XRTestHook_WaitGetTrackedDeviceClass_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t index;
  uint8_t padfinal_[4];

 private:
  XRTestHook_WaitGetTrackedDeviceClass_Params_Data();
  ~XRTestHook_WaitGetTrackedDeviceClass_Params_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetTrackedDeviceClass_Params_Data) == 16,
              "Bad sizeof(XRTestHook_WaitGetTrackedDeviceClass_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data));
      new (data()) XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data>(index_);
    }
    XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t device_class;
  uint8_t padfinal_[4];

 private:
  XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data();
  ~XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data) == 16,
              "Bad sizeof(XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetControllerData_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetControllerData_Params_Data));
      new (data()) XRTestHook_WaitGetControllerData_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetControllerData_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetControllerData_Params_Data>(index_);
    }
    XRTestHook_WaitGetControllerData_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t index;
  uint8_t padfinal_[4];

 private:
  XRTestHook_WaitGetControllerData_Params_Data();
  ~XRTestHook_WaitGetControllerData_Params_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetControllerData_Params_Data) == 16,
              "Bad sizeof(XRTestHook_WaitGetControllerData_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetControllerData_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetControllerData_ResponseParams_Data));
      new (data()) XRTestHook_WaitGetControllerData_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetControllerData_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetControllerData_ResponseParams_Data>(index_);
    }
    XRTestHook_WaitGetControllerData_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ControllerFrameData_Data> data;

 private:
  XRTestHook_WaitGetControllerData_ResponseParams_Data();
  ~XRTestHook_WaitGetControllerData_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetControllerData_ResponseParams_Data) == 16,
              "Bad sizeof(XRTestHook_WaitGetControllerData_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetEventData_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetEventData_Params_Data));
      new (data()) XRTestHook_WaitGetEventData_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetEventData_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetEventData_Params_Data>(index_);
    }
    XRTestHook_WaitGetEventData_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  XRTestHook_WaitGetEventData_Params_Data();
  ~XRTestHook_WaitGetEventData_Params_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetEventData_Params_Data) == 8,
              "Bad sizeof(XRTestHook_WaitGetEventData_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRTestHook_WaitGetEventData_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRTestHook_WaitGetEventData_ResponseParams_Data));
      new (data()) XRTestHook_WaitGetEventData_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRTestHook_WaitGetEventData_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRTestHook_WaitGetEventData_ResponseParams_Data>(index_);
    }
    XRTestHook_WaitGetEventData_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::EventData_Data> data;

 private:
  XRTestHook_WaitGetEventData_ResponseParams_Data();
  ~XRTestHook_WaitGetEventData_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRTestHook_WaitGetEventData_ResponseParams_Data) == 16,
              "Bad sizeof(XRTestHook_WaitGetEventData_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRServiceTestHook_SetTestHook_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRServiceTestHook_SetTestHook_Params_Data));
      new (data()) XRServiceTestHook_SetTestHook_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRServiceTestHook_SetTestHook_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRServiceTestHook_SetTestHook_Params_Data>(index_);
    }
    XRServiceTestHook_SetTestHook_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data hook;

 private:
  XRServiceTestHook_SetTestHook_Params_Data();
  ~XRServiceTestHook_SetTestHook_Params_Data() = delete;
};
static_assert(sizeof(XRServiceTestHook_SetTestHook_Params_Data) == 16,
              "Bad sizeof(XRServiceTestHook_SetTestHook_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRServiceTestHook_SetTestHook_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRServiceTestHook_SetTestHook_ResponseParams_Data));
      new (data()) XRServiceTestHook_SetTestHook_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRServiceTestHook_SetTestHook_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRServiceTestHook_SetTestHook_ResponseParams_Data>(index_);
    }
    XRServiceTestHook_SetTestHook_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  XRServiceTestHook_SetTestHook_ResponseParams_Data();
  ~XRServiceTestHook_SetTestHook_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRServiceTestHook_SetTestHook_ResponseParams_Data) == 8,
              "Bad sizeof(XRServiceTestHook_SetTestHook_ResponseParams_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data));
      new (data()) XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data>(index_);
    }
    XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data();
  ~XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data() = delete;
};
static_assert(sizeof(XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data) == 8,
              "Bad sizeof(XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data)");
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS_SHARED) XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data));
      new (data()) XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data>(index_);
    }
    XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data();
  ~XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data)");

}  // namespace internal
class XRTestHook_OnFrameSubmitted_ParamsDataView {
 public:
  XRTestHook_OnFrameSubmitted_ParamsDataView() {}

  XRTestHook_OnFrameSubmitted_ParamsDataView(
      internal::XRTestHook_OnFrameSubmitted_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFrameDataDataView(
      SubmittedFrameDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrameData(UserType* output) {
    auto* pointer = data_->frame_data.Get();
    return mojo::internal::Deserialize<::device_test::mojom::SubmittedFrameDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::XRTestHook_OnFrameSubmitted_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class XRTestHook_OnFrameSubmitted_ResponseParamsDataView {
 public:
  XRTestHook_OnFrameSubmitted_ResponseParamsDataView() {}

  XRTestHook_OnFrameSubmitted_ResponseParamsDataView(
      internal::XRTestHook_OnFrameSubmitted_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRTestHook_OnFrameSubmitted_ResponseParams_Data* data_ = nullptr;
};

class XRTestHook_WaitGetDeviceConfig_ParamsDataView {
 public:
  XRTestHook_WaitGetDeviceConfig_ParamsDataView() {}

  XRTestHook_WaitGetDeviceConfig_ParamsDataView(
      internal::XRTestHook_WaitGetDeviceConfig_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRTestHook_WaitGetDeviceConfig_Params_Data* data_ = nullptr;
};

class XRTestHook_WaitGetDeviceConfig_ResponseParamsDataView {
 public:
  XRTestHook_WaitGetDeviceConfig_ResponseParamsDataView() {}

  XRTestHook_WaitGetDeviceConfig_ResponseParamsDataView(
      internal::XRTestHook_WaitGetDeviceConfig_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetConfigDataView(
      DeviceConfigDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadConfig(UserType* output) {
    auto* pointer = data_->config.Get();
    return mojo::internal::Deserialize<::device_test::mojom::DeviceConfigDataView>(
        pointer, output, context_);
  }
 private:
  internal::XRTestHook_WaitGetDeviceConfig_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class XRTestHook_WaitGetPresentingPose_ParamsDataView {
 public:
  XRTestHook_WaitGetPresentingPose_ParamsDataView() {}

  XRTestHook_WaitGetPresentingPose_ParamsDataView(
      internal::XRTestHook_WaitGetPresentingPose_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRTestHook_WaitGetPresentingPose_Params_Data* data_ = nullptr;
};

class XRTestHook_WaitGetPresentingPose_ResponseParamsDataView {
 public:
  XRTestHook_WaitGetPresentingPose_ResponseParamsDataView() {}

  XRTestHook_WaitGetPresentingPose_ResponseParamsDataView(
      internal::XRTestHook_WaitGetPresentingPose_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      PoseFrameDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::device_test::mojom::PoseFrameDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::XRTestHook_WaitGetPresentingPose_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class XRTestHook_WaitGetMagicWindowPose_ParamsDataView {
 public:
  XRTestHook_WaitGetMagicWindowPose_ParamsDataView() {}

  XRTestHook_WaitGetMagicWindowPose_ParamsDataView(
      internal::XRTestHook_WaitGetMagicWindowPose_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRTestHook_WaitGetMagicWindowPose_Params_Data* data_ = nullptr;
};

class XRTestHook_WaitGetMagicWindowPose_ResponseParamsDataView {
 public:
  XRTestHook_WaitGetMagicWindowPose_ResponseParamsDataView() {}

  XRTestHook_WaitGetMagicWindowPose_ResponseParamsDataView(
      internal::XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      PoseFrameDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::device_test::mojom::PoseFrameDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::XRTestHook_WaitGetMagicWindowPose_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ParamsDataView {
 public:
  XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ParamsDataView() {}

  XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ParamsDataView(
      internal::XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t index() const {
    return data_->index;
  }
 private:
  internal::XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_Params_Data* data_ = nullptr;
};

class XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParamsDataView {
 public:
  XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParamsDataView() {}

  XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParamsDataView(
      internal::XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRole(UserType* output) const {
    auto data_value = data_->role;
    return mojo::internal::Deserialize<::device_test::mojom::ControllerRole>(
        data_value, output);
  }

  ControllerRole role() const {
    return static_cast<ControllerRole>(data_->role);
  }
 private:
  internal::XRTestHook_WaitGetControllerRoleForTrackedDeviceIndex_ResponseParams_Data* data_ = nullptr;
};

class XRTestHook_WaitGetTrackedDeviceClass_ParamsDataView {
 public:
  XRTestHook_WaitGetTrackedDeviceClass_ParamsDataView() {}

  XRTestHook_WaitGetTrackedDeviceClass_ParamsDataView(
      internal::XRTestHook_WaitGetTrackedDeviceClass_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t index() const {
    return data_->index;
  }
 private:
  internal::XRTestHook_WaitGetTrackedDeviceClass_Params_Data* data_ = nullptr;
};

class XRTestHook_WaitGetTrackedDeviceClass_ResponseParamsDataView {
 public:
  XRTestHook_WaitGetTrackedDeviceClass_ResponseParamsDataView() {}

  XRTestHook_WaitGetTrackedDeviceClass_ResponseParamsDataView(
      internal::XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDeviceClass(UserType* output) const {
    auto data_value = data_->device_class;
    return mojo::internal::Deserialize<::device_test::mojom::TrackedDeviceClass>(
        data_value, output);
  }

  TrackedDeviceClass device_class() const {
    return static_cast<TrackedDeviceClass>(data_->device_class);
  }
 private:
  internal::XRTestHook_WaitGetTrackedDeviceClass_ResponseParams_Data* data_ = nullptr;
};

class XRTestHook_WaitGetControllerData_ParamsDataView {
 public:
  XRTestHook_WaitGetControllerData_ParamsDataView() {}

  XRTestHook_WaitGetControllerData_ParamsDataView(
      internal::XRTestHook_WaitGetControllerData_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t index() const {
    return data_->index;
  }
 private:
  internal::XRTestHook_WaitGetControllerData_Params_Data* data_ = nullptr;
};

class XRTestHook_WaitGetControllerData_ResponseParamsDataView {
 public:
  XRTestHook_WaitGetControllerData_ResponseParamsDataView() {}

  XRTestHook_WaitGetControllerData_ResponseParamsDataView(
      internal::XRTestHook_WaitGetControllerData_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ControllerFrameDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::device_test::mojom::ControllerFrameDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::XRTestHook_WaitGetControllerData_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class XRTestHook_WaitGetEventData_ParamsDataView {
 public:
  XRTestHook_WaitGetEventData_ParamsDataView() {}

  XRTestHook_WaitGetEventData_ParamsDataView(
      internal::XRTestHook_WaitGetEventData_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRTestHook_WaitGetEventData_Params_Data* data_ = nullptr;
};

class XRTestHook_WaitGetEventData_ResponseParamsDataView {
 public:
  XRTestHook_WaitGetEventData_ResponseParamsDataView() {}

  XRTestHook_WaitGetEventData_ResponseParamsDataView(
      internal::XRTestHook_WaitGetEventData_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      EventDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::device_test::mojom::EventDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::XRTestHook_WaitGetEventData_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class XRServiceTestHook_SetTestHook_ParamsDataView {
 public:
  XRServiceTestHook_SetTestHook_ParamsDataView() {}

  XRServiceTestHook_SetTestHook_ParamsDataView(
      internal::XRServiceTestHook_SetTestHook_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeHook() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device_test::mojom::XRTestHookInterfaceBase>>(
            &data_->hook, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::XRServiceTestHook_SetTestHook_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class XRServiceTestHook_SetTestHook_ResponseParamsDataView {
 public:
  XRServiceTestHook_SetTestHook_ResponseParamsDataView() {}

  XRServiceTestHook_SetTestHook_ResponseParamsDataView(
      internal::XRServiceTestHook_SetTestHook_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRServiceTestHook_SetTestHook_ResponseParams_Data* data_ = nullptr;
};

class XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ParamsDataView {
 public:
  XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ParamsDataView() {}

  XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ParamsDataView(
      internal::XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRServiceTestHook_TerminateDeviceServiceProcessForTesting_Params_Data* data_ = nullptr;
};

class XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParamsDataView {
 public:
  XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParamsDataView() {}

  XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParamsDataView(
      internal::XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::XRServiceTestHook_TerminateDeviceServiceProcessForTesting_ResponseParams_Data* data_ = nullptr;
};


inline void XRTestHook_OnFrameSubmitted_ParamsDataView::GetFrameDataDataView(
    SubmittedFrameDataDataView* output) {
  auto pointer = data_->frame_data.Get();
  *output = SubmittedFrameDataDataView(pointer, context_);
}






inline void XRTestHook_WaitGetDeviceConfig_ResponseParamsDataView::GetConfigDataView(
    DeviceConfigDataView* output) {
  auto pointer = data_->config.Get();
  *output = DeviceConfigDataView(pointer, context_);
}




inline void XRTestHook_WaitGetPresentingPose_ResponseParamsDataView::GetDataDataView(
    PoseFrameDataDataView* output) {
  auto pointer = data_->data.Get();
  *output = PoseFrameDataDataView(pointer, context_);
}




inline void XRTestHook_WaitGetMagicWindowPose_ResponseParamsDataView::GetDataDataView(
    PoseFrameDataDataView* output) {
  auto pointer = data_->data.Get();
  *output = PoseFrameDataDataView(pointer, context_);
}












inline void XRTestHook_WaitGetControllerData_ResponseParamsDataView::GetDataDataView(
    ControllerFrameDataDataView* output) {
  auto pointer = data_->data.Get();
  *output = ControllerFrameDataDataView(pointer, context_);
}




inline void XRTestHook_WaitGetEventData_ResponseParamsDataView::GetDataDataView(
    EventDataDataView* output) {
  auto pointer = data_->data.Get();
  *output = EventDataDataView(pointer, context_);
}









}  // namespace mojom
}  // namespace device_test

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_PARAMS_DATA_H_