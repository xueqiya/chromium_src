// device/vr/public/mojom/browser_test_interfaces.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_TEST_UTILS_H_
#define DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_TEST_UTILS_H_

#include "device/vr/public/mojom/browser_test_interfaces.mojom.h"
#include "base/component_export.h"


namespace device_test {
namespace mojom {


class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS) XRTestHookInterceptorForTesting : public XRTestHook {
  virtual XRTestHook* GetForwardingInterface() = 0;
  void OnFrameSubmitted(SubmittedFrameDataPtr frame_data, OnFrameSubmittedCallback callback) override;
  void WaitGetDeviceConfig(WaitGetDeviceConfigCallback callback) override;
  void WaitGetPresentingPose(WaitGetPresentingPoseCallback callback) override;
  void WaitGetMagicWindowPose(WaitGetMagicWindowPoseCallback callback) override;
  void WaitGetControllerRoleForTrackedDeviceIndex(uint32_t index, WaitGetControllerRoleForTrackedDeviceIndexCallback callback) override;
  void WaitGetTrackedDeviceClass(uint32_t index, WaitGetTrackedDeviceClassCallback callback) override;
  void WaitGetControllerData(uint32_t index, WaitGetControllerDataCallback callback) override;
  void WaitGetEventData(WaitGetEventDataCallback callback) override;
};
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS) XRTestHookAsyncWaiter {
 public:
  explicit XRTestHookAsyncWaiter(XRTestHook* proxy);
  ~XRTestHookAsyncWaiter();
  void OnFrameSubmitted(
      SubmittedFrameDataPtr frame_data);
  void WaitGetDeviceConfig(
      DeviceConfigPtr* out_config);
  void WaitGetPresentingPose(
      PoseFrameDataPtr* out_data);
  void WaitGetMagicWindowPose(
      PoseFrameDataPtr* out_data);
  void WaitGetControllerRoleForTrackedDeviceIndex(
      uint32_t index, ControllerRole* out_role);
  void WaitGetTrackedDeviceClass(
      uint32_t index, TrackedDeviceClass* out_device_class);
  void WaitGetControllerData(
      uint32_t index, ControllerFrameDataPtr* out_data);
  void WaitGetEventData(
      EventDataPtr* out_data);

 private:
  XRTestHook* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(XRTestHookAsyncWaiter);
};


class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS) XRServiceTestHookInterceptorForTesting : public XRServiceTestHook {
  virtual XRServiceTestHook* GetForwardingInterface() = 0;
  void SetTestHook(mojo::PendingRemote<XRTestHook> hook, SetTestHookCallback callback) override;
  void TerminateDeviceServiceProcessForTesting(TerminateDeviceServiceProcessForTestingCallback callback) override;
};
class COMPONENT_EXPORT(DEVICE_VR_TEST_MOJO_BINDINGS) XRServiceTestHookAsyncWaiter {
 public:
  explicit XRServiceTestHookAsyncWaiter(XRServiceTestHook* proxy);
  ~XRServiceTestHookAsyncWaiter();
  void SetTestHook(
      mojo::PendingRemote<XRTestHook> hook);
  void TerminateDeviceServiceProcessForTesting(
      );

 private:
  XRServiceTestHook* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(XRServiceTestHookAsyncWaiter);
};




}  // namespace mojom
}  // namespace device_test

#endif  // DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_TEST_UTILS_H_