// device/vr/public/mojom/browser_test_interfaces.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_BLINK_FORWARD_H_
#define DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_BLINK_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"




namespace device_test {
namespace mojom {

enum class Eye : int32_t;

enum class TrackedDeviceClass : int32_t;

enum class ControllerRole : int32_t;

enum class EventType : int32_t;

enum class InteractionProfileType : int32_t;
}  // namespace device_test
}  // namespace mojom

namespace WTF {
template <typename T>
struct DefaultHash;
}

namespace WTF {
struct device_test_mojom_internal_Eye_DataHashFn;

template <>
struct DefaultHash<::device_test::mojom::Eye> {
  using Hash = device_test_mojom_internal_Eye_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_test_mojom_internal_TrackedDeviceClass_DataHashFn;

template <>
struct DefaultHash<::device_test::mojom::TrackedDeviceClass> {
  using Hash = device_test_mojom_internal_TrackedDeviceClass_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_test_mojom_internal_ControllerRole_DataHashFn;

template <>
struct DefaultHash<::device_test::mojom::ControllerRole> {
  using Hash = device_test_mojom_internal_ControllerRole_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_test_mojom_internal_EventType_DataHashFn;

template <>
struct DefaultHash<::device_test::mojom::EventType> {
  using Hash = device_test_mojom_internal_EventType_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_test_mojom_internal_InteractionProfileType_DataHashFn;

template <>
struct DefaultHash<::device_test::mojom::InteractionProfileType> {
  using Hash = device_test_mojom_internal_InteractionProfileType_DataHashFn;
};
}  // namespace WTF


namespace device_test {
namespace mojom {
namespace blink {
using Eye = Eye;  // Alias for definition in the parent namespace.
using TrackedDeviceClass = TrackedDeviceClass;  // Alias for definition in the parent namespace.
using ControllerRole = ControllerRole;  // Alias for definition in the parent namespace.
using EventType = EventType;  // Alias for definition in the parent namespace.
using InteractionProfileType = InteractionProfileType;  // Alias for definition in the parent namespace.
class Color;
using ColorPtr = mojo::InlinedStructPtr<Color>;

class SubmittedFrameData;
using SubmittedFrameDataPtr = mojo::StructPtr<SubmittedFrameData>;

class PoseFrameData;
using PoseFrameDataPtr = mojo::StructPtr<PoseFrameData>;

class ProjectionRaw;
using ProjectionRawPtr = mojo::InlinedStructPtr<ProjectionRaw>;

class DeviceConfig;
using DeviceConfigPtr = mojo::StructPtr<DeviceConfig>;

class ControllerAxisData;
using ControllerAxisDataPtr = mojo::InlinedStructPtr<ControllerAxisData>;

class ControllerFrameData;
using ControllerFrameDataPtr = mojo::StructPtr<ControllerFrameData>;

class EventData;
using EventDataPtr = mojo::InlinedStructPtr<EventData>;

class XRTestHook;

using XRTestHookPtr = mojo::InterfacePtr<XRTestHook>;
using XRTestHookPtrInfo = mojo::InterfacePtrInfo<XRTestHook>;
using ThreadSafeXRTestHookPtr =
    mojo::ThreadSafeInterfacePtr<XRTestHook>;

using XRTestHookRequest = mojo::InterfaceRequest<XRTestHook>;

using XRTestHookAssociatedPtr =
    mojo::AssociatedInterfacePtr<XRTestHook>;
using ThreadSafeXRTestHookAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<XRTestHook>;
using XRTestHookAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<XRTestHook>;

using XRTestHookAssociatedRequest =
    mojo::AssociatedInterfaceRequest<XRTestHook>;

class XRServiceTestHook;

using XRServiceTestHookPtr = mojo::InterfacePtr<XRServiceTestHook>;
using XRServiceTestHookPtrInfo = mojo::InterfacePtrInfo<XRServiceTestHook>;
using ThreadSafeXRServiceTestHookPtr =
    mojo::ThreadSafeInterfacePtr<XRServiceTestHook>;

using XRServiceTestHookRequest = mojo::InterfaceRequest<XRServiceTestHook>;

using XRServiceTestHookAssociatedPtr =
    mojo::AssociatedInterfacePtr<XRServiceTestHook>;
using ThreadSafeXRServiceTestHookAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<XRServiceTestHook>;
using XRServiceTestHookAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<XRServiceTestHook>;

using XRServiceTestHookAssociatedRequest =
    mojo::AssociatedInterfaceRequest<XRServiceTestHook>;




}  // namespace blink
}  // namespace mojom
}  // namespace device_test

#endif  // DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_BLINK_FORWARD_H_