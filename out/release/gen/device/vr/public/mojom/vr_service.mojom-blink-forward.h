// device/vr/public/mojom/vr_service.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_VR_PUBLIC_MOJOM_VR_SERVICE_MOJOM_BLINK_FORWARD_H_
#define DEVICE_VR_PUBLIC_MOJOM_VR_SERVICE_MOJOM_BLINK_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"




namespace device {
namespace mojom {

enum class XRDeviceId : int32_t;

enum class XRHandedness : int32_t;

enum class XRTargetRayMode : int32_t;

enum class XRSessionFeature : int32_t;

enum class XRSessionFeatureRequestStatus : int32_t;

enum class XRSessionMode : int32_t;

enum class XRPresentationTransportMethod : int32_t;

enum class XRReferenceSpaceCategory : int32_t;

enum class XRPlaneOrientation : int32_t;

enum class RequestSessionError : int32_t;

enum class CreateAnchorResult : int32_t;

enum class SubscribeToHitTestResult : int32_t;

enum class EntityTypeForHitTest : int32_t;

enum class XRVisibilityState : int32_t;
}  // namespace device
}  // namespace mojom

namespace WTF {
template <typename T>
struct DefaultHash;
}

namespace WTF {
struct device_mojom_internal_XRDeviceId_DataHashFn;

template <>
struct DefaultHash<::device::mojom::XRDeviceId> {
  using Hash = device_mojom_internal_XRDeviceId_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_XRHandedness_DataHashFn;

template <>
struct DefaultHash<::device::mojom::XRHandedness> {
  using Hash = device_mojom_internal_XRHandedness_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_XRTargetRayMode_DataHashFn;

template <>
struct DefaultHash<::device::mojom::XRTargetRayMode> {
  using Hash = device_mojom_internal_XRTargetRayMode_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_XRSessionFeature_DataHashFn;

template <>
struct DefaultHash<::device::mojom::XRSessionFeature> {
  using Hash = device_mojom_internal_XRSessionFeature_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_XRSessionFeatureRequestStatus_DataHashFn;

template <>
struct DefaultHash<::device::mojom::XRSessionFeatureRequestStatus> {
  using Hash = device_mojom_internal_XRSessionFeatureRequestStatus_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_XRSessionMode_DataHashFn;

template <>
struct DefaultHash<::device::mojom::XRSessionMode> {
  using Hash = device_mojom_internal_XRSessionMode_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_XRPresentationTransportMethod_DataHashFn;

template <>
struct DefaultHash<::device::mojom::XRPresentationTransportMethod> {
  using Hash = device_mojom_internal_XRPresentationTransportMethod_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_XRReferenceSpaceCategory_DataHashFn;

template <>
struct DefaultHash<::device::mojom::XRReferenceSpaceCategory> {
  using Hash = device_mojom_internal_XRReferenceSpaceCategory_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_XRPlaneOrientation_DataHashFn;

template <>
struct DefaultHash<::device::mojom::XRPlaneOrientation> {
  using Hash = device_mojom_internal_XRPlaneOrientation_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_RequestSessionError_DataHashFn;

template <>
struct DefaultHash<::device::mojom::RequestSessionError> {
  using Hash = device_mojom_internal_RequestSessionError_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_CreateAnchorResult_DataHashFn;

template <>
struct DefaultHash<::device::mojom::CreateAnchorResult> {
  using Hash = device_mojom_internal_CreateAnchorResult_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_SubscribeToHitTestResult_DataHashFn;

template <>
struct DefaultHash<::device::mojom::SubscribeToHitTestResult> {
  using Hash = device_mojom_internal_SubscribeToHitTestResult_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_EntityTypeForHitTest_DataHashFn;

template <>
struct DefaultHash<::device::mojom::EntityTypeForHitTest> {
  using Hash = device_mojom_internal_EntityTypeForHitTest_DataHashFn;
};
}  // namespace WTF

namespace WTF {
struct device_mojom_internal_XRVisibilityState_DataHashFn;

template <>
struct DefaultHash<::device::mojom::XRVisibilityState> {
  using Hash = device_mojom_internal_XRVisibilityState_DataHashFn;
};
}  // namespace WTF


namespace device {
namespace mojom {
namespace blink {
using XRDeviceId = XRDeviceId;  // Alias for definition in the parent namespace.
using XRHandedness = XRHandedness;  // Alias for definition in the parent namespace.
using XRTargetRayMode = XRTargetRayMode;  // Alias for definition in the parent namespace.
using XRSessionFeature = XRSessionFeature;  // Alias for definition in the parent namespace.
using XRSessionFeatureRequestStatus = XRSessionFeatureRequestStatus;  // Alias for definition in the parent namespace.
using XRSessionMode = XRSessionMode;  // Alias for definition in the parent namespace.
using XRPresentationTransportMethod = XRPresentationTransportMethod;  // Alias for definition in the parent namespace.
using XRReferenceSpaceCategory = XRReferenceSpaceCategory;  // Alias for definition in the parent namespace.
using XRPlaneOrientation = XRPlaneOrientation;  // Alias for definition in the parent namespace.
using RequestSessionError = RequestSessionError;  // Alias for definition in the parent namespace.
using CreateAnchorResult = CreateAnchorResult;  // Alias for definition in the parent namespace.
using SubscribeToHitTestResult = SubscribeToHitTestResult;  // Alias for definition in the parent namespace.
using EntityTypeForHitTest = EntityTypeForHitTest;  // Alias for definition in the parent namespace.
using XRVisibilityState = XRVisibilityState;  // Alias for definition in the parent namespace.
class XRSessionOptions;
using XRSessionOptionsPtr = mojo::StructPtr<XRSessionOptions>;

class XRSession;
using XRSessionPtr = mojo::StructPtr<XRSession>;

class XRPresentationConnection;
using XRPresentationConnectionPtr = mojo::StructPtr<XRPresentationConnection>;

class XRInputSourceDescription;
using XRInputSourceDescriptionPtr = mojo::StructPtr<XRInputSourceDescription>;

class XRInputSourceState;
using XRInputSourceStatePtr = mojo::StructPtr<XRInputSourceState>;

class VRFieldOfView;
using VRFieldOfViewPtr = mojo::InlinedStructPtr<VRFieldOfView>;

class VRPose;
using VRPosePtr = mojo::StructPtr<VRPose>;

class Pose;
using PosePtr = mojo::StructPtr<Pose>;

class XRRay;
using XRRayPtr = mojo::StructPtr<XRRay>;

class XRHitResult;
using XRHitResultPtr = mojo::StructPtr<XRHitResult>;

class VREyeParameters;
using VREyeParametersPtr = mojo::StructPtr<VREyeParameters>;

class VRStageParameters;
using VRStageParametersPtr = mojo::StructPtr<VRStageParameters>;

class VRDisplayInfo;
using VRDisplayInfoPtr = mojo::StructPtr<VRDisplayInfo>;

class XRPresentationTransportOptions;
using XRPresentationTransportOptionsPtr = mojo::InlinedStructPtr<XRPresentationTransportOptions>;

class XRPlanePointData;
using XRPlanePointDataPtr = mojo::InlinedStructPtr<XRPlanePointData>;

class XRPlaneData;
using XRPlaneDataPtr = mojo::StructPtr<XRPlaneData>;

class XRPlaneDetectionData;
using XRPlaneDetectionDataPtr = mojo::StructPtr<XRPlaneDetectionData>;

class XRAnchorData;
using XRAnchorDataPtr = mojo::StructPtr<XRAnchorData>;

class XRAnchorsData;
using XRAnchorsDataPtr = mojo::StructPtr<XRAnchorsData>;

class XRHitTestSubscriptionResultData;
using XRHitTestSubscriptionResultDataPtr = mojo::StructPtr<XRHitTestSubscriptionResultData>;

class XRHitTestTransientInputSubscriptionResultData;
using XRHitTestTransientInputSubscriptionResultDataPtr = mojo::StructPtr<XRHitTestTransientInputSubscriptionResultData>;

class XRHitTestSubscriptionResultsData;
using XRHitTestSubscriptionResultsDataPtr = mojo::StructPtr<XRHitTestSubscriptionResultsData>;

class RgbTupleF32;
using RgbTupleF32Ptr = mojo::InlinedStructPtr<RgbTupleF32>;

class XRSphericalHarmonics;
using XRSphericalHarmonicsPtr = mojo::StructPtr<XRSphericalHarmonics>;

class RgbaTupleF16;
using RgbaTupleF16Ptr = mojo::InlinedStructPtr<RgbaTupleF16>;

class XRCubeMap;
using XRCubeMapPtr = mojo::StructPtr<XRCubeMap>;

class XRLightProbe;
using XRLightProbePtr = mojo::StructPtr<XRLightProbe>;

class XRReflectionProbe;
using XRReflectionProbePtr = mojo::StructPtr<XRReflectionProbe>;

class XRLightEstimationData;
using XRLightEstimationDataPtr = mojo::StructPtr<XRLightEstimationData>;

class XRFrameData;
using XRFrameDataPtr = mojo::StructPtr<XRFrameData>;

class RequestSessionSuccess;
using RequestSessionSuccessPtr = mojo::StructPtr<RequestSessionSuccess>;

class XRFrameDataRequestOptions;
using XRFrameDataRequestOptionsPtr = mojo::InlinedStructPtr<XRFrameDataRequestOptions>;

class XRNativeOriginInformation;

typedef mojo::InlinedStructPtr<XRNativeOriginInformation> XRNativeOriginInformationPtr;

class RequestSessionResult;

typedef mojo::StructPtr<RequestSessionResult> RequestSessionResultPtr;

class VRService;

using VRServicePtr = mojo::InterfacePtr<VRService>;
using VRServicePtrInfo = mojo::InterfacePtrInfo<VRService>;
using ThreadSafeVRServicePtr =
    mojo::ThreadSafeInterfacePtr<VRService>;

using VRServiceRequest = mojo::InterfaceRequest<VRService>;

using VRServiceAssociatedPtr =
    mojo::AssociatedInterfacePtr<VRService>;
using ThreadSafeVRServiceAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<VRService>;
using VRServiceAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<VRService>;

using VRServiceAssociatedRequest =
    mojo::AssociatedInterfaceRequest<VRService>;

class XRSessionMetricsRecorder;

using XRSessionMetricsRecorderPtr = mojo::InterfacePtr<XRSessionMetricsRecorder>;
using XRSessionMetricsRecorderPtrInfo = mojo::InterfacePtrInfo<XRSessionMetricsRecorder>;
using ThreadSafeXRSessionMetricsRecorderPtr =
    mojo::ThreadSafeInterfacePtr<XRSessionMetricsRecorder>;

using XRSessionMetricsRecorderRequest = mojo::InterfaceRequest<XRSessionMetricsRecorder>;

using XRSessionMetricsRecorderAssociatedPtr =
    mojo::AssociatedInterfacePtr<XRSessionMetricsRecorder>;
using ThreadSafeXRSessionMetricsRecorderAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<XRSessionMetricsRecorder>;
using XRSessionMetricsRecorderAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<XRSessionMetricsRecorder>;

using XRSessionMetricsRecorderAssociatedRequest =
    mojo::AssociatedInterfaceRequest<XRSessionMetricsRecorder>;

class VRServiceClient;

using VRServiceClientPtr = mojo::InterfacePtr<VRServiceClient>;
using VRServiceClientPtrInfo = mojo::InterfacePtrInfo<VRServiceClient>;
using ThreadSafeVRServiceClientPtr =
    mojo::ThreadSafeInterfacePtr<VRServiceClient>;

using VRServiceClientRequest = mojo::InterfaceRequest<VRServiceClient>;

using VRServiceClientAssociatedPtr =
    mojo::AssociatedInterfacePtr<VRServiceClient>;
using ThreadSafeVRServiceClientAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<VRServiceClient>;
using VRServiceClientAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<VRServiceClient>;

using VRServiceClientAssociatedRequest =
    mojo::AssociatedInterfaceRequest<VRServiceClient>;

class XREnvironmentIntegrationProvider;

using XREnvironmentIntegrationProviderPtr = mojo::InterfacePtr<XREnvironmentIntegrationProvider>;
using XREnvironmentIntegrationProviderPtrInfo = mojo::InterfacePtrInfo<XREnvironmentIntegrationProvider>;
using ThreadSafeXREnvironmentIntegrationProviderPtr =
    mojo::ThreadSafeInterfacePtr<XREnvironmentIntegrationProvider>;

using XREnvironmentIntegrationProviderRequest = mojo::InterfaceRequest<XREnvironmentIntegrationProvider>;

using XREnvironmentIntegrationProviderAssociatedPtr =
    mojo::AssociatedInterfacePtr<XREnvironmentIntegrationProvider>;
using ThreadSafeXREnvironmentIntegrationProviderAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<XREnvironmentIntegrationProvider>;
using XREnvironmentIntegrationProviderAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<XREnvironmentIntegrationProvider>;

using XREnvironmentIntegrationProviderAssociatedRequest =
    mojo::AssociatedInterfaceRequest<XREnvironmentIntegrationProvider>;

class XRInputSourceButtonListener;

using XRInputSourceButtonListenerPtr = mojo::InterfacePtr<XRInputSourceButtonListener>;
using XRInputSourceButtonListenerPtrInfo = mojo::InterfacePtrInfo<XRInputSourceButtonListener>;
using ThreadSafeXRInputSourceButtonListenerPtr =
    mojo::ThreadSafeInterfacePtr<XRInputSourceButtonListener>;

using XRInputSourceButtonListenerRequest = mojo::InterfaceRequest<XRInputSourceButtonListener>;

using XRInputSourceButtonListenerAssociatedPtr =
    mojo::AssociatedInterfacePtr<XRInputSourceButtonListener>;
using ThreadSafeXRInputSourceButtonListenerAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<XRInputSourceButtonListener>;
using XRInputSourceButtonListenerAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<XRInputSourceButtonListener>;

using XRInputSourceButtonListenerAssociatedRequest =
    mojo::AssociatedInterfaceRequest<XRInputSourceButtonListener>;

class XRFrameDataProvider;

using XRFrameDataProviderPtr = mojo::InterfacePtr<XRFrameDataProvider>;
using XRFrameDataProviderPtrInfo = mojo::InterfacePtrInfo<XRFrameDataProvider>;
using ThreadSafeXRFrameDataProviderPtr =
    mojo::ThreadSafeInterfacePtr<XRFrameDataProvider>;

using XRFrameDataProviderRequest = mojo::InterfaceRequest<XRFrameDataProvider>;

using XRFrameDataProviderAssociatedPtr =
    mojo::AssociatedInterfacePtr<XRFrameDataProvider>;
using ThreadSafeXRFrameDataProviderAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<XRFrameDataProvider>;
using XRFrameDataProviderAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<XRFrameDataProvider>;

using XRFrameDataProviderAssociatedRequest =
    mojo::AssociatedInterfaceRequest<XRFrameDataProvider>;

class XRPresentationProvider;

using XRPresentationProviderPtr = mojo::InterfacePtr<XRPresentationProvider>;
using XRPresentationProviderPtrInfo = mojo::InterfacePtrInfo<XRPresentationProvider>;
using ThreadSafeXRPresentationProviderPtr =
    mojo::ThreadSafeInterfacePtr<XRPresentationProvider>;

using XRPresentationProviderRequest = mojo::InterfaceRequest<XRPresentationProvider>;

using XRPresentationProviderAssociatedPtr =
    mojo::AssociatedInterfacePtr<XRPresentationProvider>;
using ThreadSafeXRPresentationProviderAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<XRPresentationProvider>;
using XRPresentationProviderAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<XRPresentationProvider>;

using XRPresentationProviderAssociatedRequest =
    mojo::AssociatedInterfaceRequest<XRPresentationProvider>;

class XRPresentationClient;

using XRPresentationClientPtr = mojo::InterfacePtr<XRPresentationClient>;
using XRPresentationClientPtrInfo = mojo::InterfacePtrInfo<XRPresentationClient>;
using ThreadSafeXRPresentationClientPtr =
    mojo::ThreadSafeInterfacePtr<XRPresentationClient>;

using XRPresentationClientRequest = mojo::InterfaceRequest<XRPresentationClient>;

using XRPresentationClientAssociatedPtr =
    mojo::AssociatedInterfacePtr<XRPresentationClient>;
using ThreadSafeXRPresentationClientAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<XRPresentationClient>;
using XRPresentationClientAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<XRPresentationClient>;

using XRPresentationClientAssociatedRequest =
    mojo::AssociatedInterfaceRequest<XRPresentationClient>;

class XRSessionClient;

using XRSessionClientPtr = mojo::InterfacePtr<XRSessionClient>;
using XRSessionClientPtrInfo = mojo::InterfacePtrInfo<XRSessionClient>;
using ThreadSafeXRSessionClientPtr =
    mojo::ThreadSafeInterfacePtr<XRSessionClient>;

using XRSessionClientRequest = mojo::InterfaceRequest<XRSessionClient>;

using XRSessionClientAssociatedPtr =
    mojo::AssociatedInterfacePtr<XRSessionClient>;
using ThreadSafeXRSessionClientAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<XRSessionClient>;
using XRSessionClientAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<XRSessionClient>;

using XRSessionClientAssociatedRequest =
    mojo::AssociatedInterfaceRequest<XRSessionClient>;




}  // namespace blink
}  // namespace mojom
}  // namespace device
#include "device/vr/public/mojom/rgb_tuple_f32.h"
#include "device/vr/public/mojom/rgba_tuple_f16.h"

#endif  // DEVICE_VR_PUBLIC_MOJOM_VR_SERVICE_MOJOM_BLINK_FORWARD_H_