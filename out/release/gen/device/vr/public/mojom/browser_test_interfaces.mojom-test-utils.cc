// device/vr/public/mojom/browser_test_interfaces.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "device/vr/public/mojom/browser_test_interfaces.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include "ui/gfx/mojom/transform.mojom.h"


#ifndef DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_JUMBO_H_
#define DEVICE_VR_PUBLIC_MOJOM_BROWSER_TEST_INTERFACES_MOJOM_JUMBO_H_
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "ui/gfx/mojom/transform_mojom_traits.h"
#endif


namespace device_test {
namespace mojom {


void XRTestHookInterceptorForTesting::OnFrameSubmitted(SubmittedFrameDataPtr frame_data, OnFrameSubmittedCallback callback) {
  GetForwardingInterface()->OnFrameSubmitted(std::move(frame_data), std::move(callback));
}
void XRTestHookInterceptorForTesting::WaitGetDeviceConfig(WaitGetDeviceConfigCallback callback) {
  GetForwardingInterface()->WaitGetDeviceConfig(std::move(callback));
}
void XRTestHookInterceptorForTesting::WaitGetPresentingPose(WaitGetPresentingPoseCallback callback) {
  GetForwardingInterface()->WaitGetPresentingPose(std::move(callback));
}
void XRTestHookInterceptorForTesting::WaitGetMagicWindowPose(WaitGetMagicWindowPoseCallback callback) {
  GetForwardingInterface()->WaitGetMagicWindowPose(std::move(callback));
}
void XRTestHookInterceptorForTesting::WaitGetControllerRoleForTrackedDeviceIndex(uint32_t index, WaitGetControllerRoleForTrackedDeviceIndexCallback callback) {
  GetForwardingInterface()->WaitGetControllerRoleForTrackedDeviceIndex(std::move(index), std::move(callback));
}
void XRTestHookInterceptorForTesting::WaitGetTrackedDeviceClass(uint32_t index, WaitGetTrackedDeviceClassCallback callback) {
  GetForwardingInterface()->WaitGetTrackedDeviceClass(std::move(index), std::move(callback));
}
void XRTestHookInterceptorForTesting::WaitGetControllerData(uint32_t index, WaitGetControllerDataCallback callback) {
  GetForwardingInterface()->WaitGetControllerData(std::move(index), std::move(callback));
}
void XRTestHookInterceptorForTesting::WaitGetEventData(WaitGetEventDataCallback callback) {
  GetForwardingInterface()->WaitGetEventData(std::move(callback));
}
XRTestHookAsyncWaiter::XRTestHookAsyncWaiter(
    XRTestHook* proxy) : proxy_(proxy) {}

XRTestHookAsyncWaiter::~XRTestHookAsyncWaiter() = default;

void XRTestHookAsyncWaiter::OnFrameSubmitted(
    SubmittedFrameDataPtr frame_data) {
  base::RunLoop loop;
  proxy_->OnFrameSubmitted(std::move(frame_data),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void XRTestHookAsyncWaiter::WaitGetDeviceConfig(
    DeviceConfigPtr* out_config) {
  base::RunLoop loop;
  proxy_->WaitGetDeviceConfig(
      base::BindOnce(
          [](base::RunLoop* loop,
             DeviceConfigPtr* out_config
,
             DeviceConfigPtr config) {*out_config = std::move(config);
            loop->Quit();
          },
          &loop,
          out_config));
  loop.Run();
}
void XRTestHookAsyncWaiter::WaitGetPresentingPose(
    PoseFrameDataPtr* out_data) {
  base::RunLoop loop;
  proxy_->WaitGetPresentingPose(
      base::BindOnce(
          [](base::RunLoop* loop,
             PoseFrameDataPtr* out_data
,
             PoseFrameDataPtr data) {*out_data = std::move(data);
            loop->Quit();
          },
          &loop,
          out_data));
  loop.Run();
}
void XRTestHookAsyncWaiter::WaitGetMagicWindowPose(
    PoseFrameDataPtr* out_data) {
  base::RunLoop loop;
  proxy_->WaitGetMagicWindowPose(
      base::BindOnce(
          [](base::RunLoop* loop,
             PoseFrameDataPtr* out_data
,
             PoseFrameDataPtr data) {*out_data = std::move(data);
            loop->Quit();
          },
          &loop,
          out_data));
  loop.Run();
}
void XRTestHookAsyncWaiter::WaitGetControllerRoleForTrackedDeviceIndex(
    uint32_t index, ControllerRole* out_role) {
  base::RunLoop loop;
  proxy_->WaitGetControllerRoleForTrackedDeviceIndex(std::move(index),
      base::BindOnce(
          [](base::RunLoop* loop,
             ControllerRole* out_role
,
             ControllerRole role) {*out_role = std::move(role);
            loop->Quit();
          },
          &loop,
          out_role));
  loop.Run();
}
void XRTestHookAsyncWaiter::WaitGetTrackedDeviceClass(
    uint32_t index, TrackedDeviceClass* out_device_class) {
  base::RunLoop loop;
  proxy_->WaitGetTrackedDeviceClass(std::move(index),
      base::BindOnce(
          [](base::RunLoop* loop,
             TrackedDeviceClass* out_device_class
,
             TrackedDeviceClass device_class) {*out_device_class = std::move(device_class);
            loop->Quit();
          },
          &loop,
          out_device_class));
  loop.Run();
}
void XRTestHookAsyncWaiter::WaitGetControllerData(
    uint32_t index, ControllerFrameDataPtr* out_data) {
  base::RunLoop loop;
  proxy_->WaitGetControllerData(std::move(index),
      base::BindOnce(
          [](base::RunLoop* loop,
             ControllerFrameDataPtr* out_data
,
             ControllerFrameDataPtr data) {*out_data = std::move(data);
            loop->Quit();
          },
          &loop,
          out_data));
  loop.Run();
}
void XRTestHookAsyncWaiter::WaitGetEventData(
    EventDataPtr* out_data) {
  base::RunLoop loop;
  proxy_->WaitGetEventData(
      base::BindOnce(
          [](base::RunLoop* loop,
             EventDataPtr* out_data
,
             EventDataPtr data) {*out_data = std::move(data);
            loop->Quit();
          },
          &loop,
          out_data));
  loop.Run();
}



void XRServiceTestHookInterceptorForTesting::SetTestHook(mojo::PendingRemote<XRTestHook> hook, SetTestHookCallback callback) {
  GetForwardingInterface()->SetTestHook(std::move(hook), std::move(callback));
}
void XRServiceTestHookInterceptorForTesting::TerminateDeviceServiceProcessForTesting(TerminateDeviceServiceProcessForTestingCallback callback) {
  GetForwardingInterface()->TerminateDeviceServiceProcessForTesting(std::move(callback));
}
XRServiceTestHookAsyncWaiter::XRServiceTestHookAsyncWaiter(
    XRServiceTestHook* proxy) : proxy_(proxy) {}

XRServiceTestHookAsyncWaiter::~XRServiceTestHookAsyncWaiter() = default;

void XRServiceTestHookAsyncWaiter::SetTestHook(
    mojo::PendingRemote<XRTestHook> hook) {
  base::RunLoop loop;
  proxy_->SetTestHook(std::move(hook),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void XRServiceTestHookAsyncWaiter::TerminateDeviceServiceProcessForTesting(
    ) {
  base::RunLoop loop;
  proxy_->TerminateDeviceServiceProcessForTesting(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace mojom
}  // namespace device_test

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif