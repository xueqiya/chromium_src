// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/bluetooth/ChromeBluetoothRemoteGattDescriptor

#ifndef org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_JNI
#define org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor[];
const char kClassPath_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor[] =
    "org/chromium/device/bluetooth/ChromeBluetoothRemoteGattDescriptor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(nullptr);
#ifndef org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz_defined
#define org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz_defined
inline jclass org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor,
      &g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace device {

JNI_GENERATOR_EXPORT void Java_J_N_MaKNZo8k(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBluetoothRemoteGattDescriptorAndroid,
    jobject caller,
    jint status,
    jbyteArray value) {
  BluetoothRemoteGattDescriptorAndroid* native =
      reinterpret_cast<BluetoothRemoteGattDescriptorAndroid*>(nativeBluetoothRemoteGattDescriptorAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnRead");
  return native->OnRead(env, base::android::JavaParamRef<jobject>(env, caller), status,
      base::android::JavaParamRef<jbyteArray>(env, value));
}

JNI_GENERATOR_EXPORT void Java_J_N_M4SmPJiR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBluetoothRemoteGattDescriptorAndroid,
    jobject caller,
    jint status) {
  BluetoothRemoteGattDescriptorAndroid* native =
      reinterpret_cast<BluetoothRemoteGattDescriptorAndroid*>(nativeBluetoothRemoteGattDescriptorAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnWrite");
  return native->OnWrite(env, base::android::JavaParamRef<jobject>(env, caller), status);
}


static std::atomic<jmethodID>
    g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_onBluetoothRemoteGattDescriptorAndroidDestruction(nullptr);
static void
    Java_ChromeBluetoothRemoteGattDescriptor_onBluetoothRemoteGattDescriptorAndroidDestruction(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onBluetoothRemoteGattDescriptorAndroidDestruction",
          "()V",
&g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_onBluetoothRemoteGattDescriptorAndroidDestruction);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_ChromeBluetoothRemoteGattDescriptor_create(JNIEnv* env, jlong
    nativeBluetoothRemoteGattDescriptorAndroid,
    const base::android::JavaRef<jobject>& descriptorWrapper,
    const base::android::JavaRef<jobject>& chromeDevice) {
  jclass clazz = org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLorg/chromium/device/bluetooth/Wrappers$BluetoothGattDescriptorWrapper;Lorg/chromium/device/bluetooth/ChromeBluetoothDevice;)Lorg/chromium/device/bluetooth/ChromeBluetoothRemoteGattDescriptor;",
          &g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeBluetoothRemoteGattDescriptorAndroid,
              descriptorWrapper.obj(), chromeDevice.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_getUUID(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_ChromeBluetoothRemoteGattDescriptor_getUUID(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getUUID",
          "()Ljava/lang/String;",
          &g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_getUUID);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_readRemoteDescriptor(nullptr);
static jboolean Java_ChromeBluetoothRemoteGattDescriptor_readRemoteDescriptor(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "readRemoteDescriptor",
          "()Z",
&g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_readRemoteDescriptor);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_writeRemoteDescriptor(nullptr);
static jboolean Java_ChromeBluetoothRemoteGattDescriptor_writeRemoteDescriptor(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jbyteArray>& value) {
  jclass clazz = org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "writeRemoteDescriptor",
          "([B)Z",
&g_org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_writeRemoteDescriptor);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, value.obj());
  return ret;
}

}  // namespace device

// Step 4: Generated test functions (optional).


#endif  // org_chromium_device_bluetooth_ChromeBluetoothRemoteGattDescriptor_JNI
