// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/MultiprocessTestClientLauncher

#ifndef org_chromium_base_MultiprocessTestClientLauncher_JNI
#define org_chromium_base_MultiprocessTestClientLauncher_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_base_MultiprocessTestClientLauncher[];
const char kClassPath_org_chromium_base_MultiprocessTestClientLauncher[] =
    "org/chromium/base/MultiprocessTestClientLauncher";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_base_MultiprocessTestClientLauncher_clazz(nullptr);
#ifndef org_chromium_base_MultiprocessTestClientLauncher_clazz_defined
#define org_chromium_base_MultiprocessTestClientLauncher_clazz_defined
inline jclass org_chromium_base_MultiprocessTestClientLauncher_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_base_MultiprocessTestClientLauncher,
      &g_org_chromium_base_MultiprocessTestClientLauncher_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {


static std::atomic<jmethodID>
    g_org_chromium_base_MultiprocessTestClientLauncher_launchClient(nullptr);
static jint Java_MultiprocessTestClientLauncher_launchClient(JNIEnv* env, const
    base::android::JavaRef<jobjectArray>& commandLine,
    const base::android::JavaRef<jobjectArray>& filesToMap) {
  jclass clazz = org_chromium_base_MultiprocessTestClientLauncher_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_MultiprocessTestClientLauncher_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "launchClient",
          "([Ljava/lang/String;[Lorg/chromium/base/process_launcher/FileDescriptorInfo;)I",
          &g_org_chromium_base_MultiprocessTestClientLauncher_launchClient);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, commandLine.obj(), filesToMap.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_base_MultiprocessTestClientLauncher_waitForMainToReturn(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_MultiprocessTestClientLauncher_waitForMainToReturn(JNIEnv* env, JniIntWrapper pid,
    JniIntWrapper timeoutMs) {
  jclass clazz = org_chromium_base_MultiprocessTestClientLauncher_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_MultiprocessTestClientLauncher_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "waitForMainToReturn",
          "(II)Lorg/chromium/base/MainReturnCodeResult;",
          &g_org_chromium_base_MultiprocessTestClientLauncher_waitForMainToReturn);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(pid), as_jint(timeoutMs));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_base_MultiprocessTestClientLauncher_terminate(nullptr);
static jboolean Java_MultiprocessTestClientLauncher_terminate(JNIEnv* env, JniIntWrapper pid,
    JniIntWrapper exitCode,
    jboolean wait) {
  jclass clazz = org_chromium_base_MultiprocessTestClientLauncher_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_MultiprocessTestClientLauncher_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "terminate",
          "(IIZ)Z",
          &g_org_chromium_base_MultiprocessTestClientLauncher_terminate);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(pid), as_jint(exitCode), wait);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_base_MultiprocessTestClientLauncher_hasCleanExit(nullptr);
static jboolean Java_MultiprocessTestClientLauncher_hasCleanExit(JNIEnv* env, JniIntWrapper pid) {
  jclass clazz = org_chromium_base_MultiprocessTestClientLauncher_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_MultiprocessTestClientLauncher_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "hasCleanExit",
          "(I)Z",
          &g_org_chromium_base_MultiprocessTestClientLauncher_hasCleanExit);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(pid));
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_base_MultiprocessTestClientLauncher_makeFdInfoArray(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_MultiprocessTestClientLauncher_makeFdInfoArray(JNIEnv* env, const
    base::android::JavaRef<jintArray>& keys,
    const base::android::JavaRef<jintArray>& fds) {
  jclass clazz = org_chromium_base_MultiprocessTestClientLauncher_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_MultiprocessTestClientLauncher_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "makeFdInfoArray",
          "([I[I)[Lorg/chromium/base/process_launcher/FileDescriptorInfo;",
          &g_org_chromium_base_MultiprocessTestClientLauncher_makeFdInfoArray);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, keys.obj(), fds.obj()));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

}  // namespace android
}  // namespace base

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_MultiprocessTestClientLauncher_JNI
