// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/JavaHandlerThread

#ifndef org_chromium_base_JavaHandlerThread_JNI
#define org_chromium_base_JavaHandlerThread_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_JavaHandlerThread[];
const char kClassPath_org_chromium_base_JavaHandlerThread[] = "org/chromium/base/JavaHandlerThread";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_JavaHandlerThread_clazz(nullptr);
#ifndef org_chromium_base_JavaHandlerThread_clazz_defined
#define org_chromium_base_JavaHandlerThread_clazz_defined
inline jclass org_chromium_base_JavaHandlerThread_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_JavaHandlerThread,
      &g_org_chromium_base_JavaHandlerThread_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

JNI_GENERATOR_EXPORT void Java_J_N_MJcct7gJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJavaHandlerThread,
    jlong nativeEvent) {
  JavaHandlerThread* native = reinterpret_cast<JavaHandlerThread*>(nativeJavaHandlerThread);
  CHECK_NATIVE_PTR(env, jcaller, native, "InitializeThread");
  return native->InitializeThread(env, nativeEvent);
}

JNI_GENERATOR_EXPORT void Java_J_N_MYwg_00024x8E(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJavaHandlerThread) {
  JavaHandlerThread* native = reinterpret_cast<JavaHandlerThread*>(nativeJavaHandlerThread);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnLooperStopped");
  return native->OnLooperStopped(env);
}


static std::atomic<jmethodID> g_org_chromium_base_JavaHandlerThread_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_JavaHandlerThread_create(JNIEnv* env, const
    base::android::JavaRef<jstring>& name,
    JniIntWrapper priority) {
  jclass clazz = org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_JavaHandlerThread_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(Ljava/lang/String;I)Lorg/chromium/base/JavaHandlerThread;",
          &g_org_chromium_base_JavaHandlerThread_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, name.obj(), as_jint(priority));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_base_JavaHandlerThread_startAndInitialize(nullptr);
static void Java_JavaHandlerThread_startAndInitialize(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeThread,
    jlong nativeEvent) {
  jclass clazz = org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_base_JavaHandlerThread_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "startAndInitialize",
          "(JJ)V",
          &g_org_chromium_base_JavaHandlerThread_startAndInitialize);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativeThread, nativeEvent);
}

static std::atomic<jmethodID> g_org_chromium_base_JavaHandlerThread_quitThreadSafely(nullptr);
static void Java_JavaHandlerThread_quitThreadSafely(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeThread) {
  jclass clazz = org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_base_JavaHandlerThread_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "quitThreadSafely",
          "(J)V",
          &g_org_chromium_base_JavaHandlerThread_quitThreadSafely);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativeThread);
}

static std::atomic<jmethodID> g_org_chromium_base_JavaHandlerThread_joinThread(nullptr);
static void Java_JavaHandlerThread_joinThread(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_base_JavaHandlerThread_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "joinThread",
          "()V",
          &g_org_chromium_base_JavaHandlerThread_joinThread);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_base_JavaHandlerThread_isAlive(nullptr);
static jboolean Java_JavaHandlerThread_isAlive(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_base_JavaHandlerThread_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isAlive",
          "()Z",
          &g_org_chromium_base_JavaHandlerThread_isAlive);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_base_JavaHandlerThread_listenForUncaughtExceptionsForTesting(nullptr);
static void Java_JavaHandlerThread_listenForUncaughtExceptionsForTesting(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_base_JavaHandlerThread_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "listenForUncaughtExceptionsForTesting",
          "()V",
          &g_org_chromium_base_JavaHandlerThread_listenForUncaughtExceptionsForTesting);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_base_JavaHandlerThread_getUncaughtExceptionIfAny(nullptr);
static base::android::ScopedJavaLocalRef<jthrowable>
    Java_JavaHandlerThread_getUncaughtExceptionIfAny(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_base_JavaHandlerThread_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getUncaughtExceptionIfAny",
          "()Ljava/lang/Throwable;",
          &g_org_chromium_base_JavaHandlerThread_getUncaughtExceptionIfAny);

  jthrowable ret =
      static_cast<jthrowable>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jthrowable>(env, ret);
}

}  // namespace android
}  // namespace base

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_JavaHandlerThread_JNI
