// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/EarlyTraceEvent

#ifndef org_chromium_base_EarlyTraceEvent_JNI
#define org_chromium_base_EarlyTraceEvent_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_EarlyTraceEvent[];
const char kClassPath_org_chromium_base_EarlyTraceEvent[] = "org/chromium/base/EarlyTraceEvent";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_EarlyTraceEvent_clazz(nullptr);
#ifndef org_chromium_base_EarlyTraceEvent_clazz_defined
#define org_chromium_base_EarlyTraceEvent_clazz_defined
inline jclass org_chromium_base_EarlyTraceEvent_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_EarlyTraceEvent,
      &g_org_chromium_base_EarlyTraceEvent_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static void JNI_EarlyTraceEvent_RecordEarlyEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong beginTimNanos,
    jlong endTimeNanos,
    jint threadId,
    jlong threadDurationMillis);

JNI_GENERATOR_EXPORT void Java_J_N_MDy_1VEWN(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong beginTimNanos,
    jlong endTimeNanos,
    jint threadId,
    jlong threadDurationMillis) {
  return JNI_EarlyTraceEvent_RecordEarlyEvent(env, base::android::JavaParamRef<jstring>(env, name),
      beginTimNanos, endTimeNanos, threadId, threadDurationMillis);
}

static void JNI_EarlyTraceEvent_RecordEarlyStartAsyncEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong id,
    jlong timestamp);

JNI_GENERATOR_EXPORT void Java_J_N_M8HhsiE6(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id,
    jlong timestamp) {
  return JNI_EarlyTraceEvent_RecordEarlyStartAsyncEvent(env,
      base::android::JavaParamRef<jstring>(env, name), id, timestamp);
}

static void JNI_EarlyTraceEvent_RecordEarlyFinishAsyncEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong id,
    jlong timestamp);

JNI_GENERATOR_EXPORT void Java_J_N_MCm4GHjn(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id,
    jlong timestamp) {
  return JNI_EarlyTraceEvent_RecordEarlyFinishAsyncEvent(env,
      base::android::JavaParamRef<jstring>(env, name), id, timestamp);
}


static std::atomic<jmethodID>
    g_org_chromium_base_EarlyTraceEvent_setBackgroundStartupTracingFlag(nullptr);
static void Java_EarlyTraceEvent_setBackgroundStartupTracingFlag(JNIEnv* env, jboolean enabled) {
  jclass clazz = org_chromium_base_EarlyTraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_EarlyTraceEvent_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setBackgroundStartupTracingFlag",
          "(Z)V",
          &g_org_chromium_base_EarlyTraceEvent_setBackgroundStartupTracingFlag);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, enabled);
}

static std::atomic<jmethodID>
    g_org_chromium_base_EarlyTraceEvent_getBackgroundStartupTracingFlag(nullptr);
static jboolean Java_EarlyTraceEvent_getBackgroundStartupTracingFlag(JNIEnv* env) {
  jclass clazz = org_chromium_base_EarlyTraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_EarlyTraceEvent_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getBackgroundStartupTracingFlag",
          "()Z",
          &g_org_chromium_base_EarlyTraceEvent_getBackgroundStartupTracingFlag);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

}  // namespace android
}  // namespace base

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_EarlyTraceEvent_JNI
