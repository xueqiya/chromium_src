// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/library_loader/LibraryLoader

#ifndef org_chromium_base_library_loader_LibraryLoader_JNI
#define org_chromium_base_library_loader_LibraryLoader_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_base_library_1loader_LibraryLoader[];
const char kClassPath_org_chromium_base_library_1loader_LibraryLoader[] =
    "org/chromium/base/library_loader/LibraryLoader";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_base_library_1loader_LibraryLoader_clazz(nullptr);
#ifndef org_chromium_base_library_1loader_LibraryLoader_clazz_defined
#define org_chromium_base_library_1loader_LibraryLoader_clazz_defined
inline jclass org_chromium_base_library_1loader_LibraryLoader_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_base_library_1loader_LibraryLoader,
      &g_org_chromium_base_library_1loader_LibraryLoader_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static jboolean JNI_LibraryLoader_LibraryLoaded(JNIEnv* env, jint processType);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M81WqFvs(
    JNIEnv* env,
    jclass jcaller,
    jint processType) {
  return JNI_LibraryLoader_LibraryLoaded(env, processType);
}

static void JNI_LibraryLoader_RegisterNonMainDexJni(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MIOj213u(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_LibraryLoader_RegisterNonMainDexJni(env);
}

static void JNI_LibraryLoader_RecordRendererLibraryLoadTime(JNIEnv* env, jlong libraryLoadTime);

JNI_GENERATOR_EXPORT void Java_J_N_MiAWbgCC(
    JNIEnv* env,
    jclass jcaller,
    jlong libraryLoadTime) {
  return JNI_LibraryLoader_RecordRendererLibraryLoadTime(env, libraryLoadTime);
}

static base::android::ScopedJavaLocalRef<jstring> JNI_LibraryLoader_GetVersionNumber(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_M_00024HdV9JM(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_LibraryLoader_GetVersionNumber(env).Release();
}


static std::atomic<jmethodID>
    g_org_chromium_base_library_1loader_LibraryLoader_onUmaRecordingReadyInRenderer(nullptr);
static void Java_LibraryLoader_onUmaRecordingReadyInRenderer(JNIEnv* env) {
  jclass clazz = org_chromium_base_library_1loader_LibraryLoader_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_library_1loader_LibraryLoader_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onUmaRecordingReadyInRenderer",
          "()V",
          &g_org_chromium_base_library_1loader_LibraryLoader_onUmaRecordingReadyInRenderer);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

}  // namespace android
}  // namespace base

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_library_loader_LibraryLoader_JNI
