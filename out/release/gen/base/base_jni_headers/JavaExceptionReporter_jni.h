// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/JavaExceptionReporter

#ifndef org_chromium_base_JavaExceptionReporter_JNI
#define org_chromium_base_JavaExceptionReporter_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_JavaExceptionReporter[];
const char kClassPath_org_chromium_base_JavaExceptionReporter[] =
    "org/chromium/base/JavaExceptionReporter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_base_JavaExceptionReporter_clazz(nullptr);
#ifndef org_chromium_base_JavaExceptionReporter_clazz_defined
#define org_chromium_base_JavaExceptionReporter_clazz_defined
inline jclass org_chromium_base_JavaExceptionReporter_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_JavaExceptionReporter,
      &g_org_chromium_base_JavaExceptionReporter_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static void JNI_JavaExceptionReporter_ReportJavaException(JNIEnv* env, jboolean crashAfterReport,
    const base::android::JavaParamRef<jthrowable>& e);

JNI_GENERATOR_EXPORT void Java_J_N_MLlibBXh(
    JNIEnv* env,
    jclass jcaller,
    jboolean crashAfterReport,
    jthrowable e) {
  return JNI_JavaExceptionReporter_ReportJavaException(env, crashAfterReport,
      base::android::JavaParamRef<jthrowable>(env, e));
}

static void JNI_JavaExceptionReporter_ReportJavaStackTrace(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& stackTrace);

JNI_GENERATOR_EXPORT void Java_J_N_MmS4zlEt(
    JNIEnv* env,
    jclass jcaller,
    jstring stackTrace) {
  return JNI_JavaExceptionReporter_ReportJavaStackTrace(env,
      base::android::JavaParamRef<jstring>(env, stackTrace));
}


static std::atomic<jmethodID> g_org_chromium_base_JavaExceptionReporter_installHandler(nullptr);
static void Java_JavaExceptionReporter_installHandler(JNIEnv* env, jboolean crashAfterReport) {
  jclass clazz = org_chromium_base_JavaExceptionReporter_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_JavaExceptionReporter_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "installHandler",
          "(Z)V",
          &g_org_chromium_base_JavaExceptionReporter_installHandler);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, crashAfterReport);
}

}  // namespace android
}  // namespace base

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_JavaExceptionReporter_JNI
