// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/BundleUtils

#ifndef org_chromium_base_BundleUtils_JNI
#define org_chromium_base_BundleUtils_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_BundleUtils[];
const char kClassPath_org_chromium_base_BundleUtils[] = "org/chromium/base/BundleUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_BundleUtils_clazz(nullptr);
#ifndef org_chromium_base_BundleUtils_clazz_defined
#define org_chromium_base_BundleUtils_clazz_defined
inline jclass org_chromium_base_BundleUtils_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_BundleUtils,
      &g_org_chromium_base_BundleUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID> g_org_chromium_base_BundleUtils_isBundleForNative(nullptr);
static jboolean Java_BundleUtils_isBundleForNative(JNIEnv* env) {
  jclass clazz = org_chromium_base_BundleUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_BundleUtils_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isBundleForNative",
          "()Z",
          &g_org_chromium_base_BundleUtils_isBundleForNative);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_base_BundleUtils_getNativeLibraryPath(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_BundleUtils_getNativeLibraryPath(JNIEnv* env,
    const base::android::JavaRef<jstring>& libraryName) {
  jclass clazz = org_chromium_base_BundleUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_BundleUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getNativeLibraryPath",
          "(Ljava/lang/String;)Ljava/lang/String;",
          &g_org_chromium_base_BundleUtils_getNativeLibraryPath);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, libraryName.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_BundleUtils_JNI
