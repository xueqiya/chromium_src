// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/UnguessableToken

#ifndef org_chromium_base_UnguessableToken_JNI
#define org_chromium_base_UnguessableToken_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_UnguessableToken[];
const char kClassPath_org_chromium_base_UnguessableToken[] = "org/chromium/base/UnguessableToken";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_UnguessableToken_clazz(nullptr);
#ifndef org_chromium_base_UnguessableToken_clazz_defined
#define org_chromium_base_UnguessableToken_clazz_defined
inline jclass org_chromium_base_UnguessableToken_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_UnguessableToken,
      &g_org_chromium_base_UnguessableToken_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID> g_org_chromium_base_UnguessableToken_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_UnguessableToken_create(JNIEnv* env, jlong
    high,
    jlong low) {
  jclass clazz = org_chromium_base_UnguessableToken_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_UnguessableToken_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(JJ)Lorg/chromium/base/UnguessableToken;",
          &g_org_chromium_base_UnguessableToken_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, high, low);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_base_UnguessableToken_getHighForSerialization(nullptr);
static jlong Java_UnguessableToken_getHighForSerialization(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_base_UnguessableToken_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_base_UnguessableToken_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getHighForSerialization",
          "()J",
          &g_org_chromium_base_UnguessableToken_getHighForSerialization);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_base_UnguessableToken_getLowForSerialization(nullptr);
static jlong Java_UnguessableToken_getLowForSerialization(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_base_UnguessableToken_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_base_UnguessableToken_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getLowForSerialization",
          "()J",
          &g_org_chromium_base_UnguessableToken_getLowForSerialization);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_base_UnguessableToken_parcelAndUnparcelForTesting(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_UnguessableToken_parcelAndUnparcelForTesting(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_base_UnguessableToken_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_base_UnguessableToken_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "parcelAndUnparcelForTesting",
          "()Lorg/chromium/base/UnguessableToken;",
          &g_org_chromium_base_UnguessableToken_parcelAndUnparcelForTesting);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_UnguessableToken_JNI
