// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/task/TaskRunnerImpl

#ifndef org_chromium_base_task_TaskRunnerImpl_JNI
#define org_chromium_base_task_TaskRunnerImpl_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {

static jlong JNI_TaskRunnerImpl_Init(JNIEnv* env, jint taskRunnerType,
    jboolean prioritySetExplicitly,
    jint priority,
    jboolean mayBlock,
    jboolean useThreadPool,
    jbyte extensionId,
    const base::android::JavaParamRef<jbyteArray>& extensionData);

JNI_GENERATOR_EXPORT jlong Java_J_N_M5_1IQXaH(
    JNIEnv* env,
    jclass jcaller,
    jint taskRunnerType,
    jboolean prioritySetExplicitly,
    jint priority,
    jboolean mayBlock,
    jboolean useThreadPool,
    jbyte extensionId,
    jbyteArray extensionData) {
  return JNI_TaskRunnerImpl_Init(env, taskRunnerType, prioritySetExplicitly, priority, mayBlock,
      useThreadPool, extensionId, base::android::JavaParamRef<jbyteArray>(env, extensionData));
}

JNI_GENERATOR_EXPORT void Java_J_N_MERCiIV8(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTaskRunnerAndroid) {
  TaskRunnerAndroid* native = reinterpret_cast<TaskRunnerAndroid*>(nativeTaskRunnerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MGnQU_0002447(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTaskRunnerAndroid,
    jobject task,
    jlong delay) {
  TaskRunnerAndroid* native = reinterpret_cast<TaskRunnerAndroid*>(nativeTaskRunnerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PostDelayedTask");
  return native->PostDelayedTask(env, base::android::JavaParamRef<jobject>(env, task), delay);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MdFi6sVQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTaskRunnerAndroid) {
  TaskRunnerAndroid* native = reinterpret_cast<TaskRunnerAndroid*>(nativeTaskRunnerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "BelongsToCurrentThread", false);
  return native->BelongsToCurrentThread(env);
}


}  // namespace base

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_task_TaskRunnerImpl_JNI
