// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/ApplicationStatus

#ifndef org_chromium_base_ApplicationStatus_JNI
#define org_chromium_base_ApplicationStatus_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_ApplicationStatus[];
const char kClassPath_org_chromium_base_ApplicationStatus[] = "org/chromium/base/ApplicationStatus";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_ApplicationStatus_clazz(nullptr);
#ifndef org_chromium_base_ApplicationStatus_clazz_defined
#define org_chromium_base_ApplicationStatus_clazz_defined
inline jclass org_chromium_base_ApplicationStatus_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_ApplicationStatus,
      &g_org_chromium_base_ApplicationStatus_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static void JNI_ApplicationStatus_OnApplicationStateChange(JNIEnv* env, jint newState);

JNI_GENERATOR_EXPORT void Java_J_N_MiAkQ_1SU(
    JNIEnv* env,
    jclass jcaller,
    jint newState) {
  return JNI_ApplicationStatus_OnApplicationStateChange(env, newState);
}


static std::atomic<jmethodID> g_org_chromium_base_ApplicationStatus_getStateForApplication(nullptr);
static jint Java_ApplicationStatus_getStateForApplication(JNIEnv* env) {
  jclass clazz = org_chromium_base_ApplicationStatus_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_ApplicationStatus_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getStateForApplication",
          "()I",
          &g_org_chromium_base_ApplicationStatus_getStateForApplication);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_base_ApplicationStatus_hasVisibleActivities(nullptr);
static jboolean Java_ApplicationStatus_hasVisibleActivities(JNIEnv* env) {
  jclass clazz = org_chromium_base_ApplicationStatus_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_ApplicationStatus_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "hasVisibleActivities",
          "()Z",
          &g_org_chromium_base_ApplicationStatus_hasVisibleActivities);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_base_ApplicationStatus_registerThreadSafeNativeApplicationStateListener(nullptr);
static void Java_ApplicationStatus_registerThreadSafeNativeApplicationStateListener(JNIEnv* env) {
  jclass clazz = org_chromium_base_ApplicationStatus_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_ApplicationStatus_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "registerThreadSafeNativeApplicationStateListener",
          "()V",
          &g_org_chromium_base_ApplicationStatus_registerThreadSafeNativeApplicationStateListener);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

}  // namespace android
}  // namespace base

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_ApplicationStatus_JNI
