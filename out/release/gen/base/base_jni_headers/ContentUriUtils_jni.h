// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/ContentUriUtils

#ifndef org_chromium_base_ContentUriUtils_JNI
#define org_chromium_base_ContentUriUtils_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_ContentUriUtils[];
const char kClassPath_org_chromium_base_ContentUriUtils[] = "org/chromium/base/ContentUriUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_ContentUriUtils_clazz(nullptr);
#ifndef org_chromium_base_ContentUriUtils_clazz_defined
#define org_chromium_base_ContentUriUtils_clazz_defined
inline jclass org_chromium_base_ContentUriUtils_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_ContentUriUtils,
      &g_org_chromium_base_ContentUriUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID> g_org_chromium_base_ContentUriUtils_openContentUriForRead(nullptr);
static jint Java_ContentUriUtils_openContentUriForRead(JNIEnv* env, const
    base::android::JavaRef<jstring>& uriString) {
  jclass clazz = org_chromium_base_ContentUriUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_ContentUriUtils_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "openContentUriForRead",
          "(Ljava/lang/String;)I",
          &g_org_chromium_base_ContentUriUtils_openContentUriForRead);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, uriString.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_base_ContentUriUtils_contentUriExists(nullptr);
static jboolean Java_ContentUriUtils_contentUriExists(JNIEnv* env, const
    base::android::JavaRef<jstring>& uriString) {
  jclass clazz = org_chromium_base_ContentUriUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_ContentUriUtils_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "contentUriExists",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_base_ContentUriUtils_contentUriExists);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, uriString.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_base_ContentUriUtils_getMimeType(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_ContentUriUtils_getMimeType(JNIEnv* env,
    const base::android::JavaRef<jstring>& uriString) {
  jclass clazz = org_chromium_base_ContentUriUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_ContentUriUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getMimeType",
          "(Ljava/lang/String;)Ljava/lang/String;",
          &g_org_chromium_base_ContentUriUtils_getMimeType);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, uriString.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_base_ContentUriUtils_maybeGetDisplayName(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_ContentUriUtils_maybeGetDisplayName(JNIEnv*
    env, const base::android::JavaRef<jstring>& uriString) {
  jclass clazz = org_chromium_base_ContentUriUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_ContentUriUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "maybeGetDisplayName",
          "(Ljava/lang/String;)Ljava/lang/String;",
          &g_org_chromium_base_ContentUriUtils_maybeGetDisplayName);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, uriString.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_base_ContentUriUtils_delete(nullptr);
static jboolean Java_ContentUriUtils_delete(JNIEnv* env, const base::android::JavaRef<jstring>&
    uriString) {
  jclass clazz = org_chromium_base_ContentUriUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_ContentUriUtils_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "delete",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_base_ContentUriUtils_delete);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, uriString.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_base_ContentUriUtils_getContentUriFromFilePath(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_ContentUriUtils_getContentUriFromFilePath(JNIEnv* env, const
    base::android::JavaRef<jstring>& filePathString) {
  jclass clazz = org_chromium_base_ContentUriUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_ContentUriUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getContentUriFromFilePath",
          "(Ljava/lang/String;)Ljava/lang/String;",
          &g_org_chromium_base_ContentUriUtils_getContentUriFromFilePath);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, filePathString.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_ContentUriUtils_JNI
