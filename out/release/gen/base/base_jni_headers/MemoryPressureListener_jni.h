// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/MemoryPressureListener

#ifndef org_chromium_base_MemoryPressureListener_JNI
#define org_chromium_base_MemoryPressureListener_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_MemoryPressureListener[];
const char kClassPath_org_chromium_base_MemoryPressureListener[] =
    "org/chromium/base/MemoryPressureListener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_base_MemoryPressureListener_clazz(nullptr);
#ifndef org_chromium_base_MemoryPressureListener_clazz_defined
#define org_chromium_base_MemoryPressureListener_clazz_defined
inline jclass org_chromium_base_MemoryPressureListener_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_MemoryPressureListener,
      &g_org_chromium_base_MemoryPressureListener_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_MemoryPressureListener_OnMemoryPressure(JNIEnv* env, jint pressure);

JNI_GENERATOR_EXPORT void Java_J_N_MZJzyjAa(
    JNIEnv* env,
    jclass jcaller,
    jint pressure) {
  return JNI_MemoryPressureListener_OnMemoryPressure(env, pressure);
}


static std::atomic<jmethodID> g_org_chromium_base_MemoryPressureListener_addNativeCallback(nullptr);
static void Java_MemoryPressureListener_addNativeCallback(JNIEnv* env) {
  jclass clazz = org_chromium_base_MemoryPressureListener_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_MemoryPressureListener_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addNativeCallback",
          "()V",
          &g_org_chromium_base_MemoryPressureListener_addNativeCallback);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_MemoryPressureListener_JNI
