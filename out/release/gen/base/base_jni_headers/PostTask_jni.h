// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/task/PostTask

#ifndef org_chromium_base_task_PostTask_JNI
#define org_chromium_base_task_PostTask_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_task_PostTask[];
const char kClassPath_org_chromium_base_task_PostTask[] = "org/chromium/base/task/PostTask";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_task_PostTask_clazz(nullptr);
#ifndef org_chromium_base_task_PostTask_clazz_defined
#define org_chromium_base_task_PostTask_clazz_defined
inline jclass org_chromium_base_task_PostTask_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_task_PostTask,
      &g_org_chromium_base_task_PostTask_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {

static void JNI_PostTask_PostDelayedTask(JNIEnv* env, jboolean prioritySetExplicitly,
    jint priority,
    jboolean mayBlock,
    jboolean useThreadPool,
    jbyte extensionId,
    const base::android::JavaParamRef<jbyteArray>& extensionData,
    const base::android::JavaParamRef<jobject>& task,
    jlong delay);

JNI_GENERATOR_EXPORT void Java_J_N_MTILOhAQ(
    JNIEnv* env,
    jclass jcaller,
    jboolean prioritySetExplicitly,
    jint priority,
    jboolean mayBlock,
    jboolean useThreadPool,
    jbyte extensionId,
    jbyteArray extensionData,
    jobject task,
    jlong delay) {
  return JNI_PostTask_PostDelayedTask(env, prioritySetExplicitly, priority, mayBlock, useThreadPool,
      extensionId, base::android::JavaParamRef<jbyteArray>(env, extensionData),
      base::android::JavaParamRef<jobject>(env, task), delay);
}


static std::atomic<jmethodID> g_org_chromium_base_task_PostTask_onNativeSchedulerReady(nullptr);
static void Java_PostTask_onNativeSchedulerReady(JNIEnv* env) {
  jclass clazz = org_chromium_base_task_PostTask_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_task_PostTask_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onNativeSchedulerReady",
          "()V",
          &g_org_chromium_base_task_PostTask_onNativeSchedulerReady);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_base_task_PostTask_onNativeSchedulerShutdown(nullptr);
static void Java_PostTask_onNativeSchedulerShutdown(JNIEnv* env) {
  jclass clazz = org_chromium_base_task_PostTask_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_task_PostTask_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onNativeSchedulerShutdown",
          "()V",
          &g_org_chromium_base_task_PostTask_onNativeSchedulerShutdown);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

}  // namespace base

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_task_PostTask_JNI
