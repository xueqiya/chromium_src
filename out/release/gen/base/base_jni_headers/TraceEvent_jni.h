// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/TraceEvent

#ifndef org_chromium_base_TraceEvent_JNI
#define org_chromium_base_TraceEvent_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_TraceEvent[];
const char kClassPath_org_chromium_base_TraceEvent[] = "org/chromium/base/TraceEvent";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_TraceEvent_clazz(nullptr);
#ifndef org_chromium_base_TraceEvent_clazz_defined
#define org_chromium_base_TraceEvent_clazz_defined
inline jclass org_chromium_base_TraceEvent_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_TraceEvent,
      &g_org_chromium_base_TraceEvent_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static void JNI_TraceEvent_RegisterEnabledObserver(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MFFzPOVw(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TraceEvent_RegisterEnabledObserver(env);
}

static void JNI_TraceEvent_StartATrace(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MRN_00024Vid3(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TraceEvent_StartATrace(env);
}

static void JNI_TraceEvent_StopATrace(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MOgCa3d_00024(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TraceEvent_StopATrace(env);
}

static void JNI_TraceEvent_Instant(JNIEnv* env, const base::android::JavaParamRef<jstring>& name,
    const base::android::JavaParamRef<jstring>& arg);

JNI_GENERATOR_EXPORT void Java_J_N_ML40H8ed(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jstring arg) {
  return JNI_TraceEvent_Instant(env, base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, arg));
}

static void JNI_TraceEvent_Begin(JNIEnv* env, const base::android::JavaParamRef<jstring>& name,
    const base::android::JavaParamRef<jstring>& arg);

JNI_GENERATOR_EXPORT void Java_J_N_M9XfPu17(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jstring arg) {
  return JNI_TraceEvent_Begin(env, base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, arg));
}

static void JNI_TraceEvent_End(JNIEnv* env, const base::android::JavaParamRef<jstring>& name,
    const base::android::JavaParamRef<jstring>& arg);

JNI_GENERATOR_EXPORT void Java_J_N_Mw73xTww(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jstring arg) {
  return JNI_TraceEvent_End(env, base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, arg));
}

static void JNI_TraceEvent_BeginToplevel(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    target);

JNI_GENERATOR_EXPORT void Java_J_N_M_1y76mct(
    JNIEnv* env,
    jclass jcaller,
    jstring target) {
  return JNI_TraceEvent_BeginToplevel(env, base::android::JavaParamRef<jstring>(env, target));
}

static void JNI_TraceEvent_EndToplevel(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    target);

JNI_GENERATOR_EXPORT void Java_J_N_MLJecZJ9(
    JNIEnv* env,
    jclass jcaller,
    jstring target) {
  return JNI_TraceEvent_EndToplevel(env, base::android::JavaParamRef<jstring>(env, target));
}

static void JNI_TraceEvent_StartAsync(JNIEnv* env, const base::android::JavaParamRef<jstring>& name,
    jlong id);

JNI_GENERATOR_EXPORT void Java_J_N_MHopMqLX(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id) {
  return JNI_TraceEvent_StartAsync(env, base::android::JavaParamRef<jstring>(env, name), id);
}

static void JNI_TraceEvent_FinishAsync(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    name,
    jlong id);

JNI_GENERATOR_EXPORT void Java_J_N_MffNhCLU(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id) {
  return JNI_TraceEvent_FinishAsync(env, base::android::JavaParamRef<jstring>(env, name), id);
}


static std::atomic<jmethodID> g_org_chromium_base_TraceEvent_setEnabled(nullptr);
static void Java_TraceEvent_setEnabled(JNIEnv* env, jboolean enabled) {
  jclass clazz = org_chromium_base_TraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_TraceEvent_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setEnabled",
          "(Z)V",
          &g_org_chromium_base_TraceEvent_setEnabled);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, enabled);
}

}  // namespace android
}  // namespace base

// Step 4: Generated test functions (optional).


#endif  // org_chromium_base_TraceEvent_JNI
