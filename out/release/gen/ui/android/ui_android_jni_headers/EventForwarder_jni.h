// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/EventForwarder

#ifndef org_chromium_ui_base_EventForwarder_JNI
#define org_chromium_ui_base_EventForwarder_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_ui_base_EventForwarder[];
const char kClassPath_org_chromium_ui_base_EventForwarder[] = "org/chromium/ui/base/EventForwarder";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_ui_base_EventForwarder_clazz(nullptr);
#ifndef org_chromium_ui_base_EventForwarder_clazz_defined
#define org_chromium_ui_base_EventForwarder_clazz_defined
inline jclass org_chromium_ui_base_EventForwarder_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_base_EventForwarder,
      &g_org_chromium_ui_base_EventForwarder_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace ui {

JNI_GENERATOR_EXPORT jobject Java_J_N_M4_1mlka_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetJavaWindowAndroid", NULL);
  return native->GetJavaWindowAndroid(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mcw1yi1C(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jobject event,
    jlong timeMs,
    jint action,
    jint pointerCount,
    jint historySize,
    jint actionIndex,
    jfloat x0,
    jfloat y0,
    jfloat x1,
    jfloat y1,
    jint pointerId0,
    jint pointerId1,
    jfloat touchMajor0,
    jfloat touchMajor1,
    jfloat touchMinor0,
    jfloat touchMinor1,
    jfloat orientation0,
    jfloat orientation1,
    jfloat tilt0,
    jfloat tilt1,
    jfloat rawX,
    jfloat rawY,
    jint androidToolType0,
    jint androidToolType1,
    jint androidButtonState,
    jint androidMetaState,
    jboolean isTouchHandleEvent) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnTouchEvent", false);
  return native->OnTouchEvent(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, event), timeMs, action, pointerCount, historySize,
      actionIndex, x0, y0, x1, y1, pointerId0, pointerId1, touchMajor0, touchMajor1, touchMinor0,
      touchMinor1, orientation0, orientation1, tilt0, tilt1, rawX, rawY, androidToolType0,
      androidToolType1, androidButtonState, androidMetaState, isTouchHandleEvent);
}

JNI_GENERATOR_EXPORT void Java_J_N_M_000242oj6EQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jlong timeMs,
    jint action,
    jfloat x,
    jfloat y,
    jint pointerId,
    jfloat pressure,
    jfloat orientation,
    jfloat tilt,
    jint changedButton,
    jint buttonState,
    jint metaState,
    jint toolType) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnMouseEvent");
  return native->OnMouseEvent(env, base::android::JavaParamRef<jobject>(env, caller), timeMs,
      action, x, y, pointerId, pressure, orientation, tilt, changedButton, buttonState, metaState,
      toolType);
}

JNI_GENERATOR_EXPORT void Java_J_N_MZ1ZkPta(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jint action,
    jint x,
    jint y,
    jint screenX,
    jint screenY,
    jobjectArray mimeTypes,
    jstring content) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDragEvent");
  return native->OnDragEvent(env, base::android::JavaParamRef<jobject>(env, caller), action, x, y,
      screenX, screenY, base::android::JavaParamRef<jobjectArray>(env, mimeTypes),
      base::android::JavaParamRef<jstring>(env, content));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MtyC4Bd2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jint type,
    jlong timeMs,
    jfloat delta) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnGestureEvent", false);
  return native->OnGestureEvent(env, base::android::JavaParamRef<jobject>(env, caller), type,
      timeMs, delta);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MvdB06Zi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jobject event,
    jlong timeMs) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnGenericMotionEvent", false);
  return native->OnGenericMotionEvent(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, event), timeMs);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MRbfSEI1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jobject event,
    jint keyCode) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnKeyUp", false);
  return native->OnKeyUp(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, event), keyCode);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MZE_000240qqv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jobject event) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "DispatchKeyEvent", false);
  return native->DispatchKeyEvent(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, event));
}

JNI_GENERATOR_EXPORT void Java_J_N_MMwH_00024VBb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jfloat deltaX,
    jfloat deltaY) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollBy");
  return native->ScrollBy(env, base::android::JavaParamRef<jobject>(env, caller), deltaX, deltaY);
}

JNI_GENERATOR_EXPORT void Java_J_N_M6lTZ5w8(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jfloat x,
    jfloat y) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollTo");
  return native->ScrollTo(env, base::android::JavaParamRef<jobject>(env, caller), x, y);
}

JNI_GENERATOR_EXPORT void Java_J_N_MNnWXapV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jlong timeMs,
    jint x,
    jint y) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "DoubleTap");
  return native->DoubleTap(env, base::android::JavaParamRef<jobject>(env, caller), timeMs, x, y);
}

JNI_GENERATOR_EXPORT void Java_J_N_MT1C98PL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jlong timeMs,
    jfloat velocityX,
    jfloat velocityY,
    jboolean syntheticScroll,
    jboolean preventBoosting) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartFling");
  return native->StartFling(env, base::android::JavaParamRef<jobject>(env, caller), timeMs,
      velocityX, velocityY, syntheticScroll, preventBoosting);
}

JNI_GENERATOR_EXPORT void Java_J_N_MSvJWvYj(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeEventForwarder,
    jobject caller,
    jlong timeMs,
    jboolean preventBoosting) {
  EventForwarder* native = reinterpret_cast<EventForwarder*>(nativeEventForwarder);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelFling");
  return native->CancelFling(env, base::android::JavaParamRef<jobject>(env, caller), timeMs,
      preventBoosting);
}


static std::atomic<jmethodID> g_org_chromium_ui_base_EventForwarder_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_EventForwarder_create(JNIEnv* env, jlong
    nativeEventForwarder,
    jboolean isDragDropEnabled) {
  jclass clazz = org_chromium_ui_base_EventForwarder_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_base_EventForwarder_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(JZ)Lorg/chromium/ui/base/EventForwarder;",
          &g_org_chromium_ui_base_EventForwarder_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeEventForwarder, isDragDropEnabled);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_ui_base_EventForwarder_destroy(nullptr);
static void Java_EventForwarder_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_ui_base_EventForwarder_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_EventForwarder_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_ui_base_EventForwarder_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace ui

// Step 4: Generated test functions (optional).


#endif  // org_chromium_ui_base_EventForwarder_JNI
