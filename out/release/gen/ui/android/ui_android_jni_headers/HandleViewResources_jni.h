// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/resources/HandleViewResources

#ifndef org_chromium_ui_resources_HandleViewResources_JNI
#define org_chromium_ui_resources_HandleViewResources_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_ui_resources_HandleViewResources[];
const char kClassPath_org_chromium_ui_resources_HandleViewResources[] =
    "org/chromium/ui/resources/HandleViewResources";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_ui_resources_HandleViewResources_clazz(nullptr);
#ifndef org_chromium_ui_resources_HandleViewResources_clazz_defined
#define org_chromium_ui_resources_HandleViewResources_clazz_defined
inline jclass org_chromium_ui_resources_HandleViewResources_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_resources_HandleViewResources,
      &g_org_chromium_ui_resources_HandleViewResources_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace ui {


static std::atomic<jmethodID>
    g_org_chromium_ui_resources_HandleViewResources_getHandleHorizontalPaddingRatio(nullptr);
static jfloat Java_HandleViewResources_getHandleHorizontalPaddingRatio(JNIEnv* env) {
  jclass clazz = org_chromium_ui_resources_HandleViewResources_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_resources_HandleViewResources_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getHandleHorizontalPaddingRatio",
          "()F",
          &g_org_chromium_ui_resources_HandleViewResources_getHandleHorizontalPaddingRatio);

  jfloat ret =
      env->CallStaticFloatMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_ui_resources_HandleViewResources_getLeftHandleBitmap(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_HandleViewResources_getLeftHandleBitmap(JNIEnv* env, const base::android::JavaRef<jobject>&
    context) {
  jclass clazz = org_chromium_ui_resources_HandleViewResources_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_resources_HandleViewResources_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getLeftHandleBitmap",
          "(Landroid/content/Context;)Landroid/graphics/Bitmap;",
          &g_org_chromium_ui_resources_HandleViewResources_getLeftHandleBitmap);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, context.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_ui_resources_HandleViewResources_getCenterHandleBitmap(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_HandleViewResources_getCenterHandleBitmap(JNIEnv* env, const
    base::android::JavaRef<jobject>& context) {
  jclass clazz = org_chromium_ui_resources_HandleViewResources_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_resources_HandleViewResources_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getCenterHandleBitmap",
          "(Landroid/content/Context;)Landroid/graphics/Bitmap;",
          &g_org_chromium_ui_resources_HandleViewResources_getCenterHandleBitmap);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, context.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_ui_resources_HandleViewResources_getRightHandleBitmap(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_HandleViewResources_getRightHandleBitmap(JNIEnv* env, const
    base::android::JavaRef<jobject>& context) {
  jclass clazz = org_chromium_ui_resources_HandleViewResources_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_resources_HandleViewResources_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getRightHandleBitmap",
          "(Landroid/content/Context;)Landroid/graphics/Bitmap;",
          &g_org_chromium_ui_resources_HandleViewResources_getRightHandleBitmap);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, context.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace ui

// Step 4: Generated test functions (optional).


#endif  // org_chromium_ui_resources_HandleViewResources_JNI
