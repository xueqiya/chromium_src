// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/WindowAndroid

#ifndef org_chromium_ui_base_WindowAndroid_JNI
#define org_chromium_ui_base_WindowAndroid_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_ui_base_WindowAndroid[];
const char kClassPath_org_chromium_ui_base_WindowAndroid[] = "org/chromium/ui/base/WindowAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_ui_base_WindowAndroid_clazz(nullptr);
#ifndef org_chromium_ui_base_WindowAndroid_clazz_defined
#define org_chromium_ui_base_WindowAndroid_clazz_defined
inline jclass org_chromium_ui_base_WindowAndroid_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_base_WindowAndroid,
      &g_org_chromium_ui_base_WindowAndroid_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace ui {

static jlong JNI_WindowAndroid_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& caller,
    jint displayId,
    jfloat scrollFactor,
    jboolean windowIsWideColorGamut);

JNI_GENERATOR_EXPORT jlong Java_J_N_MFjTMMS_1(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jint displayId,
    jfloat scrollFactor,
    jboolean windowIsWideColorGamut) {
  return JNI_WindowAndroid_Init(env, base::android::JavaParamRef<jobject>(env, caller), displayId,
      scrollFactor, windowIsWideColorGamut);
}

JNI_GENERATOR_EXPORT void Java_J_N_MrnNdVRa(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWindowAndroid,
    jobject caller,
    jboolean visible) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnVisibilityChanged");
  return native->OnVisibilityChanged(env, base::android::JavaParamRef<jobject>(env, caller),
      visible);
}

JNI_GENERATOR_EXPORT void Java_J_N_MMLuxHp6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWindowAndroid,
    jobject caller) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnActivityStopped");
  return native->OnActivityStopped(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MbyUPhMo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWindowAndroid,
    jobject caller) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnActivityStarted");
  return native->OnActivityStarted(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MotttR54(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWindowAndroid,
    jobject caller,
    jboolean paused) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetVSyncPaused");
  return native->SetVSyncPaused(env, base::android::JavaParamRef<jobject>(env, caller), paused);
}

JNI_GENERATOR_EXPORT void Java_J_N_MWNjxKcW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWindowAndroid,
    jobject caller,
    jfloat refreshRate) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnUpdateRefreshRate");
  return native->OnUpdateRefreshRate(env, base::android::JavaParamRef<jobject>(env, caller),
      refreshRate);
}

JNI_GENERATOR_EXPORT void Java_J_N_MV00Qksi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWindowAndroid,
    jobject caller) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_ML_00024dVqbX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWindowAndroid,
    jobject caller,
    jboolean visible) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnCursorVisibilityChanged");
  return native->OnCursorVisibilityChanged(env, base::android::JavaParamRef<jobject>(env, caller),
      visible);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mpksm6S7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWindowAndroid,
    jobject caller,
    jboolean isOn) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnFallbackCursorModeToggled");
  return native->OnFallbackCursorModeToggled(env, base::android::JavaParamRef<jobject>(env, caller),
      isOn);
}

JNI_GENERATOR_EXPORT void Java_J_N_MTDQeb_00024o(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWindowAndroid,
    jobject caller,
    jfloatArray supportedRefreshRates) {
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSupportedRefreshRatesUpdated");
  return native->OnSupportedRefreshRatesUpdated(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jfloatArray>(env, supportedRefreshRates));
}


static std::atomic<jmethodID> g_org_chromium_ui_base_WindowAndroid_createForTesting(nullptr);
static jlong Java_WindowAndroid_createForTesting(JNIEnv* env) {
  jclass clazz = org_chromium_ui_base_WindowAndroid_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_base_WindowAndroid_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createForTesting",
          "()J",
          &g_org_chromium_ui_base_WindowAndroid_createForTesting);

  jlong ret =
      env->CallStaticLongMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_ui_base_WindowAndroid_clearNativePointer(nullptr);
static void Java_WindowAndroid_clearNativePointer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_ui_base_WindowAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "clearNativePointer",
          "()V",
          &g_org_chromium_ui_base_WindowAndroid_clearNativePointer);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_ui_base_WindowAndroid_hasPermission(nullptr);
static jboolean Java_WindowAndroid_hasPermission(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jstring>& permission) {
  jclass clazz = org_chromium_ui_base_WindowAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "hasPermission",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_ui_base_WindowAndroid_hasPermission);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, permission.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_ui_base_WindowAndroid_canRequestPermission(nullptr);
static jboolean Java_WindowAndroid_canRequestPermission(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& permission) {
  jclass clazz = org_chromium_ui_base_WindowAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "canRequestPermission",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_ui_base_WindowAndroid_canRequestPermission);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, permission.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_ui_base_WindowAndroid_onSelectionHandlesStateChanged(nullptr);
static void Java_WindowAndroid_onSelectionHandlesStateChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean active) {
  jclass clazz = org_chromium_ui_base_WindowAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onSelectionHandlesStateChanged",
          "(Z)V",
          &g_org_chromium_ui_base_WindowAndroid_onSelectionHandlesStateChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, active);
}

static std::atomic<jmethodID> g_org_chromium_ui_base_WindowAndroid_getNativePointer(nullptr);
static jlong Java_WindowAndroid_getNativePointer(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_ui_base_WindowAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativePointer",
          "()J",
          &g_org_chromium_ui_base_WindowAndroid_getNativePointer);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_ui_base_WindowAndroid_getWindowToken(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_WindowAndroid_getWindowToken(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_ui_base_WindowAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getWindowToken",
          "()Landroid/os/IBinder;",
          &g_org_chromium_ui_base_WindowAndroid_getWindowToken);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_ui_base_WindowAndroid_getRefreshRate(nullptr);
static jfloat Java_WindowAndroid_getRefreshRate(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_ui_base_WindowAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getRefreshRate",
          "()F",
          &g_org_chromium_ui_base_WindowAndroid_getRefreshRate);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_ui_base_WindowAndroid_getSupportedRefreshRates(nullptr);
static base::android::ScopedJavaLocalRef<jfloatArray>
    Java_WindowAndroid_getSupportedRefreshRates(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_ui_base_WindowAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSupportedRefreshRates",
          "()[F",
          &g_org_chromium_ui_base_WindowAndroid_getSupportedRefreshRates);

  jfloatArray ret =
      static_cast<jfloatArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jfloatArray>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_ui_base_WindowAndroid_setPreferredRefreshRate(nullptr);
static void Java_WindowAndroid_setPreferredRefreshRate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jfloat preferredRefreshRate) {
  jclass clazz = org_chromium_ui_base_WindowAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_base_WindowAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setPreferredRefreshRate",
          "(F)V",
          &g_org_chromium_ui_base_WindowAndroid_setPreferredRefreshRate);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, preferredRefreshRate);
}

}  // namespace ui

// Step 4: Generated test functions (optional).


#endif  // org_chromium_ui_base_WindowAndroid_JNI
