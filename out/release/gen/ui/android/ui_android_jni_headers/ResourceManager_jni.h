// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/resources/ResourceManager

#ifndef org_chromium_ui_resources_ResourceManager_JNI
#define org_chromium_ui_resources_ResourceManager_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_ui_resources_ResourceManager[];
const char kClassPath_org_chromium_ui_resources_ResourceManager[] =
    "org/chromium/ui/resources/ResourceManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_ui_resources_ResourceManager_clazz(nullptr);
#ifndef org_chromium_ui_resources_ResourceManager_clazz_defined
#define org_chromium_ui_resources_ResourceManager_clazz_defined
inline jclass org_chromium_ui_resources_ResourceManager_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_resources_ResourceManager,
      &g_org_chromium_ui_resources_ResourceManager_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace ui {

JNI_GENERATOR_EXPORT void Java_J_N_MM7E4tBk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeResourceManagerImpl,
    jobject caller,
    jint resType,
    jint resId,
    jobject bitmap,
    jint width,
    jint height,
    jlong nativeResource) {
  ResourceManagerImpl* native = reinterpret_cast<ResourceManagerImpl*>(nativeResourceManagerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnResourceReady");
  return native->OnResourceReady(env, base::android::JavaParamRef<jobject>(env, caller), resType,
      resId, base::android::JavaParamRef<jobject>(env, bitmap), width, height, nativeResource);
}

JNI_GENERATOR_EXPORT void Java_J_N_MxwZmAzJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeResourceManagerImpl,
    jobject caller,
    jint resType,
    jint resId) {
  ResourceManagerImpl* native = reinterpret_cast<ResourceManagerImpl*>(nativeResourceManagerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveResource");
  return native->RemoveResource(env, base::android::JavaParamRef<jobject>(env, caller), resType,
      resId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MnAVuP1v(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeResourceManagerImpl,
    jobject caller) {
  ResourceManagerImpl* native = reinterpret_cast<ResourceManagerImpl*>(nativeResourceManagerImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearTintedResourceCache");
  return native->ClearTintedResourceCache(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID> g_org_chromium_ui_resources_ResourceManager_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ResourceManager_create(JNIEnv* env, const
    base::android::JavaRef<jobject>& windowAndroid,
    jlong staticResourceManagerPtr) {
  jclass clazz = org_chromium_ui_resources_ResourceManager_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_resources_ResourceManager_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(Lorg/chromium/ui/base/WindowAndroid;J)Lorg/chromium/ui/resources/ResourceManager;",
          &g_org_chromium_ui_resources_ResourceManager_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, windowAndroid.obj(), staticResourceManagerPtr);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_ui_resources_ResourceManager_destroy(nullptr);
static void Java_ResourceManager_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_ui_resources_ResourceManager_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_resources_ResourceManager_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_ui_resources_ResourceManager_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_ui_resources_ResourceManager_resourceRequested(nullptr);
static void Java_ResourceManager_resourceRequested(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper resType,
    JniIntWrapper resId) {
  jclass clazz = org_chromium_ui_resources_ResourceManager_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_resources_ResourceManager_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "resourceRequested",
          "(II)V",
          &g_org_chromium_ui_resources_ResourceManager_resourceRequested);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(resType), as_jint(resId));
}

static std::atomic<jmethodID> g_org_chromium_ui_resources_ResourceManager_preloadResource(nullptr);
static void Java_ResourceManager_preloadResource(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper resType,
    JniIntWrapper resId) {
  jclass clazz = org_chromium_ui_resources_ResourceManager_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_resources_ResourceManager_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "preloadResource",
          "(II)V",
          &g_org_chromium_ui_resources_ResourceManager_preloadResource);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(resType), as_jint(resId));
}

static std::atomic<jmethodID> g_org_chromium_ui_resources_ResourceManager_getNativePtr(nullptr);
static jlong Java_ResourceManager_getNativePtr(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_ui_resources_ResourceManager_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_resources_ResourceManager_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativePtr",
          "()J",
          &g_org_chromium_ui_resources_ResourceManager_getNativePtr);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace ui

// Step 4: Generated test functions (optional).


#endif  // org_chromium_ui_resources_ResourceManager_JNI
