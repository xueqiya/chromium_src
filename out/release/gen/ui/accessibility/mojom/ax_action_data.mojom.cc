// ui/accessibility/mojom/ax_action_data.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "ui/accessibility/mojom/ax_action_data.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "ui/accessibility/mojom/ax_action_data.mojom-params-data.h"
#include "ui/accessibility/mojom/ax_action_data.mojom-shared-message-ids.h"

#include "ui/accessibility/mojom/ax_action_data.mojom-import-headers.h"


#ifndef UI_ACCESSIBILITY_MOJOM_AX_ACTION_DATA_MOJOM_JUMBO_H_
#define UI_ACCESSIBILITY_MOJOM_AX_ACTION_DATA_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "ui/accessibility/mojom/ax_tree_id_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#endif
namespace ax {
namespace mojom {
AXActionData::AXActionData()
    : action(),
      target_tree_id(),
      source_extension_id(),
      target_node_id(),
      request_id(),
      flags(),
      anchor_node_id(),
      anchor_offset(),
      focus_node_id(),
      focus_offset(),
      custom_action_id(),
      target_rect(),
      target_point(),
      value(),
      hit_test_event_to_fire(),
      horizontal_scroll_alignment(),
      vertical_scroll_alignment(),
      scroll_behavior() {}

AXActionData::AXActionData(
    ::ax::mojom::Action action_in,
    const ::ui::AXTreeID& target_tree_id_in,
    const std::string& source_extension_id_in,
    int32_t target_node_id_in,
    int32_t request_id_in,
    int32_t flags_in,
    int32_t anchor_node_id_in,
    int32_t anchor_offset_in,
    int32_t focus_node_id_in,
    int32_t focus_offset_in,
    int32_t custom_action_id_in,
    const ::gfx::Rect& target_rect_in,
    const ::gfx::Point& target_point_in,
    const std::string& value_in,
    ::ax::mojom::Event hit_test_event_to_fire_in,
    ::ax::mojom::ScrollAlignment horizontal_scroll_alignment_in,
    ::ax::mojom::ScrollAlignment vertical_scroll_alignment_in,
    ::ax::mojom::ScrollBehavior scroll_behavior_in)
    : action(std::move(action_in)),
      target_tree_id(std::move(target_tree_id_in)),
      source_extension_id(std::move(source_extension_id_in)),
      target_node_id(std::move(target_node_id_in)),
      request_id(std::move(request_id_in)),
      flags(std::move(flags_in)),
      anchor_node_id(std::move(anchor_node_id_in)),
      anchor_offset(std::move(anchor_offset_in)),
      focus_node_id(std::move(focus_node_id_in)),
      focus_offset(std::move(focus_offset_in)),
      custom_action_id(std::move(custom_action_id_in)),
      target_rect(std::move(target_rect_in)),
      target_point(std::move(target_point_in)),
      value(std::move(value_in)),
      hit_test_event_to_fire(std::move(hit_test_event_to_fire_in)),
      horizontal_scroll_alignment(std::move(horizontal_scroll_alignment_in)),
      vertical_scroll_alignment(std::move(vertical_scroll_alignment_in)),
      scroll_behavior(std::move(scroll_behavior_in)) {}

AXActionData::~AXActionData() = default;

bool AXActionData::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace ax

namespace mojo {


// static
bool StructTraits<::ax::mojom::AXActionData::DataView, ::ax::mojom::AXActionDataPtr>::Read(
    ::ax::mojom::AXActionData::DataView input,
    ::ax::mojom::AXActionDataPtr* output) {
  bool success = true;
  ::ax::mojom::AXActionDataPtr result(::ax::mojom::AXActionData::New());
  
      if (success && !input.ReadAction(&result->action))
        success = false;
      if (success && !input.ReadTargetTreeId(&result->target_tree_id))
        success = false;
      if (success && !input.ReadSourceExtensionId(&result->source_extension_id))
        success = false;
      if (success)
        result->target_node_id = input.target_node_id();
      if (success)
        result->request_id = input.request_id();
      if (success)
        result->flags = input.flags();
      if (success)
        result->anchor_node_id = input.anchor_node_id();
      if (success)
        result->anchor_offset = input.anchor_offset();
      if (success)
        result->focus_node_id = input.focus_node_id();
      if (success)
        result->focus_offset = input.focus_offset();
      if (success)
        result->custom_action_id = input.custom_action_id();
      if (success && !input.ReadTargetRect(&result->target_rect))
        success = false;
      if (success && !input.ReadTargetPoint(&result->target_point))
        success = false;
      if (success && !input.ReadValue(&result->value))
        success = false;
      if (success && !input.ReadHitTestEventToFire(&result->hit_test_event_to_fire))
        success = false;
      if (success && !input.ReadHorizontalScrollAlignment(&result->horizontal_scroll_alignment))
        success = false;
      if (success && !input.ReadVerticalScrollAlignment(&result->vertical_scroll_alignment))
        success = false;
      if (success && !input.ReadScrollBehavior(&result->scroll_behavior))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif