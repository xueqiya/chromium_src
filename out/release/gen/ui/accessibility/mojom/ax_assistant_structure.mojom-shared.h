// ui/accessibility/mojom/ax_assistant_structure.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_ACCESSIBILITY_MOJOM_AX_ASSISTANT_STRUCTURE_MOJOM_SHARED_H_
#define UI_ACCESSIBILITY_MOJOM_AX_ASSISTANT_STRUCTURE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "ui/accessibility/mojom/ax_assistant_structure.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "ui/gfx/range/mojom/range.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"







namespace ax {
namespace mojom {
class AssistantTreeDataView;

class AssistantNodeDataView;

class AssistantExtraDataView;



}  // namespace mojom
}  // namespace ax

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::ax::mojom::AssistantTreeDataView> {
  using Data = ::ax::mojom::internal::AssistantTree_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::ax::mojom::AssistantNodeDataView> {
  using Data = ::ax::mojom::internal::AssistantNode_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::ax::mojom::AssistantExtraDataView> {
  using Data = ::ax::mojom::internal::AssistantExtra_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace ax {
namespace mojom {
class AssistantTreeDataView {
 public:
  AssistantTreeDataView() {}

  AssistantTreeDataView(
      internal::AssistantTree_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNodesDataView(
      mojo::ArrayDataView<AssistantNodeDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNodes(UserType* output) {
    auto* pointer = data_->nodes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::ax::mojom::AssistantNodeDataView>>(
        pointer, output, context_);
  }
 private:
  internal::AssistantTree_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AssistantNodeDataView {
 public:
  AssistantNodeDataView() {}

  AssistantNodeDataView(
      internal::AssistantNode_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetChildrenIndicesDataView(
      mojo::ArrayDataView<int32_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadChildrenIndices(UserType* output) {
    auto* pointer = data_->children_indices.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int32_t>>(
        pointer, output, context_);
  }
  inline void GetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRect(UserType* output) {
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, context_);
  }
  inline void GetTextDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadText(UserType* output) {
    auto* pointer = data_->text.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  float text_size() const {
    return data_->text_size;
  }
  uint32_t color() const {
    return data_->color;
  }
  uint32_t bgcolor() const {
    return data_->bgcolor;
  }
  bool bold() const {
    return data_->bold;
  }
  bool italic() const {
    return data_->italic;
  }
  bool underline() const {
    return data_->underline;
  }
  bool line_through() const {
    return data_->line_through;
  }
  inline void GetSelectionDataView(
      ::gfx::mojom::RangeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSelection(UserType* output) {
    auto* pointer = data_->selection.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RangeDataView>(
        pointer, output, context_);
  }
  inline void GetClassNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadClassName(UserType* output) {
    auto* pointer = data_->class_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetRoleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRole(UserType* output) {
    auto* pointer = data_->role.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::AssistantNode_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AssistantExtraDataView {
 public:
  AssistantExtraDataView() {}

  AssistantExtraDataView(
      internal::AssistantExtra_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetBoundsPixelDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBoundsPixel(UserType* output) {
    auto* pointer = data_->bounds_pixel.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, context_);
  }
  inline void GetTitleDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTitle(UserType* output) {
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::AssistantExtra_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace ax

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ax::mojom::AssistantTreeDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::ax::mojom::AssistantTreeDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::ax::mojom::internal::AssistantTree_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::nodes(input)) in_nodes = Traits::nodes(input);
    typename decltype((*output)->nodes)::BaseType::BufferWriter
        nodes_writer;
    const mojo::internal::ContainerValidateParams nodes_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::ax::mojom::AssistantNodeDataView>>(
        in_nodes, buffer, &nodes_writer, &nodes_validate_params,
        context);
    (*output)->nodes.Set(
        nodes_writer.is_null() ? nullptr : nodes_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->nodes.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null nodes in AssistantTree struct");
  }

  static bool Deserialize(::ax::mojom::internal::AssistantTree_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::ax::mojom::AssistantTreeDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ax::mojom::AssistantNodeDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::ax::mojom::AssistantNodeDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::ax::mojom::internal::AssistantNode_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::children_indices(input)) in_children_indices = Traits::children_indices(input);
    typename decltype((*output)->children_indices)::BaseType::BufferWriter
        children_indices_writer;
    const mojo::internal::ContainerValidateParams children_indices_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<int32_t>>(
        in_children_indices, buffer, &children_indices_writer, &children_indices_validate_params,
        context);
    (*output)->children_indices.Set(
        children_indices_writer.is_null() ? nullptr : children_indices_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->children_indices.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null children_indices in AssistantNode struct");
    decltype(Traits::rect(input)) in_rect = Traits::rect(input);
    typename decltype((*output)->rect)::BaseType::BufferWriter
        rect_writer;
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_rect, buffer, &rect_writer, context);
    (*output)->rect.Set(
        rect_writer.is_null() ? nullptr : rect_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null rect in AssistantNode struct");
    decltype(Traits::text(input)) in_text = Traits::text(input);
    typename decltype((*output)->text)::BaseType::BufferWriter
        text_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_text, buffer, &text_writer, context);
    (*output)->text.Set(
        text_writer.is_null() ? nullptr : text_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->text.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null text in AssistantNode struct");
    (*output)->text_size = Traits::text_size(input);
    (*output)->color = Traits::color(input);
    (*output)->bgcolor = Traits::bgcolor(input);
    (*output)->bold = Traits::bold(input);
    (*output)->italic = Traits::italic(input);
    (*output)->underline = Traits::underline(input);
    (*output)->line_through = Traits::line_through(input);
    decltype(Traits::selection(input)) in_selection = Traits::selection(input);
    typename decltype((*output)->selection)::BaseType::BufferWriter
        selection_writer;
    mojo::internal::Serialize<::gfx::mojom::RangeDataView>(
        in_selection, buffer, &selection_writer, context);
    (*output)->selection.Set(
        selection_writer.is_null() ? nullptr : selection_writer.data());
    decltype(Traits::class_name(input)) in_class_name = Traits::class_name(input);
    typename decltype((*output)->class_name)::BaseType::BufferWriter
        class_name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_class_name, buffer, &class_name_writer, context);
    (*output)->class_name.Set(
        class_name_writer.is_null() ? nullptr : class_name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->class_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null class_name in AssistantNode struct");
    decltype(Traits::role(input)) in_role = Traits::role(input);
    typename decltype((*output)->role)::BaseType::BufferWriter
        role_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_role, buffer, &role_writer, context);
    (*output)->role.Set(
        role_writer.is_null() ? nullptr : role_writer.data());
  }

  static bool Deserialize(::ax::mojom::internal::AssistantNode_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::ax::mojom::AssistantNodeDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::ax::mojom::AssistantExtraDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::ax::mojom::AssistantExtraDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::ax::mojom::internal::AssistantExtra_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in AssistantExtra struct");
    decltype(Traits::bounds_pixel(input)) in_bounds_pixel = Traits::bounds_pixel(input);
    typename decltype((*output)->bounds_pixel)::BaseType::BufferWriter
        bounds_pixel_writer;
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_bounds_pixel, buffer, &bounds_pixel_writer, context);
    (*output)->bounds_pixel.Set(
        bounds_pixel_writer.is_null() ? nullptr : bounds_pixel_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->bounds_pixel.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bounds_pixel in AssistantExtra struct");
    decltype(Traits::title(input)) in_title = Traits::title(input);
    typename decltype((*output)->title)::BaseType::BufferWriter
        title_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_title, buffer, &title_writer, context);
    (*output)->title.Set(
        title_writer.is_null() ? nullptr : title_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->title.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null title in AssistantExtra struct");
  }

  static bool Deserialize(::ax::mojom::internal::AssistantExtra_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::ax::mojom::AssistantExtraDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace ax {
namespace mojom {

inline void AssistantTreeDataView::GetNodesDataView(
    mojo::ArrayDataView<AssistantNodeDataView>* output) {
  auto pointer = data_->nodes.Get();
  *output = mojo::ArrayDataView<AssistantNodeDataView>(pointer, context_);
}


inline void AssistantNodeDataView::GetChildrenIndicesDataView(
    mojo::ArrayDataView<int32_t>* output) {
  auto pointer = data_->children_indices.Get();
  *output = mojo::ArrayDataView<int32_t>(pointer, context_);
}
inline void AssistantNodeDataView::GetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, context_);
}
inline void AssistantNodeDataView::GetTextDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->text.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void AssistantNodeDataView::GetSelectionDataView(
    ::gfx::mojom::RangeDataView* output) {
  auto pointer = data_->selection.Get();
  *output = ::gfx::mojom::RangeDataView(pointer, context_);
}
inline void AssistantNodeDataView::GetClassNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->class_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AssistantNodeDataView::GetRoleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->role.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void AssistantExtraDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void AssistantExtraDataView::GetBoundsPixelDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->bounds_pixel.Get();
  *output = ::gfx::mojom::RectDataView(pointer, context_);
}
inline void AssistantExtraDataView::GetTitleDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->title.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}



}  // namespace mojom
}  // namespace ax

#endif  // UI_ACCESSIBILITY_MOJOM_AX_ASSISTANT_STRUCTURE_MOJOM_SHARED_H_