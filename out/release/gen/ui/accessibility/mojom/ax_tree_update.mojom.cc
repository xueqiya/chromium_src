// ui/accessibility/mojom/ax_tree_update.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "ui/accessibility/mojom/ax_tree_update.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "ui/accessibility/mojom/ax_tree_update.mojom-params-data.h"
#include "ui/accessibility/mojom/ax_tree_update.mojom-shared-message-ids.h"

#include "ui/accessibility/mojom/ax_tree_update.mojom-import-headers.h"


#ifndef UI_ACCESSIBILITY_MOJOM_AX_TREE_UPDATE_MOJOM_JUMBO_H_
#define UI_ACCESSIBILITY_MOJOM_AX_TREE_UPDATE_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "ui/accessibility/mojom/ax_node_data_mojom_traits.h"
#include "ui/accessibility/mojom/ax_relative_bounds_mojom_traits.h"
#include "ui/accessibility/mojom/ax_tree_data_mojom_traits.h"
#include "ui/accessibility/mojom/ax_tree_id_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "ui/gfx/mojom/transform_mojom_traits.h"
#endif
namespace ax {
namespace mojom {
AXTreeUpdate::AXTreeUpdate()
    : has_tree_data(),
      tree_data(),
      node_id_to_clear(),
      root_id(),
      nodes(),
      event_from() {}

AXTreeUpdate::AXTreeUpdate(
    bool has_tree_data_in,
    const ::ui::AXTreeData& tree_data_in,
    int32_t node_id_to_clear_in,
    int32_t root_id_in,
    std::vector<::ui::AXNodeData> nodes_in,
    ::ax::mojom::EventFrom event_from_in)
    : has_tree_data(std::move(has_tree_data_in)),
      tree_data(std::move(tree_data_in)),
      node_id_to_clear(std::move(node_id_to_clear_in)),
      root_id(std::move(root_id_in)),
      nodes(std::move(nodes_in)),
      event_from(std::move(event_from_in)) {}

AXTreeUpdate::~AXTreeUpdate() = default;

bool AXTreeUpdate::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace ax

namespace mojo {


// static
bool StructTraits<::ax::mojom::AXTreeUpdate::DataView, ::ax::mojom::AXTreeUpdatePtr>::Read(
    ::ax::mojom::AXTreeUpdate::DataView input,
    ::ax::mojom::AXTreeUpdatePtr* output) {
  bool success = true;
  ::ax::mojom::AXTreeUpdatePtr result(::ax::mojom::AXTreeUpdate::New());
  
      if (success)
        result->has_tree_data = input.has_tree_data();
      if (success && !input.ReadTreeData(&result->tree_data))
        success = false;
      if (success)
        result->node_id_to_clear = input.node_id_to_clear();
      if (success)
        result->root_id = input.root_id();
      if (success && !input.ReadNodes(&result->nodes))
        success = false;
      if (success && !input.ReadEventFrom(&result->event_from))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif