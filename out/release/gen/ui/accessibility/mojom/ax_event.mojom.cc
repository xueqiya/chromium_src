// ui/accessibility/mojom/ax_event.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "ui/accessibility/mojom/ax_event.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "ui/accessibility/mojom/ax_event.mojom-params-data.h"
#include "ui/accessibility/mojom/ax_event.mojom-shared-message-ids.h"

#include "ui/accessibility/mojom/ax_event.mojom-import-headers.h"


#ifndef UI_ACCESSIBILITY_MOJOM_AX_EVENT_MOJOM_JUMBO_H_
#define UI_ACCESSIBILITY_MOJOM_AX_EVENT_MOJOM_JUMBO_H_
#endif
namespace ax {
namespace mojom {
AXEvent::AXEvent()
    : event_type(),
      id(),
      event_from(),
      action_request_id() {}

AXEvent::AXEvent(
    ::ax::mojom::Event event_type_in,
    int32_t id_in,
    ::ax::mojom::EventFrom event_from_in,
    int32_t action_request_id_in)
    : event_type(std::move(event_type_in)),
      id(std::move(id_in)),
      event_from(std::move(event_from_in)),
      action_request_id(std::move(action_request_id_in)) {}

AXEvent::~AXEvent() = default;

bool AXEvent::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace ax

namespace mojo {


// static
bool StructTraits<::ax::mojom::AXEvent::DataView, ::ax::mojom::AXEventPtr>::Read(
    ::ax::mojom::AXEvent::DataView input,
    ::ax::mojom::AXEventPtr* output) {
  bool success = true;
  ::ax::mojom::AXEventPtr result(::ax::mojom::AXEvent::New());
  
      if (success && !input.ReadEventType(&result->event_type))
        success = false;
      if (success)
        result->id = input.id();
      if (success && !input.ReadEventFrom(&result->event_from))
        success = false;
      if (success)
        result->action_request_id = input.action_request_id();
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif