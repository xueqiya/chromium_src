// ui/accessibility/mojom/ax_tree_data.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "ui/accessibility/mojom/ax_tree_data.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "ui/accessibility/mojom/ax_tree_data.mojom-params-data.h"
#include "ui/accessibility/mojom/ax_tree_data.mojom-shared-message-ids.h"

#include "ui/accessibility/mojom/ax_tree_data.mojom-import-headers.h"


#ifndef UI_ACCESSIBILITY_MOJOM_AX_TREE_DATA_MOJOM_JUMBO_H_
#define UI_ACCESSIBILITY_MOJOM_AX_TREE_DATA_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "ui/accessibility/mojom/ax_tree_id_mojom_traits.h"
#endif
namespace ax {
namespace mojom {
AXTreeData::AXTreeData()
    : tree_id(),
      parent_tree_id(),
      focused_tree_id(),
      doctype(),
      loaded(),
      loading_progress(),
      mimetype(),
      title(),
      url(),
      focus_id(),
      sel_is_backward(),
      sel_anchor_object_id(),
      sel_anchor_offset(),
      sel_anchor_affinity(),
      sel_focus_object_id(),
      sel_focus_offset(),
      sel_focus_affinity() {}

AXTreeData::AXTreeData(
    const ::ui::AXTreeID& tree_id_in,
    const ::ui::AXTreeID& parent_tree_id_in,
    const ::ui::AXTreeID& focused_tree_id_in,
    const std::string& doctype_in,
    bool loaded_in,
    float loading_progress_in,
    const std::string& mimetype_in,
    const std::string& title_in,
    const std::string& url_in,
    int32_t focus_id_in,
    bool sel_is_backward_in,
    int32_t sel_anchor_object_id_in,
    int32_t sel_anchor_offset_in,
    ::ax::mojom::TextAffinity sel_anchor_affinity_in,
    int32_t sel_focus_object_id_in,
    int32_t sel_focus_offset_in,
    ::ax::mojom::TextAffinity sel_focus_affinity_in)
    : tree_id(std::move(tree_id_in)),
      parent_tree_id(std::move(parent_tree_id_in)),
      focused_tree_id(std::move(focused_tree_id_in)),
      doctype(std::move(doctype_in)),
      loaded(std::move(loaded_in)),
      loading_progress(std::move(loading_progress_in)),
      mimetype(std::move(mimetype_in)),
      title(std::move(title_in)),
      url(std::move(url_in)),
      focus_id(std::move(focus_id_in)),
      sel_is_backward(std::move(sel_is_backward_in)),
      sel_anchor_object_id(std::move(sel_anchor_object_id_in)),
      sel_anchor_offset(std::move(sel_anchor_offset_in)),
      sel_anchor_affinity(std::move(sel_anchor_affinity_in)),
      sel_focus_object_id(std::move(sel_focus_object_id_in)),
      sel_focus_offset(std::move(sel_focus_offset_in)),
      sel_focus_affinity(std::move(sel_focus_affinity_in)) {}

AXTreeData::~AXTreeData() = default;

bool AXTreeData::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace ax

namespace mojo {


// static
bool StructTraits<::ax::mojom::AXTreeData::DataView, ::ax::mojom::AXTreeDataPtr>::Read(
    ::ax::mojom::AXTreeData::DataView input,
    ::ax::mojom::AXTreeDataPtr* output) {
  bool success = true;
  ::ax::mojom::AXTreeDataPtr result(::ax::mojom::AXTreeData::New());
  
      if (success && !input.ReadTreeId(&result->tree_id))
        success = false;
      if (success && !input.ReadParentTreeId(&result->parent_tree_id))
        success = false;
      if (success && !input.ReadFocusedTreeId(&result->focused_tree_id))
        success = false;
      if (success && !input.ReadDoctype(&result->doctype))
        success = false;
      if (success)
        result->loaded = input.loaded();
      if (success)
        result->loading_progress = input.loading_progress();
      if (success && !input.ReadMimetype(&result->mimetype))
        success = false;
      if (success && !input.ReadTitle(&result->title))
        success = false;
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success)
        result->focus_id = input.focus_id();
      if (success)
        result->sel_is_backward = input.sel_is_backward();
      if (success)
        result->sel_anchor_object_id = input.sel_anchor_object_id();
      if (success)
        result->sel_anchor_offset = input.sel_anchor_offset();
      if (success && !input.ReadSelAnchorAffinity(&result->sel_anchor_affinity))
        success = false;
      if (success)
        result->sel_focus_object_id = input.sel_focus_object_id();
      if (success)
        result->sel_focus_offset = input.sel_focus_offset();
      if (success && !input.ReadSelFocusAffinity(&result->sel_focus_affinity))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif