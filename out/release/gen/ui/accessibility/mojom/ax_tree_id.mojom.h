// ui/accessibility/mojom/ax_tree_id.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_ACCESSIBILITY_MOJOM_AX_TREE_ID_MOJOM_H_
#define UI_ACCESSIBILITY_MOJOM_AX_TREE_ID_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "ui/accessibility/mojom/ax_tree_id.mojom-shared.h"
#include "ui/accessibility/mojom/ax_tree_id.mojom-forward.h"
#include "ui/accessibility/ax_enums.mojom-forward.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-forward.h"
#include <string>
#include <vector>




#include "ui/accessibility/ax_tree_id.h"




namespace ax {
namespace mojom {





class  AXTreeID {
 public:
  using DataView = AXTreeIDDataView;
  using Data_ = internal::AXTreeID_Data;
  using Tag = Data_::AXTreeID_Tag;

  static AXTreeIDPtr New() {
    return AXTreeIDPtr(base::in_place);
  }
  // Construct an instance holding |unknown|.
  static AXTreeIDPtr
  NewUnknown(
      uint8_t unknown) {
    auto result = AXTreeIDPtr(base::in_place);
    result->set_unknown(std::move(unknown));
    return result;
  }
  // Construct an instance holding |token|.
  static AXTreeIDPtr
  NewToken(
      const ::base::UnguessableToken& token) {
    auto result = AXTreeIDPtr(base::in_place);
    result->set_token(std::move(token));
    return result;
  }

  template <typename U>
  static AXTreeIDPtr From(const U& u) {
    return mojo::TypeConverter<AXTreeIDPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AXTreeID>::Convert(*this);
  }

  AXTreeID();
  ~AXTreeID();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = AXTreeIDPtr>
  AXTreeIDPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, AXTreeID>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  Tag which() const {
    return tag_;
  }


  
  bool is_unknown() const { return tag_ == Tag::UNKNOWN; }

  
  uint8_t get_unknown() const {
    DCHECK(tag_ == Tag::UNKNOWN);
    return data_.unknown;
  }

  
  void set_unknown(
      uint8_t unknown);
  
  bool is_token() const { return tag_ == Tag::TOKEN; }

  
  ::base::UnguessableToken& get_token() const {
    DCHECK(tag_ == Tag::TOKEN);
    return *(data_.token);
  }

  
  void set_token(
      const ::base::UnguessableToken& token);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AXTreeID::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<AXTreeID::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    uint8_t unknown;
    ::base::UnguessableToken* token;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};

template <typename UnionPtrType>
AXTreeIDPtr AXTreeID::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::UNKNOWN:
      rv->set_unknown(mojo::Clone(data_.unknown));
      break;
    case Tag::TOKEN:
      rv->set_token(mojo::Clone(*data_.token));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, AXTreeID>::value>::type*>
bool AXTreeID::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::UNKNOWN:
      return mojo::Equals(data_.unknown, other.data_.unknown);
    case Tag::TOKEN:
      return mojo::Equals(*(data_.token), *(other.data_.token));
  }

  return false;
}


}  // namespace mojom
}  // namespace ax

namespace mojo {


template <>
struct  UnionTraits<::ax::mojom::AXTreeID::DataView,
                                        ::ax::mojom::AXTreeIDPtr> {
  static bool IsNull(const ::ax::mojom::AXTreeIDPtr& input) { return !input; }
  static void SetToNull(::ax::mojom::AXTreeIDPtr* output) { output->reset(); }

  static ::ax::mojom::AXTreeID::Tag GetTag(const ::ax::mojom::AXTreeIDPtr& input) {
    return input->which();
  }

  static  uint8_t unknown(const ::ax::mojom::AXTreeIDPtr& input) {
    return input->get_unknown();
  }

  static const ::base::UnguessableToken& token(const ::ax::mojom::AXTreeIDPtr& input) {
    return input->get_token();
  }

  static bool Read(::ax::mojom::AXTreeID::DataView input, ::ax::mojom::AXTreeIDPtr* output);
};

}  // namespace mojo

#endif  // UI_ACCESSIBILITY_MOJOM_AX_TREE_ID_MOJOM_H_