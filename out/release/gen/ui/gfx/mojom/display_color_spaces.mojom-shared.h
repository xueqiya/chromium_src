// ui/gfx/mojom/display_color_spaces.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_GFX_MOJOM_DISPLAY_COLOR_SPACES_MOJOM_SHARED_H_
#define UI_GFX_MOJOM_DISPLAY_COLOR_SPACES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "ui/gfx/mojom/display_color_spaces.mojom-shared-internal.h"
#include "ui/gfx/mojom/color_space.mojom-shared.h"







namespace gfx {
namespace mojom {
class DisplayColorSpacesDataView;



}  // namespace mojom
}  // namespace gfx

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::gfx::mojom::DisplayColorSpacesDataView> {
  using Data = ::gfx::mojom::internal::DisplayColorSpaces_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace gfx {
namespace mojom {
class DisplayColorSpacesDataView {
 public:
  DisplayColorSpacesDataView() {}

  DisplayColorSpacesDataView(
      internal::DisplayColorSpaces_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSrgbDataView(
      ::gfx::mojom::ColorSpaceDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSrgb(UserType* output) {
    auto* pointer = data_->srgb.Get();
    return mojo::internal::Deserialize<::gfx::mojom::ColorSpaceDataView>(
        pointer, output, context_);
  }
  inline void GetWcgOpaqueDataView(
      ::gfx::mojom::ColorSpaceDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWcgOpaque(UserType* output) {
    auto* pointer = data_->wcg_opaque.Get();
    return mojo::internal::Deserialize<::gfx::mojom::ColorSpaceDataView>(
        pointer, output, context_);
  }
  inline void GetWcgTransparentDataView(
      ::gfx::mojom::ColorSpaceDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWcgTransparent(UserType* output) {
    auto* pointer = data_->wcg_transparent.Get();
    return mojo::internal::Deserialize<::gfx::mojom::ColorSpaceDataView>(
        pointer, output, context_);
  }
  inline void GetHdrOpaqueDataView(
      ::gfx::mojom::ColorSpaceDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHdrOpaque(UserType* output) {
    auto* pointer = data_->hdr_opaque.Get();
    return mojo::internal::Deserialize<::gfx::mojom::ColorSpaceDataView>(
        pointer, output, context_);
  }
  inline void GetHdrTransparentDataView(
      ::gfx::mojom::ColorSpaceDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHdrTransparent(UserType* output) {
    auto* pointer = data_->hdr_transparent.Get();
    return mojo::internal::Deserialize<::gfx::mojom::ColorSpaceDataView>(
        pointer, output, context_);
  }
  float sdr_white_level() const {
    return data_->sdr_white_level;
  }
 private:
  internal::DisplayColorSpaces_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace gfx

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::gfx::mojom::DisplayColorSpacesDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::gfx::mojom::DisplayColorSpacesDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::gfx::mojom::internal::DisplayColorSpaces_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::srgb(input)) in_srgb = Traits::srgb(input);
    typename decltype((*output)->srgb)::BaseType::BufferWriter
        srgb_writer;
    mojo::internal::Serialize<::gfx::mojom::ColorSpaceDataView>(
        in_srgb, buffer, &srgb_writer, context);
    (*output)->srgb.Set(
        srgb_writer.is_null() ? nullptr : srgb_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->srgb.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null srgb in DisplayColorSpaces struct");
    decltype(Traits::wcg_opaque(input)) in_wcg_opaque = Traits::wcg_opaque(input);
    typename decltype((*output)->wcg_opaque)::BaseType::BufferWriter
        wcg_opaque_writer;
    mojo::internal::Serialize<::gfx::mojom::ColorSpaceDataView>(
        in_wcg_opaque, buffer, &wcg_opaque_writer, context);
    (*output)->wcg_opaque.Set(
        wcg_opaque_writer.is_null() ? nullptr : wcg_opaque_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->wcg_opaque.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null wcg_opaque in DisplayColorSpaces struct");
    decltype(Traits::wcg_transparent(input)) in_wcg_transparent = Traits::wcg_transparent(input);
    typename decltype((*output)->wcg_transparent)::BaseType::BufferWriter
        wcg_transparent_writer;
    mojo::internal::Serialize<::gfx::mojom::ColorSpaceDataView>(
        in_wcg_transparent, buffer, &wcg_transparent_writer, context);
    (*output)->wcg_transparent.Set(
        wcg_transparent_writer.is_null() ? nullptr : wcg_transparent_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->wcg_transparent.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null wcg_transparent in DisplayColorSpaces struct");
    decltype(Traits::hdr_opaque(input)) in_hdr_opaque = Traits::hdr_opaque(input);
    typename decltype((*output)->hdr_opaque)::BaseType::BufferWriter
        hdr_opaque_writer;
    mojo::internal::Serialize<::gfx::mojom::ColorSpaceDataView>(
        in_hdr_opaque, buffer, &hdr_opaque_writer, context);
    (*output)->hdr_opaque.Set(
        hdr_opaque_writer.is_null() ? nullptr : hdr_opaque_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->hdr_opaque.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null hdr_opaque in DisplayColorSpaces struct");
    decltype(Traits::hdr_transparent(input)) in_hdr_transparent = Traits::hdr_transparent(input);
    typename decltype((*output)->hdr_transparent)::BaseType::BufferWriter
        hdr_transparent_writer;
    mojo::internal::Serialize<::gfx::mojom::ColorSpaceDataView>(
        in_hdr_transparent, buffer, &hdr_transparent_writer, context);
    (*output)->hdr_transparent.Set(
        hdr_transparent_writer.is_null() ? nullptr : hdr_transparent_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->hdr_transparent.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null hdr_transparent in DisplayColorSpaces struct");
    (*output)->sdr_white_level = Traits::sdr_white_level(input);
  }

  static bool Deserialize(::gfx::mojom::internal::DisplayColorSpaces_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::gfx::mojom::DisplayColorSpacesDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace gfx {
namespace mojom {

inline void DisplayColorSpacesDataView::GetSrgbDataView(
    ::gfx::mojom::ColorSpaceDataView* output) {
  auto pointer = data_->srgb.Get();
  *output = ::gfx::mojom::ColorSpaceDataView(pointer, context_);
}
inline void DisplayColorSpacesDataView::GetWcgOpaqueDataView(
    ::gfx::mojom::ColorSpaceDataView* output) {
  auto pointer = data_->wcg_opaque.Get();
  *output = ::gfx::mojom::ColorSpaceDataView(pointer, context_);
}
inline void DisplayColorSpacesDataView::GetWcgTransparentDataView(
    ::gfx::mojom::ColorSpaceDataView* output) {
  auto pointer = data_->wcg_transparent.Get();
  *output = ::gfx::mojom::ColorSpaceDataView(pointer, context_);
}
inline void DisplayColorSpacesDataView::GetHdrOpaqueDataView(
    ::gfx::mojom::ColorSpaceDataView* output) {
  auto pointer = data_->hdr_opaque.Get();
  *output = ::gfx::mojom::ColorSpaceDataView(pointer, context_);
}
inline void DisplayColorSpacesDataView::GetHdrTransparentDataView(
    ::gfx::mojom::ColorSpaceDataView* output) {
  auto pointer = data_->hdr_transparent.Get();
  *output = ::gfx::mojom::ColorSpaceDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace gfx

#endif  // UI_GFX_MOJOM_DISPLAY_COLOR_SPACES_MOJOM_SHARED_H_