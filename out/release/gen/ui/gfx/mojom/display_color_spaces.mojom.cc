// ui/gfx/mojom/display_color_spaces.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "ui/gfx/mojom/display_color_spaces.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "ui/gfx/mojom/display_color_spaces.mojom-params-data.h"
#include "ui/gfx/mojom/display_color_spaces.mojom-shared-message-ids.h"

#include "ui/gfx/mojom/display_color_spaces.mojom-import-headers.h"


#ifndef UI_GFX_MOJOM_DISPLAY_COLOR_SPACES_MOJOM_JUMBO_H_
#define UI_GFX_MOJOM_DISPLAY_COLOR_SPACES_MOJOM_JUMBO_H_
#include "ui/gfx/mojom/color_space_mojom_traits.h"
#endif
namespace gfx {
namespace mojom {
DisplayColorSpaces::DisplayColorSpaces()
    : srgb(),
      wcg_opaque(),
      wcg_transparent(),
      hdr_opaque(),
      hdr_transparent(),
      sdr_white_level() {}

DisplayColorSpaces::DisplayColorSpaces(
    const ::gfx::ColorSpace& srgb_in,
    const ::gfx::ColorSpace& wcg_opaque_in,
    const ::gfx::ColorSpace& wcg_transparent_in,
    const ::gfx::ColorSpace& hdr_opaque_in,
    const ::gfx::ColorSpace& hdr_transparent_in,
    float sdr_white_level_in)
    : srgb(std::move(srgb_in)),
      wcg_opaque(std::move(wcg_opaque_in)),
      wcg_transparent(std::move(wcg_transparent_in)),
      hdr_opaque(std::move(hdr_opaque_in)),
      hdr_transparent(std::move(hdr_transparent_in)),
      sdr_white_level(std::move(sdr_white_level_in)) {}

DisplayColorSpaces::~DisplayColorSpaces() = default;

bool DisplayColorSpaces::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace gfx

namespace mojo {


// static
bool StructTraits<::gfx::mojom::DisplayColorSpaces::DataView, ::gfx::mojom::DisplayColorSpacesPtr>::Read(
    ::gfx::mojom::DisplayColorSpaces::DataView input,
    ::gfx::mojom::DisplayColorSpacesPtr* output) {
  bool success = true;
  ::gfx::mojom::DisplayColorSpacesPtr result(::gfx::mojom::DisplayColorSpaces::New());
  
      if (success && !input.ReadSrgb(&result->srgb))
        success = false;
      if (success && !input.ReadWcgOpaque(&result->wcg_opaque))
        success = false;
      if (success && !input.ReadWcgTransparent(&result->wcg_transparent))
        success = false;
      if (success && !input.ReadHdrOpaque(&result->hdr_opaque))
        success = false;
      if (success && !input.ReadHdrTransparent(&result->hdr_transparent))
        success = false;
      if (success)
        result->sdr_white_level = input.sdr_white_level();
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif