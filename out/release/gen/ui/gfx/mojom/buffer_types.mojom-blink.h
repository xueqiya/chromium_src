// ui/gfx/mojom/buffer_types.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef UI_GFX_MOJOM_BUFFER_TYPES_MOJOM_BLINK_H_
#define UI_GFX_MOJOM_BUFFER_TYPES_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "ui/gfx/mojom/buffer_types.mojom-shared.h"
#include "ui/gfx/mojom/buffer_types.mojom-blink-forward.h"
#include "mojo/public/mojom/base/shared_memory.mojom-blink.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"


#include "ui/gfx/buffer_types.h"
#include "ui/gfx/gpu_memory_buffer.h"
#include "ui/gfx/native_pixmap_handle.h"




namespace WTF {
struct gfx_mojom_internal_BufferFormat_DataHashFn {
  static unsigned GetHash(const ::gfx::mojom::BufferFormat& value) {
    using utype = std::underlying_type<::gfx::mojom::BufferFormat>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::gfx::mojom::BufferFormat& left, const ::gfx::mojom::BufferFormat& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::gfx::mojom::BufferFormat>
    : public GenericHashTraits<::gfx::mojom::BufferFormat> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::gfx::mojom::BufferFormat& value) {
    return value == static_cast<::gfx::mojom::BufferFormat>(-1000000);
  }
  static void ConstructDeletedValue(::gfx::mojom::BufferFormat& slot, bool) {
    slot = static_cast<::gfx::mojom::BufferFormat>(-1000001);
  }
  static bool IsDeletedValue(const ::gfx::mojom::BufferFormat& value) {
    return value == static_cast<::gfx::mojom::BufferFormat>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct gfx_mojom_internal_BufferUsage_DataHashFn {
  static unsigned GetHash(const ::gfx::mojom::BufferUsage& value) {
    using utype = std::underlying_type<::gfx::mojom::BufferUsage>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::gfx::mojom::BufferUsage& left, const ::gfx::mojom::BufferUsage& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::gfx::mojom::BufferUsage>
    : public GenericHashTraits<::gfx::mojom::BufferUsage> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool hasIsEmptyValueFunction = true;
  static bool IsEmptyValue(const ::gfx::mojom::BufferUsage& value) {
    return value == static_cast<::gfx::mojom::BufferUsage>(-1000000);
  }
  static void ConstructDeletedValue(::gfx::mojom::BufferUsage& slot, bool) {
    slot = static_cast<::gfx::mojom::BufferUsage>(-1000001);
  }
  static bool IsDeletedValue(const ::gfx::mojom::BufferUsage& value) {
    return value == static_cast<::gfx::mojom::BufferUsage>(-1000001);
  }
};
}  // namespace WTF


namespace gfx {
namespace mojom {
namespace blink {





class  BufferUsageAndFormat {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<BufferUsageAndFormat, T>::value>;
  using DataView = BufferUsageAndFormatDataView;
  using Data_ = internal::BufferUsageAndFormat_Data;

  template <typename... Args>
  static BufferUsageAndFormatPtr New(Args&&... args) {
    return BufferUsageAndFormatPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static BufferUsageAndFormatPtr From(const U& u) {
    return mojo::TypeConverter<BufferUsageAndFormatPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, BufferUsageAndFormat>::Convert(*this);
  }


  BufferUsageAndFormat();

  BufferUsageAndFormat(
      gfx::BufferUsage usage,
      gfx::BufferFormat format);

  ~BufferUsageAndFormat();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = BufferUsageAndFormatPtr>
  BufferUsageAndFormatPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, BufferUsageAndFormat::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        BufferUsageAndFormat::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        BufferUsageAndFormat::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::BufferUsageAndFormat_UnserializedMessageContext<
            UserType, BufferUsageAndFormat::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<BufferUsageAndFormat::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return BufferUsageAndFormat::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::BufferUsageAndFormat_UnserializedMessageContext<
            UserType, BufferUsageAndFormat::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<BufferUsageAndFormat::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  gfx::BufferUsage usage;
  
  gfx::BufferFormat format;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, BufferUsageAndFormat::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, BufferUsageAndFormat::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, BufferUsageAndFormat::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, BufferUsageAndFormat::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  GpuMemoryBufferId {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<GpuMemoryBufferId, T>::value>;
  using DataView = GpuMemoryBufferIdDataView;
  using Data_ = internal::GpuMemoryBufferId_Data;

  template <typename... Args>
  static GpuMemoryBufferIdPtr New(Args&&... args) {
    return GpuMemoryBufferIdPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static GpuMemoryBufferIdPtr From(const U& u) {
    return mojo::TypeConverter<GpuMemoryBufferIdPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, GpuMemoryBufferId>::Convert(*this);
  }


  GpuMemoryBufferId();

  explicit GpuMemoryBufferId(
      int32_t id);

  ~GpuMemoryBufferId();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = GpuMemoryBufferIdPtr>
  GpuMemoryBufferIdPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, GpuMemoryBufferId::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        GpuMemoryBufferId::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        GpuMemoryBufferId::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::GpuMemoryBufferId_UnserializedMessageContext<
            UserType, GpuMemoryBufferId::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<GpuMemoryBufferId::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return GpuMemoryBufferId::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::GpuMemoryBufferId_UnserializedMessageContext<
            UserType, GpuMemoryBufferId::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<GpuMemoryBufferId::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  int32_t id;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, GpuMemoryBufferId::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, GpuMemoryBufferId::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, GpuMemoryBufferId::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, GpuMemoryBufferId::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class  GpuMemoryBufferPlatformHandle {
 public:
  using DataView = GpuMemoryBufferPlatformHandleDataView;
  using Data_ = internal::GpuMemoryBufferPlatformHandle_Data;
  using Tag = Data_::GpuMemoryBufferPlatformHandle_Tag;

  static GpuMemoryBufferPlatformHandlePtr New() {
    return GpuMemoryBufferPlatformHandlePtr(base::in_place);
  }
  // Construct an instance holding |shared_memory_handle|.
  static GpuMemoryBufferPlatformHandlePtr
  NewSharedMemoryHandle(
      ::base::UnsafeSharedMemoryRegion shared_memory_handle) {
    auto result = GpuMemoryBufferPlatformHandlePtr(base::in_place);
    result->set_shared_memory_handle(std::move(shared_memory_handle));
    return result;
  }
  // Construct an instance holding |android_hardware_buffer_handle|.
  static GpuMemoryBufferPlatformHandlePtr
  NewAndroidHardwareBufferHandle(
      AHardwareBufferHandlePtr android_hardware_buffer_handle) {
    auto result = GpuMemoryBufferPlatformHandlePtr(base::in_place);
    result->set_android_hardware_buffer_handle(std::move(android_hardware_buffer_handle));
    return result;
  }

  template <typename U>
  static GpuMemoryBufferPlatformHandlePtr From(const U& u) {
    return mojo::TypeConverter<GpuMemoryBufferPlatformHandlePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, GpuMemoryBufferPlatformHandle>::Convert(*this);
  }

  GpuMemoryBufferPlatformHandle();
  ~GpuMemoryBufferPlatformHandle();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = GpuMemoryBufferPlatformHandlePtr>
  GpuMemoryBufferPlatformHandlePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, GpuMemoryBufferPlatformHandle>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  Tag which() const {
    return tag_;
  }


  
  bool is_shared_memory_handle() const { return tag_ == Tag::SHARED_MEMORY_HANDLE; }

  
  ::base::UnsafeSharedMemoryRegion& get_shared_memory_handle() const {
    DCHECK(tag_ == Tag::SHARED_MEMORY_HANDLE);
    return *(data_.shared_memory_handle);
  }

  
  void set_shared_memory_handle(
      ::base::UnsafeSharedMemoryRegion shared_memory_handle);
  
  bool is_android_hardware_buffer_handle() const { return tag_ == Tag::ANDROID_HARDWARE_BUFFER_HANDLE; }

  
  AHardwareBufferHandlePtr& get_android_hardware_buffer_handle() const {
    DCHECK(tag_ == Tag::ANDROID_HARDWARE_BUFFER_HANDLE);
    return *(data_.android_hardware_buffer_handle);
  }

  
  void set_android_hardware_buffer_handle(
      AHardwareBufferHandlePtr android_hardware_buffer_handle);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        GpuMemoryBufferPlatformHandle::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<GpuMemoryBufferPlatformHandle::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

 private:
  union Union_ {
    Union_() {}
    ~Union_() {}
    ::base::UnsafeSharedMemoryRegion* shared_memory_handle;
    AHardwareBufferHandlePtr* android_hardware_buffer_handle;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};







class  AHardwareBufferHandle {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AHardwareBufferHandle, T>::value>;
  using DataView = AHardwareBufferHandleDataView;
  using Data_ = internal::AHardwareBufferHandle_Data;

  template <typename... Args>
  static AHardwareBufferHandlePtr New(Args&&... args) {
    return AHardwareBufferHandlePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AHardwareBufferHandlePtr From(const U& u) {
    return mojo::TypeConverter<AHardwareBufferHandlePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AHardwareBufferHandle>::Convert(*this);
  }


  AHardwareBufferHandle();

  AHardwareBufferHandle(
      mojo::ScopedHandle buffer_handle,
      mojo::ScopedMessagePipeHandle tracking_pipe);

  ~AHardwareBufferHandle();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AHardwareBufferHandlePtr>
  AHardwareBufferHandlePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AHardwareBufferHandle::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AHardwareBufferHandle::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AHardwareBufferHandle_UnserializedMessageContext<
            UserType, AHardwareBufferHandle::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<AHardwareBufferHandle::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return AHardwareBufferHandle::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AHardwareBufferHandle_UnserializedMessageContext<
            UserType, AHardwareBufferHandle::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AHardwareBufferHandle::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  mojo::ScopedHandle buffer_handle;
  
  mojo::ScopedMessagePipeHandle tracking_pipe;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(AHardwareBufferHandle);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AHardwareBufferHandle::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  GpuMemoryBufferHandle {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<GpuMemoryBufferHandle, T>::value>;
  using DataView = GpuMemoryBufferHandleDataView;
  using Data_ = internal::GpuMemoryBufferHandle_Data;

  template <typename... Args>
  static GpuMemoryBufferHandlePtr New(Args&&... args) {
    return GpuMemoryBufferHandlePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static GpuMemoryBufferHandlePtr From(const U& u) {
    return mojo::TypeConverter<GpuMemoryBufferHandlePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, GpuMemoryBufferHandle>::Convert(*this);
  }


  GpuMemoryBufferHandle();

  GpuMemoryBufferHandle(
      gfx::GpuMemoryBufferId id,
      uint32_t offset,
      uint32_t stride,
      GpuMemoryBufferPlatformHandlePtr platform_handle);

  ~GpuMemoryBufferHandle();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = GpuMemoryBufferHandlePtr>
  GpuMemoryBufferHandlePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, GpuMemoryBufferHandle::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        GpuMemoryBufferHandle::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        GpuMemoryBufferHandle::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::GpuMemoryBufferHandle_UnserializedMessageContext<
            UserType, GpuMemoryBufferHandle::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<GpuMemoryBufferHandle::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return GpuMemoryBufferHandle::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::GpuMemoryBufferHandle_UnserializedMessageContext<
            UserType, GpuMemoryBufferHandle::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<GpuMemoryBufferHandle::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  gfx::GpuMemoryBufferId id;
  
  uint32_t offset;
  
  uint32_t stride;
  
  GpuMemoryBufferPlatformHandlePtr platform_handle;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(GpuMemoryBufferHandle);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, GpuMemoryBufferHandle::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, GpuMemoryBufferHandle::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, GpuMemoryBufferHandle::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, GpuMemoryBufferHandle::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
GpuMemoryBufferPlatformHandlePtr GpuMemoryBufferPlatformHandle::Clone() const {
  // Use UnionPtrType to prevent the compiler from trying to compile this
  // without being asked.
  UnionPtrType rv(New());
  switch (tag_) {
    case Tag::SHARED_MEMORY_HANDLE:
      rv->set_shared_memory_handle(mojo::Clone(*data_.shared_memory_handle));
      break;
    case Tag::ANDROID_HARDWARE_BUFFER_HANDLE:
      rv->set_android_hardware_buffer_handle(mojo::Clone(*data_.android_hardware_buffer_handle));
      break;
  }
  return rv;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, GpuMemoryBufferPlatformHandle>::value>::type*>
bool GpuMemoryBufferPlatformHandle::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::SHARED_MEMORY_HANDLE:
      return mojo::Equals(*(data_.shared_memory_handle), *(other.data_.shared_memory_handle));
    case Tag::ANDROID_HARDWARE_BUFFER_HANDLE:
      return mojo::Equals(*(data_.android_hardware_buffer_handle), *(other.data_.android_hardware_buffer_handle));
  }

  return false;
}
template <typename StructPtrType>
BufferUsageAndFormatPtr BufferUsageAndFormat::Clone() const {
  return New(
      mojo::Clone(usage),
      mojo::Clone(format)
  );
}

template <typename T, BufferUsageAndFormat::EnableIfSame<T>*>
bool BufferUsageAndFormat::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->usage, other_struct.usage))
    return false;
  if (!mojo::Equals(this->format, other_struct.format))
    return false;
  return true;
}

template <typename T, BufferUsageAndFormat::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.usage < rhs.usage)
    return true;
  if (rhs.usage < lhs.usage)
    return false;
  if (lhs.format < rhs.format)
    return true;
  if (rhs.format < lhs.format)
    return false;
  return false;
}
template <typename StructPtrType>
GpuMemoryBufferIdPtr GpuMemoryBufferId::Clone() const {
  return New(
      mojo::Clone(id)
  );
}

template <typename T, GpuMemoryBufferId::EnableIfSame<T>*>
bool GpuMemoryBufferId::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->id, other_struct.id))
    return false;
  return true;
}

template <typename T, GpuMemoryBufferId::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.id < rhs.id)
    return true;
  if (rhs.id < lhs.id)
    return false;
  return false;
}
template <typename StructPtrType>
AHardwareBufferHandlePtr AHardwareBufferHandle::Clone() const {
  return New(
      mojo::Clone(buffer_handle),
      mojo::Clone(tracking_pipe)
  );
}

template <typename T, AHardwareBufferHandle::EnableIfSame<T>*>
bool AHardwareBufferHandle::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->buffer_handle, other_struct.buffer_handle))
    return false;
  if (!mojo::Equals(this->tracking_pipe, other_struct.tracking_pipe))
    return false;
  return true;
}

template <typename T, AHardwareBufferHandle::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.buffer_handle < rhs.buffer_handle)
    return true;
  if (rhs.buffer_handle < lhs.buffer_handle)
    return false;
  if (lhs.tracking_pipe < rhs.tracking_pipe)
    return true;
  if (rhs.tracking_pipe < lhs.tracking_pipe)
    return false;
  return false;
}
template <typename StructPtrType>
GpuMemoryBufferHandlePtr GpuMemoryBufferHandle::Clone() const {
  return New(
      mojo::Clone(id),
      mojo::Clone(offset),
      mojo::Clone(stride),
      mojo::Clone(platform_handle)
  );
}

template <typename T, GpuMemoryBufferHandle::EnableIfSame<T>*>
bool GpuMemoryBufferHandle::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->id, other_struct.id))
    return false;
  if (!mojo::Equals(this->offset, other_struct.offset))
    return false;
  if (!mojo::Equals(this->stride, other_struct.stride))
    return false;
  if (!mojo::Equals(this->platform_handle, other_struct.platform_handle))
    return false;
  return true;
}

template <typename T, GpuMemoryBufferHandle::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.id < rhs.id)
    return true;
  if (rhs.id < lhs.id)
    return false;
  if (lhs.offset < rhs.offset)
    return true;
  if (rhs.offset < lhs.offset)
    return false;
  if (lhs.stride < rhs.stride)
    return true;
  if (rhs.stride < lhs.stride)
    return false;
  if (lhs.platform_handle < rhs.platform_handle)
    return true;
  if (rhs.platform_handle < lhs.platform_handle)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace gfx

namespace mojo {


template <>
struct  StructTraits<::gfx::mojom::blink::BufferUsageAndFormat::DataView,
                                         ::gfx::mojom::blink::BufferUsageAndFormatPtr> {
  static bool IsNull(const ::gfx::mojom::blink::BufferUsageAndFormatPtr& input) { return !input; }
  static void SetToNull(::gfx::mojom::blink::BufferUsageAndFormatPtr* output) { output->reset(); }

  static decltype(::gfx::mojom::blink::BufferUsageAndFormat::usage) usage(
      const ::gfx::mojom::blink::BufferUsageAndFormatPtr& input) {
    return input->usage;
  }

  static decltype(::gfx::mojom::blink::BufferUsageAndFormat::format) format(
      const ::gfx::mojom::blink::BufferUsageAndFormatPtr& input) {
    return input->format;
  }

  static bool Read(::gfx::mojom::blink::BufferUsageAndFormat::DataView input, ::gfx::mojom::blink::BufferUsageAndFormatPtr* output);
};


template <>
struct  StructTraits<::gfx::mojom::blink::GpuMemoryBufferId::DataView,
                                         ::gfx::mojom::blink::GpuMemoryBufferIdPtr> {
  static bool IsNull(const ::gfx::mojom::blink::GpuMemoryBufferIdPtr& input) { return !input; }
  static void SetToNull(::gfx::mojom::blink::GpuMemoryBufferIdPtr* output) { output->reset(); }

  static decltype(::gfx::mojom::blink::GpuMemoryBufferId::id) id(
      const ::gfx::mojom::blink::GpuMemoryBufferIdPtr& input) {
    return input->id;
  }

  static bool Read(::gfx::mojom::blink::GpuMemoryBufferId::DataView input, ::gfx::mojom::blink::GpuMemoryBufferIdPtr* output);
};


template <>
struct  StructTraits<::gfx::mojom::blink::AHardwareBufferHandle::DataView,
                                         ::gfx::mojom::blink::AHardwareBufferHandlePtr> {
  static bool IsNull(const ::gfx::mojom::blink::AHardwareBufferHandlePtr& input) { return !input; }
  static void SetToNull(::gfx::mojom::blink::AHardwareBufferHandlePtr* output) { output->reset(); }

  static  decltype(::gfx::mojom::blink::AHardwareBufferHandle::buffer_handle)& buffer_handle(
       ::gfx::mojom::blink::AHardwareBufferHandlePtr& input) {
    return input->buffer_handle;
  }

  static  decltype(::gfx::mojom::blink::AHardwareBufferHandle::tracking_pipe)& tracking_pipe(
       ::gfx::mojom::blink::AHardwareBufferHandlePtr& input) {
    return input->tracking_pipe;
  }

  static bool Read(::gfx::mojom::blink::AHardwareBufferHandle::DataView input, ::gfx::mojom::blink::AHardwareBufferHandlePtr* output);
};


template <>
struct  StructTraits<::gfx::mojom::blink::GpuMemoryBufferHandle::DataView,
                                         ::gfx::mojom::blink::GpuMemoryBufferHandlePtr> {
  static bool IsNull(const ::gfx::mojom::blink::GpuMemoryBufferHandlePtr& input) { return !input; }
  static void SetToNull(::gfx::mojom::blink::GpuMemoryBufferHandlePtr* output) { output->reset(); }

  static const decltype(::gfx::mojom::blink::GpuMemoryBufferHandle::id)& id(
      const ::gfx::mojom::blink::GpuMemoryBufferHandlePtr& input) {
    return input->id;
  }

  static decltype(::gfx::mojom::blink::GpuMemoryBufferHandle::offset) offset(
      const ::gfx::mojom::blink::GpuMemoryBufferHandlePtr& input) {
    return input->offset;
  }

  static decltype(::gfx::mojom::blink::GpuMemoryBufferHandle::stride) stride(
      const ::gfx::mojom::blink::GpuMemoryBufferHandlePtr& input) {
    return input->stride;
  }

  static  decltype(::gfx::mojom::blink::GpuMemoryBufferHandle::platform_handle)& platform_handle(
       ::gfx::mojom::blink::GpuMemoryBufferHandlePtr& input) {
    return input->platform_handle;
  }

  static bool Read(::gfx::mojom::blink::GpuMemoryBufferHandle::DataView input, ::gfx::mojom::blink::GpuMemoryBufferHandlePtr* output);
};


template <>
struct  UnionTraits<::gfx::mojom::blink::GpuMemoryBufferPlatformHandle::DataView,
                                        ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr> {
  static bool IsNull(const ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr& input) { return !input; }
  static void SetToNull(::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr* output) { output->reset(); }

  static ::gfx::mojom::blink::GpuMemoryBufferPlatformHandle::Tag GetTag(const ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr& input) {
    return input->which();
  }

  static  ::base::UnsafeSharedMemoryRegion& shared_memory_handle( ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr& input) {
    return input->get_shared_memory_handle();
  }

  static  ::gfx::mojom::blink::AHardwareBufferHandlePtr& android_hardware_buffer_handle( ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr& input) {
    return input->get_android_hardware_buffer_handle();
  }

  static bool Read(::gfx::mojom::blink::GpuMemoryBufferPlatformHandle::DataView input, ::gfx::mojom::blink::GpuMemoryBufferPlatformHandlePtr* output);
};

}  // namespace mojo

#endif  // UI_GFX_MOJOM_BUFFER_TYPES_MOJOM_BLINK_H_