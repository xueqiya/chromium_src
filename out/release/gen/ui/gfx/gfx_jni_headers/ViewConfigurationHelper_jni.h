// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/gfx/ViewConfigurationHelper

#ifndef org_chromium_ui_gfx_ViewConfigurationHelper_JNI
#define org_chromium_ui_gfx_ViewConfigurationHelper_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_ui_gfx_ViewConfigurationHelper[];
const char kClassPath_org_chromium_ui_gfx_ViewConfigurationHelper[] =
    "org/chromium/ui/gfx/ViewConfigurationHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_ui_gfx_ViewConfigurationHelper_clazz(nullptr);
#ifndef org_chromium_ui_gfx_ViewConfigurationHelper_clazz_defined
#define org_chromium_ui_gfx_ViewConfigurationHelper_clazz_defined
inline jclass org_chromium_ui_gfx_ViewConfigurationHelper_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_gfx_ViewConfigurationHelper,
      &g_org_chromium_ui_gfx_ViewConfigurationHelper_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace gfx {

static void JNI_ViewConfigurationHelper_UpdateSharedViewConfiguration(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jfloat maximumFlingVelocity,
    jfloat minimumFlingVelocity,
    jfloat touchSlop,
    jfloat doubleTapSlop,
    jfloat minScalingSpan);

JNI_GENERATOR_EXPORT void Java_J_N_MtrEpb2R(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jfloat maximumFlingVelocity,
    jfloat minimumFlingVelocity,
    jfloat touchSlop,
    jfloat doubleTapSlop,
    jfloat minScalingSpan) {
  return JNI_ViewConfigurationHelper_UpdateSharedViewConfiguration(env,
      base::android::JavaParamRef<jobject>(env, caller), maximumFlingVelocity, minimumFlingVelocity,
      touchSlop, doubleTapSlop, minScalingSpan);
}


static std::atomic<jmethodID>
    g_org_chromium_ui_gfx_ViewConfigurationHelper_getDoubleTapTimeout(nullptr);
static jint Java_ViewConfigurationHelper_getDoubleTapTimeout(JNIEnv* env) {
  jclass clazz = org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getDoubleTapTimeout",
          "()I",
          &g_org_chromium_ui_gfx_ViewConfigurationHelper_getDoubleTapTimeout);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gfx_ViewConfigurationHelper_getLongPressTimeout(nullptr);
static jint Java_ViewConfigurationHelper_getLongPressTimeout(JNIEnv* env) {
  jclass clazz = org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getLongPressTimeout",
          "()I",
          &g_org_chromium_ui_gfx_ViewConfigurationHelper_getLongPressTimeout);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_ui_gfx_ViewConfigurationHelper_getTapTimeout(nullptr);
static jint Java_ViewConfigurationHelper_getTapTimeout(JNIEnv* env) {
  jclass clazz = org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getTapTimeout",
          "()I",
          &g_org_chromium_ui_gfx_ViewConfigurationHelper_getTapTimeout);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gfx_ViewConfigurationHelper_getMaximumFlingVelocity(nullptr);
static jfloat Java_ViewConfigurationHelper_getMaximumFlingVelocity(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMaximumFlingVelocity",
          "()F",
          &g_org_chromium_ui_gfx_ViewConfigurationHelper_getMaximumFlingVelocity);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gfx_ViewConfigurationHelper_getMinimumFlingVelocity(nullptr);
static jfloat Java_ViewConfigurationHelper_getMinimumFlingVelocity(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMinimumFlingVelocity",
          "()F",
          &g_org_chromium_ui_gfx_ViewConfigurationHelper_getMinimumFlingVelocity);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_ui_gfx_ViewConfigurationHelper_getTouchSlop(nullptr);
static jfloat Java_ViewConfigurationHelper_getTouchSlop(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getTouchSlop",
          "()F",
          &g_org_chromium_ui_gfx_ViewConfigurationHelper_getTouchSlop);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gfx_ViewConfigurationHelper_getDoubleTapSlop(nullptr);
static jfloat Java_ViewConfigurationHelper_getDoubleTapSlop(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDoubleTapSlop",
          "()F",
          &g_org_chromium_ui_gfx_ViewConfigurationHelper_getDoubleTapSlop);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gfx_ViewConfigurationHelper_getMinScalingSpan(nullptr);
static jfloat Java_ViewConfigurationHelper_getMinScalingSpan(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMinScalingSpan",
          "()F",
          &g_org_chromium_ui_gfx_ViewConfigurationHelper_getMinScalingSpan);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gfx_ViewConfigurationHelper_createWithListener(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_ViewConfigurationHelper_createWithListener(JNIEnv* env) {
  jclass clazz = org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gfx_ViewConfigurationHelper_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createWithListener",
          "()Lorg/chromium/ui/gfx/ViewConfigurationHelper;",
          &g_org_chromium_ui_gfx_ViewConfigurationHelper_createWithListener);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace gfx

// Step 4: Generated test functions (optional).


#endif  // org_chromium_ui_gfx_ViewConfigurationHelper_JNI
