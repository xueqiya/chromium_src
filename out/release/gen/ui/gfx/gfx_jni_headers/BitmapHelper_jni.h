// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/gfx/BitmapHelper

#ifndef org_chromium_ui_gfx_BitmapHelper_JNI
#define org_chromium_ui_gfx_BitmapHelper_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_ui_gfx_BitmapHelper[];
const char kClassPath_org_chromium_ui_gfx_BitmapHelper[] = "org/chromium/ui/gfx/BitmapHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_ui_gfx_BitmapHelper_clazz(nullptr);
#ifndef org_chromium_ui_gfx_BitmapHelper_clazz_defined
#define org_chromium_ui_gfx_BitmapHelper_clazz_defined
inline jclass org_chromium_ui_gfx_BitmapHelper_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_ui_gfx_BitmapHelper,
      &g_org_chromium_ui_gfx_BitmapHelper_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace gfx {


static std::atomic<jmethodID> g_org_chromium_ui_gfx_BitmapHelper_createBitmap(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_BitmapHelper_createBitmap(JNIEnv* env,
    JniIntWrapper width,
    JniIntWrapper height,
    JniIntWrapper bitmapFormatValue) {
  jclass clazz = org_chromium_ui_gfx_BitmapHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gfx_BitmapHelper_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createBitmap",
          "(III)Landroid/graphics/Bitmap;",
          &g_org_chromium_ui_gfx_BitmapHelper_createBitmap);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(width), as_jint(height), as_jint(bitmapFormatValue));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_ui_gfx_BitmapHelper_getBitmapFormatForConfig(nullptr);
static jint Java_BitmapHelper_getBitmapFormatForConfig(JNIEnv* env, const
    base::android::JavaRef<jobject>& bitmapConfig) {
  jclass clazz = org_chromium_ui_gfx_BitmapHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gfx_BitmapHelper_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getBitmapFormatForConfig",
          "(Landroid/graphics/Bitmap$Config;)I",
          &g_org_chromium_ui_gfx_BitmapHelper_getBitmapFormatForConfig);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, bitmapConfig.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_ui_gfx_BitmapHelper_getByteCount(nullptr);
static jint Java_BitmapHelper_getByteCount(JNIEnv* env, const base::android::JavaRef<jobject>&
    bitmap) {
  jclass clazz = org_chromium_ui_gfx_BitmapHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gfx_BitmapHelper_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getByteCount",
          "(Landroid/graphics/Bitmap;)I",
          &g_org_chromium_ui_gfx_BitmapHelper_getByteCount);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, bitmap.obj());
  return ret;
}

}  // namespace gfx

// Step 4: Generated test functions (optional).


#endif  // org_chromium_ui_gfx_BitmapHelper_JNI
