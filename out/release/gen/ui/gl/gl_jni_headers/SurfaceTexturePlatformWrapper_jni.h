// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/gl/SurfaceTexturePlatformWrapper

#ifndef org_chromium_ui_gl_SurfaceTexturePlatformWrapper_JNI
#define org_chromium_ui_gl_SurfaceTexturePlatformWrapper_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_ui_gl_SurfaceTexturePlatformWrapper[];
const char kClassPath_org_chromium_ui_gl_SurfaceTexturePlatformWrapper[] =
    "org/chromium/ui/gl/SurfaceTexturePlatformWrapper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(nullptr);
#ifndef org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz_defined
#define org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz_defined
inline jclass org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_ui_gl_SurfaceTexturePlatformWrapper,
      &g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace gl {


static std::atomic<jmethodID> g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_SurfaceTexturePlatformWrapper_create(JNIEnv*
    env, JniIntWrapper textureId) {
  jclass clazz = org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(I)Landroid/graphics/SurfaceTexture;",
          &g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(textureId));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_destroy(nullptr);
static void Java_SurfaceTexturePlatformWrapper_destroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& surfaceTexture) {
  jclass clazz = org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "destroy",
          "(Landroid/graphics/SurfaceTexture;)V",
          &g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_destroy);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, surfaceTexture.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_setFrameAvailableCallback(nullptr);
static void Java_SurfaceTexturePlatformWrapper_setFrameAvailableCallback(JNIEnv* env, const
    base::android::JavaRef<jobject>& surfaceTexture,
    jlong nativeSurfaceTextureListener) {
  jclass clazz = org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setFrameAvailableCallback",
          "(Landroid/graphics/SurfaceTexture;J)V",
          &g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_setFrameAvailableCallback);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, surfaceTexture.obj(), nativeSurfaceTextureListener);
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_updateTexImage(nullptr);
static void Java_SurfaceTexturePlatformWrapper_updateTexImage(JNIEnv* env, const
    base::android::JavaRef<jobject>& surfaceTexture) {
  jclass clazz = org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "updateTexImage",
          "(Landroid/graphics/SurfaceTexture;)V",
          &g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_updateTexImage);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, surfaceTexture.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_getTransformMatrix(nullptr);
static void Java_SurfaceTexturePlatformWrapper_getTransformMatrix(JNIEnv* env, const
    base::android::JavaRef<jobject>& surfaceTexture,
    const base::android::JavaRef<jfloatArray>& matrix) {
  jclass clazz = org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getTransformMatrix",
          "(Landroid/graphics/SurfaceTexture;[F)V",
          &g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_getTransformMatrix);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, surfaceTexture.obj(), matrix.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_attachToGLContext(nullptr);
static void Java_SurfaceTexturePlatformWrapper_attachToGLContext(JNIEnv* env, const
    base::android::JavaRef<jobject>& surfaceTexture,
    JniIntWrapper texName) {
  jclass clazz = org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "attachToGLContext",
          "(Landroid/graphics/SurfaceTexture;I)V",
          &g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_attachToGLContext);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, surfaceTexture.obj(), as_jint(texName));
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_detachFromGLContext(nullptr);
static void Java_SurfaceTexturePlatformWrapper_detachFromGLContext(JNIEnv* env, const
    base::android::JavaRef<jobject>& surfaceTexture) {
  jclass clazz = org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "detachFromGLContext",
          "(Landroid/graphics/SurfaceTexture;)V",
          &g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_detachFromGLContext);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, surfaceTexture.obj());
}

static std::atomic<jmethodID> g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_release(nullptr);
static void Java_SurfaceTexturePlatformWrapper_release(JNIEnv* env, const
    base::android::JavaRef<jobject>& surfaceTexture) {
  jclass clazz = org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "release",
          "(Landroid/graphics/SurfaceTexture;)V",
          &g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_release);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, surfaceTexture.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_setDefaultBufferSize(nullptr);
static void Java_SurfaceTexturePlatformWrapper_setDefaultBufferSize(JNIEnv* env, const
    base::android::JavaRef<jobject>& surfaceTexture,
    JniIntWrapper width,
    JniIntWrapper height) {
  jclass clazz = org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_ui_gl_SurfaceTexturePlatformWrapper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setDefaultBufferSize",
          "(Landroid/graphics/SurfaceTexture;II)V",
          &g_org_chromium_ui_gl_SurfaceTexturePlatformWrapper_setDefaultBufferSize);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, surfaceTexture.obj(), as_jint(width), as_jint(height));
}

}  // namespace gl

// Step 4: Generated test functions (optional).


#endif  // org_chromium_ui_gl_SurfaceTexturePlatformWrapper_JNI
