// services/audio/public/mojom/audio_processing.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "services/audio/public/mojom/audio_processing.mojom-shared.h"
#include "services/audio/public/mojom/audio_processing.mojom-forward.h"
#include "mojo/public/mojom/base/file.mojom.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "mojo/public/mojom/base/unguessable_token.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"


#include "media/base/audio_processing.h"
#include "third_party/webrtc/api/media_stream_interface.h"




namespace audio {
namespace mojom {

class AudioProcessorControlsProxy;

template <typename ImplRefTraits>
class AudioProcessorControlsStub;

class AudioProcessorControlsRequestValidator;
class AudioProcessorControlsResponseValidator;


class  AudioProcessorControls
    : public AudioProcessorControlsInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = AudioProcessorControlsInterfaceBase;
  using Proxy_ = AudioProcessorControlsProxy;

  template <typename ImplRefTraits>
  using Stub_ = AudioProcessorControlsStub<ImplRefTraits>;

  using RequestValidator_ = AudioProcessorControlsRequestValidator;
  using ResponseValidator_ = AudioProcessorControlsResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetStatsMinVersion = 0,
    kStartEchoCancellationDumpMinVersion = 0,
    kStopEchoCancellationDumpMinVersion = 0,
  };
  virtual ~AudioProcessorControls() {}


  using GetStatsCallback = base::OnceCallback<void(const ::webrtc::AudioProcessorInterface::AudioProcessorStatistics&)>;
  
  virtual void GetStats(GetStatsCallback callback) = 0;

  
  virtual void StartEchoCancellationDump(::base::File file) = 0;

  
  virtual void StopEchoCancellationDump() = 0;
};



class  AudioProcessorControlsProxy
    : public AudioProcessorControls {
 public:
  using InterfaceType = AudioProcessorControls;

  explicit AudioProcessorControlsProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetStats(GetStatsCallback callback) final;
  
  void StartEchoCancellationDump(::base::File file) final;
  
  void StopEchoCancellationDump() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  AudioProcessorControlsStubDispatch {
 public:
  static bool Accept(AudioProcessorControls* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AudioProcessorControls* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AudioProcessorControls>>
class AudioProcessorControlsStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AudioProcessorControlsStub() {}
  ~AudioProcessorControlsStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AudioProcessorControlsStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AudioProcessorControlsStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  AudioProcessorControlsRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  AudioProcessorControlsResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};










class  AudioProcessingStats {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AudioProcessingStats, T>::value>;
  using DataView = AudioProcessingStatsDataView;
  using Data_ = internal::AudioProcessingStats_Data;

  template <typename... Args>
  static AudioProcessingStatsPtr New(Args&&... args) {
    return AudioProcessingStatsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AudioProcessingStatsPtr From(const U& u) {
    return mojo::TypeConverter<AudioProcessingStatsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AudioProcessingStats>::Convert(*this);
  }


  AudioProcessingStats();

  AudioProcessingStats(
      bool typing_noise_detected,
      bool has_echo_return_loss,
      double echo_return_loss,
      bool has_echo_return_loss_enhancement,
      double echo_return_loss_enhancement,
      bool has_divergent_filter_fraction,
      double divergent_filter_fraction,
      bool has_delay_median_ms,
      int32_t delay_median_ms,
      bool has_delay_standard_deviation_ms,
      int32_t delay_standard_deviation_ms,
      bool has_residual_echo_likelihood,
      double residual_echo_likelihood,
      bool has_residual_echo_likelihood_recent_max,
      double residual_echo_likelihood_recent_max,
      bool has_delay_ms,
      int32_t delay_ms);

  ~AudioProcessingStats();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AudioProcessingStatsPtr>
  AudioProcessingStatsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AudioProcessingStats::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AudioProcessingStats::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AudioProcessingStats::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AudioProcessingStats_UnserializedMessageContext<
            UserType, AudioProcessingStats::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<AudioProcessingStats::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return AudioProcessingStats::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AudioProcessingStats_UnserializedMessageContext<
            UserType, AudioProcessingStats::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AudioProcessingStats::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  bool typing_noise_detected;
  
  bool has_echo_return_loss;
  
  double echo_return_loss;
  
  bool has_echo_return_loss_enhancement;
  
  double echo_return_loss_enhancement;
  
  bool has_divergent_filter_fraction;
  
  double divergent_filter_fraction;
  
  bool has_delay_median_ms;
  
  int32_t delay_median_ms;
  
  bool has_delay_standard_deviation_ms;
  
  int32_t delay_standard_deviation_ms;
  
  bool has_residual_echo_likelihood;
  
  double residual_echo_likelihood;
  
  bool has_residual_echo_likelihood_recent_max;
  
  double residual_echo_likelihood_recent_max;
  
  bool has_delay_ms;
  
  int32_t delay_ms;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AudioProcessingStats::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AudioProcessingStats::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AudioProcessingStats::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AudioProcessingStats::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  AudioProcessingSettings {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AudioProcessingSettings, T>::value>;
  using DataView = AudioProcessingSettingsDataView;
  using Data_ = internal::AudioProcessingSettings_Data;

  template <typename... Args>
  static AudioProcessingSettingsPtr New(Args&&... args) {
    return AudioProcessingSettingsPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AudioProcessingSettingsPtr From(const U& u) {
    return mojo::TypeConverter<AudioProcessingSettingsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AudioProcessingSettings>::Convert(*this);
  }


  AudioProcessingSettings();

  AudioProcessingSettings(
      ::media::EchoCancellationType echo_cancellation,
      ::media::NoiseSuppressionType noise_suppression,
      ::media::AutomaticGainControlType automatic_gain_control,
      bool high_pass_filter,
      bool typing_detection,
      bool stereo_mirroring);

  ~AudioProcessingSettings();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AudioProcessingSettingsPtr>
  AudioProcessingSettingsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AudioProcessingSettings::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AudioProcessingSettings::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AudioProcessingSettings::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AudioProcessingSettings_UnserializedMessageContext<
            UserType, AudioProcessingSettings::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<AudioProcessingSettings::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return AudioProcessingSettings::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AudioProcessingSettings_UnserializedMessageContext<
            UserType, AudioProcessingSettings::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AudioProcessingSettings::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  ::media::EchoCancellationType echo_cancellation;
  
  ::media::NoiseSuppressionType noise_suppression;
  
  ::media::AutomaticGainControlType automatic_gain_control;
  
  bool high_pass_filter;
  
  bool typing_detection;
  
  bool stereo_mirroring;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AudioProcessingSettings::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AudioProcessingSettings::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AudioProcessingSettings::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AudioProcessingSettings::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  AudioProcessingConfig {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AudioProcessingConfig, T>::value>;
  using DataView = AudioProcessingConfigDataView;
  using Data_ = internal::AudioProcessingConfig_Data;

  template <typename... Args>
  static AudioProcessingConfigPtr New(Args&&... args) {
    return AudioProcessingConfigPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AudioProcessingConfigPtr From(const U& u) {
    return mojo::TypeConverter<AudioProcessingConfigPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AudioProcessingConfig>::Convert(*this);
  }


  AudioProcessingConfig();

  AudioProcessingConfig(
      mojo::PendingReceiver<AudioProcessorControls> controls_receiver,
      const ::base::UnguessableToken& processing_id,
      const ::media::AudioProcessingSettings& settings);

  ~AudioProcessingConfig();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AudioProcessingConfigPtr>
  AudioProcessingConfigPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AudioProcessingConfig::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AudioProcessingConfig::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AudioProcessingConfig::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AudioProcessingConfig_UnserializedMessageContext<
            UserType, AudioProcessingConfig::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<AudioProcessingConfig::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return AudioProcessingConfig::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AudioProcessingConfig_UnserializedMessageContext<
            UserType, AudioProcessingConfig::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AudioProcessingConfig::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  mojo::PendingReceiver<AudioProcessorControls> controls_receiver;
  
  ::base::UnguessableToken processing_id;
  
  ::media::AudioProcessingSettings settings;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(AudioProcessingConfig);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AudioProcessingConfig::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AudioProcessingConfig::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AudioProcessingConfig::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AudioProcessingConfig::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
AudioProcessingStatsPtr AudioProcessingStats::Clone() const {
  return New(
      mojo::Clone(typing_noise_detected),
      mojo::Clone(has_echo_return_loss),
      mojo::Clone(echo_return_loss),
      mojo::Clone(has_echo_return_loss_enhancement),
      mojo::Clone(echo_return_loss_enhancement),
      mojo::Clone(has_divergent_filter_fraction),
      mojo::Clone(divergent_filter_fraction),
      mojo::Clone(has_delay_median_ms),
      mojo::Clone(delay_median_ms),
      mojo::Clone(has_delay_standard_deviation_ms),
      mojo::Clone(delay_standard_deviation_ms),
      mojo::Clone(has_residual_echo_likelihood),
      mojo::Clone(residual_echo_likelihood),
      mojo::Clone(has_residual_echo_likelihood_recent_max),
      mojo::Clone(residual_echo_likelihood_recent_max),
      mojo::Clone(has_delay_ms),
      mojo::Clone(delay_ms)
  );
}

template <typename T, AudioProcessingStats::EnableIfSame<T>*>
bool AudioProcessingStats::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->typing_noise_detected, other_struct.typing_noise_detected))
    return false;
  if (!mojo::Equals(this->has_echo_return_loss, other_struct.has_echo_return_loss))
    return false;
  if (!mojo::Equals(this->echo_return_loss, other_struct.echo_return_loss))
    return false;
  if (!mojo::Equals(this->has_echo_return_loss_enhancement, other_struct.has_echo_return_loss_enhancement))
    return false;
  if (!mojo::Equals(this->echo_return_loss_enhancement, other_struct.echo_return_loss_enhancement))
    return false;
  if (!mojo::Equals(this->has_divergent_filter_fraction, other_struct.has_divergent_filter_fraction))
    return false;
  if (!mojo::Equals(this->divergent_filter_fraction, other_struct.divergent_filter_fraction))
    return false;
  if (!mojo::Equals(this->has_delay_median_ms, other_struct.has_delay_median_ms))
    return false;
  if (!mojo::Equals(this->delay_median_ms, other_struct.delay_median_ms))
    return false;
  if (!mojo::Equals(this->has_delay_standard_deviation_ms, other_struct.has_delay_standard_deviation_ms))
    return false;
  if (!mojo::Equals(this->delay_standard_deviation_ms, other_struct.delay_standard_deviation_ms))
    return false;
  if (!mojo::Equals(this->has_residual_echo_likelihood, other_struct.has_residual_echo_likelihood))
    return false;
  if (!mojo::Equals(this->residual_echo_likelihood, other_struct.residual_echo_likelihood))
    return false;
  if (!mojo::Equals(this->has_residual_echo_likelihood_recent_max, other_struct.has_residual_echo_likelihood_recent_max))
    return false;
  if (!mojo::Equals(this->residual_echo_likelihood_recent_max, other_struct.residual_echo_likelihood_recent_max))
    return false;
  if (!mojo::Equals(this->has_delay_ms, other_struct.has_delay_ms))
    return false;
  if (!mojo::Equals(this->delay_ms, other_struct.delay_ms))
    return false;
  return true;
}

template <typename T, AudioProcessingStats::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.typing_noise_detected < rhs.typing_noise_detected)
    return true;
  if (rhs.typing_noise_detected < lhs.typing_noise_detected)
    return false;
  if (lhs.has_echo_return_loss < rhs.has_echo_return_loss)
    return true;
  if (rhs.has_echo_return_loss < lhs.has_echo_return_loss)
    return false;
  if (lhs.echo_return_loss < rhs.echo_return_loss)
    return true;
  if (rhs.echo_return_loss < lhs.echo_return_loss)
    return false;
  if (lhs.has_echo_return_loss_enhancement < rhs.has_echo_return_loss_enhancement)
    return true;
  if (rhs.has_echo_return_loss_enhancement < lhs.has_echo_return_loss_enhancement)
    return false;
  if (lhs.echo_return_loss_enhancement < rhs.echo_return_loss_enhancement)
    return true;
  if (rhs.echo_return_loss_enhancement < lhs.echo_return_loss_enhancement)
    return false;
  if (lhs.has_divergent_filter_fraction < rhs.has_divergent_filter_fraction)
    return true;
  if (rhs.has_divergent_filter_fraction < lhs.has_divergent_filter_fraction)
    return false;
  if (lhs.divergent_filter_fraction < rhs.divergent_filter_fraction)
    return true;
  if (rhs.divergent_filter_fraction < lhs.divergent_filter_fraction)
    return false;
  if (lhs.has_delay_median_ms < rhs.has_delay_median_ms)
    return true;
  if (rhs.has_delay_median_ms < lhs.has_delay_median_ms)
    return false;
  if (lhs.delay_median_ms < rhs.delay_median_ms)
    return true;
  if (rhs.delay_median_ms < lhs.delay_median_ms)
    return false;
  if (lhs.has_delay_standard_deviation_ms < rhs.has_delay_standard_deviation_ms)
    return true;
  if (rhs.has_delay_standard_deviation_ms < lhs.has_delay_standard_deviation_ms)
    return false;
  if (lhs.delay_standard_deviation_ms < rhs.delay_standard_deviation_ms)
    return true;
  if (rhs.delay_standard_deviation_ms < lhs.delay_standard_deviation_ms)
    return false;
  if (lhs.has_residual_echo_likelihood < rhs.has_residual_echo_likelihood)
    return true;
  if (rhs.has_residual_echo_likelihood < lhs.has_residual_echo_likelihood)
    return false;
  if (lhs.residual_echo_likelihood < rhs.residual_echo_likelihood)
    return true;
  if (rhs.residual_echo_likelihood < lhs.residual_echo_likelihood)
    return false;
  if (lhs.has_residual_echo_likelihood_recent_max < rhs.has_residual_echo_likelihood_recent_max)
    return true;
  if (rhs.has_residual_echo_likelihood_recent_max < lhs.has_residual_echo_likelihood_recent_max)
    return false;
  if (lhs.residual_echo_likelihood_recent_max < rhs.residual_echo_likelihood_recent_max)
    return true;
  if (rhs.residual_echo_likelihood_recent_max < lhs.residual_echo_likelihood_recent_max)
    return false;
  if (lhs.has_delay_ms < rhs.has_delay_ms)
    return true;
  if (rhs.has_delay_ms < lhs.has_delay_ms)
    return false;
  if (lhs.delay_ms < rhs.delay_ms)
    return true;
  if (rhs.delay_ms < lhs.delay_ms)
    return false;
  return false;
}
template <typename StructPtrType>
AudioProcessingSettingsPtr AudioProcessingSettings::Clone() const {
  return New(
      mojo::Clone(echo_cancellation),
      mojo::Clone(noise_suppression),
      mojo::Clone(automatic_gain_control),
      mojo::Clone(high_pass_filter),
      mojo::Clone(typing_detection),
      mojo::Clone(stereo_mirroring)
  );
}

template <typename T, AudioProcessingSettings::EnableIfSame<T>*>
bool AudioProcessingSettings::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->echo_cancellation, other_struct.echo_cancellation))
    return false;
  if (!mojo::Equals(this->noise_suppression, other_struct.noise_suppression))
    return false;
  if (!mojo::Equals(this->automatic_gain_control, other_struct.automatic_gain_control))
    return false;
  if (!mojo::Equals(this->high_pass_filter, other_struct.high_pass_filter))
    return false;
  if (!mojo::Equals(this->typing_detection, other_struct.typing_detection))
    return false;
  if (!mojo::Equals(this->stereo_mirroring, other_struct.stereo_mirroring))
    return false;
  return true;
}

template <typename T, AudioProcessingSettings::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.echo_cancellation < rhs.echo_cancellation)
    return true;
  if (rhs.echo_cancellation < lhs.echo_cancellation)
    return false;
  if (lhs.noise_suppression < rhs.noise_suppression)
    return true;
  if (rhs.noise_suppression < lhs.noise_suppression)
    return false;
  if (lhs.automatic_gain_control < rhs.automatic_gain_control)
    return true;
  if (rhs.automatic_gain_control < lhs.automatic_gain_control)
    return false;
  if (lhs.high_pass_filter < rhs.high_pass_filter)
    return true;
  if (rhs.high_pass_filter < lhs.high_pass_filter)
    return false;
  if (lhs.typing_detection < rhs.typing_detection)
    return true;
  if (rhs.typing_detection < lhs.typing_detection)
    return false;
  if (lhs.stereo_mirroring < rhs.stereo_mirroring)
    return true;
  if (rhs.stereo_mirroring < lhs.stereo_mirroring)
    return false;
  return false;
}
template <typename StructPtrType>
AudioProcessingConfigPtr AudioProcessingConfig::Clone() const {
  return New(
      mojo::Clone(controls_receiver),
      mojo::Clone(processing_id),
      mojo::Clone(settings)
  );
}

template <typename T, AudioProcessingConfig::EnableIfSame<T>*>
bool AudioProcessingConfig::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->controls_receiver, other_struct.controls_receiver))
    return false;
  if (!mojo::Equals(this->processing_id, other_struct.processing_id))
    return false;
  if (!mojo::Equals(this->settings, other_struct.settings))
    return false;
  return true;
}

template <typename T, AudioProcessingConfig::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.controls_receiver < rhs.controls_receiver)
    return true;
  if (rhs.controls_receiver < lhs.controls_receiver)
    return false;
  if (lhs.processing_id < rhs.processing_id)
    return true;
  if (rhs.processing_id < lhs.processing_id)
    return false;
  if (lhs.settings < rhs.settings)
    return true;
  if (rhs.settings < lhs.settings)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace audio

namespace mojo {


template <>
struct  StructTraits<::audio::mojom::AudioProcessingStats::DataView,
                                         ::audio::mojom::AudioProcessingStatsPtr> {
  static bool IsNull(const ::audio::mojom::AudioProcessingStatsPtr& input) { return !input; }
  static void SetToNull(::audio::mojom::AudioProcessingStatsPtr* output) { output->reset(); }

  static decltype(::audio::mojom::AudioProcessingStats::typing_noise_detected) typing_noise_detected(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->typing_noise_detected;
  }

  static decltype(::audio::mojom::AudioProcessingStats::has_echo_return_loss) has_echo_return_loss(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->has_echo_return_loss;
  }

  static decltype(::audio::mojom::AudioProcessingStats::echo_return_loss) echo_return_loss(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->echo_return_loss;
  }

  static decltype(::audio::mojom::AudioProcessingStats::has_echo_return_loss_enhancement) has_echo_return_loss_enhancement(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->has_echo_return_loss_enhancement;
  }

  static decltype(::audio::mojom::AudioProcessingStats::echo_return_loss_enhancement) echo_return_loss_enhancement(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->echo_return_loss_enhancement;
  }

  static decltype(::audio::mojom::AudioProcessingStats::has_divergent_filter_fraction) has_divergent_filter_fraction(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->has_divergent_filter_fraction;
  }

  static decltype(::audio::mojom::AudioProcessingStats::divergent_filter_fraction) divergent_filter_fraction(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->divergent_filter_fraction;
  }

  static decltype(::audio::mojom::AudioProcessingStats::has_delay_median_ms) has_delay_median_ms(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->has_delay_median_ms;
  }

  static decltype(::audio::mojom::AudioProcessingStats::delay_median_ms) delay_median_ms(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->delay_median_ms;
  }

  static decltype(::audio::mojom::AudioProcessingStats::has_delay_standard_deviation_ms) has_delay_standard_deviation_ms(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->has_delay_standard_deviation_ms;
  }

  static decltype(::audio::mojom::AudioProcessingStats::delay_standard_deviation_ms) delay_standard_deviation_ms(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->delay_standard_deviation_ms;
  }

  static decltype(::audio::mojom::AudioProcessingStats::has_residual_echo_likelihood) has_residual_echo_likelihood(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->has_residual_echo_likelihood;
  }

  static decltype(::audio::mojom::AudioProcessingStats::residual_echo_likelihood) residual_echo_likelihood(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->residual_echo_likelihood;
  }

  static decltype(::audio::mojom::AudioProcessingStats::has_residual_echo_likelihood_recent_max) has_residual_echo_likelihood_recent_max(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->has_residual_echo_likelihood_recent_max;
  }

  static decltype(::audio::mojom::AudioProcessingStats::residual_echo_likelihood_recent_max) residual_echo_likelihood_recent_max(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->residual_echo_likelihood_recent_max;
  }

  static decltype(::audio::mojom::AudioProcessingStats::has_delay_ms) has_delay_ms(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->has_delay_ms;
  }

  static decltype(::audio::mojom::AudioProcessingStats::delay_ms) delay_ms(
      const ::audio::mojom::AudioProcessingStatsPtr& input) {
    return input->delay_ms;
  }

  static bool Read(::audio::mojom::AudioProcessingStats::DataView input, ::audio::mojom::AudioProcessingStatsPtr* output);
};


template <>
struct  StructTraits<::audio::mojom::AudioProcessingSettings::DataView,
                                         ::audio::mojom::AudioProcessingSettingsPtr> {
  static bool IsNull(const ::audio::mojom::AudioProcessingSettingsPtr& input) { return !input; }
  static void SetToNull(::audio::mojom::AudioProcessingSettingsPtr* output) { output->reset(); }

  static decltype(::audio::mojom::AudioProcessingSettings::echo_cancellation) echo_cancellation(
      const ::audio::mojom::AudioProcessingSettingsPtr& input) {
    return input->echo_cancellation;
  }

  static decltype(::audio::mojom::AudioProcessingSettings::noise_suppression) noise_suppression(
      const ::audio::mojom::AudioProcessingSettingsPtr& input) {
    return input->noise_suppression;
  }

  static decltype(::audio::mojom::AudioProcessingSettings::automatic_gain_control) automatic_gain_control(
      const ::audio::mojom::AudioProcessingSettingsPtr& input) {
    return input->automatic_gain_control;
  }

  static decltype(::audio::mojom::AudioProcessingSettings::high_pass_filter) high_pass_filter(
      const ::audio::mojom::AudioProcessingSettingsPtr& input) {
    return input->high_pass_filter;
  }

  static decltype(::audio::mojom::AudioProcessingSettings::typing_detection) typing_detection(
      const ::audio::mojom::AudioProcessingSettingsPtr& input) {
    return input->typing_detection;
  }

  static decltype(::audio::mojom::AudioProcessingSettings::stereo_mirroring) stereo_mirroring(
      const ::audio::mojom::AudioProcessingSettingsPtr& input) {
    return input->stereo_mirroring;
  }

  static bool Read(::audio::mojom::AudioProcessingSettings::DataView input, ::audio::mojom::AudioProcessingSettingsPtr* output);
};


template <>
struct  StructTraits<::audio::mojom::AudioProcessingConfig::DataView,
                                         ::audio::mojom::AudioProcessingConfigPtr> {
  static bool IsNull(const ::audio::mojom::AudioProcessingConfigPtr& input) { return !input; }
  static void SetToNull(::audio::mojom::AudioProcessingConfigPtr* output) { output->reset(); }

  static  decltype(::audio::mojom::AudioProcessingConfig::controls_receiver)& controls_receiver(
       ::audio::mojom::AudioProcessingConfigPtr& input) {
    return input->controls_receiver;
  }

  static const decltype(::audio::mojom::AudioProcessingConfig::processing_id)& processing_id(
      const ::audio::mojom::AudioProcessingConfigPtr& input) {
    return input->processing_id;
  }

  static const decltype(::audio::mojom::AudioProcessingConfig::settings)& settings(
      const ::audio::mojom::AudioProcessingConfigPtr& input) {
    return input->settings;
  }

  static bool Read(::audio::mojom::AudioProcessingConfig::DataView input, ::audio::mojom::AudioProcessingConfigPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_H_