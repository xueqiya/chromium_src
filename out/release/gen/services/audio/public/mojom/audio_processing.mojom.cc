// services/audio/public/mojom/audio_processing.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "services/audio/public/mojom/audio_processing.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "services/audio/public/mojom/audio_processing.mojom-params-data.h"
#include "services/audio/public/mojom/audio_processing.mojom-shared-message-ids.h"

#include "services/audio/public/mojom/audio_processing.mojom-import-headers.h"


#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_JUMBO_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "services/audio/public/cpp/audio_processing_mojom_traits.h"
#endif
namespace audio {
namespace mojom {
AudioProcessingStats::AudioProcessingStats()
    : typing_noise_detected(),
      has_echo_return_loss(),
      echo_return_loss(),
      has_echo_return_loss_enhancement(),
      echo_return_loss_enhancement(),
      has_divergent_filter_fraction(),
      divergent_filter_fraction(),
      has_delay_median_ms(),
      delay_median_ms(),
      has_delay_standard_deviation_ms(),
      delay_standard_deviation_ms(),
      has_residual_echo_likelihood(),
      residual_echo_likelihood(),
      has_residual_echo_likelihood_recent_max(),
      residual_echo_likelihood_recent_max(),
      has_delay_ms(),
      delay_ms() {}

AudioProcessingStats::AudioProcessingStats(
    bool typing_noise_detected_in,
    bool has_echo_return_loss_in,
    double echo_return_loss_in,
    bool has_echo_return_loss_enhancement_in,
    double echo_return_loss_enhancement_in,
    bool has_divergent_filter_fraction_in,
    double divergent_filter_fraction_in,
    bool has_delay_median_ms_in,
    int32_t delay_median_ms_in,
    bool has_delay_standard_deviation_ms_in,
    int32_t delay_standard_deviation_ms_in,
    bool has_residual_echo_likelihood_in,
    double residual_echo_likelihood_in,
    bool has_residual_echo_likelihood_recent_max_in,
    double residual_echo_likelihood_recent_max_in,
    bool has_delay_ms_in,
    int32_t delay_ms_in)
    : typing_noise_detected(std::move(typing_noise_detected_in)),
      has_echo_return_loss(std::move(has_echo_return_loss_in)),
      echo_return_loss(std::move(echo_return_loss_in)),
      has_echo_return_loss_enhancement(std::move(has_echo_return_loss_enhancement_in)),
      echo_return_loss_enhancement(std::move(echo_return_loss_enhancement_in)),
      has_divergent_filter_fraction(std::move(has_divergent_filter_fraction_in)),
      divergent_filter_fraction(std::move(divergent_filter_fraction_in)),
      has_delay_median_ms(std::move(has_delay_median_ms_in)),
      delay_median_ms(std::move(delay_median_ms_in)),
      has_delay_standard_deviation_ms(std::move(has_delay_standard_deviation_ms_in)),
      delay_standard_deviation_ms(std::move(delay_standard_deviation_ms_in)),
      has_residual_echo_likelihood(std::move(has_residual_echo_likelihood_in)),
      residual_echo_likelihood(std::move(residual_echo_likelihood_in)),
      has_residual_echo_likelihood_recent_max(std::move(has_residual_echo_likelihood_recent_max_in)),
      residual_echo_likelihood_recent_max(std::move(residual_echo_likelihood_recent_max_in)),
      has_delay_ms(std::move(has_delay_ms_in)),
      delay_ms(std::move(delay_ms_in)) {}

AudioProcessingStats::~AudioProcessingStats() = default;

bool AudioProcessingStats::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AudioProcessingSettings::AudioProcessingSettings()
    : echo_cancellation(),
      noise_suppression(),
      automatic_gain_control(),
      high_pass_filter(),
      typing_detection(),
      stereo_mirroring() {}

AudioProcessingSettings::AudioProcessingSettings(
    ::media::EchoCancellationType echo_cancellation_in,
    ::media::NoiseSuppressionType noise_suppression_in,
    ::media::AutomaticGainControlType automatic_gain_control_in,
    bool high_pass_filter_in,
    bool typing_detection_in,
    bool stereo_mirroring_in)
    : echo_cancellation(std::move(echo_cancellation_in)),
      noise_suppression(std::move(noise_suppression_in)),
      automatic_gain_control(std::move(automatic_gain_control_in)),
      high_pass_filter(std::move(high_pass_filter_in)),
      typing_detection(std::move(typing_detection_in)),
      stereo_mirroring(std::move(stereo_mirroring_in)) {}

AudioProcessingSettings::~AudioProcessingSettings() = default;

bool AudioProcessingSettings::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AudioProcessingConfig::AudioProcessingConfig()
    : controls_receiver(),
      processing_id(),
      settings() {}

AudioProcessingConfig::AudioProcessingConfig(
    mojo::PendingReceiver<AudioProcessorControls> controls_receiver_in,
    const ::base::UnguessableToken& processing_id_in,
    const ::media::AudioProcessingSettings& settings_in)
    : controls_receiver(std::move(controls_receiver_in)),
      processing_id(std::move(processing_id_in)),
      settings(std::move(settings_in)) {}

AudioProcessingConfig::~AudioProcessingConfig() = default;

bool AudioProcessingConfig::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char AudioProcessorControls::Name_[] = "audio.mojom.AudioProcessorControls";

class AudioProcessorControls_GetStats_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AudioProcessorControls_GetStats_ForwardToCallback(
      AudioProcessorControls::GetStatsCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  AudioProcessorControls::GetStatsCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(AudioProcessorControls_GetStats_ForwardToCallback);
};

AudioProcessorControlsProxy::AudioProcessorControlsProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AudioProcessorControlsProxy::GetStats(
    GetStatsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "audio::mojom::AudioProcessorControls::GetStats");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAudioProcessorControls_GetStats_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::audio::mojom::internal::AudioProcessorControls_GetStats_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioProcessorControls::Name_);
  message.set_method_name("GetStats");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AudioProcessorControls_GetStats_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void AudioProcessorControlsProxy::StartEchoCancellationDump(
    ::base::File in_file) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "audio::mojom::AudioProcessorControls::StartEchoCancellationDump");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAudioProcessorControls_StartEchoCancellationDump_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::audio::mojom::internal::AudioProcessorControls_StartEchoCancellationDump_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->file)::BaseType::BufferWriter
      file_writer;
  mojo::internal::Serialize<::mojo_base::mojom::FileDataView>(
      in_file, buffer, &file_writer, &serialization_context);
  params->file.Set(
      file_writer.is_null() ? nullptr : file_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->file.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null file in AudioProcessorControls.StartEchoCancellationDump request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioProcessorControls::Name_);
  message.set_method_name("StartEchoCancellationDump");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void AudioProcessorControlsProxy::StopEchoCancellationDump(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "audio::mojom::AudioProcessorControls::StopEchoCancellationDump");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAudioProcessorControls_StopEchoCancellationDump_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::audio::mojom::internal::AudioProcessorControls_StopEchoCancellationDump_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioProcessorControls::Name_);
  message.set_method_name("StopEchoCancellationDump");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class AudioProcessorControls_GetStats_ProxyToResponder {
 public:
  static AudioProcessorControls::GetStatsCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AudioProcessorControls_GetStats_ProxyToResponder> proxy(
        new AudioProcessorControls_GetStats_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&AudioProcessorControls_GetStats_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AudioProcessorControls_GetStats_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  AudioProcessorControls_GetStats_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AudioProcessorControls::GetStatsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const ::webrtc::AudioProcessorInterface::AudioProcessorStatistics& in_stats);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(AudioProcessorControls_GetStats_ProxyToResponder);
};

bool AudioProcessorControls_GetStats_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "audio::mojom::AudioProcessorControls::GetStatsCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::AudioProcessorControls_GetStats_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AudioProcessorControls_GetStats_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  ::webrtc::AudioProcessorInterface::AudioProcessorStatistics p_stats{};
  AudioProcessorControls_GetStats_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadStats(&p_stats))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AudioProcessorControls::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_stats));
  return true;
}

void AudioProcessorControls_GetStats_ProxyToResponder::Run(
    const ::webrtc::AudioProcessorInterface::AudioProcessorStatistics& in_stats) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kAudioProcessorControls_GetStats_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::audio::mojom::internal::AudioProcessorControls_GetStats_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->stats)::BaseType::BufferWriter
      stats_writer;
  mojo::internal::Serialize<::audio::mojom::AudioProcessingStatsDataView>(
      in_stats, buffer, &stats_writer, &serialization_context);
  params->stats.Set(
      stats_writer.is_null() ? nullptr : stats_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->stats.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null stats in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)audio::mojom::AudioProcessorControls::GetStatsCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioProcessorControls::Name_);
  message.set_method_name("GetStats");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool AudioProcessorControlsStubDispatch::Accept(
    AudioProcessorControls* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAudioProcessorControls_GetStats_Name: {
      break;
    }
    case internal::kAudioProcessorControls_StartEchoCancellationDump_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)audio::mojom::AudioProcessorControls::StartEchoCancellationDump",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)audio::mojom::AudioProcessorControls::StartEchoCancellationDump");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AudioProcessorControls_StartEchoCancellationDump_Params_Data* params =
          reinterpret_cast<internal::AudioProcessorControls_StartEchoCancellationDump_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::base::File p_file{};
      AudioProcessorControls_StartEchoCancellationDump_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadFile(&p_file))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AudioProcessorControls::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StartEchoCancellationDump(
std::move(p_file));
      return true;
    }
    case internal::kAudioProcessorControls_StopEchoCancellationDump_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)audio::mojom::AudioProcessorControls::StopEchoCancellationDump",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)audio::mojom::AudioProcessorControls::StopEchoCancellationDump");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::AudioProcessorControls_StopEchoCancellationDump_Params_Data* params =
          reinterpret_cast<internal::AudioProcessorControls_StopEchoCancellationDump_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      AudioProcessorControls_StopEchoCancellationDump_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AudioProcessorControls::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StopEchoCancellationDump();
      return true;
    }
  }
  return false;
}

// static
bool AudioProcessorControlsStubDispatch::AcceptWithResponder(
    AudioProcessorControls* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kAudioProcessorControls_GetStats_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)audio::mojom::AudioProcessorControls::GetStats",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)audio::mojom::AudioProcessorControls::GetStats");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::AudioProcessorControls_GetStats_Params_Data* params =
          reinterpret_cast<
              internal::AudioProcessorControls_GetStats_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      AudioProcessorControls_GetStats_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AudioProcessorControls::Name_, 0, false);
        return false;
      }
      AudioProcessorControls::GetStatsCallback callback =
          AudioProcessorControls_GetStats_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetStats(std::move(callback));
      return true;
    }
    case internal::kAudioProcessorControls_StartEchoCancellationDump_Name: {
      break;
    }
    case internal::kAudioProcessorControls_StopEchoCancellationDump_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAudioProcessorControlsValidationInfo[] = {
    {&internal::AudioProcessorControls_GetStats_Params_Data::Validate,
     &internal::AudioProcessorControls_GetStats_ResponseParams_Data::Validate},
    {&internal::AudioProcessorControls_StartEchoCancellationDump_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AudioProcessorControls_StopEchoCancellationDump_Params_Data::Validate,
     nullptr /* no response */},
};

bool AudioProcessorControlsRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::audio::mojom::AudioProcessorControls::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAudioProcessorControlsValidationInfo);
}

bool AudioProcessorControlsResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::audio::mojom::AudioProcessorControls::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kAudioProcessorControlsValidationInfo);
}
}  // namespace mojom
}  // namespace audio

namespace mojo {


// static
bool StructTraits<::audio::mojom::AudioProcessingStats::DataView, ::audio::mojom::AudioProcessingStatsPtr>::Read(
    ::audio::mojom::AudioProcessingStats::DataView input,
    ::audio::mojom::AudioProcessingStatsPtr* output) {
  bool success = true;
  ::audio::mojom::AudioProcessingStatsPtr result(::audio::mojom::AudioProcessingStats::New());
  
      if (success)
        result->typing_noise_detected = input.typing_noise_detected();
      if (success)
        result->has_echo_return_loss = input.has_echo_return_loss();
      if (success)
        result->echo_return_loss = input.echo_return_loss();
      if (success)
        result->has_echo_return_loss_enhancement = input.has_echo_return_loss_enhancement();
      if (success)
        result->echo_return_loss_enhancement = input.echo_return_loss_enhancement();
      if (success)
        result->has_divergent_filter_fraction = input.has_divergent_filter_fraction();
      if (success)
        result->divergent_filter_fraction = input.divergent_filter_fraction();
      if (success)
        result->has_delay_median_ms = input.has_delay_median_ms();
      if (success)
        result->delay_median_ms = input.delay_median_ms();
      if (success)
        result->has_delay_standard_deviation_ms = input.has_delay_standard_deviation_ms();
      if (success)
        result->delay_standard_deviation_ms = input.delay_standard_deviation_ms();
      if (success)
        result->has_residual_echo_likelihood = input.has_residual_echo_likelihood();
      if (success)
        result->residual_echo_likelihood = input.residual_echo_likelihood();
      if (success)
        result->has_residual_echo_likelihood_recent_max = input.has_residual_echo_likelihood_recent_max();
      if (success)
        result->residual_echo_likelihood_recent_max = input.residual_echo_likelihood_recent_max();
      if (success)
        result->has_delay_ms = input.has_delay_ms();
      if (success)
        result->delay_ms = input.delay_ms();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::audio::mojom::AudioProcessingSettings::DataView, ::audio::mojom::AudioProcessingSettingsPtr>::Read(
    ::audio::mojom::AudioProcessingSettings::DataView input,
    ::audio::mojom::AudioProcessingSettingsPtr* output) {
  bool success = true;
  ::audio::mojom::AudioProcessingSettingsPtr result(::audio::mojom::AudioProcessingSettings::New());
  
      if (success && !input.ReadEchoCancellation(&result->echo_cancellation))
        success = false;
      if (success && !input.ReadNoiseSuppression(&result->noise_suppression))
        success = false;
      if (success && !input.ReadAutomaticGainControl(&result->automatic_gain_control))
        success = false;
      if (success)
        result->high_pass_filter = input.high_pass_filter();
      if (success)
        result->typing_detection = input.typing_detection();
      if (success)
        result->stereo_mirroring = input.stereo_mirroring();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::audio::mojom::AudioProcessingConfig::DataView, ::audio::mojom::AudioProcessingConfigPtr>::Read(
    ::audio::mojom::AudioProcessingConfig::DataView input,
    ::audio::mojom::AudioProcessingConfigPtr* output) {
  bool success = true;
  ::audio::mojom::AudioProcessingConfigPtr result(::audio::mojom::AudioProcessingConfig::New());
  
      if (success) {
        result->controls_receiver =
            input.TakeControlsReceiver<decltype(result->controls_receiver)>();
      }
      if (success && !input.ReadProcessingId(&result->processing_id))
        success = false;
      if (success && !input.ReadSettings(&result->settings))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif