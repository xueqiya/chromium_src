// services/audio/public/mojom/debug_recording.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_DEBUG_RECORDING_MOJOM_TEST_UTILS_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_DEBUG_RECORDING_MOJOM_TEST_UTILS_H_

#include "services/audio/public/mojom/debug_recording.mojom.h"


namespace audio {
namespace mojom {


class  DebugRecordingFileProviderInterceptorForTesting : public DebugRecordingFileProvider {
  virtual DebugRecordingFileProvider* GetForwardingInterface() = 0;
  void CreateWavFile(::media::AudioDebugRecordingStreamType stream_type, uint32_t id, CreateWavFileCallback callback) override;
};
class  DebugRecordingFileProviderAsyncWaiter {
 public:
  explicit DebugRecordingFileProviderAsyncWaiter(DebugRecordingFileProvider* proxy);
  ~DebugRecordingFileProviderAsyncWaiter();
  void CreateWavFile(
      ::media::AudioDebugRecordingStreamType stream_type, uint32_t id, ::base::File* out_file);

 private:
  DebugRecordingFileProvider* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(DebugRecordingFileProviderAsyncWaiter);
};


class  DebugRecordingInterceptorForTesting : public DebugRecording {
  virtual DebugRecording* GetForwardingInterface() = 0;
  void Enable(mojo::PendingRemote<DebugRecordingFileProvider> file_provider) override;
};
class  DebugRecordingAsyncWaiter {
 public:
  explicit DebugRecordingAsyncWaiter(DebugRecording* proxy);
  ~DebugRecordingAsyncWaiter();

 private:
  DebugRecording* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(DebugRecordingAsyncWaiter);
};




}  // namespace mojom
}  // namespace audio

#endif  // SERVICES_AUDIO_PUBLIC_MOJOM_DEBUG_RECORDING_MOJOM_TEST_UTILS_H_