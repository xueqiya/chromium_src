// services/audio/public/mojom/audio_processing.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_SHARED_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "services/audio/public/mojom/audio_processing.mojom-shared-internal.h"
#include "mojo/public/mojom/base/file.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace audio {
namespace mojom {
class AudioProcessingStatsDataView;

class AudioProcessingSettingsDataView;

class AudioProcessingConfigDataView;



}  // namespace mojom
}  // namespace audio

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::audio::mojom::AudioProcessingStatsDataView> {
  using Data = ::audio::mojom::internal::AudioProcessingStats_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::audio::mojom::AudioProcessingSettingsDataView> {
  using Data = ::audio::mojom::internal::AudioProcessingSettings_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::audio::mojom::AudioProcessingConfigDataView> {
  using Data = ::audio::mojom::internal::AudioProcessingConfig_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace audio {
namespace mojom {


enum class AutomaticGainControlType : int32_t {
  
  kDisabled,
  
  kDefault,
  
  kExperimental,
  
  kHybridExperimental,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, AutomaticGainControlType value);
inline bool IsKnownEnumValue(AutomaticGainControlType value) {
  return internal::AutomaticGainControlType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class EchoCancellationType : int32_t {
  
  kDisabled,
  
  kAec3,
  
  kSystemAec,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, EchoCancellationType value);
inline bool IsKnownEnumValue(EchoCancellationType value) {
  return internal::EchoCancellationType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class NoiseSuppressionType : int32_t {
  
  kDisabled,
  
  kDefault,
  
  kExperimental,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, NoiseSuppressionType value);
inline bool IsKnownEnumValue(NoiseSuppressionType value) {
  return internal::NoiseSuppressionType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class AudioProcessorControlsInterfaceBase {};

using AudioProcessorControlsPtrDataView =
    mojo::InterfacePtrDataView<AudioProcessorControlsInterfaceBase>;
using AudioProcessorControlsRequestDataView =
    mojo::InterfaceRequestDataView<AudioProcessorControlsInterfaceBase>;
using AudioProcessorControlsAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AudioProcessorControlsInterfaceBase>;
using AudioProcessorControlsAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AudioProcessorControlsInterfaceBase>;
class AudioProcessingStatsDataView {
 public:
  AudioProcessingStatsDataView() {}

  AudioProcessingStatsDataView(
      internal::AudioProcessingStats_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool typing_noise_detected() const {
    return data_->typing_noise_detected;
  }
  bool has_echo_return_loss() const {
    return data_->has_echo_return_loss;
  }
  double echo_return_loss() const {
    return data_->echo_return_loss;
  }
  bool has_echo_return_loss_enhancement() const {
    return data_->has_echo_return_loss_enhancement;
  }
  double echo_return_loss_enhancement() const {
    return data_->echo_return_loss_enhancement;
  }
  bool has_divergent_filter_fraction() const {
    return data_->has_divergent_filter_fraction;
  }
  double divergent_filter_fraction() const {
    return data_->divergent_filter_fraction;
  }
  bool has_delay_median_ms() const {
    return data_->has_delay_median_ms;
  }
  int32_t delay_median_ms() const {
    return data_->delay_median_ms;
  }
  bool has_delay_standard_deviation_ms() const {
    return data_->has_delay_standard_deviation_ms;
  }
  int32_t delay_standard_deviation_ms() const {
    return data_->delay_standard_deviation_ms;
  }
  bool has_residual_echo_likelihood() const {
    return data_->has_residual_echo_likelihood;
  }
  double residual_echo_likelihood() const {
    return data_->residual_echo_likelihood;
  }
  bool has_residual_echo_likelihood_recent_max() const {
    return data_->has_residual_echo_likelihood_recent_max;
  }
  double residual_echo_likelihood_recent_max() const {
    return data_->residual_echo_likelihood_recent_max;
  }
  bool has_delay_ms() const {
    return data_->has_delay_ms;
  }
  int32_t delay_ms() const {
    return data_->delay_ms;
  }
 private:
  internal::AudioProcessingStats_Data* data_ = nullptr;
};

class AudioProcessingSettingsDataView {
 public:
  AudioProcessingSettingsDataView() {}

  AudioProcessingSettingsDataView(
      internal::AudioProcessingSettings_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEchoCancellation(UserType* output) const {
    auto data_value = data_->echo_cancellation;
    return mojo::internal::Deserialize<::audio::mojom::EchoCancellationType>(
        data_value, output);
  }

  EchoCancellationType echo_cancellation() const {
    return static_cast<EchoCancellationType>(data_->echo_cancellation);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNoiseSuppression(UserType* output) const {
    auto data_value = data_->noise_suppression;
    return mojo::internal::Deserialize<::audio::mojom::NoiseSuppressionType>(
        data_value, output);
  }

  NoiseSuppressionType noise_suppression() const {
    return static_cast<NoiseSuppressionType>(data_->noise_suppression);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAutomaticGainControl(UserType* output) const {
    auto data_value = data_->automatic_gain_control;
    return mojo::internal::Deserialize<::audio::mojom::AutomaticGainControlType>(
        data_value, output);
  }

  AutomaticGainControlType automatic_gain_control() const {
    return static_cast<AutomaticGainControlType>(data_->automatic_gain_control);
  }
  bool high_pass_filter() const {
    return data_->high_pass_filter;
  }
  bool typing_detection() const {
    return data_->typing_detection;
  }
  bool stereo_mirroring() const {
    return data_->stereo_mirroring;
  }
 private:
  internal::AudioProcessingSettings_Data* data_ = nullptr;
};

class AudioProcessingConfigDataView {
 public:
  AudioProcessingConfigDataView() {}

  AudioProcessingConfigDataView(
      internal::AudioProcessingConfig_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeControlsReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::audio::mojom::AudioProcessorControlsInterfaceBase>>(
            &data_->controls_receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
  inline void GetProcessingIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProcessingId(UserType* output) {
    auto* pointer = data_->processing_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  inline void GetSettingsDataView(
      AudioProcessingSettingsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSettings(UserType* output) {
    auto* pointer = data_->settings.Get();
    return mojo::internal::Deserialize<::audio::mojom::AudioProcessingSettingsDataView>(
        pointer, output, context_);
  }
 private:
  internal::AudioProcessingConfig_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace audio

namespace std {

template <>
struct hash<::audio::mojom::AutomaticGainControlType>
    : public mojo::internal::EnumHashImpl<::audio::mojom::AutomaticGainControlType> {};

template <>
struct hash<::audio::mojom::EchoCancellationType>
    : public mojo::internal::EnumHashImpl<::audio::mojom::EchoCancellationType> {};

template <>
struct hash<::audio::mojom::NoiseSuppressionType>
    : public mojo::internal::EnumHashImpl<::audio::mojom::NoiseSuppressionType> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::audio::mojom::AutomaticGainControlType, ::audio::mojom::AutomaticGainControlType> {
  static ::audio::mojom::AutomaticGainControlType ToMojom(::audio::mojom::AutomaticGainControlType input) { return input; }
  static bool FromMojom(::audio::mojom::AutomaticGainControlType input, ::audio::mojom::AutomaticGainControlType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::audio::mojom::AutomaticGainControlType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::audio::mojom::AutomaticGainControlType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::audio::mojom::AutomaticGainControlType>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::audio::mojom::EchoCancellationType, ::audio::mojom::EchoCancellationType> {
  static ::audio::mojom::EchoCancellationType ToMojom(::audio::mojom::EchoCancellationType input) { return input; }
  static bool FromMojom(::audio::mojom::EchoCancellationType input, ::audio::mojom::EchoCancellationType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::audio::mojom::EchoCancellationType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::audio::mojom::EchoCancellationType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::audio::mojom::EchoCancellationType>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::audio::mojom::NoiseSuppressionType, ::audio::mojom::NoiseSuppressionType> {
  static ::audio::mojom::NoiseSuppressionType ToMojom(::audio::mojom::NoiseSuppressionType input) { return input; }
  static bool FromMojom(::audio::mojom::NoiseSuppressionType input, ::audio::mojom::NoiseSuppressionType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::audio::mojom::NoiseSuppressionType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::audio::mojom::NoiseSuppressionType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::audio::mojom::NoiseSuppressionType>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::audio::mojom::AudioProcessingStatsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::audio::mojom::AudioProcessingStatsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::audio::mojom::internal::AudioProcessingStats_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->typing_noise_detected = Traits::typing_noise_detected(input);
    (*output)->has_echo_return_loss = Traits::has_echo_return_loss(input);
    (*output)->echo_return_loss = Traits::echo_return_loss(input);
    (*output)->has_echo_return_loss_enhancement = Traits::has_echo_return_loss_enhancement(input);
    (*output)->echo_return_loss_enhancement = Traits::echo_return_loss_enhancement(input);
    (*output)->has_divergent_filter_fraction = Traits::has_divergent_filter_fraction(input);
    (*output)->divergent_filter_fraction = Traits::divergent_filter_fraction(input);
    (*output)->has_delay_median_ms = Traits::has_delay_median_ms(input);
    (*output)->delay_median_ms = Traits::delay_median_ms(input);
    (*output)->has_delay_standard_deviation_ms = Traits::has_delay_standard_deviation_ms(input);
    (*output)->delay_standard_deviation_ms = Traits::delay_standard_deviation_ms(input);
    (*output)->has_residual_echo_likelihood = Traits::has_residual_echo_likelihood(input);
    (*output)->residual_echo_likelihood = Traits::residual_echo_likelihood(input);
    (*output)->has_residual_echo_likelihood_recent_max = Traits::has_residual_echo_likelihood_recent_max(input);
    (*output)->residual_echo_likelihood_recent_max = Traits::residual_echo_likelihood_recent_max(input);
    (*output)->has_delay_ms = Traits::has_delay_ms(input);
    (*output)->delay_ms = Traits::delay_ms(input);
  }

  static bool Deserialize(::audio::mojom::internal::AudioProcessingStats_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::audio::mojom::AudioProcessingStatsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::audio::mojom::AudioProcessingSettingsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::audio::mojom::AudioProcessingSettingsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::audio::mojom::internal::AudioProcessingSettings_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::audio::mojom::EchoCancellationType>(
        Traits::echo_cancellation(input), &(*output)->echo_cancellation);
    mojo::internal::Serialize<::audio::mojom::NoiseSuppressionType>(
        Traits::noise_suppression(input), &(*output)->noise_suppression);
    mojo::internal::Serialize<::audio::mojom::AutomaticGainControlType>(
        Traits::automatic_gain_control(input), &(*output)->automatic_gain_control);
    (*output)->high_pass_filter = Traits::high_pass_filter(input);
    (*output)->typing_detection = Traits::typing_detection(input);
    (*output)->stereo_mirroring = Traits::stereo_mirroring(input);
  }

  static bool Deserialize(::audio::mojom::internal::AudioProcessingSettings_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::audio::mojom::AudioProcessingSettingsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::audio::mojom::AudioProcessingConfigDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::audio::mojom::AudioProcessingConfigDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::audio::mojom::internal::AudioProcessingConfig_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::controls_receiver(input)) in_controls_receiver = Traits::controls_receiver(input);
    mojo::internal::Serialize<mojo::InterfaceRequestDataView<::audio::mojom::AudioProcessorControlsInterfaceBase>>(
        in_controls_receiver, &(*output)->controls_receiver, context);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        !mojo::internal::IsHandleOrInterfaceValid((*output)->controls_receiver),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
        "invalid controls_receiver in AudioProcessingConfig struct");
    decltype(Traits::processing_id(input)) in_processing_id = Traits::processing_id(input);
    typename decltype((*output)->processing_id)::BaseType::BufferWriter
        processing_id_writer;
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_processing_id, buffer, &processing_id_writer, context);
    (*output)->processing_id.Set(
        processing_id_writer.is_null() ? nullptr : processing_id_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->processing_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null processing_id in AudioProcessingConfig struct");
    decltype(Traits::settings(input)) in_settings = Traits::settings(input);
    typename decltype((*output)->settings)::BaseType::BufferWriter
        settings_writer;
    mojo::internal::Serialize<::audio::mojom::AudioProcessingSettingsDataView>(
        in_settings, buffer, &settings_writer, context);
    (*output)->settings.Set(
        settings_writer.is_null() ? nullptr : settings_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->settings.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null settings in AudioProcessingConfig struct");
  }

  static bool Deserialize(::audio::mojom::internal::AudioProcessingConfig_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::audio::mojom::AudioProcessingConfigDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace audio {
namespace mojom {





inline void AudioProcessingConfigDataView::GetProcessingIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->processing_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void AudioProcessingConfigDataView::GetSettingsDataView(
    AudioProcessingSettingsDataView* output) {
  auto pointer = data_->settings.Get();
  *output = AudioProcessingSettingsDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace audio

#endif  // SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_SHARED_H_