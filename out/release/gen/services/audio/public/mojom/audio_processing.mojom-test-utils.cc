// services/audio/public/mojom/audio_processing.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/audio/public/mojom/audio_processing.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/file.mojom.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "mojo/public/mojom/base/unguessable_token.mojom.h"


#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_JUMBO_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "services/audio/public/cpp/audio_processing_mojom_traits.h"
#endif


namespace audio {
namespace mojom {


void AudioProcessorControlsInterceptorForTesting::GetStats(GetStatsCallback callback) {
  GetForwardingInterface()->GetStats(std::move(callback));
}
void AudioProcessorControlsInterceptorForTesting::StartEchoCancellationDump(::base::File file) {
  GetForwardingInterface()->StartEchoCancellationDump(std::move(file));
}
void AudioProcessorControlsInterceptorForTesting::StopEchoCancellationDump() {
  GetForwardingInterface()->StopEchoCancellationDump();
}
AudioProcessorControlsAsyncWaiter::AudioProcessorControlsAsyncWaiter(
    AudioProcessorControls* proxy) : proxy_(proxy) {}

AudioProcessorControlsAsyncWaiter::~AudioProcessorControlsAsyncWaiter() = default;

void AudioProcessorControlsAsyncWaiter::GetStats(
    ::webrtc::AudioProcessorInterface::AudioProcessorStatistics* out_stats) {
  base::RunLoop loop;
  proxy_->GetStats(
      base::BindOnce(
          [](base::RunLoop* loop,
             ::webrtc::AudioProcessorInterface::AudioProcessorStatistics* out_stats
,
             const ::webrtc::AudioProcessorInterface::AudioProcessorStatistics& stats) {*out_stats = std::move(stats);
            loop->Quit();
          },
          &loop,
          out_stats));
  loop.Run();
}





}  // namespace mojom
}  // namespace audio

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif