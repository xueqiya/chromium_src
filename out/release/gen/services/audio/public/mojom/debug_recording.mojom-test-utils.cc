// services/audio/public/mojom/debug_recording.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/audio/public/mojom/debug_recording.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/file.mojom.h"
#include "mojo/public/mojom/base/file_path.mojom.h"


#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_DEBUG_RECORDING_MOJOM_JUMBO_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_DEBUG_RECORDING_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "services/audio/public/cpp/debug_recording_mojom_traits.h"
#endif


namespace audio {
namespace mojom {


void DebugRecordingFileProviderInterceptorForTesting::CreateWavFile(::media::AudioDebugRecordingStreamType stream_type, uint32_t id, CreateWavFileCallback callback) {
  GetForwardingInterface()->CreateWavFile(std::move(stream_type), std::move(id), std::move(callback));
}
DebugRecordingFileProviderAsyncWaiter::DebugRecordingFileProviderAsyncWaiter(
    DebugRecordingFileProvider* proxy) : proxy_(proxy) {}

DebugRecordingFileProviderAsyncWaiter::~DebugRecordingFileProviderAsyncWaiter() = default;

void DebugRecordingFileProviderAsyncWaiter::CreateWavFile(
    ::media::AudioDebugRecordingStreamType stream_type, uint32_t id, ::base::File* out_file) {
  base::RunLoop loop;
  proxy_->CreateWavFile(std::move(stream_type),std::move(id),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::base::File* out_file
,
             ::base::File file) {*out_file = std::move(file);
            loop->Quit();
          },
          &loop,
          out_file));
  loop.Run();
}



void DebugRecordingInterceptorForTesting::Enable(mojo::PendingRemote<DebugRecordingFileProvider> file_provider) {
  GetForwardingInterface()->Enable(std::move(file_provider));
}
DebugRecordingAsyncWaiter::DebugRecordingAsyncWaiter(
    DebugRecording* proxy) : proxy_(proxy) {}

DebugRecordingAsyncWaiter::~DebugRecordingAsyncWaiter() = default;






}  // namespace mojom
}  // namespace audio

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif