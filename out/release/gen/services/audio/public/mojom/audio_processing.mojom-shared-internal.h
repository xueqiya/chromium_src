// services/audio/public/mojom/audio_processing.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/file.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace audio {
namespace mojom {
namespace internal {
class AudioProcessingStats_Data;
class AudioProcessingSettings_Data;
class AudioProcessingConfig_Data;

struct AutomaticGainControlType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct EchoCancellationType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct NoiseSuppressionType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class  AudioProcessingStats_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AudioProcessingStats_Data));
      new (data()) AudioProcessingStats_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AudioProcessingStats_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AudioProcessingStats_Data>(index_);
    }
    AudioProcessingStats_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t typing_noise_detected : 1;
  uint8_t has_echo_return_loss : 1;
  uint8_t has_echo_return_loss_enhancement : 1;
  uint8_t has_divergent_filter_fraction : 1;
  uint8_t has_delay_median_ms : 1;
  uint8_t has_delay_standard_deviation_ms : 1;
  uint8_t has_residual_echo_likelihood : 1;
  uint8_t has_residual_echo_likelihood_recent_max : 1;
  uint8_t has_delay_ms : 1;
  uint8_t pad8_[2];
  int32_t delay_median_ms;
  double echo_return_loss;
  double echo_return_loss_enhancement;
  double divergent_filter_fraction;
  int32_t delay_standard_deviation_ms;
  int32_t delay_ms;
  double residual_echo_likelihood;
  double residual_echo_likelihood_recent_max;

 private:
  AudioProcessingStats_Data();
  ~AudioProcessingStats_Data() = delete;
};
static_assert(sizeof(AudioProcessingStats_Data) == 64,
              "Bad sizeof(AudioProcessingStats_Data)");
// Used by AudioProcessingStats::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AudioProcessingStats_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AudioProcessingStats_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AudioProcessingStats_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    AudioProcessingStats_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AudioProcessingStats_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  AudioProcessingSettings_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AudioProcessingSettings_Data));
      new (data()) AudioProcessingSettings_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AudioProcessingSettings_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AudioProcessingSettings_Data>(index_);
    }
    AudioProcessingSettings_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t echo_cancellation;
  int32_t noise_suppression;
  int32_t automatic_gain_control;
  uint8_t high_pass_filter : 1;
  uint8_t typing_detection : 1;
  uint8_t stereo_mirroring : 1;
  uint8_t padfinal_[3];

 private:
  AudioProcessingSettings_Data();
  ~AudioProcessingSettings_Data() = delete;
};
static_assert(sizeof(AudioProcessingSettings_Data) == 24,
              "Bad sizeof(AudioProcessingSettings_Data)");
// Used by AudioProcessingSettings::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AudioProcessingSettings_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AudioProcessingSettings_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AudioProcessingSettings_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    AudioProcessingSettings_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AudioProcessingSettings_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  AudioProcessingConfig_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AudioProcessingConfig_Data));
      new (data()) AudioProcessingConfig_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AudioProcessingConfig_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AudioProcessingConfig_Data>(index_);
    }
    AudioProcessingConfig_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data controls_receiver;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> processing_id;
  mojo::internal::Pointer<internal::AudioProcessingSettings_Data> settings;

 private:
  AudioProcessingConfig_Data();
  ~AudioProcessingConfig_Data() = delete;
};
static_assert(sizeof(AudioProcessingConfig_Data) == 32,
              "Bad sizeof(AudioProcessingConfig_Data)");
// Used by AudioProcessingConfig::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AudioProcessingConfig_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AudioProcessingConfig_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AudioProcessingConfig_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    AudioProcessingConfig_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AudioProcessingConfig_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace audio

#endif  // SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_PROCESSING_MOJOM_SHARED_INTERNAL_H_