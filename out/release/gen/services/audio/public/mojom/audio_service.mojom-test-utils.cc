// services/audio/public/mojom/audio_service.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/audio/public/mojom/audio_service.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "services/audio/public/mojom/debug_recording.mojom.h"
#include "services/audio/public/mojom/device_notifications.mojom.h"
#include "services/audio/public/mojom/log_factory_manager.mojom.h"
#include "services/audio/public/mojom/stream_factory.mojom.h"
#include "services/audio/public/mojom/system_info.mojom.h"
#include "services/audio/public/mojom/testing_api.mojom.h"


#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_SERVICE_MOJOM_JUMBO_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_AUDIO_SERVICE_MOJOM_JUMBO_H_
#endif


namespace audio {
namespace mojom {


void AudioServiceInterceptorForTesting::BindSystemInfo(mojo::PendingReceiver<::audio::mojom::SystemInfo> receiver) {
  GetForwardingInterface()->BindSystemInfo(std::move(receiver));
}
void AudioServiceInterceptorForTesting::BindDebugRecording(mojo::PendingReceiver<::audio::mojom::DebugRecording> receiver) {
  GetForwardingInterface()->BindDebugRecording(std::move(receiver));
}
void AudioServiceInterceptorForTesting::BindStreamFactory(mojo::PendingReceiver<::audio::mojom::StreamFactory> receiver) {
  GetForwardingInterface()->BindStreamFactory(std::move(receiver));
}
void AudioServiceInterceptorForTesting::BindDeviceNotifier(mojo::PendingReceiver<::audio::mojom::DeviceNotifier> receiver) {
  GetForwardingInterface()->BindDeviceNotifier(std::move(receiver));
}
void AudioServiceInterceptorForTesting::BindLogFactoryManager(mojo::PendingReceiver<::audio::mojom::LogFactoryManager> receiver) {
  GetForwardingInterface()->BindLogFactoryManager(std::move(receiver));
}
void AudioServiceInterceptorForTesting::BindTestingApi(mojo::PendingReceiver<::audio::mojom::TestingApi> receiver) {
  GetForwardingInterface()->BindTestingApi(std::move(receiver));
}
AudioServiceAsyncWaiter::AudioServiceAsyncWaiter(
    AudioService* proxy) : proxy_(proxy) {}

AudioServiceAsyncWaiter::~AudioServiceAsyncWaiter() = default;






}  // namespace mojom
}  // namespace audio

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif