// services/preferences/public/mojom/tracked_preference_validation_delegate.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/preferences/public/mojom/tracked_preference_validation_delegate.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/values.mojom.h"


#ifndef SERVICES_PREFERENCES_PUBLIC_MOJOM_TRACKED_PREFERENCE_VALIDATION_DELEGATE_MOJOM_JUMBO_H_
#define SERVICES_PREFERENCES_PUBLIC_MOJOM_TRACKED_PREFERENCE_VALIDATION_DELEGATE_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/values_mojom_traits.h"
#endif


namespace prefs {
namespace mojom {


void TrackedPreferenceValidationDelegateInterceptorForTesting::OnAtomicPreferenceValidation(const std::string& pref_path, base::Optional<::base::Value> value, TrackedPreferenceValidationDelegate::ValueState value_state, TrackedPreferenceValidationDelegate::ValueState external_validation_value_state, bool is_personal) {
  GetForwardingInterface()->OnAtomicPreferenceValidation(std::move(pref_path), std::move(value), std::move(value_state), std::move(external_validation_value_state), std::move(is_personal));
}
void TrackedPreferenceValidationDelegateInterceptorForTesting::OnSplitPreferenceValidation(const std::string& pref_path, const std::vector<std::string>& invalid_keys, const std::vector<std::string>& external_validation_invalid_keys, TrackedPreferenceValidationDelegate::ValueState value_state, TrackedPreferenceValidationDelegate::ValueState external_validation_value_state, bool is_personal) {
  GetForwardingInterface()->OnSplitPreferenceValidation(std::move(pref_path), std::move(invalid_keys), std::move(external_validation_invalid_keys), std::move(value_state), std::move(external_validation_value_state), std::move(is_personal));
}
TrackedPreferenceValidationDelegateAsyncWaiter::TrackedPreferenceValidationDelegateAsyncWaiter(
    TrackedPreferenceValidationDelegate* proxy) : proxy_(proxy) {}

TrackedPreferenceValidationDelegateAsyncWaiter::~TrackedPreferenceValidationDelegateAsyncWaiter() = default;






}  // namespace mojom
}  // namespace prefs

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif