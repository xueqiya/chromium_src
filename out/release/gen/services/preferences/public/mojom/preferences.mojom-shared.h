// services/preferences/public/mojom/preferences.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_PREFERENCES_PUBLIC_MOJOM_PREFERENCES_MOJOM_SHARED_H_
#define SERVICES_PREFERENCES_PUBLIC_MOJOM_PREFERENCES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "services/preferences/public/mojom/preferences.mojom-shared-internal.h"
#include "mojo/public/mojom/base/token.mojom-shared.h"
#include "mojo/public/mojom/base/file_path.mojom-shared.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "mojo/public/mojom/base/values.mojom-shared.h"
#include "services/preferences/public/mojom/tracked_preference_validation_delegate.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace prefs {
namespace mojom {
class TrackedPersistentPrefStoreConfigurationDataView;

class TrackedPreferenceMetadataDataView;



}  // namespace mojom
}  // namespace prefs

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::prefs::mojom::TrackedPersistentPrefStoreConfigurationDataView> {
  using Data = ::prefs::mojom::internal::TrackedPersistentPrefStoreConfiguration_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::prefs::mojom::TrackedPreferenceMetadataDataView> {
  using Data = ::prefs::mojom::internal::TrackedPreferenceMetadata_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace prefs {
namespace mojom {


enum class TrackedPreferenceMetadata_EnforcementLevel : int32_t {
  
  NO_ENFORCEMENT,
  
  ENFORCE_ON_LOAD,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, TrackedPreferenceMetadata_EnforcementLevel value);
inline bool IsKnownEnumValue(TrackedPreferenceMetadata_EnforcementLevel value) {
  return internal::TrackedPreferenceMetadata_EnforcementLevel_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class TrackedPreferenceMetadata_PrefTrackingStrategy : int32_t {
  
  ATOMIC,
  
  SPLIT,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, TrackedPreferenceMetadata_PrefTrackingStrategy value);
inline bool IsKnownEnumValue(TrackedPreferenceMetadata_PrefTrackingStrategy value) {
  return internal::TrackedPreferenceMetadata_PrefTrackingStrategy_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class TrackedPreferenceMetadata_ValueType : int32_t {
  
  IMPERSONAL,
  
  PERSONAL,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, TrackedPreferenceMetadata_ValueType value);
inline bool IsKnownEnumValue(TrackedPreferenceMetadata_ValueType value) {
  return internal::TrackedPreferenceMetadata_ValueType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class ResetOnLoadObserverInterfaceBase {};

using ResetOnLoadObserverPtrDataView =
    mojo::InterfacePtrDataView<ResetOnLoadObserverInterfaceBase>;
using ResetOnLoadObserverRequestDataView =
    mojo::InterfaceRequestDataView<ResetOnLoadObserverInterfaceBase>;
using ResetOnLoadObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ResetOnLoadObserverInterfaceBase>;
using ResetOnLoadObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ResetOnLoadObserverInterfaceBase>;
class TrackedPersistentPrefStoreConfigurationDataView {
 public:
  TrackedPersistentPrefStoreConfigurationDataView() {}

  TrackedPersistentPrefStoreConfigurationDataView(
      internal::TrackedPersistentPrefStoreConfiguration_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUnprotectedPrefFilenameDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUnprotectedPrefFilename(UserType* output) {
    auto* pointer = data_->unprotected_pref_filename.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, context_);
  }
  inline void GetProtectedPrefFilenameDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProtectedPrefFilename(UserType* output) {
    auto* pointer = data_->protected_pref_filename.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, context_);
  }
  inline void GetTrackingConfigurationDataView(
      mojo::ArrayDataView<TrackedPreferenceMetadataDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTrackingConfiguration(UserType* output) {
    auto* pointer = data_->tracking_configuration.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::prefs::mojom::TrackedPreferenceMetadataDataView>>(
        pointer, output, context_);
  }
  uint64_t reporting_ids_count() const {
    return data_->reporting_ids_count;
  }
  inline void GetSeedDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSeed(UserType* output) {
    auto* pointer = data_->seed.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetLegacyDeviceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLegacyDeviceId(UserType* output) {
    auto* pointer = data_->legacy_device_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetRegistrySeedDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRegistrySeed(UserType* output) {
    auto* pointer = data_->registry_seed.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetRegistryPathDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRegistryPath(UserType* output) {
    auto* pointer = data_->registry_path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeValidationDelegate() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::prefs::mojom::TrackedPreferenceValidationDelegateInterfaceBase>>(
            &data_->validation_delegate, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeResetOnLoadObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::prefs::mojom::ResetOnLoadObserverInterfaceBase>>(
            &data_->reset_on_load_observer, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::TrackedPersistentPrefStoreConfiguration_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class TrackedPreferenceMetadataDataView {
 public:
  TrackedPreferenceMetadataDataView() {}

  TrackedPreferenceMetadataDataView(
      internal::TrackedPreferenceMetadata_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  uint64_t reporting_id() const {
    return data_->reporting_id;
  }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) {
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEnforcementLevel(UserType* output) const {
    auto data_value = data_->enforcement_level;
    return mojo::internal::Deserialize<::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel>(
        data_value, output);
  }

  TrackedPreferenceMetadata_EnforcementLevel enforcement_level() const {
    return static_cast<TrackedPreferenceMetadata_EnforcementLevel>(data_->enforcement_level);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStrategy(UserType* output) const {
    auto data_value = data_->strategy;
    return mojo::internal::Deserialize<::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy>(
        data_value, output);
  }

  TrackedPreferenceMetadata_PrefTrackingStrategy strategy() const {
    return static_cast<TrackedPreferenceMetadata_PrefTrackingStrategy>(data_->strategy);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValueType(UserType* output) const {
    auto data_value = data_->value_type;
    return mojo::internal::Deserialize<::prefs::mojom::TrackedPreferenceMetadata_ValueType>(
        data_value, output);
  }

  TrackedPreferenceMetadata_ValueType value_type() const {
    return static_cast<TrackedPreferenceMetadata_ValueType>(data_->value_type);
  }
 private:
  internal::TrackedPreferenceMetadata_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace prefs

namespace std {

template <>
struct hash<::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel>
    : public mojo::internal::EnumHashImpl<::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel> {};

template <>
struct hash<::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy>
    : public mojo::internal::EnumHashImpl<::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy> {};

template <>
struct hash<::prefs::mojom::TrackedPreferenceMetadata_ValueType>
    : public mojo::internal::EnumHashImpl<::prefs::mojom::TrackedPreferenceMetadata_ValueType> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel, ::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel> {
  static ::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel ToMojom(::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel input) { return input; }
  static bool FromMojom(::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel input, ::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy, ::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy> {
  static ::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy ToMojom(::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy input) { return input; }
  static bool FromMojom(::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy input, ::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::prefs::mojom::TrackedPreferenceMetadata_ValueType, ::prefs::mojom::TrackedPreferenceMetadata_ValueType> {
  static ::prefs::mojom::TrackedPreferenceMetadata_ValueType ToMojom(::prefs::mojom::TrackedPreferenceMetadata_ValueType input) { return input; }
  static bool FromMojom(::prefs::mojom::TrackedPreferenceMetadata_ValueType input, ::prefs::mojom::TrackedPreferenceMetadata_ValueType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::prefs::mojom::TrackedPreferenceMetadata_ValueType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::prefs::mojom::TrackedPreferenceMetadata_ValueType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::prefs::mojom::TrackedPreferenceMetadata_ValueType>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::prefs::mojom::TrackedPersistentPrefStoreConfigurationDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::prefs::mojom::TrackedPersistentPrefStoreConfigurationDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::prefs::mojom::internal::TrackedPersistentPrefStoreConfiguration_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::unprotected_pref_filename(input)) in_unprotected_pref_filename = Traits::unprotected_pref_filename(input);
    typename decltype((*output)->unprotected_pref_filename)::BaseType::BufferWriter
        unprotected_pref_filename_writer;
    mojo::internal::Serialize<::mojo_base::mojom::FilePathDataView>(
        in_unprotected_pref_filename, buffer, &unprotected_pref_filename_writer, context);
    (*output)->unprotected_pref_filename.Set(
        unprotected_pref_filename_writer.is_null() ? nullptr : unprotected_pref_filename_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->unprotected_pref_filename.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null unprotected_pref_filename in TrackedPersistentPrefStoreConfiguration struct");
    decltype(Traits::protected_pref_filename(input)) in_protected_pref_filename = Traits::protected_pref_filename(input);
    typename decltype((*output)->protected_pref_filename)::BaseType::BufferWriter
        protected_pref_filename_writer;
    mojo::internal::Serialize<::mojo_base::mojom::FilePathDataView>(
        in_protected_pref_filename, buffer, &protected_pref_filename_writer, context);
    (*output)->protected_pref_filename.Set(
        protected_pref_filename_writer.is_null() ? nullptr : protected_pref_filename_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->protected_pref_filename.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null protected_pref_filename in TrackedPersistentPrefStoreConfiguration struct");
    decltype(Traits::tracking_configuration(input)) in_tracking_configuration = Traits::tracking_configuration(input);
    typename decltype((*output)->tracking_configuration)::BaseType::BufferWriter
        tracking_configuration_writer;
    const mojo::internal::ContainerValidateParams tracking_configuration_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::prefs::mojom::TrackedPreferenceMetadataDataView>>(
        in_tracking_configuration, buffer, &tracking_configuration_writer, &tracking_configuration_validate_params,
        context);
    (*output)->tracking_configuration.Set(
        tracking_configuration_writer.is_null() ? nullptr : tracking_configuration_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->tracking_configuration.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null tracking_configuration in TrackedPersistentPrefStoreConfiguration struct");
    (*output)->reporting_ids_count = Traits::reporting_ids_count(input);
    decltype(Traits::seed(input)) in_seed = Traits::seed(input);
    typename decltype((*output)->seed)::BaseType::BufferWriter
        seed_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_seed, buffer, &seed_writer, context);
    (*output)->seed.Set(
        seed_writer.is_null() ? nullptr : seed_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->seed.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null seed in TrackedPersistentPrefStoreConfiguration struct");
    decltype(Traits::legacy_device_id(input)) in_legacy_device_id = Traits::legacy_device_id(input);
    typename decltype((*output)->legacy_device_id)::BaseType::BufferWriter
        legacy_device_id_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_legacy_device_id, buffer, &legacy_device_id_writer, context);
    (*output)->legacy_device_id.Set(
        legacy_device_id_writer.is_null() ? nullptr : legacy_device_id_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->legacy_device_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null legacy_device_id in TrackedPersistentPrefStoreConfiguration struct");
    decltype(Traits::registry_seed(input)) in_registry_seed = Traits::registry_seed(input);
    typename decltype((*output)->registry_seed)::BaseType::BufferWriter
        registry_seed_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_registry_seed, buffer, &registry_seed_writer, context);
    (*output)->registry_seed.Set(
        registry_seed_writer.is_null() ? nullptr : registry_seed_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->registry_seed.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null registry_seed in TrackedPersistentPrefStoreConfiguration struct");
    decltype(Traits::registry_path(input)) in_registry_path = Traits::registry_path(input);
    typename decltype((*output)->registry_path)::BaseType::BufferWriter
        registry_path_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_registry_path, buffer, &registry_path_writer, context);
    (*output)->registry_path.Set(
        registry_path_writer.is_null() ? nullptr : registry_path_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->registry_path.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null registry_path in TrackedPersistentPrefStoreConfiguration struct");
    decltype(Traits::validation_delegate(input)) in_validation_delegate = Traits::validation_delegate(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::prefs::mojom::TrackedPreferenceValidationDelegateInterfaceBase>>(
        in_validation_delegate, &(*output)->validation_delegate, context);
    decltype(Traits::reset_on_load_observer(input)) in_reset_on_load_observer = Traits::reset_on_load_observer(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::prefs::mojom::ResetOnLoadObserverInterfaceBase>>(
        in_reset_on_load_observer, &(*output)->reset_on_load_observer, context);
  }

  static bool Deserialize(::prefs::mojom::internal::TrackedPersistentPrefStoreConfiguration_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::prefs::mojom::TrackedPersistentPrefStoreConfigurationDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::prefs::mojom::TrackedPreferenceMetadataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::prefs::mojom::TrackedPreferenceMetadataDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::prefs::mojom::internal::TrackedPreferenceMetadata_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->reporting_id = Traits::reporting_id(input);
    decltype(Traits::name(input)) in_name = Traits::name(input);
    typename decltype((*output)->name)::BaseType::BufferWriter
        name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, buffer, &name_writer, context);
    (*output)->name.Set(
        name_writer.is_null() ? nullptr : name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in TrackedPreferenceMetadata struct");
    mojo::internal::Serialize<::prefs::mojom::TrackedPreferenceMetadata_EnforcementLevel>(
        Traits::enforcement_level(input), &(*output)->enforcement_level);
    mojo::internal::Serialize<::prefs::mojom::TrackedPreferenceMetadata_PrefTrackingStrategy>(
        Traits::strategy(input), &(*output)->strategy);
    mojo::internal::Serialize<::prefs::mojom::TrackedPreferenceMetadata_ValueType>(
        Traits::value_type(input), &(*output)->value_type);
  }

  static bool Deserialize(::prefs::mojom::internal::TrackedPreferenceMetadata_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::prefs::mojom::TrackedPreferenceMetadataDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace prefs {
namespace mojom {

inline void TrackedPersistentPrefStoreConfigurationDataView::GetUnprotectedPrefFilenameDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->unprotected_pref_filename.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, context_);
}
inline void TrackedPersistentPrefStoreConfigurationDataView::GetProtectedPrefFilenameDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->protected_pref_filename.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, context_);
}
inline void TrackedPersistentPrefStoreConfigurationDataView::GetTrackingConfigurationDataView(
    mojo::ArrayDataView<TrackedPreferenceMetadataDataView>* output) {
  auto pointer = data_->tracking_configuration.Get();
  *output = mojo::ArrayDataView<TrackedPreferenceMetadataDataView>(pointer, context_);
}
inline void TrackedPersistentPrefStoreConfigurationDataView::GetSeedDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->seed.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void TrackedPersistentPrefStoreConfigurationDataView::GetLegacyDeviceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->legacy_device_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void TrackedPersistentPrefStoreConfigurationDataView::GetRegistrySeedDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->registry_seed.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void TrackedPersistentPrefStoreConfigurationDataView::GetRegistryPathDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->registry_path.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void TrackedPreferenceMetadataDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace prefs

#endif  // SERVICES_PREFERENCES_PUBLIC_MOJOM_PREFERENCES_MOJOM_SHARED_H_