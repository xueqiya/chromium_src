// services/tracing/public/mojom/tracing_service.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/tracing/public/mojom/tracing_service.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "services/tracing/public/mojom/perfetto_service.mojom.h"
#include "services/tracing/public/mojom/traced_process.mojom.h"


#ifndef SERVICES_TRACING_PUBLIC_MOJOM_TRACING_SERVICE_MOJOM_JUMBO_H_
#define SERVICES_TRACING_PUBLIC_MOJOM_TRACING_SERVICE_MOJOM_JUMBO_H_
#endif


namespace tracing {
namespace mojom {


void TracingServiceInterceptorForTesting::Initialize(std::vector<ClientInfoPtr> clients) {
  GetForwardingInterface()->Initialize(std::move(clients));
}
void TracingServiceInterceptorForTesting::AddClient(ClientInfoPtr client) {
  GetForwardingInterface()->AddClient(std::move(client));
}
void TracingServiceInterceptorForTesting::BindConsumerHost(mojo::PendingReceiver<::tracing::mojom::ConsumerHost> receiver) {
  GetForwardingInterface()->BindConsumerHost(std::move(receiver));
}
TracingServiceAsyncWaiter::TracingServiceAsyncWaiter(
    TracingService* proxy) : proxy_(proxy) {}

TracingServiceAsyncWaiter::~TracingServiceAsyncWaiter() = default;






}  // namespace mojom
}  // namespace tracing

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif