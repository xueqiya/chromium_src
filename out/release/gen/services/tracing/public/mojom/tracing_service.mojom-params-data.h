// services/tracing/public/mojom/tracing_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_TRACING_PUBLIC_MOJOM_TRACING_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_TRACING_PUBLIC_MOJOM_TRACING_SERVICE_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace tracing {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(TRACING_MOJOM_SHARED) TracingService_Initialize_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(TracingService_Initialize_Params_Data));
      new (data()) TracingService_Initialize_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    TracingService_Initialize_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<TracingService_Initialize_Params_Data>(index_);
    }
    TracingService_Initialize_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ClientInfo_Data>>> clients;

 private:
  TracingService_Initialize_Params_Data();
  ~TracingService_Initialize_Params_Data() = delete;
};
static_assert(sizeof(TracingService_Initialize_Params_Data) == 16,
              "Bad sizeof(TracingService_Initialize_Params_Data)");
class COMPONENT_EXPORT(TRACING_MOJOM_SHARED) TracingService_AddClient_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(TracingService_AddClient_Params_Data));
      new (data()) TracingService_AddClient_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    TracingService_AddClient_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<TracingService_AddClient_Params_Data>(index_);
    }
    TracingService_AddClient_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ClientInfo_Data> client;

 private:
  TracingService_AddClient_Params_Data();
  ~TracingService_AddClient_Params_Data() = delete;
};
static_assert(sizeof(TracingService_AddClient_Params_Data) == 16,
              "Bad sizeof(TracingService_AddClient_Params_Data)");
class COMPONENT_EXPORT(TRACING_MOJOM_SHARED) TracingService_BindConsumerHost_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(TracingService_BindConsumerHost_Params_Data));
      new (data()) TracingService_BindConsumerHost_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    TracingService_BindConsumerHost_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<TracingService_BindConsumerHost_Params_Data>(index_);
    }
    TracingService_BindConsumerHost_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  TracingService_BindConsumerHost_Params_Data();
  ~TracingService_BindConsumerHost_Params_Data() = delete;
};
static_assert(sizeof(TracingService_BindConsumerHost_Params_Data) == 16,
              "Bad sizeof(TracingService_BindConsumerHost_Params_Data)");

}  // namespace internal
class TracingService_Initialize_ParamsDataView {
 public:
  TracingService_Initialize_ParamsDataView() {}

  TracingService_Initialize_ParamsDataView(
      internal::TracingService_Initialize_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetClientsDataView(
      mojo::ArrayDataView<ClientInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadClients(UserType* output) {
    auto* pointer = data_->clients.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::tracing::mojom::ClientInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::TracingService_Initialize_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class TracingService_AddClient_ParamsDataView {
 public:
  TracingService_AddClient_ParamsDataView() {}

  TracingService_AddClient_ParamsDataView(
      internal::TracingService_AddClient_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetClientDataView(
      ClientInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadClient(UserType* output) {
    auto* pointer = data_->client.Get();
    return mojo::internal::Deserialize<::tracing::mojom::ClientInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::TracingService_AddClient_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class TracingService_BindConsumerHost_ParamsDataView {
 public:
  TracingService_BindConsumerHost_ParamsDataView() {}

  TracingService_BindConsumerHost_ParamsDataView(
      internal::TracingService_BindConsumerHost_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::tracing::mojom::ConsumerHostInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::TracingService_BindConsumerHost_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void TracingService_Initialize_ParamsDataView::GetClientsDataView(
    mojo::ArrayDataView<ClientInfoDataView>* output) {
  auto pointer = data_->clients.Get();
  *output = mojo::ArrayDataView<ClientInfoDataView>(pointer, context_);
}


inline void TracingService_AddClient_ParamsDataView::GetClientDataView(
    ClientInfoDataView* output) {
  auto pointer = data_->client.Get();
  *output = ClientInfoDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace tracing

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // SERVICES_TRACING_PUBLIC_MOJOM_TRACING_SERVICE_MOJOM_PARAMS_DATA_H_