// services/data_decoder/public/mojom/data_decoder_service.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/data_decoder/public/mojom/data_decoder_service.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "services/data_decoder/public/mojom/image_decoder.mojom.h"
#include "services/data_decoder/public/mojom/json_parser.mojom.h"
#include "services/data_decoder/public/mojom/web_bundle_parser.mojom.h"
#include "services/data_decoder/public/mojom/xml_parser.mojom.h"


#ifndef SERVICES_DATA_DECODER_PUBLIC_MOJOM_DATA_DECODER_SERVICE_MOJOM_JUMBO_H_
#define SERVICES_DATA_DECODER_PUBLIC_MOJOM_DATA_DECODER_SERVICE_MOJOM_JUMBO_H_
#endif


namespace data_decoder {
namespace mojom {


void DataDecoderServiceInterceptorForTesting::BindImageDecoder(mojo::PendingReceiver<::data_decoder::mojom::ImageDecoder> receiver) {
  GetForwardingInterface()->BindImageDecoder(std::move(receiver));
}
void DataDecoderServiceInterceptorForTesting::BindJsonParser(mojo::PendingReceiver<::data_decoder::mojom::JsonParser> receiver) {
  GetForwardingInterface()->BindJsonParser(std::move(receiver));
}
void DataDecoderServiceInterceptorForTesting::BindXmlParser(mojo::PendingReceiver<::data_decoder::mojom::XmlParser> reciever) {
  GetForwardingInterface()->BindXmlParser(std::move(reciever));
}
void DataDecoderServiceInterceptorForTesting::BindWebBundleParserFactory(mojo::PendingReceiver<::data_decoder::mojom::WebBundleParserFactory> receiver) {
  GetForwardingInterface()->BindWebBundleParserFactory(std::move(receiver));
}
DataDecoderServiceAsyncWaiter::DataDecoderServiceAsyncWaiter(
    DataDecoderService* proxy) : proxy_(proxy) {}

DataDecoderServiceAsyncWaiter::~DataDecoderServiceAsyncWaiter() = default;






}  // namespace mojom
}  // namespace data_decoder

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif