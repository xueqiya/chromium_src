// services/data_decoder/public/mojom/json_parser.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/data_decoder/public/mojom/json_parser.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/values.mojom.h"


#ifndef SERVICES_DATA_DECODER_PUBLIC_MOJOM_JSON_PARSER_MOJOM_JUMBO_H_
#define SERVICES_DATA_DECODER_PUBLIC_MOJOM_JSON_PARSER_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/values_mojom_traits.h"
#endif


namespace data_decoder {
namespace mojom {


void JsonParserInterceptorForTesting::Parse(const std::string& json, ParseCallback callback) {
  GetForwardingInterface()->Parse(std::move(json), std::move(callback));
}
JsonParserAsyncWaiter::JsonParserAsyncWaiter(
    JsonParser* proxy) : proxy_(proxy) {}

JsonParserAsyncWaiter::~JsonParserAsyncWaiter() = default;

void JsonParserAsyncWaiter::Parse(
    const std::string& json, base::Optional<::base::Value>* out_result, base::Optional<std::string>* out_error) {
  base::RunLoop loop;
  proxy_->Parse(std::move(json),
      base::BindOnce(
          [](base::RunLoop* loop,
             base::Optional<::base::Value>* out_result
,
             base::Optional<std::string>* out_error
,
             base::Optional<::base::Value> result,
             const base::Optional<std::string>& error) {*out_result = std::move(result);*out_error = std::move(error);
            loop->Quit();
          },
          &loop,
          out_result,
          out_error));
  loop.Run();
}





}  // namespace mojom
}  // namespace data_decoder

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif