// services/data_decoder/public/mojom/web_bundle_parser.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DATA_DECODER_PUBLIC_MOJOM_WEB_BUNDLE_PARSER_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_DATA_DECODER_PUBLIC_MOJOM_WEB_BUNDLE_PARSER_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/file.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace data_decoder {
namespace mojom {
namespace internal {
class BundleMetadataParseError_Data;
class BundleResponseParseError_Data;
class BundleMetadata_Data;
class BundleIndexValue_Data;
class BundleResponseLocation_Data;
class AugmentedCertificate_Data;
class VouchedSubset_Data;
class SignedSubset_Data;
class SubsetHashesValue_Data;
class ResourceIntegrity_Data;
class BundleResponse_Data;

struct BundleParseErrorType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class  BundleMetadataParseError_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BundleMetadataParseError_Data));
      new (data()) BundleMetadataParseError_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BundleMetadataParseError_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BundleMetadataParseError_Data>(index_);
    }
    BundleMetadataParseError_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> fallback_url;
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  BundleMetadataParseError_Data();
  ~BundleMetadataParseError_Data() = delete;
};
static_assert(sizeof(BundleMetadataParseError_Data) == 32,
              "Bad sizeof(BundleMetadataParseError_Data)");
// Used by BundleMetadataParseError::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BundleMetadataParseError_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BundleMetadataParseError_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BundleMetadataParseError_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    BundleMetadataParseError_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BundleMetadataParseError_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BundleResponseParseError_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BundleResponseParseError_Data));
      new (data()) BundleResponseParseError_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BundleResponseParseError_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BundleResponseParseError_Data>(index_);
    }
    BundleResponseParseError_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  BundleResponseParseError_Data();
  ~BundleResponseParseError_Data() = delete;
};
static_assert(sizeof(BundleResponseParseError_Data) == 24,
              "Bad sizeof(BundleResponseParseError_Data)");
// Used by BundleResponseParseError::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BundleResponseParseError_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BundleResponseParseError_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BundleResponseParseError_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    BundleResponseParseError_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BundleResponseParseError_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BundleMetadata_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BundleMetadata_Data));
      new (data()) BundleMetadata_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BundleMetadata_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BundleMetadata_Data>(index_);
    }
    BundleMetadata_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> primary_url;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<::url::mojom::internal::Url_Data>, mojo::internal::Pointer<internal::BundleIndexValue_Data>>> requests;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> manifest_url;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::AugmentedCertificate_Data>>> authorities;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::VouchedSubset_Data>>> vouched_subsets;

 private:
  BundleMetadata_Data();
  ~BundleMetadata_Data() = delete;
};
static_assert(sizeof(BundleMetadata_Data) == 48,
              "Bad sizeof(BundleMetadata_Data)");
// Used by BundleMetadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BundleMetadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BundleMetadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BundleMetadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    BundleMetadata_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BundleMetadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BundleIndexValue_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BundleIndexValue_Data));
      new (data()) BundleIndexValue_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BundleIndexValue_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BundleIndexValue_Data>(index_);
    }
    BundleIndexValue_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> variants_value;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::BundleResponseLocation_Data>>> response_locations;

 private:
  BundleIndexValue_Data();
  ~BundleIndexValue_Data() = delete;
};
static_assert(sizeof(BundleIndexValue_Data) == 24,
              "Bad sizeof(BundleIndexValue_Data)");
// Used by BundleIndexValue::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BundleIndexValue_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BundleIndexValue_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BundleIndexValue_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    BundleIndexValue_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BundleIndexValue_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BundleResponseLocation_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BundleResponseLocation_Data));
      new (data()) BundleResponseLocation_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BundleResponseLocation_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BundleResponseLocation_Data>(index_);
    }
    BundleResponseLocation_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t offset;
  uint64_t length;

 private:
  BundleResponseLocation_Data();
  ~BundleResponseLocation_Data() = delete;
};
static_assert(sizeof(BundleResponseLocation_Data) == 24,
              "Bad sizeof(BundleResponseLocation_Data)");
// Used by BundleResponseLocation::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BundleResponseLocation_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BundleResponseLocation_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BundleResponseLocation_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    BundleResponseLocation_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BundleResponseLocation_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  AugmentedCertificate_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AugmentedCertificate_Data));
      new (data()) AugmentedCertificate_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AugmentedCertificate_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AugmentedCertificate_Data>(index_);
    }
    AugmentedCertificate_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> cert;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> ocsp;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> sct;

 private:
  AugmentedCertificate_Data();
  ~AugmentedCertificate_Data() = delete;
};
static_assert(sizeof(AugmentedCertificate_Data) == 32,
              "Bad sizeof(AugmentedCertificate_Data)");
// Used by AugmentedCertificate::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AugmentedCertificate_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AugmentedCertificate_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AugmentedCertificate_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    AugmentedCertificate_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AugmentedCertificate_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  VouchedSubset_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(VouchedSubset_Data));
      new (data()) VouchedSubset_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    VouchedSubset_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<VouchedSubset_Data>(index_);
    }
    VouchedSubset_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t authority;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> sig;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> raw_signed;
  mojo::internal::Pointer<internal::SignedSubset_Data> parsed_signed;

 private:
  VouchedSubset_Data();
  ~VouchedSubset_Data() = delete;
};
static_assert(sizeof(VouchedSubset_Data) == 40,
              "Bad sizeof(VouchedSubset_Data)");
// Used by VouchedSubset::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct VouchedSubset_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  VouchedSubset_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~VouchedSubset_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    VouchedSubset_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    VouchedSubset_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SignedSubset_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SignedSubset_Data));
      new (data()) SignedSubset_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SignedSubset_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SignedSubset_Data>(index_);
    }
    SignedSubset_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> validity_url;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> auth_sha256;
  uint64_t date;
  uint64_t expires;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<::url::mojom::internal::Url_Data>, mojo::internal::Pointer<internal::SubsetHashesValue_Data>>> subset_hashes;

 private:
  SignedSubset_Data();
  ~SignedSubset_Data() = delete;
};
static_assert(sizeof(SignedSubset_Data) == 48,
              "Bad sizeof(SignedSubset_Data)");
// Used by SignedSubset::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SignedSubset_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SignedSubset_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SignedSubset_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    SignedSubset_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SignedSubset_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SubsetHashesValue_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SubsetHashesValue_Data));
      new (data()) SubsetHashesValue_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SubsetHashesValue_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SubsetHashesValue_Data>(index_);
    }
    SubsetHashesValue_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> variants_value;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ResourceIntegrity_Data>>> resource_integrities;

 private:
  SubsetHashesValue_Data();
  ~SubsetHashesValue_Data() = delete;
};
static_assert(sizeof(SubsetHashesValue_Data) == 24,
              "Bad sizeof(SubsetHashesValue_Data)");
// Used by SubsetHashesValue::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SubsetHashesValue_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SubsetHashesValue_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SubsetHashesValue_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    SubsetHashesValue_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SubsetHashesValue_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ResourceIntegrity_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ResourceIntegrity_Data));
      new (data()) ResourceIntegrity_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ResourceIntegrity_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ResourceIntegrity_Data>(index_);
    }
    ResourceIntegrity_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> header_sha256;
  mojo::internal::Pointer<mojo::internal::String_Data> payload_integrity_header;

 private:
  ResourceIntegrity_Data();
  ~ResourceIntegrity_Data() = delete;
};
static_assert(sizeof(ResourceIntegrity_Data) == 24,
              "Bad sizeof(ResourceIntegrity_Data)");
// Used by ResourceIntegrity::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ResourceIntegrity_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ResourceIntegrity_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ResourceIntegrity_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ResourceIntegrity_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ResourceIntegrity_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BundleResponse_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BundleResponse_Data));
      new (data()) BundleResponse_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BundleResponse_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BundleResponse_Data>(index_);
    }
    BundleResponse_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t response_code;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<mojo::internal::String_Data>>> response_headers;
  uint64_t payload_offset;
  uint64_t payload_length;

 private:
  BundleResponse_Data();
  ~BundleResponse_Data() = delete;
};
static_assert(sizeof(BundleResponse_Data) == 40,
              "Bad sizeof(BundleResponse_Data)");
// Used by BundleResponse::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BundleResponse_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BundleResponse_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BundleResponse_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    BundleResponse_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BundleResponse_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace data_decoder

#endif  // SERVICES_DATA_DECODER_PUBLIC_MOJOM_WEB_BUNDLE_PARSER_MOJOM_SHARED_INTERNAL_H_