// services/data_decoder/public/mojom/web_bundle_parser.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "services/data_decoder/public/mojom/web_bundle_parser.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "services/data_decoder/public/mojom/web_bundle_parser.mojom-params-data.h"
#include "services/data_decoder/public/mojom/web_bundle_parser.mojom-shared-message-ids.h"

#include "services/data_decoder/public/mojom/web_bundle_parser.mojom-import-headers.h"


#ifndef SERVICES_DATA_DECODER_PUBLIC_MOJOM_WEB_BUNDLE_PARSER_MOJOM_JUMBO_H_
#define SERVICES_DATA_DECODER_PUBLIC_MOJOM_WEB_BUNDLE_PARSER_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif
namespace data_decoder {
namespace mojom {
BundleMetadataParseError::BundleMetadataParseError()
    : type(),
      fallback_url(),
      message() {}

BundleMetadataParseError::BundleMetadataParseError(
    BundleParseErrorType type_in,
    const ::GURL& fallback_url_in,
    const std::string& message_in)
    : type(std::move(type_in)),
      fallback_url(std::move(fallback_url_in)),
      message(std::move(message_in)) {}

BundleMetadataParseError::~BundleMetadataParseError() = default;

bool BundleMetadataParseError::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleResponseParseError::BundleResponseParseError()
    : type(),
      message() {}

BundleResponseParseError::BundleResponseParseError(
    BundleParseErrorType type_in,
    const std::string& message_in)
    : type(std::move(type_in)),
      message(std::move(message_in)) {}

BundleResponseParseError::~BundleResponseParseError() = default;
size_t BundleResponseParseError::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->type);
  seed = mojo::internal::Hash(seed, this->message);
  return seed;
}

bool BundleResponseParseError::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleMetadata::BundleMetadata()
    : primary_url(),
      requests(),
      manifest_url(),
      authorities(),
      vouched_subsets() {}

BundleMetadata::BundleMetadata(
    const ::GURL& primary_url_in,
    base::flat_map<::GURL, BundleIndexValuePtr> requests_in,
    const ::GURL& manifest_url_in,
    std::vector<AugmentedCertificatePtr> authorities_in,
    std::vector<VouchedSubsetPtr> vouched_subsets_in)
    : primary_url(std::move(primary_url_in)),
      requests(std::move(requests_in)),
      manifest_url(std::move(manifest_url_in)),
      authorities(std::move(authorities_in)),
      vouched_subsets(std::move(vouched_subsets_in)) {}

BundleMetadata::~BundleMetadata() = default;

bool BundleMetadata::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleIndexValue::BundleIndexValue()
    : variants_value(),
      response_locations() {}

BundleIndexValue::BundleIndexValue(
    const std::string& variants_value_in,
    std::vector<BundleResponseLocationPtr> response_locations_in)
    : variants_value(std::move(variants_value_in)),
      response_locations(std::move(response_locations_in)) {}

BundleIndexValue::~BundleIndexValue() = default;

bool BundleIndexValue::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleResponseLocation::BundleResponseLocation()
    : offset(),
      length() {}

BundleResponseLocation::BundleResponseLocation(
    uint64_t offset_in,
    uint64_t length_in)
    : offset(std::move(offset_in)),
      length(std::move(length_in)) {}

BundleResponseLocation::~BundleResponseLocation() = default;
size_t BundleResponseLocation::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->offset);
  seed = mojo::internal::Hash(seed, this->length);
  return seed;
}

bool BundleResponseLocation::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AugmentedCertificate::AugmentedCertificate()
    : cert(),
      ocsp(),
      sct() {}

AugmentedCertificate::AugmentedCertificate(
    std::vector<uint8_t> cert_in,
    base::Optional<std::vector<uint8_t>> ocsp_in,
    base::Optional<std::vector<uint8_t>> sct_in)
    : cert(std::move(cert_in)),
      ocsp(std::move(ocsp_in)),
      sct(std::move(sct_in)) {}

AugmentedCertificate::~AugmentedCertificate() = default;

bool AugmentedCertificate::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
VouchedSubset::VouchedSubset()
    : authority(),
      sig(),
      raw_signed(),
      parsed_signed() {}

VouchedSubset::VouchedSubset(
    uint64_t authority_in,
    std::vector<uint8_t> sig_in,
    std::vector<uint8_t> raw_signed_in,
    SignedSubsetPtr parsed_signed_in)
    : authority(std::move(authority_in)),
      sig(std::move(sig_in)),
      raw_signed(std::move(raw_signed_in)),
      parsed_signed(std::move(parsed_signed_in)) {}

VouchedSubset::~VouchedSubset() = default;

bool VouchedSubset::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SignedSubset::SignedSubset()
    : validity_url(),
      auth_sha256(),
      date(),
      expires(),
      subset_hashes() {}

SignedSubset::SignedSubset(
    const ::GURL& validity_url_in,
    std::vector<uint8_t> auth_sha256_in,
    uint64_t date_in,
    uint64_t expires_in,
    base::flat_map<::GURL, SubsetHashesValuePtr> subset_hashes_in)
    : validity_url(std::move(validity_url_in)),
      auth_sha256(std::move(auth_sha256_in)),
      date(std::move(date_in)),
      expires(std::move(expires_in)),
      subset_hashes(std::move(subset_hashes_in)) {}

SignedSubset::~SignedSubset() = default;

bool SignedSubset::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SubsetHashesValue::SubsetHashesValue()
    : variants_value(),
      resource_integrities() {}

SubsetHashesValue::SubsetHashesValue(
    const std::string& variants_value_in,
    std::vector<ResourceIntegrityPtr> resource_integrities_in)
    : variants_value(std::move(variants_value_in)),
      resource_integrities(std::move(resource_integrities_in)) {}

SubsetHashesValue::~SubsetHashesValue() = default;

bool SubsetHashesValue::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ResourceIntegrity::ResourceIntegrity()
    : header_sha256(),
      payload_integrity_header() {}

ResourceIntegrity::ResourceIntegrity(
    std::vector<uint8_t> header_sha256_in,
    const std::string& payload_integrity_header_in)
    : header_sha256(std::move(header_sha256_in)),
      payload_integrity_header(std::move(payload_integrity_header_in)) {}

ResourceIntegrity::~ResourceIntegrity() = default;

bool ResourceIntegrity::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BundleResponse::BundleResponse()
    : response_code(),
      response_headers(),
      payload_offset(),
      payload_length() {}

BundleResponse::BundleResponse(
    int32_t response_code_in,
    const base::flat_map<std::string, std::string>& response_headers_in,
    uint64_t payload_offset_in,
    uint64_t payload_length_in)
    : response_code(std::move(response_code_in)),
      response_headers(std::move(response_headers_in)),
      payload_offset(std::move(payload_offset_in)),
      payload_length(std::move(payload_length_in)) {}

BundleResponse::~BundleResponse() = default;

bool BundleResponse::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char WebBundleParserFactory::Name_[] = "data_decoder.mojom.WebBundleParserFactory";

WebBundleParserFactoryProxy::WebBundleParserFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WebBundleParserFactoryProxy::GetParserForFile(
    mojo::PendingReceiver<WebBundleParser> in_receiver, ::base::File in_file) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "data_decoder::mojom::WebBundleParserFactory::GetParserForFile");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWebBundleParserFactory_GetParserForFile_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_decoder::mojom::internal::WebBundleParserFactory_GetParserForFile_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::data_decoder::mojom::WebBundleParserInterfaceBase>>(
      in_receiver, &params->receiver, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in WebBundleParserFactory.GetParserForFile request");
  typename decltype(params->file)::BaseType::BufferWriter
      file_writer;
  mojo::internal::Serialize<::mojo_base::mojom::FileDataView>(
      in_file, buffer, &file_writer, &serialization_context);
  params->file.Set(
      file_writer.is_null() ? nullptr : file_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->file.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null file in WebBundleParserFactory.GetParserForFile request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParserFactory::Name_);
  message.set_method_name("GetParserForFile");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void WebBundleParserFactoryProxy::GetParserForDataSource(
    mojo::PendingReceiver<WebBundleParser> in_receiver, mojo::PendingRemote<BundleDataSource> in_data_source) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "data_decoder::mojom::WebBundleParserFactory::GetParserForDataSource");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWebBundleParserFactory_GetParserForDataSource_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_decoder::mojom::internal::WebBundleParserFactory_GetParserForDataSource_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::data_decoder::mojom::WebBundleParserInterfaceBase>>(
      in_receiver, &params->receiver, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in WebBundleParserFactory.GetParserForDataSource request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::data_decoder::mojom::BundleDataSourceInterfaceBase>>(
      in_data_source, &params->data_source, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->data_source),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid data_source in WebBundleParserFactory.GetParserForDataSource request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParserFactory::Name_);
  message.set_method_name("GetParserForDataSource");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool WebBundleParserFactoryStubDispatch::Accept(
    WebBundleParserFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWebBundleParserFactory_GetParserForFile_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)data_decoder::mojom::WebBundleParserFactory::GetParserForFile",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)data_decoder::mojom::WebBundleParserFactory::GetParserForFile");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::WebBundleParserFactory_GetParserForFile_Params_Data* params =
          reinterpret_cast<internal::WebBundleParserFactory_GetParserForFile_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      mojo::PendingReceiver<WebBundleParser> p_receiver{};
      ::base::File p_file{};
      WebBundleParserFactory_GetParserForFile_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success && !input_data_view.ReadFile(&p_file))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebBundleParserFactory::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetParserForFile(
std::move(p_receiver), 
std::move(p_file));
      return true;
    }
    case internal::kWebBundleParserFactory_GetParserForDataSource_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)data_decoder::mojom::WebBundleParserFactory::GetParserForDataSource",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)data_decoder::mojom::WebBundleParserFactory::GetParserForDataSource");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::WebBundleParserFactory_GetParserForDataSource_Params_Data* params =
          reinterpret_cast<internal::WebBundleParserFactory_GetParserForDataSource_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      mojo::PendingReceiver<WebBundleParser> p_receiver{};
      mojo::PendingRemote<BundleDataSource> p_data_source{};
      WebBundleParserFactory_GetParserForDataSource_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success) {
        p_data_source =
            input_data_view.TakeDataSource<decltype(p_data_source)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebBundleParserFactory::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetParserForDataSource(
std::move(p_receiver), 
std::move(p_data_source));
      return true;
    }
  }
  return false;
}

// static
bool WebBundleParserFactoryStubDispatch::AcceptWithResponder(
    WebBundleParserFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kWebBundleParserFactory_GetParserForFile_Name: {
      break;
    }
    case internal::kWebBundleParserFactory_GetParserForDataSource_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kWebBundleParserFactoryValidationInfo[] = {
    {&internal::WebBundleParserFactory_GetParserForFile_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::WebBundleParserFactory_GetParserForDataSource_Params_Data::Validate,
     nullptr /* no response */},
};

bool WebBundleParserFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::data_decoder::mojom::WebBundleParserFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kWebBundleParserFactoryValidationInfo);
}

const char WebBundleParser::Name_[] = "data_decoder.mojom.WebBundleParser";

class WebBundleParser_ParseMetadata_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WebBundleParser_ParseMetadata_ForwardToCallback(
      WebBundleParser::ParseMetadataCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  WebBundleParser::ParseMetadataCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(WebBundleParser_ParseMetadata_ForwardToCallback);
};

class WebBundleParser_ParseResponse_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WebBundleParser_ParseResponse_ForwardToCallback(
      WebBundleParser::ParseResponseCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  WebBundleParser::ParseResponseCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(WebBundleParser_ParseResponse_ForwardToCallback);
};

WebBundleParserProxy::WebBundleParserProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WebBundleParserProxy::ParseMetadata(
    ParseMetadataCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "data_decoder::mojom::WebBundleParser::ParseMetadata");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWebBundleParser_ParseMetadata_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_decoder::mojom::internal::WebBundleParser_ParseMetadata_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParser::Name_);
  message.set_method_name("ParseMetadata");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebBundleParser_ParseMetadata_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void WebBundleParserProxy::ParseResponse(
    uint64_t in_response_offset, uint64_t in_response_length, ParseResponseCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "data_decoder::mojom::WebBundleParser::ParseResponse");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWebBundleParser_ParseResponse_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_decoder::mojom::internal::WebBundleParser_ParseResponse_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->response_offset = in_response_offset;
  params->response_length = in_response_length;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParser::Name_);
  message.set_method_name("ParseResponse");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebBundleParser_ParseResponse_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class WebBundleParser_ParseMetadata_ProxyToResponder {
 public:
  static WebBundleParser::ParseMetadataCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WebBundleParser_ParseMetadata_ProxyToResponder> proxy(
        new WebBundleParser_ParseMetadata_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&WebBundleParser_ParseMetadata_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WebBundleParser_ParseMetadata_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  WebBundleParser_ParseMetadata_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WebBundleParser::ParseMetadataCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      BundleMetadataPtr in_Result, BundleMetadataParseErrorPtr in_error);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(WebBundleParser_ParseMetadata_ProxyToResponder);
};

bool WebBundleParser_ParseMetadata_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "data_decoder::mojom::WebBundleParser::ParseMetadataCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::WebBundleParser_ParseMetadata_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WebBundleParser_ParseMetadata_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  BundleMetadataPtr p_Result{};
  BundleMetadataParseErrorPtr p_error{};
  WebBundleParser_ParseMetadata_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadResult(&p_Result))
    success = false;
  if (success && !input_data_view.ReadError(&p_error))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebBundleParser::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_Result), 
std::move(p_error));
  return true;
}

void WebBundleParser_ParseMetadata_ProxyToResponder::Run(
    BundleMetadataPtr in_Result, BundleMetadataParseErrorPtr in_error) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWebBundleParser_ParseMetadata_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_decoder::mojom::internal::WebBundleParser_ParseMetadata_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->Result)::BaseType::BufferWriter
      Result_writer;
  mojo::internal::Serialize<::data_decoder::mojom::BundleMetadataDataView>(
      in_Result, buffer, &Result_writer, &serialization_context);
  params->Result.Set(
      Result_writer.is_null() ? nullptr : Result_writer.data());
  typename decltype(params->error)::BaseType::BufferWriter
      error_writer;
  mojo::internal::Serialize<::data_decoder::mojom::BundleMetadataParseErrorDataView>(
      in_error, buffer, &error_writer, &serialization_context);
  params->error.Set(
      error_writer.is_null() ? nullptr : error_writer.data());
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)data_decoder::mojom::WebBundleParser::ParseMetadataCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParser::Name_);
  message.set_method_name("ParseMetadata");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class WebBundleParser_ParseResponse_ProxyToResponder {
 public:
  static WebBundleParser::ParseResponseCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WebBundleParser_ParseResponse_ProxyToResponder> proxy(
        new WebBundleParser_ParseResponse_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&WebBundleParser_ParseResponse_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WebBundleParser_ParseResponse_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  WebBundleParser_ParseResponse_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WebBundleParser::ParseResponseCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      BundleResponsePtr in_Result, BundleResponseParseErrorPtr in_error);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(WebBundleParser_ParseResponse_ProxyToResponder);
};

bool WebBundleParser_ParseResponse_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "data_decoder::mojom::WebBundleParser::ParseResponseCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::WebBundleParser_ParseResponse_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WebBundleParser_ParseResponse_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  BundleResponsePtr p_Result{};
  BundleResponseParseErrorPtr p_error{};
  WebBundleParser_ParseResponse_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadResult(&p_Result))
    success = false;
  if (success && !input_data_view.ReadError(&p_error))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebBundleParser::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_Result), 
std::move(p_error));
  return true;
}

void WebBundleParser_ParseResponse_ProxyToResponder::Run(
    BundleResponsePtr in_Result, BundleResponseParseErrorPtr in_error) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kWebBundleParser_ParseResponse_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_decoder::mojom::internal::WebBundleParser_ParseResponse_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->Result)::BaseType::BufferWriter
      Result_writer;
  mojo::internal::Serialize<::data_decoder::mojom::BundleResponseDataView>(
      in_Result, buffer, &Result_writer, &serialization_context);
  params->Result.Set(
      Result_writer.is_null() ? nullptr : Result_writer.data());
  typename decltype(params->error)::BaseType::BufferWriter
      error_writer;
  mojo::internal::Serialize<::data_decoder::mojom::BundleResponseParseErrorDataView>(
      in_error, buffer, &error_writer, &serialization_context);
  params->error.Set(
      error_writer.is_null() ? nullptr : error_writer.data());
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)data_decoder::mojom::WebBundleParser::ParseResponseCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebBundleParser::Name_);
  message.set_method_name("ParseResponse");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool WebBundleParserStubDispatch::Accept(
    WebBundleParser* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWebBundleParser_ParseMetadata_Name: {
      break;
    }
    case internal::kWebBundleParser_ParseResponse_Name: {
      break;
    }
  }
  return false;
}

// static
bool WebBundleParserStubDispatch::AcceptWithResponder(
    WebBundleParser* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kWebBundleParser_ParseMetadata_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)data_decoder::mojom::WebBundleParser::ParseMetadata",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)data_decoder::mojom::WebBundleParser::ParseMetadata");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::WebBundleParser_ParseMetadata_Params_Data* params =
          reinterpret_cast<
              internal::WebBundleParser_ParseMetadata_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      WebBundleParser_ParseMetadata_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebBundleParser::Name_, 0, false);
        return false;
      }
      WebBundleParser::ParseMetadataCallback callback =
          WebBundleParser_ParseMetadata_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ParseMetadata(std::move(callback));
      return true;
    }
    case internal::kWebBundleParser_ParseResponse_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)data_decoder::mojom::WebBundleParser::ParseResponse",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)data_decoder::mojom::WebBundleParser::ParseResponse");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::WebBundleParser_ParseResponse_Params_Data* params =
          reinterpret_cast<
              internal::WebBundleParser_ParseResponse_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      uint64_t p_response_offset{};
      uint64_t p_response_length{};
      WebBundleParser_ParseResponse_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_response_offset = input_data_view.response_offset();
      if (success)
        p_response_length = input_data_view.response_length();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebBundleParser::Name_, 1, false);
        return false;
      }
      WebBundleParser::ParseResponseCallback callback =
          WebBundleParser_ParseResponse_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ParseResponse(
std::move(p_response_offset), 
std::move(p_response_length), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kWebBundleParserValidationInfo[] = {
    {&internal::WebBundleParser_ParseMetadata_Params_Data::Validate,
     &internal::WebBundleParser_ParseMetadata_ResponseParams_Data::Validate},
    {&internal::WebBundleParser_ParseResponse_Params_Data::Validate,
     &internal::WebBundleParser_ParseResponse_ResponseParams_Data::Validate},
};

bool WebBundleParserRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::data_decoder::mojom::WebBundleParser::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kWebBundleParserValidationInfo);
}

bool WebBundleParserResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::data_decoder::mojom::WebBundleParser::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kWebBundleParserValidationInfo);
}
const char BundleDataSource::Name_[] = "data_decoder.mojom.BundleDataSource";

class BundleDataSource_Read_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BundleDataSource_Read_ForwardToCallback(
      BundleDataSource::ReadCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  BundleDataSource::ReadCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(BundleDataSource_Read_ForwardToCallback);
};

BundleDataSourceProxy::BundleDataSourceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void BundleDataSourceProxy::Read(
    uint64_t in_offset, uint64_t in_length, ReadCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "data_decoder::mojom::BundleDataSource::Read");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kBundleDataSource_Read_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_decoder::mojom::internal::BundleDataSource_Read_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->offset = in_offset;
  params->length = in_length;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BundleDataSource::Name_);
  message.set_method_name("Read");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BundleDataSource_Read_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class BundleDataSource_Read_ProxyToResponder {
 public:
  static BundleDataSource::ReadCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<BundleDataSource_Read_ProxyToResponder> proxy(
        new BundleDataSource_Read_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&BundleDataSource_Read_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BundleDataSource_Read_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  BundleDataSource_Read_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BundleDataSource::ReadCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const base::Optional<std::vector<uint8_t>>& in_buffer);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(BundleDataSource_Read_ProxyToResponder);
};

bool BundleDataSource_Read_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "data_decoder::mojom::BundleDataSource::ReadCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::BundleDataSource_Read_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BundleDataSource_Read_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  base::Optional<std::vector<uint8_t>> p_buffer{};
  BundleDataSource_Read_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadBuffer(&p_buffer))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BundleDataSource::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_buffer));
  return true;
}

void BundleDataSource_Read_ProxyToResponder::Run(
    const base::Optional<std::vector<uint8_t>>& in_buffer) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kBundleDataSource_Read_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::data_decoder::mojom::internal::BundleDataSource_Read_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->buffer)::BaseType::BufferWriter
      buffer_writer;
  const mojo::internal::ContainerValidateParams buffer_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      in_buffer, buffer, &buffer_writer, &buffer_validate_params,
      &serialization_context);
  params->buffer.Set(
      buffer_writer.is_null() ? nullptr : buffer_writer.data());
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)data_decoder::mojom::BundleDataSource::ReadCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BundleDataSource::Name_);
  message.set_method_name("Read");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool BundleDataSourceStubDispatch::Accept(
    BundleDataSource* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kBundleDataSource_Read_Name: {
      break;
    }
  }
  return false;
}

// static
bool BundleDataSourceStubDispatch::AcceptWithResponder(
    BundleDataSource* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kBundleDataSource_Read_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)data_decoder::mojom::BundleDataSource::Read",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)data_decoder::mojom::BundleDataSource::Read");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::BundleDataSource_Read_Params_Data* params =
          reinterpret_cast<
              internal::BundleDataSource_Read_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      uint64_t p_offset{};
      uint64_t p_length{};
      BundleDataSource_Read_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_offset = input_data_view.offset();
      if (success)
        p_length = input_data_view.length();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BundleDataSource::Name_, 0, false);
        return false;
      }
      BundleDataSource::ReadCallback callback =
          BundleDataSource_Read_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Read(
std::move(p_offset), 
std::move(p_length), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kBundleDataSourceValidationInfo[] = {
    {&internal::BundleDataSource_Read_Params_Data::Validate,
     &internal::BundleDataSource_Read_ResponseParams_Data::Validate},
};

bool BundleDataSourceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::data_decoder::mojom::BundleDataSource::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kBundleDataSourceValidationInfo);
}

bool BundleDataSourceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::data_decoder::mojom::BundleDataSource::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kBundleDataSourceValidationInfo);
}
}  // namespace mojom
}  // namespace data_decoder

namespace mojo {


// static
bool StructTraits<::data_decoder::mojom::BundleMetadataParseError::DataView, ::data_decoder::mojom::BundleMetadataParseErrorPtr>::Read(
    ::data_decoder::mojom::BundleMetadataParseError::DataView input,
    ::data_decoder::mojom::BundleMetadataParseErrorPtr* output) {
  bool success = true;
  ::data_decoder::mojom::BundleMetadataParseErrorPtr result(::data_decoder::mojom::BundleMetadataParseError::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadFallbackUrl(&result->fallback_url))
        success = false;
      if (success && !input.ReadMessage(&result->message))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_decoder::mojom::BundleResponseParseError::DataView, ::data_decoder::mojom::BundleResponseParseErrorPtr>::Read(
    ::data_decoder::mojom::BundleResponseParseError::DataView input,
    ::data_decoder::mojom::BundleResponseParseErrorPtr* output) {
  bool success = true;
  ::data_decoder::mojom::BundleResponseParseErrorPtr result(::data_decoder::mojom::BundleResponseParseError::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadMessage(&result->message))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_decoder::mojom::BundleMetadata::DataView, ::data_decoder::mojom::BundleMetadataPtr>::Read(
    ::data_decoder::mojom::BundleMetadata::DataView input,
    ::data_decoder::mojom::BundleMetadataPtr* output) {
  bool success = true;
  ::data_decoder::mojom::BundleMetadataPtr result(::data_decoder::mojom::BundleMetadata::New());
  
      if (success && !input.ReadPrimaryUrl(&result->primary_url))
        success = false;
      if (success && !input.ReadRequests(&result->requests))
        success = false;
      if (success && !input.ReadManifestUrl(&result->manifest_url))
        success = false;
      if (success && !input.ReadAuthorities(&result->authorities))
        success = false;
      if (success && !input.ReadVouchedSubsets(&result->vouched_subsets))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_decoder::mojom::BundleIndexValue::DataView, ::data_decoder::mojom::BundleIndexValuePtr>::Read(
    ::data_decoder::mojom::BundleIndexValue::DataView input,
    ::data_decoder::mojom::BundleIndexValuePtr* output) {
  bool success = true;
  ::data_decoder::mojom::BundleIndexValuePtr result(::data_decoder::mojom::BundleIndexValue::New());
  
      if (success && !input.ReadVariantsValue(&result->variants_value))
        success = false;
      if (success && !input.ReadResponseLocations(&result->response_locations))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_decoder::mojom::BundleResponseLocation::DataView, ::data_decoder::mojom::BundleResponseLocationPtr>::Read(
    ::data_decoder::mojom::BundleResponseLocation::DataView input,
    ::data_decoder::mojom::BundleResponseLocationPtr* output) {
  bool success = true;
  ::data_decoder::mojom::BundleResponseLocationPtr result(::data_decoder::mojom::BundleResponseLocation::New());
  
      if (success)
        result->offset = input.offset();
      if (success)
        result->length = input.length();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_decoder::mojom::AugmentedCertificate::DataView, ::data_decoder::mojom::AugmentedCertificatePtr>::Read(
    ::data_decoder::mojom::AugmentedCertificate::DataView input,
    ::data_decoder::mojom::AugmentedCertificatePtr* output) {
  bool success = true;
  ::data_decoder::mojom::AugmentedCertificatePtr result(::data_decoder::mojom::AugmentedCertificate::New());
  
      if (success && !input.ReadCert(&result->cert))
        success = false;
      if (success && !input.ReadOcsp(&result->ocsp))
        success = false;
      if (success && !input.ReadSct(&result->sct))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_decoder::mojom::VouchedSubset::DataView, ::data_decoder::mojom::VouchedSubsetPtr>::Read(
    ::data_decoder::mojom::VouchedSubset::DataView input,
    ::data_decoder::mojom::VouchedSubsetPtr* output) {
  bool success = true;
  ::data_decoder::mojom::VouchedSubsetPtr result(::data_decoder::mojom::VouchedSubset::New());
  
      if (success)
        result->authority = input.authority();
      if (success && !input.ReadSig(&result->sig))
        success = false;
      if (success && !input.ReadRawSigned(&result->raw_signed))
        success = false;
      if (success && !input.ReadParsedSigned(&result->parsed_signed))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_decoder::mojom::SignedSubset::DataView, ::data_decoder::mojom::SignedSubsetPtr>::Read(
    ::data_decoder::mojom::SignedSubset::DataView input,
    ::data_decoder::mojom::SignedSubsetPtr* output) {
  bool success = true;
  ::data_decoder::mojom::SignedSubsetPtr result(::data_decoder::mojom::SignedSubset::New());
  
      if (success && !input.ReadValidityUrl(&result->validity_url))
        success = false;
      if (success && !input.ReadAuthSha256(&result->auth_sha256))
        success = false;
      if (success)
        result->date = input.date();
      if (success)
        result->expires = input.expires();
      if (success && !input.ReadSubsetHashes(&result->subset_hashes))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_decoder::mojom::SubsetHashesValue::DataView, ::data_decoder::mojom::SubsetHashesValuePtr>::Read(
    ::data_decoder::mojom::SubsetHashesValue::DataView input,
    ::data_decoder::mojom::SubsetHashesValuePtr* output) {
  bool success = true;
  ::data_decoder::mojom::SubsetHashesValuePtr result(::data_decoder::mojom::SubsetHashesValue::New());
  
      if (success && !input.ReadVariantsValue(&result->variants_value))
        success = false;
      if (success && !input.ReadResourceIntegrities(&result->resource_integrities))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_decoder::mojom::ResourceIntegrity::DataView, ::data_decoder::mojom::ResourceIntegrityPtr>::Read(
    ::data_decoder::mojom::ResourceIntegrity::DataView input,
    ::data_decoder::mojom::ResourceIntegrityPtr* output) {
  bool success = true;
  ::data_decoder::mojom::ResourceIntegrityPtr result(::data_decoder::mojom::ResourceIntegrity::New());
  
      if (success && !input.ReadHeaderSha256(&result->header_sha256))
        success = false;
      if (success && !input.ReadPayloadIntegrityHeader(&result->payload_integrity_header))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::data_decoder::mojom::BundleResponse::DataView, ::data_decoder::mojom::BundleResponsePtr>::Read(
    ::data_decoder::mojom::BundleResponse::DataView input,
    ::data_decoder::mojom::BundleResponsePtr* output) {
  bool success = true;
  ::data_decoder::mojom::BundleResponsePtr result(::data_decoder::mojom::BundleResponse::New());
  
      if (success)
        result->response_code = input.response_code();
      if (success && !input.ReadResponseHeaders(&result->response_headers))
        success = false;
      if (success)
        result->payload_offset = input.payload_offset();
      if (success)
        result->payload_length = input.payload_length();
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif