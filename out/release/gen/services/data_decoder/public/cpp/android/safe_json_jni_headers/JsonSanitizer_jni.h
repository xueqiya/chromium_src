// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/services/data_decoder/JsonSanitizer

#ifndef org_chromium_services_data_decoder_JsonSanitizer_JNI
#define org_chromium_services_data_decoder_JsonSanitizer_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_services_data_1decoder_JsonSanitizer[];
const char kClassPath_org_chromium_services_data_1decoder_JsonSanitizer[] =
    "org/chromium/services/data_decoder/JsonSanitizer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_services_data_1decoder_JsonSanitizer_clazz(nullptr);
#ifndef org_chromium_services_data_1decoder_JsonSanitizer_clazz_defined
#define org_chromium_services_data_1decoder_JsonSanitizer_clazz_defined
inline jclass org_chromium_services_data_1decoder_JsonSanitizer_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_services_data_1decoder_JsonSanitizer,
      &g_org_chromium_services_data_1decoder_JsonSanitizer_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace data_decoder {

static void JNI_JsonSanitizer_OnSuccess(JNIEnv* env, jlong id,
    const base::android::JavaParamRef<jstring>& json);

JNI_GENERATOR_EXPORT void Java_J_N_MkUGEqr_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong id,
    jstring json) {
  return JNI_JsonSanitizer_OnSuccess(env, id, base::android::JavaParamRef<jstring>(env, json));
}

static void JNI_JsonSanitizer_OnError(JNIEnv* env, jlong id,
    const base::android::JavaParamRef<jstring>& error);

JNI_GENERATOR_EXPORT void Java_J_N_MOkhqs8N(
    JNIEnv* env,
    jclass jcaller,
    jlong id,
    jstring error) {
  return JNI_JsonSanitizer_OnError(env, id, base::android::JavaParamRef<jstring>(env, error));
}


static std::atomic<jmethodID> g_org_chromium_services_data_1decoder_JsonSanitizer_sanitize(nullptr);
static void Java_JsonSanitizer_sanitize(JNIEnv* env, jlong nativePtr,
    const base::android::JavaRef<jstring>& unsafeJson) {
  jclass clazz = org_chromium_services_data_1decoder_JsonSanitizer_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_services_data_1decoder_JsonSanitizer_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "sanitize",
          "(JLjava/lang/String;)V",
          &g_org_chromium_services_data_1decoder_JsonSanitizer_sanitize);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, nativePtr, unsafeJson.obj());
}

}  // namespace data_decoder

// Step 4: Generated test functions (optional).


#endif  // org_chromium_services_data_decoder_JsonSanitizer_JNI
