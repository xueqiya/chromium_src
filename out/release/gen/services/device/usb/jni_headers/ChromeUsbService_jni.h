// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/usb/ChromeUsbService

#ifndef org_chromium_device_usb_ChromeUsbService_JNI
#define org_chromium_device_usb_ChromeUsbService_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_device_usb_ChromeUsbService[];
const char kClassPath_org_chromium_device_usb_ChromeUsbService[] =
    "org/chromium/device/usb/ChromeUsbService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_device_usb_ChromeUsbService_clazz(nullptr);
#ifndef org_chromium_device_usb_ChromeUsbService_clazz_defined
#define org_chromium_device_usb_ChromeUsbService_clazz_defined
inline jclass org_chromium_device_usb_ChromeUsbService_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_device_usb_ChromeUsbService,
      &g_org_chromium_device_usb_ChromeUsbService_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace device {

JNI_GENERATOR_EXPORT void Java_J_N_MNmyS_00024Xi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeUsbServiceAndroid,
    jobject caller,
    jobject device) {
  UsbServiceAndroid* native = reinterpret_cast<UsbServiceAndroid*>(nativeUsbServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeviceAttached");
  return native->DeviceAttached(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, device));
}

JNI_GENERATOR_EXPORT void Java_J_N_MrBuy2sN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeUsbServiceAndroid,
    jobject caller,
    jint deviceId) {
  UsbServiceAndroid* native = reinterpret_cast<UsbServiceAndroid*>(nativeUsbServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeviceDetached");
  return native->DeviceDetached(env, base::android::JavaParamRef<jobject>(env, caller), deviceId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MDvFAfgT(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeUsbServiceAndroid,
    jobject caller,
    jint deviceId,
    jboolean granted) {
  UsbServiceAndroid* native = reinterpret_cast<UsbServiceAndroid*>(nativeUsbServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DevicePermissionRequestComplete");
  return native->DevicePermissionRequestComplete(env, base::android::JavaParamRef<jobject>(env,
      caller), deviceId, granted);
}


static std::atomic<jmethodID> g_org_chromium_device_usb_ChromeUsbService_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ChromeUsbService_create(JNIEnv* env, jlong
    usbServiceAndroid) {
  jclass clazz = org_chromium_device_usb_ChromeUsbService_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_device_usb_ChromeUsbService_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/device/usb/ChromeUsbService;",
          &g_org_chromium_device_usb_ChromeUsbService_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, usbServiceAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_device_usb_ChromeUsbService_getDevices(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_ChromeUsbService_getDevices(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_usb_ChromeUsbService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_usb_ChromeUsbService_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDevices",
          "()[Ljava/lang/Object;",
          &g_org_chromium_device_usb_ChromeUsbService_getDevices);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_device_usb_ChromeUsbService_openDevice(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ChromeUsbService_openDevice(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& wrapper) {
  jclass clazz = org_chromium_device_usb_ChromeUsbService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_usb_ChromeUsbService_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "openDevice",
          "(Lorg/chromium/device/usb/ChromeUsbDevice;)Landroid/hardware/usb/UsbDeviceConnection;",
          &g_org_chromium_device_usb_ChromeUsbService_openDevice);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, wrapper.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_device_usb_ChromeUsbService_hasDevicePermission(nullptr);
static jboolean Java_ChromeUsbService_hasDevicePermission(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& wrapper) {
  jclass clazz = org_chromium_device_usb_ChromeUsbService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_usb_ChromeUsbService_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "hasDevicePermission",
          "(Lorg/chromium/device/usb/ChromeUsbDevice;)Z",
          &g_org_chromium_device_usb_ChromeUsbService_hasDevicePermission);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, wrapper.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_device_usb_ChromeUsbService_requestDevicePermission(nullptr);
static void Java_ChromeUsbService_requestDevicePermission(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& wrapper) {
  jclass clazz = org_chromium_device_usb_ChromeUsbService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_usb_ChromeUsbService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "requestDevicePermission",
          "(Lorg/chromium/device/usb/ChromeUsbDevice;)V",
          &g_org_chromium_device_usb_ChromeUsbService_requestDevicePermission);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, wrapper.obj());
}

static std::atomic<jmethodID> g_org_chromium_device_usb_ChromeUsbService_close(nullptr);
static void Java_ChromeUsbService_close(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_usb_ChromeUsbService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_usb_ChromeUsbService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "close",
          "()V",
          &g_org_chromium_device_usb_ChromeUsbService_close);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace device

// Step 4: Generated test functions (optional).


#endif  // org_chromium_device_usb_ChromeUsbService_JNI
