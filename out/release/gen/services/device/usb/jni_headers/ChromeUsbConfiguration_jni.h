// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/usb/ChromeUsbConfiguration

#ifndef org_chromium_device_usb_ChromeUsbConfiguration_JNI
#define org_chromium_device_usb_ChromeUsbConfiguration_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_device_usb_ChromeUsbConfiguration[];
const char kClassPath_org_chromium_device_usb_ChromeUsbConfiguration[] =
    "org/chromium/device/usb/ChromeUsbConfiguration";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_device_usb_ChromeUsbConfiguration_clazz(nullptr);
#ifndef org_chromium_device_usb_ChromeUsbConfiguration_clazz_defined
#define org_chromium_device_usb_ChromeUsbConfiguration_clazz_defined
inline jclass org_chromium_device_usb_ChromeUsbConfiguration_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_device_usb_ChromeUsbConfiguration,
      &g_org_chromium_device_usb_ChromeUsbConfiguration_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace device {


static std::atomic<jmethodID> g_org_chromium_device_usb_ChromeUsbConfiguration_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ChromeUsbConfiguration_create(JNIEnv* env,
    const base::android::JavaRef<jobject>& configuration) {
  jclass clazz = org_chromium_device_usb_ChromeUsbConfiguration_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_device_usb_ChromeUsbConfiguration_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(Landroid/hardware/usb/UsbConfiguration;)Lorg/chromium/device/usb/ChromeUsbConfiguration;",
          &g_org_chromium_device_usb_ChromeUsbConfiguration_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, configuration.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_device_usb_ChromeUsbConfiguration_getConfigurationValue(nullptr);
static jint Java_ChromeUsbConfiguration_getConfigurationValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_usb_ChromeUsbConfiguration_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_usb_ChromeUsbConfiguration_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getConfigurationValue",
          "()I",
          &g_org_chromium_device_usb_ChromeUsbConfiguration_getConfigurationValue);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_device_usb_ChromeUsbConfiguration_isSelfPowered(nullptr);
static jboolean Java_ChromeUsbConfiguration_isSelfPowered(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_usb_ChromeUsbConfiguration_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_usb_ChromeUsbConfiguration_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isSelfPowered",
          "()Z",
          &g_org_chromium_device_usb_ChromeUsbConfiguration_isSelfPowered);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_device_usb_ChromeUsbConfiguration_isRemoteWakeup(nullptr);
static jboolean Java_ChromeUsbConfiguration_isRemoteWakeup(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_usb_ChromeUsbConfiguration_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_usb_ChromeUsbConfiguration_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isRemoteWakeup",
          "()Z",
          &g_org_chromium_device_usb_ChromeUsbConfiguration_isRemoteWakeup);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_device_usb_ChromeUsbConfiguration_getMaxPower(nullptr);
static jint Java_ChromeUsbConfiguration_getMaxPower(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_usb_ChromeUsbConfiguration_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_usb_ChromeUsbConfiguration_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMaxPower",
          "()I",
          &g_org_chromium_device_usb_ChromeUsbConfiguration_getMaxPower);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_device_usb_ChromeUsbConfiguration_getInterfaces(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_ChromeUsbConfiguration_getInterfaces(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_device_usb_ChromeUsbConfiguration_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_usb_ChromeUsbConfiguration_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getInterfaces",
          "()[Landroid/hardware/usb/UsbInterface;",
          &g_org_chromium_device_usb_ChromeUsbConfiguration_getInterfaces);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

}  // namespace device

// Step 4: Generated test functions (optional).


#endif  // org_chromium_device_usb_ChromeUsbConfiguration_JNI
