// services/device/public/mojom/usb_manager_test.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_TEST_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_TEST_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace device {
namespace mojom {
namespace internal {
class  UsbDeviceManagerTest_AddDeviceForTesting_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UsbDeviceManagerTest_AddDeviceForTesting_Params_Data));
      new (data()) UsbDeviceManagerTest_AddDeviceForTesting_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UsbDeviceManagerTest_AddDeviceForTesting_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UsbDeviceManagerTest_AddDeviceForTesting_Params_Data>(index_);
    }
    UsbDeviceManagerTest_AddDeviceForTesting_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> serial_number;
  mojo::internal::Pointer<mojo::internal::String_Data> landing_page;

 private:
  UsbDeviceManagerTest_AddDeviceForTesting_Params_Data();
  ~UsbDeviceManagerTest_AddDeviceForTesting_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_AddDeviceForTesting_Params_Data) == 32,
              "Bad sizeof(UsbDeviceManagerTest_AddDeviceForTesting_Params_Data)");
class  UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data));
      new (data()) UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data>(index_);
    }
    UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data();
  ~UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data) == 24,
              "Bad sizeof(UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data)");
class  UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data));
      new (data()) UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data>(index_);
    }
    UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> guid;

 private:
  UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data();
  ~UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data) == 16,
              "Bad sizeof(UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data)");
class  UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data));
      new (data()) UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data>(index_);
    }
    UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data();
  ~UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data)");
class  UsbDeviceManagerTest_GetTestDevices_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UsbDeviceManagerTest_GetTestDevices_Params_Data));
      new (data()) UsbDeviceManagerTest_GetTestDevices_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UsbDeviceManagerTest_GetTestDevices_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UsbDeviceManagerTest_GetTestDevices_Params_Data>(index_);
    }
    UsbDeviceManagerTest_GetTestDevices_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  UsbDeviceManagerTest_GetTestDevices_Params_Data();
  ~UsbDeviceManagerTest_GetTestDevices_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_GetTestDevices_Params_Data) == 8,
              "Bad sizeof(UsbDeviceManagerTest_GetTestDevices_Params_Data)");
class  UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data));
      new (data()) UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data>(index_);
    }
    UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::TestDeviceInfo_Data>>> devices;

 private:
  UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data();
  ~UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data) == 16,
              "Bad sizeof(UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data)");

}  // namespace internal
class UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView {
 public:
  UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView() {}

  UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView(
      internal::UsbDeviceManagerTest_AddDeviceForTesting_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) {
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSerialNumberDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSerialNumber(UserType* output) {
    auto* pointer = data_->serial_number.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetLandingPageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLandingPage(UserType* output) {
    auto* pointer = data_->landing_page.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::UsbDeviceManagerTest_AddDeviceForTesting_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsDataView {
 public:
  UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsDataView() {}

  UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsDataView(
      internal::UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsDataView {
 public:
  UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsDataView() {}

  UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsDataView(
      internal::UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetGuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadGuid(UserType* output) {
    auto* pointer = data_->guid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::UsbDeviceManagerTest_RemoveDeviceForTesting_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsDataView {
 public:
  UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsDataView() {}

  UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsDataView(
      internal::UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams_Data* data_ = nullptr;
};

class UsbDeviceManagerTest_GetTestDevices_ParamsDataView {
 public:
  UsbDeviceManagerTest_GetTestDevices_ParamsDataView() {}

  UsbDeviceManagerTest_GetTestDevices_ParamsDataView(
      internal::UsbDeviceManagerTest_GetTestDevices_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::UsbDeviceManagerTest_GetTestDevices_Params_Data* data_ = nullptr;
};

class UsbDeviceManagerTest_GetTestDevices_ResponseParamsDataView {
 public:
  UsbDeviceManagerTest_GetTestDevices_ResponseParamsDataView() {}

  UsbDeviceManagerTest_GetTestDevices_ResponseParamsDataView(
      internal::UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDevicesDataView(
      mojo::ArrayDataView<TestDeviceInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevices(UserType* output) {
    auto* pointer = data_->devices.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::TestDeviceInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::UsbDeviceManagerTest_GetTestDevices_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView::GetSerialNumberDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->serial_number.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void UsbDeviceManagerTest_AddDeviceForTesting_ParamsDataView::GetLandingPageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->landing_page.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsDataView::GetGuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->guid.Get();
  *output = mojo::StringDataView(pointer, context_);
}






inline void UsbDeviceManagerTest_GetTestDevices_ResponseParamsDataView::GetDevicesDataView(
    mojo::ArrayDataView<TestDeviceInfoDataView>* output) {
  auto pointer = data_->devices.Get();
  *output = mojo::ArrayDataView<TestDeviceInfoDataView>(pointer, context_);
}

}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_TEST_MOJOM_PARAMS_DATA_H_