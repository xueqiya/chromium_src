// services/device/public/mojom/device_service.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/device/public/mojom/device_service.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "services/device/public/mojom/battery_monitor.mojom.h"
#include "services/device/public/mojom/fingerprint.mojom.h"
#include "services/device/public/mojom/battery_monitor.mojom.h"
#include "services/device/public/mojom/geolocation_config.mojom.h"
#include "services/device/public/mojom/geolocation_context.mojom.h"
#include "services/device/public/mojom/geolocation_control.mojom.h"
#include "services/device/public/mojom/nfc_provider.mojom.h"
#include "services/device/public/mojom/power_monitor.mojom.h"
#include "services/device/public/mojom/public_ip_address_geolocation_provider.mojom.h"
#include "services/device/public/mojom/screen_orientation.mojom.h"
#include "services/device/public/mojom/sensor_provider.mojom.h"
#include "services/device/public/mojom/serial.mojom.h"
#include "services/device/public/mojom/time_zone_monitor.mojom.h"
#include "services/device/public/mojom/usb_manager.mojom.h"
#include "services/device/public/mojom/usb_manager_test.mojom.h"
#include "services/device/public/mojom/vibration_manager.mojom.h"
#include "services/device/public/mojom/wake_lock_provider.mojom.h"


#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_SERVICE_MOJOM_JUMBO_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_SERVICE_MOJOM_JUMBO_H_
#endif


namespace device {
namespace mojom {


void DeviceServiceInterceptorForTesting::BindFingerprint(mojo::PendingReceiver<::device::mojom::Fingerprint> receiver) {
  GetForwardingInterface()->BindFingerprint(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindGeolocationConfig(mojo::PendingReceiver<::device::mojom::GeolocationConfig> receiver) {
  GetForwardingInterface()->BindGeolocationConfig(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindGeolocationContext(mojo::PendingReceiver<::device::mojom::GeolocationContext> receiver) {
  GetForwardingInterface()->BindGeolocationContext(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindGeolocationControl(mojo::PendingReceiver<::device::mojom::GeolocationControl> receiver) {
  GetForwardingInterface()->BindGeolocationControl(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindBatteryMonitor(mojo::PendingReceiver<::device::mojom::BatteryMonitor> receiver) {
  GetForwardingInterface()->BindBatteryMonitor(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindNFCProvider(mojo::PendingReceiver<::device::mojom::NFCProvider> receiver) {
  GetForwardingInterface()->BindNFCProvider(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindVibrationManager(mojo::PendingReceiver<::device::mojom::VibrationManager> receiver) {
  GetForwardingInterface()->BindVibrationManager(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindPowerMonitor(mojo::PendingReceiver<::device::mojom::PowerMonitor> receiver) {
  GetForwardingInterface()->BindPowerMonitor(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindPublicIpAddressGeolocationProvider(mojo::PendingReceiver<::device::mojom::PublicIpAddressGeolocationProvider> receiver) {
  GetForwardingInterface()->BindPublicIpAddressGeolocationProvider(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindScreenOrientationListener(mojo::PendingReceiver<::device::mojom::ScreenOrientationListener> receiver) {
  GetForwardingInterface()->BindScreenOrientationListener(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindSensorProvider(mojo::PendingReceiver<::device::mojom::SensorProvider> receiver) {
  GetForwardingInterface()->BindSensorProvider(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindSerialPortManager(mojo::PendingReceiver<::device::mojom::SerialPortManager> receiver) {
  GetForwardingInterface()->BindSerialPortManager(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindTimeZoneMonitor(mojo::PendingReceiver<::device::mojom::TimeZoneMonitor> receiver) {
  GetForwardingInterface()->BindTimeZoneMonitor(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindWakeLockProvider(mojo::PendingReceiver<::device::mojom::WakeLockProvider> receiver) {
  GetForwardingInterface()->BindWakeLockProvider(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindUsbDeviceManager(mojo::PendingReceiver<::device::mojom::UsbDeviceManager> receiver) {
  GetForwardingInterface()->BindUsbDeviceManager(std::move(receiver));
}
void DeviceServiceInterceptorForTesting::BindUsbDeviceManagerTest(mojo::PendingReceiver<::device::mojom::UsbDeviceManagerTest> receiver) {
  GetForwardingInterface()->BindUsbDeviceManagerTest(std::move(receiver));
}
DeviceServiceAsyncWaiter::DeviceServiceAsyncWaiter(
    DeviceService* proxy) : proxy_(proxy) {}

DeviceServiceAsyncWaiter::~DeviceServiceAsyncWaiter() = default;






}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif