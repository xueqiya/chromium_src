// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/power_save_blocker/PowerSaveBlocker

#ifndef org_chromium_device_power_save_blocker_PowerSaveBlocker_JNI
#define org_chromium_device_power_save_blocker_PowerSaveBlocker_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_device_power_1save_1blocker_PowerSaveBlocker[];
const char kClassPath_org_chromium_device_power_1save_1blocker_PowerSaveBlocker[] =
    "org/chromium/device/power_save_blocker/PowerSaveBlocker";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz(nullptr);
#ifndef org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz_defined
#define org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz_defined
inline jclass org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_device_power_1save_1blocker_PowerSaveBlocker,
      &g_org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace device {


static std::atomic<jmethodID>
    g_org_chromium_device_power_1save_1blocker_PowerSaveBlocker_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PowerSaveBlocker_create(JNIEnv* env) {
  jclass clazz = org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "()Lorg/chromium/device/power_save_blocker/PowerSaveBlocker;",
          &g_org_chromium_device_power_1save_1blocker_PowerSaveBlocker_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_device_power_1save_1blocker_PowerSaveBlocker_applyBlock(nullptr);
static void Java_PowerSaveBlocker_applyBlock(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& view) {
  jclass clazz = org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "applyBlock",
          "(Landroid/view/View;)V",
          &g_org_chromium_device_power_1save_1blocker_PowerSaveBlocker_applyBlock);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, view.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_device_power_1save_1blocker_PowerSaveBlocker_removeBlock(nullptr);
static void Java_PowerSaveBlocker_removeBlock(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_power_1save_1blocker_PowerSaveBlocker_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "removeBlock",
          "()V",
          &g_org_chromium_device_power_1save_1blocker_PowerSaveBlocker_removeBlock);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace device

// Step 4: Generated test functions (optional).


#endif  // org_chromium_device_power_save_blocker_PowerSaveBlocker_JNI
