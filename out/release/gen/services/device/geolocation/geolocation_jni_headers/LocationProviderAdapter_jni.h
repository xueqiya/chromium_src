// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/geolocation/LocationProviderAdapter

#ifndef org_chromium_device_geolocation_LocationProviderAdapter_JNI
#define org_chromium_device_geolocation_LocationProviderAdapter_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_device_geolocation_LocationProviderAdapter[];
const char kClassPath_org_chromium_device_geolocation_LocationProviderAdapter[] =
    "org/chromium/device/geolocation/LocationProviderAdapter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_device_geolocation_LocationProviderAdapter_clazz(nullptr);
#ifndef org_chromium_device_geolocation_LocationProviderAdapter_clazz_defined
#define org_chromium_device_geolocation_LocationProviderAdapter_clazz_defined
inline jclass org_chromium_device_geolocation_LocationProviderAdapter_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_device_geolocation_LocationProviderAdapter,
      &g_org_chromium_device_geolocation_LocationProviderAdapter_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_LocationProviderAdapter_NewLocationAvailable(JNIEnv* env, jdouble latitude,
    jdouble longitude,
    jdouble timeStamp,
    jboolean hasAltitude,
    jdouble altitude,
    jboolean hasAccuracy,
    jdouble accuracy,
    jboolean hasHeading,
    jdouble heading,
    jboolean hasSpeed,
    jdouble speed);

JNI_GENERATOR_EXPORT void Java_J_N_MvJnRjJi(
    JNIEnv* env,
    jclass jcaller,
    jdouble latitude,
    jdouble longitude,
    jdouble timeStamp,
    jboolean hasAltitude,
    jdouble altitude,
    jboolean hasAccuracy,
    jdouble accuracy,
    jboolean hasHeading,
    jdouble heading,
    jboolean hasSpeed,
    jdouble speed) {
  return JNI_LocationProviderAdapter_NewLocationAvailable(env, latitude, longitude, timeStamp,
      hasAltitude, altitude, hasAccuracy, accuracy, hasHeading, heading, hasSpeed, speed);
}

static void JNI_LocationProviderAdapter_NewErrorAvailable(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& message);

JNI_GENERATOR_EXPORT void Java_J_N_M8Iz7Ptw(
    JNIEnv* env,
    jclass jcaller,
    jstring message) {
  return JNI_LocationProviderAdapter_NewErrorAvailable(env,
      base::android::JavaParamRef<jstring>(env, message));
}


static std::atomic<jmethodID>
    g_org_chromium_device_geolocation_LocationProviderAdapter_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_LocationProviderAdapter_create(JNIEnv* env) {
  jclass clazz = org_chromium_device_geolocation_LocationProviderAdapter_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_device_geolocation_LocationProviderAdapter_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "()Lorg/chromium/device/geolocation/LocationProviderAdapter;",
          &g_org_chromium_device_geolocation_LocationProviderAdapter_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_device_geolocation_LocationProviderAdapter_start(nullptr);
static void Java_LocationProviderAdapter_start(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jboolean enableHighAccuracy) {
  jclass clazz = org_chromium_device_geolocation_LocationProviderAdapter_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_geolocation_LocationProviderAdapter_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "start",
          "(Z)V",
          &g_org_chromium_device_geolocation_LocationProviderAdapter_start);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, enableHighAccuracy);
}

static std::atomic<jmethodID>
    g_org_chromium_device_geolocation_LocationProviderAdapter_stop(nullptr);
static void Java_LocationProviderAdapter_stop(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_device_geolocation_LocationProviderAdapter_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_geolocation_LocationProviderAdapter_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "stop",
          "()V",
          &g_org_chromium_device_geolocation_LocationProviderAdapter_stop);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

// Step 4: Generated test functions (optional).


#endif  // org_chromium_device_geolocation_LocationProviderAdapter_JNI
