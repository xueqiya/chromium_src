// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/sensors/PlatformSensorProvider

#ifndef org_chromium_device_sensors_PlatformSensorProvider_JNI
#define org_chromium_device_sensors_PlatformSensorProvider_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_device_sensors_PlatformSensorProvider[];
const char kClassPath_org_chromium_device_sensors_PlatformSensorProvider[] =
    "org/chromium/device/sensors/PlatformSensorProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_device_sensors_PlatformSensorProvider_clazz(nullptr);
#ifndef org_chromium_device_sensors_PlatformSensorProvider_clazz_defined
#define org_chromium_device_sensors_PlatformSensorProvider_clazz_defined
inline jclass org_chromium_device_sensors_PlatformSensorProvider_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_device_sensors_PlatformSensorProvider,
      &g_org_chromium_device_sensors_PlatformSensorProvider_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace device {


static std::atomic<jmethodID> g_org_chromium_device_sensors_PlatformSensorProvider_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PlatformSensorProvider_create(JNIEnv* env) {
  jclass clazz = org_chromium_device_sensors_PlatformSensorProvider_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_device_sensors_PlatformSensorProvider_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "()Lorg/chromium/device/sensors/PlatformSensorProvider;",
          &g_org_chromium_device_sensors_PlatformSensorProvider_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_device_sensors_PlatformSensorProvider_setSensorManagerToNullForTesting(nullptr);
static void Java_PlatformSensorProvider_setSensorManagerToNullForTesting(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_sensors_PlatformSensorProvider_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensorProvider_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setSensorManagerToNullForTesting",
          "()V",
          &g_org_chromium_device_sensors_PlatformSensorProvider_setSensorManagerToNullForTesting);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_device_sensors_PlatformSensorProvider_hasSensorType(nullptr);
static jboolean Java_PlatformSensorProvider_hasSensorType(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper type) {
  jclass clazz = org_chromium_device_sensors_PlatformSensorProvider_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensorProvider_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "hasSensorType",
          "(I)Z",
          &g_org_chromium_device_sensors_PlatformSensorProvider_hasSensorType);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, as_jint(type));
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_device_sensors_PlatformSensorProvider_createSensor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PlatformSensorProvider_createSensor(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, JniIntWrapper type) {
  jclass clazz = org_chromium_device_sensors_PlatformSensorProvider_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensorProvider_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "createSensor",
          "(I)Lorg/chromium/device/sensors/PlatformSensor;",
          &g_org_chromium_device_sensors_PlatformSensorProvider_createSensor);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, as_jint(type));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace device

// Step 4: Generated test functions (optional).


#endif  // org_chromium_device_sensors_PlatformSensorProvider_JNI
