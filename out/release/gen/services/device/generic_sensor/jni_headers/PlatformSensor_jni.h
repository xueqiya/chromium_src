// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/sensors/PlatformSensor

#ifndef org_chromium_device_sensors_PlatformSensor_JNI
#define org_chromium_device_sensors_PlatformSensor_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_device_sensors_PlatformSensor[];
const char kClassPath_org_chromium_device_sensors_PlatformSensor[] =
    "org/chromium/device/sensors/PlatformSensor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_device_sensors_PlatformSensor_clazz(nullptr);
#ifndef org_chromium_device_sensors_PlatformSensor_clazz_defined
#define org_chromium_device_sensors_PlatformSensor_clazz_defined
inline jclass org_chromium_device_sensors_PlatformSensor_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_device_sensors_PlatformSensor,
      &g_org_chromium_device_sensors_PlatformSensor_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace device {

JNI_GENERATOR_EXPORT void Java_J_N_MrHXg7he(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePlatformSensorAndroid,
    jobject caller) {
  PlatformSensorAndroid* native =
      reinterpret_cast<PlatformSensorAndroid*>(nativePlatformSensorAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NotifyPlatformSensorError");
  return native->NotifyPlatformSensorError(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mb4JvlL7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePlatformSensorAndroid,
    jobject caller,
    jdouble timestamp,
    jdouble value1,
    jdouble value2,
    jdouble value3,
    jdouble value4) {
  PlatformSensorAndroid* native =
      reinterpret_cast<PlatformSensorAndroid*>(nativePlatformSensorAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdatePlatformSensorReading");
  return native->UpdatePlatformSensorReading(env, base::android::JavaParamRef<jobject>(env, caller),
      timestamp, value1, value2, value3, value4);
}


static std::atomic<jmethodID>
    g_org_chromium_device_sensors_PlatformSensor_initPlatformSensorAndroid(nullptr);
static void Java_PlatformSensor_initPlatformSensorAndroid(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativePlatformSensorAndroid) {
  jclass clazz = org_chromium_device_sensors_PlatformSensor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensor_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "initPlatformSensorAndroid",
          "(J)V",
          &g_org_chromium_device_sensors_PlatformSensor_initPlatformSensorAndroid);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativePlatformSensorAndroid);
}

static std::atomic<jmethodID>
    g_org_chromium_device_sensors_PlatformSensor_getReportingMode(nullptr);
static jint Java_PlatformSensor_getReportingMode(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_device_sensors_PlatformSensor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensor_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getReportingMode",
          "()I",
          &g_org_chromium_device_sensors_PlatformSensor_getReportingMode);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_device_sensors_PlatformSensor_getDefaultConfiguration(nullptr);
static jdouble Java_PlatformSensor_getDefaultConfiguration(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_sensors_PlatformSensor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensor_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDefaultConfiguration",
          "()D",
          &g_org_chromium_device_sensors_PlatformSensor_getDefaultConfiguration);

  jdouble ret =
      env->CallDoubleMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_device_sensors_PlatformSensor_getMaximumSupportedFrequency(nullptr);
static jdouble Java_PlatformSensor_getMaximumSupportedFrequency(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_device_sensors_PlatformSensor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensor_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMaximumSupportedFrequency",
          "()D",
          &g_org_chromium_device_sensors_PlatformSensor_getMaximumSupportedFrequency);

  jdouble ret =
      env->CallDoubleMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_device_sensors_PlatformSensor_startSensor(nullptr);
static jboolean Java_PlatformSensor_startSensor(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jdouble frequency) {
  jclass clazz = org_chromium_device_sensors_PlatformSensor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensor_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "startSensor",
          "(D)Z",
          &g_org_chromium_device_sensors_PlatformSensor_startSensor);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, frequency);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_device_sensors_PlatformSensor_stopSensor(nullptr);
static void Java_PlatformSensor_stopSensor(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_device_sensors_PlatformSensor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensor_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "stopSensor",
          "()V",
          &g_org_chromium_device_sensors_PlatformSensor_stopSensor);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_device_sensors_PlatformSensor_checkSensorConfiguration(nullptr);
static jboolean Java_PlatformSensor_checkSensorConfiguration(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jdouble frequency) {
  jclass clazz = org_chromium_device_sensors_PlatformSensor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensor_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "checkSensorConfiguration",
          "(D)Z",
          &g_org_chromium_device_sensors_PlatformSensor_checkSensorConfiguration);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, frequency);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_device_sensors_PlatformSensor_sensorDestroyed(nullptr);
static void Java_PlatformSensor_sensorDestroyed(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_device_sensors_PlatformSensor_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_device_sensors_PlatformSensor_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "sensorDestroyed",
          "()V",
          &g_org_chromium_device_sensors_PlatformSensor_sensorDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace device

// Step 4: Generated test functions (optional).


#endif  // org_chromium_device_sensors_PlatformSensor_JNI
