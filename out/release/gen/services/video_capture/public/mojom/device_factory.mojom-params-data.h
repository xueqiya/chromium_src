// services/video_capture/public/mojom/device_factory.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace video_capture {
namespace mojom {
namespace internal {
class  DeviceFactory_GetDeviceInfos_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DeviceFactory_GetDeviceInfos_Params_Data));
      new (data()) DeviceFactory_GetDeviceInfos_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DeviceFactory_GetDeviceInfos_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DeviceFactory_GetDeviceInfos_Params_Data>(index_);
    }
    DeviceFactory_GetDeviceInfos_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DeviceFactory_GetDeviceInfos_Params_Data();
  ~DeviceFactory_GetDeviceInfos_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_GetDeviceInfos_Params_Data) == 8,
              "Bad sizeof(DeviceFactory_GetDeviceInfos_Params_Data)");
class  DeviceFactory_GetDeviceInfos_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DeviceFactory_GetDeviceInfos_ResponseParams_Data));
      new (data()) DeviceFactory_GetDeviceInfos_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DeviceFactory_GetDeviceInfos_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DeviceFactory_GetDeviceInfos_ResponseParams_Data>(index_);
    }
    DeviceFactory_GetDeviceInfos_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::media::mojom::internal::VideoCaptureDeviceInfo_Data>>> device_infos;

 private:
  DeviceFactory_GetDeviceInfos_ResponseParams_Data();
  ~DeviceFactory_GetDeviceInfos_ResponseParams_Data() = delete;
};
static_assert(sizeof(DeviceFactory_GetDeviceInfos_ResponseParams_Data) == 16,
              "Bad sizeof(DeviceFactory_GetDeviceInfos_ResponseParams_Data)");
class  DeviceFactory_CreateDevice_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DeviceFactory_CreateDevice_Params_Data));
      new (data()) DeviceFactory_CreateDevice_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DeviceFactory_CreateDevice_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DeviceFactory_CreateDevice_Params_Data>(index_);
    }
    DeviceFactory_CreateDevice_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> device_id;
  mojo::internal::Handle_Data device_receiver;
  uint8_t padfinal_[4];

 private:
  DeviceFactory_CreateDevice_Params_Data();
  ~DeviceFactory_CreateDevice_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_CreateDevice_Params_Data) == 24,
              "Bad sizeof(DeviceFactory_CreateDevice_Params_Data)");
class  DeviceFactory_CreateDevice_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DeviceFactory_CreateDevice_ResponseParams_Data));
      new (data()) DeviceFactory_CreateDevice_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DeviceFactory_CreateDevice_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DeviceFactory_CreateDevice_ResponseParams_Data>(index_);
    }
    DeviceFactory_CreateDevice_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result_code;
  uint8_t padfinal_[4];

 private:
  DeviceFactory_CreateDevice_ResponseParams_Data();
  ~DeviceFactory_CreateDevice_ResponseParams_Data() = delete;
};
static_assert(sizeof(DeviceFactory_CreateDevice_ResponseParams_Data) == 16,
              "Bad sizeof(DeviceFactory_CreateDevice_ResponseParams_Data)");
class  DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data));
      new (data()) DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data>(index_);
    }
    DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureDeviceInfo_Data> device_info;
  mojo::internal::Interface_Data producer;
  uint8_t send_buffer_handles_to_producer_as_raw_file_descriptors : 1;
  uint8_t pad2_[3];
  mojo::internal::Handle_Data virtual_device_receiver;

 private:
  DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data();
  ~DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data) == 32,
              "Bad sizeof(DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data)");
class  DeviceFactory_AddTextureVirtualDevice_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DeviceFactory_AddTextureVirtualDevice_Params_Data));
      new (data()) DeviceFactory_AddTextureVirtualDevice_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DeviceFactory_AddTextureVirtualDevice_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DeviceFactory_AddTextureVirtualDevice_Params_Data>(index_);
    }
    DeviceFactory_AddTextureVirtualDevice_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureDeviceInfo_Data> device_info;
  mojo::internal::Handle_Data virtual_device_receiver;
  uint8_t padfinal_[4];

 private:
  DeviceFactory_AddTextureVirtualDevice_Params_Data();
  ~DeviceFactory_AddTextureVirtualDevice_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_AddTextureVirtualDevice_Params_Data) == 24,
              "Bad sizeof(DeviceFactory_AddTextureVirtualDevice_Params_Data)");
class  DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data));
      new (data()) DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data>(index_);
    }
    DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;
  uint8_t raise_event_if_virtual_devices_already_present : 1;
  uint8_t padfinal_[7];

 private:
  DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data();
  ~DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data) == 24,
              "Bad sizeof(DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data)");

}  // namespace internal
class DeviceFactory_GetDeviceInfos_ParamsDataView {
 public:
  DeviceFactory_GetDeviceInfos_ParamsDataView() {}

  DeviceFactory_GetDeviceInfos_ParamsDataView(
      internal::DeviceFactory_GetDeviceInfos_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DeviceFactory_GetDeviceInfos_Params_Data* data_ = nullptr;
};

class DeviceFactory_GetDeviceInfos_ResponseParamsDataView {
 public:
  DeviceFactory_GetDeviceInfos_ResponseParamsDataView() {}

  DeviceFactory_GetDeviceInfos_ResponseParamsDataView(
      internal::DeviceFactory_GetDeviceInfos_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfosDataView(
      mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDeviceInfos(UserType* output) {
    auto* pointer = data_->device_infos.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::DeviceFactory_GetDeviceInfos_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DeviceFactory_CreateDevice_ParamsDataView {
 public:
  DeviceFactory_CreateDevice_ParamsDataView() {}

  DeviceFactory_CreateDevice_ParamsDataView(
      internal::DeviceFactory_CreateDevice_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDeviceId(UserType* output) {
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::DeviceInterfaceBase>>(
            &data_->device_receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceFactory_CreateDevice_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DeviceFactory_CreateDevice_ResponseParamsDataView {
 public:
  DeviceFactory_CreateDevice_ResponseParamsDataView() {}

  DeviceFactory_CreateDevice_ResponseParamsDataView(
      internal::DeviceFactory_CreateDevice_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResultCode(UserType* output) const {
    auto data_value = data_->result_code;
    return mojo::internal::Deserialize<::video_capture::mojom::DeviceAccessResultCode>(
        data_value, output);
  }

  DeviceAccessResultCode result_code() const {
    return static_cast<DeviceAccessResultCode>(data_->result_code);
  }
 private:
  internal::DeviceFactory_CreateDevice_ResponseParams_Data* data_ = nullptr;
};

class DeviceFactory_AddSharedMemoryVirtualDevice_ParamsDataView {
 public:
  DeviceFactory_AddSharedMemoryVirtualDevice_ParamsDataView() {}

  DeviceFactory_AddSharedMemoryVirtualDevice_ParamsDataView(
      internal::DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      ::media::mojom::VideoCaptureDeviceInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDeviceInfo(UserType* output) {
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureDeviceInfoDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeProducer() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::video_capture::mojom::ProducerInterfaceBase>>(
            &data_->producer, &result, context_);
    DCHECK(ret);
    return result;
  }
  bool send_buffer_handles_to_producer_as_raw_file_descriptors() const {
    return data_->send_buffer_handles_to_producer_as_raw_file_descriptors;
  }
  template <typename UserType>
  UserType TakeVirtualDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::SharedMemoryVirtualDeviceInterfaceBase>>(
            &data_->virtual_device_receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DeviceFactory_AddTextureVirtualDevice_ParamsDataView {
 public:
  DeviceFactory_AddTextureVirtualDevice_ParamsDataView() {}

  DeviceFactory_AddTextureVirtualDevice_ParamsDataView(
      internal::DeviceFactory_AddTextureVirtualDevice_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      ::media::mojom::VideoCaptureDeviceInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDeviceInfo(UserType* output) {
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureDeviceInfoDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeVirtualDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::TextureVirtualDeviceInterfaceBase>>(
            &data_->virtual_device_receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceFactory_AddTextureVirtualDevice_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DeviceFactory_RegisterVirtualDevicesChangedObserver_ParamsDataView {
 public:
  DeviceFactory_RegisterVirtualDevicesChangedObserver_ParamsDataView() {}

  DeviceFactory_RegisterVirtualDevicesChangedObserver_ParamsDataView(
      internal::DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::video_capture::mojom::DevicesChangedObserverInterfaceBase>>(
            &data_->observer, &result, context_);
    DCHECK(ret);
    return result;
  }
  bool raise_event_if_virtual_devices_already_present() const {
    return data_->raise_event_if_virtual_devices_already_present;
  }
 private:
  internal::DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};




inline void DeviceFactory_GetDeviceInfos_ResponseParamsDataView::GetDeviceInfosDataView(
    mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>* output) {
  auto pointer = data_->device_infos.Get();
  *output = mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>(pointer, context_);
}


inline void DeviceFactory_CreateDevice_ParamsDataView::GetDeviceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void DeviceFactory_AddSharedMemoryVirtualDevice_ParamsDataView::GetDeviceInfoDataView(
    ::media::mojom::VideoCaptureDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = ::media::mojom::VideoCaptureDeviceInfoDataView(pointer, context_);
}


inline void DeviceFactory_AddTextureVirtualDevice_ParamsDataView::GetDeviceInfoDataView(
    ::media::mojom::VideoCaptureDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = ::media::mojom::VideoCaptureDeviceInfoDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace video_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_PARAMS_DATA_H_