// services/video_capture/public/mojom/video_capture_service.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/video_capture/public/mojom/video_capture_service.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "services/video_capture/public/mojom/device_factory.mojom.h"
#include "services/video_capture/public/mojom/testing_controls.mojom.h"
#include "services/video_capture/public/mojom/video_source_provider.mojom.h"


#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_CAPTURE_SERVICE_MOJOM_JUMBO_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_CAPTURE_SERVICE_MOJOM_JUMBO_H_
#endif


namespace video_capture {
namespace mojom {


void VideoCaptureServiceInterceptorForTesting::ConnectToDeviceFactory(mojo::PendingReceiver<::video_capture::mojom::DeviceFactory> receiver) {
  GetForwardingInterface()->ConnectToDeviceFactory(std::move(receiver));
}
void VideoCaptureServiceInterceptorForTesting::ConnectToVideoSourceProvider(mojo::PendingReceiver<::video_capture::mojom::VideoSourceProvider> receiver) {
  GetForwardingInterface()->ConnectToVideoSourceProvider(std::move(receiver));
}
void VideoCaptureServiceInterceptorForTesting::SetRetryCount(int32_t count) {
  GetForwardingInterface()->SetRetryCount(std::move(count));
}
void VideoCaptureServiceInterceptorForTesting::BindControlsForTesting(mojo::PendingReceiver<::video_capture::mojom::TestingControls> receiver) {
  GetForwardingInterface()->BindControlsForTesting(std::move(receiver));
}
VideoCaptureServiceAsyncWaiter::VideoCaptureServiceAsyncWaiter(
    VideoCaptureService* proxy) : proxy_(proxy) {}

VideoCaptureServiceAsyncWaiter::~VideoCaptureServiceAsyncWaiter() = default;






}  // namespace mojom
}  // namespace video_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif