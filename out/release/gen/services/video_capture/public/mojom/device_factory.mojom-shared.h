// services/video_capture/public/mojom/device_factory.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_SHARED_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "services/video_capture/public/mojom/device_factory.mojom-shared-internal.h"
#include "media/capture/mojom/video_capture_types.mojom-shared.h"
#include "services/video_capture/public/mojom/device.mojom-shared.h"
#include "services/video_capture/public/mojom/devices_changed_observer.mojom-shared.h"
#include "services/video_capture/public/mojom/producer.mojom-shared.h"
#include "services/video_capture/public/mojom/virtual_device.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace video_capture {
namespace mojom {


}  // namespace mojom
}  // namespace video_capture

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace video_capture {
namespace mojom {


enum class DeviceAccessResultCode : int32_t {
  
  NOT_INITIALIZED,
  
  SUCCESS,
  
  ERROR_DEVICE_NOT_FOUND,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, DeviceAccessResultCode value);
inline bool IsKnownEnumValue(DeviceAccessResultCode value) {
  return internal::DeviceAccessResultCode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class DeviceFactoryInterfaceBase {};

using DeviceFactoryPtrDataView =
    mojo::InterfacePtrDataView<DeviceFactoryInterfaceBase>;
using DeviceFactoryRequestDataView =
    mojo::InterfaceRequestDataView<DeviceFactoryInterfaceBase>;
using DeviceFactoryAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<DeviceFactoryInterfaceBase>;
using DeviceFactoryAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<DeviceFactoryInterfaceBase>;


}  // namespace mojom
}  // namespace video_capture

namespace std {

template <>
struct hash<::video_capture::mojom::DeviceAccessResultCode>
    : public mojo::internal::EnumHashImpl<::video_capture::mojom::DeviceAccessResultCode> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::video_capture::mojom::DeviceAccessResultCode, ::video_capture::mojom::DeviceAccessResultCode> {
  static ::video_capture::mojom::DeviceAccessResultCode ToMojom(::video_capture::mojom::DeviceAccessResultCode input) { return input; }
  static bool FromMojom(::video_capture::mojom::DeviceAccessResultCode input, ::video_capture::mojom::DeviceAccessResultCode* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::video_capture::mojom::DeviceAccessResultCode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::video_capture::mojom::DeviceAccessResultCode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::video_capture::mojom::DeviceAccessResultCode>(input), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace video_capture {
namespace mojom {


}  // namespace mojom
}  // namespace video_capture

#endif  // SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_SHARED_H_