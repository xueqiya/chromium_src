// services/video_capture/public/mojom/video_source_provider.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_SOURCE_PROVIDER_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_SOURCE_PROVIDER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace video_capture {
namespace mojom {
namespace internal {
class  VideoSourceProvider_GetSourceInfos_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(VideoSourceProvider_GetSourceInfos_Params_Data));
      new (data()) VideoSourceProvider_GetSourceInfos_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    VideoSourceProvider_GetSourceInfos_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<VideoSourceProvider_GetSourceInfos_Params_Data>(index_);
    }
    VideoSourceProvider_GetSourceInfos_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  VideoSourceProvider_GetSourceInfos_Params_Data();
  ~VideoSourceProvider_GetSourceInfos_Params_Data() = delete;
};
static_assert(sizeof(VideoSourceProvider_GetSourceInfos_Params_Data) == 8,
              "Bad sizeof(VideoSourceProvider_GetSourceInfos_Params_Data)");
class  VideoSourceProvider_GetSourceInfos_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(VideoSourceProvider_GetSourceInfos_ResponseParams_Data));
      new (data()) VideoSourceProvider_GetSourceInfos_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    VideoSourceProvider_GetSourceInfos_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<VideoSourceProvider_GetSourceInfos_ResponseParams_Data>(index_);
    }
    VideoSourceProvider_GetSourceInfos_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::media::mojom::internal::VideoCaptureDeviceInfo_Data>>> source_infos;

 private:
  VideoSourceProvider_GetSourceInfos_ResponseParams_Data();
  ~VideoSourceProvider_GetSourceInfos_ResponseParams_Data() = delete;
};
static_assert(sizeof(VideoSourceProvider_GetSourceInfos_ResponseParams_Data) == 16,
              "Bad sizeof(VideoSourceProvider_GetSourceInfos_ResponseParams_Data)");
class  VideoSourceProvider_GetVideoSource_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(VideoSourceProvider_GetVideoSource_Params_Data));
      new (data()) VideoSourceProvider_GetVideoSource_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    VideoSourceProvider_GetVideoSource_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<VideoSourceProvider_GetVideoSource_Params_Data>(index_);
    }
    VideoSourceProvider_GetVideoSource_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> source_id;
  mojo::internal::Handle_Data stream;
  uint8_t padfinal_[4];

 private:
  VideoSourceProvider_GetVideoSource_Params_Data();
  ~VideoSourceProvider_GetVideoSource_Params_Data() = delete;
};
static_assert(sizeof(VideoSourceProvider_GetVideoSource_Params_Data) == 24,
              "Bad sizeof(VideoSourceProvider_GetVideoSource_Params_Data)");
class  VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data));
      new (data()) VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data>(index_);
    }
    VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureDeviceInfo_Data> device_info;
  mojo::internal::Interface_Data producer;
  uint8_t send_buffer_handles_to_producer_as_raw_file_descriptors : 1;
  uint8_t pad2_[3];
  mojo::internal::Handle_Data virtual_device_receiver;

 private:
  VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data();
  ~VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data() = delete;
};
static_assert(sizeof(VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data) == 32,
              "Bad sizeof(VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data)");
class  VideoSourceProvider_AddTextureVirtualDevice_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(VideoSourceProvider_AddTextureVirtualDevice_Params_Data));
      new (data()) VideoSourceProvider_AddTextureVirtualDevice_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    VideoSourceProvider_AddTextureVirtualDevice_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<VideoSourceProvider_AddTextureVirtualDevice_Params_Data>(index_);
    }
    VideoSourceProvider_AddTextureVirtualDevice_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureDeviceInfo_Data> device_info;
  mojo::internal::Handle_Data virtual_device_receiver;
  uint8_t padfinal_[4];

 private:
  VideoSourceProvider_AddTextureVirtualDevice_Params_Data();
  ~VideoSourceProvider_AddTextureVirtualDevice_Params_Data() = delete;
};
static_assert(sizeof(VideoSourceProvider_AddTextureVirtualDevice_Params_Data) == 24,
              "Bad sizeof(VideoSourceProvider_AddTextureVirtualDevice_Params_Data)");
class  VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data));
      new (data()) VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data>(index_);
    }
    VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;
  uint8_t raise_event_if_virtual_devices_already_present : 1;
  uint8_t padfinal_[7];

 private:
  VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data();
  ~VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data() = delete;
};
static_assert(sizeof(VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data) == 24,
              "Bad sizeof(VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data)");
class  VideoSourceProvider_Close_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(VideoSourceProvider_Close_Params_Data));
      new (data()) VideoSourceProvider_Close_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    VideoSourceProvider_Close_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<VideoSourceProvider_Close_Params_Data>(index_);
    }
    VideoSourceProvider_Close_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  VideoSourceProvider_Close_Params_Data();
  ~VideoSourceProvider_Close_Params_Data() = delete;
};
static_assert(sizeof(VideoSourceProvider_Close_Params_Data) == 8,
              "Bad sizeof(VideoSourceProvider_Close_Params_Data)");
class  VideoSourceProvider_Close_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(VideoSourceProvider_Close_ResponseParams_Data));
      new (data()) VideoSourceProvider_Close_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    VideoSourceProvider_Close_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<VideoSourceProvider_Close_ResponseParams_Data>(index_);
    }
    VideoSourceProvider_Close_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  VideoSourceProvider_Close_ResponseParams_Data();
  ~VideoSourceProvider_Close_ResponseParams_Data() = delete;
};
static_assert(sizeof(VideoSourceProvider_Close_ResponseParams_Data) == 8,
              "Bad sizeof(VideoSourceProvider_Close_ResponseParams_Data)");

}  // namespace internal
class VideoSourceProvider_GetSourceInfos_ParamsDataView {
 public:
  VideoSourceProvider_GetSourceInfos_ParamsDataView() {}

  VideoSourceProvider_GetSourceInfos_ParamsDataView(
      internal::VideoSourceProvider_GetSourceInfos_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VideoSourceProvider_GetSourceInfos_Params_Data* data_ = nullptr;
};

class VideoSourceProvider_GetSourceInfos_ResponseParamsDataView {
 public:
  VideoSourceProvider_GetSourceInfos_ResponseParamsDataView() {}

  VideoSourceProvider_GetSourceInfos_ResponseParamsDataView(
      internal::VideoSourceProvider_GetSourceInfos_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSourceInfosDataView(
      mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSourceInfos(UserType* output) {
    auto* pointer = data_->source_infos.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::VideoSourceProvider_GetSourceInfos_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class VideoSourceProvider_GetVideoSource_ParamsDataView {
 public:
  VideoSourceProvider_GetVideoSource_ParamsDataView() {}

  VideoSourceProvider_GetVideoSource_ParamsDataView(
      internal::VideoSourceProvider_GetVideoSource_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSourceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSourceId(UserType* output) {
    auto* pointer = data_->source_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeStream() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::VideoSourceInterfaceBase>>(
            &data_->stream, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::VideoSourceProvider_GetVideoSource_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class VideoSourceProvider_AddSharedMemoryVirtualDevice_ParamsDataView {
 public:
  VideoSourceProvider_AddSharedMemoryVirtualDevice_ParamsDataView() {}

  VideoSourceProvider_AddSharedMemoryVirtualDevice_ParamsDataView(
      internal::VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      ::media::mojom::VideoCaptureDeviceInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDeviceInfo(UserType* output) {
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureDeviceInfoDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeProducer() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::video_capture::mojom::ProducerInterfaceBase>>(
            &data_->producer, &result, context_);
    DCHECK(ret);
    return result;
  }
  bool send_buffer_handles_to_producer_as_raw_file_descriptors() const {
    return data_->send_buffer_handles_to_producer_as_raw_file_descriptors;
  }
  template <typename UserType>
  UserType TakeVirtualDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::SharedMemoryVirtualDeviceInterfaceBase>>(
            &data_->virtual_device_receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::VideoSourceProvider_AddSharedMemoryVirtualDevice_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class VideoSourceProvider_AddTextureVirtualDevice_ParamsDataView {
 public:
  VideoSourceProvider_AddTextureVirtualDevice_ParamsDataView() {}

  VideoSourceProvider_AddTextureVirtualDevice_ParamsDataView(
      internal::VideoSourceProvider_AddTextureVirtualDevice_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      ::media::mojom::VideoCaptureDeviceInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDeviceInfo(UserType* output) {
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureDeviceInfoDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeVirtualDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::TextureVirtualDeviceInterfaceBase>>(
            &data_->virtual_device_receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::VideoSourceProvider_AddTextureVirtualDevice_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class VideoSourceProvider_RegisterVirtualDevicesChangedObserver_ParamsDataView {
 public:
  VideoSourceProvider_RegisterVirtualDevicesChangedObserver_ParamsDataView() {}

  VideoSourceProvider_RegisterVirtualDevicesChangedObserver_ParamsDataView(
      internal::VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::video_capture::mojom::DevicesChangedObserverInterfaceBase>>(
            &data_->observer, &result, context_);
    DCHECK(ret);
    return result;
  }
  bool raise_event_if_virtual_devices_already_present() const {
    return data_->raise_event_if_virtual_devices_already_present;
  }
 private:
  internal::VideoSourceProvider_RegisterVirtualDevicesChangedObserver_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class VideoSourceProvider_Close_ParamsDataView {
 public:
  VideoSourceProvider_Close_ParamsDataView() {}

  VideoSourceProvider_Close_ParamsDataView(
      internal::VideoSourceProvider_Close_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VideoSourceProvider_Close_Params_Data* data_ = nullptr;
};

class VideoSourceProvider_Close_ResponseParamsDataView {
 public:
  VideoSourceProvider_Close_ResponseParamsDataView() {}

  VideoSourceProvider_Close_ResponseParamsDataView(
      internal::VideoSourceProvider_Close_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VideoSourceProvider_Close_ResponseParams_Data* data_ = nullptr;
};




inline void VideoSourceProvider_GetSourceInfos_ResponseParamsDataView::GetSourceInfosDataView(
    mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>* output) {
  auto pointer = data_->source_infos.Get();
  *output = mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>(pointer, context_);
}


inline void VideoSourceProvider_GetVideoSource_ParamsDataView::GetSourceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->source_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void VideoSourceProvider_AddSharedMemoryVirtualDevice_ParamsDataView::GetDeviceInfoDataView(
    ::media::mojom::VideoCaptureDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = ::media::mojom::VideoCaptureDeviceInfoDataView(pointer, context_);
}


inline void VideoSourceProvider_AddTextureVirtualDevice_ParamsDataView::GetDeviceInfoDataView(
    ::media::mojom::VideoCaptureDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = ::media::mojom::VideoCaptureDeviceInfoDataView(pointer, context_);
}







}  // namespace mojom
}  // namespace video_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_SOURCE_PROVIDER_MOJOM_PARAMS_DATA_H_