// services/video_capture/public/mojom/video_frame_handler.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/video_capture/public/mojom/video_frame_handler.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "media/capture/mojom/video_capture_types.mojom.h"
#include "services/video_capture/public/mojom/scoped_access_permission.mojom.h"


#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_JUMBO_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_JUMBO_H_
#include "gpu/ipc/common/mailbox_holder_mojom_traits.h"
#include "gpu/ipc/common/mailbox_mojom_traits.h"
#include "gpu/ipc/common/sync_token_mojom_traits.h"
#include "media/capture/mojom/video_capture_types_mojom_traits.h"
#include "mojo/public/cpp/base/shared_memory_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/values_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "ui/gfx/mojom/buffer_types_mojom_traits.h"
#include "ui/gfx/mojom/color_space_mojom_traits.h"
#endif


namespace video_capture {
namespace mojom {


void VideoFrameHandlerInterceptorForTesting::OnNewBuffer(int32_t buffer_id, ::media::mojom::VideoBufferHandlePtr buffer_handle) {
  GetForwardingInterface()->OnNewBuffer(std::move(buffer_id), std::move(buffer_handle));
}
void VideoFrameHandlerInterceptorForTesting::OnFrameReadyInBuffer(int32_t buffer_id, int32_t frame_feedback_id, mojo::PendingRemote<::video_capture::mojom::ScopedAccessPermission> access_permission, ::media::mojom::VideoFrameInfoPtr frame_info) {
  GetForwardingInterface()->OnFrameReadyInBuffer(std::move(buffer_id), std::move(frame_feedback_id), std::move(access_permission), std::move(frame_info));
}
void VideoFrameHandlerInterceptorForTesting::OnBufferRetired(int32_t buffer_id) {
  GetForwardingInterface()->OnBufferRetired(std::move(buffer_id));
}
void VideoFrameHandlerInterceptorForTesting::OnError(::media::VideoCaptureError error) {
  GetForwardingInterface()->OnError(std::move(error));
}
void VideoFrameHandlerInterceptorForTesting::OnFrameDropped(::media::VideoCaptureFrameDropReason reason) {
  GetForwardingInterface()->OnFrameDropped(std::move(reason));
}
void VideoFrameHandlerInterceptorForTesting::OnLog(const std::string& message) {
  GetForwardingInterface()->OnLog(std::move(message));
}
void VideoFrameHandlerInterceptorForTesting::OnStarted() {
  GetForwardingInterface()->OnStarted();
}
void VideoFrameHandlerInterceptorForTesting::OnStartedUsingGpuDecode() {
  GetForwardingInterface()->OnStartedUsingGpuDecode();
}
void VideoFrameHandlerInterceptorForTesting::OnStopped() {
  GetForwardingInterface()->OnStopped();
}
VideoFrameHandlerAsyncWaiter::VideoFrameHandlerAsyncWaiter(
    VideoFrameHandler* proxy) : proxy_(proxy) {}

VideoFrameHandlerAsyncWaiter::~VideoFrameHandlerAsyncWaiter() = default;






}  // namespace mojom
}  // namespace video_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif