// services/media_session/public/mojom/media_session_service.mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/media_session/public/mojom/media_session_service.mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"
#include "services/media_session/public/mojom/audio_focus.mojom-blink.h"
#include "services/media_session/public/mojom/media_controller.mojom-blink.h"


#ifndef SERVICES_MEDIA_SESSION_PUBLIC_MOJOM_MEDIA_SESSION_SERVICE_MOJOM_BLINK_JUMBO_H_
#define SERVICES_MEDIA_SESSION_PUBLIC_MOJOM_MEDIA_SESSION_SERVICE_MOJOM_BLINK_JUMBO_H_
#endif


namespace media_session {
namespace mojom {
namespace blink {


void MediaSessionServiceInterceptorForTesting::BindAudioFocusManager(mojo::PendingReceiver<::media_session::mojom::blink::AudioFocusManager> receiver) {
  GetForwardingInterface()->BindAudioFocusManager(std::move(receiver));
}
void MediaSessionServiceInterceptorForTesting::BindAudioFocusManagerDebug(mojo::PendingReceiver<::media_session::mojom::blink::AudioFocusManagerDebug> receiver) {
  GetForwardingInterface()->BindAudioFocusManagerDebug(std::move(receiver));
}
void MediaSessionServiceInterceptorForTesting::BindMediaControllerManager(mojo::PendingReceiver<::media_session::mojom::blink::MediaControllerManager> receiver) {
  GetForwardingInterface()->BindMediaControllerManager(std::move(receiver));
}
MediaSessionServiceAsyncWaiter::MediaSessionServiceAsyncWaiter(
    MediaSessionService* proxy) : proxy_(proxy) {}

MediaSessionServiceAsyncWaiter::~MediaSessionServiceAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace media_session

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif