// services/content/public/mojom/navigable_contents.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_CONTENT_PUBLIC_MOJOM_NAVIGABLE_CONTENTS_MOJOM_TEST_UTILS_H_
#define SERVICES_CONTENT_PUBLIC_MOJOM_NAVIGABLE_CONTENTS_MOJOM_TEST_UTILS_H_

#include "services/content/public/mojom/navigable_contents.mojom.h"
#include "base/component_export.h"


namespace content {
namespace mojom {


class COMPONENT_EXPORT(CONTENT_SERVICE_MOJOM) NavigableContentsInterceptorForTesting : public NavigableContents {
  virtual NavigableContents* GetForwardingInterface() = 0;
  void Navigate(const ::GURL& url, NavigateParamsPtr params) override;
  void GoBack(GoBackCallback callback) override;
  void CreateView(CreateViewCallback callback) override;
  void Focus() override;
  void FocusThroughTabTraversal(bool reverse) override;
};
class COMPONENT_EXPORT(CONTENT_SERVICE_MOJOM) NavigableContentsAsyncWaiter {
 public:
  explicit NavigableContentsAsyncWaiter(NavigableContents* proxy);
  ~NavigableContentsAsyncWaiter();
  void GoBack(
      bool* out_success);
  void CreateView(
      ::base::UnguessableToken* out_embed_token);

 private:
  NavigableContents* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(NavigableContentsAsyncWaiter);
};


class COMPONENT_EXPORT(CONTENT_SERVICE_MOJOM) NavigableContentsClientInterceptorForTesting : public NavigableContentsClient {
  virtual NavigableContentsClient* GetForwardingInterface() = 0;
  void ClearViewFocus() override;
  void DidFinishNavigation(const ::GURL& url, bool is_main_frame, bool is_error_page, const ::scoped_refptr<::net::HttpResponseHeaders>& response_headers) override;
  void DidStopLoading() override;
  void DidAutoResizeView(const ::gfx::Size& new_size) override;
  void DidSuppressNavigation(const ::GURL& url, ::WindowOpenDisposition disposition, bool from_user_gesture) override;
  void UpdateCanGoBack(bool can_go_back) override;
  void UpdateContentAXTree(const ::ui::AXTreeID& id) override;
  void FocusedNodeChanged(bool is_editable_node, const ::gfx::Rect& node_bounds_in_screen) override;
};
class COMPONENT_EXPORT(CONTENT_SERVICE_MOJOM) NavigableContentsClientAsyncWaiter {
 public:
  explicit NavigableContentsClientAsyncWaiter(NavigableContentsClient* proxy);
  ~NavigableContentsClientAsyncWaiter();

 private:
  NavigableContentsClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(NavigableContentsClientAsyncWaiter);
};




}  // namespace mojom
}  // namespace content

#endif  // SERVICES_CONTENT_PUBLIC_MOJOM_NAVIGABLE_CONTENTS_MOJOM_TEST_UTILS_H_