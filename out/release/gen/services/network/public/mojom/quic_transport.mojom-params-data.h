// services/network/public/mojom/quic_transport.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_QUIC_TRANSPORT_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_QUIC_TRANSPORT_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace network {
namespace mojom {
namespace internal {
class  QuicTransport_SendDatagram_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransport_SendDatagram_Params_Data));
      new (data()) QuicTransport_SendDatagram_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransport_SendDatagram_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransport_SendDatagram_Params_Data>(index_);
    }
    QuicTransport_SendDatagram_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyBuffer_Data> data;

 private:
  QuicTransport_SendDatagram_Params_Data();
  ~QuicTransport_SendDatagram_Params_Data() = delete;
};
static_assert(sizeof(QuicTransport_SendDatagram_Params_Data) == 16,
              "Bad sizeof(QuicTransport_SendDatagram_Params_Data)");
class  QuicTransport_SendDatagram_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransport_SendDatagram_ResponseParams_Data));
      new (data()) QuicTransport_SendDatagram_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransport_SendDatagram_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransport_SendDatagram_ResponseParams_Data>(index_);
    }
    QuicTransport_SendDatagram_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t result : 1;
  uint8_t padfinal_[7];

 private:
  QuicTransport_SendDatagram_ResponseParams_Data();
  ~QuicTransport_SendDatagram_ResponseParams_Data() = delete;
};
static_assert(sizeof(QuicTransport_SendDatagram_ResponseParams_Data) == 16,
              "Bad sizeof(QuicTransport_SendDatagram_ResponseParams_Data)");
class  QuicTransport_CreateStream_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransport_CreateStream_Params_Data));
      new (data()) QuicTransport_CreateStream_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransport_CreateStream_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransport_CreateStream_Params_Data>(index_);
    }
    QuicTransport_CreateStream_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data readable;
  mojo::internal::Handle_Data writable;

 private:
  QuicTransport_CreateStream_Params_Data();
  ~QuicTransport_CreateStream_Params_Data() = delete;
};
static_assert(sizeof(QuicTransport_CreateStream_Params_Data) == 16,
              "Bad sizeof(QuicTransport_CreateStream_Params_Data)");
class  QuicTransport_CreateStream_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransport_CreateStream_ResponseParams_Data));
      new (data()) QuicTransport_CreateStream_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransport_CreateStream_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransport_CreateStream_ResponseParams_Data>(index_);
    }
    QuicTransport_CreateStream_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t succeeded : 1;
  uint8_t pad0_[3];
  uint32_t stream_id;

 private:
  QuicTransport_CreateStream_ResponseParams_Data();
  ~QuicTransport_CreateStream_ResponseParams_Data() = delete;
};
static_assert(sizeof(QuicTransport_CreateStream_ResponseParams_Data) == 16,
              "Bad sizeof(QuicTransport_CreateStream_ResponseParams_Data)");
class  QuicTransport_AcceptBidirectionalStream_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransport_AcceptBidirectionalStream_Params_Data));
      new (data()) QuicTransport_AcceptBidirectionalStream_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransport_AcceptBidirectionalStream_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransport_AcceptBidirectionalStream_Params_Data>(index_);
    }
    QuicTransport_AcceptBidirectionalStream_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  QuicTransport_AcceptBidirectionalStream_Params_Data();
  ~QuicTransport_AcceptBidirectionalStream_Params_Data() = delete;
};
static_assert(sizeof(QuicTransport_AcceptBidirectionalStream_Params_Data) == 8,
              "Bad sizeof(QuicTransport_AcceptBidirectionalStream_Params_Data)");
class  QuicTransport_AcceptBidirectionalStream_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransport_AcceptBidirectionalStream_ResponseParams_Data));
      new (data()) QuicTransport_AcceptBidirectionalStream_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransport_AcceptBidirectionalStream_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransport_AcceptBidirectionalStream_ResponseParams_Data>(index_);
    }
    QuicTransport_AcceptBidirectionalStream_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  mojo::internal::Handle_Data readable;
  mojo::internal::Handle_Data writable;
  uint8_t padfinal_[4];

 private:
  QuicTransport_AcceptBidirectionalStream_ResponseParams_Data();
  ~QuicTransport_AcceptBidirectionalStream_ResponseParams_Data() = delete;
};
static_assert(sizeof(QuicTransport_AcceptBidirectionalStream_ResponseParams_Data) == 24,
              "Bad sizeof(QuicTransport_AcceptBidirectionalStream_ResponseParams_Data)");
class  QuicTransport_AcceptUnidirectionalStream_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransport_AcceptUnidirectionalStream_Params_Data));
      new (data()) QuicTransport_AcceptUnidirectionalStream_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransport_AcceptUnidirectionalStream_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransport_AcceptUnidirectionalStream_Params_Data>(index_);
    }
    QuicTransport_AcceptUnidirectionalStream_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  QuicTransport_AcceptUnidirectionalStream_Params_Data();
  ~QuicTransport_AcceptUnidirectionalStream_Params_Data() = delete;
};
static_assert(sizeof(QuicTransport_AcceptUnidirectionalStream_Params_Data) == 8,
              "Bad sizeof(QuicTransport_AcceptUnidirectionalStream_Params_Data)");
class  QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data));
      new (data()) QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data>(index_);
    }
    QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  mojo::internal::Handle_Data readable;

 private:
  QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data();
  ~QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data() = delete;
};
static_assert(sizeof(QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data) == 16,
              "Bad sizeof(QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data)");
class  QuicTransport_SendFin_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransport_SendFin_Params_Data));
      new (data()) QuicTransport_SendFin_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransport_SendFin_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransport_SendFin_Params_Data>(index_);
    }
    QuicTransport_SendFin_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  uint8_t padfinal_[4];

 private:
  QuicTransport_SendFin_Params_Data();
  ~QuicTransport_SendFin_Params_Data() = delete;
};
static_assert(sizeof(QuicTransport_SendFin_Params_Data) == 16,
              "Bad sizeof(QuicTransport_SendFin_Params_Data)");
class  QuicTransportClient_OnDatagramReceived_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransportClient_OnDatagramReceived_Params_Data));
      new (data()) QuicTransportClient_OnDatagramReceived_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransportClient_OnDatagramReceived_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransportClient_OnDatagramReceived_Params_Data>(index_);
    }
    QuicTransportClient_OnDatagramReceived_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyBuffer_Data> data;

 private:
  QuicTransportClient_OnDatagramReceived_Params_Data();
  ~QuicTransportClient_OnDatagramReceived_Params_Data() = delete;
};
static_assert(sizeof(QuicTransportClient_OnDatagramReceived_Params_Data) == 16,
              "Bad sizeof(QuicTransportClient_OnDatagramReceived_Params_Data)");
class  QuicTransportClient_OnIncomingStreamClosed_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransportClient_OnIncomingStreamClosed_Params_Data));
      new (data()) QuicTransportClient_OnIncomingStreamClosed_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransportClient_OnIncomingStreamClosed_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransportClient_OnIncomingStreamClosed_Params_Data>(index_);
    }
    QuicTransportClient_OnIncomingStreamClosed_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t stream_id;
  uint8_t fin_received : 1;
  uint8_t padfinal_[3];

 private:
  QuicTransportClient_OnIncomingStreamClosed_Params_Data();
  ~QuicTransportClient_OnIncomingStreamClosed_Params_Data() = delete;
};
static_assert(sizeof(QuicTransportClient_OnIncomingStreamClosed_Params_Data) == 16,
              "Bad sizeof(QuicTransportClient_OnIncomingStreamClosed_Params_Data)");
class  QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data));
      new (data()) QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data>(index_);
    }
    QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data transport;
  mojo::internal::Handle_Data client;
  uint8_t padfinal_[4];

 private:
  QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data();
  ~QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data() = delete;
};
static_assert(sizeof(QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data) == 24,
              "Bad sizeof(QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data)");
class  QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data));
      new (data()) QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data>(index_);
    }
    QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data();
  ~QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data() = delete;
};
static_assert(sizeof(QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data) == 8,
              "Bad sizeof(QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data)");

}  // namespace internal
class QuicTransport_SendDatagram_ParamsDataView {
 public:
  QuicTransport_SendDatagram_ParamsDataView() {}

  QuicTransport_SendDatagram_ParamsDataView(
      internal::QuicTransport_SendDatagram_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::ReadOnlyBufferDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyBufferDataView>(
        pointer, output, context_);
  }
 private:
  internal::QuicTransport_SendDatagram_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class QuicTransport_SendDatagram_ResponseParamsDataView {
 public:
  QuicTransport_SendDatagram_ResponseParamsDataView() {}

  QuicTransport_SendDatagram_ResponseParamsDataView(
      internal::QuicTransport_SendDatagram_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool result() const {
    return data_->result;
  }
 private:
  internal::QuicTransport_SendDatagram_ResponseParams_Data* data_ = nullptr;
};

class QuicTransport_CreateStream_ParamsDataView {
 public:
  QuicTransport_CreateStream_ParamsDataView() {}

  QuicTransport_CreateStream_ParamsDataView(
      internal::QuicTransport_CreateStream_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  mojo::ScopedDataPipeConsumerHandle TakeReadable() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->readable, &result, context_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedDataPipeProducerHandle TakeWritable() {
    mojo::ScopedDataPipeProducerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeProducerHandle>(
            &data_->writable, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::QuicTransport_CreateStream_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class QuicTransport_CreateStream_ResponseParamsDataView {
 public:
  QuicTransport_CreateStream_ResponseParamsDataView() {}

  QuicTransport_CreateStream_ResponseParamsDataView(
      internal::QuicTransport_CreateStream_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool succeeded() const {
    return data_->succeeded;
  }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
 private:
  internal::QuicTransport_CreateStream_ResponseParams_Data* data_ = nullptr;
};

class QuicTransport_AcceptBidirectionalStream_ParamsDataView {
 public:
  QuicTransport_AcceptBidirectionalStream_ParamsDataView() {}

  QuicTransport_AcceptBidirectionalStream_ParamsDataView(
      internal::QuicTransport_AcceptBidirectionalStream_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::QuicTransport_AcceptBidirectionalStream_Params_Data* data_ = nullptr;
};

class QuicTransport_AcceptBidirectionalStream_ResponseParamsDataView {
 public:
  QuicTransport_AcceptBidirectionalStream_ResponseParamsDataView() {}

  QuicTransport_AcceptBidirectionalStream_ResponseParamsDataView(
      internal::QuicTransport_AcceptBidirectionalStream_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
  mojo::ScopedDataPipeConsumerHandle TakeReadable() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->readable, &result, context_);
    DCHECK(ret);
    return result;
  }
  mojo::ScopedDataPipeProducerHandle TakeWritable() {
    mojo::ScopedDataPipeProducerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeProducerHandle>(
            &data_->writable, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::QuicTransport_AcceptBidirectionalStream_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class QuicTransport_AcceptUnidirectionalStream_ParamsDataView {
 public:
  QuicTransport_AcceptUnidirectionalStream_ParamsDataView() {}

  QuicTransport_AcceptUnidirectionalStream_ParamsDataView(
      internal::QuicTransport_AcceptUnidirectionalStream_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::QuicTransport_AcceptUnidirectionalStream_Params_Data* data_ = nullptr;
};

class QuicTransport_AcceptUnidirectionalStream_ResponseParamsDataView {
 public:
  QuicTransport_AcceptUnidirectionalStream_ResponseParamsDataView() {}

  QuicTransport_AcceptUnidirectionalStream_ResponseParamsDataView(
      internal::QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
  mojo::ScopedDataPipeConsumerHandle TakeReadable() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->readable, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::QuicTransport_AcceptUnidirectionalStream_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class QuicTransport_SendFin_ParamsDataView {
 public:
  QuicTransport_SendFin_ParamsDataView() {}

  QuicTransport_SendFin_ParamsDataView(
      internal::QuicTransport_SendFin_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
 private:
  internal::QuicTransport_SendFin_Params_Data* data_ = nullptr;
};

class QuicTransportClient_OnDatagramReceived_ParamsDataView {
 public:
  QuicTransportClient_OnDatagramReceived_ParamsDataView() {}

  QuicTransportClient_OnDatagramReceived_ParamsDataView(
      internal::QuicTransportClient_OnDatagramReceived_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::ReadOnlyBufferDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyBufferDataView>(
        pointer, output, context_);
  }
 private:
  internal::QuicTransportClient_OnDatagramReceived_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class QuicTransportClient_OnIncomingStreamClosed_ParamsDataView {
 public:
  QuicTransportClient_OnIncomingStreamClosed_ParamsDataView() {}

  QuicTransportClient_OnIncomingStreamClosed_ParamsDataView(
      internal::QuicTransportClient_OnIncomingStreamClosed_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t stream_id() const {
    return data_->stream_id;
  }
  bool fin_received() const {
    return data_->fin_received;
  }
 private:
  internal::QuicTransportClient_OnIncomingStreamClosed_Params_Data* data_ = nullptr;
};

class QuicTransportHandshakeClient_OnConnectionEstablished_ParamsDataView {
 public:
  QuicTransportHandshakeClient_OnConnectionEstablished_ParamsDataView() {}

  QuicTransportHandshakeClient_OnConnectionEstablished_ParamsDataView(
      internal::QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeTransport() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::QuicTransportInterfaceBase>>(
            &data_->transport, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::QuicTransportClientInterfaceBase>>(
            &data_->client, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::QuicTransportHandshakeClient_OnConnectionEstablished_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class QuicTransportHandshakeClient_OnHandshakeFailed_ParamsDataView {
 public:
  QuicTransportHandshakeClient_OnHandshakeFailed_ParamsDataView() {}

  QuicTransportHandshakeClient_OnHandshakeFailed_ParamsDataView(
      internal::QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::QuicTransportHandshakeClient_OnHandshakeFailed_Params_Data* data_ = nullptr;
};


inline void QuicTransport_SendDatagram_ParamsDataView::GetDataDataView(
    ::mojo_base::mojom::ReadOnlyBufferDataView* output) {
  auto pointer = data_->data.Get();
  *output = ::mojo_base::mojom::ReadOnlyBufferDataView(pointer, context_);
}


















inline void QuicTransportClient_OnDatagramReceived_ParamsDataView::GetDataDataView(
    ::mojo_base::mojom::ReadOnlyBufferDataView* output) {
  auto pointer = data_->data.Get();
  *output = ::mojo_base::mojom::ReadOnlyBufferDataView(pointer, context_);
}







}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_QUIC_TRANSPORT_MOJOM_PARAMS_DATA_H_