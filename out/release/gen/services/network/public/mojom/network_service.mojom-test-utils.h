// services/network/public/mojom/network_service.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_TEST_UTILS_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_TEST_UTILS_H_

#include "services/network/public/mojom/network_service.mojom.h"


namespace network {
namespace mojom {


class  NetworkServiceClientInterceptorForTesting : public NetworkServiceClient {
  virtual NetworkServiceClient* GetForwardingInterface() = 0;
  void OnLoadingStateUpdate(std::vector<LoadInfoPtr> infos, OnLoadingStateUpdateCallback callback) override;
  void OnDataUseUpdate(int32_t network_traffic_annotation_id_hash, int64_t recv_bytes, int64_t sent_bytes) override;
  void OnRawRequest(int32_t process_id, int32_t routing_id, const std::string& devtool_request_id, const std::vector<::net::CookieWithStatus>& cookies_with_status, std::vector<::network::mojom::HttpRawHeaderPairPtr> headers) override;
  void OnRawResponse(int32_t process_id, int32_t routing_id, const std::string& devtool_request_id, const std::vector<::net::CookieAndLineWithStatus>& cookies_with_status, std::vector<::network::mojom::HttpRawHeaderPairPtr> headers, const base::Optional<std::string>& raw_response_headers) override;
};
class  NetworkServiceClientAsyncWaiter {
 public:
  explicit NetworkServiceClientAsyncWaiter(NetworkServiceClient* proxy);
  ~NetworkServiceClientAsyncWaiter();
  void OnLoadingStateUpdate(
      std::vector<LoadInfoPtr> infos);

 private:
  NetworkServiceClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(NetworkServiceClientAsyncWaiter);
};


class  NetworkServiceInterceptorForTesting : public NetworkService {
  virtual NetworkService* GetForwardingInterface() = 0;
  void SetClient(mojo::PendingRemote<NetworkServiceClient> client, NetworkServiceParamsPtr params) override;
  void StartNetLog(::base::File file, ::net::NetLogCaptureMode capture_mode, ::base::Value constants) override;
  void SetSSLKeyLogFile(::base::File file) override;
  void CreateNetworkContext(mojo::PendingReceiver<::network::mojom::NetworkContext> context, ::network::mojom::NetworkContextParamsPtr params) override;
  void ConfigureStubHostResolver(bool insecure_dns_client_enabled, ::net::DnsConfig::SecureDnsMode secure_dns_mode, base::Optional<std::vector<::network::mojom::DnsOverHttpsServerPtr>> dns_over_https_servers) override;
  void DisableQuic() override;
  void SetUpHttpAuth(HttpAuthStaticParamsPtr http_auth_static_params) override;
  void ConfigureHttpAuthPrefs(HttpAuthDynamicParamsPtr http_auth_dynamic_params) override;
  void SetRawHeadersAccess(int32_t process_id, const std::vector<::url::Origin>& origins) override;
  void SetMaxConnectionsPerProxy(int32_t max_connections) override;
  void GetNetworkChangeManager(mojo::PendingReceiver<::network::mojom::NetworkChangeManager> network_change_manager) override;
  void GetNetworkQualityEstimatorManager(mojo::PendingReceiver<::network::mojom::NetworkQualityEstimatorManager> receiver) override;
  void GetDnsConfigChangeManager(mojo::PendingReceiver<::network::mojom::DnsConfigChangeManager> receiver) override;
  void GetTotalNetworkUsages(GetTotalNetworkUsagesCallback callback) override;
  void GetNetworkList(uint32_t policy, GetNetworkListCallback callback) override;
  void UpdateCRLSet(::base::span<const ::uint8_t> crl_set, UpdateCRLSetCallback callback) override;
  void UpdateLegacyTLSConfig(::base::span<const ::uint8_t> config, UpdateLegacyTLSConfigCallback callback) override;
  void OnCertDBChanged() override;
  void AddCorbExceptionForPlugin(int32_t process_id) override;
  void RemoveCorbExceptionForPlugin(int32_t process_id) override;
  void OnMemoryPressure(::base::MemoryPressureListener::MemoryPressureLevel memory_pressure_level) override;
  void OnPeerToPeerConnectionsCountChange(uint32_t count) override;
  void OnApplicationStateChange(::base::android::ApplicationState state) override;
  void SetEnvironment(std::vector<EnvironmentVariablePtr> environment) override;
  void DumpWithoutCrashing(::base::Time dump_request_time) override;
  void BindTestInterface(mojo::PendingReceiver<::network::mojom::NetworkServiceTest> receiver) override;
};
class  NetworkServiceAsyncWaiter {
 public:
  explicit NetworkServiceAsyncWaiter(NetworkService* proxy);
  ~NetworkServiceAsyncWaiter();
  void GetTotalNetworkUsages(
      std::vector<::network::mojom::NetworkUsagePtr>* out_total_network_usages);
  void GetNetworkList(
      uint32_t policy, base::Optional<std::vector<::net::NetworkInterface>>* out_networks);
  void UpdateCRLSet(
      ::base::span<const ::uint8_t> crl_set);
  void UpdateLegacyTLSConfig(
      ::base::span<const ::uint8_t> config);

 private:
  NetworkService* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(NetworkServiceAsyncWaiter);
};




}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_TEST_UTILS_H_