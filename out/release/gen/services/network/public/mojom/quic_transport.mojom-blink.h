// services/network/public/mojom/quic_transport.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_QUIC_TRANSPORT_MOJOM_BLINK_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_QUIC_TRANSPORT_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "services/network/public/mojom/quic_transport.mojom-shared.h"
#include "services/network/public/mojom/quic_transport.mojom-blink-forward.h"
#include "mojo/public/mojom/base/read_only_buffer.mojom-blink-forward.h"
#include "url/mojom/url.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"


#include "third_party/blink/public/platform/web_common.h"




namespace network {
namespace mojom {
namespace blink {

class QuicTransportProxy;

template <typename ImplRefTraits>
class QuicTransportStub;

class QuicTransportRequestValidator;
class QuicTransportResponseValidator;


class BLINK_PLATFORM_EXPORT QuicTransport
    : public QuicTransportInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = QuicTransportInterfaceBase;
  using Proxy_ = QuicTransportProxy;

  template <typename ImplRefTraits>
  using Stub_ = QuicTransportStub<ImplRefTraits>;

  using RequestValidator_ = QuicTransportRequestValidator;
  using ResponseValidator_ = QuicTransportResponseValidator;
  enum MethodMinVersions : uint32_t {
    kSendDatagramMinVersion = 0,
    kCreateStreamMinVersion = 0,
    kAcceptBidirectionalStreamMinVersion = 0,
    kAcceptUnidirectionalStreamMinVersion = 0,
    kSendFinMinVersion = 0,
  };
  virtual ~QuicTransport() {}


  using SendDatagramCallback = base::OnceCallback<void(bool)>;
  
  virtual void SendDatagram(::base::span<const ::uint8_t> data, SendDatagramCallback callback) = 0;


  using CreateStreamCallback = base::OnceCallback<void(bool, uint32_t)>;
  
  virtual void CreateStream(mojo::ScopedDataPipeConsumerHandle readable, mojo::ScopedDataPipeProducerHandle writable, CreateStreamCallback callback) = 0;


  using AcceptBidirectionalStreamCallback = base::OnceCallback<void(uint32_t, mojo::ScopedDataPipeConsumerHandle, mojo::ScopedDataPipeProducerHandle)>;
  
  virtual void AcceptBidirectionalStream(AcceptBidirectionalStreamCallback callback) = 0;


  using AcceptUnidirectionalStreamCallback = base::OnceCallback<void(uint32_t, mojo::ScopedDataPipeConsumerHandle)>;
  
  virtual void AcceptUnidirectionalStream(AcceptUnidirectionalStreamCallback callback) = 0;

  
  virtual void SendFin(uint32_t stream_id) = 0;
};

class QuicTransportClientProxy;

template <typename ImplRefTraits>
class QuicTransportClientStub;

class QuicTransportClientRequestValidator;


class BLINK_PLATFORM_EXPORT QuicTransportClient
    : public QuicTransportClientInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = QuicTransportClientInterfaceBase;
  using Proxy_ = QuicTransportClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = QuicTransportClientStub<ImplRefTraits>;

  using RequestValidator_ = QuicTransportClientRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnDatagramReceivedMinVersion = 0,
    kOnIncomingStreamClosedMinVersion = 0,
  };
  virtual ~QuicTransportClient() {}

  
  virtual void OnDatagramReceived(::base::span<const ::uint8_t> data) = 0;

  
  virtual void OnIncomingStreamClosed(uint32_t stream_id, bool fin_received) = 0;
};

class QuicTransportHandshakeClientProxy;

template <typename ImplRefTraits>
class QuicTransportHandshakeClientStub;

class QuicTransportHandshakeClientRequestValidator;


class BLINK_PLATFORM_EXPORT QuicTransportHandshakeClient
    : public QuicTransportHandshakeClientInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = QuicTransportHandshakeClientInterfaceBase;
  using Proxy_ = QuicTransportHandshakeClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = QuicTransportHandshakeClientStub<ImplRefTraits>;

  using RequestValidator_ = QuicTransportHandshakeClientRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnConnectionEstablishedMinVersion = 0,
    kOnHandshakeFailedMinVersion = 0,
  };
  virtual ~QuicTransportHandshakeClient() {}

  
  virtual void OnConnectionEstablished(mojo::PendingRemote<QuicTransport> transport, mojo::PendingReceiver<QuicTransportClient> client) = 0;

  
  virtual void OnHandshakeFailed() = 0;
};



class BLINK_PLATFORM_EXPORT QuicTransportProxy
    : public QuicTransport {
 public:
  using InterfaceType = QuicTransport;

  explicit QuicTransportProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void SendDatagram(::base::span<const ::uint8_t> data, SendDatagramCallback callback) final;
  
  void CreateStream(mojo::ScopedDataPipeConsumerHandle readable, mojo::ScopedDataPipeProducerHandle writable, CreateStreamCallback callback) final;
  
  void AcceptBidirectionalStream(AcceptBidirectionalStreamCallback callback) final;
  
  void AcceptUnidirectionalStream(AcceptUnidirectionalStreamCallback callback) final;
  
  void SendFin(uint32_t stream_id) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_PLATFORM_EXPORT QuicTransportClientProxy
    : public QuicTransportClient {
 public:
  using InterfaceType = QuicTransportClient;

  explicit QuicTransportClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnDatagramReceived(::base::span<const ::uint8_t> data) final;
  
  void OnIncomingStreamClosed(uint32_t stream_id, bool fin_received) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_PLATFORM_EXPORT QuicTransportHandshakeClientProxy
    : public QuicTransportHandshakeClient {
 public:
  using InterfaceType = QuicTransportHandshakeClient;

  explicit QuicTransportHandshakeClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnConnectionEstablished(mojo::PendingRemote<QuicTransport> transport, mojo::PendingReceiver<QuicTransportClient> client) final;
  
  void OnHandshakeFailed() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_PLATFORM_EXPORT QuicTransportStubDispatch {
 public:
  static bool Accept(QuicTransport* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      QuicTransport* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<QuicTransport>>
class QuicTransportStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  QuicTransportStub() {}
  ~QuicTransportStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return QuicTransportStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return QuicTransportStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT QuicTransportClientStubDispatch {
 public:
  static bool Accept(QuicTransportClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      QuicTransportClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<QuicTransportClient>>
class QuicTransportClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  QuicTransportClientStub() {}
  ~QuicTransportClientStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return QuicTransportClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return QuicTransportClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT QuicTransportHandshakeClientStubDispatch {
 public:
  static bool Accept(QuicTransportHandshakeClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      QuicTransportHandshakeClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<QuicTransportHandshakeClient>>
class QuicTransportHandshakeClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  QuicTransportHandshakeClientStub() {}
  ~QuicTransportHandshakeClientStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return QuicTransportHandshakeClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return QuicTransportHandshakeClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT QuicTransportRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT QuicTransportClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT QuicTransportHandshakeClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT QuicTransportResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace network

namespace mojo {

}  // namespace mojo

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_QUIC_TRANSPORT_MOJOM_BLINK_H_