// services/network/public/mojom/network_service.mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/network/public/mojom/network_service.mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"
#include "mojo/public/mojom/base/file.mojom-blink.h"
#include "mojo/public/mojom/base/file_path.mojom-blink.h"
#include "mojo/public/mojom/base/memory_pressure_level.mojom-blink.h"
#include "mojo/public/mojom/base/read_only_buffer.mojom-blink.h"
#include "mojo/public/mojom/base/string16.mojom-blink.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-blink.h"
#include "mojo/public/mojom/base/values.mojom-blink.h"
#include "services/network/public/mojom/cookie_manager.mojom-blink.h"
#include "services/network/public/mojom/host_resolver.mojom-blink.h"
#include "services/network/public/mojom/http_raw_headers.mojom-blink.h"
#include "services/network/public/mojom/net_log.mojom-blink.h"
#include "services/network/public/mojom/network_change_manager.mojom-blink.h"
#include "services/network/public/mojom/network_context.mojom-blink.h"
#include "services/network/public/mojom/network_interface.mojom-blink.h"
#include "services/network/public/mojom/network_param.mojom-blink.h"
#include "services/network/public/mojom/network_quality_estimator_manager.mojom-blink.h"
#include "services/network/public/mojom/network_service_test.mojom-blink.h"
#include "services/network/public/mojom/url_loader.mojom-blink.h"
#include "services/network/public/mojom/url_loader_factory.mojom-blink.h"
#include "url/mojom/origin.mojom-blink.h"
#include "url/mojom/url.mojom-blink.h"
#include "mojo/public/mojom/base/application_state.mojom-blink.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_BLINK_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_BLINK_JUMBO_H_
#include "mojo/public/cpp/base/big_buffer_mojom_traits.h"
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/file_path_mojom_traits.h"
#include "mojo/public/cpp/base/read_only_buffer_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "mojo/public/cpp/base/values_mojom_traits.h"
#include "services/network/public/cpp/http_request_headers_mojom_traits.h"
#include "services/network/public/cpp/ip_address_mojom_traits.h"
#include "services/network/public/cpp/mutable_network_traffic_annotation_tag_mojom_traits.h"
#include "services/network/public/cpp/network_interface_mojom_traits.h"
#include "third_party/blink/renderer/platform/cookie/canonical_cookie_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/big_string_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/security_origin_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/string16_mojom_traits.h"
#endif


namespace network {
namespace mojom {
namespace blink {


void NetworkServiceClientInterceptorForTesting::OnLoadingStateUpdate(WTF::Vector<LoadInfoPtr> infos, OnLoadingStateUpdateCallback callback) {
  GetForwardingInterface()->OnLoadingStateUpdate(std::move(infos), std::move(callback));
}
void NetworkServiceClientInterceptorForTesting::OnDataUseUpdate(int32_t network_traffic_annotation_id_hash, int64_t recv_bytes, int64_t sent_bytes) {
  GetForwardingInterface()->OnDataUseUpdate(std::move(network_traffic_annotation_id_hash), std::move(recv_bytes), std::move(sent_bytes));
}
void NetworkServiceClientInterceptorForTesting::OnRawRequest(int32_t process_id, int32_t routing_id, const WTF::String& devtool_request_id, WTF::Vector<::network::mojom::blink::CookieWithStatusPtr> cookies_with_status, WTF::Vector<::network::mojom::blink::HttpRawHeaderPairPtr> headers) {
  GetForwardingInterface()->OnRawRequest(std::move(process_id), std::move(routing_id), std::move(devtool_request_id), std::move(cookies_with_status), std::move(headers));
}
void NetworkServiceClientInterceptorForTesting::OnRawResponse(int32_t process_id, int32_t routing_id, const WTF::String& devtool_request_id, WTF::Vector<::network::mojom::blink::CookieAndLineWithStatusPtr> cookies_with_status, WTF::Vector<::network::mojom::blink::HttpRawHeaderPairPtr> headers, const WTF::String& raw_response_headers) {
  GetForwardingInterface()->OnRawResponse(std::move(process_id), std::move(routing_id), std::move(devtool_request_id), std::move(cookies_with_status), std::move(headers), std::move(raw_response_headers));
}
NetworkServiceClientAsyncWaiter::NetworkServiceClientAsyncWaiter(
    NetworkServiceClient* proxy) : proxy_(proxy) {}

NetworkServiceClientAsyncWaiter::~NetworkServiceClientAsyncWaiter() = default;

void NetworkServiceClientAsyncWaiter::OnLoadingStateUpdate(
    WTF::Vector<LoadInfoPtr> infos) {
  base::RunLoop loop;
  proxy_->OnLoadingStateUpdate(std::move(infos),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}



void NetworkServiceInterceptorForTesting::SetClient(mojo::PendingRemote<NetworkServiceClient> client, NetworkServiceParamsPtr params) {
  GetForwardingInterface()->SetClient(std::move(client), std::move(params));
}
void NetworkServiceInterceptorForTesting::StartNetLog(::base::File file, ::network::mojom::blink::NetLogCaptureMode capture_mode, ::base::Value constants) {
  GetForwardingInterface()->StartNetLog(std::move(file), std::move(capture_mode), std::move(constants));
}
void NetworkServiceInterceptorForTesting::SetSSLKeyLogFile(::base::File file) {
  GetForwardingInterface()->SetSSLKeyLogFile(std::move(file));
}
void NetworkServiceInterceptorForTesting::CreateNetworkContext(mojo::PendingReceiver<::network::mojom::blink::NetworkContext> context, ::network::mojom::blink::NetworkContextParamsPtr params) {
  GetForwardingInterface()->CreateNetworkContext(std::move(context), std::move(params));
}
void NetworkServiceInterceptorForTesting::ConfigureStubHostResolver(bool insecure_dns_client_enabled, ::network::mojom::blink::SecureDnsMode secure_dns_mode, base::Optional<WTF::Vector<::network::mojom::blink::DnsOverHttpsServerPtr>> dns_over_https_servers) {
  GetForwardingInterface()->ConfigureStubHostResolver(std::move(insecure_dns_client_enabled), std::move(secure_dns_mode), std::move(dns_over_https_servers));
}
void NetworkServiceInterceptorForTesting::DisableQuic() {
  GetForwardingInterface()->DisableQuic();
}
void NetworkServiceInterceptorForTesting::SetUpHttpAuth(HttpAuthStaticParamsPtr http_auth_static_params) {
  GetForwardingInterface()->SetUpHttpAuth(std::move(http_auth_static_params));
}
void NetworkServiceInterceptorForTesting::ConfigureHttpAuthPrefs(HttpAuthDynamicParamsPtr http_auth_dynamic_params) {
  GetForwardingInterface()->ConfigureHttpAuthPrefs(std::move(http_auth_dynamic_params));
}
void NetworkServiceInterceptorForTesting::SetRawHeadersAccess(int32_t process_id, const WTF::Vector<::scoped_refptr<const ::blink::SecurityOrigin>>& origins) {
  GetForwardingInterface()->SetRawHeadersAccess(std::move(process_id), std::move(origins));
}
void NetworkServiceInterceptorForTesting::SetMaxConnectionsPerProxy(int32_t max_connections) {
  GetForwardingInterface()->SetMaxConnectionsPerProxy(std::move(max_connections));
}
void NetworkServiceInterceptorForTesting::GetNetworkChangeManager(mojo::PendingReceiver<::network::mojom::blink::NetworkChangeManager> network_change_manager) {
  GetForwardingInterface()->GetNetworkChangeManager(std::move(network_change_manager));
}
void NetworkServiceInterceptorForTesting::GetNetworkQualityEstimatorManager(mojo::PendingReceiver<::network::mojom::blink::NetworkQualityEstimatorManager> receiver) {
  GetForwardingInterface()->GetNetworkQualityEstimatorManager(std::move(receiver));
}
void NetworkServiceInterceptorForTesting::GetDnsConfigChangeManager(mojo::PendingReceiver<::network::mojom::blink::DnsConfigChangeManager> receiver) {
  GetForwardingInterface()->GetDnsConfigChangeManager(std::move(receiver));
}
void NetworkServiceInterceptorForTesting::GetTotalNetworkUsages(GetTotalNetworkUsagesCallback callback) {
  GetForwardingInterface()->GetTotalNetworkUsages(std::move(callback));
}
void NetworkServiceInterceptorForTesting::GetNetworkList(uint32_t policy, GetNetworkListCallback callback) {
  GetForwardingInterface()->GetNetworkList(std::move(policy), std::move(callback));
}
void NetworkServiceInterceptorForTesting::UpdateCRLSet(::base::span<const ::uint8_t> crl_set, UpdateCRLSetCallback callback) {
  GetForwardingInterface()->UpdateCRLSet(std::move(crl_set), std::move(callback));
}
void NetworkServiceInterceptorForTesting::UpdateLegacyTLSConfig(::base::span<const ::uint8_t> config, UpdateLegacyTLSConfigCallback callback) {
  GetForwardingInterface()->UpdateLegacyTLSConfig(std::move(config), std::move(callback));
}
void NetworkServiceInterceptorForTesting::OnCertDBChanged() {
  GetForwardingInterface()->OnCertDBChanged();
}
void NetworkServiceInterceptorForTesting::AddCorbExceptionForPlugin(int32_t process_id) {
  GetForwardingInterface()->AddCorbExceptionForPlugin(std::move(process_id));
}
void NetworkServiceInterceptorForTesting::RemoveCorbExceptionForPlugin(int32_t process_id) {
  GetForwardingInterface()->RemoveCorbExceptionForPlugin(std::move(process_id));
}
void NetworkServiceInterceptorForTesting::OnMemoryPressure(::mojo_base::mojom::blink::MemoryPressureLevel memory_pressure_level) {
  GetForwardingInterface()->OnMemoryPressure(std::move(memory_pressure_level));
}
void NetworkServiceInterceptorForTesting::OnPeerToPeerConnectionsCountChange(uint32_t count) {
  GetForwardingInterface()->OnPeerToPeerConnectionsCountChange(std::move(count));
}
void NetworkServiceInterceptorForTesting::OnApplicationStateChange(::mojo_base::mojom::blink::ApplicationState state) {
  GetForwardingInterface()->OnApplicationStateChange(std::move(state));
}
void NetworkServiceInterceptorForTesting::SetEnvironment(WTF::Vector<EnvironmentVariablePtr> environment) {
  GetForwardingInterface()->SetEnvironment(std::move(environment));
}
void NetworkServiceInterceptorForTesting::DumpWithoutCrashing(::base::Time dump_request_time) {
  GetForwardingInterface()->DumpWithoutCrashing(std::move(dump_request_time));
}
void NetworkServiceInterceptorForTesting::BindTestInterface(mojo::PendingReceiver<::network::mojom::blink::NetworkServiceTest> receiver) {
  GetForwardingInterface()->BindTestInterface(std::move(receiver));
}
NetworkServiceAsyncWaiter::NetworkServiceAsyncWaiter(
    NetworkService* proxy) : proxy_(proxy) {}

NetworkServiceAsyncWaiter::~NetworkServiceAsyncWaiter() = default;

void NetworkServiceAsyncWaiter::GetTotalNetworkUsages(
    WTF::Vector<::network::mojom::blink::NetworkUsagePtr>* out_total_network_usages) {
  base::RunLoop loop;
  proxy_->GetTotalNetworkUsages(
      base::BindOnce(
          [](base::RunLoop* loop,
             WTF::Vector<::network::mojom::blink::NetworkUsagePtr>* out_total_network_usages
,
             WTF::Vector<::network::mojom::blink::NetworkUsagePtr> total_network_usages) {*out_total_network_usages = std::move(total_network_usages);
            loop->Quit();
          },
          &loop,
          out_total_network_usages));
  loop.Run();
}
void NetworkServiceAsyncWaiter::GetNetworkList(
    uint32_t policy, base::Optional<WTF::Vector<::net::NetworkInterface>>* out_networks) {
  base::RunLoop loop;
  proxy_->GetNetworkList(std::move(policy),
      base::BindOnce(
          [](base::RunLoop* loop,
             base::Optional<WTF::Vector<::net::NetworkInterface>>* out_networks
,
             const base::Optional<WTF::Vector<::net::NetworkInterface>>& networks) {*out_networks = std::move(networks);
            loop->Quit();
          },
          &loop,
          out_networks));
  loop.Run();
}
void NetworkServiceAsyncWaiter::UpdateCRLSet(
    ::base::span<const ::uint8_t> crl_set) {
  base::RunLoop loop;
  proxy_->UpdateCRLSet(std::move(crl_set),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void NetworkServiceAsyncWaiter::UpdateLegacyTLSConfig(
    ::base::span<const ::uint8_t> config) {
  base::RunLoop loop;
  proxy_->UpdateLegacyTLSConfig(std::move(config),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif