// services/network/public/mojom/network_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace network {
namespace mojom {
namespace internal {
class  NetworkServiceClient_OnLoadingStateUpdate_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkServiceClient_OnLoadingStateUpdate_Params_Data));
      new (data()) NetworkServiceClient_OnLoadingStateUpdate_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkServiceClient_OnLoadingStateUpdate_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkServiceClient_OnLoadingStateUpdate_Params_Data>(index_);
    }
    NetworkServiceClient_OnLoadingStateUpdate_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::LoadInfo_Data>>> infos;

 private:
  NetworkServiceClient_OnLoadingStateUpdate_Params_Data();
  ~NetworkServiceClient_OnLoadingStateUpdate_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceClient_OnLoadingStateUpdate_Params_Data) == 16,
              "Bad sizeof(NetworkServiceClient_OnLoadingStateUpdate_Params_Data)");
class  NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data));
      new (data()) NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data>(index_);
    }
    NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data();
  ~NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data)");
class  NetworkServiceClient_OnDataUseUpdate_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkServiceClient_OnDataUseUpdate_Params_Data));
      new (data()) NetworkServiceClient_OnDataUseUpdate_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkServiceClient_OnDataUseUpdate_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkServiceClient_OnDataUseUpdate_Params_Data>(index_);
    }
    NetworkServiceClient_OnDataUseUpdate_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t network_traffic_annotation_id_hash;
  uint8_t pad0_[4];
  int64_t recv_bytes;
  int64_t sent_bytes;

 private:
  NetworkServiceClient_OnDataUseUpdate_Params_Data();
  ~NetworkServiceClient_OnDataUseUpdate_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceClient_OnDataUseUpdate_Params_Data) == 32,
              "Bad sizeof(NetworkServiceClient_OnDataUseUpdate_Params_Data)");
class  NetworkServiceClient_OnRawRequest_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkServiceClient_OnRawRequest_Params_Data));
      new (data()) NetworkServiceClient_OnRawRequest_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkServiceClient_OnRawRequest_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkServiceClient_OnRawRequest_Params_Data>(index_);
    }
    NetworkServiceClient_OnRawRequest_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t process_id;
  int32_t routing_id;
  mojo::internal::Pointer<mojo::internal::String_Data> devtool_request_id;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::CookieWithStatus_Data>>> cookies_with_status;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::HttpRawHeaderPair_Data>>> headers;

 private:
  NetworkServiceClient_OnRawRequest_Params_Data();
  ~NetworkServiceClient_OnRawRequest_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceClient_OnRawRequest_Params_Data) == 40,
              "Bad sizeof(NetworkServiceClient_OnRawRequest_Params_Data)");
class  NetworkServiceClient_OnRawResponse_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkServiceClient_OnRawResponse_Params_Data));
      new (data()) NetworkServiceClient_OnRawResponse_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkServiceClient_OnRawResponse_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkServiceClient_OnRawResponse_Params_Data>(index_);
    }
    NetworkServiceClient_OnRawResponse_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t process_id;
  int32_t routing_id;
  mojo::internal::Pointer<mojo::internal::String_Data> devtool_request_id;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::CookieAndLineWithStatus_Data>>> cookies_with_status;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::HttpRawHeaderPair_Data>>> headers;
  mojo::internal::Pointer<mojo::internal::String_Data> raw_response_headers;

 private:
  NetworkServiceClient_OnRawResponse_Params_Data();
  ~NetworkServiceClient_OnRawResponse_Params_Data() = delete;
};
static_assert(sizeof(NetworkServiceClient_OnRawResponse_Params_Data) == 48,
              "Bad sizeof(NetworkServiceClient_OnRawResponse_Params_Data)");
class  NetworkService_SetClient_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_SetClient_Params_Data));
      new (data()) NetworkService_SetClient_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_SetClient_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_SetClient_Params_Data>(index_);
    }
    NetworkService_SetClient_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;
  mojo::internal::Pointer<internal::NetworkServiceParams_Data> params;

 private:
  NetworkService_SetClient_Params_Data();
  ~NetworkService_SetClient_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_SetClient_Params_Data) == 24,
              "Bad sizeof(NetworkService_SetClient_Params_Data)");
class  NetworkService_StartNetLog_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_StartNetLog_Params_Data));
      new (data()) NetworkService_StartNetLog_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_StartNetLog_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_StartNetLog_Params_Data>(index_);
    }
    NetworkService_StartNetLog_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> file;
  int32_t capture_mode;
  uint8_t pad1_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::DictionaryValue_Data> constants;

 private:
  NetworkService_StartNetLog_Params_Data();
  ~NetworkService_StartNetLog_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_StartNetLog_Params_Data) == 32,
              "Bad sizeof(NetworkService_StartNetLog_Params_Data)");
class  NetworkService_SetSSLKeyLogFile_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_SetSSLKeyLogFile_Params_Data));
      new (data()) NetworkService_SetSSLKeyLogFile_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_SetSSLKeyLogFile_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_SetSSLKeyLogFile_Params_Data>(index_);
    }
    NetworkService_SetSSLKeyLogFile_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> file;

 private:
  NetworkService_SetSSLKeyLogFile_Params_Data();
  ~NetworkService_SetSSLKeyLogFile_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_SetSSLKeyLogFile_Params_Data) == 16,
              "Bad sizeof(NetworkService_SetSSLKeyLogFile_Params_Data)");
class  NetworkService_CreateNetworkContext_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_CreateNetworkContext_Params_Data));
      new (data()) NetworkService_CreateNetworkContext_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_CreateNetworkContext_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_CreateNetworkContext_Params_Data>(index_);
    }
    NetworkService_CreateNetworkContext_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data context;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::network::mojom::internal::NetworkContextParams_Data> params;

 private:
  NetworkService_CreateNetworkContext_Params_Data();
  ~NetworkService_CreateNetworkContext_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateNetworkContext_Params_Data) == 24,
              "Bad sizeof(NetworkService_CreateNetworkContext_Params_Data)");
class  NetworkService_ConfigureStubHostResolver_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_ConfigureStubHostResolver_Params_Data));
      new (data()) NetworkService_ConfigureStubHostResolver_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_ConfigureStubHostResolver_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_ConfigureStubHostResolver_Params_Data>(index_);
    }
    NetworkService_ConfigureStubHostResolver_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t insecure_dns_client_enabled : 1;
  uint8_t pad0_[3];
  int32_t secure_dns_mode;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::DnsOverHttpsServer_Data>>> dns_over_https_servers;

 private:
  NetworkService_ConfigureStubHostResolver_Params_Data();
  ~NetworkService_ConfigureStubHostResolver_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_ConfigureStubHostResolver_Params_Data) == 24,
              "Bad sizeof(NetworkService_ConfigureStubHostResolver_Params_Data)");
class  NetworkService_DisableQuic_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_DisableQuic_Params_Data));
      new (data()) NetworkService_DisableQuic_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_DisableQuic_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_DisableQuic_Params_Data>(index_);
    }
    NetworkService_DisableQuic_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  NetworkService_DisableQuic_Params_Data();
  ~NetworkService_DisableQuic_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_DisableQuic_Params_Data) == 8,
              "Bad sizeof(NetworkService_DisableQuic_Params_Data)");
class  NetworkService_SetUpHttpAuth_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_SetUpHttpAuth_Params_Data));
      new (data()) NetworkService_SetUpHttpAuth_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_SetUpHttpAuth_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_SetUpHttpAuth_Params_Data>(index_);
    }
    NetworkService_SetUpHttpAuth_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::HttpAuthStaticParams_Data> http_auth_static_params;

 private:
  NetworkService_SetUpHttpAuth_Params_Data();
  ~NetworkService_SetUpHttpAuth_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_SetUpHttpAuth_Params_Data) == 16,
              "Bad sizeof(NetworkService_SetUpHttpAuth_Params_Data)");
class  NetworkService_ConfigureHttpAuthPrefs_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_ConfigureHttpAuthPrefs_Params_Data));
      new (data()) NetworkService_ConfigureHttpAuthPrefs_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_ConfigureHttpAuthPrefs_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_ConfigureHttpAuthPrefs_Params_Data>(index_);
    }
    NetworkService_ConfigureHttpAuthPrefs_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::HttpAuthDynamicParams_Data> http_auth_dynamic_params;

 private:
  NetworkService_ConfigureHttpAuthPrefs_Params_Data();
  ~NetworkService_ConfigureHttpAuthPrefs_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_ConfigureHttpAuthPrefs_Params_Data) == 16,
              "Bad sizeof(NetworkService_ConfigureHttpAuthPrefs_Params_Data)");
class  NetworkService_SetRawHeadersAccess_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_SetRawHeadersAccess_Params_Data));
      new (data()) NetworkService_SetRawHeadersAccess_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_SetRawHeadersAccess_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_SetRawHeadersAccess_Params_Data>(index_);
    }
    NetworkService_SetRawHeadersAccess_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t process_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Origin_Data>>> origins;

 private:
  NetworkService_SetRawHeadersAccess_Params_Data();
  ~NetworkService_SetRawHeadersAccess_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_SetRawHeadersAccess_Params_Data) == 24,
              "Bad sizeof(NetworkService_SetRawHeadersAccess_Params_Data)");
class  NetworkService_SetMaxConnectionsPerProxy_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_SetMaxConnectionsPerProxy_Params_Data));
      new (data()) NetworkService_SetMaxConnectionsPerProxy_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_SetMaxConnectionsPerProxy_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_SetMaxConnectionsPerProxy_Params_Data>(index_);
    }
    NetworkService_SetMaxConnectionsPerProxy_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t max_connections;
  uint8_t padfinal_[4];

 private:
  NetworkService_SetMaxConnectionsPerProxy_Params_Data();
  ~NetworkService_SetMaxConnectionsPerProxy_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_SetMaxConnectionsPerProxy_Params_Data) == 16,
              "Bad sizeof(NetworkService_SetMaxConnectionsPerProxy_Params_Data)");
class  NetworkService_GetNetworkChangeManager_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_GetNetworkChangeManager_Params_Data));
      new (data()) NetworkService_GetNetworkChangeManager_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_GetNetworkChangeManager_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_GetNetworkChangeManager_Params_Data>(index_);
    }
    NetworkService_GetNetworkChangeManager_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data network_change_manager;
  uint8_t padfinal_[4];

 private:
  NetworkService_GetNetworkChangeManager_Params_Data();
  ~NetworkService_GetNetworkChangeManager_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_GetNetworkChangeManager_Params_Data) == 16,
              "Bad sizeof(NetworkService_GetNetworkChangeManager_Params_Data)");
class  NetworkService_GetNetworkQualityEstimatorManager_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_GetNetworkQualityEstimatorManager_Params_Data));
      new (data()) NetworkService_GetNetworkQualityEstimatorManager_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_GetNetworkQualityEstimatorManager_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_GetNetworkQualityEstimatorManager_Params_Data>(index_);
    }
    NetworkService_GetNetworkQualityEstimatorManager_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  NetworkService_GetNetworkQualityEstimatorManager_Params_Data();
  ~NetworkService_GetNetworkQualityEstimatorManager_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_GetNetworkQualityEstimatorManager_Params_Data) == 16,
              "Bad sizeof(NetworkService_GetNetworkQualityEstimatorManager_Params_Data)");
class  NetworkService_GetDnsConfigChangeManager_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_GetDnsConfigChangeManager_Params_Data));
      new (data()) NetworkService_GetDnsConfigChangeManager_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_GetDnsConfigChangeManager_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_GetDnsConfigChangeManager_Params_Data>(index_);
    }
    NetworkService_GetDnsConfigChangeManager_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  NetworkService_GetDnsConfigChangeManager_Params_Data();
  ~NetworkService_GetDnsConfigChangeManager_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_GetDnsConfigChangeManager_Params_Data) == 16,
              "Bad sizeof(NetworkService_GetDnsConfigChangeManager_Params_Data)");
class  NetworkService_GetTotalNetworkUsages_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_GetTotalNetworkUsages_Params_Data));
      new (data()) NetworkService_GetTotalNetworkUsages_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_GetTotalNetworkUsages_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_GetTotalNetworkUsages_Params_Data>(index_);
    }
    NetworkService_GetTotalNetworkUsages_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  NetworkService_GetTotalNetworkUsages_Params_Data();
  ~NetworkService_GetTotalNetworkUsages_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_GetTotalNetworkUsages_Params_Data) == 8,
              "Bad sizeof(NetworkService_GetTotalNetworkUsages_Params_Data)");
class  NetworkService_GetTotalNetworkUsages_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_GetTotalNetworkUsages_ResponseParams_Data));
      new (data()) NetworkService_GetTotalNetworkUsages_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_GetTotalNetworkUsages_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_GetTotalNetworkUsages_ResponseParams_Data>(index_);
    }
    NetworkService_GetTotalNetworkUsages_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::NetworkUsage_Data>>> total_network_usages;

 private:
  NetworkService_GetTotalNetworkUsages_ResponseParams_Data();
  ~NetworkService_GetTotalNetworkUsages_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkService_GetTotalNetworkUsages_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkService_GetTotalNetworkUsages_ResponseParams_Data)");
class  NetworkService_GetNetworkList_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_GetNetworkList_Params_Data));
      new (data()) NetworkService_GetNetworkList_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_GetNetworkList_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_GetNetworkList_Params_Data>(index_);
    }
    NetworkService_GetNetworkList_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t policy;
  uint8_t padfinal_[4];

 private:
  NetworkService_GetNetworkList_Params_Data();
  ~NetworkService_GetNetworkList_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_GetNetworkList_Params_Data) == 16,
              "Bad sizeof(NetworkService_GetNetworkList_Params_Data)");
class  NetworkService_GetNetworkList_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_GetNetworkList_ResponseParams_Data));
      new (data()) NetworkService_GetNetworkList_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_GetNetworkList_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_GetNetworkList_ResponseParams_Data>(index_);
    }
    NetworkService_GetNetworkList_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::NetworkInterface_Data>>> networks;

 private:
  NetworkService_GetNetworkList_ResponseParams_Data();
  ~NetworkService_GetNetworkList_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkService_GetNetworkList_ResponseParams_Data) == 16,
              "Bad sizeof(NetworkService_GetNetworkList_ResponseParams_Data)");
class  NetworkService_UpdateCRLSet_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_UpdateCRLSet_Params_Data));
      new (data()) NetworkService_UpdateCRLSet_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_UpdateCRLSet_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_UpdateCRLSet_Params_Data>(index_);
    }
    NetworkService_UpdateCRLSet_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyBuffer_Data> crl_set;

 private:
  NetworkService_UpdateCRLSet_Params_Data();
  ~NetworkService_UpdateCRLSet_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_UpdateCRLSet_Params_Data) == 16,
              "Bad sizeof(NetworkService_UpdateCRLSet_Params_Data)");
class  NetworkService_UpdateCRLSet_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_UpdateCRLSet_ResponseParams_Data));
      new (data()) NetworkService_UpdateCRLSet_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_UpdateCRLSet_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_UpdateCRLSet_ResponseParams_Data>(index_);
    }
    NetworkService_UpdateCRLSet_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  NetworkService_UpdateCRLSet_ResponseParams_Data();
  ~NetworkService_UpdateCRLSet_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkService_UpdateCRLSet_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkService_UpdateCRLSet_ResponseParams_Data)");
class  NetworkService_UpdateLegacyTLSConfig_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_UpdateLegacyTLSConfig_Params_Data));
      new (data()) NetworkService_UpdateLegacyTLSConfig_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_UpdateLegacyTLSConfig_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_UpdateLegacyTLSConfig_Params_Data>(index_);
    }
    NetworkService_UpdateLegacyTLSConfig_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyBuffer_Data> config;

 private:
  NetworkService_UpdateLegacyTLSConfig_Params_Data();
  ~NetworkService_UpdateLegacyTLSConfig_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_UpdateLegacyTLSConfig_Params_Data) == 16,
              "Bad sizeof(NetworkService_UpdateLegacyTLSConfig_Params_Data)");
class  NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data));
      new (data()) NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data>(index_);
    }
    NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data();
  ~NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data) == 8,
              "Bad sizeof(NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data)");
class  NetworkService_OnCertDBChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_OnCertDBChanged_Params_Data));
      new (data()) NetworkService_OnCertDBChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_OnCertDBChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_OnCertDBChanged_Params_Data>(index_);
    }
    NetworkService_OnCertDBChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  NetworkService_OnCertDBChanged_Params_Data();
  ~NetworkService_OnCertDBChanged_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_OnCertDBChanged_Params_Data) == 8,
              "Bad sizeof(NetworkService_OnCertDBChanged_Params_Data)");
class  NetworkService_AddCorbExceptionForPlugin_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_AddCorbExceptionForPlugin_Params_Data));
      new (data()) NetworkService_AddCorbExceptionForPlugin_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_AddCorbExceptionForPlugin_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_AddCorbExceptionForPlugin_Params_Data>(index_);
    }
    NetworkService_AddCorbExceptionForPlugin_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t process_id;
  uint8_t padfinal_[4];

 private:
  NetworkService_AddCorbExceptionForPlugin_Params_Data();
  ~NetworkService_AddCorbExceptionForPlugin_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_AddCorbExceptionForPlugin_Params_Data) == 16,
              "Bad sizeof(NetworkService_AddCorbExceptionForPlugin_Params_Data)");
class  NetworkService_RemoveCorbExceptionForPlugin_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_RemoveCorbExceptionForPlugin_Params_Data));
      new (data()) NetworkService_RemoveCorbExceptionForPlugin_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_RemoveCorbExceptionForPlugin_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_RemoveCorbExceptionForPlugin_Params_Data>(index_);
    }
    NetworkService_RemoveCorbExceptionForPlugin_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t process_id;
  uint8_t padfinal_[4];

 private:
  NetworkService_RemoveCorbExceptionForPlugin_Params_Data();
  ~NetworkService_RemoveCorbExceptionForPlugin_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_RemoveCorbExceptionForPlugin_Params_Data) == 16,
              "Bad sizeof(NetworkService_RemoveCorbExceptionForPlugin_Params_Data)");
class  NetworkService_OnMemoryPressure_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_OnMemoryPressure_Params_Data));
      new (data()) NetworkService_OnMemoryPressure_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_OnMemoryPressure_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_OnMemoryPressure_Params_Data>(index_);
    }
    NetworkService_OnMemoryPressure_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t memory_pressure_level;
  uint8_t padfinal_[4];

 private:
  NetworkService_OnMemoryPressure_Params_Data();
  ~NetworkService_OnMemoryPressure_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_OnMemoryPressure_Params_Data) == 16,
              "Bad sizeof(NetworkService_OnMemoryPressure_Params_Data)");
class  NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data));
      new (data()) NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data>(index_);
    }
    NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t count;
  uint8_t padfinal_[4];

 private:
  NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data();
  ~NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data) == 16,
              "Bad sizeof(NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data)");
class  NetworkService_OnApplicationStateChange_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_OnApplicationStateChange_Params_Data));
      new (data()) NetworkService_OnApplicationStateChange_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_OnApplicationStateChange_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_OnApplicationStateChange_Params_Data>(index_);
    }
    NetworkService_OnApplicationStateChange_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state;
  uint8_t padfinal_[4];

 private:
  NetworkService_OnApplicationStateChange_Params_Data();
  ~NetworkService_OnApplicationStateChange_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_OnApplicationStateChange_Params_Data) == 16,
              "Bad sizeof(NetworkService_OnApplicationStateChange_Params_Data)");
class  NetworkService_SetEnvironment_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_SetEnvironment_Params_Data));
      new (data()) NetworkService_SetEnvironment_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_SetEnvironment_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_SetEnvironment_Params_Data>(index_);
    }
    NetworkService_SetEnvironment_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::EnvironmentVariable_Data>>> environment;

 private:
  NetworkService_SetEnvironment_Params_Data();
  ~NetworkService_SetEnvironment_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_SetEnvironment_Params_Data) == 16,
              "Bad sizeof(NetworkService_SetEnvironment_Params_Data)");
class  NetworkService_DumpWithoutCrashing_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_DumpWithoutCrashing_Params_Data));
      new (data()) NetworkService_DumpWithoutCrashing_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_DumpWithoutCrashing_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_DumpWithoutCrashing_Params_Data>(index_);
    }
    NetworkService_DumpWithoutCrashing_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> dump_request_time;

 private:
  NetworkService_DumpWithoutCrashing_Params_Data();
  ~NetworkService_DumpWithoutCrashing_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_DumpWithoutCrashing_Params_Data) == 16,
              "Bad sizeof(NetworkService_DumpWithoutCrashing_Params_Data)");
class  NetworkService_BindTestInterface_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NetworkService_BindTestInterface_Params_Data));
      new (data()) NetworkService_BindTestInterface_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NetworkService_BindTestInterface_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NetworkService_BindTestInterface_Params_Data>(index_);
    }
    NetworkService_BindTestInterface_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  NetworkService_BindTestInterface_Params_Data();
  ~NetworkService_BindTestInterface_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_BindTestInterface_Params_Data) == 16,
              "Bad sizeof(NetworkService_BindTestInterface_Params_Data)");

}  // namespace internal
class NetworkServiceClient_OnLoadingStateUpdate_ParamsDataView {
 public:
  NetworkServiceClient_OnLoadingStateUpdate_ParamsDataView() {}

  NetworkServiceClient_OnLoadingStateUpdate_ParamsDataView(
      internal::NetworkServiceClient_OnLoadingStateUpdate_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInfosDataView(
      mojo::ArrayDataView<LoadInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInfos(UserType* output) {
    auto* pointer = data_->infos.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::LoadInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::NetworkServiceClient_OnLoadingStateUpdate_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkServiceClient_OnLoadingStateUpdate_ResponseParamsDataView {
 public:
  NetworkServiceClient_OnLoadingStateUpdate_ResponseParamsDataView() {}

  NetworkServiceClient_OnLoadingStateUpdate_ResponseParamsDataView(
      internal::NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkServiceClient_OnLoadingStateUpdate_ResponseParams_Data* data_ = nullptr;
};

class NetworkServiceClient_OnDataUseUpdate_ParamsDataView {
 public:
  NetworkServiceClient_OnDataUseUpdate_ParamsDataView() {}

  NetworkServiceClient_OnDataUseUpdate_ParamsDataView(
      internal::NetworkServiceClient_OnDataUseUpdate_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t network_traffic_annotation_id_hash() const {
    return data_->network_traffic_annotation_id_hash;
  }
  int64_t recv_bytes() const {
    return data_->recv_bytes;
  }
  int64_t sent_bytes() const {
    return data_->sent_bytes;
  }
 private:
  internal::NetworkServiceClient_OnDataUseUpdate_Params_Data* data_ = nullptr;
};

class NetworkServiceClient_OnRawRequest_ParamsDataView {
 public:
  NetworkServiceClient_OnRawRequest_ParamsDataView() {}

  NetworkServiceClient_OnRawRequest_ParamsDataView(
      internal::NetworkServiceClient_OnRawRequest_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t process_id() const {
    return data_->process_id;
  }
  int32_t routing_id() const {
    return data_->routing_id;
  }
  inline void GetDevtoolRequestIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevtoolRequestId(UserType* output) {
    auto* pointer = data_->devtool_request_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetCookiesWithStatusDataView(
      mojo::ArrayDataView<::network::mojom::CookieWithStatusDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCookiesWithStatus(UserType* output) {
    auto* pointer = data_->cookies_with_status.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::CookieWithStatusDataView>>(
        pointer, output, context_);
  }
  inline void GetHeadersDataView(
      mojo::ArrayDataView<::network::mojom::HttpRawHeaderPairDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHeaders(UserType* output) {
    auto* pointer = data_->headers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::HttpRawHeaderPairDataView>>(
        pointer, output, context_);
  }
 private:
  internal::NetworkServiceClient_OnRawRequest_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkServiceClient_OnRawResponse_ParamsDataView {
 public:
  NetworkServiceClient_OnRawResponse_ParamsDataView() {}

  NetworkServiceClient_OnRawResponse_ParamsDataView(
      internal::NetworkServiceClient_OnRawResponse_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t process_id() const {
    return data_->process_id;
  }
  int32_t routing_id() const {
    return data_->routing_id;
  }
  inline void GetDevtoolRequestIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevtoolRequestId(UserType* output) {
    auto* pointer = data_->devtool_request_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetCookiesWithStatusDataView(
      mojo::ArrayDataView<::network::mojom::CookieAndLineWithStatusDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCookiesWithStatus(UserType* output) {
    auto* pointer = data_->cookies_with_status.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::CookieAndLineWithStatusDataView>>(
        pointer, output, context_);
  }
  inline void GetHeadersDataView(
      mojo::ArrayDataView<::network::mojom::HttpRawHeaderPairDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHeaders(UserType* output) {
    auto* pointer = data_->headers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::HttpRawHeaderPairDataView>>(
        pointer, output, context_);
  }
  inline void GetRawResponseHeadersDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRawResponseHeaders(UserType* output) {
    auto* pointer = data_->raw_response_headers.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::NetworkServiceClient_OnRawResponse_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_SetClient_ParamsDataView {
 public:
  NetworkService_SetClient_ParamsDataView() {}

  NetworkService_SetClient_ParamsDataView(
      internal::NetworkService_SetClient_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::NetworkServiceClientInterfaceBase>>(
            &data_->client, &result, context_);
    DCHECK(ret);
    return result;
  }
  inline void GetParamsDataView(
      NetworkServiceParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParams(UserType* output) {
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkServiceParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_SetClient_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_StartNetLog_ParamsDataView {
 public:
  NetworkService_StartNetLog_ParamsDataView() {}

  NetworkService_StartNetLog_ParamsDataView(
      internal::NetworkService_StartNetLog_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFile(UserType* output) {
    auto* pointer = data_->file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCaptureMode(UserType* output) const {
    auto data_value = data_->capture_mode;
    return mojo::internal::Deserialize<::network::mojom::NetLogCaptureMode>(
        data_value, output);
  }

  ::network::mojom::NetLogCaptureMode capture_mode() const {
    return static_cast<::network::mojom::NetLogCaptureMode>(data_->capture_mode);
  }
  inline void GetConstantsDataView(
      ::mojo_base::mojom::DictionaryValueDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadConstants(UserType* output) {
    auto* pointer = data_->constants.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::DictionaryValueDataView>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_StartNetLog_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_SetSSLKeyLogFile_ParamsDataView {
 public:
  NetworkService_SetSSLKeyLogFile_ParamsDataView() {}

  NetworkService_SetSSLKeyLogFile_ParamsDataView(
      internal::NetworkService_SetSSLKeyLogFile_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFile(UserType* output) {
    auto* pointer = data_->file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_SetSSLKeyLogFile_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_CreateNetworkContext_ParamsDataView {
 public:
  NetworkService_CreateNetworkContext_ParamsDataView() {}

  NetworkService_CreateNetworkContext_ParamsDataView(
      internal::NetworkService_CreateNetworkContext_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeContext() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::NetworkContextInterfaceBase>>(
            &data_->context, &result, context_);
    DCHECK(ret);
    return result;
  }
  inline void GetParamsDataView(
      ::network::mojom::NetworkContextParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParams(UserType* output) {
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::network::mojom::NetworkContextParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_CreateNetworkContext_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_ConfigureStubHostResolver_ParamsDataView {
 public:
  NetworkService_ConfigureStubHostResolver_ParamsDataView() {}

  NetworkService_ConfigureStubHostResolver_ParamsDataView(
      internal::NetworkService_ConfigureStubHostResolver_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool insecure_dns_client_enabled() const {
    return data_->insecure_dns_client_enabled;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSecureDnsMode(UserType* output) const {
    auto data_value = data_->secure_dns_mode;
    return mojo::internal::Deserialize<::network::mojom::SecureDnsMode>(
        data_value, output);
  }

  ::network::mojom::SecureDnsMode secure_dns_mode() const {
    return static_cast<::network::mojom::SecureDnsMode>(data_->secure_dns_mode);
  }
  inline void GetDnsOverHttpsServersDataView(
      mojo::ArrayDataView<::network::mojom::DnsOverHttpsServerDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDnsOverHttpsServers(UserType* output) {
    auto* pointer = data_->dns_over_https_servers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::DnsOverHttpsServerDataView>>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_ConfigureStubHostResolver_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_DisableQuic_ParamsDataView {
 public:
  NetworkService_DisableQuic_ParamsDataView() {}

  NetworkService_DisableQuic_ParamsDataView(
      internal::NetworkService_DisableQuic_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkService_DisableQuic_Params_Data* data_ = nullptr;
};

class NetworkService_SetUpHttpAuth_ParamsDataView {
 public:
  NetworkService_SetUpHttpAuth_ParamsDataView() {}

  NetworkService_SetUpHttpAuth_ParamsDataView(
      internal::NetworkService_SetUpHttpAuth_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetHttpAuthStaticParamsDataView(
      HttpAuthStaticParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHttpAuthStaticParams(UserType* output) {
    auto* pointer = data_->http_auth_static_params.Get();
    return mojo::internal::Deserialize<::network::mojom::HttpAuthStaticParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_SetUpHttpAuth_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_ConfigureHttpAuthPrefs_ParamsDataView {
 public:
  NetworkService_ConfigureHttpAuthPrefs_ParamsDataView() {}

  NetworkService_ConfigureHttpAuthPrefs_ParamsDataView(
      internal::NetworkService_ConfigureHttpAuthPrefs_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetHttpAuthDynamicParamsDataView(
      HttpAuthDynamicParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHttpAuthDynamicParams(UserType* output) {
    auto* pointer = data_->http_auth_dynamic_params.Get();
    return mojo::internal::Deserialize<::network::mojom::HttpAuthDynamicParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_ConfigureHttpAuthPrefs_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_SetRawHeadersAccess_ParamsDataView {
 public:
  NetworkService_SetRawHeadersAccess_ParamsDataView() {}

  NetworkService_SetRawHeadersAccess_ParamsDataView(
      internal::NetworkService_SetRawHeadersAccess_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t process_id() const {
    return data_->process_id;
  }
  inline void GetOriginsDataView(
      mojo::ArrayDataView<::url::mojom::OriginDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigins(UserType* output) {
    auto* pointer = data_->origins.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::OriginDataView>>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_SetRawHeadersAccess_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_SetMaxConnectionsPerProxy_ParamsDataView {
 public:
  NetworkService_SetMaxConnectionsPerProxy_ParamsDataView() {}

  NetworkService_SetMaxConnectionsPerProxy_ParamsDataView(
      internal::NetworkService_SetMaxConnectionsPerProxy_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t max_connections() const {
    return data_->max_connections;
  }
 private:
  internal::NetworkService_SetMaxConnectionsPerProxy_Params_Data* data_ = nullptr;
};

class NetworkService_GetNetworkChangeManager_ParamsDataView {
 public:
  NetworkService_GetNetworkChangeManager_ParamsDataView() {}

  NetworkService_GetNetworkChangeManager_ParamsDataView(
      internal::NetworkService_GetNetworkChangeManager_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeNetworkChangeManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::NetworkChangeManagerInterfaceBase>>(
            &data_->network_change_manager, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkService_GetNetworkChangeManager_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_GetNetworkQualityEstimatorManager_ParamsDataView {
 public:
  NetworkService_GetNetworkQualityEstimatorManager_ParamsDataView() {}

  NetworkService_GetNetworkQualityEstimatorManager_ParamsDataView(
      internal::NetworkService_GetNetworkQualityEstimatorManager_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::NetworkQualityEstimatorManagerInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkService_GetNetworkQualityEstimatorManager_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_GetDnsConfigChangeManager_ParamsDataView {
 public:
  NetworkService_GetDnsConfigChangeManager_ParamsDataView() {}

  NetworkService_GetDnsConfigChangeManager_ParamsDataView(
      internal::NetworkService_GetDnsConfigChangeManager_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::DnsConfigChangeManagerInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkService_GetDnsConfigChangeManager_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_GetTotalNetworkUsages_ParamsDataView {
 public:
  NetworkService_GetTotalNetworkUsages_ParamsDataView() {}

  NetworkService_GetTotalNetworkUsages_ParamsDataView(
      internal::NetworkService_GetTotalNetworkUsages_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkService_GetTotalNetworkUsages_Params_Data* data_ = nullptr;
};

class NetworkService_GetTotalNetworkUsages_ResponseParamsDataView {
 public:
  NetworkService_GetTotalNetworkUsages_ResponseParamsDataView() {}

  NetworkService_GetTotalNetworkUsages_ResponseParamsDataView(
      internal::NetworkService_GetTotalNetworkUsages_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTotalNetworkUsagesDataView(
      mojo::ArrayDataView<::network::mojom::NetworkUsageDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTotalNetworkUsages(UserType* output) {
    auto* pointer = data_->total_network_usages.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::NetworkUsageDataView>>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_GetTotalNetworkUsages_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_GetNetworkList_ParamsDataView {
 public:
  NetworkService_GetNetworkList_ParamsDataView() {}

  NetworkService_GetNetworkList_ParamsDataView(
      internal::NetworkService_GetNetworkList_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t policy() const {
    return data_->policy;
  }
 private:
  internal::NetworkService_GetNetworkList_Params_Data* data_ = nullptr;
};

class NetworkService_GetNetworkList_ResponseParamsDataView {
 public:
  NetworkService_GetNetworkList_ResponseParamsDataView() {}

  NetworkService_GetNetworkList_ResponseParamsDataView(
      internal::NetworkService_GetNetworkList_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNetworksDataView(
      mojo::ArrayDataView<::network::mojom::NetworkInterfaceDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNetworks(UserType* output) {
    auto* pointer = data_->networks.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::NetworkInterfaceDataView>>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_GetNetworkList_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_UpdateCRLSet_ParamsDataView {
 public:
  NetworkService_UpdateCRLSet_ParamsDataView() {}

  NetworkService_UpdateCRLSet_ParamsDataView(
      internal::NetworkService_UpdateCRLSet_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCrlSetDataView(
      ::mojo_base::mojom::ReadOnlyBufferDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCrlSet(UserType* output) {
    auto* pointer = data_->crl_set.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyBufferDataView>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_UpdateCRLSet_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_UpdateCRLSet_ResponseParamsDataView {
 public:
  NetworkService_UpdateCRLSet_ResponseParamsDataView() {}

  NetworkService_UpdateCRLSet_ResponseParamsDataView(
      internal::NetworkService_UpdateCRLSet_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkService_UpdateCRLSet_ResponseParams_Data* data_ = nullptr;
};

class NetworkService_UpdateLegacyTLSConfig_ParamsDataView {
 public:
  NetworkService_UpdateLegacyTLSConfig_ParamsDataView() {}

  NetworkService_UpdateLegacyTLSConfig_ParamsDataView(
      internal::NetworkService_UpdateLegacyTLSConfig_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetConfigDataView(
      ::mojo_base::mojom::ReadOnlyBufferDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadConfig(UserType* output) {
    auto* pointer = data_->config.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyBufferDataView>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_UpdateLegacyTLSConfig_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_UpdateLegacyTLSConfig_ResponseParamsDataView {
 public:
  NetworkService_UpdateLegacyTLSConfig_ResponseParamsDataView() {}

  NetworkService_UpdateLegacyTLSConfig_ResponseParamsDataView(
      internal::NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkService_UpdateLegacyTLSConfig_ResponseParams_Data* data_ = nullptr;
};

class NetworkService_OnCertDBChanged_ParamsDataView {
 public:
  NetworkService_OnCertDBChanged_ParamsDataView() {}

  NetworkService_OnCertDBChanged_ParamsDataView(
      internal::NetworkService_OnCertDBChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetworkService_OnCertDBChanged_Params_Data* data_ = nullptr;
};

class NetworkService_AddCorbExceptionForPlugin_ParamsDataView {
 public:
  NetworkService_AddCorbExceptionForPlugin_ParamsDataView() {}

  NetworkService_AddCorbExceptionForPlugin_ParamsDataView(
      internal::NetworkService_AddCorbExceptionForPlugin_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t process_id() const {
    return data_->process_id;
  }
 private:
  internal::NetworkService_AddCorbExceptionForPlugin_Params_Data* data_ = nullptr;
};

class NetworkService_RemoveCorbExceptionForPlugin_ParamsDataView {
 public:
  NetworkService_RemoveCorbExceptionForPlugin_ParamsDataView() {}

  NetworkService_RemoveCorbExceptionForPlugin_ParamsDataView(
      internal::NetworkService_RemoveCorbExceptionForPlugin_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t process_id() const {
    return data_->process_id;
  }
 private:
  internal::NetworkService_RemoveCorbExceptionForPlugin_Params_Data* data_ = nullptr;
};

class NetworkService_OnMemoryPressure_ParamsDataView {
 public:
  NetworkService_OnMemoryPressure_ParamsDataView() {}

  NetworkService_OnMemoryPressure_ParamsDataView(
      internal::NetworkService_OnMemoryPressure_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMemoryPressureLevel(UserType* output) const {
    auto data_value = data_->memory_pressure_level;
    return mojo::internal::Deserialize<::mojo_base::mojom::MemoryPressureLevel>(
        data_value, output);
  }

  ::mojo_base::mojom::MemoryPressureLevel memory_pressure_level() const {
    return static_cast<::mojo_base::mojom::MemoryPressureLevel>(data_->memory_pressure_level);
  }
 private:
  internal::NetworkService_OnMemoryPressure_Params_Data* data_ = nullptr;
};

class NetworkService_OnPeerToPeerConnectionsCountChange_ParamsDataView {
 public:
  NetworkService_OnPeerToPeerConnectionsCountChange_ParamsDataView() {}

  NetworkService_OnPeerToPeerConnectionsCountChange_ParamsDataView(
      internal::NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t count() const {
    return data_->count;
  }
 private:
  internal::NetworkService_OnPeerToPeerConnectionsCountChange_Params_Data* data_ = nullptr;
};

class NetworkService_OnApplicationStateChange_ParamsDataView {
 public:
  NetworkService_OnApplicationStateChange_ParamsDataView() {}

  NetworkService_OnApplicationStateChange_ParamsDataView(
      internal::NetworkService_OnApplicationStateChange_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::mojo_base::mojom::ApplicationState>(
        data_value, output);
  }

  ::mojo_base::mojom::ApplicationState state() const {
    return static_cast<::mojo_base::mojom::ApplicationState>(data_->state);
  }
 private:
  internal::NetworkService_OnApplicationStateChange_Params_Data* data_ = nullptr;
};

class NetworkService_SetEnvironment_ParamsDataView {
 public:
  NetworkService_SetEnvironment_ParamsDataView() {}

  NetworkService_SetEnvironment_ParamsDataView(
      internal::NetworkService_SetEnvironment_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetEnvironmentDataView(
      mojo::ArrayDataView<EnvironmentVariableDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEnvironment(UserType* output) {
    auto* pointer = data_->environment.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::EnvironmentVariableDataView>>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_SetEnvironment_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_DumpWithoutCrashing_ParamsDataView {
 public:
  NetworkService_DumpWithoutCrashing_ParamsDataView() {}

  NetworkService_DumpWithoutCrashing_ParamsDataView(
      internal::NetworkService_DumpWithoutCrashing_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDumpRequestTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDumpRequestTime(UserType* output) {
    auto* pointer = data_->dump_request_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
 private:
  internal::NetworkService_DumpWithoutCrashing_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NetworkService_BindTestInterface_ParamsDataView {
 public:
  NetworkService_BindTestInterface_ParamsDataView() {}

  NetworkService_BindTestInterface_ParamsDataView(
      internal::NetworkService_BindTestInterface_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::NetworkServiceTestInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NetworkService_BindTestInterface_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void NetworkServiceClient_OnLoadingStateUpdate_ParamsDataView::GetInfosDataView(
    mojo::ArrayDataView<LoadInfoDataView>* output) {
  auto pointer = data_->infos.Get();
  *output = mojo::ArrayDataView<LoadInfoDataView>(pointer, context_);
}






inline void NetworkServiceClient_OnRawRequest_ParamsDataView::GetDevtoolRequestIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->devtool_request_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void NetworkServiceClient_OnRawRequest_ParamsDataView::GetCookiesWithStatusDataView(
    mojo::ArrayDataView<::network::mojom::CookieWithStatusDataView>* output) {
  auto pointer = data_->cookies_with_status.Get();
  *output = mojo::ArrayDataView<::network::mojom::CookieWithStatusDataView>(pointer, context_);
}
inline void NetworkServiceClient_OnRawRequest_ParamsDataView::GetHeadersDataView(
    mojo::ArrayDataView<::network::mojom::HttpRawHeaderPairDataView>* output) {
  auto pointer = data_->headers.Get();
  *output = mojo::ArrayDataView<::network::mojom::HttpRawHeaderPairDataView>(pointer, context_);
}


inline void NetworkServiceClient_OnRawResponse_ParamsDataView::GetDevtoolRequestIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->devtool_request_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void NetworkServiceClient_OnRawResponse_ParamsDataView::GetCookiesWithStatusDataView(
    mojo::ArrayDataView<::network::mojom::CookieAndLineWithStatusDataView>* output) {
  auto pointer = data_->cookies_with_status.Get();
  *output = mojo::ArrayDataView<::network::mojom::CookieAndLineWithStatusDataView>(pointer, context_);
}
inline void NetworkServiceClient_OnRawResponse_ParamsDataView::GetHeadersDataView(
    mojo::ArrayDataView<::network::mojom::HttpRawHeaderPairDataView>* output) {
  auto pointer = data_->headers.Get();
  *output = mojo::ArrayDataView<::network::mojom::HttpRawHeaderPairDataView>(pointer, context_);
}
inline void NetworkServiceClient_OnRawResponse_ParamsDataView::GetRawResponseHeadersDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->raw_response_headers.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void NetworkService_SetClient_ParamsDataView::GetParamsDataView(
    NetworkServiceParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = NetworkServiceParamsDataView(pointer, context_);
}


inline void NetworkService_StartNetLog_ParamsDataView::GetFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, context_);
}
inline void NetworkService_StartNetLog_ParamsDataView::GetConstantsDataView(
    ::mojo_base::mojom::DictionaryValueDataView* output) {
  auto pointer = data_->constants.Get();
  *output = ::mojo_base::mojom::DictionaryValueDataView(pointer, context_);
}


inline void NetworkService_SetSSLKeyLogFile_ParamsDataView::GetFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, context_);
}


inline void NetworkService_CreateNetworkContext_ParamsDataView::GetParamsDataView(
    ::network::mojom::NetworkContextParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::network::mojom::NetworkContextParamsDataView(pointer, context_);
}


inline void NetworkService_ConfigureStubHostResolver_ParamsDataView::GetDnsOverHttpsServersDataView(
    mojo::ArrayDataView<::network::mojom::DnsOverHttpsServerDataView>* output) {
  auto pointer = data_->dns_over_https_servers.Get();
  *output = mojo::ArrayDataView<::network::mojom::DnsOverHttpsServerDataView>(pointer, context_);
}




inline void NetworkService_SetUpHttpAuth_ParamsDataView::GetHttpAuthStaticParamsDataView(
    HttpAuthStaticParamsDataView* output) {
  auto pointer = data_->http_auth_static_params.Get();
  *output = HttpAuthStaticParamsDataView(pointer, context_);
}


inline void NetworkService_ConfigureHttpAuthPrefs_ParamsDataView::GetHttpAuthDynamicParamsDataView(
    HttpAuthDynamicParamsDataView* output) {
  auto pointer = data_->http_auth_dynamic_params.Get();
  *output = HttpAuthDynamicParamsDataView(pointer, context_);
}


inline void NetworkService_SetRawHeadersAccess_ParamsDataView::GetOriginsDataView(
    mojo::ArrayDataView<::url::mojom::OriginDataView>* output) {
  auto pointer = data_->origins.Get();
  *output = mojo::ArrayDataView<::url::mojom::OriginDataView>(pointer, context_);
}












inline void NetworkService_GetTotalNetworkUsages_ResponseParamsDataView::GetTotalNetworkUsagesDataView(
    mojo::ArrayDataView<::network::mojom::NetworkUsageDataView>* output) {
  auto pointer = data_->total_network_usages.Get();
  *output = mojo::ArrayDataView<::network::mojom::NetworkUsageDataView>(pointer, context_);
}




inline void NetworkService_GetNetworkList_ResponseParamsDataView::GetNetworksDataView(
    mojo::ArrayDataView<::network::mojom::NetworkInterfaceDataView>* output) {
  auto pointer = data_->networks.Get();
  *output = mojo::ArrayDataView<::network::mojom::NetworkInterfaceDataView>(pointer, context_);
}


inline void NetworkService_UpdateCRLSet_ParamsDataView::GetCrlSetDataView(
    ::mojo_base::mojom::ReadOnlyBufferDataView* output) {
  auto pointer = data_->crl_set.Get();
  *output = ::mojo_base::mojom::ReadOnlyBufferDataView(pointer, context_);
}




inline void NetworkService_UpdateLegacyTLSConfig_ParamsDataView::GetConfigDataView(
    ::mojo_base::mojom::ReadOnlyBufferDataView* output) {
  auto pointer = data_->config.Get();
  *output = ::mojo_base::mojom::ReadOnlyBufferDataView(pointer, context_);
}
















inline void NetworkService_SetEnvironment_ParamsDataView::GetEnvironmentDataView(
    mojo::ArrayDataView<EnvironmentVariableDataView>* output) {
  auto pointer = data_->environment.Get();
  *output = mojo::ArrayDataView<EnvironmentVariableDataView>(pointer, context_);
}


inline void NetworkService_DumpWithoutCrashing_ParamsDataView::GetDumpRequestTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->dump_request_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_PARAMS_DATA_H_