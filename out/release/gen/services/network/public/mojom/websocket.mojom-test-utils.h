// services/network/public/mojom/websocket.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_WEBSOCKET_MOJOM_TEST_UTILS_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_WEBSOCKET_MOJOM_TEST_UTILS_H_

#include "services/network/public/mojom/websocket.mojom.h"


namespace network {
namespace mojom {


class  AuthenticationHandlerInterceptorForTesting : public AuthenticationHandler {
  virtual AuthenticationHandler* GetForwardingInterface() = 0;
  void OnAuthRequired(const ::net::AuthChallengeInfo& info, const ::scoped_refptr<::net::HttpResponseHeaders>& headers, const ::net::IPEndPoint& remote_endpoint, OnAuthRequiredCallback callback) override;
};
class  AuthenticationHandlerAsyncWaiter {
 public:
  explicit AuthenticationHandlerAsyncWaiter(AuthenticationHandler* proxy);
  ~AuthenticationHandlerAsyncWaiter();
  void OnAuthRequired(
      const ::net::AuthChallengeInfo& info, const ::scoped_refptr<::net::HttpResponseHeaders>& headers, const ::net::IPEndPoint& remote_endpoint, base::Optional<::net::AuthCredentials>* out_credentials);

 private:
  AuthenticationHandler* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(AuthenticationHandlerAsyncWaiter);
};


class  WebSocketHandshakeClientInterceptorForTesting : public WebSocketHandshakeClient {
  virtual WebSocketHandshakeClient* GetForwardingInterface() = 0;
  void OnOpeningHandshakeStarted(WebSocketHandshakeRequestPtr request) override;
  void OnConnectionEstablished(mojo::PendingRemote<WebSocket> socket, mojo::PendingReceiver<WebSocketClient> client_receiver, WebSocketHandshakeResponsePtr response, mojo::ScopedDataPipeConsumerHandle readable) override;
};
class  WebSocketHandshakeClientAsyncWaiter {
 public:
  explicit WebSocketHandshakeClientAsyncWaiter(WebSocketHandshakeClient* proxy);
  ~WebSocketHandshakeClientAsyncWaiter();

 private:
  WebSocketHandshakeClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(WebSocketHandshakeClientAsyncWaiter);
};


class  WebSocketClientInterceptorForTesting : public WebSocketClient {
  virtual WebSocketClient* GetForwardingInterface() = 0;
  void OnDataFrame(bool fin, WebSocketMessageType type, uint64_t data_length) override;
  void AddSendFlowControlQuota(int64_t quota) override;
  void OnDropChannel(bool was_clean, uint16_t code, const std::string& reason) override;
  void OnClosingHandshake() override;
};
class  WebSocketClientAsyncWaiter {
 public:
  explicit WebSocketClientAsyncWaiter(WebSocketClient* proxy);
  ~WebSocketClientAsyncWaiter();

 private:
  WebSocketClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(WebSocketClientAsyncWaiter);
};


class  WebSocketInterceptorForTesting : public WebSocket {
  virtual WebSocket* GetForwardingInterface() = 0;
  void SendFrame(bool fin, WebSocketMessageType type, ::base::span<const ::uint8_t> data) override;
  void StartReceiving() override;
  void StartClosingHandshake(uint16_t code, const std::string& reason) override;
};
class  WebSocketAsyncWaiter {
 public:
  explicit WebSocketAsyncWaiter(WebSocket* proxy);
  ~WebSocketAsyncWaiter();

 private:
  WebSocket* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(WebSocketAsyncWaiter);
};




}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_WEBSOCKET_MOJOM_TEST_UTILS_H_