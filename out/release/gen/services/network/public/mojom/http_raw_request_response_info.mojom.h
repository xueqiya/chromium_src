// services/network/public/mojom/http_raw_request_response_info.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_HTTP_RAW_REQUEST_RESPONSE_INFO_MOJOM_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_HTTP_RAW_REQUEST_RESPONSE_INFO_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "services/network/public/mojom/http_raw_request_response_info.mojom-shared.h"
#include "services/network/public/mojom/http_raw_request_response_info.mojom-forward.h"
#include "services/network/public/mojom/http_raw_headers.mojom.h"
#include <string>
#include <vector>








namespace network {
namespace mojom {








class  HttpRawRequestResponseInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<HttpRawRequestResponseInfo, T>::value>;
  using DataView = HttpRawRequestResponseInfoDataView;
  using Data_ = internal::HttpRawRequestResponseInfo_Data;

  template <typename... Args>
  static HttpRawRequestResponseInfoPtr New(Args&&... args) {
    return HttpRawRequestResponseInfoPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static HttpRawRequestResponseInfoPtr From(const U& u) {
    return mojo::TypeConverter<HttpRawRequestResponseInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpRawRequestResponseInfo>::Convert(*this);
  }


  HttpRawRequestResponseInfo();

  HttpRawRequestResponseInfo(
      int32_t http_status_code,
      const std::string& http_status_text,
      std::vector<::network::mojom::HttpRawHeaderPairPtr> request_headers,
      std::vector<::network::mojom::HttpRawHeaderPairPtr> response_headers,
      const std::string& request_headers_text,
      const std::string& response_headers_text);

  ~HttpRawRequestResponseInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = HttpRawRequestResponseInfoPtr>
  HttpRawRequestResponseInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, HttpRawRequestResponseInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        HttpRawRequestResponseInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        HttpRawRequestResponseInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::HttpRawRequestResponseInfo_UnserializedMessageContext<
            UserType, HttpRawRequestResponseInfo::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<HttpRawRequestResponseInfo::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return HttpRawRequestResponseInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::HttpRawRequestResponseInfo_UnserializedMessageContext<
            UserType, HttpRawRequestResponseInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<HttpRawRequestResponseInfo::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  int32_t http_status_code;
  
  std::string http_status_text;
  
  std::vector<::network::mojom::HttpRawHeaderPairPtr> request_headers;
  
  std::vector<::network::mojom::HttpRawHeaderPairPtr> response_headers;
  
  std::string request_headers_text;
  
  std::string response_headers_text;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(HttpRawRequestResponseInfo);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, HttpRawRequestResponseInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, HttpRawRequestResponseInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, HttpRawRequestResponseInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, HttpRawRequestResponseInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
HttpRawRequestResponseInfoPtr HttpRawRequestResponseInfo::Clone() const {
  return New(
      mojo::Clone(http_status_code),
      mojo::Clone(http_status_text),
      mojo::Clone(request_headers),
      mojo::Clone(response_headers),
      mojo::Clone(request_headers_text),
      mojo::Clone(response_headers_text)
  );
}

template <typename T, HttpRawRequestResponseInfo::EnableIfSame<T>*>
bool HttpRawRequestResponseInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->http_status_code, other_struct.http_status_code))
    return false;
  if (!mojo::Equals(this->http_status_text, other_struct.http_status_text))
    return false;
  if (!mojo::Equals(this->request_headers, other_struct.request_headers))
    return false;
  if (!mojo::Equals(this->response_headers, other_struct.response_headers))
    return false;
  if (!mojo::Equals(this->request_headers_text, other_struct.request_headers_text))
    return false;
  if (!mojo::Equals(this->response_headers_text, other_struct.response_headers_text))
    return false;
  return true;
}

template <typename T, HttpRawRequestResponseInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.http_status_code < rhs.http_status_code)
    return true;
  if (rhs.http_status_code < lhs.http_status_code)
    return false;
  if (lhs.http_status_text < rhs.http_status_text)
    return true;
  if (rhs.http_status_text < lhs.http_status_text)
    return false;
  if (lhs.request_headers < rhs.request_headers)
    return true;
  if (rhs.request_headers < lhs.request_headers)
    return false;
  if (lhs.response_headers < rhs.response_headers)
    return true;
  if (rhs.response_headers < lhs.response_headers)
    return false;
  if (lhs.request_headers_text < rhs.request_headers_text)
    return true;
  if (rhs.request_headers_text < lhs.request_headers_text)
    return false;
  if (lhs.response_headers_text < rhs.response_headers_text)
    return true;
  if (rhs.response_headers_text < lhs.response_headers_text)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace network

namespace mojo {


template <>
struct  StructTraits<::network::mojom::HttpRawRequestResponseInfo::DataView,
                                         ::network::mojom::HttpRawRequestResponseInfoPtr> {
  static bool IsNull(const ::network::mojom::HttpRawRequestResponseInfoPtr& input) { return !input; }
  static void SetToNull(::network::mojom::HttpRawRequestResponseInfoPtr* output) { output->reset(); }

  static decltype(::network::mojom::HttpRawRequestResponseInfo::http_status_code) http_status_code(
      const ::network::mojom::HttpRawRequestResponseInfoPtr& input) {
    return input->http_status_code;
  }

  static const decltype(::network::mojom::HttpRawRequestResponseInfo::http_status_text)& http_status_text(
      const ::network::mojom::HttpRawRequestResponseInfoPtr& input) {
    return input->http_status_text;
  }

  static const decltype(::network::mojom::HttpRawRequestResponseInfo::request_headers)& request_headers(
      const ::network::mojom::HttpRawRequestResponseInfoPtr& input) {
    return input->request_headers;
  }

  static const decltype(::network::mojom::HttpRawRequestResponseInfo::response_headers)& response_headers(
      const ::network::mojom::HttpRawRequestResponseInfoPtr& input) {
    return input->response_headers;
  }

  static const decltype(::network::mojom::HttpRawRequestResponseInfo::request_headers_text)& request_headers_text(
      const ::network::mojom::HttpRawRequestResponseInfoPtr& input) {
    return input->request_headers_text;
  }

  static const decltype(::network::mojom::HttpRawRequestResponseInfo::response_headers_text)& response_headers_text(
      const ::network::mojom::HttpRawRequestResponseInfoPtr& input) {
    return input->response_headers_text;
  }

  static bool Read(::network::mojom::HttpRawRequestResponseInfo::DataView input, ::network::mojom::HttpRawRequestResponseInfoPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_HTTP_RAW_REQUEST_RESPONSE_INFO_MOJOM_H_