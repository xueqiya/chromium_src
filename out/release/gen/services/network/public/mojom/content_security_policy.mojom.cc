// services/network/public/mojom/content_security_policy.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "services/network/public/mojom/content_security_policy.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "services/network/public/mojom/content_security_policy.mojom-params-data.h"
#include "services/network/public/mojom/content_security_policy.mojom-shared-message-ids.h"

#include "services/network/public/mojom/content_security_policy.mojom-import-headers.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_JUMBO_H_
#endif
namespace network {
namespace mojom {
ContentSecurityPolicyHeader::ContentSecurityPolicyHeader()
    : header_value(),
      type(ContentSecurityPolicyType::kEnforce),
      source(ContentSecurityPolicySource::kHTTP) {}

ContentSecurityPolicyHeader::ContentSecurityPolicyHeader(
    const std::string& header_value_in,
    ContentSecurityPolicyType type_in,
    ContentSecurityPolicySource source_in)
    : header_value(std::move(header_value_in)),
      type(std::move(type_in)),
      source(std::move(source_in)) {}

ContentSecurityPolicyHeader::~ContentSecurityPolicyHeader() = default;
size_t ContentSecurityPolicyHeader::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->header_value);
  seed = mojo::internal::Hash(seed, this->type);
  seed = mojo::internal::Hash(seed, this->source);
  return seed;
}

bool ContentSecurityPolicyHeader::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CSPSource::CSPSource()
    : scheme(),
      host(),
      port(-1),
      path(),
      is_host_wildcard(false),
      is_port_wildcard(false) {}

CSPSource::CSPSource(
    const std::string& scheme_in,
    const std::string& host_in,
    int32_t port_in,
    const std::string& path_in,
    bool is_host_wildcard_in,
    bool is_port_wildcard_in)
    : scheme(std::move(scheme_in)),
      host(std::move(host_in)),
      port(std::move(port_in)),
      path(std::move(path_in)),
      is_host_wildcard(std::move(is_host_wildcard_in)),
      is_port_wildcard(std::move(is_port_wildcard_in)) {}

CSPSource::~CSPSource() = default;
size_t CSPSource::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->scheme);
  seed = mojo::internal::Hash(seed, this->host);
  seed = mojo::internal::Hash(seed, this->port);
  seed = mojo::internal::Hash(seed, this->path);
  seed = mojo::internal::Hash(seed, this->is_host_wildcard);
  seed = mojo::internal::Hash(seed, this->is_port_wildcard);
  return seed;
}

bool CSPSource::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CSPSourceList::CSPSourceList()
    : sources(),
      allow_self(false),
      allow_star(false),
      allow_response_redirects(false) {}

CSPSourceList::CSPSourceList(
    std::vector<CSPSourcePtr> sources_in,
    bool allow_self_in,
    bool allow_star_in,
    bool allow_response_redirects_in)
    : sources(std::move(sources_in)),
      allow_self(std::move(allow_self_in)),
      allow_star(std::move(allow_star_in)),
      allow_response_redirects(std::move(allow_response_redirects_in)) {}

CSPSourceList::~CSPSourceList() = default;

bool CSPSourceList::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CSPDirective::CSPDirective()
    : name(),
      source_list() {}

CSPDirective::CSPDirective(
    CSPDirectiveName name_in,
    CSPSourceListPtr source_list_in)
    : name(std::move(name_in)),
      source_list(std::move(source_list_in)) {}

CSPDirective::~CSPDirective() = default;

bool CSPDirective::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ContentSecurityPolicy::ContentSecurityPolicy()
    : directives(),
      header(),
      use_reporting_api(false),
      report_endpoints() {}

ContentSecurityPolicy::ContentSecurityPolicy(
    std::vector<CSPDirectivePtr> directives_in,
    ContentSecurityPolicyHeaderPtr header_in,
    bool use_reporting_api_in,
    std::vector<std::string> report_endpoints_in)
    : directives(std::move(directives_in)),
      header(std::move(header_in)),
      use_reporting_api(std::move(use_reporting_api_in)),
      report_endpoints(std::move(report_endpoints_in)) {}

ContentSecurityPolicy::~ContentSecurityPolicy() = default;

bool ContentSecurityPolicy::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace network

namespace mojo {


// static
bool StructTraits<::network::mojom::ContentSecurityPolicyHeader::DataView, ::network::mojom::ContentSecurityPolicyHeaderPtr>::Read(
    ::network::mojom::ContentSecurityPolicyHeader::DataView input,
    ::network::mojom::ContentSecurityPolicyHeaderPtr* output) {
  bool success = true;
  ::network::mojom::ContentSecurityPolicyHeaderPtr result(::network::mojom::ContentSecurityPolicyHeader::New());
  
      if (success && !input.ReadHeaderValue(&result->header_value))
        success = false;
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadSource(&result->source))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::CSPSource::DataView, ::network::mojom::CSPSourcePtr>::Read(
    ::network::mojom::CSPSource::DataView input,
    ::network::mojom::CSPSourcePtr* output) {
  bool success = true;
  ::network::mojom::CSPSourcePtr result(::network::mojom::CSPSource::New());
  
      if (success && !input.ReadScheme(&result->scheme))
        success = false;
      if (success && !input.ReadHost(&result->host))
        success = false;
      if (success)
        result->port = input.port();
      if (success && !input.ReadPath(&result->path))
        success = false;
      if (success)
        result->is_host_wildcard = input.is_host_wildcard();
      if (success)
        result->is_port_wildcard = input.is_port_wildcard();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::CSPSourceList::DataView, ::network::mojom::CSPSourceListPtr>::Read(
    ::network::mojom::CSPSourceList::DataView input,
    ::network::mojom::CSPSourceListPtr* output) {
  bool success = true;
  ::network::mojom::CSPSourceListPtr result(::network::mojom::CSPSourceList::New());
  
      if (success && !input.ReadSources(&result->sources))
        success = false;
      if (success)
        result->allow_self = input.allow_self();
      if (success)
        result->allow_star = input.allow_star();
      if (success)
        result->allow_response_redirects = input.allow_response_redirects();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::CSPDirective::DataView, ::network::mojom::CSPDirectivePtr>::Read(
    ::network::mojom::CSPDirective::DataView input,
    ::network::mojom::CSPDirectivePtr* output) {
  bool success = true;
  ::network::mojom::CSPDirectivePtr result(::network::mojom::CSPDirective::New());
  
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadSourceList(&result->source_list))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::ContentSecurityPolicy::DataView, ::network::mojom::ContentSecurityPolicyPtr>::Read(
    ::network::mojom::ContentSecurityPolicy::DataView input,
    ::network::mojom::ContentSecurityPolicyPtr* output) {
  bool success = true;
  ::network::mojom::ContentSecurityPolicyPtr result(::network::mojom::ContentSecurityPolicy::New());
  
      if (success && !input.ReadDirectives(&result->directives))
        success = false;
      if (success && !input.ReadHeader(&result->header))
        success = false;
      if (success)
        result->use_reporting_api = input.use_reporting_api();
      if (success && !input.ReadReportEndpoints(&result->report_endpoints))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif