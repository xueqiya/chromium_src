// services/network/public/mojom/url_response_head.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "services/network/public/mojom/url_response_head.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "services/network/public/mojom/url_response_head.mojom-params-data.h"
#include "services/network/public/mojom/url_response_head.mojom-shared-message-ids.h"

#include "services/network/public/mojom/url_response_head.mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_URL_RESPONSE_HEAD_MOJOM_BLINK_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_URL_RESPONSE_HEAD_MOJOM_BLINK_JUMBO_H_
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "services/network/public/cpp/ip_address_mojom_traits.h"
#include "services/network/public/cpp/ip_endpoint_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/kurl_mojom_traits.h"
#endif
namespace network {
namespace mojom {
namespace blink {
URLResponseHead::URLResponseHead()
    : request_time(),
      response_time(),
      headers(),
      mime_type(),
      charset(),
      ct_policy_compliance(),
      content_length(-1),
      encoded_data_length(-1),
      encoded_body_length(-1),
      network_accessed(false),
      appcache_id(),
      appcache_manifest_url(),
      load_timing(),
      raw_request_response_info(),
      was_fetched_via_spdy(false),
      was_alpn_negotiated(),
      was_alternate_protocol_available(false),
      connection_info(),
      alpn_negotiated_protocol(),
      remote_endpoint(),
      was_fetched_via_cache(false),
      proxy_server(),
      was_fetched_via_service_worker(false),
      was_fallback_required_by_service_worker(),
      url_list_via_service_worker(),
      response_type(),
      is_in_cache_storage(false),
      cache_storage_cache_name(),
      cert_status(0U),
      ssl_info(),
      cors_exposed_header_names(),
      did_service_worker_navigation_preload(false),
      should_report_corb_blocking(false),
      async_revalidation_requested(false),
      did_mime_sniff(false),
      is_signed_exchange_inner_response(false),
      was_in_prefetch_cache(false),
      intercepted_by_plugin(false),
      is_legacy_tls_version(false),
      timing_allow_passed(false),
      auth_challenge_info(),
      content_security_policy(),
      request_start(),
      response_start(),
      origin_policy(),
      recursive_prefetch_token(),
      cross_origin_embedder_policy(::network::mojom::blink::CrossOriginEmbedderPolicy::kNone),
      cross_origin_opener_policy(::network::mojom::blink::CrossOriginOpenerPolicy::kUnsafeNone) {}

URLResponseHead::URLResponseHead(
    ::base::Time request_time_in,
    ::base::Time response_time_in,
    ::network::mojom::blink::HttpResponseHeadersPtr headers_in,
    const WTF::String& mime_type_in,
    const WTF::String& charset_in,
    ::network::mojom::blink::CTPolicyCompliance ct_policy_compliance_in,
    int64_t content_length_in,
    int64_t encoded_data_length_in,
    int64_t encoded_body_length_in,
    bool network_accessed_in,
    int64_t appcache_id_in,
    const ::blink::KURL& appcache_manifest_url_in,
    ::network::mojom::blink::LoadTimingInfoPtr load_timing_in,
    ::network::mojom::blink::HttpRawRequestResponseInfoPtr raw_request_response_info_in,
    bool was_fetched_via_spdy_in,
    bool was_alpn_negotiated_in,
    bool was_alternate_protocol_available_in,
    ::network::mojom::blink::ConnectionInfo connection_info_in,
    const WTF::String& alpn_negotiated_protocol_in,
    const ::net::IPEndPoint& remote_endpoint_in,
    bool was_fetched_via_cache_in,
    ::proxy_resolver::mojom::blink::ProxyServerPtr proxy_server_in,
    bool was_fetched_via_service_worker_in,
    bool was_fallback_required_by_service_worker_in,
    WTF::Vector<::blink::KURL> url_list_via_service_worker_in,
    ::network::mojom::blink::FetchResponseType response_type_in,
    bool is_in_cache_storage_in,
    const WTF::String& cache_storage_cache_name_in,
    uint32_t cert_status_in,
    ::network::mojom::blink::SSLInfoPtr ssl_info_in,
    WTF::Vector<WTF::String> cors_exposed_header_names_in,
    bool did_service_worker_navigation_preload_in,
    bool should_report_corb_blocking_in,
    bool async_revalidation_requested_in,
    bool did_mime_sniff_in,
    bool is_signed_exchange_inner_response_in,
    bool was_in_prefetch_cache_in,
    bool intercepted_by_plugin_in,
    bool is_legacy_tls_version_in,
    bool timing_allow_passed_in,
    ::network::mojom::blink::AuthChallengeInfoPtr auth_challenge_info_in,
    WTF::Vector<::network::mojom::blink::ContentSecurityPolicyPtr> content_security_policy_in,
    ::base::TimeTicks request_start_in,
    ::base::TimeTicks response_start_in,
    ::network::mojom::blink::OriginPolicyPtr origin_policy_in,
    const base::Optional<::base::UnguessableToken>& recursive_prefetch_token_in,
    ::network::mojom::blink::CrossOriginEmbedderPolicy cross_origin_embedder_policy_in,
    ::network::mojom::blink::CrossOriginOpenerPolicy cross_origin_opener_policy_in)
    : request_time(std::move(request_time_in)),
      response_time(std::move(response_time_in)),
      headers(std::move(headers_in)),
      mime_type(std::move(mime_type_in)),
      charset(std::move(charset_in)),
      ct_policy_compliance(std::move(ct_policy_compliance_in)),
      content_length(std::move(content_length_in)),
      encoded_data_length(std::move(encoded_data_length_in)),
      encoded_body_length(std::move(encoded_body_length_in)),
      network_accessed(std::move(network_accessed_in)),
      appcache_id(std::move(appcache_id_in)),
      appcache_manifest_url(std::move(appcache_manifest_url_in)),
      load_timing(std::move(load_timing_in)),
      raw_request_response_info(std::move(raw_request_response_info_in)),
      was_fetched_via_spdy(std::move(was_fetched_via_spdy_in)),
      was_alpn_negotiated(std::move(was_alpn_negotiated_in)),
      was_alternate_protocol_available(std::move(was_alternate_protocol_available_in)),
      connection_info(std::move(connection_info_in)),
      alpn_negotiated_protocol(std::move(alpn_negotiated_protocol_in)),
      remote_endpoint(std::move(remote_endpoint_in)),
      was_fetched_via_cache(std::move(was_fetched_via_cache_in)),
      proxy_server(std::move(proxy_server_in)),
      was_fetched_via_service_worker(std::move(was_fetched_via_service_worker_in)),
      was_fallback_required_by_service_worker(std::move(was_fallback_required_by_service_worker_in)),
      url_list_via_service_worker(std::move(url_list_via_service_worker_in)),
      response_type(std::move(response_type_in)),
      is_in_cache_storage(std::move(is_in_cache_storage_in)),
      cache_storage_cache_name(std::move(cache_storage_cache_name_in)),
      cert_status(std::move(cert_status_in)),
      ssl_info(std::move(ssl_info_in)),
      cors_exposed_header_names(std::move(cors_exposed_header_names_in)),
      did_service_worker_navigation_preload(std::move(did_service_worker_navigation_preload_in)),
      should_report_corb_blocking(std::move(should_report_corb_blocking_in)),
      async_revalidation_requested(std::move(async_revalidation_requested_in)),
      did_mime_sniff(std::move(did_mime_sniff_in)),
      is_signed_exchange_inner_response(std::move(is_signed_exchange_inner_response_in)),
      was_in_prefetch_cache(std::move(was_in_prefetch_cache_in)),
      intercepted_by_plugin(std::move(intercepted_by_plugin_in)),
      is_legacy_tls_version(std::move(is_legacy_tls_version_in)),
      timing_allow_passed(std::move(timing_allow_passed_in)),
      auth_challenge_info(std::move(auth_challenge_info_in)),
      content_security_policy(std::move(content_security_policy_in)),
      request_start(std::move(request_start_in)),
      response_start(std::move(response_start_in)),
      origin_policy(std::move(origin_policy_in)),
      recursive_prefetch_token(std::move(recursive_prefetch_token_in)),
      cross_origin_embedder_policy(std::move(cross_origin_embedder_policy_in)),
      cross_origin_opener_policy(std::move(cross_origin_opener_policy_in)) {}

URLResponseHead::~URLResponseHead() = default;

bool URLResponseHead::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace blink
}  // namespace mojom
}  // namespace network

namespace mojo {


// static
bool StructTraits<::network::mojom::blink::URLResponseHead::DataView, ::network::mojom::blink::URLResponseHeadPtr>::Read(
    ::network::mojom::blink::URLResponseHead::DataView input,
    ::network::mojom::blink::URLResponseHeadPtr* output) {
  bool success = true;
  ::network::mojom::blink::URLResponseHeadPtr result(::network::mojom::blink::URLResponseHead::New());
  
      if (success && !input.ReadRequestTime(&result->request_time))
        success = false;
      if (success && !input.ReadResponseTime(&result->response_time))
        success = false;
      if (success && !input.ReadHeaders(&result->headers))
        success = false;
      if (success && !input.ReadMimeType(&result->mime_type))
        success = false;
      if (success && !input.ReadCharset(&result->charset))
        success = false;
      if (success && !input.ReadCtPolicyCompliance(&result->ct_policy_compliance))
        success = false;
      if (success)
        result->content_length = input.content_length();
      if (success)
        result->encoded_data_length = input.encoded_data_length();
      if (success)
        result->encoded_body_length = input.encoded_body_length();
      if (success)
        result->network_accessed = input.network_accessed();
      if (success)
        result->appcache_id = input.appcache_id();
      if (success && !input.ReadAppcacheManifestUrl(&result->appcache_manifest_url))
        success = false;
      if (success && !input.ReadLoadTiming(&result->load_timing))
        success = false;
      if (success && !input.ReadRawRequestResponseInfo(&result->raw_request_response_info))
        success = false;
      if (success)
        result->was_fetched_via_spdy = input.was_fetched_via_spdy();
      if (success)
        result->was_alpn_negotiated = input.was_alpn_negotiated();
      if (success)
        result->was_alternate_protocol_available = input.was_alternate_protocol_available();
      if (success && !input.ReadConnectionInfo(&result->connection_info))
        success = false;
      if (success && !input.ReadAlpnNegotiatedProtocol(&result->alpn_negotiated_protocol))
        success = false;
      if (success && !input.ReadRemoteEndpoint(&result->remote_endpoint))
        success = false;
      if (success)
        result->was_fetched_via_cache = input.was_fetched_via_cache();
      if (success && !input.ReadProxyServer(&result->proxy_server))
        success = false;
      if (success)
        result->was_fetched_via_service_worker = input.was_fetched_via_service_worker();
      if (success)
        result->was_fallback_required_by_service_worker = input.was_fallback_required_by_service_worker();
      if (success && !input.ReadUrlListViaServiceWorker(&result->url_list_via_service_worker))
        success = false;
      if (success && !input.ReadResponseType(&result->response_type))
        success = false;
      if (success)
        result->is_in_cache_storage = input.is_in_cache_storage();
      if (success && !input.ReadCacheStorageCacheName(&result->cache_storage_cache_name))
        success = false;
      if (success)
        result->cert_status = input.cert_status();
      if (success && !input.ReadSslInfo(&result->ssl_info))
        success = false;
      if (success && !input.ReadCorsExposedHeaderNames(&result->cors_exposed_header_names))
        success = false;
      if (success)
        result->did_service_worker_navigation_preload = input.did_service_worker_navigation_preload();
      if (success)
        result->should_report_corb_blocking = input.should_report_corb_blocking();
      if (success)
        result->async_revalidation_requested = input.async_revalidation_requested();
      if (success)
        result->did_mime_sniff = input.did_mime_sniff();
      if (success)
        result->is_signed_exchange_inner_response = input.is_signed_exchange_inner_response();
      if (success)
        result->was_in_prefetch_cache = input.was_in_prefetch_cache();
      if (success)
        result->intercepted_by_plugin = input.intercepted_by_plugin();
      if (success)
        result->is_legacy_tls_version = input.is_legacy_tls_version();
      if (success)
        result->timing_allow_passed = input.timing_allow_passed();
      if (success && !input.ReadAuthChallengeInfo(&result->auth_challenge_info))
        success = false;
      if (success && !input.ReadContentSecurityPolicy(&result->content_security_policy))
        success = false;
      if (success && !input.ReadRequestStart(&result->request_start))
        success = false;
      if (success && !input.ReadResponseStart(&result->response_start))
        success = false;
      if (success && !input.ReadOriginPolicy(&result->origin_policy))
        success = false;
      if (success && !input.ReadRecursivePrefetchToken(&result->recursive_prefetch_token))
        success = false;
      if (success && !input.ReadCrossOriginEmbedderPolicy(&result->cross_origin_embedder_policy))
        success = false;
      if (success && !input.ReadCrossOriginOpenerPolicy(&result->cross_origin_opener_policy))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif