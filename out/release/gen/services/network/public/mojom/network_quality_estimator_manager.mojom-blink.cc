// services/network/public/mojom/network_quality_estimator_manager.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "services/network/public/mojom/network_quality_estimator_manager.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "services/network/public/mojom/network_quality_estimator_manager.mojom-params-data.h"
#include "services/network/public/mojom/network_quality_estimator_manager.mojom-shared-message-ids.h"

#include "services/network/public/mojom/network_quality_estimator_manager.mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_QUALITY_ESTIMATOR_MANAGER_MOJOM_BLINK_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_QUALITY_ESTIMATOR_MANAGER_MOJOM_BLINK_JUMBO_H_
#include "mojo/public/cpp/base/time_mojom_traits.h"
#endif
namespace network {
namespace mojom {
namespace blink {
const char NetworkQualityEstimatorManagerClient::Name_[] = "network.mojom.NetworkQualityEstimatorManagerClient";

NetworkQualityEstimatorManagerClientProxy::NetworkQualityEstimatorManagerClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void NetworkQualityEstimatorManagerClientProxy::OnNetworkQualityChanged(
    ::network::mojom::blink::EffectiveConnectionType in_type, ::base::TimeDelta in_http_rtt, ::base::TimeDelta in_transport_rtt, int32_t in_downlink_bandwidth_kbps) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "network::mojom::NetworkQualityEstimatorManagerClient::OnNetworkQualityChanged");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kNetworkQualityEstimatorManagerClient_OnNetworkQualityChanged_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::network::mojom::internal::NetworkQualityEstimatorManagerClient_OnNetworkQualityChanged_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::network::mojom::EffectiveConnectionType>(
      in_type, &params->type);
  typename decltype(params->http_rtt)::BaseType::BufferWriter
      http_rtt_writer;
  mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
      in_http_rtt, buffer, &http_rtt_writer, &serialization_context);
  params->http_rtt.Set(
      http_rtt_writer.is_null() ? nullptr : http_rtt_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->http_rtt.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null http_rtt in NetworkQualityEstimatorManagerClient.OnNetworkQualityChanged request");
  typename decltype(params->transport_rtt)::BaseType::BufferWriter
      transport_rtt_writer;
  mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
      in_transport_rtt, buffer, &transport_rtt_writer, &serialization_context);
  params->transport_rtt.Set(
      transport_rtt_writer.is_null() ? nullptr : transport_rtt_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->transport_rtt.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null transport_rtt in NetworkQualityEstimatorManagerClient.OnNetworkQualityChanged request");
  params->downlink_bandwidth_kbps = in_downlink_bandwidth_kbps;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(NetworkQualityEstimatorManagerClient::Name_);
  message.set_method_name("OnNetworkQualityChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool NetworkQualityEstimatorManagerClientStubDispatch::Accept(
    NetworkQualityEstimatorManagerClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kNetworkQualityEstimatorManagerClient_OnNetworkQualityChanged_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)network::mojom::NetworkQualityEstimatorManagerClient::OnNetworkQualityChanged",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)network::mojom::NetworkQualityEstimatorManagerClient::OnNetworkQualityChanged");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::NetworkQualityEstimatorManagerClient_OnNetworkQualityChanged_Params_Data* params =
          reinterpret_cast<internal::NetworkQualityEstimatorManagerClient_OnNetworkQualityChanged_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::network::mojom::blink::EffectiveConnectionType p_type{};
      ::base::TimeDelta p_http_rtt{};
      ::base::TimeDelta p_transport_rtt{};
      int32_t p_downlink_bandwidth_kbps{};
      NetworkQualityEstimatorManagerClient_OnNetworkQualityChanged_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadType(&p_type))
        success = false;
      if (success && !input_data_view.ReadHttpRtt(&p_http_rtt))
        success = false;
      if (success && !input_data_view.ReadTransportRtt(&p_transport_rtt))
        success = false;
      if (success)
        p_downlink_bandwidth_kbps = input_data_view.downlink_bandwidth_kbps();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            NetworkQualityEstimatorManagerClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnNetworkQualityChanged(
std::move(p_type), 
std::move(p_http_rtt), 
std::move(p_transport_rtt), 
std::move(p_downlink_bandwidth_kbps));
      return true;
    }
  }
  return false;
}

// static
bool NetworkQualityEstimatorManagerClientStubDispatch::AcceptWithResponder(
    NetworkQualityEstimatorManagerClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kNetworkQualityEstimatorManagerClient_OnNetworkQualityChanged_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kNetworkQualityEstimatorManagerClientValidationInfo[] = {
    {&internal::NetworkQualityEstimatorManagerClient_OnNetworkQualityChanged_Params_Data::Validate,
     nullptr /* no response */},
};

bool NetworkQualityEstimatorManagerClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::network::mojom::blink::NetworkQualityEstimatorManagerClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kNetworkQualityEstimatorManagerClientValidationInfo);
}

const char NetworkQualityEstimatorManager::Name_[] = "network.mojom.NetworkQualityEstimatorManager";

NetworkQualityEstimatorManagerProxy::NetworkQualityEstimatorManagerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void NetworkQualityEstimatorManagerProxy::RequestNotifications(
    mojo::PendingRemote<NetworkQualityEstimatorManagerClient> in_client) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "network::mojom::NetworkQualityEstimatorManager::RequestNotifications");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kNetworkQualityEstimatorManager_RequestNotifications_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::network::mojom::internal::NetworkQualityEstimatorManager_RequestNotifications_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::network::mojom::NetworkQualityEstimatorManagerClientInterfaceBase>>(
      in_client, &params->client, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in NetworkQualityEstimatorManager.RequestNotifications request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(NetworkQualityEstimatorManager::Name_);
  message.set_method_name("RequestNotifications");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool NetworkQualityEstimatorManagerStubDispatch::Accept(
    NetworkQualityEstimatorManager* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kNetworkQualityEstimatorManager_RequestNotifications_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)network::mojom::NetworkQualityEstimatorManager::RequestNotifications",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)network::mojom::NetworkQualityEstimatorManager::RequestNotifications");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::NetworkQualityEstimatorManager_RequestNotifications_Params_Data* params =
          reinterpret_cast<internal::NetworkQualityEstimatorManager_RequestNotifications_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      mojo::PendingRemote<NetworkQualityEstimatorManagerClient> p_client{};
      NetworkQualityEstimatorManager_RequestNotifications_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            NetworkQualityEstimatorManager::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestNotifications(
std::move(p_client));
      return true;
    }
  }
  return false;
}

// static
bool NetworkQualityEstimatorManagerStubDispatch::AcceptWithResponder(
    NetworkQualityEstimatorManager* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kNetworkQualityEstimatorManager_RequestNotifications_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kNetworkQualityEstimatorManagerValidationInfo[] = {
    {&internal::NetworkQualityEstimatorManager_RequestNotifications_Params_Data::Validate,
     nullptr /* no response */},
};

bool NetworkQualityEstimatorManagerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::network::mojom::blink::NetworkQualityEstimatorManager::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kNetworkQualityEstimatorManagerValidationInfo);
}

}  // namespace blink
}  // namespace mojom
}  // namespace network

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif