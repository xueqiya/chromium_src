// services/network/public/mojom/content_security_policy.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "services/network/public/mojom/content_security_policy.mojom-shared.h"
#include "services/network/public/mojom/content_security_policy.mojom-forward.h"
#include <string>
#include <vector>








namespace network {
namespace mojom {





class  ContentSecurityPolicyHeader {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ContentSecurityPolicyHeader, T>::value>;
  using DataView = ContentSecurityPolicyHeaderDataView;
  using Data_ = internal::ContentSecurityPolicyHeader_Data;

  template <typename... Args>
  static ContentSecurityPolicyHeaderPtr New(Args&&... args) {
    return ContentSecurityPolicyHeaderPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ContentSecurityPolicyHeaderPtr From(const U& u) {
    return mojo::TypeConverter<ContentSecurityPolicyHeaderPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ContentSecurityPolicyHeader>::Convert(*this);
  }


  ContentSecurityPolicyHeader();

  ContentSecurityPolicyHeader(
      const std::string& header_value,
      ContentSecurityPolicyType type,
      ContentSecurityPolicySource source);

  ~ContentSecurityPolicyHeader();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ContentSecurityPolicyHeaderPtr>
  ContentSecurityPolicyHeaderPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ContentSecurityPolicyHeader::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;
  size_t Hash(size_t seed) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ContentSecurityPolicyHeader::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ContentSecurityPolicyHeader::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ContentSecurityPolicyHeader_UnserializedMessageContext<
            UserType, ContentSecurityPolicyHeader::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<ContentSecurityPolicyHeader::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ContentSecurityPolicyHeader::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ContentSecurityPolicyHeader_UnserializedMessageContext<
            UserType, ContentSecurityPolicyHeader::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ContentSecurityPolicyHeader::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  std::string header_value;
  
  ContentSecurityPolicyType type;
  
  ContentSecurityPolicySource source;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ContentSecurityPolicyHeader::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ContentSecurityPolicyHeader::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ContentSecurityPolicyHeader::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ContentSecurityPolicyHeader::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}












class  CSPSource {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CSPSource, T>::value>;
  using DataView = CSPSourceDataView;
  using Data_ = internal::CSPSource_Data;

  template <typename... Args>
  static CSPSourcePtr New(Args&&... args) {
    return CSPSourcePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CSPSourcePtr From(const U& u) {
    return mojo::TypeConverter<CSPSourcePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CSPSource>::Convert(*this);
  }


  CSPSource();

  CSPSource(
      const std::string& scheme,
      const std::string& host,
      int32_t port,
      const std::string& path,
      bool is_host_wildcard,
      bool is_port_wildcard);

  ~CSPSource();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CSPSourcePtr>
  CSPSourcePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CSPSource::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;
  size_t Hash(size_t seed) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CSPSource::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CSPSource::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CSPSource_UnserializedMessageContext<
            UserType, CSPSource::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<CSPSource::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return CSPSource::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CSPSource_UnserializedMessageContext<
            UserType, CSPSource::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CSPSource::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  std::string scheme;
  
  std::string host;
  
  int32_t port;
  
  std::string path;
  
  bool is_host_wildcard;
  
  bool is_port_wildcard;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CSPSource::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CSPSource::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CSPSource::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CSPSource::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  CSPSourceList {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CSPSourceList, T>::value>;
  using DataView = CSPSourceListDataView;
  using Data_ = internal::CSPSourceList_Data;

  template <typename... Args>
  static CSPSourceListPtr New(Args&&... args) {
    return CSPSourceListPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CSPSourceListPtr From(const U& u) {
    return mojo::TypeConverter<CSPSourceListPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CSPSourceList>::Convert(*this);
  }


  CSPSourceList();

  CSPSourceList(
      std::vector<CSPSourcePtr> sources,
      bool allow_self,
      bool allow_star,
      bool allow_response_redirects);

  ~CSPSourceList();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CSPSourceListPtr>
  CSPSourceListPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CSPSourceList::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CSPSourceList::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CSPSourceList::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CSPSourceList_UnserializedMessageContext<
            UserType, CSPSourceList::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<CSPSourceList::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return CSPSourceList::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CSPSourceList_UnserializedMessageContext<
            UserType, CSPSourceList::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CSPSourceList::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  std::vector<CSPSourcePtr> sources;
  
  bool allow_self;
  
  bool allow_star;
  
  bool allow_response_redirects;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(CSPSourceList);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CSPSourceList::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CSPSourceList::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CSPSourceList::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CSPSourceList::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  CSPDirective {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CSPDirective, T>::value>;
  using DataView = CSPDirectiveDataView;
  using Data_ = internal::CSPDirective_Data;

  template <typename... Args>
  static CSPDirectivePtr New(Args&&... args) {
    return CSPDirectivePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CSPDirectivePtr From(const U& u) {
    return mojo::TypeConverter<CSPDirectivePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CSPDirective>::Convert(*this);
  }


  CSPDirective();

  CSPDirective(
      CSPDirectiveName name,
      CSPSourceListPtr source_list);

  ~CSPDirective();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CSPDirectivePtr>
  CSPDirectivePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CSPDirective::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CSPDirective::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CSPDirective::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CSPDirective_UnserializedMessageContext<
            UserType, CSPDirective::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<CSPDirective::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return CSPDirective::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CSPDirective_UnserializedMessageContext<
            UserType, CSPDirective::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CSPDirective::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  CSPDirectiveName name;
  
  CSPSourceListPtr source_list;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(CSPDirective);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CSPDirective::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CSPDirective::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CSPDirective::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CSPDirective::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  ContentSecurityPolicy {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ContentSecurityPolicy, T>::value>;
  using DataView = ContentSecurityPolicyDataView;
  using Data_ = internal::ContentSecurityPolicy_Data;

  template <typename... Args>
  static ContentSecurityPolicyPtr New(Args&&... args) {
    return ContentSecurityPolicyPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ContentSecurityPolicyPtr From(const U& u) {
    return mojo::TypeConverter<ContentSecurityPolicyPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ContentSecurityPolicy>::Convert(*this);
  }


  ContentSecurityPolicy();

  ContentSecurityPolicy(
      std::vector<CSPDirectivePtr> directives,
      ContentSecurityPolicyHeaderPtr header,
      bool use_reporting_api,
      std::vector<std::string> report_endpoints);

  ~ContentSecurityPolicy();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ContentSecurityPolicyPtr>
  ContentSecurityPolicyPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ContentSecurityPolicy::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ContentSecurityPolicy::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ContentSecurityPolicy::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ContentSecurityPolicy_UnserializedMessageContext<
            UserType, ContentSecurityPolicy::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<ContentSecurityPolicy::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ContentSecurityPolicy::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ContentSecurityPolicy_UnserializedMessageContext<
            UserType, ContentSecurityPolicy::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ContentSecurityPolicy::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  std::vector<CSPDirectivePtr> directives;
  
  ContentSecurityPolicyHeaderPtr header;
  
  bool use_reporting_api;
  
  std::vector<std::string> report_endpoints;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(ContentSecurityPolicy);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ContentSecurityPolicy::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ContentSecurityPolicy::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ContentSecurityPolicy::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ContentSecurityPolicy::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
ContentSecurityPolicyHeaderPtr ContentSecurityPolicyHeader::Clone() const {
  return New(
      mojo::Clone(header_value),
      mojo::Clone(type),
      mojo::Clone(source)
  );
}

template <typename T, ContentSecurityPolicyHeader::EnableIfSame<T>*>
bool ContentSecurityPolicyHeader::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->header_value, other_struct.header_value))
    return false;
  if (!mojo::Equals(this->type, other_struct.type))
    return false;
  if (!mojo::Equals(this->source, other_struct.source))
    return false;
  return true;
}

template <typename T, ContentSecurityPolicyHeader::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.header_value < rhs.header_value)
    return true;
  if (rhs.header_value < lhs.header_value)
    return false;
  if (lhs.type < rhs.type)
    return true;
  if (rhs.type < lhs.type)
    return false;
  if (lhs.source < rhs.source)
    return true;
  if (rhs.source < lhs.source)
    return false;
  return false;
}
template <typename StructPtrType>
CSPSourcePtr CSPSource::Clone() const {
  return New(
      mojo::Clone(scheme),
      mojo::Clone(host),
      mojo::Clone(port),
      mojo::Clone(path),
      mojo::Clone(is_host_wildcard),
      mojo::Clone(is_port_wildcard)
  );
}

template <typename T, CSPSource::EnableIfSame<T>*>
bool CSPSource::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->scheme, other_struct.scheme))
    return false;
  if (!mojo::Equals(this->host, other_struct.host))
    return false;
  if (!mojo::Equals(this->port, other_struct.port))
    return false;
  if (!mojo::Equals(this->path, other_struct.path))
    return false;
  if (!mojo::Equals(this->is_host_wildcard, other_struct.is_host_wildcard))
    return false;
  if (!mojo::Equals(this->is_port_wildcard, other_struct.is_port_wildcard))
    return false;
  return true;
}

template <typename T, CSPSource::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.scheme < rhs.scheme)
    return true;
  if (rhs.scheme < lhs.scheme)
    return false;
  if (lhs.host < rhs.host)
    return true;
  if (rhs.host < lhs.host)
    return false;
  if (lhs.port < rhs.port)
    return true;
  if (rhs.port < lhs.port)
    return false;
  if (lhs.path < rhs.path)
    return true;
  if (rhs.path < lhs.path)
    return false;
  if (lhs.is_host_wildcard < rhs.is_host_wildcard)
    return true;
  if (rhs.is_host_wildcard < lhs.is_host_wildcard)
    return false;
  if (lhs.is_port_wildcard < rhs.is_port_wildcard)
    return true;
  if (rhs.is_port_wildcard < lhs.is_port_wildcard)
    return false;
  return false;
}
template <typename StructPtrType>
CSPSourceListPtr CSPSourceList::Clone() const {
  return New(
      mojo::Clone(sources),
      mojo::Clone(allow_self),
      mojo::Clone(allow_star),
      mojo::Clone(allow_response_redirects)
  );
}

template <typename T, CSPSourceList::EnableIfSame<T>*>
bool CSPSourceList::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->sources, other_struct.sources))
    return false;
  if (!mojo::Equals(this->allow_self, other_struct.allow_self))
    return false;
  if (!mojo::Equals(this->allow_star, other_struct.allow_star))
    return false;
  if (!mojo::Equals(this->allow_response_redirects, other_struct.allow_response_redirects))
    return false;
  return true;
}

template <typename T, CSPSourceList::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.sources < rhs.sources)
    return true;
  if (rhs.sources < lhs.sources)
    return false;
  if (lhs.allow_self < rhs.allow_self)
    return true;
  if (rhs.allow_self < lhs.allow_self)
    return false;
  if (lhs.allow_star < rhs.allow_star)
    return true;
  if (rhs.allow_star < lhs.allow_star)
    return false;
  if (lhs.allow_response_redirects < rhs.allow_response_redirects)
    return true;
  if (rhs.allow_response_redirects < lhs.allow_response_redirects)
    return false;
  return false;
}
template <typename StructPtrType>
CSPDirectivePtr CSPDirective::Clone() const {
  return New(
      mojo::Clone(name),
      mojo::Clone(source_list)
  );
}

template <typename T, CSPDirective::EnableIfSame<T>*>
bool CSPDirective::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->name, other_struct.name))
    return false;
  if (!mojo::Equals(this->source_list, other_struct.source_list))
    return false;
  return true;
}

template <typename T, CSPDirective::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.name < rhs.name)
    return true;
  if (rhs.name < lhs.name)
    return false;
  if (lhs.source_list < rhs.source_list)
    return true;
  if (rhs.source_list < lhs.source_list)
    return false;
  return false;
}
template <typename StructPtrType>
ContentSecurityPolicyPtr ContentSecurityPolicy::Clone() const {
  return New(
      mojo::Clone(directives),
      mojo::Clone(header),
      mojo::Clone(use_reporting_api),
      mojo::Clone(report_endpoints)
  );
}

template <typename T, ContentSecurityPolicy::EnableIfSame<T>*>
bool ContentSecurityPolicy::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->directives, other_struct.directives))
    return false;
  if (!mojo::Equals(this->header, other_struct.header))
    return false;
  if (!mojo::Equals(this->use_reporting_api, other_struct.use_reporting_api))
    return false;
  if (!mojo::Equals(this->report_endpoints, other_struct.report_endpoints))
    return false;
  return true;
}

template <typename T, ContentSecurityPolicy::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.directives < rhs.directives)
    return true;
  if (rhs.directives < lhs.directives)
    return false;
  if (lhs.header < rhs.header)
    return true;
  if (rhs.header < lhs.header)
    return false;
  if (lhs.use_reporting_api < rhs.use_reporting_api)
    return true;
  if (rhs.use_reporting_api < lhs.use_reporting_api)
    return false;
  if (lhs.report_endpoints < rhs.report_endpoints)
    return true;
  if (rhs.report_endpoints < lhs.report_endpoints)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace network

namespace mojo {


template <>
struct  StructTraits<::network::mojom::ContentSecurityPolicyHeader::DataView,
                                         ::network::mojom::ContentSecurityPolicyHeaderPtr> {
  static bool IsNull(const ::network::mojom::ContentSecurityPolicyHeaderPtr& input) { return !input; }
  static void SetToNull(::network::mojom::ContentSecurityPolicyHeaderPtr* output) { output->reset(); }

  static const decltype(::network::mojom::ContentSecurityPolicyHeader::header_value)& header_value(
      const ::network::mojom::ContentSecurityPolicyHeaderPtr& input) {
    return input->header_value;
  }

  static decltype(::network::mojom::ContentSecurityPolicyHeader::type) type(
      const ::network::mojom::ContentSecurityPolicyHeaderPtr& input) {
    return input->type;
  }

  static decltype(::network::mojom::ContentSecurityPolicyHeader::source) source(
      const ::network::mojom::ContentSecurityPolicyHeaderPtr& input) {
    return input->source;
  }

  static bool Read(::network::mojom::ContentSecurityPolicyHeader::DataView input, ::network::mojom::ContentSecurityPolicyHeaderPtr* output);
};


template <>
struct  StructTraits<::network::mojom::CSPSource::DataView,
                                         ::network::mojom::CSPSourcePtr> {
  static bool IsNull(const ::network::mojom::CSPSourcePtr& input) { return !input; }
  static void SetToNull(::network::mojom::CSPSourcePtr* output) { output->reset(); }

  static const decltype(::network::mojom::CSPSource::scheme)& scheme(
      const ::network::mojom::CSPSourcePtr& input) {
    return input->scheme;
  }

  static const decltype(::network::mojom::CSPSource::host)& host(
      const ::network::mojom::CSPSourcePtr& input) {
    return input->host;
  }

  static decltype(::network::mojom::CSPSource::port) port(
      const ::network::mojom::CSPSourcePtr& input) {
    return input->port;
  }

  static const decltype(::network::mojom::CSPSource::path)& path(
      const ::network::mojom::CSPSourcePtr& input) {
    return input->path;
  }

  static decltype(::network::mojom::CSPSource::is_host_wildcard) is_host_wildcard(
      const ::network::mojom::CSPSourcePtr& input) {
    return input->is_host_wildcard;
  }

  static decltype(::network::mojom::CSPSource::is_port_wildcard) is_port_wildcard(
      const ::network::mojom::CSPSourcePtr& input) {
    return input->is_port_wildcard;
  }

  static bool Read(::network::mojom::CSPSource::DataView input, ::network::mojom::CSPSourcePtr* output);
};


template <>
struct  StructTraits<::network::mojom::CSPSourceList::DataView,
                                         ::network::mojom::CSPSourceListPtr> {
  static bool IsNull(const ::network::mojom::CSPSourceListPtr& input) { return !input; }
  static void SetToNull(::network::mojom::CSPSourceListPtr* output) { output->reset(); }

  static const decltype(::network::mojom::CSPSourceList::sources)& sources(
      const ::network::mojom::CSPSourceListPtr& input) {
    return input->sources;
  }

  static decltype(::network::mojom::CSPSourceList::allow_self) allow_self(
      const ::network::mojom::CSPSourceListPtr& input) {
    return input->allow_self;
  }

  static decltype(::network::mojom::CSPSourceList::allow_star) allow_star(
      const ::network::mojom::CSPSourceListPtr& input) {
    return input->allow_star;
  }

  static decltype(::network::mojom::CSPSourceList::allow_response_redirects) allow_response_redirects(
      const ::network::mojom::CSPSourceListPtr& input) {
    return input->allow_response_redirects;
  }

  static bool Read(::network::mojom::CSPSourceList::DataView input, ::network::mojom::CSPSourceListPtr* output);
};


template <>
struct  StructTraits<::network::mojom::CSPDirective::DataView,
                                         ::network::mojom::CSPDirectivePtr> {
  static bool IsNull(const ::network::mojom::CSPDirectivePtr& input) { return !input; }
  static void SetToNull(::network::mojom::CSPDirectivePtr* output) { output->reset(); }

  static decltype(::network::mojom::CSPDirective::name) name(
      const ::network::mojom::CSPDirectivePtr& input) {
    return input->name;
  }

  static const decltype(::network::mojom::CSPDirective::source_list)& source_list(
      const ::network::mojom::CSPDirectivePtr& input) {
    return input->source_list;
  }

  static bool Read(::network::mojom::CSPDirective::DataView input, ::network::mojom::CSPDirectivePtr* output);
};


template <>
struct  StructTraits<::network::mojom::ContentSecurityPolicy::DataView,
                                         ::network::mojom::ContentSecurityPolicyPtr> {
  static bool IsNull(const ::network::mojom::ContentSecurityPolicyPtr& input) { return !input; }
  static void SetToNull(::network::mojom::ContentSecurityPolicyPtr* output) { output->reset(); }

  static const decltype(::network::mojom::ContentSecurityPolicy::directives)& directives(
      const ::network::mojom::ContentSecurityPolicyPtr& input) {
    return input->directives;
  }

  static const decltype(::network::mojom::ContentSecurityPolicy::header)& header(
      const ::network::mojom::ContentSecurityPolicyPtr& input) {
    return input->header;
  }

  static decltype(::network::mojom::ContentSecurityPolicy::use_reporting_api) use_reporting_api(
      const ::network::mojom::ContentSecurityPolicyPtr& input) {
    return input->use_reporting_api;
  }

  static const decltype(::network::mojom::ContentSecurityPolicy::report_endpoints)& report_endpoints(
      const ::network::mojom::ContentSecurityPolicyPtr& input) {
    return input->report_endpoints;
  }

  static bool Read(::network::mojom::ContentSecurityPolicy::DataView input, ::network::mojom::ContentSecurityPolicyPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_H_