// services/network/public/mojom/content_security_policy.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4065)
#endif

#include "services/network/public/mojom/content_security_policy.mojom-shared.h"

#include <utility>

#include "base/logging.h"
#include "base/stl_util.h"  // for base::size()
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"

#include "services/network/public/mojom/content_security_policy.mojom-params-data.h"
namespace network {
namespace mojom {

std::ostream& operator<<(std::ostream& os, ContentSecurityPolicyType value) {
  switch(value) {
    case ContentSecurityPolicyType::kReport:
      return os << "ContentSecurityPolicyType::kReport";
    case ContentSecurityPolicyType::kEnforce:
      return os << "ContentSecurityPolicyType::kEnforce";
    default:
      return os << "Unknown ContentSecurityPolicyType value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, ContentSecurityPolicySource value) {
  switch(value) {
    case ContentSecurityPolicySource::kHTTP:
      return os << "ContentSecurityPolicySource::kHTTP";
    case ContentSecurityPolicySource::kMeta:
      return os << "ContentSecurityPolicySource::kMeta";
    case ContentSecurityPolicySource::kOriginPolicy:
      return os << "ContentSecurityPolicySource::kOriginPolicy";
    default:
      return os << "Unknown ContentSecurityPolicySource value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, CSPDisposition value) {
  switch(value) {
    case CSPDisposition::CHECK:
      return os << "CSPDisposition::CHECK";
    case CSPDisposition::DO_NOT_CHECK:
      return os << "CSPDisposition::DO_NOT_CHECK";
    default:
      return os << "Unknown CSPDisposition value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, CSPDirectiveName value) {
  switch(value) {
    case CSPDirectiveName::DefaultSrc:
      return os << "CSPDirectiveName::DefaultSrc";
    case CSPDirectiveName::ChildSrc:
      return os << "CSPDirectiveName::ChildSrc";
    case CSPDirectiveName::FrameSrc:
      return os << "CSPDirectiveName::FrameSrc";
    case CSPDirectiveName::FormAction:
      return os << "CSPDirectiveName::FormAction";
    case CSPDirectiveName::UpgradeInsecureRequests:
      return os << "CSPDirectiveName::UpgradeInsecureRequests";
    case CSPDirectiveName::NavigateTo:
      return os << "CSPDirectiveName::NavigateTo";
    case CSPDirectiveName::FrameAncestors:
      return os << "CSPDirectiveName::FrameAncestors";
    case CSPDirectiveName::Unknown:
      return os << "CSPDirectiveName::Unknown";
    default:
      return os << "Unknown CSPDirectiveName value: " << static_cast<int32_t>(value);
  }
}

namespace internal {


// static
bool ContentSecurityPolicyHeader_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ContentSecurityPolicyHeader_Data* object = static_cast<const ContentSecurityPolicyHeader_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->header_value, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams header_value_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->header_value, validation_context,
                                         &header_value_validate_params)) {
    return false;
  }


  if (!::network::mojom::internal::ContentSecurityPolicyType_Data
        ::Validate(object->type, validation_context))
    return false;


  if (!::network::mojom::internal::ContentSecurityPolicySource_Data
        ::Validate(object->source, validation_context))
    return false;

  return true;
}

ContentSecurityPolicyHeader_Data::ContentSecurityPolicyHeader_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CSPSource_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CSPSource_Data* object = static_cast<const CSPSource_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->scheme, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams scheme_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->scheme, validation_context,
                                         &scheme_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->host, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams host_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->host, validation_context,
                                         &host_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->path, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams path_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->path, validation_context,
                                         &path_validate_params)) {
    return false;
  }

  return true;
}

CSPSource_Data::CSPSource_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CSPSourceList_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CSPSourceList_Data* object = static_cast<const CSPSourceList_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->sources, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams sources_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->sources, validation_context,
                                         &sources_validate_params)) {
    return false;
  }

  return true;
}

CSPSourceList_Data::CSPSourceList_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CSPDirective_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CSPDirective_Data* object = static_cast<const CSPDirective_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }


  if (!::network::mojom::internal::CSPDirectiveName_Data
        ::Validate(object->name, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->source_list, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->source_list, validation_context))
    return false;

  return true;
}

CSPDirective_Data::CSPDirective_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ContentSecurityPolicy_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ContentSecurityPolicy_Data* object = static_cast<const ContentSecurityPolicy_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->directives, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams directives_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->directives, validation_context,
                                         &directives_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->header, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->header, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->report_endpoints, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams report_endpoints_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->report_endpoints, validation_context,
                                         &report_endpoints_validate_params)) {
    return false;
  }

  return true;
}

ContentSecurityPolicy_Data::ContentSecurityPolicy_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace network

#if defined(_MSC_VER)
#pragma warning(pop)
#endif