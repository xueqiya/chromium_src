// services/network/public/mojom/content_security_policy.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_SHARED_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "services/network/public/mojom/content_security_policy.mojom-shared-internal.h"







namespace network {
namespace mojom {
class ContentSecurityPolicyHeaderDataView;

class CSPSourceDataView;

class CSPSourceListDataView;

class CSPDirectiveDataView;

class ContentSecurityPolicyDataView;



}  // namespace mojom
}  // namespace network

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::network::mojom::ContentSecurityPolicyHeaderDataView> {
  using Data = ::network::mojom::internal::ContentSecurityPolicyHeader_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::network::mojom::CSPSourceDataView> {
  using Data = ::network::mojom::internal::CSPSource_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::network::mojom::CSPSourceListDataView> {
  using Data = ::network::mojom::internal::CSPSourceList_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::network::mojom::CSPDirectiveDataView> {
  using Data = ::network::mojom::internal::CSPDirective_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::network::mojom::ContentSecurityPolicyDataView> {
  using Data = ::network::mojom::internal::ContentSecurityPolicy_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace network {
namespace mojom {


enum class ContentSecurityPolicyType : int32_t {
  
  kReport,
  
  kEnforce,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, ContentSecurityPolicyType value);
inline bool IsKnownEnumValue(ContentSecurityPolicyType value) {
  return internal::ContentSecurityPolicyType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ContentSecurityPolicySource : int32_t {
  
  kHTTP,
  
  kMeta,
  
  kOriginPolicy,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, ContentSecurityPolicySource value);
inline bool IsKnownEnumValue(ContentSecurityPolicySource value) {
  return internal::ContentSecurityPolicySource_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class CSPDisposition : int32_t {
  
  CHECK,
  
  DO_NOT_CHECK,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, CSPDisposition value);
inline bool IsKnownEnumValue(CSPDisposition value) {
  return internal::CSPDisposition_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class CSPDirectiveName : int32_t {
  
  DefaultSrc,
  
  ChildSrc,
  
  FrameSrc,
  
  FormAction,
  
  UpgradeInsecureRequests,
  
  NavigateTo,
  
  FrameAncestors,
  
  Unknown,
  kMinValue = 0,
  kMaxValue = 7,
};

 std::ostream& operator<<(std::ostream& os, CSPDirectiveName value);
inline bool IsKnownEnumValue(CSPDirectiveName value) {
  return internal::CSPDirectiveName_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
class ContentSecurityPolicyHeaderDataView {
 public:
  ContentSecurityPolicyHeaderDataView() {}

  ContentSecurityPolicyHeaderDataView(
      internal::ContentSecurityPolicyHeader_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetHeaderValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHeaderValue(UserType* output) {
    auto* pointer = data_->header_value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::network::mojom::ContentSecurityPolicyType>(
        data_value, output);
  }

  ContentSecurityPolicyType type() const {
    return static_cast<ContentSecurityPolicyType>(data_->type);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSource(UserType* output) const {
    auto data_value = data_->source;
    return mojo::internal::Deserialize<::network::mojom::ContentSecurityPolicySource>(
        data_value, output);
  }

  ContentSecurityPolicySource source() const {
    return static_cast<ContentSecurityPolicySource>(data_->source);
  }
 private:
  internal::ContentSecurityPolicyHeader_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class CSPSourceDataView {
 public:
  CSPSourceDataView() {}

  CSPSourceDataView(
      internal::CSPSource_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSchemeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadScheme(UserType* output) {
    auto* pointer = data_->scheme.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetHostDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHost(UserType* output) {
    auto* pointer = data_->host.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  int32_t port() const {
    return data_->port;
  }
  inline void GetPathDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPath(UserType* output) {
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  bool is_host_wildcard() const {
    return data_->is_host_wildcard;
  }
  bool is_port_wildcard() const {
    return data_->is_port_wildcard;
  }
 private:
  internal::CSPSource_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class CSPSourceListDataView {
 public:
  CSPSourceListDataView() {}

  CSPSourceListDataView(
      internal::CSPSourceList_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSourcesDataView(
      mojo::ArrayDataView<CSPSourceDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSources(UserType* output) {
    auto* pointer = data_->sources.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::CSPSourceDataView>>(
        pointer, output, context_);
  }
  bool allow_self() const {
    return data_->allow_self;
  }
  bool allow_star() const {
    return data_->allow_star;
  }
  bool allow_response_redirects() const {
    return data_->allow_response_redirects;
  }
 private:
  internal::CSPSourceList_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class CSPDirectiveDataView {
 public:
  CSPDirectiveDataView() {}

  CSPDirectiveDataView(
      internal::CSPDirective_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) const {
    auto data_value = data_->name;
    return mojo::internal::Deserialize<::network::mojom::CSPDirectiveName>(
        data_value, output);
  }

  CSPDirectiveName name() const {
    return static_cast<CSPDirectiveName>(data_->name);
  }
  inline void GetSourceListDataView(
      CSPSourceListDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSourceList(UserType* output) {
    auto* pointer = data_->source_list.Get();
    return mojo::internal::Deserialize<::network::mojom::CSPSourceListDataView>(
        pointer, output, context_);
  }
 private:
  internal::CSPDirective_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ContentSecurityPolicyDataView {
 public:
  ContentSecurityPolicyDataView() {}

  ContentSecurityPolicyDataView(
      internal::ContentSecurityPolicy_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDirectivesDataView(
      mojo::ArrayDataView<CSPDirectiveDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDirectives(UserType* output) {
    auto* pointer = data_->directives.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::CSPDirectiveDataView>>(
        pointer, output, context_);
  }
  inline void GetHeaderDataView(
      ContentSecurityPolicyHeaderDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHeader(UserType* output) {
    auto* pointer = data_->header.Get();
    return mojo::internal::Deserialize<::network::mojom::ContentSecurityPolicyHeaderDataView>(
        pointer, output, context_);
  }
  bool use_reporting_api() const {
    return data_->use_reporting_api;
  }
  inline void GetReportEndpointsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReportEndpoints(UserType* output) {
    auto* pointer = data_->report_endpoints.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, context_);
  }
 private:
  internal::ContentSecurityPolicy_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace network

namespace std {

template <>
struct hash<::network::mojom::ContentSecurityPolicyType>
    : public mojo::internal::EnumHashImpl<::network::mojom::ContentSecurityPolicyType> {};

template <>
struct hash<::network::mojom::ContentSecurityPolicySource>
    : public mojo::internal::EnumHashImpl<::network::mojom::ContentSecurityPolicySource> {};

template <>
struct hash<::network::mojom::CSPDisposition>
    : public mojo::internal::EnumHashImpl<::network::mojom::CSPDisposition> {};

template <>
struct hash<::network::mojom::CSPDirectiveName>
    : public mojo::internal::EnumHashImpl<::network::mojom::CSPDirectiveName> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::network::mojom::ContentSecurityPolicyType, ::network::mojom::ContentSecurityPolicyType> {
  static ::network::mojom::ContentSecurityPolicyType ToMojom(::network::mojom::ContentSecurityPolicyType input) { return input; }
  static bool FromMojom(::network::mojom::ContentSecurityPolicyType input, ::network::mojom::ContentSecurityPolicyType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::ContentSecurityPolicyType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::ContentSecurityPolicyType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::network::mojom::ContentSecurityPolicyType>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::network::mojom::ContentSecurityPolicySource, ::network::mojom::ContentSecurityPolicySource> {
  static ::network::mojom::ContentSecurityPolicySource ToMojom(::network::mojom::ContentSecurityPolicySource input) { return input; }
  static bool FromMojom(::network::mojom::ContentSecurityPolicySource input, ::network::mojom::ContentSecurityPolicySource* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::ContentSecurityPolicySource, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::ContentSecurityPolicySource, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::network::mojom::ContentSecurityPolicySource>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::network::mojom::CSPDisposition, ::network::mojom::CSPDisposition> {
  static ::network::mojom::CSPDisposition ToMojom(::network::mojom::CSPDisposition input) { return input; }
  static bool FromMojom(::network::mojom::CSPDisposition input, ::network::mojom::CSPDisposition* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::CSPDisposition, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::CSPDisposition, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::network::mojom::CSPDisposition>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::network::mojom::CSPDirectiveName, ::network::mojom::CSPDirectiveName> {
  static ::network::mojom::CSPDirectiveName ToMojom(::network::mojom::CSPDirectiveName input) { return input; }
  static bool FromMojom(::network::mojom::CSPDirectiveName input, ::network::mojom::CSPDirectiveName* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::CSPDirectiveName, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::CSPDirectiveName, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::network::mojom::CSPDirectiveName>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::ContentSecurityPolicyHeaderDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::ContentSecurityPolicyHeaderDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::network::mojom::internal::ContentSecurityPolicyHeader_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::header_value(input)) in_header_value = Traits::header_value(input);
    typename decltype((*output)->header_value)::BaseType::BufferWriter
        header_value_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_header_value, buffer, &header_value_writer, context);
    (*output)->header_value.Set(
        header_value_writer.is_null() ? nullptr : header_value_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->header_value.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null header_value in ContentSecurityPolicyHeader struct");
    mojo::internal::Serialize<::network::mojom::ContentSecurityPolicyType>(
        Traits::type(input), &(*output)->type);
    mojo::internal::Serialize<::network::mojom::ContentSecurityPolicySource>(
        Traits::source(input), &(*output)->source);
  }

  static bool Deserialize(::network::mojom::internal::ContentSecurityPolicyHeader_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::ContentSecurityPolicyHeaderDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::CSPSourceDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::CSPSourceDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::network::mojom::internal::CSPSource_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::scheme(input)) in_scheme = Traits::scheme(input);
    typename decltype((*output)->scheme)::BaseType::BufferWriter
        scheme_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_scheme, buffer, &scheme_writer, context);
    (*output)->scheme.Set(
        scheme_writer.is_null() ? nullptr : scheme_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->scheme.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null scheme in CSPSource struct");
    decltype(Traits::host(input)) in_host = Traits::host(input);
    typename decltype((*output)->host)::BaseType::BufferWriter
        host_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_host, buffer, &host_writer, context);
    (*output)->host.Set(
        host_writer.is_null() ? nullptr : host_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->host.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null host in CSPSource struct");
    (*output)->port = Traits::port(input);
    decltype(Traits::path(input)) in_path = Traits::path(input);
    typename decltype((*output)->path)::BaseType::BufferWriter
        path_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_path, buffer, &path_writer, context);
    (*output)->path.Set(
        path_writer.is_null() ? nullptr : path_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->path.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null path in CSPSource struct");
    (*output)->is_host_wildcard = Traits::is_host_wildcard(input);
    (*output)->is_port_wildcard = Traits::is_port_wildcard(input);
  }

  static bool Deserialize(::network::mojom::internal::CSPSource_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::CSPSourceDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::CSPSourceListDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::CSPSourceListDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::network::mojom::internal::CSPSourceList_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::sources(input)) in_sources = Traits::sources(input);
    typename decltype((*output)->sources)::BaseType::BufferWriter
        sources_writer;
    const mojo::internal::ContainerValidateParams sources_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::CSPSourceDataView>>(
        in_sources, buffer, &sources_writer, &sources_validate_params,
        context);
    (*output)->sources.Set(
        sources_writer.is_null() ? nullptr : sources_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->sources.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null sources in CSPSourceList struct");
    (*output)->allow_self = Traits::allow_self(input);
    (*output)->allow_star = Traits::allow_star(input);
    (*output)->allow_response_redirects = Traits::allow_response_redirects(input);
  }

  static bool Deserialize(::network::mojom::internal::CSPSourceList_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::CSPSourceListDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::CSPDirectiveDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::CSPDirectiveDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::network::mojom::internal::CSPDirective_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::network::mojom::CSPDirectiveName>(
        Traits::name(input), &(*output)->name);
    decltype(Traits::source_list(input)) in_source_list = Traits::source_list(input);
    typename decltype((*output)->source_list)::BaseType::BufferWriter
        source_list_writer;
    mojo::internal::Serialize<::network::mojom::CSPSourceListDataView>(
        in_source_list, buffer, &source_list_writer, context);
    (*output)->source_list.Set(
        source_list_writer.is_null() ? nullptr : source_list_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->source_list.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null source_list in CSPDirective struct");
  }

  static bool Deserialize(::network::mojom::internal::CSPDirective_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::CSPDirectiveDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::ContentSecurityPolicyDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::ContentSecurityPolicyDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::network::mojom::internal::ContentSecurityPolicy_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::directives(input)) in_directives = Traits::directives(input);
    typename decltype((*output)->directives)::BaseType::BufferWriter
        directives_writer;
    const mojo::internal::ContainerValidateParams directives_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::CSPDirectiveDataView>>(
        in_directives, buffer, &directives_writer, &directives_validate_params,
        context);
    (*output)->directives.Set(
        directives_writer.is_null() ? nullptr : directives_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->directives.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null directives in ContentSecurityPolicy struct");
    decltype(Traits::header(input)) in_header = Traits::header(input);
    typename decltype((*output)->header)::BaseType::BufferWriter
        header_writer;
    mojo::internal::Serialize<::network::mojom::ContentSecurityPolicyHeaderDataView>(
        in_header, buffer, &header_writer, context);
    (*output)->header.Set(
        header_writer.is_null() ? nullptr : header_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->header.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null header in ContentSecurityPolicy struct");
    (*output)->use_reporting_api = Traits::use_reporting_api(input);
    decltype(Traits::report_endpoints(input)) in_report_endpoints = Traits::report_endpoints(input);
    typename decltype((*output)->report_endpoints)::BaseType::BufferWriter
        report_endpoints_writer;
    const mojo::internal::ContainerValidateParams report_endpoints_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_report_endpoints, buffer, &report_endpoints_writer, &report_endpoints_validate_params,
        context);
    (*output)->report_endpoints.Set(
        report_endpoints_writer.is_null() ? nullptr : report_endpoints_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->report_endpoints.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null report_endpoints in ContentSecurityPolicy struct");
  }

  static bool Deserialize(::network::mojom::internal::ContentSecurityPolicy_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::ContentSecurityPolicyDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace network {
namespace mojom {

inline void ContentSecurityPolicyHeaderDataView::GetHeaderValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->header_value.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void CSPSourceDataView::GetSchemeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->scheme.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void CSPSourceDataView::GetHostDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->host.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void CSPSourceDataView::GetPathDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->path.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void CSPSourceListDataView::GetSourcesDataView(
    mojo::ArrayDataView<CSPSourceDataView>* output) {
  auto pointer = data_->sources.Get();
  *output = mojo::ArrayDataView<CSPSourceDataView>(pointer, context_);
}


inline void CSPDirectiveDataView::GetSourceListDataView(
    CSPSourceListDataView* output) {
  auto pointer = data_->source_list.Get();
  *output = CSPSourceListDataView(pointer, context_);
}


inline void ContentSecurityPolicyDataView::GetDirectivesDataView(
    mojo::ArrayDataView<CSPDirectiveDataView>* output) {
  auto pointer = data_->directives.Get();
  *output = mojo::ArrayDataView<CSPDirectiveDataView>(pointer, context_);
}
inline void ContentSecurityPolicyDataView::GetHeaderDataView(
    ContentSecurityPolicyHeaderDataView* output) {
  auto pointer = data_->header.Get();
  *output = ContentSecurityPolicyHeaderDataView(pointer, context_);
}
inline void ContentSecurityPolicyDataView::GetReportEndpointsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->report_endpoints.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, context_);
}



}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_SHARED_H_