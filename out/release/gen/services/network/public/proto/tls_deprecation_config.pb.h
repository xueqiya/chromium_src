// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tls_deprecation_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tls_5fdeprecation_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tls_5fdeprecation_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tls_5fdeprecation_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tls_5fdeprecation_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace chrome_browser_ssl {
class LegacyTLSExperimentConfig;
class LegacyTLSExperimentConfigDefaultTypeInternal;
extern LegacyTLSExperimentConfigDefaultTypeInternal _LegacyTLSExperimentConfig_default_instance_;
}  // namespace chrome_browser_ssl
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_ssl::LegacyTLSExperimentConfig* Arena::CreateMaybeMessage<::chrome_browser_ssl::LegacyTLSExperimentConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_ssl {

// ===================================================================

class LegacyTLSExperimentConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_ssl.LegacyTLSExperimentConfig) */ {
 public:
  LegacyTLSExperimentConfig();
  virtual ~LegacyTLSExperimentConfig();

  LegacyTLSExperimentConfig(const LegacyTLSExperimentConfig& from);
  LegacyTLSExperimentConfig(LegacyTLSExperimentConfig&& from) noexcept
    : LegacyTLSExperimentConfig() {
    *this = ::std::move(from);
  }

  inline LegacyTLSExperimentConfig& operator=(const LegacyTLSExperimentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegacyTLSExperimentConfig& operator=(LegacyTLSExperimentConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LegacyTLSExperimentConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LegacyTLSExperimentConfig* internal_default_instance() {
    return reinterpret_cast<const LegacyTLSExperimentConfig*>(
               &_LegacyTLSExperimentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LegacyTLSExperimentConfig& a, LegacyTLSExperimentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LegacyTLSExperimentConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LegacyTLSExperimentConfig* New() const final {
    return CreateMaybeMessage<LegacyTLSExperimentConfig>(nullptr);
  }

  LegacyTLSExperimentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LegacyTLSExperimentConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LegacyTLSExperimentConfig& from);
  void MergeFrom(const LegacyTLSExperimentConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LegacyTLSExperimentConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_ssl.LegacyTLSExperimentConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlSiteHashesFieldNumber = 2,
    kVersionIdFieldNumber = 1,
  };
  // repeated string control_site_hashes = 2;
  int control_site_hashes_size() const;
  void clear_control_site_hashes();
  const std::string& control_site_hashes(int index) const;
  std::string* mutable_control_site_hashes(int index);
  void set_control_site_hashes(int index, const std::string& value);
  void set_control_site_hashes(int index, std::string&& value);
  void set_control_site_hashes(int index, const char* value);
  void set_control_site_hashes(int index, const char* value, size_t size);
  std::string* add_control_site_hashes();
  void add_control_site_hashes(const std::string& value);
  void add_control_site_hashes(std::string&& value);
  void add_control_site_hashes(const char* value);
  void add_control_site_hashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& control_site_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_control_site_hashes();

  // optional uint32 version_id = 1;
  bool has_version_id() const;
  void clear_version_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_id() const;
  void set_version_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:chrome_browser_ssl.LegacyTLSExperimentConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> control_site_hashes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_id_;
  friend struct ::TableStruct_tls_5fdeprecation_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LegacyTLSExperimentConfig

// optional uint32 version_id = 1;
inline bool LegacyTLSExperimentConfig::has_version_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LegacyTLSExperimentConfig::clear_version_id() {
  version_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LegacyTLSExperimentConfig::version_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.LegacyTLSExperimentConfig.version_id)
  return version_id_;
}
inline void LegacyTLSExperimentConfig::set_version_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_id_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.LegacyTLSExperimentConfig.version_id)
}

// repeated string control_site_hashes = 2;
inline int LegacyTLSExperimentConfig::control_site_hashes_size() const {
  return control_site_hashes_.size();
}
inline void LegacyTLSExperimentConfig::clear_control_site_hashes() {
  control_site_hashes_.Clear();
}
inline const std::string& LegacyTLSExperimentConfig::control_site_hashes(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
  return control_site_hashes_.Get(index);
}
inline std::string* LegacyTLSExperimentConfig::mutable_control_site_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
  return control_site_hashes_.Mutable(index);
}
inline void LegacyTLSExperimentConfig::set_control_site_hashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
  control_site_hashes_.Mutable(index)->assign(value);
}
inline void LegacyTLSExperimentConfig::set_control_site_hashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
  control_site_hashes_.Mutable(index)->assign(std::move(value));
}
inline void LegacyTLSExperimentConfig::set_control_site_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  control_site_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
}
inline void LegacyTLSExperimentConfig::set_control_site_hashes(int index, const char* value, size_t size) {
  control_site_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
}
inline std::string* LegacyTLSExperimentConfig::add_control_site_hashes() {
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
  return control_site_hashes_.Add();
}
inline void LegacyTLSExperimentConfig::add_control_site_hashes(const std::string& value) {
  control_site_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
}
inline void LegacyTLSExperimentConfig::add_control_site_hashes(std::string&& value) {
  control_site_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
}
inline void LegacyTLSExperimentConfig::add_control_site_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  control_site_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
}
inline void LegacyTLSExperimentConfig::add_control_site_hashes(const char* value, size_t size) {
  control_site_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LegacyTLSExperimentConfig::control_site_hashes() const {
  // @@protoc_insertion_point(field_list:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
  return control_site_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LegacyTLSExperimentConfig::mutable_control_site_hashes() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_ssl.LegacyTLSExperimentConfig.control_site_hashes)
  return &control_site_hashes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_ssl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tls_5fdeprecation_5fconfig_2eproto
