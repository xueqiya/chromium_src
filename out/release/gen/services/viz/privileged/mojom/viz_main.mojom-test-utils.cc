// services/viz/privileged/mojom/viz_main.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/viz/privileged/mojom/viz_main.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "components/discardable_memory/public/mojom/discardable_shared_memory_manager.mojom.h"
#include "services/network/public/mojom/tcp_socket.mojom.h"
#include "services/viz/public/mojom/compositing/compositing_mode_watcher.mojom.h"
#include "services/viz/privileged/mojom/compositing/frame_sink_manager.mojom.h"
#include "services/viz/privileged/mojom/gl/gpu_host.mojom.h"
#include "services/viz/privileged/mojom/gl/gpu_service.mojom.h"
#include "ui/gfx/mojom/font_render_params.mojom.h"


#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_VIZ_MAIN_MOJOM_JUMBO_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_VIZ_MAIN_MOJOM_JUMBO_H_
#include "ui/gfx/mojom/font_render_params_mojom_traits.h"
#endif


namespace viz {
namespace mojom {


void VizMainInterceptorForTesting::CreateFrameSinkManager(FrameSinkManagerParamsPtr params) {
  GetForwardingInterface()->CreateFrameSinkManager(std::move(params));
}
void VizMainInterceptorForTesting::CreateGpuService(mojo::PendingReceiver<::viz::mojom::GpuService> gpu_service, mojo::PendingRemote<::viz::mojom::GpuHost> gpu_host, mojo::PendingRemote<::discardable_memory::mojom::DiscardableSharedMemoryManager> discardable_memory_manager, mojo::ScopedSharedBufferHandle activity_flags, ::gfx::FontRenderParams::SubpixelRendering subpixel_rendering) {
  GetForwardingInterface()->CreateGpuService(std::move(gpu_service), std::move(gpu_host), std::move(discardable_memory_manager), std::move(activity_flags), std::move(subpixel_rendering));
}
void VizMainInterceptorForTesting::CreateVizDevTools(VizDevToolsParamsPtr params) {
  GetForwardingInterface()->CreateVizDevTools(std::move(params));
}
VizMainAsyncWaiter::VizMainAsyncWaiter(
    VizMain* proxy) : proxy_(proxy) {}

VizMainAsyncWaiter::~VizMainAsyncWaiter() = default;






}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif