// services/viz/privileged/mojom/gl/gpu_host.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/viz/privileged/mojom/gl/gpu_host.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "gpu/ipc/common/gpu_feature_info.mojom.h"
#include "gpu/ipc/common/gpu_info.mojom.h"
#include "gpu/ipc/common/gpu_extra_info.mojom.h"
#include "gpu/ipc/common/surface_handle.mojom.h"
#include "services/viz/privileged/mojom/gl/context_lost_reason.mojom.h"
#include "url/mojom/url.mojom.h"


#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_GL_GPU_HOST_MOJOM_JUMBO_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_GL_GPU_HOST_MOJOM_JUMBO_H_
#include "gpu/ipc/common/gpu_extra_info_mojom_traits.h"
#include "gpu/ipc/common/gpu_feature_info_mojom_traits.h"
#include "gpu/ipc/common/gpu_info_mojom_traits.h"
#include "gpu/ipc/common/vulkan_info_mojom_traits.h"
#include "gpu/ipc/common/vulkan_types_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "services/viz/privileged/cpp/context_lost_reason_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "ui/gfx/mojom/buffer_types_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif


namespace viz {
namespace mojom {


void GpuHostInterceptorForTesting::DidInitialize(const ::gpu::GPUInfo& gpu_info, const ::gpu::GpuFeatureInfo& gpu_feature_info, const base::Optional<::gpu::GPUInfo>& gpu_info_for_hardware_gpu, const base::Optional<::gpu::GpuFeatureInfo>& gpu_feature_info_for_hardware_gpu, const ::gpu::GpuExtraInfo& gpu_extra_info) {
  GetForwardingInterface()->DidInitialize(std::move(gpu_info), std::move(gpu_feature_info), std::move(gpu_info_for_hardware_gpu), std::move(gpu_feature_info_for_hardware_gpu), std::move(gpu_extra_info));
}
void GpuHostInterceptorForTesting::DidFailInitialize() {
  GetForwardingInterface()->DidFailInitialize();
}
void GpuHostInterceptorForTesting::DidCreateContextSuccessfully() {
  GetForwardingInterface()->DidCreateContextSuccessfully();
}
void GpuHostInterceptorForTesting::DidCreateOffscreenContext(const ::GURL& url) {
  GetForwardingInterface()->DidCreateOffscreenContext(std::move(url));
}
void GpuHostInterceptorForTesting::DidDestroyOffscreenContext(const ::GURL& url) {
  GetForwardingInterface()->DidDestroyOffscreenContext(std::move(url));
}
void GpuHostInterceptorForTesting::DidDestroyChannel(int32_t client_id) {
  GetForwardingInterface()->DidDestroyChannel(std::move(client_id));
}
void GpuHostInterceptorForTesting::DidLoseContext(bool offscreen, ::gpu::error::ContextLostReason reason, const ::GURL& active_url) {
  GetForwardingInterface()->DidLoseContext(std::move(offscreen), std::move(reason), std::move(active_url));
}
void GpuHostInterceptorForTesting::DisableGpuCompositing() {
  GetForwardingInterface()->DisableGpuCompositing();
}
void GpuHostInterceptorForTesting::StoreShaderToDisk(int32_t client_id, const std::string& key, const std::string& shader) {
  GetForwardingInterface()->StoreShaderToDisk(std::move(client_id), std::move(key), std::move(shader));
}
void GpuHostInterceptorForTesting::RecordLogMessage(int32_t severity, const std::string& header, const std::string& message) {
  GetForwardingInterface()->RecordLogMessage(std::move(severity), std::move(header), std::move(message));
}
GpuHostAsyncWaiter::GpuHostAsyncWaiter(
    GpuHost* proxy) : proxy_(proxy) {}

GpuHostAsyncWaiter::~GpuHostAsyncWaiter() = default;






}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif