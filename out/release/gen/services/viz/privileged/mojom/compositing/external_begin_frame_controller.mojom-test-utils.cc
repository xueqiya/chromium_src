// services/viz/privileged/mojom/compositing/external_begin_frame_controller.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/viz/privileged/mojom/compositing/external_begin_frame_controller.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "services/viz/public/mojom/compositing/begin_frame_args.mojom.h"


#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_EXTERNAL_BEGIN_FRAME_CONTROLLER_MOJOM_JUMBO_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_EXTERNAL_BEGIN_FRAME_CONTROLLER_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "services/viz/public/cpp/compositing/begin_frame_args_mojom_traits.h"
#endif


namespace viz {
namespace mojom {


void ExternalBeginFrameControllerInterceptorForTesting::IssueExternalBeginFrame(const ::viz::BeginFrameArgs& args, bool force, IssueExternalBeginFrameCallback callback) {
  GetForwardingInterface()->IssueExternalBeginFrame(std::move(args), std::move(force), std::move(callback));
}
ExternalBeginFrameControllerAsyncWaiter::ExternalBeginFrameControllerAsyncWaiter(
    ExternalBeginFrameController* proxy) : proxy_(proxy) {}

ExternalBeginFrameControllerAsyncWaiter::~ExternalBeginFrameControllerAsyncWaiter() = default;

void ExternalBeginFrameControllerAsyncWaiter::IssueExternalBeginFrame(
    const ::viz::BeginFrameArgs& args, bool force, ::viz::BeginFrameAck* out_ack) {
  base::RunLoop loop;
  proxy_->IssueExternalBeginFrame(std::move(args),std::move(force),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::viz::BeginFrameAck* out_ack
,
             const ::viz::BeginFrameAck& ack) {*out_ack = std::move(ack);
            loop->Quit();
          },
          &loop,
          out_ack));
  loop.Run();
}





}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif