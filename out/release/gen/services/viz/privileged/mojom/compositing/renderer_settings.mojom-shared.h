// services/viz/privileged/mojom/compositing/renderer_settings.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_RENDERER_SETTINGS_MOJOM_SHARED_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_RENDERER_SETTINGS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "services/viz/privileged/mojom/compositing/renderer_settings.mojom-shared-internal.h"
#include "services/viz/privileged/mojom/compositing/overlay_strategy.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "ui/gfx/mojom/color_space.mojom-shared.h"







namespace viz {
namespace mojom {
class RendererSettingsDataView;



}  // namespace mojom
}  // namespace viz

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::viz::mojom::RendererSettingsDataView> {
  using Data = ::viz::mojom::internal::RendererSettings_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace viz {
namespace mojom {
class RendererSettingsDataView {
 public:
  RendererSettingsDataView() {}

  RendererSettingsDataView(
      internal::RendererSettings_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool allow_antialiasing() const {
    return data_->allow_antialiasing;
  }
  bool force_antialiasing() const {
    return data_->force_antialiasing;
  }
  bool force_blending_with_shaders() const {
    return data_->force_blending_with_shaders;
  }
  bool tint_gl_composited_content() const {
    return data_->tint_gl_composited_content;
  }
  int32_t highp_threshold_min() const {
    return data_->highp_threshold_min;
  }
  bool partial_swap_enabled() const {
    return data_->partial_swap_enabled;
  }
  bool release_overlay_resources_after_gpu_query() const {
    return data_->release_overlay_resources_after_gpu_query;
  }
  bool should_clear_root_render_pass() const {
    return data_->should_clear_root_render_pass;
  }
  bool show_overdraw_feedback() const {
    return data_->show_overdraw_feedback;
  }
  bool show_aggregated_damage() const {
    return data_->show_aggregated_damage;
  }
  int32_t slow_down_compositing_scale_factor() const {
    return data_->slow_down_compositing_scale_factor;
  }
  bool use_skia_renderer() const {
    return data_->use_skia_renderer;
  }
  bool record_sk_picture() const {
    return data_->record_sk_picture;
  }
  bool allow_overlays() const {
    return data_->allow_overlays;
  }
  bool auto_resize_output_surface() const {
    return data_->auto_resize_output_surface;
  }
  bool requires_alpha_channel() const {
    return data_->requires_alpha_channel;
  }
  bool show_dc_layer_debug_borders() const {
    return data_->show_dc_layer_debug_borders;
  }
  inline void GetInitialScreenSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInitialScreenSize(UserType* output) {
    auto* pointer = data_->initial_screen_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, context_);
  }
  inline void GetColorSpaceDataView(
      ::gfx::mojom::ColorSpaceDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadColorSpace(UserType* output) {
    auto* pointer = data_->color_space.Get();
    return mojo::internal::Deserialize<::gfx::mojom::ColorSpaceDataView>(
        pointer, output, context_);
  }
 private:
  internal::RendererSettings_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace viz

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::RendererSettingsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::RendererSettingsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::viz::mojom::internal::RendererSettings_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->allow_antialiasing = Traits::allow_antialiasing(input);
    (*output)->force_antialiasing = Traits::force_antialiasing(input);
    (*output)->force_blending_with_shaders = Traits::force_blending_with_shaders(input);
    (*output)->tint_gl_composited_content = Traits::tint_gl_composited_content(input);
    (*output)->highp_threshold_min = Traits::highp_threshold_min(input);
    (*output)->partial_swap_enabled = Traits::partial_swap_enabled(input);
    (*output)->release_overlay_resources_after_gpu_query = Traits::release_overlay_resources_after_gpu_query(input);
    (*output)->should_clear_root_render_pass = Traits::should_clear_root_render_pass(input);
    (*output)->show_overdraw_feedback = Traits::show_overdraw_feedback(input);
    (*output)->show_aggregated_damage = Traits::show_aggregated_damage(input);
    (*output)->slow_down_compositing_scale_factor = Traits::slow_down_compositing_scale_factor(input);
    (*output)->use_skia_renderer = Traits::use_skia_renderer(input);
    (*output)->record_sk_picture = Traits::record_sk_picture(input);
    (*output)->allow_overlays = Traits::allow_overlays(input);
    (*output)->auto_resize_output_surface = Traits::auto_resize_output_surface(input);
    (*output)->requires_alpha_channel = Traits::requires_alpha_channel(input);
    (*output)->show_dc_layer_debug_borders = Traits::show_dc_layer_debug_borders(input);
    decltype(Traits::initial_screen_size(input)) in_initial_screen_size = Traits::initial_screen_size(input);
    typename decltype((*output)->initial_screen_size)::BaseType::BufferWriter
        initial_screen_size_writer;
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_initial_screen_size, buffer, &initial_screen_size_writer, context);
    (*output)->initial_screen_size.Set(
        initial_screen_size_writer.is_null() ? nullptr : initial_screen_size_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->initial_screen_size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null initial_screen_size in RendererSettings struct");
    decltype(Traits::color_space(input)) in_color_space = Traits::color_space(input);
    typename decltype((*output)->color_space)::BaseType::BufferWriter
        color_space_writer;
    mojo::internal::Serialize<::gfx::mojom::ColorSpaceDataView>(
        in_color_space, buffer, &color_space_writer, context);
    (*output)->color_space.Set(
        color_space_writer.is_null() ? nullptr : color_space_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->color_space.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null color_space in RendererSettings struct");
  }

  static bool Deserialize(::viz::mojom::internal::RendererSettings_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::RendererSettingsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace viz {
namespace mojom {

inline void RendererSettingsDataView::GetInitialScreenSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->initial_screen_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, context_);
}
inline void RendererSettingsDataView::GetColorSpaceDataView(
    ::gfx::mojom::ColorSpaceDataView* output) {
  auto pointer = data_->color_space.Get();
  *output = ::gfx::mojom::ColorSpaceDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace viz

#endif  // SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_RENDERER_SETTINGS_MOJOM_SHARED_H_