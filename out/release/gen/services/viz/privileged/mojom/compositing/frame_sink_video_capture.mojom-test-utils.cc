// services/viz/privileged/mojom/compositing/frame_sink_video_capture.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/viz/privileged/mojom/compositing/frame_sink_video_capture.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "media/capture/mojom/video_capture_types.mojom.h"
#include "media/mojo/mojom/media_types.mojom.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "mojo/public/mojom/base/shared_memory.mojom.h"
#include "services/viz/public/mojom/compositing/frame_sink_id.mojom.h"
#include "skia/public/mojom/bitmap.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include "ui/gfx/mojom/color_space.mojom.h"


#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_FRAME_SINK_VIDEO_CAPTURE_MOJOM_JUMBO_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_FRAME_SINK_VIDEO_CAPTURE_MOJOM_JUMBO_H_
#include "media/base/ipc/media_param_traits_macros.h"
#include "media/capture/mojom/video_capture_types_mojom_traits.h"
#include "media/mojo/mojom/video_transformation_mojom_traits.h"
#include "mojo/public/cpp/base/big_buffer_mojom_traits.h"
#include "mojo/public/cpp/base/shared_memory_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/values_mojom_traits.h"
#include "services/viz/public/cpp/compositing/frame_sink_id_mojom_traits.h"
#include "skia/public/mojom/bitmap_skbitmap_mojom_traits.h"
#include "skia/public/mojom/image_info_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "ui/gfx/mojom/color_space_mojom_traits.h"
#endif


namespace viz {
namespace mojom {


void FrameSinkVideoConsumerFrameCallbacksInterceptorForTesting::Done() {
  GetForwardingInterface()->Done();
}
void FrameSinkVideoConsumerFrameCallbacksInterceptorForTesting::ProvideFeedback(double utilization) {
  GetForwardingInterface()->ProvideFeedback(std::move(utilization));
}
FrameSinkVideoConsumerFrameCallbacksAsyncWaiter::FrameSinkVideoConsumerFrameCallbacksAsyncWaiter(
    FrameSinkVideoConsumerFrameCallbacks* proxy) : proxy_(proxy) {}

FrameSinkVideoConsumerFrameCallbacksAsyncWaiter::~FrameSinkVideoConsumerFrameCallbacksAsyncWaiter() = default;




void FrameSinkVideoConsumerInterceptorForTesting::OnFrameCaptured(::base::ReadOnlySharedMemoryRegion data, ::media::mojom::VideoFrameInfoPtr info, const ::gfx::Rect& content_rect, mojo::PendingRemote<FrameSinkVideoConsumerFrameCallbacks> callbacks) {
  GetForwardingInterface()->OnFrameCaptured(std::move(data), std::move(info), std::move(content_rect), std::move(callbacks));
}
void FrameSinkVideoConsumerInterceptorForTesting::OnStopped() {
  GetForwardingInterface()->OnStopped();
}
void FrameSinkVideoConsumerInterceptorForTesting::OnLog(const std::string& message) {
  GetForwardingInterface()->OnLog(std::move(message));
}
FrameSinkVideoConsumerAsyncWaiter::FrameSinkVideoConsumerAsyncWaiter(
    FrameSinkVideoConsumer* proxy) : proxy_(proxy) {}

FrameSinkVideoConsumerAsyncWaiter::~FrameSinkVideoConsumerAsyncWaiter() = default;




void FrameSinkVideoCapturerInterceptorForTesting::SetFormat(::media::VideoPixelFormat format, const ::gfx::ColorSpace& color_space) {
  GetForwardingInterface()->SetFormat(std::move(format), std::move(color_space));
}
void FrameSinkVideoCapturerInterceptorForTesting::SetMinCapturePeriod(::base::TimeDelta min_period) {
  GetForwardingInterface()->SetMinCapturePeriod(std::move(min_period));
}
void FrameSinkVideoCapturerInterceptorForTesting::SetMinSizeChangePeriod(::base::TimeDelta min_period) {
  GetForwardingInterface()->SetMinSizeChangePeriod(std::move(min_period));
}
void FrameSinkVideoCapturerInterceptorForTesting::SetResolutionConstraints(const ::gfx::Size& min_size, const ::gfx::Size& max_size, bool use_fixed_aspect_ratio) {
  GetForwardingInterface()->SetResolutionConstraints(std::move(min_size), std::move(max_size), std::move(use_fixed_aspect_ratio));
}
void FrameSinkVideoCapturerInterceptorForTesting::SetAutoThrottlingEnabled(bool enabled) {
  GetForwardingInterface()->SetAutoThrottlingEnabled(std::move(enabled));
}
void FrameSinkVideoCapturerInterceptorForTesting::ChangeTarget(const base::Optional<::viz::FrameSinkId>& frame_sink_id) {
  GetForwardingInterface()->ChangeTarget(std::move(frame_sink_id));
}
void FrameSinkVideoCapturerInterceptorForTesting::Start(mojo::PendingRemote<FrameSinkVideoConsumer> consumer) {
  GetForwardingInterface()->Start(std::move(consumer));
}
void FrameSinkVideoCapturerInterceptorForTesting::Stop() {
  GetForwardingInterface()->Stop();
}
void FrameSinkVideoCapturerInterceptorForTesting::RequestRefreshFrame() {
  GetForwardingInterface()->RequestRefreshFrame();
}
void FrameSinkVideoCapturerInterceptorForTesting::CreateOverlay(int32_t stacking_index, mojo::PendingReceiver<FrameSinkVideoCaptureOverlay> receiver) {
  GetForwardingInterface()->CreateOverlay(std::move(stacking_index), std::move(receiver));
}
FrameSinkVideoCapturerAsyncWaiter::FrameSinkVideoCapturerAsyncWaiter(
    FrameSinkVideoCapturer* proxy) : proxy_(proxy) {}

FrameSinkVideoCapturerAsyncWaiter::~FrameSinkVideoCapturerAsyncWaiter() = default;




void FrameSinkVideoCaptureOverlayInterceptorForTesting::SetImageAndBounds(const ::SkBitmap& image, const ::gfx::RectF& bounds) {
  GetForwardingInterface()->SetImageAndBounds(std::move(image), std::move(bounds));
}
void FrameSinkVideoCaptureOverlayInterceptorForTesting::SetBounds(const ::gfx::RectF& bounds) {
  GetForwardingInterface()->SetBounds(std::move(bounds));
}
FrameSinkVideoCaptureOverlayAsyncWaiter::FrameSinkVideoCaptureOverlayAsyncWaiter(
    FrameSinkVideoCaptureOverlay* proxy) : proxy_(proxy) {}

FrameSinkVideoCaptureOverlayAsyncWaiter::~FrameSinkVideoCaptureOverlayAsyncWaiter() = default;






}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif