// services/viz/privileged/mojom/compositing/display_private.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_DISPLAY_PRIVATE_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_DISPLAY_PRIVATE_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace viz {
namespace mojom {
namespace internal {
class  DisplayPrivate_SetDisplayVisible_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_SetDisplayVisible_Params_Data));
      new (data()) DisplayPrivate_SetDisplayVisible_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_SetDisplayVisible_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_SetDisplayVisible_Params_Data>(index_);
    }
    DisplayPrivate_SetDisplayVisible_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t visible : 1;
  uint8_t padfinal_[7];

 private:
  DisplayPrivate_SetDisplayVisible_Params_Data();
  ~DisplayPrivate_SetDisplayVisible_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_SetDisplayVisible_Params_Data) == 16,
              "Bad sizeof(DisplayPrivate_SetDisplayVisible_Params_Data)");
class  DisplayPrivate_DisableSwapUntilResize_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_DisableSwapUntilResize_Params_Data));
      new (data()) DisplayPrivate_DisableSwapUntilResize_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_DisableSwapUntilResize_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_DisableSwapUntilResize_Params_Data>(index_);
    }
    DisplayPrivate_DisableSwapUntilResize_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DisplayPrivate_DisableSwapUntilResize_Params_Data();
  ~DisplayPrivate_DisableSwapUntilResize_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_DisableSwapUntilResize_Params_Data) == 8,
              "Bad sizeof(DisplayPrivate_DisableSwapUntilResize_Params_Data)");
class  DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data));
      new (data()) DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data>(index_);
    }
    DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data();
  ~DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data) == 8,
              "Bad sizeof(DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data)");
class  DisplayPrivate_Resize_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_Resize_Params_Data));
      new (data()) DisplayPrivate_Resize_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_Resize_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_Resize_Params_Data>(index_);
    }
    DisplayPrivate_Resize_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> size;

 private:
  DisplayPrivate_Resize_Params_Data();
  ~DisplayPrivate_Resize_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_Resize_Params_Data) == 16,
              "Bad sizeof(DisplayPrivate_Resize_Params_Data)");
class  DisplayPrivate_SetDisplayColorMatrix_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_SetDisplayColorMatrix_Params_Data));
      new (data()) DisplayPrivate_SetDisplayColorMatrix_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_SetDisplayColorMatrix_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_SetDisplayColorMatrix_Params_Data>(index_);
    }
    DisplayPrivate_SetDisplayColorMatrix_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Transform_Data> color_matrix;

 private:
  DisplayPrivate_SetDisplayColorMatrix_Params_Data();
  ~DisplayPrivate_SetDisplayColorMatrix_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_SetDisplayColorMatrix_Params_Data) == 16,
              "Bad sizeof(DisplayPrivate_SetDisplayColorMatrix_Params_Data)");
class  DisplayPrivate_SetDisplayColorSpaces_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_SetDisplayColorSpaces_Params_Data));
      new (data()) DisplayPrivate_SetDisplayColorSpaces_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_SetDisplayColorSpaces_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_SetDisplayColorSpaces_Params_Data>(index_);
    }
    DisplayPrivate_SetDisplayColorSpaces_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::DisplayColorSpaces_Data> display_color_spaces;

 private:
  DisplayPrivate_SetDisplayColorSpaces_Params_Data();
  ~DisplayPrivate_SetDisplayColorSpaces_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_SetDisplayColorSpaces_Params_Data) == 16,
              "Bad sizeof(DisplayPrivate_SetDisplayColorSpaces_Params_Data)");
class  DisplayPrivate_SetOutputIsSecure_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_SetOutputIsSecure_Params_Data));
      new (data()) DisplayPrivate_SetOutputIsSecure_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_SetOutputIsSecure_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_SetOutputIsSecure_Params_Data>(index_);
    }
    DisplayPrivate_SetOutputIsSecure_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t secure : 1;
  uint8_t padfinal_[7];

 private:
  DisplayPrivate_SetOutputIsSecure_Params_Data();
  ~DisplayPrivate_SetOutputIsSecure_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_SetOutputIsSecure_Params_Data) == 16,
              "Bad sizeof(DisplayPrivate_SetOutputIsSecure_Params_Data)");
class  DisplayPrivate_SetDisplayVSyncParameters_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_SetDisplayVSyncParameters_Params_Data));
      new (data()) DisplayPrivate_SetDisplayVSyncParameters_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_SetDisplayVSyncParameters_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_SetDisplayVSyncParameters_Params_Data>(index_);
    }
    DisplayPrivate_SetDisplayVSyncParameters_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> timebase;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> interval;

 private:
  DisplayPrivate_SetDisplayVSyncParameters_Params_Data();
  ~DisplayPrivate_SetDisplayVSyncParameters_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_SetDisplayVSyncParameters_Params_Data) == 24,
              "Bad sizeof(DisplayPrivate_SetDisplayVSyncParameters_Params_Data)");
class  DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data));
      new (data()) DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data>(index_);
    }
    DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data();
  ~DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data) == 8,
              "Bad sizeof(DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data)");
class  DisplayPrivate_SetVSyncPaused_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_SetVSyncPaused_Params_Data));
      new (data()) DisplayPrivate_SetVSyncPaused_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_SetVSyncPaused_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_SetVSyncPaused_Params_Data>(index_);
    }
    DisplayPrivate_SetVSyncPaused_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t paused : 1;
  uint8_t padfinal_[7];

 private:
  DisplayPrivate_SetVSyncPaused_Params_Data();
  ~DisplayPrivate_SetVSyncPaused_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_SetVSyncPaused_Params_Data) == 16,
              "Bad sizeof(DisplayPrivate_SetVSyncPaused_Params_Data)");
class  DisplayPrivate_UpdateRefreshRate_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_UpdateRefreshRate_Params_Data));
      new (data()) DisplayPrivate_UpdateRefreshRate_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_UpdateRefreshRate_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_UpdateRefreshRate_Params_Data>(index_);
    }
    DisplayPrivate_UpdateRefreshRate_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float refresh_rate;
  uint8_t padfinal_[4];

 private:
  DisplayPrivate_UpdateRefreshRate_Params_Data();
  ~DisplayPrivate_UpdateRefreshRate_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_UpdateRefreshRate_Params_Data) == 16,
              "Bad sizeof(DisplayPrivate_UpdateRefreshRate_Params_Data)");
class  DisplayPrivate_SetSupportedRefreshRates_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_SetSupportedRefreshRates_Params_Data));
      new (data()) DisplayPrivate_SetSupportedRefreshRates_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_SetSupportedRefreshRates_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_SetSupportedRefreshRates_Params_Data>(index_);
    }
    DisplayPrivate_SetSupportedRefreshRates_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<float>> refresh_rates;

 private:
  DisplayPrivate_SetSupportedRefreshRates_Params_Data();
  ~DisplayPrivate_SetSupportedRefreshRates_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_SetSupportedRefreshRates_Params_Data) == 16,
              "Bad sizeof(DisplayPrivate_SetSupportedRefreshRates_Params_Data)");
class  DisplayPrivate_AddVSyncParameterObserver_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayPrivate_AddVSyncParameterObserver_Params_Data));
      new (data()) DisplayPrivate_AddVSyncParameterObserver_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayPrivate_AddVSyncParameterObserver_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayPrivate_AddVSyncParameterObserver_Params_Data>(index_);
    }
    DisplayPrivate_AddVSyncParameterObserver_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;

 private:
  DisplayPrivate_AddVSyncParameterObserver_Params_Data();
  ~DisplayPrivate_AddVSyncParameterObserver_Params_Data() = delete;
};
static_assert(sizeof(DisplayPrivate_AddVSyncParameterObserver_Params_Data) == 16,
              "Bad sizeof(DisplayPrivate_AddVSyncParameterObserver_Params_Data)");
class  DisplayClient_DidCompleteSwapWithSize_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayClient_DidCompleteSwapWithSize_Params_Data));
      new (data()) DisplayClient_DidCompleteSwapWithSize_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayClient_DidCompleteSwapWithSize_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayClient_DidCompleteSwapWithSize_Params_Data>(index_);
    }
    DisplayClient_DidCompleteSwapWithSize_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> size;

 private:
  DisplayClient_DidCompleteSwapWithSize_Params_Data();
  ~DisplayClient_DidCompleteSwapWithSize_Params_Data() = delete;
};
static_assert(sizeof(DisplayClient_DidCompleteSwapWithSize_Params_Data) == 16,
              "Bad sizeof(DisplayClient_DidCompleteSwapWithSize_Params_Data)");
class  DisplayClient_OnContextCreationResult_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayClient_OnContextCreationResult_Params_Data));
      new (data()) DisplayClient_OnContextCreationResult_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayClient_OnContextCreationResult_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayClient_OnContextCreationResult_Params_Data>(index_);
    }
    DisplayClient_OnContextCreationResult_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  DisplayClient_OnContextCreationResult_Params_Data();
  ~DisplayClient_OnContextCreationResult_Params_Data() = delete;
};
static_assert(sizeof(DisplayClient_OnContextCreationResult_Params_Data) == 16,
              "Bad sizeof(DisplayClient_OnContextCreationResult_Params_Data)");
class  DisplayClient_SetPreferredRefreshRate_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DisplayClient_SetPreferredRefreshRate_Params_Data));
      new (data()) DisplayClient_SetPreferredRefreshRate_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DisplayClient_SetPreferredRefreshRate_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DisplayClient_SetPreferredRefreshRate_Params_Data>(index_);
    }
    DisplayClient_SetPreferredRefreshRate_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float refresh_rate;
  uint8_t padfinal_[4];

 private:
  DisplayClient_SetPreferredRefreshRate_Params_Data();
  ~DisplayClient_SetPreferredRefreshRate_Params_Data() = delete;
};
static_assert(sizeof(DisplayClient_SetPreferredRefreshRate_Params_Data) == 16,
              "Bad sizeof(DisplayClient_SetPreferredRefreshRate_Params_Data)");

}  // namespace internal
class DisplayPrivate_SetDisplayVisible_ParamsDataView {
 public:
  DisplayPrivate_SetDisplayVisible_ParamsDataView() {}

  DisplayPrivate_SetDisplayVisible_ParamsDataView(
      internal::DisplayPrivate_SetDisplayVisible_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool visible() const {
    return data_->visible;
  }
 private:
  internal::DisplayPrivate_SetDisplayVisible_Params_Data* data_ = nullptr;
};

class DisplayPrivate_DisableSwapUntilResize_ParamsDataView {
 public:
  DisplayPrivate_DisableSwapUntilResize_ParamsDataView() {}

  DisplayPrivate_DisableSwapUntilResize_ParamsDataView(
      internal::DisplayPrivate_DisableSwapUntilResize_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DisplayPrivate_DisableSwapUntilResize_Params_Data* data_ = nullptr;
};

class DisplayPrivate_DisableSwapUntilResize_ResponseParamsDataView {
 public:
  DisplayPrivate_DisableSwapUntilResize_ResponseParamsDataView() {}

  DisplayPrivate_DisableSwapUntilResize_ResponseParamsDataView(
      internal::DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DisplayPrivate_DisableSwapUntilResize_ResponseParams_Data* data_ = nullptr;
};

class DisplayPrivate_Resize_ParamsDataView {
 public:
  DisplayPrivate_Resize_ParamsDataView() {}

  DisplayPrivate_Resize_ParamsDataView(
      internal::DisplayPrivate_Resize_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSize(UserType* output) {
    auto* pointer = data_->size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, context_);
  }
 private:
  internal::DisplayPrivate_Resize_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DisplayPrivate_SetDisplayColorMatrix_ParamsDataView {
 public:
  DisplayPrivate_SetDisplayColorMatrix_ParamsDataView() {}

  DisplayPrivate_SetDisplayColorMatrix_ParamsDataView(
      internal::DisplayPrivate_SetDisplayColorMatrix_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetColorMatrixDataView(
      ::gfx::mojom::TransformDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadColorMatrix(UserType* output) {
    auto* pointer = data_->color_matrix.Get();
    return mojo::internal::Deserialize<::gfx::mojom::TransformDataView>(
        pointer, output, context_);
  }
 private:
  internal::DisplayPrivate_SetDisplayColorMatrix_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DisplayPrivate_SetDisplayColorSpaces_ParamsDataView {
 public:
  DisplayPrivate_SetDisplayColorSpaces_ParamsDataView() {}

  DisplayPrivate_SetDisplayColorSpaces_ParamsDataView(
      internal::DisplayPrivate_SetDisplayColorSpaces_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDisplayColorSpacesDataView(
      ::gfx::mojom::DisplayColorSpacesDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDisplayColorSpaces(UserType* output) {
    auto* pointer = data_->display_color_spaces.Get();
    return mojo::internal::Deserialize<::gfx::mojom::DisplayColorSpacesDataView>(
        pointer, output, context_);
  }
 private:
  internal::DisplayPrivate_SetDisplayColorSpaces_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DisplayPrivate_SetOutputIsSecure_ParamsDataView {
 public:
  DisplayPrivate_SetOutputIsSecure_ParamsDataView() {}

  DisplayPrivate_SetOutputIsSecure_ParamsDataView(
      internal::DisplayPrivate_SetOutputIsSecure_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool secure() const {
    return data_->secure;
  }
 private:
  internal::DisplayPrivate_SetOutputIsSecure_Params_Data* data_ = nullptr;
};

class DisplayPrivate_SetDisplayVSyncParameters_ParamsDataView {
 public:
  DisplayPrivate_SetDisplayVSyncParameters_ParamsDataView() {}

  DisplayPrivate_SetDisplayVSyncParameters_ParamsDataView(
      internal::DisplayPrivate_SetDisplayVSyncParameters_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTimebaseDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTimebase(UserType* output) {
    auto* pointer = data_->timebase.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, context_);
  }
  inline void GetIntervalDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInterval(UserType* output) {
    auto* pointer = data_->interval.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
 private:
  internal::DisplayPrivate_SetDisplayVSyncParameters_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_ParamsDataView {
 public:
  DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_ParamsDataView() {}

  DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_ParamsDataView(
      internal::DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params_Data* data_ = nullptr;
};

class DisplayPrivate_SetVSyncPaused_ParamsDataView {
 public:
  DisplayPrivate_SetVSyncPaused_ParamsDataView() {}

  DisplayPrivate_SetVSyncPaused_ParamsDataView(
      internal::DisplayPrivate_SetVSyncPaused_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool paused() const {
    return data_->paused;
  }
 private:
  internal::DisplayPrivate_SetVSyncPaused_Params_Data* data_ = nullptr;
};

class DisplayPrivate_UpdateRefreshRate_ParamsDataView {
 public:
  DisplayPrivate_UpdateRefreshRate_ParamsDataView() {}

  DisplayPrivate_UpdateRefreshRate_ParamsDataView(
      internal::DisplayPrivate_UpdateRefreshRate_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  float refresh_rate() const {
    return data_->refresh_rate;
  }
 private:
  internal::DisplayPrivate_UpdateRefreshRate_Params_Data* data_ = nullptr;
};

class DisplayPrivate_SetSupportedRefreshRates_ParamsDataView {
 public:
  DisplayPrivate_SetSupportedRefreshRates_ParamsDataView() {}

  DisplayPrivate_SetSupportedRefreshRates_ParamsDataView(
      internal::DisplayPrivate_SetSupportedRefreshRates_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRefreshRatesDataView(
      mojo::ArrayDataView<float>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRefreshRates(UserType* output) {
    auto* pointer = data_->refresh_rates.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<float>>(
        pointer, output, context_);
  }
 private:
  internal::DisplayPrivate_SetSupportedRefreshRates_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DisplayPrivate_AddVSyncParameterObserver_ParamsDataView {
 public:
  DisplayPrivate_AddVSyncParameterObserver_ParamsDataView() {}

  DisplayPrivate_AddVSyncParameterObserver_ParamsDataView(
      internal::DisplayPrivate_AddVSyncParameterObserver_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::viz::mojom::VSyncParameterObserverInterfaceBase>>(
            &data_->observer, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DisplayPrivate_AddVSyncParameterObserver_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DisplayClient_DidCompleteSwapWithSize_ParamsDataView {
 public:
  DisplayClient_DidCompleteSwapWithSize_ParamsDataView() {}

  DisplayClient_DidCompleteSwapWithSize_ParamsDataView(
      internal::DisplayClient_DidCompleteSwapWithSize_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSize(UserType* output) {
    auto* pointer = data_->size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, context_);
  }
 private:
  internal::DisplayClient_DidCompleteSwapWithSize_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DisplayClient_OnContextCreationResult_ParamsDataView {
 public:
  DisplayClient_OnContextCreationResult_ParamsDataView() {}

  DisplayClient_OnContextCreationResult_ParamsDataView(
      internal::DisplayClient_OnContextCreationResult_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::gpu::mojom::ContextResult>(
        data_value, output);
  }

  ::gpu::mojom::ContextResult result() const {
    return static_cast<::gpu::mojom::ContextResult>(data_->result);
  }
 private:
  internal::DisplayClient_OnContextCreationResult_Params_Data* data_ = nullptr;
};

class DisplayClient_SetPreferredRefreshRate_ParamsDataView {
 public:
  DisplayClient_SetPreferredRefreshRate_ParamsDataView() {}

  DisplayClient_SetPreferredRefreshRate_ParamsDataView(
      internal::DisplayClient_SetPreferredRefreshRate_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  float refresh_rate() const {
    return data_->refresh_rate;
  }
 private:
  internal::DisplayClient_SetPreferredRefreshRate_Params_Data* data_ = nullptr;
};








inline void DisplayPrivate_Resize_ParamsDataView::GetSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, context_);
}


inline void DisplayPrivate_SetDisplayColorMatrix_ParamsDataView::GetColorMatrixDataView(
    ::gfx::mojom::TransformDataView* output) {
  auto pointer = data_->color_matrix.Get();
  *output = ::gfx::mojom::TransformDataView(pointer, context_);
}


inline void DisplayPrivate_SetDisplayColorSpaces_ParamsDataView::GetDisplayColorSpacesDataView(
    ::gfx::mojom::DisplayColorSpacesDataView* output) {
  auto pointer = data_->display_color_spaces.Get();
  *output = ::gfx::mojom::DisplayColorSpacesDataView(pointer, context_);
}




inline void DisplayPrivate_SetDisplayVSyncParameters_ParamsDataView::GetTimebaseDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->timebase.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, context_);
}
inline void DisplayPrivate_SetDisplayVSyncParameters_ParamsDataView::GetIntervalDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->interval.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}








inline void DisplayPrivate_SetSupportedRefreshRates_ParamsDataView::GetRefreshRatesDataView(
    mojo::ArrayDataView<float>* output) {
  auto pointer = data_->refresh_rates.Get();
  *output = mojo::ArrayDataView<float>(pointer, context_);
}




inline void DisplayClient_DidCompleteSwapWithSize_ParamsDataView::GetSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, context_);
}





}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_DISPLAY_PRIVATE_MOJOM_PARAMS_DATA_H_