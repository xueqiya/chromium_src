// services/viz/privileged/mojom/compositing/frame_sink_video_capture.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_FRAME_SINK_VIDEO_CAPTURE_MOJOM_TEST_UTILS_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_FRAME_SINK_VIDEO_CAPTURE_MOJOM_TEST_UTILS_H_

#include "services/viz/privileged/mojom/compositing/frame_sink_video_capture.mojom.h"


namespace viz {
namespace mojom {


class  FrameSinkVideoConsumerFrameCallbacksInterceptorForTesting : public FrameSinkVideoConsumerFrameCallbacks {
  virtual FrameSinkVideoConsumerFrameCallbacks* GetForwardingInterface() = 0;
  void Done() override;
  void ProvideFeedback(double utilization) override;
};
class  FrameSinkVideoConsumerFrameCallbacksAsyncWaiter {
 public:
  explicit FrameSinkVideoConsumerFrameCallbacksAsyncWaiter(FrameSinkVideoConsumerFrameCallbacks* proxy);
  ~FrameSinkVideoConsumerFrameCallbacksAsyncWaiter();

 private:
  FrameSinkVideoConsumerFrameCallbacks* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(FrameSinkVideoConsumerFrameCallbacksAsyncWaiter);
};


class  FrameSinkVideoConsumerInterceptorForTesting : public FrameSinkVideoConsumer {
  virtual FrameSinkVideoConsumer* GetForwardingInterface() = 0;
  void OnFrameCaptured(::base::ReadOnlySharedMemoryRegion data, ::media::mojom::VideoFrameInfoPtr info, const ::gfx::Rect& content_rect, mojo::PendingRemote<FrameSinkVideoConsumerFrameCallbacks> callbacks) override;
  void OnStopped() override;
  void OnLog(const std::string& message) override;
};
class  FrameSinkVideoConsumerAsyncWaiter {
 public:
  explicit FrameSinkVideoConsumerAsyncWaiter(FrameSinkVideoConsumer* proxy);
  ~FrameSinkVideoConsumerAsyncWaiter();

 private:
  FrameSinkVideoConsumer* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(FrameSinkVideoConsumerAsyncWaiter);
};


class  FrameSinkVideoCapturerInterceptorForTesting : public FrameSinkVideoCapturer {
  virtual FrameSinkVideoCapturer* GetForwardingInterface() = 0;
  void SetFormat(::media::VideoPixelFormat format, const ::gfx::ColorSpace& color_space) override;
  void SetMinCapturePeriod(::base::TimeDelta min_period) override;
  void SetMinSizeChangePeriod(::base::TimeDelta min_period) override;
  void SetResolutionConstraints(const ::gfx::Size& min_size, const ::gfx::Size& max_size, bool use_fixed_aspect_ratio) override;
  void SetAutoThrottlingEnabled(bool enabled) override;
  void ChangeTarget(const base::Optional<::viz::FrameSinkId>& frame_sink_id) override;
  void Start(mojo::PendingRemote<FrameSinkVideoConsumer> consumer) override;
  void Stop() override;
  void RequestRefreshFrame() override;
  void CreateOverlay(int32_t stacking_index, mojo::PendingReceiver<FrameSinkVideoCaptureOverlay> receiver) override;
};
class  FrameSinkVideoCapturerAsyncWaiter {
 public:
  explicit FrameSinkVideoCapturerAsyncWaiter(FrameSinkVideoCapturer* proxy);
  ~FrameSinkVideoCapturerAsyncWaiter();

 private:
  FrameSinkVideoCapturer* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(FrameSinkVideoCapturerAsyncWaiter);
};


class  FrameSinkVideoCaptureOverlayInterceptorForTesting : public FrameSinkVideoCaptureOverlay {
  virtual FrameSinkVideoCaptureOverlay* GetForwardingInterface() = 0;
  void SetImageAndBounds(const ::SkBitmap& image, const ::gfx::RectF& bounds) override;
  void SetBounds(const ::gfx::RectF& bounds) override;
};
class  FrameSinkVideoCaptureOverlayAsyncWaiter {
 public:
  explicit FrameSinkVideoCaptureOverlayAsyncWaiter(FrameSinkVideoCaptureOverlay* proxy);
  ~FrameSinkVideoCaptureOverlayAsyncWaiter();

 private:
  FrameSinkVideoCaptureOverlay* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(FrameSinkVideoCaptureOverlayAsyncWaiter);
};




}  // namespace mojom
}  // namespace viz

#endif  // SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_FRAME_SINK_VIDEO_CAPTURE_MOJOM_TEST_UTILS_H_