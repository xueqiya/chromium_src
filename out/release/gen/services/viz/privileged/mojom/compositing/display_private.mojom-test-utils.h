// services/viz/privileged/mojom/compositing/display_private.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_DISPLAY_PRIVATE_MOJOM_TEST_UTILS_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_DISPLAY_PRIVATE_MOJOM_TEST_UTILS_H_

#include "services/viz/privileged/mojom/compositing/display_private.mojom.h"


namespace viz {
namespace mojom {


class  DisplayPrivateInterceptorForTesting : public DisplayPrivate {
  virtual DisplayPrivate* GetForwardingInterface() = 0;
  void SetDisplayVisible(bool visible) override;
  void DisableSwapUntilResize(DisableSwapUntilResizeCallback callback) override;
  void Resize(const ::gfx::Size& size) override;
  void SetDisplayColorMatrix(const ::gfx::Transform& color_matrix) override;
  void SetDisplayColorSpaces(const ::gfx::DisplayColorSpaces& display_color_spaces) override;
  void SetOutputIsSecure(bool secure) override;
  void SetDisplayVSyncParameters(::base::TimeTicks timebase, ::base::TimeDelta interval) override;
  void ForceImmediateDrawAndSwapIfPossible() override;
  void SetVSyncPaused(bool paused) override;
  void UpdateRefreshRate(float refresh_rate) override;
  void SetSupportedRefreshRates(const std::vector<float>& refresh_rates) override;
  void AddVSyncParameterObserver(mojo::PendingRemote<::viz::mojom::VSyncParameterObserver> observer) override;
};
class  DisplayPrivateAsyncWaiter {
 public:
  explicit DisplayPrivateAsyncWaiter(DisplayPrivate* proxy);
  ~DisplayPrivateAsyncWaiter();
  void DisableSwapUntilResize(
      );

 private:
  DisplayPrivate* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(DisplayPrivateAsyncWaiter);
};


class  DisplayClientInterceptorForTesting : public DisplayClient {
  virtual DisplayClient* GetForwardingInterface() = 0;
  void DidCompleteSwapWithSize(const ::gfx::Size& size) override;
  void OnContextCreationResult(::gpu::ContextResult result) override;
  void SetPreferredRefreshRate(float refresh_rate) override;
};
class  DisplayClientAsyncWaiter {
 public:
  explicit DisplayClientAsyncWaiter(DisplayClient* proxy);
  ~DisplayClientAsyncWaiter();

 private:
  DisplayClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(DisplayClientAsyncWaiter);
};




}  // namespace mojom
}  // namespace viz

#endif  // SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_DISPLAY_PRIVATE_MOJOM_TEST_UTILS_H_