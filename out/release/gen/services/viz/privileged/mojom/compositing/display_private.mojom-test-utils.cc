// services/viz/privileged/mojom/compositing/display_private.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "services/viz/privileged/mojom/compositing/display_private.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "gpu/ipc/common/context_result.mojom.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "ui/gfx/mojom/ca_layer_params.mojom.h"
#include "ui/gfx/mojom/display_color_spaces.mojom.h"
#include "ui/gfx/mojom/overlay_transform.mojom.h"
#include "ui/gfx/mojom/transform.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include "ui/latency/mojom/latency_info.mojom.h"
#include "services/viz/privileged/mojom/compositing/layered_window_updater.mojom.h"
#include "services/viz/privileged/mojom/compositing/vsync_parameter_observer.mojom.h"


#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_DISPLAY_PRIVATE_MOJOM_JUMBO_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_COMPOSITING_DISPLAY_PRIVATE_MOJOM_JUMBO_H_
#include "gpu/ipc/common/context_result_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "ui/gfx/mojom/color_space_mojom_traits.h"
#include "ui/gfx/mojom/display_color_spaces_mojom_traits.h"
#include "ui/gfx/mojom/transform_mojom_traits.h"
#endif


namespace viz {
namespace mojom {


void DisplayPrivateInterceptorForTesting::SetDisplayVisible(bool visible) {
  GetForwardingInterface()->SetDisplayVisible(std::move(visible));
}
void DisplayPrivateInterceptorForTesting::DisableSwapUntilResize(DisableSwapUntilResizeCallback callback) {
  GetForwardingInterface()->DisableSwapUntilResize(std::move(callback));
}
void DisplayPrivateInterceptorForTesting::Resize(const ::gfx::Size& size) {
  GetForwardingInterface()->Resize(std::move(size));
}
void DisplayPrivateInterceptorForTesting::SetDisplayColorMatrix(const ::gfx::Transform& color_matrix) {
  GetForwardingInterface()->SetDisplayColorMatrix(std::move(color_matrix));
}
void DisplayPrivateInterceptorForTesting::SetDisplayColorSpaces(const ::gfx::DisplayColorSpaces& display_color_spaces) {
  GetForwardingInterface()->SetDisplayColorSpaces(std::move(display_color_spaces));
}
void DisplayPrivateInterceptorForTesting::SetOutputIsSecure(bool secure) {
  GetForwardingInterface()->SetOutputIsSecure(std::move(secure));
}
void DisplayPrivateInterceptorForTesting::SetDisplayVSyncParameters(::base::TimeTicks timebase, ::base::TimeDelta interval) {
  GetForwardingInterface()->SetDisplayVSyncParameters(std::move(timebase), std::move(interval));
}
void DisplayPrivateInterceptorForTesting::ForceImmediateDrawAndSwapIfPossible() {
  GetForwardingInterface()->ForceImmediateDrawAndSwapIfPossible();
}
void DisplayPrivateInterceptorForTesting::SetVSyncPaused(bool paused) {
  GetForwardingInterface()->SetVSyncPaused(std::move(paused));
}
void DisplayPrivateInterceptorForTesting::UpdateRefreshRate(float refresh_rate) {
  GetForwardingInterface()->UpdateRefreshRate(std::move(refresh_rate));
}
void DisplayPrivateInterceptorForTesting::SetSupportedRefreshRates(const std::vector<float>& refresh_rates) {
  GetForwardingInterface()->SetSupportedRefreshRates(std::move(refresh_rates));
}
void DisplayPrivateInterceptorForTesting::AddVSyncParameterObserver(mojo::PendingRemote<::viz::mojom::VSyncParameterObserver> observer) {
  GetForwardingInterface()->AddVSyncParameterObserver(std::move(observer));
}
DisplayPrivateAsyncWaiter::DisplayPrivateAsyncWaiter(
    DisplayPrivate* proxy) : proxy_(proxy) {}

DisplayPrivateAsyncWaiter::~DisplayPrivateAsyncWaiter() = default;

void DisplayPrivateAsyncWaiter::DisableSwapUntilResize(
    ) {
  base::RunLoop loop;
  proxy_->DisableSwapUntilResize(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}



void DisplayClientInterceptorForTesting::DidCompleteSwapWithSize(const ::gfx::Size& size) {
  GetForwardingInterface()->DidCompleteSwapWithSize(std::move(size));
}
void DisplayClientInterceptorForTesting::OnContextCreationResult(::gpu::ContextResult result) {
  GetForwardingInterface()->OnContextCreationResult(std::move(result));
}
void DisplayClientInterceptorForTesting::SetPreferredRefreshRate(float refresh_rate) {
  GetForwardingInterface()->SetPreferredRefreshRate(std::move(refresh_rate));
}
DisplayClientAsyncWaiter::DisplayClientAsyncWaiter(
    DisplayClient* proxy) : proxy_(proxy) {}

DisplayClientAsyncWaiter::~DisplayClientAsyncWaiter() = default;






}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif