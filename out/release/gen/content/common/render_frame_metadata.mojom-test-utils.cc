// content/common/render_frame_metadata.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "content/common/render_frame_metadata.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "services/viz/public/mojom/compositing/local_surface_id_allocation.mojom.h"
#include "services/viz/public/mojom/compositing/selection.mojom.h"
#include "services/viz/public/mojom/compositing/vertical_scroll_direction.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"


#ifndef CONTENT_COMMON_RENDER_FRAME_METADATA_MOJOM_JUMBO_H_
#define CONTENT_COMMON_RENDER_FRAME_METADATA_MOJOM_JUMBO_H_
#include "content/common/render_frame_metadata_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "services/viz/public/cpp/compositing/local_surface_id_allocation_mojom_traits.h"
#include "services/viz/public/cpp/compositing/local_surface_id_mojom_traits.h"
#include "services/viz/public/cpp/compositing/selection_mojom_traits.h"
#include "services/viz/public/cpp/compositing/vertical_scroll_direction_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "ui/gfx/mojom/selection_bound_mojom_traits.h"
#endif


namespace content {
namespace mojom {


void RenderFrameMetadataObserverInterceptorForTesting::ReportAllRootScrollsForAccessibility(bool enabled) {
  GetForwardingInterface()->ReportAllRootScrollsForAccessibility(std::move(enabled));
}
void RenderFrameMetadataObserverInterceptorForTesting::ReportAllFrameSubmissionsForTesting(bool enabled) {
  GetForwardingInterface()->ReportAllFrameSubmissionsForTesting(std::move(enabled));
}
RenderFrameMetadataObserverAsyncWaiter::RenderFrameMetadataObserverAsyncWaiter(
    RenderFrameMetadataObserver* proxy) : proxy_(proxy) {}

RenderFrameMetadataObserverAsyncWaiter::~RenderFrameMetadataObserverAsyncWaiter() = default;




void RenderFrameMetadataObserverClientInterceptorForTesting::OnRenderFrameMetadataChanged(uint32_t frame_token, const ::cc::RenderFrameMetadata& metadata) {
  GetForwardingInterface()->OnRenderFrameMetadataChanged(std::move(frame_token), std::move(metadata));
}
void RenderFrameMetadataObserverClientInterceptorForTesting::OnFrameSubmissionForTesting(uint32_t frame_token) {
  GetForwardingInterface()->OnFrameSubmissionForTesting(std::move(frame_token));
}
RenderFrameMetadataObserverClientAsyncWaiter::RenderFrameMetadataObserverClientAsyncWaiter(
    RenderFrameMetadataObserverClient* proxy) : proxy_(proxy) {}

RenderFrameMetadataObserverClientAsyncWaiter::~RenderFrameMetadataObserverClientAsyncWaiter() = default;






}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif