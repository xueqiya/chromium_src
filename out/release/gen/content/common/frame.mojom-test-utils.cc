// content/common/frame.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "content/common/frame.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "content/common/document_scoped_interface_bundle.mojom.h"
#include "content/common/frame_messages.mojom.h"
#include "content/common/native_types.mojom.h"
#include "content/common/navigation_client.mojom.h"
#include "content/common/navigation_params.mojom.h"
#include "content/public/common/browser_controls_state.mojom.h"
#include "content/public/common/resource_type.mojom.h"
#include "content/public/common/resource_load_info.mojom.h"
#include "content/public/common/transferrable_url_loader.mojom.h"
#include "content/public/common/window_container_type.mojom.h"
#include "mojo/public/mojom/base/string16.mojom.h"
#include "mojo/public/mojom/base/unguessable_token.mojom.h"
#include "mojo/public/mojom/base/values.mojom.h"
#include "services/network/public/mojom/content_security_policy.mojom.h"
#include "services/network/public/mojom/url_loader.mojom.h"
#include "services/network/public/mojom/url_loader_factory.mojom.h"
#include "services/network/public/mojom/url_response_head.mojom.h"
#include "services/service_manager/public/mojom/interface_provider.mojom.h"
#include "services/viz/public/mojom/compositing/frame_sink_id.mojom.h"
#include "services/viz/public/mojom/compositing/surface_id.mojom.h"
#include "third_party/blink/public/mojom/blob/blob_url_store.mojom.h"
#include "third_party/blink/public/mojom/commit_result/commit_result.mojom.h"
#include "third_party/blink/public/mojom/devtools/console_message.mojom.h"
#include "third_party/blink/public/mojom/feature_policy/feature_policy.mojom.h"
#include "third_party/blink/public/mojom/feature_policy/feature_policy_feature.mojom.h"
#include "third_party/blink/public/mojom/feature_policy/policy_value.mojom.h"
#include "third_party/blink/public/mojom/frame/lifecycle.mojom.h"
#include "third_party/blink/public/mojom/frame/navigation_initiator.mojom.h"
#include "third_party/blink/public/mojom/messaging/transferable_message.mojom.h"
#include "third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom.h"
#include "third_party/blink/public/mojom/messaging/transferable_message.mojom.h"
#include "third_party/blink/public/mojom/portal/portal.mojom.h"
#include "third_party/blink/public/mojom/referrer.mojom.h"
#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom.h"
#include "third_party/blink/public/mojom/devtools/devtools_agent.mojom.h"
#include "third_party/blink/public/mojom/portal/portal.mojom.h"
#include "third_party/blink/public/mojom/window_features/window_features.mojom.h"
#include "ui/base/mojom/window_open_disposition.mojom.h"
#include "url/mojom/url.mojom.h"
#include "url/mojom/origin.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"


#ifndef CONTENT_COMMON_FRAME_MOJOM_JUMBO_H_
#define CONTENT_COMMON_FRAME_MOJOM_JUMBO_H_
#include "content/common/frame_messages.h"
#include "content/common/input/input_event_mojom_traits.h"
#include "content/common/input/touch_action_optional_mojom_traits.h"
#include "content/common/input_messages.h"
#include "content/common/resource_messages.h"
#include "content/common/view_messages.h"
#include "content/common/widget_messages.h"
#include "content/public/common/common_param_traits.h"
#include "content/public/common/common_param_traits_macros.h"
#include "content/public/common/resource_type_mojom_traits.h"
#include "mojo/public/cpp/base/big_buffer_mojom_traits.h"
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/file_path_mojom_traits.h"
#include "mojo/public/cpp/base/string16_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "mojo/public/cpp/base/values_mojom_traits.h"
#include "services/network/public/cpp/ip_address_mojom_traits.h"
#include "services/network/public/cpp/ip_endpoint_mojom_traits.h"
#include "services/network/public/cpp/load_timing_info_mojom_traits.h"
#include "services/network/public/cpp/net_ipc_param_traits.h"
#include "services/network/public/cpp/network_ipc_param_traits.h"
#include "services/network/public/cpp/network_isolation_key_mojom_traits.h"
#include "services/network/public/cpp/network_param_mojom_traits.h"
#include "services/network/public/cpp/p2p_param_traits.h"
#include "services/network/public/cpp/url_request_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/mojo_host_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/proxy_resolver_mojom_traits.h"
#include "services/viz/public/cpp/compositing/frame_sink_id_mojom_traits.h"
#include "skia/public/mojom/bitmap_skbitmap_mojom_traits.h"
#include "skia/public/mojom/image_info_mojom_traits.h"
#include "third_party/blink/common/feature_policy/feature_policy_mojom_traits.h"
#include "third_party/blink/common/feature_policy/policy_value_mojom_traits.h"
#include "third_party/blink/common/frame/frame_policy_mojom_traits.h"
#include "third_party/blink/public/common/loader/url_loader_factory_bundle_mojom_traits.h"
#include "third_party/blink/public/common/messaging/cloneable_message_mojom_traits.h"
#include "third_party/blink/public/common/messaging/transferable_message_mojom_traits.h"
#include "ui/base/mojom/window_open_disposition_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "url/mojom/origin_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif


namespace content {
namespace mojom {


void FrameInterceptorForTesting::GetInterfaceProvider(mojo::PendingReceiver<::service_manager::mojom::InterfaceProvider> interfaces) {
  GetForwardingInterface()->GetInterfaceProvider(std::move(interfaces));
}
void FrameInterceptorForTesting::GetCanonicalUrlForSharing(GetCanonicalUrlForSharingCallback callback) {
  GetForwardingInterface()->GetCanonicalUrlForSharing(std::move(callback));
}
void FrameInterceptorForTesting::BlockRequests() {
  GetForwardingInterface()->BlockRequests();
}
void FrameInterceptorForTesting::ResumeBlockedRequests() {
  GetForwardingInterface()->ResumeBlockedRequests();
}
void FrameInterceptorForTesting::CancelBlockedRequests() {
  GetForwardingInterface()->CancelBlockedRequests();
}
void FrameInterceptorForTesting::SetLifecycleState(::blink::mojom::FrameLifecycleState state) {
  GetForwardingInterface()->SetLifecycleState(std::move(state));
}
void FrameInterceptorForTesting::ExtractSmartClipData(const ::gfx::Rect& rect, ExtractSmartClipDataCallback callback) {
  GetForwardingInterface()->ExtractSmartClipData(std::move(rect), std::move(callback));
}
void FrameInterceptorForTesting::UpdateBrowserControlsState(::content::BrowserControlsState constraints, ::content::BrowserControlsState current, bool animate) {
  GetForwardingInterface()->UpdateBrowserControlsState(std::move(constraints), std::move(current), std::move(animate));
}
FrameAsyncWaiter::FrameAsyncWaiter(
    Frame* proxy) : proxy_(proxy) {}

FrameAsyncWaiter::~FrameAsyncWaiter() = default;

void FrameAsyncWaiter::GetCanonicalUrlForSharing(
    base::Optional<::GURL>* out_canonical_url) {
  base::RunLoop loop;
  proxy_->GetCanonicalUrlForSharing(
      base::BindOnce(
          [](base::RunLoop* loop,
             base::Optional<::GURL>* out_canonical_url
,
             const base::Optional<::GURL>& canonical_url) {*out_canonical_url = std::move(canonical_url);
            loop->Quit();
          },
          &loop,
          out_canonical_url));
  loop.Run();
}
void FrameAsyncWaiter::ExtractSmartClipData(
    const ::gfx::Rect& rect, ::base::string16* out_text, ::base::string16* out_html, ::gfx::Rect* out_clip_rect) {
  base::RunLoop loop;
  proxy_->ExtractSmartClipData(std::move(rect),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::base::string16* out_text
,
             ::base::string16* out_html
,
             ::gfx::Rect* out_clip_rect
,
             const ::base::string16& text,
             const ::base::string16& html,
             const ::gfx::Rect& clip_rect) {*out_text = std::move(text);*out_html = std::move(html);*out_clip_rect = std::move(clip_rect);
            loop->Quit();
          },
          &loop,
          out_text,
          out_html,
          out_clip_rect));
  loop.Run();
}



void FrameNavigationControlInterceptorForTesting::CommitNavigation(::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, ::network::mojom::URLResponseHeadPtr response_head, mojo::ScopedDataPipeConsumerHandle response_body, ::network::mojom::URLLoaderClientEndpointsPtr url_loader_client_endpoints, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, base::Optional<std::vector<::content::mojom::TransferrableURLLoaderPtr>> subresource_overrides, ::blink::mojom::ControllerServiceWorkerInfoPtr controller_service_worker_info, ::blink::mojom::ServiceWorkerProviderInfoForClientPtr provider_info, mojo::PendingRemote<::network::mojom::URLLoaderFactory> prefetch_loader_factory, const ::base::UnguessableToken& devtools_navigation_token, CommitNavigationCallback callback) {
  GetForwardingInterface()->CommitNavigation(std::move(common_params), std::move(request_params), std::move(response_head), std::move(response_body), std::move(url_loader_client_endpoints), std::move(subresource_loader_factories), std::move(subresource_overrides), std::move(controller_service_worker_info), std::move(provider_info), std::move(prefetch_loader_factory), std::move(devtools_navigation_token), std::move(callback));
}
void FrameNavigationControlInterceptorForTesting::CommitSameDocumentNavigation(::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, CommitSameDocumentNavigationCallback callback) {
  GetForwardingInterface()->CommitSameDocumentNavigation(std::move(common_params), std::move(request_params), std::move(callback));
}
void FrameNavigationControlInterceptorForTesting::HandleRendererDebugURL(const ::GURL& url) {
  GetForwardingInterface()->HandleRendererDebugURL(std::move(url));
}
void FrameNavigationControlInterceptorForTesting::UpdateSubresourceLoaderFactories(::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories) {
  GetForwardingInterface()->UpdateSubresourceLoaderFactories(std::move(subresource_loader_factories));
}
void FrameNavigationControlInterceptorForTesting::BindDevToolsAgent(mojo::PendingAssociatedRemote<::blink::mojom::DevToolsAgentHost> agent_host, mojo::PendingAssociatedReceiver<::blink::mojom::DevToolsAgent> agent) {
  GetForwardingInterface()->BindDevToolsAgent(std::move(agent_host), std::move(agent));
}
void FrameNavigationControlInterceptorForTesting::JavaScriptExecuteRequest(const ::base::string16& javascript, bool wants_result, JavaScriptExecuteRequestCallback callback) {
  GetForwardingInterface()->JavaScriptExecuteRequest(std::move(javascript), std::move(wants_result), std::move(callback));
}
void FrameNavigationControlInterceptorForTesting::JavaScriptExecuteRequestForTests(const ::base::string16& javascript, bool wants_result, bool has_user_gesture, int32_t world_id, JavaScriptExecuteRequestForTestsCallback callback) {
  GetForwardingInterface()->JavaScriptExecuteRequestForTests(std::move(javascript), std::move(wants_result), std::move(has_user_gesture), std::move(world_id), std::move(callback));
}
void FrameNavigationControlInterceptorForTesting::JavaScriptExecuteRequestInIsolatedWorld(const ::base::string16& javascript, bool wants_result, int32_t world_id, JavaScriptExecuteRequestInIsolatedWorldCallback callback) {
  GetForwardingInterface()->JavaScriptExecuteRequestInIsolatedWorld(std::move(javascript), std::move(wants_result), std::move(world_id), std::move(callback));
}
void FrameNavigationControlInterceptorForTesting::PostMessageEvent(int32_t source_routing_id, const ::base::string16& source_origin, const ::base::string16& target_origin, ::blink::TransferableMessage message) {
  GetForwardingInterface()->PostMessageEvent(std::move(source_routing_id), std::move(source_origin), std::move(target_origin), std::move(message));
}
void FrameNavigationControlInterceptorForTesting::ForwardMessageFromHost(::blink::TransferableMessage message, const ::url::Origin& source_origin, const base::Optional<::url::Origin>& target_origin) {
  GetForwardingInterface()->ForwardMessageFromHost(std::move(message), std::move(source_origin), std::move(target_origin));
}
void FrameNavigationControlInterceptorForTesting::OnPortalActivated(const ::base::UnguessableToken& portal_token, mojo::PendingAssociatedRemote<::blink::mojom::Portal> portal, mojo::PendingAssociatedReceiver<::blink::mojom::PortalClient> portal_client, ::blink::TransferableMessage data, OnPortalActivatedCallback callback) {
  GetForwardingInterface()->OnPortalActivated(std::move(portal_token), std::move(portal), std::move(portal_client), std::move(data), std::move(callback));
}
void FrameNavigationControlInterceptorForTesting::ReportContentSecurityPolicyViolation(const ::content::CSPViolationParams& violation_params) {
  GetForwardingInterface()->ReportContentSecurityPolicyViolation(std::move(violation_params));
}
FrameNavigationControlAsyncWaiter::FrameNavigationControlAsyncWaiter(
    FrameNavigationControl* proxy) : proxy_(proxy) {}

FrameNavigationControlAsyncWaiter::~FrameNavigationControlAsyncWaiter() = default;

void FrameNavigationControlAsyncWaiter::CommitNavigation(
    ::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, ::network::mojom::URLResponseHeadPtr response_head, mojo::ScopedDataPipeConsumerHandle response_body, ::network::mojom::URLLoaderClientEndpointsPtr url_loader_client_endpoints, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, base::Optional<std::vector<::content::mojom::TransferrableURLLoaderPtr>> subresource_overrides, ::blink::mojom::ControllerServiceWorkerInfoPtr controller_service_worker_info, ::blink::mojom::ServiceWorkerProviderInfoForClientPtr provider_info, mojo::PendingRemote<::network::mojom::URLLoaderFactory> prefetch_loader_factory, const ::base::UnguessableToken& devtools_navigation_token, ::blink::mojom::CommitResult* out_commit_result) {
  base::RunLoop loop;
  proxy_->CommitNavigation(std::move(common_params),std::move(request_params),std::move(response_head),std::move(response_body),std::move(url_loader_client_endpoints),std::move(subresource_loader_factories),std::move(subresource_overrides),std::move(controller_service_worker_info),std::move(provider_info),std::move(prefetch_loader_factory),std::move(devtools_navigation_token),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::CommitResult* out_commit_result
,
             ::blink::mojom::CommitResult commit_result) {*out_commit_result = std::move(commit_result);
            loop->Quit();
          },
          &loop,
          out_commit_result));
  loop.Run();
}
void FrameNavigationControlAsyncWaiter::CommitSameDocumentNavigation(
    ::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, ::blink::mojom::CommitResult* out_commit_result) {
  base::RunLoop loop;
  proxy_->CommitSameDocumentNavigation(std::move(common_params),std::move(request_params),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::CommitResult* out_commit_result
,
             ::blink::mojom::CommitResult commit_result) {*out_commit_result = std::move(commit_result);
            loop->Quit();
          },
          &loop,
          out_commit_result));
  loop.Run();
}
void FrameNavigationControlAsyncWaiter::JavaScriptExecuteRequest(
    const ::base::string16& javascript, bool wants_result, ::base::Value* out_result) {
  base::RunLoop loop;
  proxy_->JavaScriptExecuteRequest(std::move(javascript),std::move(wants_result),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::base::Value* out_result
,
             ::base::Value result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void FrameNavigationControlAsyncWaiter::JavaScriptExecuteRequestForTests(
    const ::base::string16& javascript, bool wants_result, bool has_user_gesture, int32_t world_id, ::base::Value* out_result) {
  base::RunLoop loop;
  proxy_->JavaScriptExecuteRequestForTests(std::move(javascript),std::move(wants_result),std::move(has_user_gesture),std::move(world_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::base::Value* out_result
,
             ::base::Value result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void FrameNavigationControlAsyncWaiter::JavaScriptExecuteRequestInIsolatedWorld(
    const ::base::string16& javascript, bool wants_result, int32_t world_id, ::base::Value* out_result) {
  base::RunLoop loop;
  proxy_->JavaScriptExecuteRequestInIsolatedWorld(std::move(javascript),std::move(wants_result),std::move(world_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::base::Value* out_result
,
             ::base::Value result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void FrameNavigationControlAsyncWaiter::OnPortalActivated(
    const ::base::UnguessableToken& portal_token, mojo::PendingAssociatedRemote<::blink::mojom::Portal> portal, mojo::PendingAssociatedReceiver<::blink::mojom::PortalClient> portal_client, ::blink::TransferableMessage data, ::blink::mojom::PortalActivateResult* out_result) {
  base::RunLoop loop;
  proxy_->OnPortalActivated(std::move(portal_token),std::move(portal),std::move(portal_client),std::move(data),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::PortalActivateResult* out_result
,
             ::blink::mojom::PortalActivateResult result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}



void FrameBindingsControlInterceptorForTesting::AllowBindings(int32_t enabled_bindings_flags) {
  GetForwardingInterface()->AllowBindings(std::move(enabled_bindings_flags));
}
void FrameBindingsControlInterceptorForTesting::EnableMojoJsBindings() {
  GetForwardingInterface()->EnableMojoJsBindings();
}
FrameBindingsControlAsyncWaiter::FrameBindingsControlAsyncWaiter(
    FrameBindingsControl* proxy) : proxy_(proxy) {}

FrameBindingsControlAsyncWaiter::~FrameBindingsControlAsyncWaiter() = default;




void FrameFactoryInterceptorForTesting::CreateFrame(int32_t frame_routing_id, mojo::PendingReceiver<Frame> frame) {
  GetForwardingInterface()->CreateFrame(std::move(frame_routing_id), std::move(frame));
}
FrameFactoryAsyncWaiter::FrameFactoryAsyncWaiter(
    FrameFactory* proxy) : proxy_(proxy) {}

FrameFactoryAsyncWaiter::~FrameFactoryAsyncWaiter() = default;




KeepAliveHandleAsyncWaiter::KeepAliveHandleAsyncWaiter(
    KeepAliveHandle* proxy) : proxy_(proxy) {}

KeepAliveHandleAsyncWaiter::~KeepAliveHandleAsyncWaiter() = default;




void FrameHostInterceptorForTesting::CreateNewWindow(CreateNewWindowParamsPtr params, CreateNewWindowCallback callback) {
  GetForwardingInterface()->CreateNewWindow(std::move(params), std::move(callback));
}
void FrameHostInterceptorForTesting::CreatePortal(mojo::PendingAssociatedReceiver<::blink::mojom::Portal> portal, mojo::PendingAssociatedRemote<::blink::mojom::PortalClient> client, CreatePortalCallback callback) {
  GetForwardingInterface()->CreatePortal(std::move(portal), std::move(client), std::move(callback));
}
void FrameHostInterceptorForTesting::AdoptPortal(const ::base::UnguessableToken& portal_token, AdoptPortalCallback callback) {
  GetForwardingInterface()->AdoptPortal(std::move(portal_token), std::move(callback));
}
void FrameHostInterceptorForTesting::IssueKeepAliveHandle(mojo::PendingReceiver<KeepAliveHandle> keep_alive_handle) {
  GetForwardingInterface()->IssueKeepAliveHandle(std::move(keep_alive_handle));
}
void FrameHostInterceptorForTesting::DidCommitProvisionalLoad(::std::unique_ptr<::FrameHostMsg_DidCommitProvisionalLoad_Params> params, ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr interface_params) {
  GetForwardingInterface()->DidCommitProvisionalLoad(std::move(params), std::move(interface_params));
}
void FrameHostInterceptorForTesting::DidCommitSameDocumentNavigation(::std::unique_ptr<::FrameHostMsg_DidCommitProvisionalLoad_Params> params) {
  GetForwardingInterface()->DidCommitSameDocumentNavigation(std::move(params));
}
void FrameHostInterceptorForTesting::BeginNavigation(::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::BeginNavigationParamsPtr begin_params, mojo::PendingRemote<::blink::mojom::BlobURLToken> blob_url_token, mojo::PendingAssociatedRemote<::content::mojom::NavigationClient> navigation_client, mojo::PendingRemote<::blink::mojom::NavigationInitiator> navigation_initiator) {
  GetForwardingInterface()->BeginNavigation(std::move(common_params), std::move(begin_params), std::move(blob_url_token), std::move(navigation_client), std::move(navigation_initiator));
}
void FrameHostInterceptorForTesting::SubresourceResponseStarted(const ::GURL& url, uint32_t cert_status) {
  GetForwardingInterface()->SubresourceResponseStarted(std::move(url), std::move(cert_status));
}
void FrameHostInterceptorForTesting::ResourceLoadComplete(::content::mojom::ResourceLoadInfoPtr url_load_info) {
  GetForwardingInterface()->ResourceLoadComplete(std::move(url_load_info));
}
void FrameHostInterceptorForTesting::DidChangeName(const std::string& name, const std::string& unique_name) {
  GetForwardingInterface()->DidChangeName(std::move(name), std::move(unique_name));
}
void FrameHostInterceptorForTesting::DidSetFramePolicyHeaders(::blink::WebSandboxFlags sandbox_flags, const std::vector<::blink::ParsedFeaturePolicyDeclaration>& feature_policy_header, const base::flat_map<::blink::mojom::FeaturePolicyFeature, ::blink::PolicyValue>& document_policy_header) {
  GetForwardingInterface()->DidSetFramePolicyHeaders(std::move(sandbox_flags), std::move(feature_policy_header), std::move(document_policy_header));
}
void FrameHostInterceptorForTesting::CancelInitialHistoryLoad() {
  GetForwardingInterface()->CancelInitialHistoryLoad();
}
void FrameHostInterceptorForTesting::UpdateEncoding(const std::string& encoding_name) {
  GetForwardingInterface()->UpdateEncoding(std::move(encoding_name));
}
void FrameHostInterceptorForTesting::FrameSizeChanged(const ::gfx::Size& size) {
  GetForwardingInterface()->FrameSizeChanged(std::move(size));
}
void FrameHostInterceptorForTesting::UpdateUserGestureCarryoverInfo() {
  GetForwardingInterface()->UpdateUserGestureCarryoverInfo();
}
void FrameHostInterceptorForTesting::DidAddMessageToConsole(::blink::mojom::ConsoleMessageLevel log_level, const ::base::string16& msg, int32_t line_number, const ::base::string16& source_id) {
  GetForwardingInterface()->DidAddMessageToConsole(std::move(log_level), std::move(msg), std::move(line_number), std::move(source_id));
}
void FrameHostInterceptorForTesting::DidFailLoadWithError(const ::GURL& url, int32_t error_code) {
  GetForwardingInterface()->DidFailLoadWithError(std::move(url), std::move(error_code));
}
void FrameHostInterceptorForTesting::TransferUserActivationFrom(int32_t source_routing_id) {
  GetForwardingInterface()->TransferUserActivationFrom(std::move(source_routing_id));
}
void FrameHostInterceptorForTesting::ShowCreatedWindow(int32_t pending_widget_routing_id, ::WindowOpenDisposition disposition, const ::gfx::Rect& rect, bool opened_by_user_gesture) {
  GetForwardingInterface()->ShowCreatedWindow(std::move(pending_widget_routing_id), std::move(disposition), std::move(rect), std::move(opened_by_user_gesture));
}
void FrameHostInterceptorForTesting::DidAddContentSecurityPolicies(std::vector<::network::mojom::ContentSecurityPolicyPtr> policies) {
  GetForwardingInterface()->DidAddContentSecurityPolicies(std::move(policies));
}
FrameHostAsyncWaiter::FrameHostAsyncWaiter(
    FrameHost* proxy) : proxy_(proxy) {}

FrameHostAsyncWaiter::~FrameHostAsyncWaiter() = default;

void FrameHostAsyncWaiter::CreateNewWindow(
    CreateNewWindowParamsPtr params, CreateNewWindowStatus* out_status, CreateNewWindowReplyPtr* out_reply) {
  base::RunLoop loop;
  proxy_->CreateNewWindow(std::move(params),
      base::BindOnce(
          [](base::RunLoop* loop,
             CreateNewWindowStatus* out_status
,
             CreateNewWindowReplyPtr* out_reply
,
             CreateNewWindowStatus status,
             CreateNewWindowReplyPtr reply) {*out_status = std::move(status);*out_reply = std::move(reply);
            loop->Quit();
          },
          &loop,
          out_status,
          out_reply));
  loop.Run();
}
void FrameHostAsyncWaiter::CreatePortal(
    mojo::PendingAssociatedReceiver<::blink::mojom::Portal> portal, mojo::PendingAssociatedRemote<::blink::mojom::PortalClient> client, int32_t* out_proxy_routing_id, ::content::FrameReplicationState* out_initial_replicated_state, ::base::UnguessableToken* out_portal_token, ::base::UnguessableToken* out_devtools_frame_token) {
  base::RunLoop loop;
  proxy_->CreatePortal(std::move(portal),std::move(client),
      base::BindOnce(
          [](base::RunLoop* loop,
             int32_t* out_proxy_routing_id
,
             ::content::FrameReplicationState* out_initial_replicated_state
,
             ::base::UnguessableToken* out_portal_token
,
             ::base::UnguessableToken* out_devtools_frame_token
,
             int32_t proxy_routing_id,
             const ::content::FrameReplicationState& initial_replicated_state,
             const ::base::UnguessableToken& portal_token,
             const ::base::UnguessableToken& devtools_frame_token) {*out_proxy_routing_id = std::move(proxy_routing_id);*out_initial_replicated_state = std::move(initial_replicated_state);*out_portal_token = std::move(portal_token);*out_devtools_frame_token = std::move(devtools_frame_token);
            loop->Quit();
          },
          &loop,
          out_proxy_routing_id,
          out_initial_replicated_state,
          out_portal_token,
          out_devtools_frame_token));
  loop.Run();
}
void FrameHostAsyncWaiter::AdoptPortal(
    const ::base::UnguessableToken& portal_token, int32_t* out_proxy_routing_id, ::viz::FrameSinkId* out_frame_sink_id, ::content::FrameReplicationState* out_replicated_state, ::base::UnguessableToken* out_devtools_frame_token) {
  base::RunLoop loop;
  proxy_->AdoptPortal(std::move(portal_token),
      base::BindOnce(
          [](base::RunLoop* loop,
             int32_t* out_proxy_routing_id
,
             ::viz::FrameSinkId* out_frame_sink_id
,
             ::content::FrameReplicationState* out_replicated_state
,
             ::base::UnguessableToken* out_devtools_frame_token
,
             int32_t proxy_routing_id,
             const ::viz::FrameSinkId& frame_sink_id,
             const ::content::FrameReplicationState& replicated_state,
             const ::base::UnguessableToken& devtools_frame_token) {*out_proxy_routing_id = std::move(proxy_routing_id);*out_frame_sink_id = std::move(frame_sink_id);*out_replicated_state = std::move(replicated_state);*out_devtools_frame_token = std::move(devtools_frame_token);
            loop->Quit();
          },
          &loop,
          out_proxy_routing_id,
          out_frame_sink_id,
          out_replicated_state,
          out_devtools_frame_token));
  loop.Run();
}





}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif