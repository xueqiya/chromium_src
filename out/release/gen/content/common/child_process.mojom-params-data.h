// content/common/child_process.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_CHILD_PROCESS_MOJOM_PARAMS_DATA_H_
#define CONTENT_COMMON_CHILD_PROCESS_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace content {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) ChildProcessHost_BindHostReceiver_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChildProcessHost_BindHostReceiver_Params_Data));
      new (data()) ChildProcessHost_BindHostReceiver_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChildProcessHost_BindHostReceiver_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChildProcessHost_BindHostReceiver_Params_Data>(index_);
    }
    ChildProcessHost_BindHostReceiver_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::GenericPendingReceiver_Data> receiver;

 private:
  ChildProcessHost_BindHostReceiver_Params_Data();
  ~ChildProcessHost_BindHostReceiver_Params_Data() = delete;
};
static_assert(sizeof(ChildProcessHost_BindHostReceiver_Params_Data) == 16,
              "Bad sizeof(ChildProcessHost_BindHostReceiver_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) ChildProcessHostBootstrap_BindProcessHost_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChildProcessHostBootstrap_BindProcessHost_Params_Data));
      new (data()) ChildProcessHostBootstrap_BindProcessHost_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChildProcessHostBootstrap_BindProcessHost_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChildProcessHostBootstrap_BindProcessHost_Params_Data>(index_);
    }
    ChildProcessHostBootstrap_BindProcessHost_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  ChildProcessHostBootstrap_BindProcessHost_Params_Data();
  ~ChildProcessHostBootstrap_BindProcessHost_Params_Data() = delete;
};
static_assert(sizeof(ChildProcessHostBootstrap_BindProcessHost_Params_Data) == 16,
              "Bad sizeof(ChildProcessHostBootstrap_BindProcessHost_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) ChildProcess_Initialize_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChildProcess_Initialize_Params_Data));
      new (data()) ChildProcess_Initialize_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChildProcess_Initialize_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChildProcess_Initialize_Params_Data>(index_);
    }
    ChildProcess_Initialize_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data boostrap;

 private:
  ChildProcess_Initialize_Params_Data();
  ~ChildProcess_Initialize_Params_Data() = delete;
};
static_assert(sizeof(ChildProcess_Initialize_Params_Data) == 16,
              "Bad sizeof(ChildProcess_Initialize_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) ChildProcess_ProcessShutdown_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChildProcess_ProcessShutdown_Params_Data));
      new (data()) ChildProcess_ProcessShutdown_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChildProcess_ProcessShutdown_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChildProcess_ProcessShutdown_Params_Data>(index_);
    }
    ChildProcess_ProcessShutdown_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ChildProcess_ProcessShutdown_Params_Data();
  ~ChildProcess_ProcessShutdown_Params_Data() = delete;
};
static_assert(sizeof(ChildProcess_ProcessShutdown_Params_Data) == 8,
              "Bad sizeof(ChildProcess_ProcessShutdown_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) ChildProcess_GetBackgroundTracingAgentProvider_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChildProcess_GetBackgroundTracingAgentProvider_Params_Data));
      new (data()) ChildProcess_GetBackgroundTracingAgentProvider_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChildProcess_GetBackgroundTracingAgentProvider_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChildProcess_GetBackgroundTracingAgentProvider_Params_Data>(index_);
    }
    ChildProcess_GetBackgroundTracingAgentProvider_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  ChildProcess_GetBackgroundTracingAgentProvider_Params_Data();
  ~ChildProcess_GetBackgroundTracingAgentProvider_Params_Data() = delete;
};
static_assert(sizeof(ChildProcess_GetBackgroundTracingAgentProvider_Params_Data) == 16,
              "Bad sizeof(ChildProcess_GetBackgroundTracingAgentProvider_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) ChildProcess_CrashHungProcess_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChildProcess_CrashHungProcess_Params_Data));
      new (data()) ChildProcess_CrashHungProcess_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChildProcess_CrashHungProcess_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChildProcess_CrashHungProcess_Params_Data>(index_);
    }
    ChildProcess_CrashHungProcess_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ChildProcess_CrashHungProcess_Params_Data();
  ~ChildProcess_CrashHungProcess_Params_Data() = delete;
};
static_assert(sizeof(ChildProcess_CrashHungProcess_Params_Data) == 8,
              "Bad sizeof(ChildProcess_CrashHungProcess_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) ChildProcess_BootstrapLegacyIpc_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChildProcess_BootstrapLegacyIpc_Params_Data));
      new (data()) ChildProcess_BootstrapLegacyIpc_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChildProcess_BootstrapLegacyIpc_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChildProcess_BootstrapLegacyIpc_Params_Data>(index_);
    }
    ChildProcess_BootstrapLegacyIpc_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  ChildProcess_BootstrapLegacyIpc_Params_Data();
  ~ChildProcess_BootstrapLegacyIpc_Params_Data() = delete;
};
static_assert(sizeof(ChildProcess_BootstrapLegacyIpc_Params_Data) == 16,
              "Bad sizeof(ChildProcess_BootstrapLegacyIpc_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) ChildProcess_RunService_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChildProcess_RunService_Params_Data));
      new (data()) ChildProcess_RunService_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChildProcess_RunService_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChildProcess_RunService_Params_Data>(index_);
    }
    ChildProcess_RunService_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> service_name;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  ChildProcess_RunService_Params_Data();
  ~ChildProcess_RunService_Params_Data() = delete;
};
static_assert(sizeof(ChildProcess_RunService_Params_Data) == 24,
              "Bad sizeof(ChildProcess_RunService_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) ChildProcess_BindServiceInterface_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChildProcess_BindServiceInterface_Params_Data));
      new (data()) ChildProcess_BindServiceInterface_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChildProcess_BindServiceInterface_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChildProcess_BindServiceInterface_Params_Data>(index_);
    }
    ChildProcess_BindServiceInterface_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::GenericPendingReceiver_Data> receiver;

 private:
  ChildProcess_BindServiceInterface_Params_Data();
  ~ChildProcess_BindServiceInterface_Params_Data() = delete;
};
static_assert(sizeof(ChildProcess_BindServiceInterface_Params_Data) == 16,
              "Bad sizeof(ChildProcess_BindServiceInterface_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) ChildProcess_BindReceiver_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChildProcess_BindReceiver_Params_Data));
      new (data()) ChildProcess_BindReceiver_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChildProcess_BindReceiver_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChildProcess_BindReceiver_Params_Data>(index_);
    }
    ChildProcess_BindReceiver_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::GenericPendingReceiver_Data> receiver;

 private:
  ChildProcess_BindReceiver_Params_Data();
  ~ChildProcess_BindReceiver_Params_Data() = delete;
};
static_assert(sizeof(ChildProcess_BindReceiver_Params_Data) == 16,
              "Bad sizeof(ChildProcess_BindReceiver_Params_Data)");

}  // namespace internal
class ChildProcessHost_BindHostReceiver_ParamsDataView {
 public:
  ChildProcessHost_BindHostReceiver_ParamsDataView() {}

  ChildProcessHost_BindHostReceiver_ParamsDataView(
      internal::ChildProcessHost_BindHostReceiver_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetReceiverDataView(
      ::mojo_base::mojom::GenericPendingReceiverDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReceiver(UserType* output) {
    auto* pointer = data_->receiver.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::GenericPendingReceiverDataView>(
        pointer, output, context_);
  }
 private:
  internal::ChildProcessHost_BindHostReceiver_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ChildProcessHostBootstrap_BindProcessHost_ParamsDataView {
 public:
  ChildProcessHostBootstrap_BindProcessHost_ParamsDataView() {}

  ChildProcessHostBootstrap_BindProcessHost_ParamsDataView(
      internal::ChildProcessHostBootstrap_BindProcessHost_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::content::mojom::ChildProcessHostInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ChildProcessHostBootstrap_BindProcessHost_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ChildProcess_Initialize_ParamsDataView {
 public:
  ChildProcess_Initialize_ParamsDataView() {}

  ChildProcess_Initialize_ParamsDataView(
      internal::ChildProcess_Initialize_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeBoostrap() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::content::mojom::ChildProcessHostBootstrapInterfaceBase>>(
            &data_->boostrap, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ChildProcess_Initialize_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ChildProcess_ProcessShutdown_ParamsDataView {
 public:
  ChildProcess_ProcessShutdown_ParamsDataView() {}

  ChildProcess_ProcessShutdown_ParamsDataView(
      internal::ChildProcess_ProcessShutdown_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ChildProcess_ProcessShutdown_Params_Data* data_ = nullptr;
};

class ChildProcess_GetBackgroundTracingAgentProvider_ParamsDataView {
 public:
  ChildProcess_GetBackgroundTracingAgentProvider_ParamsDataView() {}

  ChildProcess_GetBackgroundTracingAgentProvider_ParamsDataView(
      internal::ChildProcess_GetBackgroundTracingAgentProvider_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::tracing::mojom::BackgroundTracingAgentProviderInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ChildProcess_GetBackgroundTracingAgentProvider_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ChildProcess_CrashHungProcess_ParamsDataView {
 public:
  ChildProcess_CrashHungProcess_ParamsDataView() {}

  ChildProcess_CrashHungProcess_ParamsDataView(
      internal::ChildProcess_CrashHungProcess_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ChildProcess_CrashHungProcess_Params_Data* data_ = nullptr;
};

class ChildProcess_BootstrapLegacyIpc_ParamsDataView {
 public:
  ChildProcess_BootstrapLegacyIpc_ParamsDataView() {}

  ChildProcess_BootstrapLegacyIpc_ParamsDataView(
      internal::ChildProcess_BootstrapLegacyIpc_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::IPC::mojom::ChannelBootstrapInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ChildProcess_BootstrapLegacyIpc_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ChildProcess_RunService_ParamsDataView {
 public:
  ChildProcess_RunService_ParamsDataView() {}

  ChildProcess_RunService_ParamsDataView(
      internal::ChildProcess_RunService_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetServiceNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadServiceName(UserType* output) {
    auto* pointer = data_->service_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::service_manager::mojom::ServiceInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ChildProcess_RunService_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ChildProcess_BindServiceInterface_ParamsDataView {
 public:
  ChildProcess_BindServiceInterface_ParamsDataView() {}

  ChildProcess_BindServiceInterface_ParamsDataView(
      internal::ChildProcess_BindServiceInterface_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetReceiverDataView(
      ::mojo_base::mojom::GenericPendingReceiverDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReceiver(UserType* output) {
    auto* pointer = data_->receiver.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::GenericPendingReceiverDataView>(
        pointer, output, context_);
  }
 private:
  internal::ChildProcess_BindServiceInterface_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ChildProcess_BindReceiver_ParamsDataView {
 public:
  ChildProcess_BindReceiver_ParamsDataView() {}

  ChildProcess_BindReceiver_ParamsDataView(
      internal::ChildProcess_BindReceiver_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetReceiverDataView(
      ::mojo_base::mojom::GenericPendingReceiverDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReceiver(UserType* output) {
    auto* pointer = data_->receiver.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::GenericPendingReceiverDataView>(
        pointer, output, context_);
  }
 private:
  internal::ChildProcess_BindReceiver_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void ChildProcessHost_BindHostReceiver_ParamsDataView::GetReceiverDataView(
    ::mojo_base::mojom::GenericPendingReceiverDataView* output) {
  auto pointer = data_->receiver.Get();
  *output = ::mojo_base::mojom::GenericPendingReceiverDataView(pointer, context_);
}














inline void ChildProcess_RunService_ParamsDataView::GetServiceNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->service_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void ChildProcess_BindServiceInterface_ParamsDataView::GetReceiverDataView(
    ::mojo_base::mojom::GenericPendingReceiverDataView* output) {
  auto pointer = data_->receiver.Get();
  *output = ::mojo_base::mojom::GenericPendingReceiverDataView(pointer, context_);
}


inline void ChildProcess_BindReceiver_ParamsDataView::GetReceiverDataView(
    ::mojo_base::mojom::GenericPendingReceiverDataView* output) {
  auto pointer = data_->receiver.Get();
  *output = ::mojo_base::mojom::GenericPendingReceiverDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // CONTENT_COMMON_CHILD_PROCESS_MOJOM_PARAMS_DATA_H_