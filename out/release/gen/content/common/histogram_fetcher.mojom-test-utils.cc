// content/common/histogram_fetcher.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "content/common/histogram_fetcher.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/shared_memory.mojom.h"


#ifndef CONTENT_COMMON_HISTOGRAM_FETCHER_MOJOM_JUMBO_H_
#define CONTENT_COMMON_HISTOGRAM_FETCHER_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/shared_memory_mojom_traits.h"
#endif


namespace content {
namespace mojom {


void ChildHistogramFetcherFactoryInterceptorForTesting::CreateFetcher(::base::WritableSharedMemoryRegion shared_memory, mojo::PendingReceiver<ChildHistogramFetcher> child_histogram_fetcher) {
  GetForwardingInterface()->CreateFetcher(std::move(shared_memory), std::move(child_histogram_fetcher));
}
ChildHistogramFetcherFactoryAsyncWaiter::ChildHistogramFetcherFactoryAsyncWaiter(
    ChildHistogramFetcherFactory* proxy) : proxy_(proxy) {}

ChildHistogramFetcherFactoryAsyncWaiter::~ChildHistogramFetcherFactoryAsyncWaiter() = default;




void ChildHistogramFetcherInterceptorForTesting::GetChildNonPersistentHistogramData(GetChildNonPersistentHistogramDataCallback callback) {
  GetForwardingInterface()->GetChildNonPersistentHistogramData(std::move(callback));
}
ChildHistogramFetcherAsyncWaiter::ChildHistogramFetcherAsyncWaiter(
    ChildHistogramFetcher* proxy) : proxy_(proxy) {}

ChildHistogramFetcherAsyncWaiter::~ChildHistogramFetcherAsyncWaiter() = default;

void ChildHistogramFetcherAsyncWaiter::GetChildNonPersistentHistogramData(
    std::vector<std::string>* out_deltas) {
  base::RunLoop loop;
  proxy_->GetChildNonPersistentHistogramData(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<std::string>* out_deltas
,
             const std::vector<std::string>& deltas) {*out_deltas = std::move(deltas);
            loop->Quit();
          },
          &loop,
          out_deltas));
  loop.Run();
}





}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif