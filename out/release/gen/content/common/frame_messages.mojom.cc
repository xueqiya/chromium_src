// content/common/frame_messages.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "content/common/frame_messages.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "content/common/frame_messages.mojom-params-data.h"
#include "content/common/frame_messages.mojom-shared-message-ids.h"

#include "content/common/frame_messages.mojom-import-headers.h"


#ifndef CONTENT_COMMON_FRAME_MESSAGES_MOJOM_JUMBO_H_
#define CONTENT_COMMON_FRAME_MESSAGES_MOJOM_JUMBO_H_
#endif
namespace content {
namespace mojom {
DidCommitProvisionalLoadInterfaceParams::DidCommitProvisionalLoadInterfaceParams()
    : interface_provider_receiver(),
      browser_interface_broker_receiver() {}

DidCommitProvisionalLoadInterfaceParams::DidCommitProvisionalLoadInterfaceParams(
    mojo::PendingReceiver<::service_manager::mojom::InterfaceProvider> interface_provider_receiver_in,
    mojo::PendingReceiver<::blink::mojom::BrowserInterfaceBroker> browser_interface_broker_receiver_in)
    : interface_provider_receiver(std::move(interface_provider_receiver_in)),
      browser_interface_broker_receiver(std::move(browser_interface_broker_receiver_in)) {}

DidCommitProvisionalLoadInterfaceParams::~DidCommitProvisionalLoadInterfaceParams() = default;

bool DidCommitProvisionalLoadInterfaceParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace content

namespace mojo {


// static
bool StructTraits<::content::mojom::DidCommitProvisionalLoadInterfaceParams::DataView, ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr>::Read(
    ::content::mojom::DidCommitProvisionalLoadInterfaceParams::DataView input,
    ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr* output) {
  bool success = true;
  ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr result(::content::mojom::DidCommitProvisionalLoadInterfaceParams::New());
  
      if (success) {
        result->interface_provider_receiver =
            input.TakeInterfaceProviderReceiver<decltype(result->interface_provider_receiver)>();
      }
      if (success) {
        result->browser_interface_broker_receiver =
            input.TakeBrowserInterfaceBrokerReceiver<decltype(result->browser_interface_broker_receiver)>();
      }
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif