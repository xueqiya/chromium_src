// content/common/media/renderer_audio_output_stream_factory.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "content/common/media/renderer_audio_output_stream_factory.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "media/mojo/mojom/audio_output_stream.mojom.h"
#include "media/mojo/mojom/audio_parameters.mojom.h"
#include "media/mojo/mojom/media_types.mojom.h"
#include "mojo/public/mojom/base/unguessable_token.mojom.h"


#ifndef CONTENT_COMMON_MEDIA_RENDERER_AUDIO_OUTPUT_STREAM_FACTORY_MOJOM_JUMBO_H_
#define CONTENT_COMMON_MEDIA_RENDERER_AUDIO_OUTPUT_STREAM_FACTORY_MOJOM_JUMBO_H_
#include "media/base/ipc/media_param_traits.h"
#include "media/base/ipc/media_param_traits_macros.h"
#include "media/mojo/mojom/video_transformation_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#endif


namespace content {
namespace mojom {


void RendererAudioOutputStreamFactoryInterceptorForTesting::RequestDeviceAuthorization(mojo::PendingReceiver<::media::mojom::AudioOutputStreamProvider> stream_provider_receiver, const base::Optional<::base::UnguessableToken>& session_id, const std::string& device_id, RequestDeviceAuthorizationCallback callback) {
  GetForwardingInterface()->RequestDeviceAuthorization(std::move(stream_provider_receiver), std::move(session_id), std::move(device_id), std::move(callback));
}
RendererAudioOutputStreamFactoryAsyncWaiter::RendererAudioOutputStreamFactoryAsyncWaiter(
    RendererAudioOutputStreamFactory* proxy) : proxy_(proxy) {}

RendererAudioOutputStreamFactoryAsyncWaiter::~RendererAudioOutputStreamFactoryAsyncWaiter() = default;

void RendererAudioOutputStreamFactoryAsyncWaiter::RequestDeviceAuthorization(
    mojo::PendingReceiver<::media::mojom::AudioOutputStreamProvider> stream_provider_receiver, const base::Optional<::base::UnguessableToken>& session_id, const std::string& device_id, ::media::OutputDeviceStatus* out_state, ::media::AudioParameters* out_output_params, std::string* out_matched_device_id) {
  base::RunLoop loop;
  proxy_->RequestDeviceAuthorization(std::move(stream_provider_receiver),std::move(session_id),std::move(device_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::media::OutputDeviceStatus* out_state
,
             ::media::AudioParameters* out_output_params
,
             std::string* out_matched_device_id
,
             ::media::OutputDeviceStatus state,
             const ::media::AudioParameters& output_params,
             const std::string& matched_device_id) {*out_state = std::move(state);*out_output_params = std::move(output_params);*out_matched_device_id = std::move(matched_device_id);
            loop->Quit();
          },
          &loop,
          out_state,
          out_output_params,
          out_matched_device_id));
  loop.Run();
}





}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif