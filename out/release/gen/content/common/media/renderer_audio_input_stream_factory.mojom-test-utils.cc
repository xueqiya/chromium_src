// content/common/media/renderer_audio_input_stream_factory.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "content/common/media/renderer_audio_input_stream_factory.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "media/mojo/mojom/audio_data_pipe.mojom.h"
#include "media/mojo/mojom/audio_input_stream.mojom.h"
#include "media/mojo/mojom/audio_parameters.mojom.h"
#include "media/mojo/mojom/media_types.mojom.h"
#include "mojo/public/mojom/base/unguessable_token.mojom.h"
#include "services/audio/public/mojom/audio_processing.mojom.h"


#ifndef CONTENT_COMMON_MEDIA_RENDERER_AUDIO_INPUT_STREAM_FACTORY_MOJOM_JUMBO_H_
#define CONTENT_COMMON_MEDIA_RENDERER_AUDIO_INPUT_STREAM_FACTORY_MOJOM_JUMBO_H_
#include "media/base/ipc/media_param_traits.h"
#include "mojo/public/cpp/base/shared_memory_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "services/audio/public/cpp/audio_processing_mojom_traits.h"
#endif


namespace content {
namespace mojom {


void RendererAudioInputStreamFactoryInterceptorForTesting::CreateStream(mojo::PendingRemote<RendererAudioInputStreamFactoryClient> client, const ::base::UnguessableToken& session_id, const ::media::AudioParameters& params, bool automatic_gain_control, uint32_t shared_memory_count, ::audio::mojom::AudioProcessingConfigPtr processing_config) {
  GetForwardingInterface()->CreateStream(std::move(client), std::move(session_id), std::move(params), std::move(automatic_gain_control), std::move(shared_memory_count), std::move(processing_config));
}
void RendererAudioInputStreamFactoryInterceptorForTesting::AssociateInputAndOutputForAec(const ::base::UnguessableToken& input_stream_id, const std::string& output_device_id) {
  GetForwardingInterface()->AssociateInputAndOutputForAec(std::move(input_stream_id), std::move(output_device_id));
}
RendererAudioInputStreamFactoryAsyncWaiter::RendererAudioInputStreamFactoryAsyncWaiter(
    RendererAudioInputStreamFactory* proxy) : proxy_(proxy) {}

RendererAudioInputStreamFactoryAsyncWaiter::~RendererAudioInputStreamFactoryAsyncWaiter() = default;




void RendererAudioInputStreamFactoryClientInterceptorForTesting::StreamCreated(mojo::PendingRemote<::media::mojom::AudioInputStream> stream, mojo::PendingReceiver<::media::mojom::AudioInputStreamClient> client_request, ::media::mojom::ReadOnlyAudioDataPipePtr data_pipe, bool initially_muted, const base::Optional<::base::UnguessableToken>& stream_id) {
  GetForwardingInterface()->StreamCreated(std::move(stream), std::move(client_request), std::move(data_pipe), std::move(initially_muted), std::move(stream_id));
}
RendererAudioInputStreamFactoryClientAsyncWaiter::RendererAudioInputStreamFactoryClientAsyncWaiter(
    RendererAudioInputStreamFactoryClient* proxy) : proxy_(proxy) {}

RendererAudioInputStreamFactoryClientAsyncWaiter::~RendererAudioInputStreamFactoryClientAsyncWaiter() = default;






}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif