// content/common/media/renderer_audio_output_stream_factory.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_MEDIA_RENDERER_AUDIO_OUTPUT_STREAM_FACTORY_MOJOM_PARAMS_DATA_H_
#define CONTENT_COMMON_MEDIA_RENDERER_AUDIO_OUTPUT_STREAM_FACTORY_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace content {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data));
      new (data()) RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data>(index_);
    }
    RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data stream_provider_receiver;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> session_id;
  mojo::internal::Pointer<mojo::internal::String_Data> device_id;

 private:
  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data();
  ~RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data() = delete;
};
static_assert(sizeof(RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data) == 32,
              "Bad sizeof(RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data));
      new (data()) RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data>(index_);
    }
    RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::media::mojom::internal::AudioParameters_Data> output_params;
  mojo::internal::Pointer<mojo::internal::String_Data> matched_device_id;

 private:
  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data();
  ~RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data() = delete;
};
static_assert(sizeof(RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data) == 32,
              "Bad sizeof(RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data)");

}  // namespace internal
class RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ParamsDataView {
 public:
  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ParamsDataView() {}

  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ParamsDataView(
      internal::RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeStreamProviderReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::AudioOutputStreamProviderInterfaceBase>>(
            &data_->stream_provider_receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
  inline void GetSessionIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionId(UserType* output) {
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  inline void GetDeviceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDeviceId(UserType* output) {
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::RendererAudioOutputStreamFactory_RequestDeviceAuthorization_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParamsDataView {
 public:
  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParamsDataView() {}

  RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParamsDataView(
      internal::RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::media::mojom::OutputDeviceStatus>(
        data_value, output);
  }

  ::media::mojom::OutputDeviceStatus state() const {
    return static_cast<::media::mojom::OutputDeviceStatus>(data_->state);
  }
  inline void GetOutputParamsDataView(
      ::media::mojom::AudioParametersDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOutputParams(UserType* output) {
    auto* pointer = data_->output_params.Get();
    return mojo::internal::Deserialize<::media::mojom::AudioParametersDataView>(
        pointer, output, context_);
  }
  inline void GetMatchedDeviceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMatchedDeviceId(UserType* output) {
    auto* pointer = data_->matched_device_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ParamsDataView::GetSessionIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ParamsDataView::GetDeviceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParamsDataView::GetOutputParamsDataView(
    ::media::mojom::AudioParametersDataView* output) {
  auto pointer = data_->output_params.Get();
  *output = ::media::mojom::AudioParametersDataView(pointer, context_);
}
inline void RendererAudioOutputStreamFactory_RequestDeviceAuthorization_ResponseParamsDataView::GetMatchedDeviceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->matched_device_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // CONTENT_COMMON_MEDIA_RENDERER_AUDIO_OUTPUT_STREAM_FACTORY_MOJOM_PARAMS_DATA_H_