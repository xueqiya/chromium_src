// content/common/download/mhtml_file_writer.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "content/common/download/mhtml_file_writer.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/file.mojom.h"
#include "mojo/public/mojom/base/time.mojom.h"


#ifndef CONTENT_COMMON_DOWNLOAD_MHTML_FILE_WRITER_MOJOM_JUMBO_H_
#define CONTENT_COMMON_DOWNLOAD_MHTML_FILE_WRITER_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#endif


namespace content {
namespace mojom {


void MhtmlFileWriterInterceptorForTesting::SerializeAsMHTML(SerializeAsMHTMLParamsPtr params, SerializeAsMHTMLCallback callback) {
  GetForwardingInterface()->SerializeAsMHTML(std::move(params), std::move(callback));
}
MhtmlFileWriterAsyncWaiter::MhtmlFileWriterAsyncWaiter(
    MhtmlFileWriter* proxy) : proxy_(proxy) {}

MhtmlFileWriterAsyncWaiter::~MhtmlFileWriterAsyncWaiter() = default;

void MhtmlFileWriterAsyncWaiter::SerializeAsMHTML(
    SerializeAsMHTMLParamsPtr params, MhtmlSaveStatus* out_status, std::vector<std::string>* out_digests_of_uris_to_skip, ::base::TimeDelta* out_renderer_main_thread_time) {
  base::RunLoop loop;
  proxy_->SerializeAsMHTML(std::move(params),
      base::BindOnce(
          [](base::RunLoop* loop,
             MhtmlSaveStatus* out_status
,
             std::vector<std::string>* out_digests_of_uris_to_skip
,
             ::base::TimeDelta* out_renderer_main_thread_time
,
             MhtmlSaveStatus status,
             const std::vector<std::string>& digests_of_uris_to_skip,
             ::base::TimeDelta renderer_main_thread_time) {*out_status = std::move(status);*out_digests_of_uris_to_skip = std::move(digests_of_uris_to_skip);*out_renderer_main_thread_time = std::move(renderer_main_thread_time);
            loop->Quit();
          },
          &loop,
          out_status,
          out_digests_of_uris_to_skip,
          out_renderer_main_thread_time));
  loop.Run();
}





}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif