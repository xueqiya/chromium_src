// content/common/download/mhtml_file_writer.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "content/common/download/mhtml_file_writer.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "content/common/download/mhtml_file_writer.mojom-params-data.h"
#include "content/common/download/mhtml_file_writer.mojom-shared-message-ids.h"

#include "content/common/download/mhtml_file_writer.mojom-import-headers.h"


#ifndef CONTENT_COMMON_DOWNLOAD_MHTML_FILE_WRITER_MOJOM_JUMBO_H_
#define CONTENT_COMMON_DOWNLOAD_MHTML_FILE_WRITER_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#endif
namespace content {
namespace mojom {
SerializeAsMHTMLParams::SerializeAsMHTMLParams()
    : mhtml_boundary_marker(),
      mhtml_binary_encoding(),
      mhtml_popup_overlay_removal(),
      mhtml_problem_detection(),
      digests_of_uris_to_skip(),
      salt(),
      output_handle() {}

SerializeAsMHTMLParams::SerializeAsMHTMLParams(
    const std::string& mhtml_boundary_marker_in,
    bool mhtml_binary_encoding_in,
    bool mhtml_popup_overlay_removal_in,
    bool mhtml_problem_detection_in,
    std::vector<std::string> digests_of_uris_to_skip_in,
    const std::string& salt_in,
    MhtmlOutputHandlePtr output_handle_in)
    : mhtml_boundary_marker(std::move(mhtml_boundary_marker_in)),
      mhtml_binary_encoding(std::move(mhtml_binary_encoding_in)),
      mhtml_popup_overlay_removal(std::move(mhtml_popup_overlay_removal_in)),
      mhtml_problem_detection(std::move(mhtml_problem_detection_in)),
      digests_of_uris_to_skip(std::move(digests_of_uris_to_skip_in)),
      salt(std::move(salt_in)),
      output_handle(std::move(output_handle_in)) {}

SerializeAsMHTMLParams::~SerializeAsMHTMLParams() = default;

bool SerializeAsMHTMLParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
MhtmlOutputHandle::MhtmlOutputHandle() : tag_(Tag::FILE_HANDLE) {
  data_.file_handle = new ::base::File;
}

MhtmlOutputHandle::~MhtmlOutputHandle() {
  DestroyActive();
}


void MhtmlOutputHandle::set_file_handle(
    ::base::File file_handle) {
  if (tag_ == Tag::FILE_HANDLE) {
    *(data_.file_handle) = std::move(file_handle);
  } else {
    DestroyActive();
    tag_ = Tag::FILE_HANDLE;
    data_.file_handle = new ::base::File(
        std::move(file_handle));
  }
}
void MhtmlOutputHandle::set_producer_handle(
    mojo::ScopedDataPipeProducerHandle producer_handle) {
  if (tag_ == Tag::PRODUCER_HANDLE) {
    *(data_.producer_handle) = std::move(producer_handle);
  } else {
    DestroyActive();
    tag_ = Tag::PRODUCER_HANDLE;
    data_.producer_handle = new mojo::ScopedDataPipeProducerHandle(
        std::move(producer_handle));
  }
}

void MhtmlOutputHandle::DestroyActive() {
  switch (tag_) {

    case Tag::FILE_HANDLE:

      delete data_.file_handle;
      break;
    case Tag::PRODUCER_HANDLE:

      delete data_.producer_handle;
      break;
  }
}

bool MhtmlOutputHandle::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
const char MhtmlFileWriter::Name_[] = "content.mojom.MhtmlFileWriter";

class MhtmlFileWriter_SerializeAsMHTML_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  MhtmlFileWriter_SerializeAsMHTML_ForwardToCallback(
      MhtmlFileWriter::SerializeAsMHTMLCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  MhtmlFileWriter::SerializeAsMHTMLCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(MhtmlFileWriter_SerializeAsMHTML_ForwardToCallback);
};

MhtmlFileWriterProxy::MhtmlFileWriterProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void MhtmlFileWriterProxy::SerializeAsMHTML(
    SerializeAsMHTMLParamsPtr in_params, SerializeAsMHTMLCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "content::mojom::MhtmlFileWriter::SerializeAsMHTML");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kMhtmlFileWriter_SerializeAsMHTML_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::content::mojom::internal::MhtmlFileWriter_SerializeAsMHTML_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->params)::BaseType::BufferWriter
      params_writer;
  mojo::internal::Serialize<::content::mojom::SerializeAsMHTMLParamsDataView>(
      in_params, buffer, &params_writer, &serialization_context);
  params->params.Set(
      params_writer.is_null() ? nullptr : params_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->params.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null params in MhtmlFileWriter.SerializeAsMHTML request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MhtmlFileWriter::Name_);
  message.set_method_name("SerializeAsMHTML");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new MhtmlFileWriter_SerializeAsMHTML_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class MhtmlFileWriter_SerializeAsMHTML_ProxyToResponder {
 public:
  static MhtmlFileWriter::SerializeAsMHTMLCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<MhtmlFileWriter_SerializeAsMHTML_ProxyToResponder> proxy(
        new MhtmlFileWriter_SerializeAsMHTML_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&MhtmlFileWriter_SerializeAsMHTML_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~MhtmlFileWriter_SerializeAsMHTML_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  MhtmlFileWriter_SerializeAsMHTML_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "MhtmlFileWriter::SerializeAsMHTMLCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      MhtmlSaveStatus in_status, const std::vector<std::string>& in_digests_of_uris_to_skip, ::base::TimeDelta in_renderer_main_thread_time);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(MhtmlFileWriter_SerializeAsMHTML_ProxyToResponder);
};

bool MhtmlFileWriter_SerializeAsMHTML_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "content::mojom::MhtmlFileWriter::SerializeAsMHTMLCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::MhtmlFileWriter_SerializeAsMHTML_ResponseParams_Data* params =
      reinterpret_cast<
          internal::MhtmlFileWriter_SerializeAsMHTML_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  MhtmlSaveStatus p_status{};
  std::vector<std::string> p_digests_of_uris_to_skip{};
  ::base::TimeDelta p_renderer_main_thread_time{};
  MhtmlFileWriter_SerializeAsMHTML_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadStatus(&p_status))
    success = false;
  if (success && !input_data_view.ReadDigestsOfUrisToSkip(&p_digests_of_uris_to_skip))
    success = false;
  if (success && !input_data_view.ReadRendererMainThreadTime(&p_renderer_main_thread_time))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        MhtmlFileWriter::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_status), 
std::move(p_digests_of_uris_to_skip), 
std::move(p_renderer_main_thread_time));
  return true;
}

void MhtmlFileWriter_SerializeAsMHTML_ProxyToResponder::Run(
    MhtmlSaveStatus in_status, const std::vector<std::string>& in_digests_of_uris_to_skip, ::base::TimeDelta in_renderer_main_thread_time) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kMhtmlFileWriter_SerializeAsMHTML_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::content::mojom::internal::MhtmlFileWriter_SerializeAsMHTML_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::content::mojom::MhtmlSaveStatus>(
      in_status, &params->status);
  typename decltype(params->digests_of_uris_to_skip)::BaseType::BufferWriter
      digests_of_uris_to_skip_writer;
  const mojo::internal::ContainerValidateParams digests_of_uris_to_skip_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
      in_digests_of_uris_to_skip, buffer, &digests_of_uris_to_skip_writer, &digests_of_uris_to_skip_validate_params,
      &serialization_context);
  params->digests_of_uris_to_skip.Set(
      digests_of_uris_to_skip_writer.is_null() ? nullptr : digests_of_uris_to_skip_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->digests_of_uris_to_skip.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null digests_of_uris_to_skip in ");
  typename decltype(params->renderer_main_thread_time)::BaseType::BufferWriter
      renderer_main_thread_time_writer;
  mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
      in_renderer_main_thread_time, buffer, &renderer_main_thread_time_writer, &serialization_context);
  params->renderer_main_thread_time.Set(
      renderer_main_thread_time_writer.is_null() ? nullptr : renderer_main_thread_time_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->renderer_main_thread_time.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null renderer_main_thread_time in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)content::mojom::MhtmlFileWriter::SerializeAsMHTMLCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(MhtmlFileWriter::Name_);
  message.set_method_name("SerializeAsMHTML");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool MhtmlFileWriterStubDispatch::Accept(
    MhtmlFileWriter* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kMhtmlFileWriter_SerializeAsMHTML_Name: {
      break;
    }
  }
  return false;
}

// static
bool MhtmlFileWriterStubDispatch::AcceptWithResponder(
    MhtmlFileWriter* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kMhtmlFileWriter_SerializeAsMHTML_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)content::mojom::MhtmlFileWriter::SerializeAsMHTML",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)content::mojom::MhtmlFileWriter::SerializeAsMHTML");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::MhtmlFileWriter_SerializeAsMHTML_Params_Data* params =
          reinterpret_cast<
              internal::MhtmlFileWriter_SerializeAsMHTML_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SerializeAsMHTMLParamsPtr p_params{};
      MhtmlFileWriter_SerializeAsMHTML_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadParams(&p_params))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            MhtmlFileWriter::Name_, 0, false);
        return false;
      }
      MhtmlFileWriter::SerializeAsMHTMLCallback callback =
          MhtmlFileWriter_SerializeAsMHTML_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SerializeAsMHTML(
std::move(p_params), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kMhtmlFileWriterValidationInfo[] = {
    {&internal::MhtmlFileWriter_SerializeAsMHTML_Params_Data::Validate,
     &internal::MhtmlFileWriter_SerializeAsMHTML_ResponseParams_Data::Validate},
};

bool MhtmlFileWriterRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::content::mojom::MhtmlFileWriter::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kMhtmlFileWriterValidationInfo);
}

bool MhtmlFileWriterResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::content::mojom::MhtmlFileWriter::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kMhtmlFileWriterValidationInfo);
}
}  // namespace mojom
}  // namespace content

namespace mojo {


// static
bool StructTraits<::content::mojom::SerializeAsMHTMLParams::DataView, ::content::mojom::SerializeAsMHTMLParamsPtr>::Read(
    ::content::mojom::SerializeAsMHTMLParams::DataView input,
    ::content::mojom::SerializeAsMHTMLParamsPtr* output) {
  bool success = true;
  ::content::mojom::SerializeAsMHTMLParamsPtr result(::content::mojom::SerializeAsMHTMLParams::New());
  
      if (success && !input.ReadMhtmlBoundaryMarker(&result->mhtml_boundary_marker))
        success = false;
      if (success)
        result->mhtml_binary_encoding = input.mhtml_binary_encoding();
      if (success)
        result->mhtml_popup_overlay_removal = input.mhtml_popup_overlay_removal();
      if (success)
        result->mhtml_problem_detection = input.mhtml_problem_detection();
      if (success && !input.ReadDigestsOfUrisToSkip(&result->digests_of_uris_to_skip))
        success = false;
      if (success && !input.ReadSalt(&result->salt))
        success = false;
      if (success && !input.ReadOutputHandle(&result->output_handle))
        success = false;
  *output = std::move(result);
  return success;
}

// static
bool UnionTraits<::content::mojom::MhtmlOutputHandle::DataView, ::content::mojom::MhtmlOutputHandlePtr>::Read(
    ::content::mojom::MhtmlOutputHandle::DataView input,
    ::content::mojom::MhtmlOutputHandlePtr* output) {
  using UnionType = ::content::mojom::MhtmlOutputHandle;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::FILE_HANDLE: {
      ::base::File result_file_handle;
      if (!input.ReadFileHandle(&result_file_handle))
        return false;

      *output = UnionType::NewFileHandle(
          std::move(result_file_handle));
      break;
    }
    case Tag::PRODUCER_HANDLE: {
      *output = UnionType::NewProducerHandle(
          input.TakeProducerHandle());
      break;
    }
    default:
      return false;
  }
  return true;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif