// content/common/frame.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_FRAME_MOJOM_TEST_UTILS_H_
#define CONTENT_COMMON_FRAME_MOJOM_TEST_UTILS_H_

#include "content/common/frame.mojom.h"
#include "content/common/content_export.h"


namespace content {
namespace mojom {


class CONTENT_EXPORT FrameInterceptorForTesting : public Frame {
  virtual Frame* GetForwardingInterface() = 0;
  void GetInterfaceProvider(mojo::PendingReceiver<::service_manager::mojom::InterfaceProvider> interfaces) override;
  void GetCanonicalUrlForSharing(GetCanonicalUrlForSharingCallback callback) override;
  void BlockRequests() override;
  void ResumeBlockedRequests() override;
  void CancelBlockedRequests() override;
  void SetLifecycleState(::blink::mojom::FrameLifecycleState state) override;
  void ExtractSmartClipData(const ::gfx::Rect& rect, ExtractSmartClipDataCallback callback) override;
  void UpdateBrowserControlsState(::content::BrowserControlsState constraints, ::content::BrowserControlsState current, bool animate) override;
};
class CONTENT_EXPORT FrameAsyncWaiter {
 public:
  explicit FrameAsyncWaiter(Frame* proxy);
  ~FrameAsyncWaiter();
  void GetCanonicalUrlForSharing(
      base::Optional<::GURL>* out_canonical_url);
  void ExtractSmartClipData(
      const ::gfx::Rect& rect, ::base::string16* out_text, ::base::string16* out_html, ::gfx::Rect* out_clip_rect);

 private:
  Frame* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(FrameAsyncWaiter);
};


class CONTENT_EXPORT FrameNavigationControlInterceptorForTesting : public FrameNavigationControl {
  virtual FrameNavigationControl* GetForwardingInterface() = 0;
  void CommitNavigation(::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, ::network::mojom::URLResponseHeadPtr response_head, mojo::ScopedDataPipeConsumerHandle response_body, ::network::mojom::URLLoaderClientEndpointsPtr url_loader_client_endpoints, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, base::Optional<std::vector<::content::mojom::TransferrableURLLoaderPtr>> subresource_overrides, ::blink::mojom::ControllerServiceWorkerInfoPtr controller_service_worker_info, ::blink::mojom::ServiceWorkerProviderInfoForClientPtr provider_info, mojo::PendingRemote<::network::mojom::URLLoaderFactory> prefetch_loader_factory, const ::base::UnguessableToken& devtools_navigation_token, CommitNavigationCallback callback) override;
  void CommitSameDocumentNavigation(::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, CommitSameDocumentNavigationCallback callback) override;
  void HandleRendererDebugURL(const ::GURL& url) override;
  void UpdateSubresourceLoaderFactories(::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories) override;
  void BindDevToolsAgent(mojo::PendingAssociatedRemote<::blink::mojom::DevToolsAgentHost> agent_host, mojo::PendingAssociatedReceiver<::blink::mojom::DevToolsAgent> agent) override;
  void JavaScriptExecuteRequest(const ::base::string16& javascript, bool wants_result, JavaScriptExecuteRequestCallback callback) override;
  void JavaScriptExecuteRequestForTests(const ::base::string16& javascript, bool wants_result, bool has_user_gesture, int32_t world_id, JavaScriptExecuteRequestForTestsCallback callback) override;
  void JavaScriptExecuteRequestInIsolatedWorld(const ::base::string16& javascript, bool wants_result, int32_t world_id, JavaScriptExecuteRequestInIsolatedWorldCallback callback) override;
  void PostMessageEvent(int32_t source_routing_id, const ::base::string16& source_origin, const ::base::string16& target_origin, ::blink::TransferableMessage message) override;
  void ForwardMessageFromHost(::blink::TransferableMessage message, const ::url::Origin& source_origin, const base::Optional<::url::Origin>& target_origin) override;
  void OnPortalActivated(const ::base::UnguessableToken& portal_token, mojo::PendingAssociatedRemote<::blink::mojom::Portal> portal, mojo::PendingAssociatedReceiver<::blink::mojom::PortalClient> portal_client, ::blink::TransferableMessage data, OnPortalActivatedCallback callback) override;
  void ReportContentSecurityPolicyViolation(const ::content::CSPViolationParams& violation_params) override;
};
class CONTENT_EXPORT FrameNavigationControlAsyncWaiter {
 public:
  explicit FrameNavigationControlAsyncWaiter(FrameNavigationControl* proxy);
  ~FrameNavigationControlAsyncWaiter();
  void CommitNavigation(
      ::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, ::network::mojom::URLResponseHeadPtr response_head, mojo::ScopedDataPipeConsumerHandle response_body, ::network::mojom::URLLoaderClientEndpointsPtr url_loader_client_endpoints, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, base::Optional<std::vector<::content::mojom::TransferrableURLLoaderPtr>> subresource_overrides, ::blink::mojom::ControllerServiceWorkerInfoPtr controller_service_worker_info, ::blink::mojom::ServiceWorkerProviderInfoForClientPtr provider_info, mojo::PendingRemote<::network::mojom::URLLoaderFactory> prefetch_loader_factory, const ::base::UnguessableToken& devtools_navigation_token, ::blink::mojom::CommitResult* out_commit_result);
  void CommitSameDocumentNavigation(
      ::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, ::blink::mojom::CommitResult* out_commit_result);
  void JavaScriptExecuteRequest(
      const ::base::string16& javascript, bool wants_result, ::base::Value* out_result);
  void JavaScriptExecuteRequestForTests(
      const ::base::string16& javascript, bool wants_result, bool has_user_gesture, int32_t world_id, ::base::Value* out_result);
  void JavaScriptExecuteRequestInIsolatedWorld(
      const ::base::string16& javascript, bool wants_result, int32_t world_id, ::base::Value* out_result);
  void OnPortalActivated(
      const ::base::UnguessableToken& portal_token, mojo::PendingAssociatedRemote<::blink::mojom::Portal> portal, mojo::PendingAssociatedReceiver<::blink::mojom::PortalClient> portal_client, ::blink::TransferableMessage data, ::blink::mojom::PortalActivateResult* out_result);

 private:
  FrameNavigationControl* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(FrameNavigationControlAsyncWaiter);
};


class CONTENT_EXPORT FrameBindingsControlInterceptorForTesting : public FrameBindingsControl {
  virtual FrameBindingsControl* GetForwardingInterface() = 0;
  void AllowBindings(int32_t enabled_bindings_flags) override;
  void EnableMojoJsBindings() override;
};
class CONTENT_EXPORT FrameBindingsControlAsyncWaiter {
 public:
  explicit FrameBindingsControlAsyncWaiter(FrameBindingsControl* proxy);
  ~FrameBindingsControlAsyncWaiter();

 private:
  FrameBindingsControl* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(FrameBindingsControlAsyncWaiter);
};


class CONTENT_EXPORT FrameFactoryInterceptorForTesting : public FrameFactory {
  virtual FrameFactory* GetForwardingInterface() = 0;
  void CreateFrame(int32_t frame_routing_id, mojo::PendingReceiver<Frame> frame) override;
};
class CONTENT_EXPORT FrameFactoryAsyncWaiter {
 public:
  explicit FrameFactoryAsyncWaiter(FrameFactory* proxy);
  ~FrameFactoryAsyncWaiter();

 private:
  FrameFactory* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(FrameFactoryAsyncWaiter);
};


class CONTENT_EXPORT KeepAliveHandleInterceptorForTesting : public KeepAliveHandle {
  virtual KeepAliveHandle* GetForwardingInterface() = 0;
};
class CONTENT_EXPORT KeepAliveHandleAsyncWaiter {
 public:
  explicit KeepAliveHandleAsyncWaiter(KeepAliveHandle* proxy);
  ~KeepAliveHandleAsyncWaiter();

 private:
  KeepAliveHandle* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(KeepAliveHandleAsyncWaiter);
};


class CONTENT_EXPORT FrameHostInterceptorForTesting : public FrameHost {
  virtual FrameHost* GetForwardingInterface() = 0;
  void CreateNewWindow(CreateNewWindowParamsPtr params, CreateNewWindowCallback callback) override;
  void CreatePortal(mojo::PendingAssociatedReceiver<::blink::mojom::Portal> portal, mojo::PendingAssociatedRemote<::blink::mojom::PortalClient> client, CreatePortalCallback callback) override;
  void AdoptPortal(const ::base::UnguessableToken& portal_token, AdoptPortalCallback callback) override;
  void IssueKeepAliveHandle(mojo::PendingReceiver<KeepAliveHandle> keep_alive_handle) override;
  void DidCommitProvisionalLoad(::std::unique_ptr<::FrameHostMsg_DidCommitProvisionalLoad_Params> params, ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr interface_params) override;
  void DidCommitSameDocumentNavigation(::std::unique_ptr<::FrameHostMsg_DidCommitProvisionalLoad_Params> params) override;
  void BeginNavigation(::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::BeginNavigationParamsPtr begin_params, mojo::PendingRemote<::blink::mojom::BlobURLToken> blob_url_token, mojo::PendingAssociatedRemote<::content::mojom::NavigationClient> navigation_client, mojo::PendingRemote<::blink::mojom::NavigationInitiator> navigation_initiator) override;
  void SubresourceResponseStarted(const ::GURL& url, uint32_t cert_status) override;
  void ResourceLoadComplete(::content::mojom::ResourceLoadInfoPtr url_load_info) override;
  void DidChangeName(const std::string& name, const std::string& unique_name) override;
  void DidSetFramePolicyHeaders(::blink::WebSandboxFlags sandbox_flags, const std::vector<::blink::ParsedFeaturePolicyDeclaration>& feature_policy_header, const base::flat_map<::blink::mojom::FeaturePolicyFeature, ::blink::PolicyValue>& document_policy_header) override;
  void CancelInitialHistoryLoad() override;
  void UpdateEncoding(const std::string& encoding_name) override;
  void FrameSizeChanged(const ::gfx::Size& size) override;
  void UpdateUserGestureCarryoverInfo() override;
  void DidAddMessageToConsole(::blink::mojom::ConsoleMessageLevel log_level, const ::base::string16& msg, int32_t line_number, const ::base::string16& source_id) override;
  void DidFailLoadWithError(const ::GURL& url, int32_t error_code) override;
  void TransferUserActivationFrom(int32_t source_routing_id) override;
  void ShowCreatedWindow(int32_t pending_widget_routing_id, ::WindowOpenDisposition disposition, const ::gfx::Rect& rect, bool opened_by_user_gesture) override;
  void DidAddContentSecurityPolicies(std::vector<::network::mojom::ContentSecurityPolicyPtr> policies) override;
};
class CONTENT_EXPORT FrameHostAsyncWaiter {
 public:
  explicit FrameHostAsyncWaiter(FrameHost* proxy);
  ~FrameHostAsyncWaiter();
  void CreateNewWindow(
      CreateNewWindowParamsPtr params, CreateNewWindowStatus* out_status, CreateNewWindowReplyPtr* out_reply);
  void CreatePortal(
      mojo::PendingAssociatedReceiver<::blink::mojom::Portal> portal, mojo::PendingAssociatedRemote<::blink::mojom::PortalClient> client, int32_t* out_proxy_routing_id, ::content::FrameReplicationState* out_initial_replicated_state, ::base::UnguessableToken* out_portal_token, ::base::UnguessableToken* out_devtools_frame_token);
  void AdoptPortal(
      const ::base::UnguessableToken& portal_token, int32_t* out_proxy_routing_id, ::viz::FrameSinkId* out_frame_sink_id, ::content::FrameReplicationState* out_replicated_state, ::base::UnguessableToken* out_devtools_frame_token);

 private:
  FrameHost* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(FrameHostAsyncWaiter);
};




}  // namespace mojom
}  // namespace content

#endif  // CONTENT_COMMON_FRAME_MOJOM_TEST_UTILS_H_