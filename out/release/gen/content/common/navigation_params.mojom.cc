// content/common/navigation_params.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "content/common/navigation_params.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "content/common/navigation_params.mojom-params-data.h"
#include "content/common/navigation_params.mojom-shared-message-ids.h"

#include "content/common/navigation_params.mojom-import-headers.h"


#ifndef CONTENT_COMMON_NAVIGATION_PARAMS_MOJOM_JUMBO_H_
#define CONTENT_COMMON_NAVIGATION_PARAMS_MOJOM_JUMBO_H_
#include "content/common/frame_messages.h"
#include "content/common/resource_messages.h"
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/file_path_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "mojo/public/cpp/base/values_mojom_traits.h"
#include "services/network/public/cpp/ip_address_mojom_traits.h"
#include "services/network/public/cpp/ip_endpoint_mojom_traits.h"
#include "services/network/public/cpp/load_timing_info_mojom_traits.h"
#include "services/network/public/cpp/net_ipc_param_traits.h"
#include "services/network/public/cpp/network_ipc_param_traits.h"
#include "services/network/public/cpp/network_isolation_key_mojom_traits.h"
#include "services/network/public/cpp/network_param_mojom_traits.h"
#include "services/network/public/cpp/url_request_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/mojo_host_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/proxy_resolver_mojom_traits.h"
#include "third_party/blink/common/feature_policy/feature_policy_mojom_traits.h"
#include "third_party/blink/common/feature_policy/policy_value_mojom_traits.h"
#include "third_party/blink/common/frame/frame_policy_mojom_traits.h"
#include "url/mojom/origin_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif
namespace content {
namespace mojom {
InitiatorCSPInfo::InitiatorCSPInfo()
    : should_check_main_world_csp(::network::mojom::CSPDisposition::CHECK),
      initiator_csp(),
      initiator_self_source() {}

InitiatorCSPInfo::InitiatorCSPInfo(
    ::network::mojom::CSPDisposition should_check_main_world_csp_in,
    std::vector<::network::mojom::ContentSecurityPolicyPtr> initiator_csp_in,
    ::network::mojom::CSPSourcePtr initiator_self_source_in)
    : should_check_main_world_csp(std::move(should_check_main_world_csp_in)),
      initiator_csp(std::move(initiator_csp_in)),
      initiator_self_source(std::move(initiator_self_source_in)) {}

InitiatorCSPInfo::~InitiatorCSPInfo() = default;

bool InitiatorCSPInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BeginNavigationParams::BeginNavigationParams()
    : headers(),
      load_flags(),
      skip_service_worker(),
      request_context_type(),
      mixed_content_context_type(),
      is_form_submission(),
      was_initiated_by_link_click(),
      searchable_form_url(),
      searchable_form_encoding(),
      client_side_redirect_url(),
      devtools_initiator(),
      attach_same_site_cookies(false) {}

BeginNavigationParams::BeginNavigationParams(
    const std::string& headers_in,
    int32_t load_flags_in,
    bool skip_service_worker_in,
    ::blink::mojom::RequestContextType request_context_type_in,
    ::blink::WebMixedContentContextType mixed_content_context_type_in,
    bool is_form_submission_in,
    bool was_initiated_by_link_click_in,
    const ::GURL& searchable_form_url_in,
    const std::string& searchable_form_encoding_in,
    const ::GURL& client_side_redirect_url_in,
    base::Optional<::base::Value> devtools_initiator_in,
    bool attach_same_site_cookies_in)
    : headers(std::move(headers_in)),
      load_flags(std::move(load_flags_in)),
      skip_service_worker(std::move(skip_service_worker_in)),
      request_context_type(std::move(request_context_type_in)),
      mixed_content_context_type(std::move(mixed_content_context_type_in)),
      is_form_submission(std::move(is_form_submission_in)),
      was_initiated_by_link_click(std::move(was_initiated_by_link_click_in)),
      searchable_form_url(std::move(searchable_form_url_in)),
      searchable_form_encoding(std::move(searchable_form_encoding_in)),
      client_side_redirect_url(std::move(client_side_redirect_url_in)),
      devtools_initiator(std::move(devtools_initiator_in)),
      attach_same_site_cookies(std::move(attach_same_site_cookies_in)) {}

BeginNavigationParams::~BeginNavigationParams() = default;

bool BeginNavigationParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CommonNavigationParams::CommonNavigationParams()
    : url(),
      initiator_origin(),
      referrer(),
      transition(),
      navigation_type(NavigationType::DIFFERENT_DOCUMENT),
      download_policy(),
      should_replace_current_entry(false),
      base_url_for_data_url(),
      history_url_for_data_url(),
      previews_state(),
      navigation_start(),
      method("GET"),
      post_data(),
      source_location(),
      started_from_context_menu(false),
      has_user_gesture(false),
      initiator_csp_info(),
      initiator_origin_trial_features(),
      href_translate(),
      is_history_navigation_in_new_child_frame(false),
      input_start() {}

CommonNavigationParams::CommonNavigationParams(
    const ::GURL& url_in,
    const base::Optional<::url::Origin>& initiator_origin_in,
    ::blink::mojom::ReferrerPtr referrer_in,
    ::ui::PageTransition transition_in,
    NavigationType navigation_type_in,
    const ::content::NavigationDownloadPolicy& download_policy_in,
    bool should_replace_current_entry_in,
    const ::GURL& base_url_for_data_url_in,
    const ::GURL& history_url_for_data_url_in,
    int32_t previews_state_in,
    ::base::TimeTicks navigation_start_in,
    const std::string& method_in,
    ::scoped_refptr<::network::ResourceRequestBody> post_data_in,
    const base::Optional<::content::SourceLocation>& source_location_in,
    bool started_from_context_menu_in,
    bool has_user_gesture_in,
    InitiatorCSPInfoPtr initiator_csp_info_in,
    std::vector<int32_t> initiator_origin_trial_features_in,
    const std::string& href_translate_in,
    bool is_history_navigation_in_new_child_frame_in,
    ::base::TimeTicks input_start_in)
    : url(std::move(url_in)),
      initiator_origin(std::move(initiator_origin_in)),
      referrer(std::move(referrer_in)),
      transition(std::move(transition_in)),
      navigation_type(std::move(navigation_type_in)),
      download_policy(std::move(download_policy_in)),
      should_replace_current_entry(std::move(should_replace_current_entry_in)),
      base_url_for_data_url(std::move(base_url_for_data_url_in)),
      history_url_for_data_url(std::move(history_url_for_data_url_in)),
      previews_state(std::move(previews_state_in)),
      navigation_start(std::move(navigation_start_in)),
      method(std::move(method_in)),
      post_data(std::move(post_data_in)),
      source_location(std::move(source_location_in)),
      started_from_context_menu(std::move(started_from_context_menu_in)),
      has_user_gesture(std::move(has_user_gesture_in)),
      initiator_csp_info(std::move(initiator_csp_info_in)),
      initiator_origin_trial_features(std::move(initiator_origin_trial_features_in)),
      href_translate(std::move(href_translate_in)),
      is_history_navigation_in_new_child_frame(std::move(is_history_navigation_in_new_child_frame_in)),
      input_start(std::move(input_start_in)) {}

CommonNavigationParams::~CommonNavigationParams() = default;

bool CommonNavigationParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
NavigationTiming::NavigationTiming()
    : redirect_start(),
      redirect_end(),
      fetch_start() {}

NavigationTiming::NavigationTiming(
    ::base::TimeTicks redirect_start_in,
    ::base::TimeTicks redirect_end_in,
    ::base::TimeTicks fetch_start_in)
    : redirect_start(std::move(redirect_start_in)),
      redirect_end(std::move(redirect_end_in)),
      fetch_start(std::move(fetch_start_in)) {}

NavigationTiming::~NavigationTiming() = default;

bool NavigationTiming::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CommitNavigationParams::CommitNavigationParams()
    : origin_to_commit(),
      is_overriding_user_agent(false),
      redirects(),
      redirect_response(),
      redirect_infos(),
      post_content_type(),
      original_url(),
      original_method(),
      can_load_local_resources(false),
      page_state(),
      nav_entry_id(0),
      subframe_unique_names(),
      intended_as_new_entry(false),
      pending_history_list_offset(-1),
      current_history_list_offset(-1),
      current_history_list_length(0),
      was_discarded(false),
      is_view_source(false),
      should_clear_history_list(false),
      navigation_timing(),
      appcache_host_id(),
      was_activated(::content::mojom::WasActivatedOption::kUnknown),
      navigation_token(),
      prefetched_signed_exchanges(),
      data_url_as_string(),
      is_browser_initiated(false),
      ip_address_space(::network::mojom::IPAddressSpace::kUnknown),
      web_bundle_physical_url(),
      base_url_override_for_web_bundle(),
      frame_policy() {}

CommitNavigationParams::CommitNavigationParams(
    const base::Optional<::url::Origin>& origin_to_commit_in,
    bool is_overriding_user_agent_in,
    std::vector<::GURL> redirects_in,
    std::vector<::network::mojom::URLResponseHeadPtr> redirect_response_in,
    std::vector<::net::RedirectInfo> redirect_infos_in,
    const std::string& post_content_type_in,
    const ::GURL& original_url_in,
    const std::string& original_method_in,
    bool can_load_local_resources_in,
    const ::content::PageState& page_state_in,
    int32_t nav_entry_id_in,
    const base::flat_map<std::string, bool>& subframe_unique_names_in,
    bool intended_as_new_entry_in,
    int32_t pending_history_list_offset_in,
    int32_t current_history_list_offset_in,
    int32_t current_history_list_length_in,
    bool was_discarded_in,
    bool is_view_source_in,
    bool should_clear_history_list_in,
    NavigationTimingPtr navigation_timing_in,
    const base::Optional<::base::UnguessableToken>& appcache_host_id_in,
    ::content::mojom::WasActivatedOption was_activated_in,
    const ::base::UnguessableToken& navigation_token_in,
    std::vector<::content::mojom::PrefetchedSignedExchangeInfoPtr> prefetched_signed_exchanges_in,
    const std::string& data_url_as_string_in,
    bool is_browser_initiated_in,
    ::network::mojom::IPAddressSpace ip_address_space_in,
    const ::GURL& web_bundle_physical_url_in,
    const ::GURL& base_url_override_for_web_bundle_in,
    const base::Optional<::blink::FramePolicy>& frame_policy_in)
    : origin_to_commit(std::move(origin_to_commit_in)),
      is_overriding_user_agent(std::move(is_overriding_user_agent_in)),
      redirects(std::move(redirects_in)),
      redirect_response(std::move(redirect_response_in)),
      redirect_infos(std::move(redirect_infos_in)),
      post_content_type(std::move(post_content_type_in)),
      original_url(std::move(original_url_in)),
      original_method(std::move(original_method_in)),
      can_load_local_resources(std::move(can_load_local_resources_in)),
      page_state(std::move(page_state_in)),
      nav_entry_id(std::move(nav_entry_id_in)),
      subframe_unique_names(std::move(subframe_unique_names_in)),
      intended_as_new_entry(std::move(intended_as_new_entry_in)),
      pending_history_list_offset(std::move(pending_history_list_offset_in)),
      current_history_list_offset(std::move(current_history_list_offset_in)),
      current_history_list_length(std::move(current_history_list_length_in)),
      was_discarded(std::move(was_discarded_in)),
      is_view_source(std::move(is_view_source_in)),
      should_clear_history_list(std::move(should_clear_history_list_in)),
      navigation_timing(std::move(navigation_timing_in)),
      appcache_host_id(std::move(appcache_host_id_in)),
      was_activated(std::move(was_activated_in)),
      navigation_token(std::move(navigation_token_in)),
      prefetched_signed_exchanges(std::move(prefetched_signed_exchanges_in)),
      data_url_as_string(std::move(data_url_as_string_in)),
      is_browser_initiated(std::move(is_browser_initiated_in)),
      ip_address_space(std::move(ip_address_space_in)),
      web_bundle_physical_url(std::move(web_bundle_physical_url_in)),
      base_url_override_for_web_bundle(std::move(base_url_override_for_web_bundle_in)),
      frame_policy(std::move(frame_policy_in)) {}

CommitNavigationParams::~CommitNavigationParams() = default;

bool CommitNavigationParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace content

namespace mojo {


// static
bool StructTraits<::content::mojom::InitiatorCSPInfo::DataView, ::content::mojom::InitiatorCSPInfoPtr>::Read(
    ::content::mojom::InitiatorCSPInfo::DataView input,
    ::content::mojom::InitiatorCSPInfoPtr* output) {
  bool success = true;
  ::content::mojom::InitiatorCSPInfoPtr result(::content::mojom::InitiatorCSPInfo::New());
  
      if (success && !input.ReadShouldCheckMainWorldCsp(&result->should_check_main_world_csp))
        success = false;
      if (success && !input.ReadInitiatorCsp(&result->initiator_csp))
        success = false;
      if (success && !input.ReadInitiatorSelfSource(&result->initiator_self_source))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::content::mojom::BeginNavigationParams::DataView, ::content::mojom::BeginNavigationParamsPtr>::Read(
    ::content::mojom::BeginNavigationParams::DataView input,
    ::content::mojom::BeginNavigationParamsPtr* output) {
  bool success = true;
  ::content::mojom::BeginNavigationParamsPtr result(::content::mojom::BeginNavigationParams::New());
  
      if (success && !input.ReadHeaders(&result->headers))
        success = false;
      if (success)
        result->load_flags = input.load_flags();
      if (success)
        result->skip_service_worker = input.skip_service_worker();
      if (success && !input.ReadRequestContextType(&result->request_context_type))
        success = false;
      if (success && !input.ReadMixedContentContextType(&result->mixed_content_context_type))
        success = false;
      if (success)
        result->is_form_submission = input.is_form_submission();
      if (success)
        result->was_initiated_by_link_click = input.was_initiated_by_link_click();
      if (success && !input.ReadSearchableFormUrl(&result->searchable_form_url))
        success = false;
      if (success && !input.ReadSearchableFormEncoding(&result->searchable_form_encoding))
        success = false;
      if (success && !input.ReadClientSideRedirectUrl(&result->client_side_redirect_url))
        success = false;
      if (success && !input.ReadDevtoolsInitiator(&result->devtools_initiator))
        success = false;
      if (success)
        result->attach_same_site_cookies = input.attach_same_site_cookies();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::content::mojom::CommonNavigationParams::DataView, ::content::mojom::CommonNavigationParamsPtr>::Read(
    ::content::mojom::CommonNavigationParams::DataView input,
    ::content::mojom::CommonNavigationParamsPtr* output) {
  bool success = true;
  ::content::mojom::CommonNavigationParamsPtr result(::content::mojom::CommonNavigationParams::New());
  
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success && !input.ReadInitiatorOrigin(&result->initiator_origin))
        success = false;
      if (success && !input.ReadReferrer(&result->referrer))
        success = false;
      if (success && !input.ReadTransition(&result->transition))
        success = false;
      if (success && !input.ReadNavigationType(&result->navigation_type))
        success = false;
      if (success && !input.ReadDownloadPolicy(&result->download_policy))
        success = false;
      if (success)
        result->should_replace_current_entry = input.should_replace_current_entry();
      if (success && !input.ReadBaseUrlForDataUrl(&result->base_url_for_data_url))
        success = false;
      if (success && !input.ReadHistoryUrlForDataUrl(&result->history_url_for_data_url))
        success = false;
      if (success)
        result->previews_state = input.previews_state();
      if (success && !input.ReadNavigationStart(&result->navigation_start))
        success = false;
      if (success && !input.ReadMethod(&result->method))
        success = false;
      if (success && !input.ReadPostData(&result->post_data))
        success = false;
      if (success && !input.ReadSourceLocation(&result->source_location))
        success = false;
      if (success)
        result->started_from_context_menu = input.started_from_context_menu();
      if (success)
        result->has_user_gesture = input.has_user_gesture();
      if (success && !input.ReadInitiatorCspInfo(&result->initiator_csp_info))
        success = false;
      if (success && !input.ReadInitiatorOriginTrialFeatures(&result->initiator_origin_trial_features))
        success = false;
      if (success && !input.ReadHrefTranslate(&result->href_translate))
        success = false;
      if (success)
        result->is_history_navigation_in_new_child_frame = input.is_history_navigation_in_new_child_frame();
      if (success && !input.ReadInputStart(&result->input_start))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::content::mojom::NavigationTiming::DataView, ::content::mojom::NavigationTimingPtr>::Read(
    ::content::mojom::NavigationTiming::DataView input,
    ::content::mojom::NavigationTimingPtr* output) {
  bool success = true;
  ::content::mojom::NavigationTimingPtr result(::content::mojom::NavigationTiming::New());
  
      if (success && !input.ReadRedirectStart(&result->redirect_start))
        success = false;
      if (success && !input.ReadRedirectEnd(&result->redirect_end))
        success = false;
      if (success && !input.ReadFetchStart(&result->fetch_start))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::content::mojom::CommitNavigationParams::DataView, ::content::mojom::CommitNavigationParamsPtr>::Read(
    ::content::mojom::CommitNavigationParams::DataView input,
    ::content::mojom::CommitNavigationParamsPtr* output) {
  bool success = true;
  ::content::mojom::CommitNavigationParamsPtr result(::content::mojom::CommitNavigationParams::New());
  
      if (success && !input.ReadOriginToCommit(&result->origin_to_commit))
        success = false;
      if (success)
        result->is_overriding_user_agent = input.is_overriding_user_agent();
      if (success && !input.ReadRedirects(&result->redirects))
        success = false;
      if (success && !input.ReadRedirectResponse(&result->redirect_response))
        success = false;
      if (success && !input.ReadRedirectInfos(&result->redirect_infos))
        success = false;
      if (success && !input.ReadPostContentType(&result->post_content_type))
        success = false;
      if (success && !input.ReadOriginalUrl(&result->original_url))
        success = false;
      if (success && !input.ReadOriginalMethod(&result->original_method))
        success = false;
      if (success)
        result->can_load_local_resources = input.can_load_local_resources();
      if (success && !input.ReadPageState(&result->page_state))
        success = false;
      if (success)
        result->nav_entry_id = input.nav_entry_id();
      if (success && !input.ReadSubframeUniqueNames(&result->subframe_unique_names))
        success = false;
      if (success)
        result->intended_as_new_entry = input.intended_as_new_entry();
      if (success)
        result->pending_history_list_offset = input.pending_history_list_offset();
      if (success)
        result->current_history_list_offset = input.current_history_list_offset();
      if (success)
        result->current_history_list_length = input.current_history_list_length();
      if (success)
        result->was_discarded = input.was_discarded();
      if (success)
        result->is_view_source = input.is_view_source();
      if (success)
        result->should_clear_history_list = input.should_clear_history_list();
      if (success && !input.ReadNavigationTiming(&result->navigation_timing))
        success = false;
      if (success && !input.ReadAppcacheHostId(&result->appcache_host_id))
        success = false;
      if (success && !input.ReadWasActivated(&result->was_activated))
        success = false;
      if (success && !input.ReadNavigationToken(&result->navigation_token))
        success = false;
      if (success && !input.ReadPrefetchedSignedExchanges(&result->prefetched_signed_exchanges))
        success = false;
      if (success && !input.ReadDataUrlAsString(&result->data_url_as_string))
        success = false;
      if (success)
        result->is_browser_initiated = input.is_browser_initiated();
      if (success && !input.ReadIpAddressSpace(&result->ip_address_space))
        success = false;
      if (success && !input.ReadWebBundlePhysicalUrl(&result->web_bundle_physical_url))
        success = false;
      if (success && !input.ReadBaseUrlOverrideForWebBundle(&result->base_url_override_for_web_bundle))
        success = false;
      if (success && !input.ReadFramePolicy(&result->frame_policy))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif