// content/common/child_process.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_CHILD_PROCESS_MOJOM_TEST_UTILS_H_
#define CONTENT_COMMON_CHILD_PROCESS_MOJOM_TEST_UTILS_H_

#include "content/common/child_process.mojom.h"
#include "content/common/content_export.h"


namespace content {
namespace mojom {


class CONTENT_EXPORT ChildProcessHostInterceptorForTesting : public ChildProcessHost {
  virtual ChildProcessHost* GetForwardingInterface() = 0;
  void BindHostReceiver(::mojo::GenericPendingReceiver receiver) override;
};
class CONTENT_EXPORT ChildProcessHostAsyncWaiter {
 public:
  explicit ChildProcessHostAsyncWaiter(ChildProcessHost* proxy);
  ~ChildProcessHostAsyncWaiter();

 private:
  ChildProcessHost* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(ChildProcessHostAsyncWaiter);
};


class CONTENT_EXPORT ChildProcessHostBootstrapInterceptorForTesting : public ChildProcessHostBootstrap {
  virtual ChildProcessHostBootstrap* GetForwardingInterface() = 0;
  void BindProcessHost(mojo::PendingReceiver<ChildProcessHost> receiver) override;
};
class CONTENT_EXPORT ChildProcessHostBootstrapAsyncWaiter {
 public:
  explicit ChildProcessHostBootstrapAsyncWaiter(ChildProcessHostBootstrap* proxy);
  ~ChildProcessHostBootstrapAsyncWaiter();

 private:
  ChildProcessHostBootstrap* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(ChildProcessHostBootstrapAsyncWaiter);
};


class CONTENT_EXPORT ChildProcessInterceptorForTesting : public ChildProcess {
  virtual ChildProcess* GetForwardingInterface() = 0;
  void Initialize(mojo::PendingRemote<ChildProcessHostBootstrap> boostrap) override;
  void ProcessShutdown() override;
  void GetBackgroundTracingAgentProvider(mojo::PendingReceiver<::tracing::mojom::BackgroundTracingAgentProvider> receiver) override;
  void CrashHungProcess() override;
  void BootstrapLegacyIpc(mojo::PendingReceiver<::IPC::mojom::ChannelBootstrap> receiver) override;
  void RunService(const std::string& service_name, mojo::PendingReceiver<::service_manager::mojom::Service> receiver) override;
  void BindServiceInterface(::mojo::GenericPendingReceiver receiver) override;
  void BindReceiver(::mojo::GenericPendingReceiver receiver) override;
};
class CONTENT_EXPORT ChildProcessAsyncWaiter {
 public:
  explicit ChildProcessAsyncWaiter(ChildProcess* proxy);
  ~ChildProcessAsyncWaiter();

 private:
  ChildProcess* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(ChildProcessAsyncWaiter);
};




}  // namespace mojom
}  // namespace content

#endif  // CONTENT_COMMON_CHILD_PROCESS_MOJOM_TEST_UTILS_H_