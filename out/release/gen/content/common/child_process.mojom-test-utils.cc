// content/common/child_process.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "content/common/child_process.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "components/tracing/common/background_tracing_agent.mojom.h"
#include "ipc/ipc.mojom.h"
#include "mojo/public/mojom/base/file.mojom.h"
#include "mojo/public/mojom/base/generic_pending_receiver.mojom.h"
#include "services/service_manager/public/mojom/service.mojom.h"


#ifndef CONTENT_COMMON_CHILD_PROCESS_MOJOM_JUMBO_H_
#define CONTENT_COMMON_CHILD_PROCESS_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/generic_pending_receiver_mojom_traits.h"
#endif


namespace content {
namespace mojom {


void ChildProcessHostInterceptorForTesting::BindHostReceiver(::mojo::GenericPendingReceiver receiver) {
  GetForwardingInterface()->BindHostReceiver(std::move(receiver));
}
ChildProcessHostAsyncWaiter::ChildProcessHostAsyncWaiter(
    ChildProcessHost* proxy) : proxy_(proxy) {}

ChildProcessHostAsyncWaiter::~ChildProcessHostAsyncWaiter() = default;




void ChildProcessHostBootstrapInterceptorForTesting::BindProcessHost(mojo::PendingReceiver<ChildProcessHost> receiver) {
  GetForwardingInterface()->BindProcessHost(std::move(receiver));
}
ChildProcessHostBootstrapAsyncWaiter::ChildProcessHostBootstrapAsyncWaiter(
    ChildProcessHostBootstrap* proxy) : proxy_(proxy) {}

ChildProcessHostBootstrapAsyncWaiter::~ChildProcessHostBootstrapAsyncWaiter() = default;




void ChildProcessInterceptorForTesting::Initialize(mojo::PendingRemote<ChildProcessHostBootstrap> boostrap) {
  GetForwardingInterface()->Initialize(std::move(boostrap));
}
void ChildProcessInterceptorForTesting::ProcessShutdown() {
  GetForwardingInterface()->ProcessShutdown();
}
void ChildProcessInterceptorForTesting::GetBackgroundTracingAgentProvider(mojo::PendingReceiver<::tracing::mojom::BackgroundTracingAgentProvider> receiver) {
  GetForwardingInterface()->GetBackgroundTracingAgentProvider(std::move(receiver));
}
void ChildProcessInterceptorForTesting::CrashHungProcess() {
  GetForwardingInterface()->CrashHungProcess();
}
void ChildProcessInterceptorForTesting::BootstrapLegacyIpc(mojo::PendingReceiver<::IPC::mojom::ChannelBootstrap> receiver) {
  GetForwardingInterface()->BootstrapLegacyIpc(std::move(receiver));
}
void ChildProcessInterceptorForTesting::RunService(const std::string& service_name, mojo::PendingReceiver<::service_manager::mojom::Service> receiver) {
  GetForwardingInterface()->RunService(std::move(service_name), std::move(receiver));
}
void ChildProcessInterceptorForTesting::BindServiceInterface(::mojo::GenericPendingReceiver receiver) {
  GetForwardingInterface()->BindServiceInterface(std::move(receiver));
}
void ChildProcessInterceptorForTesting::BindReceiver(::mojo::GenericPendingReceiver receiver) {
  GetForwardingInterface()->BindReceiver(std::move(receiver));
}
ChildProcessAsyncWaiter::ChildProcessAsyncWaiter(
    ChildProcess* proxy) : proxy_(proxy) {}

ChildProcessAsyncWaiter::~ChildProcessAsyncWaiter() = default;






}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif