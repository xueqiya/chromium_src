// content/common/frame.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_FRAME_MOJOM_PARAMS_DATA_H_
#define CONTENT_COMMON_FRAME_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace content {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_GetInterfaceProvider_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Frame_GetInterfaceProvider_Params_Data));
      new (data()) Frame_GetInterfaceProvider_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Frame_GetInterfaceProvider_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Frame_GetInterfaceProvider_Params_Data>(index_);
    }
    Frame_GetInterfaceProvider_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data interfaces;
  uint8_t padfinal_[4];

 private:
  Frame_GetInterfaceProvider_Params_Data();
  ~Frame_GetInterfaceProvider_Params_Data() = delete;
};
static_assert(sizeof(Frame_GetInterfaceProvider_Params_Data) == 16,
              "Bad sizeof(Frame_GetInterfaceProvider_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_GetCanonicalUrlForSharing_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Frame_GetCanonicalUrlForSharing_Params_Data));
      new (data()) Frame_GetCanonicalUrlForSharing_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Frame_GetCanonicalUrlForSharing_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Frame_GetCanonicalUrlForSharing_Params_Data>(index_);
    }
    Frame_GetCanonicalUrlForSharing_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Frame_GetCanonicalUrlForSharing_Params_Data();
  ~Frame_GetCanonicalUrlForSharing_Params_Data() = delete;
};
static_assert(sizeof(Frame_GetCanonicalUrlForSharing_Params_Data) == 8,
              "Bad sizeof(Frame_GetCanonicalUrlForSharing_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_GetCanonicalUrlForSharing_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Frame_GetCanonicalUrlForSharing_ResponseParams_Data));
      new (data()) Frame_GetCanonicalUrlForSharing_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Frame_GetCanonicalUrlForSharing_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Frame_GetCanonicalUrlForSharing_ResponseParams_Data>(index_);
    }
    Frame_GetCanonicalUrlForSharing_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> canonical_url;

 private:
  Frame_GetCanonicalUrlForSharing_ResponseParams_Data();
  ~Frame_GetCanonicalUrlForSharing_ResponseParams_Data() = delete;
};
static_assert(sizeof(Frame_GetCanonicalUrlForSharing_ResponseParams_Data) == 16,
              "Bad sizeof(Frame_GetCanonicalUrlForSharing_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_BlockRequests_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Frame_BlockRequests_Params_Data));
      new (data()) Frame_BlockRequests_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Frame_BlockRequests_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Frame_BlockRequests_Params_Data>(index_);
    }
    Frame_BlockRequests_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Frame_BlockRequests_Params_Data();
  ~Frame_BlockRequests_Params_Data() = delete;
};
static_assert(sizeof(Frame_BlockRequests_Params_Data) == 8,
              "Bad sizeof(Frame_BlockRequests_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_ResumeBlockedRequests_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Frame_ResumeBlockedRequests_Params_Data));
      new (data()) Frame_ResumeBlockedRequests_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Frame_ResumeBlockedRequests_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Frame_ResumeBlockedRequests_Params_Data>(index_);
    }
    Frame_ResumeBlockedRequests_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Frame_ResumeBlockedRequests_Params_Data();
  ~Frame_ResumeBlockedRequests_Params_Data() = delete;
};
static_assert(sizeof(Frame_ResumeBlockedRequests_Params_Data) == 8,
              "Bad sizeof(Frame_ResumeBlockedRequests_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_CancelBlockedRequests_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Frame_CancelBlockedRequests_Params_Data));
      new (data()) Frame_CancelBlockedRequests_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Frame_CancelBlockedRequests_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Frame_CancelBlockedRequests_Params_Data>(index_);
    }
    Frame_CancelBlockedRequests_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Frame_CancelBlockedRequests_Params_Data();
  ~Frame_CancelBlockedRequests_Params_Data() = delete;
};
static_assert(sizeof(Frame_CancelBlockedRequests_Params_Data) == 8,
              "Bad sizeof(Frame_CancelBlockedRequests_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_SetLifecycleState_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Frame_SetLifecycleState_Params_Data));
      new (data()) Frame_SetLifecycleState_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Frame_SetLifecycleState_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Frame_SetLifecycleState_Params_Data>(index_);
    }
    Frame_SetLifecycleState_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state;
  uint8_t padfinal_[4];

 private:
  Frame_SetLifecycleState_Params_Data();
  ~Frame_SetLifecycleState_Params_Data() = delete;
};
static_assert(sizeof(Frame_SetLifecycleState_Params_Data) == 16,
              "Bad sizeof(Frame_SetLifecycleState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_ExtractSmartClipData_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Frame_ExtractSmartClipData_Params_Data));
      new (data()) Frame_ExtractSmartClipData_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Frame_ExtractSmartClipData_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Frame_ExtractSmartClipData_Params_Data>(index_);
    }
    Frame_ExtractSmartClipData_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;

 private:
  Frame_ExtractSmartClipData_Params_Data();
  ~Frame_ExtractSmartClipData_Params_Data() = delete;
};
static_assert(sizeof(Frame_ExtractSmartClipData_Params_Data) == 16,
              "Bad sizeof(Frame_ExtractSmartClipData_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_ExtractSmartClipData_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Frame_ExtractSmartClipData_ResponseParams_Data));
      new (data()) Frame_ExtractSmartClipData_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Frame_ExtractSmartClipData_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Frame_ExtractSmartClipData_ResponseParams_Data>(index_);
    }
    Frame_ExtractSmartClipData_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> text;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> html;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> clip_rect;

 private:
  Frame_ExtractSmartClipData_ResponseParams_Data();
  ~Frame_ExtractSmartClipData_ResponseParams_Data() = delete;
};
static_assert(sizeof(Frame_ExtractSmartClipData_ResponseParams_Data) == 32,
              "Bad sizeof(Frame_ExtractSmartClipData_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_UpdateBrowserControlsState_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Frame_UpdateBrowserControlsState_Params_Data));
      new (data()) Frame_UpdateBrowserControlsState_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Frame_UpdateBrowserControlsState_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Frame_UpdateBrowserControlsState_Params_Data>(index_);
    }
    Frame_UpdateBrowserControlsState_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t constraints;
  int32_t current;
  uint8_t animate : 1;
  uint8_t padfinal_[7];

 private:
  Frame_UpdateBrowserControlsState_Params_Data();
  ~Frame_UpdateBrowserControlsState_Params_Data() = delete;
};
static_assert(sizeof(Frame_UpdateBrowserControlsState_Params_Data) == 24,
              "Bad sizeof(Frame_UpdateBrowserControlsState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_CommitNavigation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_CommitNavigation_Params_Data));
      new (data()) FrameNavigationControl_CommitNavigation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_CommitNavigation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_CommitNavigation_Params_Data>(index_);
    }
    FrameNavigationControl_CommitNavigation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::CommonNavigationParams_Data> common_params;
  mojo::internal::Pointer<::content::mojom::internal::CommitNavigationParams_Data> request_params;
  mojo::internal::Pointer<::network::mojom::internal::URLResponseHead_Data> response_head;
  mojo::internal::Handle_Data response_body;
  uint8_t pad3_[4];
  mojo::internal::Pointer<::network::mojom::internal::URLLoaderClientEndpoints_Data> url_loader_client_endpoints;
  mojo::internal::Pointer<::blink::mojom::internal::URLLoaderFactoryBundle_Data> subresource_loader_factories;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::content::mojom::internal::TransferrableURLLoader_Data>>> subresource_overrides;
  mojo::internal::Pointer<::blink::mojom::internal::ControllerServiceWorkerInfo_Data> controller_service_worker_info;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerProviderInfoForClient_Data> provider_info;
  mojo::internal::Interface_Data prefetch_loader_factory;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_navigation_token;

 private:
  FrameNavigationControl_CommitNavigation_Params_Data();
  ~FrameNavigationControl_CommitNavigation_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_CommitNavigation_Params_Data) == 96,
              "Bad sizeof(FrameNavigationControl_CommitNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_CommitNavigation_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_CommitNavigation_ResponseParams_Data));
      new (data()) FrameNavigationControl_CommitNavigation_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_CommitNavigation_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_CommitNavigation_ResponseParams_Data>(index_);
    }
    FrameNavigationControl_CommitNavigation_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t commit_result;
  uint8_t padfinal_[4];

 private:
  FrameNavigationControl_CommitNavigation_ResponseParams_Data();
  ~FrameNavigationControl_CommitNavigation_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_CommitNavigation_ResponseParams_Data) == 16,
              "Bad sizeof(FrameNavigationControl_CommitNavigation_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_CommitSameDocumentNavigation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_CommitSameDocumentNavigation_Params_Data));
      new (data()) FrameNavigationControl_CommitSameDocumentNavigation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_CommitSameDocumentNavigation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_CommitSameDocumentNavigation_Params_Data>(index_);
    }
    FrameNavigationControl_CommitSameDocumentNavigation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::CommonNavigationParams_Data> common_params;
  mojo::internal::Pointer<::content::mojom::internal::CommitNavigationParams_Data> request_params;

 private:
  FrameNavigationControl_CommitSameDocumentNavigation_Params_Data();
  ~FrameNavigationControl_CommitSameDocumentNavigation_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_CommitSameDocumentNavigation_Params_Data) == 24,
              "Bad sizeof(FrameNavigationControl_CommitSameDocumentNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data));
      new (data()) FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data>(index_);
    }
    FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t commit_result;
  uint8_t padfinal_[4];

 private:
  FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data();
  ~FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data) == 16,
              "Bad sizeof(FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_HandleRendererDebugURL_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_HandleRendererDebugURL_Params_Data));
      new (data()) FrameNavigationControl_HandleRendererDebugURL_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_HandleRendererDebugURL_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_HandleRendererDebugURL_Params_Data>(index_);
    }
    FrameNavigationControl_HandleRendererDebugURL_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  FrameNavigationControl_HandleRendererDebugURL_Params_Data();
  ~FrameNavigationControl_HandleRendererDebugURL_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_HandleRendererDebugURL_Params_Data) == 16,
              "Bad sizeof(FrameNavigationControl_HandleRendererDebugURL_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data));
      new (data()) FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data>(index_);
    }
    FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::URLLoaderFactoryBundle_Data> subresource_loader_factories;

 private:
  FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data();
  ~FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data) == 16,
              "Bad sizeof(FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_BindDevToolsAgent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_BindDevToolsAgent_Params_Data));
      new (data()) FrameNavigationControl_BindDevToolsAgent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_BindDevToolsAgent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_BindDevToolsAgent_Params_Data>(index_);
    }
    FrameNavigationControl_BindDevToolsAgent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data agent_host;
  mojo::internal::AssociatedEndpointHandle_Data agent;
  uint8_t padfinal_[4];

 private:
  FrameNavigationControl_BindDevToolsAgent_Params_Data();
  ~FrameNavigationControl_BindDevToolsAgent_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_BindDevToolsAgent_Params_Data) == 24,
              "Bad sizeof(FrameNavigationControl_BindDevToolsAgent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_JavaScriptExecuteRequest_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_JavaScriptExecuteRequest_Params_Data));
      new (data()) FrameNavigationControl_JavaScriptExecuteRequest_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_JavaScriptExecuteRequest_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_JavaScriptExecuteRequest_Params_Data>(index_);
    }
    FrameNavigationControl_JavaScriptExecuteRequest_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> javascript;
  uint8_t wants_result : 1;
  uint8_t padfinal_[7];

 private:
  FrameNavigationControl_JavaScriptExecuteRequest_Params_Data();
  ~FrameNavigationControl_JavaScriptExecuteRequest_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_JavaScriptExecuteRequest_Params_Data) == 24,
              "Bad sizeof(FrameNavigationControl_JavaScriptExecuteRequest_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data));
      new (data()) FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data>(index_);
    }
    FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::Value_Data result;

 private:
  FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data();
  ~FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data) == 24,
              "Bad sizeof(FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data));
      new (data()) FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data>(index_);
    }
    FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> javascript;
  uint8_t wants_result : 1;
  uint8_t has_user_gesture : 1;
  uint8_t pad2_[3];
  int32_t world_id;

 private:
  FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data();
  ~FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data) == 24,
              "Bad sizeof(FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data));
      new (data()) FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data>(index_);
    }
    FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::Value_Data result;

 private:
  FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data();
  ~FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data) == 24,
              "Bad sizeof(FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data));
      new (data()) FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data>(index_);
    }
    FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> javascript;
  uint8_t wants_result : 1;
  uint8_t pad1_[3];
  int32_t world_id;

 private:
  FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data();
  ~FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data) == 24,
              "Bad sizeof(FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data));
      new (data()) FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data>(index_);
    }
    FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::Value_Data result;

 private:
  FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data();
  ~FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data) == 24,
              "Bad sizeof(FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_PostMessageEvent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_PostMessageEvent_Params_Data));
      new (data()) FrameNavigationControl_PostMessageEvent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_PostMessageEvent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_PostMessageEvent_Params_Data>(index_);
    }
    FrameNavigationControl_PostMessageEvent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t source_routing_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> source_origin;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> target_origin;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;

 private:
  FrameNavigationControl_PostMessageEvent_Params_Data();
  ~FrameNavigationControl_PostMessageEvent_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_PostMessageEvent_Params_Data) == 40,
              "Bad sizeof(FrameNavigationControl_PostMessageEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_ForwardMessageFromHost_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_ForwardMessageFromHost_Params_Data));
      new (data()) FrameNavigationControl_ForwardMessageFromHost_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_ForwardMessageFromHost_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_ForwardMessageFromHost_Params_Data>(index_);
    }
    FrameNavigationControl_ForwardMessageFromHost_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> source_origin;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> target_origin;

 private:
  FrameNavigationControl_ForwardMessageFromHost_Params_Data();
  ~FrameNavigationControl_ForwardMessageFromHost_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_ForwardMessageFromHost_Params_Data) == 32,
              "Bad sizeof(FrameNavigationControl_ForwardMessageFromHost_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_OnPortalActivated_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_OnPortalActivated_Params_Data));
      new (data()) FrameNavigationControl_OnPortalActivated_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_OnPortalActivated_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_OnPortalActivated_Params_Data>(index_);
    }
    FrameNavigationControl_OnPortalActivated_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> portal_token;
  mojo::internal::AssociatedInterface_Data portal;
  mojo::internal::AssociatedEndpointHandle_Data portal_client;
  uint8_t pad2_[4];
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> data;

 private:
  FrameNavigationControl_OnPortalActivated_Params_Data();
  ~FrameNavigationControl_OnPortalActivated_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_OnPortalActivated_Params_Data) == 40,
              "Bad sizeof(FrameNavigationControl_OnPortalActivated_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_OnPortalActivated_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_OnPortalActivated_ResponseParams_Data));
      new (data()) FrameNavigationControl_OnPortalActivated_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_OnPortalActivated_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_OnPortalActivated_ResponseParams_Data>(index_);
    }
    FrameNavigationControl_OnPortalActivated_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  FrameNavigationControl_OnPortalActivated_ResponseParams_Data();
  ~FrameNavigationControl_OnPortalActivated_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_OnPortalActivated_ResponseParams_Data) == 16,
              "Bad sizeof(FrameNavigationControl_OnPortalActivated_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data));
      new (data()) FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data>(index_);
    }
    FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::CSPViolationParams_Data> violation_params;

 private:
  FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data();
  ~FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data() = delete;
};
static_assert(sizeof(FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data) == 16,
              "Bad sizeof(FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameBindingsControl_AllowBindings_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameBindingsControl_AllowBindings_Params_Data));
      new (data()) FrameBindingsControl_AllowBindings_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameBindingsControl_AllowBindings_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameBindingsControl_AllowBindings_Params_Data>(index_);
    }
    FrameBindingsControl_AllowBindings_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t enabled_bindings_flags;
  uint8_t padfinal_[4];

 private:
  FrameBindingsControl_AllowBindings_Params_Data();
  ~FrameBindingsControl_AllowBindings_Params_Data() = delete;
};
static_assert(sizeof(FrameBindingsControl_AllowBindings_Params_Data) == 16,
              "Bad sizeof(FrameBindingsControl_AllowBindings_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameBindingsControl_EnableMojoJsBindings_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameBindingsControl_EnableMojoJsBindings_Params_Data));
      new (data()) FrameBindingsControl_EnableMojoJsBindings_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameBindingsControl_EnableMojoJsBindings_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameBindingsControl_EnableMojoJsBindings_Params_Data>(index_);
    }
    FrameBindingsControl_EnableMojoJsBindings_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameBindingsControl_EnableMojoJsBindings_Params_Data();
  ~FrameBindingsControl_EnableMojoJsBindings_Params_Data() = delete;
};
static_assert(sizeof(FrameBindingsControl_EnableMojoJsBindings_Params_Data) == 8,
              "Bad sizeof(FrameBindingsControl_EnableMojoJsBindings_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameFactory_CreateFrame_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameFactory_CreateFrame_Params_Data));
      new (data()) FrameFactory_CreateFrame_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameFactory_CreateFrame_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameFactory_CreateFrame_Params_Data>(index_);
    }
    FrameFactory_CreateFrame_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t frame_routing_id;
  mojo::internal::Handle_Data frame;

 private:
  FrameFactory_CreateFrame_Params_Data();
  ~FrameFactory_CreateFrame_Params_Data() = delete;
};
static_assert(sizeof(FrameFactory_CreateFrame_Params_Data) == 16,
              "Bad sizeof(FrameFactory_CreateFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_CreateNewWindow_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_CreateNewWindow_Params_Data));
      new (data()) FrameHost_CreateNewWindow_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_CreateNewWindow_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_CreateNewWindow_Params_Data>(index_);
    }
    FrameHost_CreateNewWindow_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::CreateNewWindowParams_Data> params;

 private:
  FrameHost_CreateNewWindow_Params_Data();
  ~FrameHost_CreateNewWindow_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_CreateNewWindow_Params_Data) == 16,
              "Bad sizeof(FrameHost_CreateNewWindow_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_CreateNewWindow_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_CreateNewWindow_ResponseParams_Data));
      new (data()) FrameHost_CreateNewWindow_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_CreateNewWindow_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_CreateNewWindow_ResponseParams_Data>(index_);
    }
    FrameHost_CreateNewWindow_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::CreateNewWindowReply_Data> reply;

 private:
  FrameHost_CreateNewWindow_ResponseParams_Data();
  ~FrameHost_CreateNewWindow_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameHost_CreateNewWindow_ResponseParams_Data) == 24,
              "Bad sizeof(FrameHost_CreateNewWindow_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_CreatePortal_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_CreatePortal_Params_Data));
      new (data()) FrameHost_CreatePortal_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_CreatePortal_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_CreatePortal_Params_Data>(index_);
    }
    FrameHost_CreatePortal_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data portal;
  mojo::internal::AssociatedInterface_Data client;
  uint8_t padfinal_[4];

 private:
  FrameHost_CreatePortal_Params_Data();
  ~FrameHost_CreatePortal_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_CreatePortal_Params_Data) == 24,
              "Bad sizeof(FrameHost_CreatePortal_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_CreatePortal_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_CreatePortal_ResponseParams_Data));
      new (data()) FrameHost_CreatePortal_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_CreatePortal_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_CreatePortal_ResponseParams_Data>(index_);
    }
    FrameHost_CreatePortal_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t proxy_routing_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::content::mojom::internal::FrameReplicationState_Data> initial_replicated_state;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> portal_token;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_frame_token;

 private:
  FrameHost_CreatePortal_ResponseParams_Data();
  ~FrameHost_CreatePortal_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameHost_CreatePortal_ResponseParams_Data) == 40,
              "Bad sizeof(FrameHost_CreatePortal_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_AdoptPortal_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_AdoptPortal_Params_Data));
      new (data()) FrameHost_AdoptPortal_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_AdoptPortal_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_AdoptPortal_Params_Data>(index_);
    }
    FrameHost_AdoptPortal_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> portal_token;

 private:
  FrameHost_AdoptPortal_Params_Data();
  ~FrameHost_AdoptPortal_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_AdoptPortal_Params_Data) == 16,
              "Bad sizeof(FrameHost_AdoptPortal_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_AdoptPortal_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_AdoptPortal_ResponseParams_Data));
      new (data()) FrameHost_AdoptPortal_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_AdoptPortal_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_AdoptPortal_ResponseParams_Data>(index_);
    }
    FrameHost_AdoptPortal_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t proxy_routing_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> frame_sink_id;
  mojo::internal::Pointer<::content::mojom::internal::FrameReplicationState_Data> replicated_state;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_frame_token;

 private:
  FrameHost_AdoptPortal_ResponseParams_Data();
  ~FrameHost_AdoptPortal_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameHost_AdoptPortal_ResponseParams_Data) == 40,
              "Bad sizeof(FrameHost_AdoptPortal_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_IssueKeepAliveHandle_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_IssueKeepAliveHandle_Params_Data));
      new (data()) FrameHost_IssueKeepAliveHandle_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_IssueKeepAliveHandle_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_IssueKeepAliveHandle_Params_Data>(index_);
    }
    FrameHost_IssueKeepAliveHandle_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data keep_alive_handle;
  uint8_t padfinal_[4];

 private:
  FrameHost_IssueKeepAliveHandle_Params_Data();
  ~FrameHost_IssueKeepAliveHandle_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_IssueKeepAliveHandle_Params_Data) == 16,
              "Bad sizeof(FrameHost_IssueKeepAliveHandle_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidCommitProvisionalLoad_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_DidCommitProvisionalLoad_Params_Data));
      new (data()) FrameHost_DidCommitProvisionalLoad_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_DidCommitProvisionalLoad_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_DidCommitProvisionalLoad_Params_Data>(index_);
    }
    FrameHost_DidCommitProvisionalLoad_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::DidCommitProvisionalLoadParams_Data> params;
  mojo::internal::Pointer<::content::mojom::internal::DidCommitProvisionalLoadInterfaceParams_Data> interface_params;

 private:
  FrameHost_DidCommitProvisionalLoad_Params_Data();
  ~FrameHost_DidCommitProvisionalLoad_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidCommitProvisionalLoad_Params_Data) == 24,
              "Bad sizeof(FrameHost_DidCommitProvisionalLoad_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidCommitSameDocumentNavigation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_DidCommitSameDocumentNavigation_Params_Data));
      new (data()) FrameHost_DidCommitSameDocumentNavigation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_DidCommitSameDocumentNavigation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_DidCommitSameDocumentNavigation_Params_Data>(index_);
    }
    FrameHost_DidCommitSameDocumentNavigation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::DidCommitProvisionalLoadParams_Data> params;

 private:
  FrameHost_DidCommitSameDocumentNavigation_Params_Data();
  ~FrameHost_DidCommitSameDocumentNavigation_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidCommitSameDocumentNavigation_Params_Data) == 16,
              "Bad sizeof(FrameHost_DidCommitSameDocumentNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_BeginNavigation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_BeginNavigation_Params_Data));
      new (data()) FrameHost_BeginNavigation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_BeginNavigation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_BeginNavigation_Params_Data>(index_);
    }
    FrameHost_BeginNavigation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::CommonNavigationParams_Data> common_params;
  mojo::internal::Pointer<::content::mojom::internal::BeginNavigationParams_Data> begin_params;
  mojo::internal::Interface_Data blob_url_token;
  mojo::internal::AssociatedInterface_Data navigation_client;
  mojo::internal::Interface_Data navigation_initiator;

 private:
  FrameHost_BeginNavigation_Params_Data();
  ~FrameHost_BeginNavigation_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_BeginNavigation_Params_Data) == 48,
              "Bad sizeof(FrameHost_BeginNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_SubresourceResponseStarted_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_SubresourceResponseStarted_Params_Data));
      new (data()) FrameHost_SubresourceResponseStarted_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_SubresourceResponseStarted_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_SubresourceResponseStarted_Params_Data>(index_);
    }
    FrameHost_SubresourceResponseStarted_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  uint32_t cert_status;
  uint8_t padfinal_[4];

 private:
  FrameHost_SubresourceResponseStarted_Params_Data();
  ~FrameHost_SubresourceResponseStarted_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_SubresourceResponseStarted_Params_Data) == 24,
              "Bad sizeof(FrameHost_SubresourceResponseStarted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_ResourceLoadComplete_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_ResourceLoadComplete_Params_Data));
      new (data()) FrameHost_ResourceLoadComplete_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_ResourceLoadComplete_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_ResourceLoadComplete_Params_Data>(index_);
    }
    FrameHost_ResourceLoadComplete_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::ResourceLoadInfo_Data> url_load_info;

 private:
  FrameHost_ResourceLoadComplete_Params_Data();
  ~FrameHost_ResourceLoadComplete_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_ResourceLoadComplete_Params_Data) == 16,
              "Bad sizeof(FrameHost_ResourceLoadComplete_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidChangeName_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_DidChangeName_Params_Data));
      new (data()) FrameHost_DidChangeName_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_DidChangeName_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_DidChangeName_Params_Data>(index_);
    }
    FrameHost_DidChangeName_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> unique_name;

 private:
  FrameHost_DidChangeName_Params_Data();
  ~FrameHost_DidChangeName_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidChangeName_Params_Data) == 24,
              "Bad sizeof(FrameHost_DidChangeName_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidSetFramePolicyHeaders_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_DidSetFramePolicyHeaders_Params_Data));
      new (data()) FrameHost_DidSetFramePolicyHeaders_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_DidSetFramePolicyHeaders_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_DidSetFramePolicyHeaders_Params_Data>(index_);
    }
    FrameHost_DidSetFramePolicyHeaders_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t sandbox_flags;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::blink::mojom::internal::ParsedFeaturePolicyDeclaration_Data>>> feature_policy_header;
  mojo::internal::Pointer<mojo::internal::Map_Data<int32_t, mojo::internal::Pointer<::blink::mojom::internal::PolicyValue_Data>>> document_policy_header;

 private:
  FrameHost_DidSetFramePolicyHeaders_Params_Data();
  ~FrameHost_DidSetFramePolicyHeaders_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidSetFramePolicyHeaders_Params_Data) == 32,
              "Bad sizeof(FrameHost_DidSetFramePolicyHeaders_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_CancelInitialHistoryLoad_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_CancelInitialHistoryLoad_Params_Data));
      new (data()) FrameHost_CancelInitialHistoryLoad_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_CancelInitialHistoryLoad_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_CancelInitialHistoryLoad_Params_Data>(index_);
    }
    FrameHost_CancelInitialHistoryLoad_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameHost_CancelInitialHistoryLoad_Params_Data();
  ~FrameHost_CancelInitialHistoryLoad_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_CancelInitialHistoryLoad_Params_Data) == 8,
              "Bad sizeof(FrameHost_CancelInitialHistoryLoad_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_UpdateEncoding_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_UpdateEncoding_Params_Data));
      new (data()) FrameHost_UpdateEncoding_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_UpdateEncoding_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_UpdateEncoding_Params_Data>(index_);
    }
    FrameHost_UpdateEncoding_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> encoding_name;

 private:
  FrameHost_UpdateEncoding_Params_Data();
  ~FrameHost_UpdateEncoding_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_UpdateEncoding_Params_Data) == 16,
              "Bad sizeof(FrameHost_UpdateEncoding_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_FrameSizeChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_FrameSizeChanged_Params_Data));
      new (data()) FrameHost_FrameSizeChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_FrameSizeChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_FrameSizeChanged_Params_Data>(index_);
    }
    FrameHost_FrameSizeChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> size;

 private:
  FrameHost_FrameSizeChanged_Params_Data();
  ~FrameHost_FrameSizeChanged_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_FrameSizeChanged_Params_Data) == 16,
              "Bad sizeof(FrameHost_FrameSizeChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_UpdateUserGestureCarryoverInfo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_UpdateUserGestureCarryoverInfo_Params_Data));
      new (data()) FrameHost_UpdateUserGestureCarryoverInfo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_UpdateUserGestureCarryoverInfo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_UpdateUserGestureCarryoverInfo_Params_Data>(index_);
    }
    FrameHost_UpdateUserGestureCarryoverInfo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameHost_UpdateUserGestureCarryoverInfo_Params_Data();
  ~FrameHost_UpdateUserGestureCarryoverInfo_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_UpdateUserGestureCarryoverInfo_Params_Data) == 8,
              "Bad sizeof(FrameHost_UpdateUserGestureCarryoverInfo_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidAddMessageToConsole_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_DidAddMessageToConsole_Params_Data));
      new (data()) FrameHost_DidAddMessageToConsole_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_DidAddMessageToConsole_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_DidAddMessageToConsole_Params_Data>(index_);
    }
    FrameHost_DidAddMessageToConsole_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t log_level;
  int32_t line_number;
  mojo::internal::Pointer<::mojo_base::mojom::internal::BigString16_Data> msg;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> source_id;

 private:
  FrameHost_DidAddMessageToConsole_Params_Data();
  ~FrameHost_DidAddMessageToConsole_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidAddMessageToConsole_Params_Data) == 32,
              "Bad sizeof(FrameHost_DidAddMessageToConsole_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidFailLoadWithError_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_DidFailLoadWithError_Params_Data));
      new (data()) FrameHost_DidFailLoadWithError_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_DidFailLoadWithError_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_DidFailLoadWithError_Params_Data>(index_);
    }
    FrameHost_DidFailLoadWithError_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  int32_t error_code;
  uint8_t padfinal_[4];

 private:
  FrameHost_DidFailLoadWithError_Params_Data();
  ~FrameHost_DidFailLoadWithError_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidFailLoadWithError_Params_Data) == 24,
              "Bad sizeof(FrameHost_DidFailLoadWithError_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_TransferUserActivationFrom_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_TransferUserActivationFrom_Params_Data));
      new (data()) FrameHost_TransferUserActivationFrom_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_TransferUserActivationFrom_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_TransferUserActivationFrom_Params_Data>(index_);
    }
    FrameHost_TransferUserActivationFrom_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t source_routing_id;
  uint8_t padfinal_[4];

 private:
  FrameHost_TransferUserActivationFrom_Params_Data();
  ~FrameHost_TransferUserActivationFrom_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_TransferUserActivationFrom_Params_Data) == 16,
              "Bad sizeof(FrameHost_TransferUserActivationFrom_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_ShowCreatedWindow_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_ShowCreatedWindow_Params_Data));
      new (data()) FrameHost_ShowCreatedWindow_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_ShowCreatedWindow_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_ShowCreatedWindow_Params_Data>(index_);
    }
    FrameHost_ShowCreatedWindow_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t pending_widget_routing_id;
  int32_t disposition;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;
  uint8_t opened_by_user_gesture : 1;
  uint8_t padfinal_[7];

 private:
  FrameHost_ShowCreatedWindow_Params_Data();
  ~FrameHost_ShowCreatedWindow_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_ShowCreatedWindow_Params_Data) == 32,
              "Bad sizeof(FrameHost_ShowCreatedWindow_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidAddContentSecurityPolicies_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameHost_DidAddContentSecurityPolicies_Params_Data));
      new (data()) FrameHost_DidAddContentSecurityPolicies_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameHost_DidAddContentSecurityPolicies_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameHost_DidAddContentSecurityPolicies_Params_Data>(index_);
    }
    FrameHost_DidAddContentSecurityPolicies_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::ContentSecurityPolicy_Data>>> policies;

 private:
  FrameHost_DidAddContentSecurityPolicies_Params_Data();
  ~FrameHost_DidAddContentSecurityPolicies_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidAddContentSecurityPolicies_Params_Data) == 16,
              "Bad sizeof(FrameHost_DidAddContentSecurityPolicies_Params_Data)");

}  // namespace internal
class Frame_GetInterfaceProvider_ParamsDataView {
 public:
  Frame_GetInterfaceProvider_ParamsDataView() {}

  Frame_GetInterfaceProvider_ParamsDataView(
      internal::Frame_GetInterfaceProvider_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeInterfaces() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::service_manager::mojom::InterfaceProviderInterfaceBase>>(
            &data_->interfaces, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Frame_GetInterfaceProvider_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Frame_GetCanonicalUrlForSharing_ParamsDataView {
 public:
  Frame_GetCanonicalUrlForSharing_ParamsDataView() {}

  Frame_GetCanonicalUrlForSharing_ParamsDataView(
      internal::Frame_GetCanonicalUrlForSharing_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Frame_GetCanonicalUrlForSharing_Params_Data* data_ = nullptr;
};

class Frame_GetCanonicalUrlForSharing_ResponseParamsDataView {
 public:
  Frame_GetCanonicalUrlForSharing_ResponseParamsDataView() {}

  Frame_GetCanonicalUrlForSharing_ResponseParamsDataView(
      internal::Frame_GetCanonicalUrlForSharing_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCanonicalUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCanonicalUrl(UserType* output) {
    auto* pointer = data_->canonical_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::Frame_GetCanonicalUrlForSharing_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Frame_BlockRequests_ParamsDataView {
 public:
  Frame_BlockRequests_ParamsDataView() {}

  Frame_BlockRequests_ParamsDataView(
      internal::Frame_BlockRequests_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Frame_BlockRequests_Params_Data* data_ = nullptr;
};

class Frame_ResumeBlockedRequests_ParamsDataView {
 public:
  Frame_ResumeBlockedRequests_ParamsDataView() {}

  Frame_ResumeBlockedRequests_ParamsDataView(
      internal::Frame_ResumeBlockedRequests_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Frame_ResumeBlockedRequests_Params_Data* data_ = nullptr;
};

class Frame_CancelBlockedRequests_ParamsDataView {
 public:
  Frame_CancelBlockedRequests_ParamsDataView() {}

  Frame_CancelBlockedRequests_ParamsDataView(
      internal::Frame_CancelBlockedRequests_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Frame_CancelBlockedRequests_Params_Data* data_ = nullptr;
};

class Frame_SetLifecycleState_ParamsDataView {
 public:
  Frame_SetLifecycleState_ParamsDataView() {}

  Frame_SetLifecycleState_ParamsDataView(
      internal::Frame_SetLifecycleState_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::blink::mojom::FrameLifecycleState>(
        data_value, output);
  }

  ::blink::mojom::FrameLifecycleState state() const {
    return static_cast<::blink::mojom::FrameLifecycleState>(data_->state);
  }
 private:
  internal::Frame_SetLifecycleState_Params_Data* data_ = nullptr;
};

class Frame_ExtractSmartClipData_ParamsDataView {
 public:
  Frame_ExtractSmartClipData_ParamsDataView() {}

  Frame_ExtractSmartClipData_ParamsDataView(
      internal::Frame_ExtractSmartClipData_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRect(UserType* output) {
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, context_);
  }
 private:
  internal::Frame_ExtractSmartClipData_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Frame_ExtractSmartClipData_ResponseParamsDataView {
 public:
  Frame_ExtractSmartClipData_ResponseParamsDataView() {}

  Frame_ExtractSmartClipData_ResponseParamsDataView(
      internal::Frame_ExtractSmartClipData_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTextDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadText(UserType* output) {
    auto* pointer = data_->text.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetHtmlDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHtml(UserType* output) {
    auto* pointer = data_->html.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetClipRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadClipRect(UserType* output) {
    auto* pointer = data_->clip_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, context_);
  }
 private:
  internal::Frame_ExtractSmartClipData_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Frame_UpdateBrowserControlsState_ParamsDataView {
 public:
  Frame_UpdateBrowserControlsState_ParamsDataView() {}

  Frame_UpdateBrowserControlsState_ParamsDataView(
      internal::Frame_UpdateBrowserControlsState_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadConstraints(UserType* output) const {
    auto data_value = data_->constraints;
    return mojo::internal::Deserialize<::content::mojom::BrowserControlsState>(
        data_value, output);
  }

  ::content::mojom::BrowserControlsState constraints() const {
    return static_cast<::content::mojom::BrowserControlsState>(data_->constraints);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCurrent(UserType* output) const {
    auto data_value = data_->current;
    return mojo::internal::Deserialize<::content::mojom::BrowserControlsState>(
        data_value, output);
  }

  ::content::mojom::BrowserControlsState current() const {
    return static_cast<::content::mojom::BrowserControlsState>(data_->current);
  }
  bool animate() const {
    return data_->animate;
  }
 private:
  internal::Frame_UpdateBrowserControlsState_Params_Data* data_ = nullptr;
};

class FrameNavigationControl_CommitNavigation_ParamsDataView {
 public:
  FrameNavigationControl_CommitNavigation_ParamsDataView() {}

  FrameNavigationControl_CommitNavigation_ParamsDataView(
      internal::FrameNavigationControl_CommitNavigation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCommonParamsDataView(
      ::content::mojom::CommonNavigationParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCommonParams(UserType* output) {
    auto* pointer = data_->common_params.Get();
    return mojo::internal::Deserialize<::content::mojom::CommonNavigationParamsDataView>(
        pointer, output, context_);
  }
  inline void GetRequestParamsDataView(
      ::content::mojom::CommitNavigationParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRequestParams(UserType* output) {
    auto* pointer = data_->request_params.Get();
    return mojo::internal::Deserialize<::content::mojom::CommitNavigationParamsDataView>(
        pointer, output, context_);
  }
  inline void GetResponseHeadDataView(
      ::network::mojom::URLResponseHeadDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResponseHead(UserType* output) {
    auto* pointer = data_->response_head.Get();
    return mojo::internal::Deserialize<::network::mojom::URLResponseHeadDataView>(
        pointer, output, context_);
  }
  mojo::ScopedDataPipeConsumerHandle TakeResponseBody() {
    mojo::ScopedDataPipeConsumerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeConsumerHandle>(
            &data_->response_body, &result, context_);
    DCHECK(ret);
    return result;
  }
  inline void GetUrlLoaderClientEndpointsDataView(
      ::network::mojom::URLLoaderClientEndpointsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrlLoaderClientEndpoints(UserType* output) {
    auto* pointer = data_->url_loader_client_endpoints.Get();
    return mojo::internal::Deserialize<::network::mojom::URLLoaderClientEndpointsDataView>(
        pointer, output, context_);
  }
  inline void GetSubresourceLoaderFactoriesDataView(
      ::blink::mojom::URLLoaderFactoryBundleDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSubresourceLoaderFactories(UserType* output) {
    auto* pointer = data_->subresource_loader_factories.Get();
    return mojo::internal::Deserialize<::blink::mojom::URLLoaderFactoryBundleDataView>(
        pointer, output, context_);
  }
  inline void GetSubresourceOverridesDataView(
      mojo::ArrayDataView<::content::mojom::TransferrableURLLoaderDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSubresourceOverrides(UserType* output) {
    auto* pointer = data_->subresource_overrides.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::content::mojom::TransferrableURLLoaderDataView>>(
        pointer, output, context_);
  }
  inline void GetControllerServiceWorkerInfoDataView(
      ::blink::mojom::ControllerServiceWorkerInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadControllerServiceWorkerInfo(UserType* output) {
    auto* pointer = data_->controller_service_worker_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ControllerServiceWorkerInfoDataView>(
        pointer, output, context_);
  }
  inline void GetProviderInfoDataView(
      ::blink::mojom::ServiceWorkerProviderInfoForClientDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProviderInfo(UserType* output) {
    auto* pointer = data_->provider_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerProviderInfoForClientDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakePrefetchLoaderFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::URLLoaderFactoryInterfaceBase>>(
            &data_->prefetch_loader_factory, &result, context_);
    DCHECK(ret);
    return result;
  }
  inline void GetDevtoolsNavigationTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevtoolsNavigationToken(UserType* output) {
    auto* pointer = data_->devtools_navigation_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_CommitNavigation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_CommitNavigation_ResponseParamsDataView {
 public:
  FrameNavigationControl_CommitNavigation_ResponseParamsDataView() {}

  FrameNavigationControl_CommitNavigation_ResponseParamsDataView(
      internal::FrameNavigationControl_CommitNavigation_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCommitResult(UserType* output) const {
    auto data_value = data_->commit_result;
    return mojo::internal::Deserialize<::blink::mojom::CommitResult>(
        data_value, output);
  }

  ::blink::mojom::CommitResult commit_result() const {
    return static_cast<::blink::mojom::CommitResult>(data_->commit_result);
  }
 private:
  internal::FrameNavigationControl_CommitNavigation_ResponseParams_Data* data_ = nullptr;
};

class FrameNavigationControl_CommitSameDocumentNavigation_ParamsDataView {
 public:
  FrameNavigationControl_CommitSameDocumentNavigation_ParamsDataView() {}

  FrameNavigationControl_CommitSameDocumentNavigation_ParamsDataView(
      internal::FrameNavigationControl_CommitSameDocumentNavigation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCommonParamsDataView(
      ::content::mojom::CommonNavigationParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCommonParams(UserType* output) {
    auto* pointer = data_->common_params.Get();
    return mojo::internal::Deserialize<::content::mojom::CommonNavigationParamsDataView>(
        pointer, output, context_);
  }
  inline void GetRequestParamsDataView(
      ::content::mojom::CommitNavigationParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRequestParams(UserType* output) {
    auto* pointer = data_->request_params.Get();
    return mojo::internal::Deserialize<::content::mojom::CommitNavigationParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_CommitSameDocumentNavigation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_CommitSameDocumentNavigation_ResponseParamsDataView {
 public:
  FrameNavigationControl_CommitSameDocumentNavigation_ResponseParamsDataView() {}

  FrameNavigationControl_CommitSameDocumentNavigation_ResponseParamsDataView(
      internal::FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCommitResult(UserType* output) const {
    auto data_value = data_->commit_result;
    return mojo::internal::Deserialize<::blink::mojom::CommitResult>(
        data_value, output);
  }

  ::blink::mojom::CommitResult commit_result() const {
    return static_cast<::blink::mojom::CommitResult>(data_->commit_result);
  }
 private:
  internal::FrameNavigationControl_CommitSameDocumentNavigation_ResponseParams_Data* data_ = nullptr;
};

class FrameNavigationControl_HandleRendererDebugURL_ParamsDataView {
 public:
  FrameNavigationControl_HandleRendererDebugURL_ParamsDataView() {}

  FrameNavigationControl_HandleRendererDebugURL_ParamsDataView(
      internal::FrameNavigationControl_HandleRendererDebugURL_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_HandleRendererDebugURL_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_UpdateSubresourceLoaderFactories_ParamsDataView {
 public:
  FrameNavigationControl_UpdateSubresourceLoaderFactories_ParamsDataView() {}

  FrameNavigationControl_UpdateSubresourceLoaderFactories_ParamsDataView(
      internal::FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSubresourceLoaderFactoriesDataView(
      ::blink::mojom::URLLoaderFactoryBundleDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSubresourceLoaderFactories(UserType* output) {
    auto* pointer = data_->subresource_loader_factories.Get();
    return mojo::internal::Deserialize<::blink::mojom::URLLoaderFactoryBundleDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_UpdateSubresourceLoaderFactories_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_BindDevToolsAgent_ParamsDataView {
 public:
  FrameNavigationControl_BindDevToolsAgent_ParamsDataView() {}

  FrameNavigationControl_BindDevToolsAgent_ParamsDataView(
      internal::FrameNavigationControl_BindDevToolsAgent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeAgentHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::DevToolsAgentHostAssociatedPtrInfoDataView>(
            &data_->agent_host, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeAgent() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::DevToolsAgentAssociatedRequestDataView>(
            &data_->agent, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameNavigationControl_BindDevToolsAgent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_JavaScriptExecuteRequest_ParamsDataView {
 public:
  FrameNavigationControl_JavaScriptExecuteRequest_ParamsDataView() {}

  FrameNavigationControl_JavaScriptExecuteRequest_ParamsDataView(
      internal::FrameNavigationControl_JavaScriptExecuteRequest_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetJavascriptDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadJavascript(UserType* output) {
    auto* pointer = data_->javascript.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  bool wants_result() const {
    return data_->wants_result;
  }
 private:
  internal::FrameNavigationControl_JavaScriptExecuteRequest_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_JavaScriptExecuteRequest_ResponseParamsDataView {
 public:
  FrameNavigationControl_JavaScriptExecuteRequest_ResponseParamsDataView() {}

  FrameNavigationControl_JavaScriptExecuteRequest_ResponseParamsDataView(
      internal::FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::mojo_base::mojom::ValueDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) {
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::ValueDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_JavaScriptExecuteRequest_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_JavaScriptExecuteRequestForTests_ParamsDataView {
 public:
  FrameNavigationControl_JavaScriptExecuteRequestForTests_ParamsDataView() {}

  FrameNavigationControl_JavaScriptExecuteRequestForTests_ParamsDataView(
      internal::FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetJavascriptDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadJavascript(UserType* output) {
    auto* pointer = data_->javascript.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  bool wants_result() const {
    return data_->wants_result;
  }
  bool has_user_gesture() const {
    return data_->has_user_gesture;
  }
  int32_t world_id() const {
    return data_->world_id;
  }
 private:
  internal::FrameNavigationControl_JavaScriptExecuteRequestForTests_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParamsDataView {
 public:
  FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParamsDataView() {}

  FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParamsDataView(
      internal::FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::mojo_base::mojom::ValueDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) {
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::ValueDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ParamsDataView {
 public:
  FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ParamsDataView() {}

  FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ParamsDataView(
      internal::FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetJavascriptDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadJavascript(UserType* output) {
    auto* pointer = data_->javascript.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  bool wants_result() const {
    return data_->wants_result;
  }
  int32_t world_id() const {
    return data_->world_id;
  }
 private:
  internal::FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParamsDataView {
 public:
  FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParamsDataView() {}

  FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParamsDataView(
      internal::FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::mojo_base::mojom::ValueDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) {
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::ValueDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_PostMessageEvent_ParamsDataView {
 public:
  FrameNavigationControl_PostMessageEvent_ParamsDataView() {}

  FrameNavigationControl_PostMessageEvent_ParamsDataView(
      internal::FrameNavigationControl_PostMessageEvent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t source_routing_id() const {
    return data_->source_routing_id;
  }
  inline void GetSourceOriginDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSourceOrigin(UserType* output) {
    auto* pointer = data_->source_origin.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetTargetOriginDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTargetOrigin(UserType* output) {
    auto* pointer = data_->target_origin.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_PostMessageEvent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_ForwardMessageFromHost_ParamsDataView {
 public:
  FrameNavigationControl_ForwardMessageFromHost_ParamsDataView() {}

  FrameNavigationControl_ForwardMessageFromHost_ParamsDataView(
      internal::FrameNavigationControl_ForwardMessageFromHost_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, context_);
  }
  inline void GetSourceOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSourceOrigin(UserType* output) {
    auto* pointer = data_->source_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, context_);
  }
  inline void GetTargetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTargetOrigin(UserType* output) {
    auto* pointer = data_->target_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_ForwardMessageFromHost_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_OnPortalActivated_ParamsDataView {
 public:
  FrameNavigationControl_OnPortalActivated_ParamsDataView() {}

  FrameNavigationControl_OnPortalActivated_ParamsDataView(
      internal::FrameNavigationControl_OnPortalActivated_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPortalTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPortalToken(UserType* output) {
    auto* pointer = data_->portal_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakePortal() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::PortalAssociatedPtrInfoDataView>(
            &data_->portal, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakePortalClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::PortalClientAssociatedRequestDataView>(
            &data_->portal_client, &result, context_);
    DCHECK(ret);
    return result;
  }
  inline void GetDataDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_OnPortalActivated_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameNavigationControl_OnPortalActivated_ResponseParamsDataView {
 public:
  FrameNavigationControl_OnPortalActivated_ResponseParamsDataView() {}

  FrameNavigationControl_OnPortalActivated_ResponseParamsDataView(
      internal::FrameNavigationControl_OnPortalActivated_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::blink::mojom::PortalActivateResult>(
        data_value, output);
  }

  ::blink::mojom::PortalActivateResult result() const {
    return static_cast<::blink::mojom::PortalActivateResult>(data_->result);
  }
 private:
  internal::FrameNavigationControl_OnPortalActivated_ResponseParams_Data* data_ = nullptr;
};

class FrameNavigationControl_ReportContentSecurityPolicyViolation_ParamsDataView {
 public:
  FrameNavigationControl_ReportContentSecurityPolicyViolation_ParamsDataView() {}

  FrameNavigationControl_ReportContentSecurityPolicyViolation_ParamsDataView(
      internal::FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetViolationParamsDataView(
      ::content::mojom::CSPViolationParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadViolationParams(UserType* output) {
    auto* pointer = data_->violation_params.Get();
    return mojo::internal::Deserialize<::content::mojom::CSPViolationParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameNavigationControl_ReportContentSecurityPolicyViolation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameBindingsControl_AllowBindings_ParamsDataView {
 public:
  FrameBindingsControl_AllowBindings_ParamsDataView() {}

  FrameBindingsControl_AllowBindings_ParamsDataView(
      internal::FrameBindingsControl_AllowBindings_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t enabled_bindings_flags() const {
    return data_->enabled_bindings_flags;
  }
 private:
  internal::FrameBindingsControl_AllowBindings_Params_Data* data_ = nullptr;
};

class FrameBindingsControl_EnableMojoJsBindings_ParamsDataView {
 public:
  FrameBindingsControl_EnableMojoJsBindings_ParamsDataView() {}

  FrameBindingsControl_EnableMojoJsBindings_ParamsDataView(
      internal::FrameBindingsControl_EnableMojoJsBindings_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameBindingsControl_EnableMojoJsBindings_Params_Data* data_ = nullptr;
};

class FrameFactory_CreateFrame_ParamsDataView {
 public:
  FrameFactory_CreateFrame_ParamsDataView() {}

  FrameFactory_CreateFrame_ParamsDataView(
      internal::FrameFactory_CreateFrame_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t frame_routing_id() const {
    return data_->frame_routing_id;
  }
  template <typename UserType>
  UserType TakeFrame() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::content::mojom::FrameInterfaceBase>>(
            &data_->frame, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameFactory_CreateFrame_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_CreateNewWindow_ParamsDataView {
 public:
  FrameHost_CreateNewWindow_ParamsDataView() {}

  FrameHost_CreateNewWindow_ParamsDataView(
      internal::FrameHost_CreateNewWindow_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      CreateNewWindowParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParams(UserType* output) {
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::content::mojom::CreateNewWindowParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_CreateNewWindow_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_CreateNewWindow_ResponseParamsDataView {
 public:
  FrameHost_CreateNewWindow_ResponseParamsDataView() {}

  FrameHost_CreateNewWindow_ResponseParamsDataView(
      internal::FrameHost_CreateNewWindow_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::content::mojom::CreateNewWindowStatus>(
        data_value, output);
  }

  CreateNewWindowStatus status() const {
    return static_cast<CreateNewWindowStatus>(data_->status);
  }
  inline void GetReplyDataView(
      CreateNewWindowReplyDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReply(UserType* output) {
    auto* pointer = data_->reply.Get();
    return mojo::internal::Deserialize<::content::mojom::CreateNewWindowReplyDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_CreateNewWindow_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_CreatePortal_ParamsDataView {
 public:
  FrameHost_CreatePortal_ParamsDataView() {}

  FrameHost_CreatePortal_ParamsDataView(
      internal::FrameHost_CreatePortal_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePortal() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::PortalAssociatedRequestDataView>(
            &data_->portal, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::PortalClientAssociatedPtrInfoDataView>(
            &data_->client, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameHost_CreatePortal_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_CreatePortal_ResponseParamsDataView {
 public:
  FrameHost_CreatePortal_ResponseParamsDataView() {}

  FrameHost_CreatePortal_ResponseParamsDataView(
      internal::FrameHost_CreatePortal_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t proxy_routing_id() const {
    return data_->proxy_routing_id;
  }
  inline void GetInitialReplicatedStateDataView(
      ::content::mojom::FrameReplicationStateDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInitialReplicatedState(UserType* output) {
    auto* pointer = data_->initial_replicated_state.Get();
    return mojo::internal::Deserialize<::content::mojom::FrameReplicationStateDataView>(
        pointer, output, context_);
  }
  inline void GetPortalTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPortalToken(UserType* output) {
    auto* pointer = data_->portal_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  inline void GetDevtoolsFrameTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevtoolsFrameToken(UserType* output) {
    auto* pointer = data_->devtools_frame_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_CreatePortal_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_AdoptPortal_ParamsDataView {
 public:
  FrameHost_AdoptPortal_ParamsDataView() {}

  FrameHost_AdoptPortal_ParamsDataView(
      internal::FrameHost_AdoptPortal_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPortalTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPortalToken(UserType* output) {
    auto* pointer = data_->portal_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_AdoptPortal_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_AdoptPortal_ResponseParamsDataView {
 public:
  FrameHost_AdoptPortal_ResponseParamsDataView() {}

  FrameHost_AdoptPortal_ResponseParamsDataView(
      internal::FrameHost_AdoptPortal_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t proxy_routing_id() const {
    return data_->proxy_routing_id;
  }
  inline void GetFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrameSinkId(UserType* output) {
    auto* pointer = data_->frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, context_);
  }
  inline void GetReplicatedStateDataView(
      ::content::mojom::FrameReplicationStateDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReplicatedState(UserType* output) {
    auto* pointer = data_->replicated_state.Get();
    return mojo::internal::Deserialize<::content::mojom::FrameReplicationStateDataView>(
        pointer, output, context_);
  }
  inline void GetDevtoolsFrameTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevtoolsFrameToken(UserType* output) {
    auto* pointer = data_->devtools_frame_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_AdoptPortal_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_IssueKeepAliveHandle_ParamsDataView {
 public:
  FrameHost_IssueKeepAliveHandle_ParamsDataView() {}

  FrameHost_IssueKeepAliveHandle_ParamsDataView(
      internal::FrameHost_IssueKeepAliveHandle_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeKeepAliveHandle() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::content::mojom::KeepAliveHandleInterfaceBase>>(
            &data_->keep_alive_handle, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameHost_IssueKeepAliveHandle_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_DidCommitProvisionalLoad_ParamsDataView {
 public:
  FrameHost_DidCommitProvisionalLoad_ParamsDataView() {}

  FrameHost_DidCommitProvisionalLoad_ParamsDataView(
      internal::FrameHost_DidCommitProvisionalLoad_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      ::content::mojom::DidCommitProvisionalLoadParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParams(UserType* output) {
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::content::mojom::DidCommitProvisionalLoadParamsDataView>(
        pointer, output, context_);
  }
  inline void GetInterfaceParamsDataView(
      ::content::mojom::DidCommitProvisionalLoadInterfaceParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInterfaceParams(UserType* output) {
    auto* pointer = data_->interface_params.Get();
    return mojo::internal::Deserialize<::content::mojom::DidCommitProvisionalLoadInterfaceParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_DidCommitProvisionalLoad_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_DidCommitSameDocumentNavigation_ParamsDataView {
 public:
  FrameHost_DidCommitSameDocumentNavigation_ParamsDataView() {}

  FrameHost_DidCommitSameDocumentNavigation_ParamsDataView(
      internal::FrameHost_DidCommitSameDocumentNavigation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      ::content::mojom::DidCommitProvisionalLoadParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParams(UserType* output) {
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::content::mojom::DidCommitProvisionalLoadParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_DidCommitSameDocumentNavigation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_BeginNavigation_ParamsDataView {
 public:
  FrameHost_BeginNavigation_ParamsDataView() {}

  FrameHost_BeginNavigation_ParamsDataView(
      internal::FrameHost_BeginNavigation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCommonParamsDataView(
      ::content::mojom::CommonNavigationParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCommonParams(UserType* output) {
    auto* pointer = data_->common_params.Get();
    return mojo::internal::Deserialize<::content::mojom::CommonNavigationParamsDataView>(
        pointer, output, context_);
  }
  inline void GetBeginParamsDataView(
      ::content::mojom::BeginNavigationParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBeginParams(UserType* output) {
    auto* pointer = data_->begin_params.Get();
    return mojo::internal::Deserialize<::content::mojom::BeginNavigationParamsDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeBlobUrlToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BlobURLTokenInterfaceBase>>(
            &data_->blob_url_token, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeNavigationClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::content::mojom::NavigationClientAssociatedPtrInfoDataView>(
            &data_->navigation_client, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeNavigationInitiator() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::NavigationInitiatorInterfaceBase>>(
            &data_->navigation_initiator, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameHost_BeginNavigation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_SubresourceResponseStarted_ParamsDataView {
 public:
  FrameHost_SubresourceResponseStarted_ParamsDataView() {}

  FrameHost_SubresourceResponseStarted_ParamsDataView(
      internal::FrameHost_SubresourceResponseStarted_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  uint32_t cert_status() const {
    return data_->cert_status;
  }
 private:
  internal::FrameHost_SubresourceResponseStarted_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_ResourceLoadComplete_ParamsDataView {
 public:
  FrameHost_ResourceLoadComplete_ParamsDataView() {}

  FrameHost_ResourceLoadComplete_ParamsDataView(
      internal::FrameHost_ResourceLoadComplete_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlLoadInfoDataView(
      ::content::mojom::ResourceLoadInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrlLoadInfo(UserType* output) {
    auto* pointer = data_->url_load_info.Get();
    return mojo::internal::Deserialize<::content::mojom::ResourceLoadInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_ResourceLoadComplete_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_DidChangeName_ParamsDataView {
 public:
  FrameHost_DidChangeName_ParamsDataView() {}

  FrameHost_DidChangeName_ParamsDataView(
      internal::FrameHost_DidChangeName_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) {
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetUniqueNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUniqueName(UserType* output) {
    auto* pointer = data_->unique_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_DidChangeName_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_DidSetFramePolicyHeaders_ParamsDataView {
 public:
  FrameHost_DidSetFramePolicyHeaders_ParamsDataView() {}

  FrameHost_DidSetFramePolicyHeaders_ParamsDataView(
      internal::FrameHost_DidSetFramePolicyHeaders_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSandboxFlags(UserType* output) const {
    auto data_value = data_->sandbox_flags;
    return mojo::internal::Deserialize<::blink::mojom::WebSandboxFlags>(
        data_value, output);
  }

  ::blink::mojom::WebSandboxFlags sandbox_flags() const {
    return static_cast<::blink::mojom::WebSandboxFlags>(data_->sandbox_flags);
  }
  inline void GetFeaturePolicyHeaderDataView(
      mojo::ArrayDataView<::blink::mojom::ParsedFeaturePolicyDeclarationDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFeaturePolicyHeader(UserType* output) {
    auto* pointer = data_->feature_policy_header.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::ParsedFeaturePolicyDeclarationDataView>>(
        pointer, output, context_);
  }
  inline void GetDocumentPolicyHeaderDataView(
      mojo::MapDataView<::blink::mojom::FeaturePolicyFeature, ::blink::mojom::PolicyValueDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDocumentPolicyHeader(UserType* output) {
    auto* pointer = data_->document_policy_header.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::blink::mojom::FeaturePolicyFeature, ::blink::mojom::PolicyValueDataView>>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_DidSetFramePolicyHeaders_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_CancelInitialHistoryLoad_ParamsDataView {
 public:
  FrameHost_CancelInitialHistoryLoad_ParamsDataView() {}

  FrameHost_CancelInitialHistoryLoad_ParamsDataView(
      internal::FrameHost_CancelInitialHistoryLoad_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameHost_CancelInitialHistoryLoad_Params_Data* data_ = nullptr;
};

class FrameHost_UpdateEncoding_ParamsDataView {
 public:
  FrameHost_UpdateEncoding_ParamsDataView() {}

  FrameHost_UpdateEncoding_ParamsDataView(
      internal::FrameHost_UpdateEncoding_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetEncodingNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEncodingName(UserType* output) {
    auto* pointer = data_->encoding_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_UpdateEncoding_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_FrameSizeChanged_ParamsDataView {
 public:
  FrameHost_FrameSizeChanged_ParamsDataView() {}

  FrameHost_FrameSizeChanged_ParamsDataView(
      internal::FrameHost_FrameSizeChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSize(UserType* output) {
    auto* pointer = data_->size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_FrameSizeChanged_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_UpdateUserGestureCarryoverInfo_ParamsDataView {
 public:
  FrameHost_UpdateUserGestureCarryoverInfo_ParamsDataView() {}

  FrameHost_UpdateUserGestureCarryoverInfo_ParamsDataView(
      internal::FrameHost_UpdateUserGestureCarryoverInfo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameHost_UpdateUserGestureCarryoverInfo_Params_Data* data_ = nullptr;
};

class FrameHost_DidAddMessageToConsole_ParamsDataView {
 public:
  FrameHost_DidAddMessageToConsole_ParamsDataView() {}

  FrameHost_DidAddMessageToConsole_ParamsDataView(
      internal::FrameHost_DidAddMessageToConsole_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLogLevel(UserType* output) const {
    auto data_value = data_->log_level;
    return mojo::internal::Deserialize<::blink::mojom::ConsoleMessageLevel>(
        data_value, output);
  }

  ::blink::mojom::ConsoleMessageLevel log_level() const {
    return static_cast<::blink::mojom::ConsoleMessageLevel>(data_->log_level);
  }
  inline void GetMsgDataView(
      ::mojo_base::mojom::BigString16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMsg(UserType* output) {
    auto* pointer = data_->msg.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::BigString16DataView>(
        pointer, output, context_);
  }
  int32_t line_number() const {
    return data_->line_number;
  }
  inline void GetSourceIdDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSourceId(UserType* output) {
    auto* pointer = data_->source_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_DidAddMessageToConsole_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_DidFailLoadWithError_ParamsDataView {
 public:
  FrameHost_DidFailLoadWithError_ParamsDataView() {}

  FrameHost_DidFailLoadWithError_ParamsDataView(
      internal::FrameHost_DidFailLoadWithError_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  int32_t error_code() const {
    return data_->error_code;
  }
 private:
  internal::FrameHost_DidFailLoadWithError_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_TransferUserActivationFrom_ParamsDataView {
 public:
  FrameHost_TransferUserActivationFrom_ParamsDataView() {}

  FrameHost_TransferUserActivationFrom_ParamsDataView(
      internal::FrameHost_TransferUserActivationFrom_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t source_routing_id() const {
    return data_->source_routing_id;
  }
 private:
  internal::FrameHost_TransferUserActivationFrom_Params_Data* data_ = nullptr;
};

class FrameHost_ShowCreatedWindow_ParamsDataView {
 public:
  FrameHost_ShowCreatedWindow_ParamsDataView() {}

  FrameHost_ShowCreatedWindow_ParamsDataView(
      internal::FrameHost_ShowCreatedWindow_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t pending_widget_routing_id() const {
    return data_->pending_widget_routing_id;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDisposition(UserType* output) const {
    auto data_value = data_->disposition;
    return mojo::internal::Deserialize<::ui::mojom::WindowOpenDisposition>(
        data_value, output);
  }

  ::ui::mojom::WindowOpenDisposition disposition() const {
    return static_cast<::ui::mojom::WindowOpenDisposition>(data_->disposition);
  }
  inline void GetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRect(UserType* output) {
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, context_);
  }
  bool opened_by_user_gesture() const {
    return data_->opened_by_user_gesture;
  }
 private:
  internal::FrameHost_ShowCreatedWindow_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameHost_DidAddContentSecurityPolicies_ParamsDataView {
 public:
  FrameHost_DidAddContentSecurityPolicies_ParamsDataView() {}

  FrameHost_DidAddContentSecurityPolicies_ParamsDataView(
      internal::FrameHost_DidAddContentSecurityPolicies_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPoliciesDataView(
      mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPolicies(UserType* output) {
    auto* pointer = data_->policies.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>>(
        pointer, output, context_);
  }
 private:
  internal::FrameHost_DidAddContentSecurityPolicies_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};






inline void Frame_GetCanonicalUrlForSharing_ResponseParamsDataView::GetCanonicalUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->canonical_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}










inline void Frame_ExtractSmartClipData_ParamsDataView::GetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, context_);
}


inline void Frame_ExtractSmartClipData_ResponseParamsDataView::GetTextDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->text.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void Frame_ExtractSmartClipData_ResponseParamsDataView::GetHtmlDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->html.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void Frame_ExtractSmartClipData_ResponseParamsDataView::GetClipRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->clip_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, context_);
}




inline void FrameNavigationControl_CommitNavigation_ParamsDataView::GetCommonParamsDataView(
    ::content::mojom::CommonNavigationParamsDataView* output) {
  auto pointer = data_->common_params.Get();
  *output = ::content::mojom::CommonNavigationParamsDataView(pointer, context_);
}
inline void FrameNavigationControl_CommitNavigation_ParamsDataView::GetRequestParamsDataView(
    ::content::mojom::CommitNavigationParamsDataView* output) {
  auto pointer = data_->request_params.Get();
  *output = ::content::mojom::CommitNavigationParamsDataView(pointer, context_);
}
inline void FrameNavigationControl_CommitNavigation_ParamsDataView::GetResponseHeadDataView(
    ::network::mojom::URLResponseHeadDataView* output) {
  auto pointer = data_->response_head.Get();
  *output = ::network::mojom::URLResponseHeadDataView(pointer, context_);
}
inline void FrameNavigationControl_CommitNavigation_ParamsDataView::GetUrlLoaderClientEndpointsDataView(
    ::network::mojom::URLLoaderClientEndpointsDataView* output) {
  auto pointer = data_->url_loader_client_endpoints.Get();
  *output = ::network::mojom::URLLoaderClientEndpointsDataView(pointer, context_);
}
inline void FrameNavigationControl_CommitNavigation_ParamsDataView::GetSubresourceLoaderFactoriesDataView(
    ::blink::mojom::URLLoaderFactoryBundleDataView* output) {
  auto pointer = data_->subresource_loader_factories.Get();
  *output = ::blink::mojom::URLLoaderFactoryBundleDataView(pointer, context_);
}
inline void FrameNavigationControl_CommitNavigation_ParamsDataView::GetSubresourceOverridesDataView(
    mojo::ArrayDataView<::content::mojom::TransferrableURLLoaderDataView>* output) {
  auto pointer = data_->subresource_overrides.Get();
  *output = mojo::ArrayDataView<::content::mojom::TransferrableURLLoaderDataView>(pointer, context_);
}
inline void FrameNavigationControl_CommitNavigation_ParamsDataView::GetControllerServiceWorkerInfoDataView(
    ::blink::mojom::ControllerServiceWorkerInfoDataView* output) {
  auto pointer = data_->controller_service_worker_info.Get();
  *output = ::blink::mojom::ControllerServiceWorkerInfoDataView(pointer, context_);
}
inline void FrameNavigationControl_CommitNavigation_ParamsDataView::GetProviderInfoDataView(
    ::blink::mojom::ServiceWorkerProviderInfoForClientDataView* output) {
  auto pointer = data_->provider_info.Get();
  *output = ::blink::mojom::ServiceWorkerProviderInfoForClientDataView(pointer, context_);
}
inline void FrameNavigationControl_CommitNavigation_ParamsDataView::GetDevtoolsNavigationTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_navigation_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}




inline void FrameNavigationControl_CommitSameDocumentNavigation_ParamsDataView::GetCommonParamsDataView(
    ::content::mojom::CommonNavigationParamsDataView* output) {
  auto pointer = data_->common_params.Get();
  *output = ::content::mojom::CommonNavigationParamsDataView(pointer, context_);
}
inline void FrameNavigationControl_CommitSameDocumentNavigation_ParamsDataView::GetRequestParamsDataView(
    ::content::mojom::CommitNavigationParamsDataView* output) {
  auto pointer = data_->request_params.Get();
  *output = ::content::mojom::CommitNavigationParamsDataView(pointer, context_);
}




inline void FrameNavigationControl_HandleRendererDebugURL_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void FrameNavigationControl_UpdateSubresourceLoaderFactories_ParamsDataView::GetSubresourceLoaderFactoriesDataView(
    ::blink::mojom::URLLoaderFactoryBundleDataView* output) {
  auto pointer = data_->subresource_loader_factories.Get();
  *output = ::blink::mojom::URLLoaderFactoryBundleDataView(pointer, context_);
}




inline void FrameNavigationControl_JavaScriptExecuteRequest_ParamsDataView::GetJavascriptDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->javascript.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void FrameNavigationControl_JavaScriptExecuteRequest_ResponseParamsDataView::GetResultDataView(
    ::mojo_base::mojom::ValueDataView* output) {
  auto pointer = &data_->result;
  *output = ::mojo_base::mojom::ValueDataView(pointer, context_);
}


inline void FrameNavigationControl_JavaScriptExecuteRequestForTests_ParamsDataView::GetJavascriptDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->javascript.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void FrameNavigationControl_JavaScriptExecuteRequestForTests_ResponseParamsDataView::GetResultDataView(
    ::mojo_base::mojom::ValueDataView* output) {
  auto pointer = &data_->result;
  *output = ::mojo_base::mojom::ValueDataView(pointer, context_);
}


inline void FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ParamsDataView::GetJavascriptDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->javascript.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void FrameNavigationControl_JavaScriptExecuteRequestInIsolatedWorld_ResponseParamsDataView::GetResultDataView(
    ::mojo_base::mojom::ValueDataView* output) {
  auto pointer = &data_->result;
  *output = ::mojo_base::mojom::ValueDataView(pointer, context_);
}


inline void FrameNavigationControl_PostMessageEvent_ParamsDataView::GetSourceOriginDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->source_origin.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void FrameNavigationControl_PostMessageEvent_ParamsDataView::GetTargetOriginDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->target_origin.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void FrameNavigationControl_PostMessageEvent_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, context_);
}


inline void FrameNavigationControl_ForwardMessageFromHost_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, context_);
}
inline void FrameNavigationControl_ForwardMessageFromHost_ParamsDataView::GetSourceOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->source_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, context_);
}
inline void FrameNavigationControl_ForwardMessageFromHost_ParamsDataView::GetTargetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->target_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, context_);
}


inline void FrameNavigationControl_OnPortalActivated_ParamsDataView::GetPortalTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->portal_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void FrameNavigationControl_OnPortalActivated_ParamsDataView::GetDataDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->data.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, context_);
}




inline void FrameNavigationControl_ReportContentSecurityPolicyViolation_ParamsDataView::GetViolationParamsDataView(
    ::content::mojom::CSPViolationParamsDataView* output) {
  auto pointer = data_->violation_params.Get();
  *output = ::content::mojom::CSPViolationParamsDataView(pointer, context_);
}








inline void FrameHost_CreateNewWindow_ParamsDataView::GetParamsDataView(
    CreateNewWindowParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = CreateNewWindowParamsDataView(pointer, context_);
}


inline void FrameHost_CreateNewWindow_ResponseParamsDataView::GetReplyDataView(
    CreateNewWindowReplyDataView* output) {
  auto pointer = data_->reply.Get();
  *output = CreateNewWindowReplyDataView(pointer, context_);
}




inline void FrameHost_CreatePortal_ResponseParamsDataView::GetInitialReplicatedStateDataView(
    ::content::mojom::FrameReplicationStateDataView* output) {
  auto pointer = data_->initial_replicated_state.Get();
  *output = ::content::mojom::FrameReplicationStateDataView(pointer, context_);
}
inline void FrameHost_CreatePortal_ResponseParamsDataView::GetPortalTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->portal_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void FrameHost_CreatePortal_ResponseParamsDataView::GetDevtoolsFrameTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_frame_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}


inline void FrameHost_AdoptPortal_ParamsDataView::GetPortalTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->portal_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}


inline void FrameHost_AdoptPortal_ResponseParamsDataView::GetFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, context_);
}
inline void FrameHost_AdoptPortal_ResponseParamsDataView::GetReplicatedStateDataView(
    ::content::mojom::FrameReplicationStateDataView* output) {
  auto pointer = data_->replicated_state.Get();
  *output = ::content::mojom::FrameReplicationStateDataView(pointer, context_);
}
inline void FrameHost_AdoptPortal_ResponseParamsDataView::GetDevtoolsFrameTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_frame_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}




inline void FrameHost_DidCommitProvisionalLoad_ParamsDataView::GetParamsDataView(
    ::content::mojom::DidCommitProvisionalLoadParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::content::mojom::DidCommitProvisionalLoadParamsDataView(pointer, context_);
}
inline void FrameHost_DidCommitProvisionalLoad_ParamsDataView::GetInterfaceParamsDataView(
    ::content::mojom::DidCommitProvisionalLoadInterfaceParamsDataView* output) {
  auto pointer = data_->interface_params.Get();
  *output = ::content::mojom::DidCommitProvisionalLoadInterfaceParamsDataView(pointer, context_);
}


inline void FrameHost_DidCommitSameDocumentNavigation_ParamsDataView::GetParamsDataView(
    ::content::mojom::DidCommitProvisionalLoadParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::content::mojom::DidCommitProvisionalLoadParamsDataView(pointer, context_);
}


inline void FrameHost_BeginNavigation_ParamsDataView::GetCommonParamsDataView(
    ::content::mojom::CommonNavigationParamsDataView* output) {
  auto pointer = data_->common_params.Get();
  *output = ::content::mojom::CommonNavigationParamsDataView(pointer, context_);
}
inline void FrameHost_BeginNavigation_ParamsDataView::GetBeginParamsDataView(
    ::content::mojom::BeginNavigationParamsDataView* output) {
  auto pointer = data_->begin_params.Get();
  *output = ::content::mojom::BeginNavigationParamsDataView(pointer, context_);
}


inline void FrameHost_SubresourceResponseStarted_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void FrameHost_ResourceLoadComplete_ParamsDataView::GetUrlLoadInfoDataView(
    ::content::mojom::ResourceLoadInfoDataView* output) {
  auto pointer = data_->url_load_info.Get();
  *output = ::content::mojom::ResourceLoadInfoDataView(pointer, context_);
}


inline void FrameHost_DidChangeName_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void FrameHost_DidChangeName_ParamsDataView::GetUniqueNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->unique_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void FrameHost_DidSetFramePolicyHeaders_ParamsDataView::GetFeaturePolicyHeaderDataView(
    mojo::ArrayDataView<::blink::mojom::ParsedFeaturePolicyDeclarationDataView>* output) {
  auto pointer = data_->feature_policy_header.Get();
  *output = mojo::ArrayDataView<::blink::mojom::ParsedFeaturePolicyDeclarationDataView>(pointer, context_);
}
inline void FrameHost_DidSetFramePolicyHeaders_ParamsDataView::GetDocumentPolicyHeaderDataView(
    mojo::MapDataView<::blink::mojom::FeaturePolicyFeature, ::blink::mojom::PolicyValueDataView>* output) {
  auto pointer = data_->document_policy_header.Get();
  *output = mojo::MapDataView<::blink::mojom::FeaturePolicyFeature, ::blink::mojom::PolicyValueDataView>(pointer, context_);
}




inline void FrameHost_UpdateEncoding_ParamsDataView::GetEncodingNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->encoding_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void FrameHost_FrameSizeChanged_ParamsDataView::GetSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, context_);
}




inline void FrameHost_DidAddMessageToConsole_ParamsDataView::GetMsgDataView(
    ::mojo_base::mojom::BigString16DataView* output) {
  auto pointer = data_->msg.Get();
  *output = ::mojo_base::mojom::BigString16DataView(pointer, context_);
}
inline void FrameHost_DidAddMessageToConsole_ParamsDataView::GetSourceIdDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->source_id.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void FrameHost_DidFailLoadWithError_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}




inline void FrameHost_ShowCreatedWindow_ParamsDataView::GetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, context_);
}


inline void FrameHost_DidAddContentSecurityPolicies_ParamsDataView::GetPoliciesDataView(
    mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>* output) {
  auto pointer = data_->policies.Get();
  *output = mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>(pointer, context_);
}

}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // CONTENT_COMMON_FRAME_MOJOM_PARAMS_DATA_H_