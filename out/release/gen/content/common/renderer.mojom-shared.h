// content/common/renderer.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_RENDERER_MOJOM_SHARED_H_
#define CONTENT_COMMON_RENDERER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "content/common/renderer.mojom-shared-internal.h"
#include "content/common/document_scoped_interface_bundle.mojom-shared.h"
#include "content/common/native_types.mojom-shared.h"
#include "content/public/common/web_preferences.mojom-shared.h"
#include "ipc/constants.mojom-shared.h"
#include "mojo/public/mojom/base/generic_pending_receiver.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "services/network/public/mojom/network_types.mojom-shared.h"
#include "third_party/blink/public/mojom/manifest/manifest.mojom-shared.h"
#include "third_party/blink/public/mojom/renderer_preferences.mojom-shared.h"
#include "third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "mojo/public/cpp/bindings/native_enum.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "base/component_export.h"




namespace content {
namespace mojom {
class CreateViewParamsDataView;

class CreateFrameWidgetParamsDataView;

class CreateFrameParamsDataView;

class UpdateScrollbarThemeParamsDataView;

class UpdateSystemColorInfoParamsDataView;



}  // namespace mojom
}  // namespace content

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::content::mojom::CreateViewParamsDataView> {
  using Data = ::content::mojom::internal::CreateViewParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::CreateFrameWidgetParamsDataView> {
  using Data = ::content::mojom::internal::CreateFrameWidgetParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::CreateFrameParamsDataView> {
  using Data = ::content::mojom::internal::CreateFrameParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::UpdateScrollbarThemeParamsDataView> {
  using Data = ::content::mojom::internal::UpdateScrollbarThemeParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::UpdateSystemColorInfoParamsDataView> {
  using Data = ::content::mojom::internal::UpdateSystemColorInfoParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace content {
namespace mojom {


enum class RenderProcessBackgroundState : int32_t {
  
  kForegrounded,
  
  kBackgrounded,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) std::ostream& operator<<(std::ostream& os, RenderProcessBackgroundState value);
inline bool IsKnownEnumValue(RenderProcessBackgroundState value) {
  return internal::RenderProcessBackgroundState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class RenderProcessVisibleState : int32_t {
  
  kVisible,
  
  kHidden,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) std::ostream& operator<<(std::ostream& os, RenderProcessVisibleState value);
inline bool IsKnownEnumValue(RenderProcessVisibleState value) {
  return internal::RenderProcessVisibleState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class RendererInterfaceBase {};

using RendererPtrDataView =
    mojo::InterfacePtrDataView<RendererInterfaceBase>;
using RendererRequestDataView =
    mojo::InterfaceRequestDataView<RendererInterfaceBase>;
using RendererAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<RendererInterfaceBase>;
using RendererAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<RendererInterfaceBase>;
class CreateViewParamsDataView {
 public:
  CreateViewParamsDataView() {}

  CreateViewParamsDataView(
      internal::CreateViewParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRendererPreferencesDataView(
      ::blink::mojom::RendererPreferencesDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRendererPreferences(UserType* output) {
    auto* pointer = data_->renderer_preferences.Get();
    return mojo::internal::Deserialize<::blink::mojom::RendererPreferencesDataView>(
        pointer, output, context_);
  }
  inline void GetWebPreferencesDataView(
      ::content::mojom::WebPreferencesDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWebPreferences(UserType* output) {
    auto* pointer = data_->web_preferences.Get();
    return mojo::internal::Deserialize<::content::mojom::WebPreferencesDataView>(
        pointer, output, context_);
  }
  int32_t view_id() const {
    return data_->view_id;
  }
  int32_t main_frame_routing_id() const {
    return data_->main_frame_routing_id;
  }
  int32_t main_frame_widget_routing_id() const {
    return data_->main_frame_widget_routing_id;
  }
  inline void GetMainFrameInterfaceBundleDataView(
      ::content::mojom::DocumentScopedInterfaceBundleDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMainFrameInterfaceBundle(UserType* output) {
    auto* pointer = data_->main_frame_interface_bundle.Get();
    return mojo::internal::Deserialize<::content::mojom::DocumentScopedInterfaceBundleDataView>(
        pointer, output, context_);
  }
  inline void GetSessionStorageNamespaceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionStorageNamespaceId(UserType* output) {
    auto* pointer = data_->session_storage_namespace_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  int32_t opener_frame_route_id() const {
    return data_->opener_frame_route_id;
  }
  inline void GetReplicatedFrameStateDataView(
      ::content::mojom::FrameReplicationStateDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReplicatedFrameState(UserType* output) {
    auto* pointer = data_->replicated_frame_state.Get();
    return mojo::internal::Deserialize<::content::mojom::FrameReplicationStateDataView>(
        pointer, output, context_);
  }
  inline void GetDevtoolsMainFrameTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevtoolsMainFrameToken(UserType* output) {
    auto* pointer = data_->devtools_main_frame_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  int32_t proxy_routing_id() const {
    return data_->proxy_routing_id;
  }
  bool hidden() const {
    return data_->hidden;
  }
  bool never_composited() const {
    return data_->never_composited;
  }
  bool window_was_created_with_opener() const {
    return data_->window_was_created_with_opener;
  }
  bool has_committed_real_load() const {
    return data_->has_committed_real_load;
  }
  inline void GetVisualPropertiesDataView(
      ::content::mojom::VisualPropertiesDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVisualProperties(UserType* output) {
    auto* pointer = data_->visual_properties.Get();
    return mojo::internal::Deserialize<::content::mojom::VisualPropertiesDataView>(
        pointer, output, context_);
  }
  bool renderer_wide_named_frame_lookup() const {
    return data_->renderer_wide_named_frame_lookup;
  }
  bool inside_portal() const {
    return data_->inside_portal;
  }
 private:
  internal::CreateViewParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class CreateFrameWidgetParamsDataView {
 public:
  CreateFrameWidgetParamsDataView() {}

  CreateFrameWidgetParamsDataView(
      internal::CreateFrameWidgetParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t routing_id() const {
    return data_->routing_id;
  }
  inline void GetVisualPropertiesDataView(
      ::content::mojom::VisualPropertiesDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVisualProperties(UserType* output) {
    auto* pointer = data_->visual_properties.Get();
    return mojo::internal::Deserialize<::content::mojom::VisualPropertiesDataView>(
        pointer, output, context_);
  }
 private:
  internal::CreateFrameWidgetParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class CreateFrameParamsDataView {
 public:
  CreateFrameParamsDataView() {}

  CreateFrameParamsDataView(
      internal::CreateFrameParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t routing_id() const {
    return data_->routing_id;
  }
  int32_t previous_routing_id() const {
    return data_->previous_routing_id;
  }
  int32_t opener_routing_id() const {
    return data_->opener_routing_id;
  }
  int32_t parent_routing_id() const {
    return data_->parent_routing_id;
  }
  int32_t previous_sibling_routing_id() const {
    return data_->previous_sibling_routing_id;
  }
  inline void GetInterfaceBundleDataView(
      ::content::mojom::DocumentScopedInterfaceBundleDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInterfaceBundle(UserType* output) {
    auto* pointer = data_->interface_bundle.Get();
    return mojo::internal::Deserialize<::content::mojom::DocumentScopedInterfaceBundleDataView>(
        pointer, output, context_);
  }
  inline void GetReplicationStateDataView(
      ::content::mojom::FrameReplicationStateDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReplicationState(UserType* output) {
    auto* pointer = data_->replication_state.Get();
    return mojo::internal::Deserialize<::content::mojom::FrameReplicationStateDataView>(
        pointer, output, context_);
  }
  inline void GetDevtoolsFrameTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevtoolsFrameToken(UserType* output) {
    auto* pointer = data_->devtools_frame_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  inline void GetFrameOwnerPropertiesDataView(
      ::content::mojom::FrameOwnerPropertiesDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrameOwnerProperties(UserType* output) {
    auto* pointer = data_->frame_owner_properties.Get();
    return mojo::internal::Deserialize<::content::mojom::FrameOwnerPropertiesDataView>(
        pointer, output, context_);
  }
  inline void GetWidgetParamsDataView(
      CreateFrameWidgetParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWidgetParams(UserType* output) {
    auto* pointer = data_->widget_params.Get();
    return mojo::internal::Deserialize<::content::mojom::CreateFrameWidgetParamsDataView>(
        pointer, output, context_);
  }
  bool has_committed_real_load() const {
    return data_->has_committed_real_load;
  }
 private:
  internal::CreateFrameParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class UpdateScrollbarThemeParamsDataView {
 public:
  UpdateScrollbarThemeParamsDataView() {}

  UpdateScrollbarThemeParamsDataView(
      internal::UpdateScrollbarThemeParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool has_initial_button_delay() const {
    return data_->has_initial_button_delay;
  }
  float initial_button_delay() const {
    return data_->initial_button_delay;
  }
  bool has_autoscroll_button_delay() const {
    return data_->has_autoscroll_button_delay;
  }
  float autoscroll_button_delay() const {
    return data_->autoscroll_button_delay;
  }
  bool jump_on_track_click() const {
    return data_->jump_on_track_click;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPreferredScrollerStyle(UserType* output) const {
    auto data_value = data_->preferred_scroller_style;
    return mojo::internal::Deserialize<::content::mojom::ScrollerStyle>(
        data_value, output);
  }

  ::content::mojom::ScrollerStyle preferred_scroller_style() const {
    return static_cast<::content::mojom::ScrollerStyle>(data_->preferred_scroller_style);
  }
  bool redraw() const {
    return data_->redraw;
  }
  bool scroll_view_rubber_banding() const {
    return data_->scroll_view_rubber_banding;
  }
 private:
  internal::UpdateScrollbarThemeParams_Data* data_ = nullptr;
};

class UpdateSystemColorInfoParamsDataView {
 public:
  UpdateSystemColorInfoParamsDataView() {}

  UpdateSystemColorInfoParamsDataView(
      internal::UpdateSystemColorInfoParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool is_dark_mode() const {
    return data_->is_dark_mode;
  }
  bool is_high_contrast() const {
    return data_->is_high_contrast;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPreferredColorScheme(UserType* output) const {
    auto data_value = data_->preferred_color_scheme;
    return mojo::internal::Deserialize<::content::mojom::PreferredColorScheme>(
        data_value, output);
  }

  ::content::mojom::PreferredColorScheme preferred_color_scheme() const {
    return static_cast<::content::mojom::PreferredColorScheme>(data_->preferred_color_scheme);
  }
  inline void GetColorsDataView(
      mojo::MapDataView<::content::mojom::SystemThemeColor, uint32_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadColors(UserType* output) {
    auto* pointer = data_->colors.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::content::mojom::SystemThemeColor, uint32_t>>(
        pointer, output, context_);
  }
 private:
  internal::UpdateSystemColorInfoParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace content

namespace std {

template <>
struct hash<::content::mojom::RenderProcessBackgroundState>
    : public mojo::internal::EnumHashImpl<::content::mojom::RenderProcessBackgroundState> {};

template <>
struct hash<::content::mojom::RenderProcessVisibleState>
    : public mojo::internal::EnumHashImpl<::content::mojom::RenderProcessVisibleState> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::content::mojom::RenderProcessBackgroundState, ::content::mojom::RenderProcessBackgroundState> {
  static ::content::mojom::RenderProcessBackgroundState ToMojom(::content::mojom::RenderProcessBackgroundState input) { return input; }
  static bool FromMojom(::content::mojom::RenderProcessBackgroundState input, ::content::mojom::RenderProcessBackgroundState* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::RenderProcessBackgroundState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::content::mojom::RenderProcessBackgroundState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::content::mojom::RenderProcessBackgroundState>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::content::mojom::RenderProcessVisibleState, ::content::mojom::RenderProcessVisibleState> {
  static ::content::mojom::RenderProcessVisibleState ToMojom(::content::mojom::RenderProcessVisibleState input) { return input; }
  static bool FromMojom(::content::mojom::RenderProcessVisibleState input, ::content::mojom::RenderProcessVisibleState* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::RenderProcessVisibleState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::content::mojom::RenderProcessVisibleState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::content::mojom::RenderProcessVisibleState>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::CreateViewParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::CreateViewParamsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::content::mojom::internal::CreateViewParams_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::renderer_preferences(input)) in_renderer_preferences = Traits::renderer_preferences(input);
    typename decltype((*output)->renderer_preferences)::BaseType::BufferWriter
        renderer_preferences_writer;
    mojo::internal::Serialize<::blink::mojom::RendererPreferencesDataView>(
        in_renderer_preferences, buffer, &renderer_preferences_writer, context);
    (*output)->renderer_preferences.Set(
        renderer_preferences_writer.is_null() ? nullptr : renderer_preferences_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->renderer_preferences.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null renderer_preferences in CreateViewParams struct");
    decltype(Traits::web_preferences(input)) in_web_preferences = Traits::web_preferences(input);
    typename decltype((*output)->web_preferences)::BaseType::BufferWriter
        web_preferences_writer;
    mojo::internal::Serialize<::content::mojom::WebPreferencesDataView>(
        in_web_preferences, buffer, &web_preferences_writer, context);
    (*output)->web_preferences.Set(
        web_preferences_writer.is_null() ? nullptr : web_preferences_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->web_preferences.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null web_preferences in CreateViewParams struct");
    (*output)->view_id = Traits::view_id(input);
    (*output)->main_frame_routing_id = Traits::main_frame_routing_id(input);
    (*output)->main_frame_widget_routing_id = Traits::main_frame_widget_routing_id(input);
    decltype(Traits::main_frame_interface_bundle(input)) in_main_frame_interface_bundle = Traits::main_frame_interface_bundle(input);
    typename decltype((*output)->main_frame_interface_bundle)::BaseType::BufferWriter
        main_frame_interface_bundle_writer;
    mojo::internal::Serialize<::content::mojom::DocumentScopedInterfaceBundleDataView>(
        in_main_frame_interface_bundle, buffer, &main_frame_interface_bundle_writer, context);
    (*output)->main_frame_interface_bundle.Set(
        main_frame_interface_bundle_writer.is_null() ? nullptr : main_frame_interface_bundle_writer.data());
    decltype(Traits::session_storage_namespace_id(input)) in_session_storage_namespace_id = Traits::session_storage_namespace_id(input);
    typename decltype((*output)->session_storage_namespace_id)::BaseType::BufferWriter
        session_storage_namespace_id_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_session_storage_namespace_id, buffer, &session_storage_namespace_id_writer, context);
    (*output)->session_storage_namespace_id.Set(
        session_storage_namespace_id_writer.is_null() ? nullptr : session_storage_namespace_id_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->session_storage_namespace_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null session_storage_namespace_id in CreateViewParams struct");
    (*output)->opener_frame_route_id = Traits::opener_frame_route_id(input);
    decltype(Traits::replicated_frame_state(input)) in_replicated_frame_state = Traits::replicated_frame_state(input);
    typename decltype((*output)->replicated_frame_state)::BaseType::BufferWriter
        replicated_frame_state_writer;
    mojo::internal::Serialize<::content::mojom::FrameReplicationStateDataView>(
        in_replicated_frame_state, buffer, &replicated_frame_state_writer, context);
    (*output)->replicated_frame_state.Set(
        replicated_frame_state_writer.is_null() ? nullptr : replicated_frame_state_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->replicated_frame_state.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null replicated_frame_state in CreateViewParams struct");
    decltype(Traits::devtools_main_frame_token(input)) in_devtools_main_frame_token = Traits::devtools_main_frame_token(input);
    typename decltype((*output)->devtools_main_frame_token)::BaseType::BufferWriter
        devtools_main_frame_token_writer;
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_devtools_main_frame_token, buffer, &devtools_main_frame_token_writer, context);
    (*output)->devtools_main_frame_token.Set(
        devtools_main_frame_token_writer.is_null() ? nullptr : devtools_main_frame_token_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->devtools_main_frame_token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null devtools_main_frame_token in CreateViewParams struct");
    (*output)->proxy_routing_id = Traits::proxy_routing_id(input);
    (*output)->hidden = Traits::hidden(input);
    (*output)->never_composited = Traits::never_composited(input);
    (*output)->window_was_created_with_opener = Traits::window_was_created_with_opener(input);
    (*output)->has_committed_real_load = Traits::has_committed_real_load(input);
    decltype(Traits::visual_properties(input)) in_visual_properties = Traits::visual_properties(input);
    typename decltype((*output)->visual_properties)::BaseType::BufferWriter
        visual_properties_writer;
    mojo::internal::Serialize<::content::mojom::VisualPropertiesDataView>(
        in_visual_properties, buffer, &visual_properties_writer, context);
    (*output)->visual_properties.Set(
        visual_properties_writer.is_null() ? nullptr : visual_properties_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->visual_properties.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null visual_properties in CreateViewParams struct");
    (*output)->renderer_wide_named_frame_lookup = Traits::renderer_wide_named_frame_lookup(input);
    (*output)->inside_portal = Traits::inside_portal(input);
  }

  static bool Deserialize(::content::mojom::internal::CreateViewParams_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::CreateViewParamsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::CreateFrameWidgetParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::CreateFrameWidgetParamsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::content::mojom::internal::CreateFrameWidgetParams_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->routing_id = Traits::routing_id(input);
    decltype(Traits::visual_properties(input)) in_visual_properties = Traits::visual_properties(input);
    typename decltype((*output)->visual_properties)::BaseType::BufferWriter
        visual_properties_writer;
    mojo::internal::Serialize<::content::mojom::VisualPropertiesDataView>(
        in_visual_properties, buffer, &visual_properties_writer, context);
    (*output)->visual_properties.Set(
        visual_properties_writer.is_null() ? nullptr : visual_properties_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->visual_properties.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null visual_properties in CreateFrameWidgetParams struct");
  }

  static bool Deserialize(::content::mojom::internal::CreateFrameWidgetParams_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::CreateFrameWidgetParamsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::CreateFrameParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::CreateFrameParamsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::content::mojom::internal::CreateFrameParams_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->routing_id = Traits::routing_id(input);
    (*output)->previous_routing_id = Traits::previous_routing_id(input);
    (*output)->opener_routing_id = Traits::opener_routing_id(input);
    (*output)->parent_routing_id = Traits::parent_routing_id(input);
    (*output)->previous_sibling_routing_id = Traits::previous_sibling_routing_id(input);
    decltype(Traits::interface_bundle(input)) in_interface_bundle = Traits::interface_bundle(input);
    typename decltype((*output)->interface_bundle)::BaseType::BufferWriter
        interface_bundle_writer;
    mojo::internal::Serialize<::content::mojom::DocumentScopedInterfaceBundleDataView>(
        in_interface_bundle, buffer, &interface_bundle_writer, context);
    (*output)->interface_bundle.Set(
        interface_bundle_writer.is_null() ? nullptr : interface_bundle_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->interface_bundle.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null interface_bundle in CreateFrameParams struct");
    decltype(Traits::replication_state(input)) in_replication_state = Traits::replication_state(input);
    typename decltype((*output)->replication_state)::BaseType::BufferWriter
        replication_state_writer;
    mojo::internal::Serialize<::content::mojom::FrameReplicationStateDataView>(
        in_replication_state, buffer, &replication_state_writer, context);
    (*output)->replication_state.Set(
        replication_state_writer.is_null() ? nullptr : replication_state_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->replication_state.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null replication_state in CreateFrameParams struct");
    decltype(Traits::devtools_frame_token(input)) in_devtools_frame_token = Traits::devtools_frame_token(input);
    typename decltype((*output)->devtools_frame_token)::BaseType::BufferWriter
        devtools_frame_token_writer;
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_devtools_frame_token, buffer, &devtools_frame_token_writer, context);
    (*output)->devtools_frame_token.Set(
        devtools_frame_token_writer.is_null() ? nullptr : devtools_frame_token_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->devtools_frame_token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null devtools_frame_token in CreateFrameParams struct");
    decltype(Traits::frame_owner_properties(input)) in_frame_owner_properties = Traits::frame_owner_properties(input);
    typename decltype((*output)->frame_owner_properties)::BaseType::BufferWriter
        frame_owner_properties_writer;
    mojo::internal::Serialize<::content::mojom::FrameOwnerPropertiesDataView>(
        in_frame_owner_properties, buffer, &frame_owner_properties_writer, context);
    (*output)->frame_owner_properties.Set(
        frame_owner_properties_writer.is_null() ? nullptr : frame_owner_properties_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->frame_owner_properties.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null frame_owner_properties in CreateFrameParams struct");
    decltype(Traits::widget_params(input)) in_widget_params = Traits::widget_params(input);
    typename decltype((*output)->widget_params)::BaseType::BufferWriter
        widget_params_writer;
    mojo::internal::Serialize<::content::mojom::CreateFrameWidgetParamsDataView>(
        in_widget_params, buffer, &widget_params_writer, context);
    (*output)->widget_params.Set(
        widget_params_writer.is_null() ? nullptr : widget_params_writer.data());
    (*output)->has_committed_real_load = Traits::has_committed_real_load(input);
  }

  static bool Deserialize(::content::mojom::internal::CreateFrameParams_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::CreateFrameParamsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::UpdateScrollbarThemeParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::UpdateScrollbarThemeParamsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::content::mojom::internal::UpdateScrollbarThemeParams_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->has_initial_button_delay = Traits::has_initial_button_delay(input);
    (*output)->initial_button_delay = Traits::initial_button_delay(input);
    (*output)->has_autoscroll_button_delay = Traits::has_autoscroll_button_delay(input);
    (*output)->autoscroll_button_delay = Traits::autoscroll_button_delay(input);
    (*output)->jump_on_track_click = Traits::jump_on_track_click(input);
    mojo::internal::Serialize<::content::mojom::ScrollerStyle>(
        Traits::preferred_scroller_style(input), &(*output)->preferred_scroller_style);
    (*output)->redraw = Traits::redraw(input);
    (*output)->scroll_view_rubber_banding = Traits::scroll_view_rubber_banding(input);
  }

  static bool Deserialize(::content::mojom::internal::UpdateScrollbarThemeParams_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::UpdateScrollbarThemeParamsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::UpdateSystemColorInfoParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::UpdateSystemColorInfoParamsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::content::mojom::internal::UpdateSystemColorInfoParams_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->is_dark_mode = Traits::is_dark_mode(input);
    (*output)->is_high_contrast = Traits::is_high_contrast(input);
    mojo::internal::Serialize<::content::mojom::PreferredColorScheme>(
        Traits::preferred_color_scheme(input), &(*output)->preferred_color_scheme);
    decltype(Traits::colors(input)) in_colors = Traits::colors(input);
    typename decltype((*output)->colors)::BaseType::BufferWriter
        colors_writer;
    const mojo::internal::ContainerValidateParams colors_validate_params(
        new mojo::internal::ContainerValidateParams(0, ::content::mojom::internal::SystemThemeColor_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<::content::mojom::SystemThemeColor, uint32_t>>(
        in_colors, buffer, &colors_writer, &colors_validate_params,
        context);
    (*output)->colors.Set(
        colors_writer.is_null() ? nullptr : colors_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->colors.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null colors in UpdateSystemColorInfoParams struct");
  }

  static bool Deserialize(::content::mojom::internal::UpdateSystemColorInfoParams_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::UpdateSystemColorInfoParamsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace content {
namespace mojom {

inline void CreateViewParamsDataView::GetRendererPreferencesDataView(
    ::blink::mojom::RendererPreferencesDataView* output) {
  auto pointer = data_->renderer_preferences.Get();
  *output = ::blink::mojom::RendererPreferencesDataView(pointer, context_);
}
inline void CreateViewParamsDataView::GetWebPreferencesDataView(
    ::content::mojom::WebPreferencesDataView* output) {
  auto pointer = data_->web_preferences.Get();
  *output = ::content::mojom::WebPreferencesDataView(pointer, context_);
}
inline void CreateViewParamsDataView::GetMainFrameInterfaceBundleDataView(
    ::content::mojom::DocumentScopedInterfaceBundleDataView* output) {
  auto pointer = data_->main_frame_interface_bundle.Get();
  *output = ::content::mojom::DocumentScopedInterfaceBundleDataView(pointer, context_);
}
inline void CreateViewParamsDataView::GetSessionStorageNamespaceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->session_storage_namespace_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void CreateViewParamsDataView::GetReplicatedFrameStateDataView(
    ::content::mojom::FrameReplicationStateDataView* output) {
  auto pointer = data_->replicated_frame_state.Get();
  *output = ::content::mojom::FrameReplicationStateDataView(pointer, context_);
}
inline void CreateViewParamsDataView::GetDevtoolsMainFrameTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_main_frame_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void CreateViewParamsDataView::GetVisualPropertiesDataView(
    ::content::mojom::VisualPropertiesDataView* output) {
  auto pointer = data_->visual_properties.Get();
  *output = ::content::mojom::VisualPropertiesDataView(pointer, context_);
}


inline void CreateFrameWidgetParamsDataView::GetVisualPropertiesDataView(
    ::content::mojom::VisualPropertiesDataView* output) {
  auto pointer = data_->visual_properties.Get();
  *output = ::content::mojom::VisualPropertiesDataView(pointer, context_);
}


inline void CreateFrameParamsDataView::GetInterfaceBundleDataView(
    ::content::mojom::DocumentScopedInterfaceBundleDataView* output) {
  auto pointer = data_->interface_bundle.Get();
  *output = ::content::mojom::DocumentScopedInterfaceBundleDataView(pointer, context_);
}
inline void CreateFrameParamsDataView::GetReplicationStateDataView(
    ::content::mojom::FrameReplicationStateDataView* output) {
  auto pointer = data_->replication_state.Get();
  *output = ::content::mojom::FrameReplicationStateDataView(pointer, context_);
}
inline void CreateFrameParamsDataView::GetDevtoolsFrameTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_frame_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void CreateFrameParamsDataView::GetFrameOwnerPropertiesDataView(
    ::content::mojom::FrameOwnerPropertiesDataView* output) {
  auto pointer = data_->frame_owner_properties.Get();
  *output = ::content::mojom::FrameOwnerPropertiesDataView(pointer, context_);
}
inline void CreateFrameParamsDataView::GetWidgetParamsDataView(
    CreateFrameWidgetParamsDataView* output) {
  auto pointer = data_->widget_params.Get();
  *output = CreateFrameWidgetParamsDataView(pointer, context_);
}




inline void UpdateSystemColorInfoParamsDataView::GetColorsDataView(
    mojo::MapDataView<::content::mojom::SystemThemeColor, uint32_t>* output) {
  auto pointer = data_->colors.Get();
  *output = mojo::MapDataView<::content::mojom::SystemThemeColor, uint32_t>(pointer, context_);
}



}  // namespace mojom
}  // namespace content

#endif  // CONTENT_COMMON_RENDERER_MOJOM_SHARED_H_