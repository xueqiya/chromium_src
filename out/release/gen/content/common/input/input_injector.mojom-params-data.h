// content/common/input/input_injector.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_PARAMS_DATA_H_
#define CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace content {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticSmoothDrag_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputInjector_QueueSyntheticSmoothDrag_Params_Data));
      new (data()) InputInjector_QueueSyntheticSmoothDrag_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputInjector_QueueSyntheticSmoothDrag_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputInjector_QueueSyntheticSmoothDrag_Params_Data>(index_);
    }
    InputInjector_QueueSyntheticSmoothDrag_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::SyntheticSmoothDrag_Data> drag;

 private:
  InputInjector_QueueSyntheticSmoothDrag_Params_Data();
  ~InputInjector_QueueSyntheticSmoothDrag_Params_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticSmoothDrag_Params_Data) == 16,
              "Bad sizeof(InputInjector_QueueSyntheticSmoothDrag_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data));
      new (data()) InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data>(index_);
    }
    InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data();
  ~InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data) == 8,
              "Bad sizeof(InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticSmoothScroll_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputInjector_QueueSyntheticSmoothScroll_Params_Data));
      new (data()) InputInjector_QueueSyntheticSmoothScroll_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputInjector_QueueSyntheticSmoothScroll_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputInjector_QueueSyntheticSmoothScroll_Params_Data>(index_);
    }
    InputInjector_QueueSyntheticSmoothScroll_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::SyntheticSmoothScroll_Data> scroll;

 private:
  InputInjector_QueueSyntheticSmoothScroll_Params_Data();
  ~InputInjector_QueueSyntheticSmoothScroll_Params_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticSmoothScroll_Params_Data) == 16,
              "Bad sizeof(InputInjector_QueueSyntheticSmoothScroll_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data));
      new (data()) InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data>(index_);
    }
    InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data();
  ~InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data) == 8,
              "Bad sizeof(InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticPinch_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputInjector_QueueSyntheticPinch_Params_Data));
      new (data()) InputInjector_QueueSyntheticPinch_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputInjector_QueueSyntheticPinch_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputInjector_QueueSyntheticPinch_Params_Data>(index_);
    }
    InputInjector_QueueSyntheticPinch_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::SyntheticPinch_Data> pinch;

 private:
  InputInjector_QueueSyntheticPinch_Params_Data();
  ~InputInjector_QueueSyntheticPinch_Params_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticPinch_Params_Data) == 16,
              "Bad sizeof(InputInjector_QueueSyntheticPinch_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticPinch_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputInjector_QueueSyntheticPinch_ResponseParams_Data));
      new (data()) InputInjector_QueueSyntheticPinch_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputInjector_QueueSyntheticPinch_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputInjector_QueueSyntheticPinch_ResponseParams_Data>(index_);
    }
    InputInjector_QueueSyntheticPinch_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  InputInjector_QueueSyntheticPinch_ResponseParams_Data();
  ~InputInjector_QueueSyntheticPinch_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticPinch_ResponseParams_Data) == 8,
              "Bad sizeof(InputInjector_QueueSyntheticPinch_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticTap_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputInjector_QueueSyntheticTap_Params_Data));
      new (data()) InputInjector_QueueSyntheticTap_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputInjector_QueueSyntheticTap_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputInjector_QueueSyntheticTap_Params_Data>(index_);
    }
    InputInjector_QueueSyntheticTap_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::SyntheticTap_Data> tap;

 private:
  InputInjector_QueueSyntheticTap_Params_Data();
  ~InputInjector_QueueSyntheticTap_Params_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticTap_Params_Data) == 16,
              "Bad sizeof(InputInjector_QueueSyntheticTap_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticTap_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputInjector_QueueSyntheticTap_ResponseParams_Data));
      new (data()) InputInjector_QueueSyntheticTap_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputInjector_QueueSyntheticTap_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputInjector_QueueSyntheticTap_ResponseParams_Data>(index_);
    }
    InputInjector_QueueSyntheticTap_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  InputInjector_QueueSyntheticTap_ResponseParams_Data();
  ~InputInjector_QueueSyntheticTap_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticTap_ResponseParams_Data) == 8,
              "Bad sizeof(InputInjector_QueueSyntheticTap_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticPointerAction_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputInjector_QueueSyntheticPointerAction_Params_Data));
      new (data()) InputInjector_QueueSyntheticPointerAction_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputInjector_QueueSyntheticPointerAction_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputInjector_QueueSyntheticPointerAction_Params_Data>(index_);
    }
    InputInjector_QueueSyntheticPointerAction_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::SyntheticPointerAction_Data> pointer_action;

 private:
  InputInjector_QueueSyntheticPointerAction_Params_Data();
  ~InputInjector_QueueSyntheticPointerAction_Params_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticPointerAction_Params_Data) == 16,
              "Bad sizeof(InputInjector_QueueSyntheticPointerAction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) InputInjector_QueueSyntheticPointerAction_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputInjector_QueueSyntheticPointerAction_ResponseParams_Data));
      new (data()) InputInjector_QueueSyntheticPointerAction_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputInjector_QueueSyntheticPointerAction_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputInjector_QueueSyntheticPointerAction_ResponseParams_Data>(index_);
    }
    InputInjector_QueueSyntheticPointerAction_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  InputInjector_QueueSyntheticPointerAction_ResponseParams_Data();
  ~InputInjector_QueueSyntheticPointerAction_ResponseParams_Data() = delete;
};
static_assert(sizeof(InputInjector_QueueSyntheticPointerAction_ResponseParams_Data) == 8,
              "Bad sizeof(InputInjector_QueueSyntheticPointerAction_ResponseParams_Data)");

}  // namespace internal
class InputInjector_QueueSyntheticSmoothDrag_ParamsDataView {
 public:
  InputInjector_QueueSyntheticSmoothDrag_ParamsDataView() {}

  InputInjector_QueueSyntheticSmoothDrag_ParamsDataView(
      internal::InputInjector_QueueSyntheticSmoothDrag_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDragDataView(
      ::content::mojom::SyntheticSmoothDragDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDrag(UserType* output) {
    auto* pointer = data_->drag.Get();
    return mojo::internal::Deserialize<::content::mojom::SyntheticSmoothDragDataView>(
        pointer, output, context_);
  }
 private:
  internal::InputInjector_QueueSyntheticSmoothDrag_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InputInjector_QueueSyntheticSmoothDrag_ResponseParamsDataView {
 public:
  InputInjector_QueueSyntheticSmoothDrag_ResponseParamsDataView() {}

  InputInjector_QueueSyntheticSmoothDrag_ResponseParamsDataView(
      internal::InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputInjector_QueueSyntheticSmoothDrag_ResponseParams_Data* data_ = nullptr;
};

class InputInjector_QueueSyntheticSmoothScroll_ParamsDataView {
 public:
  InputInjector_QueueSyntheticSmoothScroll_ParamsDataView() {}

  InputInjector_QueueSyntheticSmoothScroll_ParamsDataView(
      internal::InputInjector_QueueSyntheticSmoothScroll_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetScrollDataView(
      ::content::mojom::SyntheticSmoothScrollDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadScroll(UserType* output) {
    auto* pointer = data_->scroll.Get();
    return mojo::internal::Deserialize<::content::mojom::SyntheticSmoothScrollDataView>(
        pointer, output, context_);
  }
 private:
  internal::InputInjector_QueueSyntheticSmoothScroll_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InputInjector_QueueSyntheticSmoothScroll_ResponseParamsDataView {
 public:
  InputInjector_QueueSyntheticSmoothScroll_ResponseParamsDataView() {}

  InputInjector_QueueSyntheticSmoothScroll_ResponseParamsDataView(
      internal::InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputInjector_QueueSyntheticSmoothScroll_ResponseParams_Data* data_ = nullptr;
};

class InputInjector_QueueSyntheticPinch_ParamsDataView {
 public:
  InputInjector_QueueSyntheticPinch_ParamsDataView() {}

  InputInjector_QueueSyntheticPinch_ParamsDataView(
      internal::InputInjector_QueueSyntheticPinch_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPinchDataView(
      ::content::mojom::SyntheticPinchDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPinch(UserType* output) {
    auto* pointer = data_->pinch.Get();
    return mojo::internal::Deserialize<::content::mojom::SyntheticPinchDataView>(
        pointer, output, context_);
  }
 private:
  internal::InputInjector_QueueSyntheticPinch_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InputInjector_QueueSyntheticPinch_ResponseParamsDataView {
 public:
  InputInjector_QueueSyntheticPinch_ResponseParamsDataView() {}

  InputInjector_QueueSyntheticPinch_ResponseParamsDataView(
      internal::InputInjector_QueueSyntheticPinch_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputInjector_QueueSyntheticPinch_ResponseParams_Data* data_ = nullptr;
};

class InputInjector_QueueSyntheticTap_ParamsDataView {
 public:
  InputInjector_QueueSyntheticTap_ParamsDataView() {}

  InputInjector_QueueSyntheticTap_ParamsDataView(
      internal::InputInjector_QueueSyntheticTap_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTapDataView(
      ::content::mojom::SyntheticTapDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTap(UserType* output) {
    auto* pointer = data_->tap.Get();
    return mojo::internal::Deserialize<::content::mojom::SyntheticTapDataView>(
        pointer, output, context_);
  }
 private:
  internal::InputInjector_QueueSyntheticTap_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InputInjector_QueueSyntheticTap_ResponseParamsDataView {
 public:
  InputInjector_QueueSyntheticTap_ResponseParamsDataView() {}

  InputInjector_QueueSyntheticTap_ResponseParamsDataView(
      internal::InputInjector_QueueSyntheticTap_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputInjector_QueueSyntheticTap_ResponseParams_Data* data_ = nullptr;
};

class InputInjector_QueueSyntheticPointerAction_ParamsDataView {
 public:
  InputInjector_QueueSyntheticPointerAction_ParamsDataView() {}

  InputInjector_QueueSyntheticPointerAction_ParamsDataView(
      internal::InputInjector_QueueSyntheticPointerAction_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPointerActionDataView(
      ::content::mojom::SyntheticPointerActionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPointerAction(UserType* output) {
    auto* pointer = data_->pointer_action.Get();
    return mojo::internal::Deserialize<::content::mojom::SyntheticPointerActionDataView>(
        pointer, output, context_);
  }
 private:
  internal::InputInjector_QueueSyntheticPointerAction_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InputInjector_QueueSyntheticPointerAction_ResponseParamsDataView {
 public:
  InputInjector_QueueSyntheticPointerAction_ResponseParamsDataView() {}

  InputInjector_QueueSyntheticPointerAction_ResponseParamsDataView(
      internal::InputInjector_QueueSyntheticPointerAction_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InputInjector_QueueSyntheticPointerAction_ResponseParams_Data* data_ = nullptr;
};


inline void InputInjector_QueueSyntheticSmoothDrag_ParamsDataView::GetDragDataView(
    ::content::mojom::SyntheticSmoothDragDataView* output) {
  auto pointer = data_->drag.Get();
  *output = ::content::mojom::SyntheticSmoothDragDataView(pointer, context_);
}




inline void InputInjector_QueueSyntheticSmoothScroll_ParamsDataView::GetScrollDataView(
    ::content::mojom::SyntheticSmoothScrollDataView* output) {
  auto pointer = data_->scroll.Get();
  *output = ::content::mojom::SyntheticSmoothScrollDataView(pointer, context_);
}




inline void InputInjector_QueueSyntheticPinch_ParamsDataView::GetPinchDataView(
    ::content::mojom::SyntheticPinchDataView* output) {
  auto pointer = data_->pinch.Get();
  *output = ::content::mojom::SyntheticPinchDataView(pointer, context_);
}




inline void InputInjector_QueueSyntheticTap_ParamsDataView::GetTapDataView(
    ::content::mojom::SyntheticTapDataView* output) {
  auto pointer = data_->tap.Get();
  *output = ::content::mojom::SyntheticTapDataView(pointer, context_);
}




inline void InputInjector_QueueSyntheticPointerAction_ParamsDataView::GetPointerActionDataView(
    ::content::mojom::SyntheticPointerActionDataView* output) {
  auto pointer = data_->pointer_action.Get();
  *output = ::content::mojom::SyntheticPointerActionDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_PARAMS_DATA_H_