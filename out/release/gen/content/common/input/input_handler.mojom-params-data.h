// content/common/input/input_handler.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_INPUT_INPUT_HANDLER_MOJOM_PARAMS_DATA_H_
#define CONTENT_COMMON_INPUT_INPUT_HANDLER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace content {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data));
      new (data()) WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data>(index_);
    }
    WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t left : 1;
  uint8_t right : 1;
  uint8_t up : 1;
  uint8_t down : 1;
  uint8_t padfinal_[7];

 private:
  WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data();
  ~WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data));
      new (data()) WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data>(index_);
    }
    WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t visible : 1;
  uint8_t padfinal_[7];

 private:
  WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data();
  ~WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data));
      new (data()) WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data>(index_);
    }
    WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t touch_action;
  uint8_t padfinal_[4];

 private:
  WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data();
  ~WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data));
      new (data()) WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data>(index_);
    }
    WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t touch_action;
  uint32_t unique_touch_event_id;
  int32_t state;
  uint8_t padfinal_[4];

 private:
  WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data();
  ~WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data) == 24,
              "Bad sizeof(WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandlerHost_DidOverscroll_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandlerHost_DidOverscroll_Params_Data));
      new (data()) WidgetInputHandlerHost_DidOverscroll_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandlerHost_DidOverscroll_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandlerHost_DidOverscroll_Params_Data>(index_);
    }
    WidgetInputHandlerHost_DidOverscroll_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::DidOverscrollParams_Data> params;

 private:
  WidgetInputHandlerHost_DidOverscroll_Params_Data();
  ~WidgetInputHandlerHost_DidOverscroll_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandlerHost_DidOverscroll_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandlerHost_DidOverscroll_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data));
      new (data()) WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data>(index_);
    }
    WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data();
  ~WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data) == 8,
              "Bad sizeof(WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandlerHost_ImeCancelComposition_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandlerHost_ImeCancelComposition_Params_Data));
      new (data()) WidgetInputHandlerHost_ImeCancelComposition_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandlerHost_ImeCancelComposition_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandlerHost_ImeCancelComposition_Params_Data>(index_);
    }
    WidgetInputHandlerHost_ImeCancelComposition_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  WidgetInputHandlerHost_ImeCancelComposition_Params_Data();
  ~WidgetInputHandlerHost_ImeCancelComposition_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandlerHost_ImeCancelComposition_Params_Data) == 8,
              "Bad sizeof(WidgetInputHandlerHost_ImeCancelComposition_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data));
      new (data()) WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data>(index_);
    }
    WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Range_Data> range;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data>>> bounds;

 private:
  WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data();
  ~WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data) == 24,
              "Bad sizeof(WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandlerHost_SetMouseCapture_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandlerHost_SetMouseCapture_Params_Data));
      new (data()) WidgetInputHandlerHost_SetMouseCapture_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandlerHost_SetMouseCapture_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandlerHost_SetMouseCapture_Params_Data>(index_);
    }
    WidgetInputHandlerHost_SetMouseCapture_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t capture : 1;
  uint8_t padfinal_[7];

 private:
  WidgetInputHandlerHost_SetMouseCapture_Params_Data();
  ~WidgetInputHandlerHost_SetMouseCapture_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandlerHost_SetMouseCapture_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandlerHost_SetMouseCapture_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_SetFocus_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_SetFocus_Params_Data));
      new (data()) WidgetInputHandler_SetFocus_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_SetFocus_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_SetFocus_Params_Data>(index_);
    }
    WidgetInputHandler_SetFocus_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t focused : 1;
  uint8_t padfinal_[7];

 private:
  WidgetInputHandler_SetFocus_Params_Data();
  ~WidgetInputHandler_SetFocus_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_SetFocus_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandler_SetFocus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_MouseCaptureLost_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_MouseCaptureLost_Params_Data));
      new (data()) WidgetInputHandler_MouseCaptureLost_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_MouseCaptureLost_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_MouseCaptureLost_Params_Data>(index_);
    }
    WidgetInputHandler_MouseCaptureLost_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  WidgetInputHandler_MouseCaptureLost_Params_Data();
  ~WidgetInputHandler_MouseCaptureLost_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_MouseCaptureLost_Params_Data) == 8,
              "Bad sizeof(WidgetInputHandler_MouseCaptureLost_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data));
      new (data()) WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data>(index_);
    }
    WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::content::mojom::internal::EditCommand_Data>>> commands;

 private:
  WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data();
  ~WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_CursorVisibilityChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_CursorVisibilityChanged_Params_Data));
      new (data()) WidgetInputHandler_CursorVisibilityChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_CursorVisibilityChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_CursorVisibilityChanged_Params_Data>(index_);
    }
    WidgetInputHandler_CursorVisibilityChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t visible : 1;
  uint8_t padfinal_[7];

 private:
  WidgetInputHandler_CursorVisibilityChanged_Params_Data();
  ~WidgetInputHandler_CursorVisibilityChanged_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_CursorVisibilityChanged_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandler_CursorVisibilityChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_FallbackCursorModeToggled_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_FallbackCursorModeToggled_Params_Data));
      new (data()) WidgetInputHandler_FallbackCursorModeToggled_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_FallbackCursorModeToggled_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_FallbackCursorModeToggled_Params_Data>(index_);
    }
    WidgetInputHandler_FallbackCursorModeToggled_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_on : 1;
  uint8_t padfinal_[7];

 private:
  WidgetInputHandler_FallbackCursorModeToggled_Params_Data();
  ~WidgetInputHandler_FallbackCursorModeToggled_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_FallbackCursorModeToggled_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandler_FallbackCursorModeToggled_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_ImeSetComposition_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_ImeSetComposition_Params_Data));
      new (data()) WidgetInputHandler_ImeSetComposition_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_ImeSetComposition_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_ImeSetComposition_Params_Data>(index_);
    }
    WidgetInputHandler_ImeSetComposition_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> text;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::ui::mojom::internal::ImeTextSpan_Data>>> ime_text_spans;
  mojo::internal::Pointer<::gfx::mojom::internal::Range_Data> range;
  int32_t start;
  int32_t end;

 private:
  WidgetInputHandler_ImeSetComposition_Params_Data();
  ~WidgetInputHandler_ImeSetComposition_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_ImeSetComposition_Params_Data) == 40,
              "Bad sizeof(WidgetInputHandler_ImeSetComposition_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_ImeCommitText_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_ImeCommitText_Params_Data));
      new (data()) WidgetInputHandler_ImeCommitText_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_ImeCommitText_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_ImeCommitText_Params_Data>(index_);
    }
    WidgetInputHandler_ImeCommitText_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> text;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::ui::mojom::internal::ImeTextSpan_Data>>> ime_text_spans;
  mojo::internal::Pointer<::gfx::mojom::internal::Range_Data> range;
  int32_t relative_cursor_position;
  uint8_t padfinal_[4];

 private:
  WidgetInputHandler_ImeCommitText_Params_Data();
  ~WidgetInputHandler_ImeCommitText_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_ImeCommitText_Params_Data) == 40,
              "Bad sizeof(WidgetInputHandler_ImeCommitText_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_ImeCommitText_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_ImeCommitText_ResponseParams_Data));
      new (data()) WidgetInputHandler_ImeCommitText_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_ImeCommitText_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_ImeCommitText_ResponseParams_Data>(index_);
    }
    WidgetInputHandler_ImeCommitText_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  WidgetInputHandler_ImeCommitText_ResponseParams_Data();
  ~WidgetInputHandler_ImeCommitText_ResponseParams_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_ImeCommitText_ResponseParams_Data) == 8,
              "Bad sizeof(WidgetInputHandler_ImeCommitText_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_ImeFinishComposingText_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_ImeFinishComposingText_Params_Data));
      new (data()) WidgetInputHandler_ImeFinishComposingText_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_ImeFinishComposingText_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_ImeFinishComposingText_Params_Data>(index_);
    }
    WidgetInputHandler_ImeFinishComposingText_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t keep_selection : 1;
  uint8_t padfinal_[7];

 private:
  WidgetInputHandler_ImeFinishComposingText_Params_Data();
  ~WidgetInputHandler_ImeFinishComposingText_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_ImeFinishComposingText_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandler_ImeFinishComposingText_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_RequestTextInputStateUpdate_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_RequestTextInputStateUpdate_Params_Data));
      new (data()) WidgetInputHandler_RequestTextInputStateUpdate_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_RequestTextInputStateUpdate_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_RequestTextInputStateUpdate_Params_Data>(index_);
    }
    WidgetInputHandler_RequestTextInputStateUpdate_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  WidgetInputHandler_RequestTextInputStateUpdate_Params_Data();
  ~WidgetInputHandler_RequestTextInputStateUpdate_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_RequestTextInputStateUpdate_Params_Data) == 8,
              "Bad sizeof(WidgetInputHandler_RequestTextInputStateUpdate_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_RequestCompositionUpdates_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_RequestCompositionUpdates_Params_Data));
      new (data()) WidgetInputHandler_RequestCompositionUpdates_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_RequestCompositionUpdates_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_RequestCompositionUpdates_Params_Data>(index_);
    }
    WidgetInputHandler_RequestCompositionUpdates_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t immediate_request : 1;
  uint8_t monitor_request : 1;
  uint8_t padfinal_[7];

 private:
  WidgetInputHandler_RequestCompositionUpdates_Params_Data();
  ~WidgetInputHandler_RequestCompositionUpdates_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_RequestCompositionUpdates_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandler_RequestCompositionUpdates_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_DispatchEvent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_DispatchEvent_Params_Data));
      new (data()) WidgetInputHandler_DispatchEvent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_DispatchEvent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_DispatchEvent_Params_Data>(index_);
    }
    WidgetInputHandler_DispatchEvent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::Event_Data> event;

 private:
  WidgetInputHandler_DispatchEvent_Params_Data();
  ~WidgetInputHandler_DispatchEvent_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_DispatchEvent_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandler_DispatchEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_DispatchEvent_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_DispatchEvent_ResponseParams_Data));
      new (data()) WidgetInputHandler_DispatchEvent_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_DispatchEvent_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_DispatchEvent_ResponseParams_Data>(index_);
    }
    WidgetInputHandler_DispatchEvent_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t source;
  int32_t state;
  mojo::internal::Pointer<::ui::mojom::internal::LatencyInfo_Data> updated_latency;
  mojo::internal::Pointer<::content::mojom::internal::DidOverscrollParams_Data> overscroll;
  mojo::internal::Pointer<internal::TouchActionOptional_Data> touch_action;

 private:
  WidgetInputHandler_DispatchEvent_ResponseParams_Data();
  ~WidgetInputHandler_DispatchEvent_ResponseParams_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_DispatchEvent_ResponseParams_Data) == 40,
              "Bad sizeof(WidgetInputHandler_DispatchEvent_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_DispatchNonBlockingEvent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_DispatchNonBlockingEvent_Params_Data));
      new (data()) WidgetInputHandler_DispatchNonBlockingEvent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_DispatchNonBlockingEvent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_DispatchNonBlockingEvent_Params_Data>(index_);
    }
    WidgetInputHandler_DispatchNonBlockingEvent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::Event_Data> event;

 private:
  WidgetInputHandler_DispatchNonBlockingEvent_Params_Data();
  ~WidgetInputHandler_DispatchNonBlockingEvent_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_DispatchNonBlockingEvent_Params_Data) == 16,
              "Bad sizeof(WidgetInputHandler_DispatchNonBlockingEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_WaitForInputProcessed_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_WaitForInputProcessed_Params_Data));
      new (data()) WidgetInputHandler_WaitForInputProcessed_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_WaitForInputProcessed_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_WaitForInputProcessed_Params_Data>(index_);
    }
    WidgetInputHandler_WaitForInputProcessed_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  WidgetInputHandler_WaitForInputProcessed_Params_Data();
  ~WidgetInputHandler_WaitForInputProcessed_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_WaitForInputProcessed_Params_Data) == 8,
              "Bad sizeof(WidgetInputHandler_WaitForInputProcessed_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data));
      new (data()) WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data>(index_);
    }
    WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data();
  ~WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data) == 8,
              "Bad sizeof(WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) WidgetInputHandler_AttachSynchronousCompositor_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WidgetInputHandler_AttachSynchronousCompositor_Params_Data));
      new (data()) WidgetInputHandler_AttachSynchronousCompositor_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WidgetInputHandler_AttachSynchronousCompositor_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WidgetInputHandler_AttachSynchronousCompositor_Params_Data>(index_);
    }
    WidgetInputHandler_AttachSynchronousCompositor_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data control_host;
  mojo::internal::AssociatedInterface_Data host;
  mojo::internal::AssociatedEndpointHandle_Data compositor_request;
  uint8_t padfinal_[4];

 private:
  WidgetInputHandler_AttachSynchronousCompositor_Params_Data();
  ~WidgetInputHandler_AttachSynchronousCompositor_Params_Data() = delete;
};
static_assert(sizeof(WidgetInputHandler_AttachSynchronousCompositor_Params_Data) == 32,
              "Bad sizeof(WidgetInputHandler_AttachSynchronousCompositor_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_SetCompositionFromExistingText_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_SetCompositionFromExistingText_Params_Data));
      new (data()) FrameInputHandler_SetCompositionFromExistingText_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_SetCompositionFromExistingText_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_SetCompositionFromExistingText_Params_Data>(index_);
    }
    FrameInputHandler_SetCompositionFromExistingText_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t start;
  int32_t end;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::ui::mojom::internal::ImeTextSpan_Data>>> ime_text_spans;

 private:
  FrameInputHandler_SetCompositionFromExistingText_Params_Data();
  ~FrameInputHandler_SetCompositionFromExistingText_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_SetCompositionFromExistingText_Params_Data) == 24,
              "Bad sizeof(FrameInputHandler_SetCompositionFromExistingText_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_ExtendSelectionAndDelete_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_ExtendSelectionAndDelete_Params_Data));
      new (data()) FrameInputHandler_ExtendSelectionAndDelete_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_ExtendSelectionAndDelete_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_ExtendSelectionAndDelete_Params_Data>(index_);
    }
    FrameInputHandler_ExtendSelectionAndDelete_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t before;
  int32_t after;

 private:
  FrameInputHandler_ExtendSelectionAndDelete_Params_Data();
  ~FrameInputHandler_ExtendSelectionAndDelete_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_ExtendSelectionAndDelete_Params_Data) == 16,
              "Bad sizeof(FrameInputHandler_ExtendSelectionAndDelete_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_DeleteSurroundingText_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_DeleteSurroundingText_Params_Data));
      new (data()) FrameInputHandler_DeleteSurroundingText_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_DeleteSurroundingText_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_DeleteSurroundingText_Params_Data>(index_);
    }
    FrameInputHandler_DeleteSurroundingText_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t before;
  int32_t after;

 private:
  FrameInputHandler_DeleteSurroundingText_Params_Data();
  ~FrameInputHandler_DeleteSurroundingText_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_DeleteSurroundingText_Params_Data) == 16,
              "Bad sizeof(FrameInputHandler_DeleteSurroundingText_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data));
      new (data()) FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data>(index_);
    }
    FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t before;
  int32_t after;

 private:
  FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data();
  ~FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data) == 16,
              "Bad sizeof(FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_SetEditableSelectionOffsets_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_SetEditableSelectionOffsets_Params_Data));
      new (data()) FrameInputHandler_SetEditableSelectionOffsets_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_SetEditableSelectionOffsets_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_SetEditableSelectionOffsets_Params_Data>(index_);
    }
    FrameInputHandler_SetEditableSelectionOffsets_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t start;
  int32_t end;

 private:
  FrameInputHandler_SetEditableSelectionOffsets_Params_Data();
  ~FrameInputHandler_SetEditableSelectionOffsets_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_SetEditableSelectionOffsets_Params_Data) == 16,
              "Bad sizeof(FrameInputHandler_SetEditableSelectionOffsets_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_ExecuteEditCommand_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_ExecuteEditCommand_Params_Data));
      new (data()) FrameInputHandler_ExecuteEditCommand_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_ExecuteEditCommand_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_ExecuteEditCommand_Params_Data>(index_);
    }
    FrameInputHandler_ExecuteEditCommand_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> command;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> value;

 private:
  FrameInputHandler_ExecuteEditCommand_Params_Data();
  ~FrameInputHandler_ExecuteEditCommand_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_ExecuteEditCommand_Params_Data) == 24,
              "Bad sizeof(FrameInputHandler_ExecuteEditCommand_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_Undo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_Undo_Params_Data));
      new (data()) FrameInputHandler_Undo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_Undo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_Undo_Params_Data>(index_);
    }
    FrameInputHandler_Undo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_Undo_Params_Data();
  ~FrameInputHandler_Undo_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_Undo_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_Undo_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_Redo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_Redo_Params_Data));
      new (data()) FrameInputHandler_Redo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_Redo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_Redo_Params_Data>(index_);
    }
    FrameInputHandler_Redo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_Redo_Params_Data();
  ~FrameInputHandler_Redo_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_Redo_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_Redo_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_Cut_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_Cut_Params_Data));
      new (data()) FrameInputHandler_Cut_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_Cut_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_Cut_Params_Data>(index_);
    }
    FrameInputHandler_Cut_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_Cut_Params_Data();
  ~FrameInputHandler_Cut_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_Cut_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_Cut_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_Copy_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_Copy_Params_Data));
      new (data()) FrameInputHandler_Copy_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_Copy_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_Copy_Params_Data>(index_);
    }
    FrameInputHandler_Copy_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_Copy_Params_Data();
  ~FrameInputHandler_Copy_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_Copy_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_Copy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_CopyToFindPboard_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_CopyToFindPboard_Params_Data));
      new (data()) FrameInputHandler_CopyToFindPboard_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_CopyToFindPboard_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_CopyToFindPboard_Params_Data>(index_);
    }
    FrameInputHandler_CopyToFindPboard_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_CopyToFindPboard_Params_Data();
  ~FrameInputHandler_CopyToFindPboard_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_CopyToFindPboard_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_CopyToFindPboard_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_Paste_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_Paste_Params_Data));
      new (data()) FrameInputHandler_Paste_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_Paste_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_Paste_Params_Data>(index_);
    }
    FrameInputHandler_Paste_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_Paste_Params_Data();
  ~FrameInputHandler_Paste_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_Paste_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_Paste_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_PasteAndMatchStyle_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_PasteAndMatchStyle_Params_Data));
      new (data()) FrameInputHandler_PasteAndMatchStyle_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_PasteAndMatchStyle_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_PasteAndMatchStyle_Params_Data>(index_);
    }
    FrameInputHandler_PasteAndMatchStyle_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_PasteAndMatchStyle_Params_Data();
  ~FrameInputHandler_PasteAndMatchStyle_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_PasteAndMatchStyle_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_PasteAndMatchStyle_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_Delete_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_Delete_Params_Data));
      new (data()) FrameInputHandler_Delete_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_Delete_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_Delete_Params_Data>(index_);
    }
    FrameInputHandler_Delete_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_Delete_Params_Data();
  ~FrameInputHandler_Delete_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_Delete_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_Delete_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_SelectAll_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_SelectAll_Params_Data));
      new (data()) FrameInputHandler_SelectAll_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_SelectAll_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_SelectAll_Params_Data>(index_);
    }
    FrameInputHandler_SelectAll_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_SelectAll_Params_Data();
  ~FrameInputHandler_SelectAll_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_SelectAll_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_SelectAll_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_CollapseSelection_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_CollapseSelection_Params_Data));
      new (data()) FrameInputHandler_CollapseSelection_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_CollapseSelection_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_CollapseSelection_Params_Data>(index_);
    }
    FrameInputHandler_CollapseSelection_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_CollapseSelection_Params_Data();
  ~FrameInputHandler_CollapseSelection_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_CollapseSelection_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_CollapseSelection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_Replace_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_Replace_Params_Data));
      new (data()) FrameInputHandler_Replace_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_Replace_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_Replace_Params_Data>(index_);
    }
    FrameInputHandler_Replace_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> word;

 private:
  FrameInputHandler_Replace_Params_Data();
  ~FrameInputHandler_Replace_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_Replace_Params_Data) == 16,
              "Bad sizeof(FrameInputHandler_Replace_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_ReplaceMisspelling_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_ReplaceMisspelling_Params_Data));
      new (data()) FrameInputHandler_ReplaceMisspelling_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_ReplaceMisspelling_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_ReplaceMisspelling_Params_Data>(index_);
    }
    FrameInputHandler_ReplaceMisspelling_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> word;

 private:
  FrameInputHandler_ReplaceMisspelling_Params_Data();
  ~FrameInputHandler_ReplaceMisspelling_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_ReplaceMisspelling_Params_Data) == 16,
              "Bad sizeof(FrameInputHandler_ReplaceMisspelling_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_SelectRange_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_SelectRange_Params_Data));
      new (data()) FrameInputHandler_SelectRange_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_SelectRange_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_SelectRange_Params_Data>(index_);
    }
    FrameInputHandler_SelectRange_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> base;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> extent;

 private:
  FrameInputHandler_SelectRange_Params_Data();
  ~FrameInputHandler_SelectRange_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_SelectRange_Params_Data) == 24,
              "Bad sizeof(FrameInputHandler_SelectRange_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data));
      new (data()) FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data>(index_);
    }
    FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t start;
  int32_t end;
  int32_t behavior;
  uint8_t padfinal_[4];

 private:
  FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data();
  ~FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data) == 24,
              "Bad sizeof(FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_SelectWordAroundCaret_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_SelectWordAroundCaret_Params_Data));
      new (data()) FrameInputHandler_SelectWordAroundCaret_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_SelectWordAroundCaret_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_SelectWordAroundCaret_Params_Data>(index_);
    }
    FrameInputHandler_SelectWordAroundCaret_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  FrameInputHandler_SelectWordAroundCaret_Params_Data();
  ~FrameInputHandler_SelectWordAroundCaret_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_SelectWordAroundCaret_Params_Data) == 8,
              "Bad sizeof(FrameInputHandler_SelectWordAroundCaret_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data));
      new (data()) FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data>(index_);
    }
    FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t did_select : 1;
  uint8_t pad0_[3];
  int32_t start_adjust;
  int32_t end_adjust;
  uint8_t padfinal_[4];

 private:
  FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data();
  ~FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data) == 24,
              "Bad sizeof(FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_MoveRangeSelectionExtent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_MoveRangeSelectionExtent_Params_Data));
      new (data()) FrameInputHandler_MoveRangeSelectionExtent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_MoveRangeSelectionExtent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_MoveRangeSelectionExtent_Params_Data>(index_);
    }
    FrameInputHandler_MoveRangeSelectionExtent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> extent;

 private:
  FrameInputHandler_MoveRangeSelectionExtent_Params_Data();
  ~FrameInputHandler_MoveRangeSelectionExtent_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_MoveRangeSelectionExtent_Params_Data) == 16,
              "Bad sizeof(FrameInputHandler_MoveRangeSelectionExtent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data));
      new (data()) FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data>(index_);
    }
    FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;

 private:
  FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data();
  ~FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data) == 16,
              "Bad sizeof(FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_MoveCaret_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_MoveCaret_Params_Data));
      new (data()) FrameInputHandler_MoveCaret_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_MoveCaret_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_MoveCaret_Params_Data>(index_);
    }
    FrameInputHandler_MoveCaret_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> point;

 private:
  FrameInputHandler_MoveCaret_Params_Data();
  ~FrameInputHandler_MoveCaret_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_MoveCaret_Params_Data) == 16,
              "Bad sizeof(FrameInputHandler_MoveCaret_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameInputHandler_GetWidgetInputHandler_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInputHandler_GetWidgetInputHandler_Params_Data));
      new (data()) FrameInputHandler_GetWidgetInputHandler_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInputHandler_GetWidgetInputHandler_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInputHandler_GetWidgetInputHandler_Params_Data>(index_);
    }
    FrameInputHandler_GetWidgetInputHandler_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data interface_request;
  mojo::internal::Interface_Data host;
  uint8_t padfinal_[4];

 private:
  FrameInputHandler_GetWidgetInputHandler_Params_Data();
  ~FrameInputHandler_GetWidgetInputHandler_Params_Data() = delete;
};
static_assert(sizeof(FrameInputHandler_GetWidgetInputHandler_Params_Data) == 24,
              "Bad sizeof(FrameInputHandler_GetWidgetInputHandler_Params_Data)");

}  // namespace internal
class WidgetInputHandlerHost_FallbackCursorModeLockCursor_ParamsDataView {
 public:
  WidgetInputHandlerHost_FallbackCursorModeLockCursor_ParamsDataView() {}

  WidgetInputHandlerHost_FallbackCursorModeLockCursor_ParamsDataView(
      internal::WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool left() const {
    return data_->left;
  }
  bool right() const {
    return data_->right;
  }
  bool up() const {
    return data_->up;
  }
  bool down() const {
    return data_->down;
  }
 private:
  internal::WidgetInputHandlerHost_FallbackCursorModeLockCursor_Params_Data* data_ = nullptr;
};

class WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_ParamsDataView {
 public:
  WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_ParamsDataView() {}

  WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_ParamsDataView(
      internal::WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool visible() const {
    return data_->visible;
  }
 private:
  internal::WidgetInputHandlerHost_FallbackCursorModeSetCursorVisibility_Params_Data* data_ = nullptr;
};

class WidgetInputHandlerHost_SetTouchActionFromMain_ParamsDataView {
 public:
  WidgetInputHandlerHost_SetTouchActionFromMain_ParamsDataView() {}

  WidgetInputHandlerHost_SetTouchActionFromMain_ParamsDataView(
      internal::WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTouchAction(UserType* output) const {
    auto data_value = data_->touch_action;
    return mojo::internal::Deserialize<::cc::mojom::TouchAction>(
        data_value, output);
  }

  ::cc::mojom::TouchAction touch_action() const {
    return static_cast<::cc::mojom::TouchAction>(data_->touch_action);
  }
 private:
  internal::WidgetInputHandlerHost_SetTouchActionFromMain_Params_Data* data_ = nullptr;
};

class WidgetInputHandlerHost_SetWhiteListedTouchAction_ParamsDataView {
 public:
  WidgetInputHandlerHost_SetWhiteListedTouchAction_ParamsDataView() {}

  WidgetInputHandlerHost_SetWhiteListedTouchAction_ParamsDataView(
      internal::WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTouchAction(UserType* output) const {
    auto data_value = data_->touch_action;
    return mojo::internal::Deserialize<::cc::mojom::TouchAction>(
        data_value, output);
  }

  ::cc::mojom::TouchAction touch_action() const {
    return static_cast<::cc::mojom::TouchAction>(data_->touch_action);
  }
  uint32_t unique_touch_event_id() const {
    return data_->unique_touch_event_id;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::content::mojom::InputEventAckState>(
        data_value, output);
  }

  ::content::mojom::InputEventAckState state() const {
    return static_cast<::content::mojom::InputEventAckState>(data_->state);
  }
 private:
  internal::WidgetInputHandlerHost_SetWhiteListedTouchAction_Params_Data* data_ = nullptr;
};

class WidgetInputHandlerHost_DidOverscroll_ParamsDataView {
 public:
  WidgetInputHandlerHost_DidOverscroll_ParamsDataView() {}

  WidgetInputHandlerHost_DidOverscroll_ParamsDataView(
      internal::WidgetInputHandlerHost_DidOverscroll_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      ::content::mojom::DidOverscrollParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParams(UserType* output) {
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::content::mojom::DidOverscrollParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::WidgetInputHandlerHost_DidOverscroll_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class WidgetInputHandlerHost_DidStartScrollingViewport_ParamsDataView {
 public:
  WidgetInputHandlerHost_DidStartScrollingViewport_ParamsDataView() {}

  WidgetInputHandlerHost_DidStartScrollingViewport_ParamsDataView(
      internal::WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WidgetInputHandlerHost_DidStartScrollingViewport_Params_Data* data_ = nullptr;
};

class WidgetInputHandlerHost_ImeCancelComposition_ParamsDataView {
 public:
  WidgetInputHandlerHost_ImeCancelComposition_ParamsDataView() {}

  WidgetInputHandlerHost_ImeCancelComposition_ParamsDataView(
      internal::WidgetInputHandlerHost_ImeCancelComposition_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WidgetInputHandlerHost_ImeCancelComposition_Params_Data* data_ = nullptr;
};

class WidgetInputHandlerHost_ImeCompositionRangeChanged_ParamsDataView {
 public:
  WidgetInputHandlerHost_ImeCompositionRangeChanged_ParamsDataView() {}

  WidgetInputHandlerHost_ImeCompositionRangeChanged_ParamsDataView(
      internal::WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRangeDataView(
      ::gfx::mojom::RangeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRange(UserType* output) {
    auto* pointer = data_->range.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RangeDataView>(
        pointer, output, context_);
  }
  inline void GetBoundsDataView(
      mojo::ArrayDataView<::gfx::mojom::RectDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBounds(UserType* output) {
    auto* pointer = data_->bounds.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::gfx::mojom::RectDataView>>(
        pointer, output, context_);
  }
 private:
  internal::WidgetInputHandlerHost_ImeCompositionRangeChanged_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class WidgetInputHandlerHost_SetMouseCapture_ParamsDataView {
 public:
  WidgetInputHandlerHost_SetMouseCapture_ParamsDataView() {}

  WidgetInputHandlerHost_SetMouseCapture_ParamsDataView(
      internal::WidgetInputHandlerHost_SetMouseCapture_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool capture() const {
    return data_->capture;
  }
 private:
  internal::WidgetInputHandlerHost_SetMouseCapture_Params_Data* data_ = nullptr;
};

class WidgetInputHandler_SetFocus_ParamsDataView {
 public:
  WidgetInputHandler_SetFocus_ParamsDataView() {}

  WidgetInputHandler_SetFocus_ParamsDataView(
      internal::WidgetInputHandler_SetFocus_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool focused() const {
    return data_->focused;
  }
 private:
  internal::WidgetInputHandler_SetFocus_Params_Data* data_ = nullptr;
};

class WidgetInputHandler_MouseCaptureLost_ParamsDataView {
 public:
  WidgetInputHandler_MouseCaptureLost_ParamsDataView() {}

  WidgetInputHandler_MouseCaptureLost_ParamsDataView(
      internal::WidgetInputHandler_MouseCaptureLost_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WidgetInputHandler_MouseCaptureLost_Params_Data* data_ = nullptr;
};

class WidgetInputHandler_SetEditCommandsForNextKeyEvent_ParamsDataView {
 public:
  WidgetInputHandler_SetEditCommandsForNextKeyEvent_ParamsDataView() {}

  WidgetInputHandler_SetEditCommandsForNextKeyEvent_ParamsDataView(
      internal::WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCommandsDataView(
      mojo::ArrayDataView<::content::mojom::EditCommandDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCommands(UserType* output) {
    auto* pointer = data_->commands.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::content::mojom::EditCommandDataView>>(
        pointer, output, context_);
  }
 private:
  internal::WidgetInputHandler_SetEditCommandsForNextKeyEvent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class WidgetInputHandler_CursorVisibilityChanged_ParamsDataView {
 public:
  WidgetInputHandler_CursorVisibilityChanged_ParamsDataView() {}

  WidgetInputHandler_CursorVisibilityChanged_ParamsDataView(
      internal::WidgetInputHandler_CursorVisibilityChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool visible() const {
    return data_->visible;
  }
 private:
  internal::WidgetInputHandler_CursorVisibilityChanged_Params_Data* data_ = nullptr;
};

class WidgetInputHandler_FallbackCursorModeToggled_ParamsDataView {
 public:
  WidgetInputHandler_FallbackCursorModeToggled_ParamsDataView() {}

  WidgetInputHandler_FallbackCursorModeToggled_ParamsDataView(
      internal::WidgetInputHandler_FallbackCursorModeToggled_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_on() const {
    return data_->is_on;
  }
 private:
  internal::WidgetInputHandler_FallbackCursorModeToggled_Params_Data* data_ = nullptr;
};

class WidgetInputHandler_ImeSetComposition_ParamsDataView {
 public:
  WidgetInputHandler_ImeSetComposition_ParamsDataView() {}

  WidgetInputHandler_ImeSetComposition_ParamsDataView(
      internal::WidgetInputHandler_ImeSetComposition_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTextDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadText(UserType* output) {
    auto* pointer = data_->text.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetImeTextSpansDataView(
      mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImeTextSpans(UserType* output) {
    auto* pointer = data_->ime_text_spans.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>>(
        pointer, output, context_);
  }
  inline void GetRangeDataView(
      ::gfx::mojom::RangeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRange(UserType* output) {
    auto* pointer = data_->range.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RangeDataView>(
        pointer, output, context_);
  }
  int32_t start() const {
    return data_->start;
  }
  int32_t end() const {
    return data_->end;
  }
 private:
  internal::WidgetInputHandler_ImeSetComposition_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class WidgetInputHandler_ImeCommitText_ParamsDataView {
 public:
  WidgetInputHandler_ImeCommitText_ParamsDataView() {}

  WidgetInputHandler_ImeCommitText_ParamsDataView(
      internal::WidgetInputHandler_ImeCommitText_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTextDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadText(UserType* output) {
    auto* pointer = data_->text.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetImeTextSpansDataView(
      mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImeTextSpans(UserType* output) {
    auto* pointer = data_->ime_text_spans.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>>(
        pointer, output, context_);
  }
  inline void GetRangeDataView(
      ::gfx::mojom::RangeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRange(UserType* output) {
    auto* pointer = data_->range.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RangeDataView>(
        pointer, output, context_);
  }
  int32_t relative_cursor_position() const {
    return data_->relative_cursor_position;
  }
 private:
  internal::WidgetInputHandler_ImeCommitText_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class WidgetInputHandler_ImeCommitText_ResponseParamsDataView {
 public:
  WidgetInputHandler_ImeCommitText_ResponseParamsDataView() {}

  WidgetInputHandler_ImeCommitText_ResponseParamsDataView(
      internal::WidgetInputHandler_ImeCommitText_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WidgetInputHandler_ImeCommitText_ResponseParams_Data* data_ = nullptr;
};

class WidgetInputHandler_ImeFinishComposingText_ParamsDataView {
 public:
  WidgetInputHandler_ImeFinishComposingText_ParamsDataView() {}

  WidgetInputHandler_ImeFinishComposingText_ParamsDataView(
      internal::WidgetInputHandler_ImeFinishComposingText_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool keep_selection() const {
    return data_->keep_selection;
  }
 private:
  internal::WidgetInputHandler_ImeFinishComposingText_Params_Data* data_ = nullptr;
};

class WidgetInputHandler_RequestTextInputStateUpdate_ParamsDataView {
 public:
  WidgetInputHandler_RequestTextInputStateUpdate_ParamsDataView() {}

  WidgetInputHandler_RequestTextInputStateUpdate_ParamsDataView(
      internal::WidgetInputHandler_RequestTextInputStateUpdate_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WidgetInputHandler_RequestTextInputStateUpdate_Params_Data* data_ = nullptr;
};

class WidgetInputHandler_RequestCompositionUpdates_ParamsDataView {
 public:
  WidgetInputHandler_RequestCompositionUpdates_ParamsDataView() {}

  WidgetInputHandler_RequestCompositionUpdates_ParamsDataView(
      internal::WidgetInputHandler_RequestCompositionUpdates_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool immediate_request() const {
    return data_->immediate_request;
  }
  bool monitor_request() const {
    return data_->monitor_request;
  }
 private:
  internal::WidgetInputHandler_RequestCompositionUpdates_Params_Data* data_ = nullptr;
};

class WidgetInputHandler_DispatchEvent_ParamsDataView {
 public:
  WidgetInputHandler_DispatchEvent_ParamsDataView() {}

  WidgetInputHandler_DispatchEvent_ParamsDataView(
      internal::WidgetInputHandler_DispatchEvent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetEventDataView(
      EventDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEvent(UserType* output) {
    auto* pointer = data_->event.Get();
    return mojo::internal::Deserialize<::content::mojom::EventDataView>(
        pointer, output, context_);
  }
 private:
  internal::WidgetInputHandler_DispatchEvent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class WidgetInputHandler_DispatchEvent_ResponseParamsDataView {
 public:
  WidgetInputHandler_DispatchEvent_ResponseParamsDataView() {}

  WidgetInputHandler_DispatchEvent_ResponseParamsDataView(
      internal::WidgetInputHandler_DispatchEvent_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSource(UserType* output) const {
    auto data_value = data_->source;
    return mojo::internal::Deserialize<::content::mojom::InputEventAckSource>(
        data_value, output);
  }

  ::content::mojom::InputEventAckSource source() const {
    return static_cast<::content::mojom::InputEventAckSource>(data_->source);
  }
  inline void GetUpdatedLatencyDataView(
      ::ui::mojom::LatencyInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUpdatedLatency(UserType* output) {
    auto* pointer = data_->updated_latency.Get();
    return mojo::internal::Deserialize<::ui::mojom::LatencyInfoDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::content::mojom::InputEventAckState>(
        data_value, output);
  }

  ::content::mojom::InputEventAckState state() const {
    return static_cast<::content::mojom::InputEventAckState>(data_->state);
  }
  inline void GetOverscrollDataView(
      ::content::mojom::DidOverscrollParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOverscroll(UserType* output) {
    auto* pointer = data_->overscroll.Get();
    return mojo::internal::Deserialize<::content::mojom::DidOverscrollParamsDataView>(
        pointer, output, context_);
  }
  inline void GetTouchActionDataView(
      TouchActionOptionalDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTouchAction(UserType* output) {
    auto* pointer = data_->touch_action.Get();
    return mojo::internal::Deserialize<::content::mojom::TouchActionOptionalDataView>(
        pointer, output, context_);
  }
 private:
  internal::WidgetInputHandler_DispatchEvent_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class WidgetInputHandler_DispatchNonBlockingEvent_ParamsDataView {
 public:
  WidgetInputHandler_DispatchNonBlockingEvent_ParamsDataView() {}

  WidgetInputHandler_DispatchNonBlockingEvent_ParamsDataView(
      internal::WidgetInputHandler_DispatchNonBlockingEvent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetEventDataView(
      EventDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEvent(UserType* output) {
    auto* pointer = data_->event.Get();
    return mojo::internal::Deserialize<::content::mojom::EventDataView>(
        pointer, output, context_);
  }
 private:
  internal::WidgetInputHandler_DispatchNonBlockingEvent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class WidgetInputHandler_WaitForInputProcessed_ParamsDataView {
 public:
  WidgetInputHandler_WaitForInputProcessed_ParamsDataView() {}

  WidgetInputHandler_WaitForInputProcessed_ParamsDataView(
      internal::WidgetInputHandler_WaitForInputProcessed_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WidgetInputHandler_WaitForInputProcessed_Params_Data* data_ = nullptr;
};

class WidgetInputHandler_WaitForInputProcessed_ResponseParamsDataView {
 public:
  WidgetInputHandler_WaitForInputProcessed_ResponseParamsDataView() {}

  WidgetInputHandler_WaitForInputProcessed_ResponseParamsDataView(
      internal::WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::WidgetInputHandler_WaitForInputProcessed_ResponseParams_Data* data_ = nullptr;
};

class WidgetInputHandler_AttachSynchronousCompositor_ParamsDataView {
 public:
  WidgetInputHandler_AttachSynchronousCompositor_ParamsDataView() {}

  WidgetInputHandler_AttachSynchronousCompositor_ParamsDataView(
      internal::WidgetInputHandler_AttachSynchronousCompositor_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeControlHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::content::mojom::SynchronousCompositorControlHostInterfaceBase>>(
            &data_->control_host, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::content::mojom::SynchronousCompositorHostAssociatedPtrInfoDataView>(
            &data_->host, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeCompositorRequest() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::content::mojom::SynchronousCompositorAssociatedRequestDataView>(
            &data_->compositor_request, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::WidgetInputHandler_AttachSynchronousCompositor_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameInputHandler_SetCompositionFromExistingText_ParamsDataView {
 public:
  FrameInputHandler_SetCompositionFromExistingText_ParamsDataView() {}

  FrameInputHandler_SetCompositionFromExistingText_ParamsDataView(
      internal::FrameInputHandler_SetCompositionFromExistingText_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t start() const {
    return data_->start;
  }
  int32_t end() const {
    return data_->end;
  }
  inline void GetImeTextSpansDataView(
      mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImeTextSpans(UserType* output) {
    auto* pointer = data_->ime_text_spans.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>>(
        pointer, output, context_);
  }
 private:
  internal::FrameInputHandler_SetCompositionFromExistingText_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameInputHandler_ExtendSelectionAndDelete_ParamsDataView {
 public:
  FrameInputHandler_ExtendSelectionAndDelete_ParamsDataView() {}

  FrameInputHandler_ExtendSelectionAndDelete_ParamsDataView(
      internal::FrameInputHandler_ExtendSelectionAndDelete_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t before() const {
    return data_->before;
  }
  int32_t after() const {
    return data_->after;
  }
 private:
  internal::FrameInputHandler_ExtendSelectionAndDelete_Params_Data* data_ = nullptr;
};

class FrameInputHandler_DeleteSurroundingText_ParamsDataView {
 public:
  FrameInputHandler_DeleteSurroundingText_ParamsDataView() {}

  FrameInputHandler_DeleteSurroundingText_ParamsDataView(
      internal::FrameInputHandler_DeleteSurroundingText_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t before() const {
    return data_->before;
  }
  int32_t after() const {
    return data_->after;
  }
 private:
  internal::FrameInputHandler_DeleteSurroundingText_Params_Data* data_ = nullptr;
};

class FrameInputHandler_DeleteSurroundingTextInCodePoints_ParamsDataView {
 public:
  FrameInputHandler_DeleteSurroundingTextInCodePoints_ParamsDataView() {}

  FrameInputHandler_DeleteSurroundingTextInCodePoints_ParamsDataView(
      internal::FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t before() const {
    return data_->before;
  }
  int32_t after() const {
    return data_->after;
  }
 private:
  internal::FrameInputHandler_DeleteSurroundingTextInCodePoints_Params_Data* data_ = nullptr;
};

class FrameInputHandler_SetEditableSelectionOffsets_ParamsDataView {
 public:
  FrameInputHandler_SetEditableSelectionOffsets_ParamsDataView() {}

  FrameInputHandler_SetEditableSelectionOffsets_ParamsDataView(
      internal::FrameInputHandler_SetEditableSelectionOffsets_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t start() const {
    return data_->start;
  }
  int32_t end() const {
    return data_->end;
  }
 private:
  internal::FrameInputHandler_SetEditableSelectionOffsets_Params_Data* data_ = nullptr;
};

class FrameInputHandler_ExecuteEditCommand_ParamsDataView {
 public:
  FrameInputHandler_ExecuteEditCommand_ParamsDataView() {}

  FrameInputHandler_ExecuteEditCommand_ParamsDataView(
      internal::FrameInputHandler_ExecuteEditCommand_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCommandDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCommand(UserType* output) {
    auto* pointer = data_->command.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetValueDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameInputHandler_ExecuteEditCommand_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameInputHandler_Undo_ParamsDataView {
 public:
  FrameInputHandler_Undo_ParamsDataView() {}

  FrameInputHandler_Undo_ParamsDataView(
      internal::FrameInputHandler_Undo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_Undo_Params_Data* data_ = nullptr;
};

class FrameInputHandler_Redo_ParamsDataView {
 public:
  FrameInputHandler_Redo_ParamsDataView() {}

  FrameInputHandler_Redo_ParamsDataView(
      internal::FrameInputHandler_Redo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_Redo_Params_Data* data_ = nullptr;
};

class FrameInputHandler_Cut_ParamsDataView {
 public:
  FrameInputHandler_Cut_ParamsDataView() {}

  FrameInputHandler_Cut_ParamsDataView(
      internal::FrameInputHandler_Cut_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_Cut_Params_Data* data_ = nullptr;
};

class FrameInputHandler_Copy_ParamsDataView {
 public:
  FrameInputHandler_Copy_ParamsDataView() {}

  FrameInputHandler_Copy_ParamsDataView(
      internal::FrameInputHandler_Copy_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_Copy_Params_Data* data_ = nullptr;
};

class FrameInputHandler_CopyToFindPboard_ParamsDataView {
 public:
  FrameInputHandler_CopyToFindPboard_ParamsDataView() {}

  FrameInputHandler_CopyToFindPboard_ParamsDataView(
      internal::FrameInputHandler_CopyToFindPboard_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_CopyToFindPboard_Params_Data* data_ = nullptr;
};

class FrameInputHandler_Paste_ParamsDataView {
 public:
  FrameInputHandler_Paste_ParamsDataView() {}

  FrameInputHandler_Paste_ParamsDataView(
      internal::FrameInputHandler_Paste_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_Paste_Params_Data* data_ = nullptr;
};

class FrameInputHandler_PasteAndMatchStyle_ParamsDataView {
 public:
  FrameInputHandler_PasteAndMatchStyle_ParamsDataView() {}

  FrameInputHandler_PasteAndMatchStyle_ParamsDataView(
      internal::FrameInputHandler_PasteAndMatchStyle_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_PasteAndMatchStyle_Params_Data* data_ = nullptr;
};

class FrameInputHandler_Delete_ParamsDataView {
 public:
  FrameInputHandler_Delete_ParamsDataView() {}

  FrameInputHandler_Delete_ParamsDataView(
      internal::FrameInputHandler_Delete_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_Delete_Params_Data* data_ = nullptr;
};

class FrameInputHandler_SelectAll_ParamsDataView {
 public:
  FrameInputHandler_SelectAll_ParamsDataView() {}

  FrameInputHandler_SelectAll_ParamsDataView(
      internal::FrameInputHandler_SelectAll_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_SelectAll_Params_Data* data_ = nullptr;
};

class FrameInputHandler_CollapseSelection_ParamsDataView {
 public:
  FrameInputHandler_CollapseSelection_ParamsDataView() {}

  FrameInputHandler_CollapseSelection_ParamsDataView(
      internal::FrameInputHandler_CollapseSelection_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_CollapseSelection_Params_Data* data_ = nullptr;
};

class FrameInputHandler_Replace_ParamsDataView {
 public:
  FrameInputHandler_Replace_ParamsDataView() {}

  FrameInputHandler_Replace_ParamsDataView(
      internal::FrameInputHandler_Replace_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetWordDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWord(UserType* output) {
    auto* pointer = data_->word.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameInputHandler_Replace_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameInputHandler_ReplaceMisspelling_ParamsDataView {
 public:
  FrameInputHandler_ReplaceMisspelling_ParamsDataView() {}

  FrameInputHandler_ReplaceMisspelling_ParamsDataView(
      internal::FrameInputHandler_ReplaceMisspelling_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetWordDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWord(UserType* output) {
    auto* pointer = data_->word.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameInputHandler_ReplaceMisspelling_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameInputHandler_SelectRange_ParamsDataView {
 public:
  FrameInputHandler_SelectRange_ParamsDataView() {}

  FrameInputHandler_SelectRange_ParamsDataView(
      internal::FrameInputHandler_SelectRange_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetBaseDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBase(UserType* output) {
    auto* pointer = data_->base.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, context_);
  }
  inline void GetExtentDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadExtent(UserType* output) {
    auto* pointer = data_->extent.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameInputHandler_SelectRange_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameInputHandler_AdjustSelectionByCharacterOffset_ParamsDataView {
 public:
  FrameInputHandler_AdjustSelectionByCharacterOffset_ParamsDataView() {}

  FrameInputHandler_AdjustSelectionByCharacterOffset_ParamsDataView(
      internal::FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t start() const {
    return data_->start;
  }
  int32_t end() const {
    return data_->end;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBehavior(UserType* output) const {
    auto data_value = data_->behavior;
    return mojo::internal::Deserialize<::blink::mojom::SelectionMenuBehavior>(
        data_value, output);
  }

  ::blink::mojom::SelectionMenuBehavior behavior() const {
    return static_cast<::blink::mojom::SelectionMenuBehavior>(data_->behavior);
  }
 private:
  internal::FrameInputHandler_AdjustSelectionByCharacterOffset_Params_Data* data_ = nullptr;
};

class FrameInputHandler_SelectWordAroundCaret_ParamsDataView {
 public:
  FrameInputHandler_SelectWordAroundCaret_ParamsDataView() {}

  FrameInputHandler_SelectWordAroundCaret_ParamsDataView(
      internal::FrameInputHandler_SelectWordAroundCaret_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameInputHandler_SelectWordAroundCaret_Params_Data* data_ = nullptr;
};

class FrameInputHandler_SelectWordAroundCaret_ResponseParamsDataView {
 public:
  FrameInputHandler_SelectWordAroundCaret_ResponseParamsDataView() {}

  FrameInputHandler_SelectWordAroundCaret_ResponseParamsDataView(
      internal::FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool did_select() const {
    return data_->did_select;
  }
  int32_t start_adjust() const {
    return data_->start_adjust;
  }
  int32_t end_adjust() const {
    return data_->end_adjust;
  }
 private:
  internal::FrameInputHandler_SelectWordAroundCaret_ResponseParams_Data* data_ = nullptr;
};

class FrameInputHandler_MoveRangeSelectionExtent_ParamsDataView {
 public:
  FrameInputHandler_MoveRangeSelectionExtent_ParamsDataView() {}

  FrameInputHandler_MoveRangeSelectionExtent_ParamsDataView(
      internal::FrameInputHandler_MoveRangeSelectionExtent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetExtentDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadExtent(UserType* output) {
    auto* pointer = data_->extent.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameInputHandler_MoveRangeSelectionExtent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameInputHandler_ScrollFocusedEditableNodeIntoRect_ParamsDataView {
 public:
  FrameInputHandler_ScrollFocusedEditableNodeIntoRect_ParamsDataView() {}

  FrameInputHandler_ScrollFocusedEditableNodeIntoRect_ParamsDataView(
      internal::FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRect(UserType* output) {
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameInputHandler_ScrollFocusedEditableNodeIntoRect_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameInputHandler_MoveCaret_ParamsDataView {
 public:
  FrameInputHandler_MoveCaret_ParamsDataView() {}

  FrameInputHandler_MoveCaret_ParamsDataView(
      internal::FrameInputHandler_MoveCaret_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPoint(UserType* output) {
    auto* pointer = data_->point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameInputHandler_MoveCaret_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameInputHandler_GetWidgetInputHandler_ParamsDataView {
 public:
  FrameInputHandler_GetWidgetInputHandler_ParamsDataView() {}

  FrameInputHandler_GetWidgetInputHandler_ParamsDataView(
      internal::FrameInputHandler_GetWidgetInputHandler_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeInterfaceRequest() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::content::mojom::WidgetInputHandlerAssociatedRequestDataView>(
            &data_->interface_request, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::content::mojom::WidgetInputHandlerHostInterfaceBase>>(
            &data_->host, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameInputHandler_GetWidgetInputHandler_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};










inline void WidgetInputHandlerHost_DidOverscroll_ParamsDataView::GetParamsDataView(
    ::content::mojom::DidOverscrollParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::content::mojom::DidOverscrollParamsDataView(pointer, context_);
}






inline void WidgetInputHandlerHost_ImeCompositionRangeChanged_ParamsDataView::GetRangeDataView(
    ::gfx::mojom::RangeDataView* output) {
  auto pointer = data_->range.Get();
  *output = ::gfx::mojom::RangeDataView(pointer, context_);
}
inline void WidgetInputHandlerHost_ImeCompositionRangeChanged_ParamsDataView::GetBoundsDataView(
    mojo::ArrayDataView<::gfx::mojom::RectDataView>* output) {
  auto pointer = data_->bounds.Get();
  *output = mojo::ArrayDataView<::gfx::mojom::RectDataView>(pointer, context_);
}








inline void WidgetInputHandler_SetEditCommandsForNextKeyEvent_ParamsDataView::GetCommandsDataView(
    mojo::ArrayDataView<::content::mojom::EditCommandDataView>* output) {
  auto pointer = data_->commands.Get();
  *output = mojo::ArrayDataView<::content::mojom::EditCommandDataView>(pointer, context_);
}






inline void WidgetInputHandler_ImeSetComposition_ParamsDataView::GetTextDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->text.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void WidgetInputHandler_ImeSetComposition_ParamsDataView::GetImeTextSpansDataView(
    mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>* output) {
  auto pointer = data_->ime_text_spans.Get();
  *output = mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>(pointer, context_);
}
inline void WidgetInputHandler_ImeSetComposition_ParamsDataView::GetRangeDataView(
    ::gfx::mojom::RangeDataView* output) {
  auto pointer = data_->range.Get();
  *output = ::gfx::mojom::RangeDataView(pointer, context_);
}


inline void WidgetInputHandler_ImeCommitText_ParamsDataView::GetTextDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->text.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void WidgetInputHandler_ImeCommitText_ParamsDataView::GetImeTextSpansDataView(
    mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>* output) {
  auto pointer = data_->ime_text_spans.Get();
  *output = mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>(pointer, context_);
}
inline void WidgetInputHandler_ImeCommitText_ParamsDataView::GetRangeDataView(
    ::gfx::mojom::RangeDataView* output) {
  auto pointer = data_->range.Get();
  *output = ::gfx::mojom::RangeDataView(pointer, context_);
}










inline void WidgetInputHandler_DispatchEvent_ParamsDataView::GetEventDataView(
    EventDataView* output) {
  auto pointer = data_->event.Get();
  *output = EventDataView(pointer, context_);
}


inline void WidgetInputHandler_DispatchEvent_ResponseParamsDataView::GetUpdatedLatencyDataView(
    ::ui::mojom::LatencyInfoDataView* output) {
  auto pointer = data_->updated_latency.Get();
  *output = ::ui::mojom::LatencyInfoDataView(pointer, context_);
}
inline void WidgetInputHandler_DispatchEvent_ResponseParamsDataView::GetOverscrollDataView(
    ::content::mojom::DidOverscrollParamsDataView* output) {
  auto pointer = data_->overscroll.Get();
  *output = ::content::mojom::DidOverscrollParamsDataView(pointer, context_);
}
inline void WidgetInputHandler_DispatchEvent_ResponseParamsDataView::GetTouchActionDataView(
    TouchActionOptionalDataView* output) {
  auto pointer = data_->touch_action.Get();
  *output = TouchActionOptionalDataView(pointer, context_);
}


inline void WidgetInputHandler_DispatchNonBlockingEvent_ParamsDataView::GetEventDataView(
    EventDataView* output) {
  auto pointer = data_->event.Get();
  *output = EventDataView(pointer, context_);
}








inline void FrameInputHandler_SetCompositionFromExistingText_ParamsDataView::GetImeTextSpansDataView(
    mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>* output) {
  auto pointer = data_->ime_text_spans.Get();
  *output = mojo::ArrayDataView<::ui::mojom::ImeTextSpanDataView>(pointer, context_);
}










inline void FrameInputHandler_ExecuteEditCommand_ParamsDataView::GetCommandDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->command.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void FrameInputHandler_ExecuteEditCommand_ParamsDataView::GetValueDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->value.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}






















inline void FrameInputHandler_Replace_ParamsDataView::GetWordDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->word.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void FrameInputHandler_ReplaceMisspelling_ParamsDataView::GetWordDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->word.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void FrameInputHandler_SelectRange_ParamsDataView::GetBaseDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->base.Get();
  *output = ::gfx::mojom::PointDataView(pointer, context_);
}
inline void FrameInputHandler_SelectRange_ParamsDataView::GetExtentDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->extent.Get();
  *output = ::gfx::mojom::PointDataView(pointer, context_);
}








inline void FrameInputHandler_MoveRangeSelectionExtent_ParamsDataView::GetExtentDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->extent.Get();
  *output = ::gfx::mojom::PointDataView(pointer, context_);
}


inline void FrameInputHandler_ScrollFocusedEditableNodeIntoRect_ParamsDataView::GetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, context_);
}


inline void FrameInputHandler_MoveCaret_ParamsDataView::GetPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // CONTENT_COMMON_INPUT_INPUT_HANDLER_MOJOM_PARAMS_DATA_H_