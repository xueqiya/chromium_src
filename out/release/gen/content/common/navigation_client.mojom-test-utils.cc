// content/common/navigation_client.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "content/common/navigation_client.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "services/network/public/mojom/host_resolver.mojom.h"
#include "services/network/public/mojom/url_response_head.mojom.h"
#include "services/network/public/mojom/url_loader.mojom.h"
#include "services/network/public/mojom/url_loader_factory.mojom.h"
#include "content/common/frame_messages.mojom.h"
#include "content/common/navigation_params.mojom.h"
#include "content/public/common/transferrable_url_loader.mojom.h"
#include "mojo/public/mojom/base/unguessable_token.mojom.h"
#include "url/mojom/url.mojom.h"
#include "third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom.h"
#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_provider.mojom.h"
#include "third_party/blink/public/mojom/commit_result/commit_result.mojom.h"


#ifndef CONTENT_COMMON_NAVIGATION_CLIENT_MOJOM_JUMBO_H_
#define CONTENT_COMMON_NAVIGATION_CLIENT_MOJOM_JUMBO_H_
#include "content/common/frame_messages.h"
#include "content/common/resource_messages.h"
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/file_path_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "services/network/public/cpp/host_resolver_mojom_traits.h"
#include "services/network/public/cpp/ip_address_mojom_traits.h"
#include "services/network/public/cpp/ip_endpoint_mojom_traits.h"
#include "services/network/public/cpp/load_timing_info_mojom_traits.h"
#include "services/network/public/cpp/net_ipc_param_traits.h"
#include "services/network/public/cpp/network_ipc_param_traits.h"
#include "services/network/public/cpp/network_isolation_key_mojom_traits.h"
#include "services/network/public/cpp/network_param_mojom_traits.h"
#include "services/network/public/cpp/url_request_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/mojo_host_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/proxy_resolver_mojom_traits.h"
#include "third_party/blink/common/feature_policy/feature_policy_mojom_traits.h"
#include "third_party/blink/common/feature_policy/policy_value_mojom_traits.h"
#include "third_party/blink/common/frame/frame_policy_mojom_traits.h"
#include "third_party/blink/public/common/loader/url_loader_factory_bundle_mojom_traits.h"
#include "url/mojom/origin_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif


namespace content {
namespace mojom {


void NavigationClientInterceptorForTesting::CommitNavigation(::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, ::network::mojom::URLResponseHeadPtr response_head, mojo::ScopedDataPipeConsumerHandle response_body, ::network::mojom::URLLoaderClientEndpointsPtr url_loader_client_endpoints, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, base::Optional<std::vector<::content::mojom::TransferrableURLLoaderPtr>> subresource_overrides, ::blink::mojom::ControllerServiceWorkerInfoPtr controller_service_worker_info, ::blink::mojom::ServiceWorkerProviderInfoForClientPtr provider_info, mojo::PendingRemote<::network::mojom::URLLoaderFactory> prefetch_loader_factory, const ::base::UnguessableToken& devtools_navigation_token, CommitNavigationCallback callback) {
  GetForwardingInterface()->CommitNavigation(std::move(common_params), std::move(request_params), std::move(response_head), std::move(response_body), std::move(url_loader_client_endpoints), std::move(subresource_loader_factories), std::move(subresource_overrides), std::move(controller_service_worker_info), std::move(provider_info), std::move(prefetch_loader_factory), std::move(devtools_navigation_token), std::move(callback));
}
void NavigationClientInterceptorForTesting::CommitFailedNavigation(::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, bool has_stale_copy_in_cache, int32_t error_code, const ::net::ResolveErrorInfo& resolve_error_info, const base::Optional<std::string>& error_page_content, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, CommitFailedNavigationCallback callback) {
  GetForwardingInterface()->CommitFailedNavigation(std::move(common_params), std::move(request_params), std::move(has_stale_copy_in_cache), std::move(error_code), std::move(resolve_error_info), std::move(error_page_content), std::move(subresource_loader_factories), std::move(callback));
}
NavigationClientAsyncWaiter::NavigationClientAsyncWaiter(
    NavigationClient* proxy) : proxy_(proxy) {}

NavigationClientAsyncWaiter::~NavigationClientAsyncWaiter() = default;

void NavigationClientAsyncWaiter::CommitNavigation(
    ::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, ::network::mojom::URLResponseHeadPtr response_head, mojo::ScopedDataPipeConsumerHandle response_body, ::network::mojom::URLLoaderClientEndpointsPtr url_loader_client_endpoints, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, base::Optional<std::vector<::content::mojom::TransferrableURLLoaderPtr>> subresource_overrides, ::blink::mojom::ControllerServiceWorkerInfoPtr controller_service_worker_info, ::blink::mojom::ServiceWorkerProviderInfoForClientPtr provider_info, mojo::PendingRemote<::network::mojom::URLLoaderFactory> prefetch_loader_factory, const ::base::UnguessableToken& devtools_navigation_token, ::std::unique_ptr<::FrameHostMsg_DidCommitProvisionalLoad_Params>* out_params, ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr* out_interface_params) {
  base::RunLoop loop;
  proxy_->CommitNavigation(std::move(common_params),std::move(request_params),std::move(response_head),std::move(response_body),std::move(url_loader_client_endpoints),std::move(subresource_loader_factories),std::move(subresource_overrides),std::move(controller_service_worker_info),std::move(provider_info),std::move(prefetch_loader_factory),std::move(devtools_navigation_token),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::std::unique_ptr<::FrameHostMsg_DidCommitProvisionalLoad_Params>* out_params
,
             ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr* out_interface_params
,
             ::std::unique_ptr<::FrameHostMsg_DidCommitProvisionalLoad_Params> params,
             ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr interface_params) {*out_params = std::move(params);*out_interface_params = std::move(interface_params);
            loop->Quit();
          },
          &loop,
          out_params,
          out_interface_params));
  loop.Run();
}
void NavigationClientAsyncWaiter::CommitFailedNavigation(
    ::content::mojom::CommonNavigationParamsPtr common_params, ::content::mojom::CommitNavigationParamsPtr request_params, bool has_stale_copy_in_cache, int32_t error_code, const ::net::ResolveErrorInfo& resolve_error_info, const base::Optional<std::string>& error_page_content, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, ::std::unique_ptr<::FrameHostMsg_DidCommitProvisionalLoad_Params>* out_params, ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr* out_interface_params) {
  base::RunLoop loop;
  proxy_->CommitFailedNavigation(std::move(common_params),std::move(request_params),std::move(has_stale_copy_in_cache),std::move(error_code),std::move(resolve_error_info),std::move(error_page_content),std::move(subresource_loader_factories),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::std::unique_ptr<::FrameHostMsg_DidCommitProvisionalLoad_Params>* out_params
,
             ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr* out_interface_params
,
             ::std::unique_ptr<::FrameHostMsg_DidCommitProvisionalLoad_Params> params,
             ::content::mojom::DidCommitProvisionalLoadInterfaceParamsPtr interface_params) {*out_params = std::move(params);*out_interface_params = std::move(interface_params);
            loop->Quit();
          },
          &loop,
          out_params,
          out_interface_params));
  loop.Run();
}





}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif