// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google_streaming_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_5fstreaming_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_5fstreaming_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_5fstreaming_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_5fstreaming_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace content {
namespace proto {
class SpeechRecognitionAlternative;
class SpeechRecognitionAlternativeDefaultTypeInternal;
extern SpeechRecognitionAlternativeDefaultTypeInternal _SpeechRecognitionAlternative_default_instance_;
class SpeechRecognitionEvent;
class SpeechRecognitionEventDefaultTypeInternal;
extern SpeechRecognitionEventDefaultTypeInternal _SpeechRecognitionEvent_default_instance_;
class SpeechRecognitionResult;
class SpeechRecognitionResultDefaultTypeInternal;
extern SpeechRecognitionResultDefaultTypeInternal _SpeechRecognitionResult_default_instance_;
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::proto::SpeechRecognitionAlternative* Arena::CreateMaybeMessage<::content::proto::SpeechRecognitionAlternative>(Arena*);
template<> ::content::proto::SpeechRecognitionEvent* Arena::CreateMaybeMessage<::content::proto::SpeechRecognitionEvent>(Arena*);
template<> ::content::proto::SpeechRecognitionResult* Arena::CreateMaybeMessage<::content::proto::SpeechRecognitionResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {
namespace proto {

enum SpeechRecognitionEvent_StatusCode : int {
  SpeechRecognitionEvent_StatusCode_STATUS_SUCCESS = 0,
  SpeechRecognitionEvent_StatusCode_STATUS_NO_SPEECH = 1,
  SpeechRecognitionEvent_StatusCode_STATUS_ABORTED = 2,
  SpeechRecognitionEvent_StatusCode_STATUS_AUDIO_CAPTURE = 3,
  SpeechRecognitionEvent_StatusCode_STATUS_NETWORK = 4,
  SpeechRecognitionEvent_StatusCode_STATUS_NOT_ALLOWED = 5,
  SpeechRecognitionEvent_StatusCode_STATUS_SERVICE_NOT_ALLOWED = 6,
  SpeechRecognitionEvent_StatusCode_STATUS_BAD_GRAMMAR = 7,
  SpeechRecognitionEvent_StatusCode_STATUS_LANGUAGE_NOT_SUPPORTED = 8
};
bool SpeechRecognitionEvent_StatusCode_IsValid(int value);
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent_StatusCode_StatusCode_MIN = SpeechRecognitionEvent_StatusCode_STATUS_SUCCESS;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent_StatusCode_StatusCode_MAX = SpeechRecognitionEvent_StatusCode_STATUS_LANGUAGE_NOT_SUPPORTED;
constexpr int SpeechRecognitionEvent_StatusCode_StatusCode_ARRAYSIZE = SpeechRecognitionEvent_StatusCode_StatusCode_MAX + 1;

const std::string& SpeechRecognitionEvent_StatusCode_Name(SpeechRecognitionEvent_StatusCode value);
template<typename T>
inline const std::string& SpeechRecognitionEvent_StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpeechRecognitionEvent_StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpeechRecognitionEvent_StatusCode_Name.");
  return SpeechRecognitionEvent_StatusCode_Name(static_cast<SpeechRecognitionEvent_StatusCode>(enum_t_value));
}
bool SpeechRecognitionEvent_StatusCode_Parse(
    const std::string& name, SpeechRecognitionEvent_StatusCode* value);
enum SpeechRecognitionEvent_EndpointerEventType : int {
  SpeechRecognitionEvent_EndpointerEventType_START_OF_SPEECH = 0,
  SpeechRecognitionEvent_EndpointerEventType_END_OF_SPEECH = 1,
  SpeechRecognitionEvent_EndpointerEventType_END_OF_AUDIO = 2,
  SpeechRecognitionEvent_EndpointerEventType_END_OF_UTTERANCE = 3
};
bool SpeechRecognitionEvent_EndpointerEventType_IsValid(int value);
constexpr SpeechRecognitionEvent_EndpointerEventType SpeechRecognitionEvent_EndpointerEventType_EndpointerEventType_MIN = SpeechRecognitionEvent_EndpointerEventType_START_OF_SPEECH;
constexpr SpeechRecognitionEvent_EndpointerEventType SpeechRecognitionEvent_EndpointerEventType_EndpointerEventType_MAX = SpeechRecognitionEvent_EndpointerEventType_END_OF_UTTERANCE;
constexpr int SpeechRecognitionEvent_EndpointerEventType_EndpointerEventType_ARRAYSIZE = SpeechRecognitionEvent_EndpointerEventType_EndpointerEventType_MAX + 1;

const std::string& SpeechRecognitionEvent_EndpointerEventType_Name(SpeechRecognitionEvent_EndpointerEventType value);
template<typename T>
inline const std::string& SpeechRecognitionEvent_EndpointerEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpeechRecognitionEvent_EndpointerEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpeechRecognitionEvent_EndpointerEventType_Name.");
  return SpeechRecognitionEvent_EndpointerEventType_Name(static_cast<SpeechRecognitionEvent_EndpointerEventType>(enum_t_value));
}
bool SpeechRecognitionEvent_EndpointerEventType_Parse(
    const std::string& name, SpeechRecognitionEvent_EndpointerEventType* value);
// ===================================================================

class SpeechRecognitionEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.SpeechRecognitionEvent) */ {
 public:
  SpeechRecognitionEvent();
  virtual ~SpeechRecognitionEvent();

  SpeechRecognitionEvent(const SpeechRecognitionEvent& from);
  SpeechRecognitionEvent(SpeechRecognitionEvent&& from) noexcept
    : SpeechRecognitionEvent() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionEvent& operator=(const SpeechRecognitionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionEvent& operator=(SpeechRecognitionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SpeechRecognitionEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeechRecognitionEvent* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionEvent*>(
               &_SpeechRecognitionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpeechRecognitionEvent& a, SpeechRecognitionEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechRecognitionEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeechRecognitionEvent* New() const final {
    return CreateMaybeMessage<SpeechRecognitionEvent>(nullptr);
  }

  SpeechRecognitionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeechRecognitionEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SpeechRecognitionEvent& from);
  void MergeFrom(const SpeechRecognitionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpeechRecognitionEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.SpeechRecognitionEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SpeechRecognitionEvent_StatusCode StatusCode;
  static constexpr StatusCode STATUS_SUCCESS =
    SpeechRecognitionEvent_StatusCode_STATUS_SUCCESS;
  static constexpr StatusCode STATUS_NO_SPEECH =
    SpeechRecognitionEvent_StatusCode_STATUS_NO_SPEECH;
  static constexpr StatusCode STATUS_ABORTED =
    SpeechRecognitionEvent_StatusCode_STATUS_ABORTED;
  static constexpr StatusCode STATUS_AUDIO_CAPTURE =
    SpeechRecognitionEvent_StatusCode_STATUS_AUDIO_CAPTURE;
  static constexpr StatusCode STATUS_NETWORK =
    SpeechRecognitionEvent_StatusCode_STATUS_NETWORK;
  static constexpr StatusCode STATUS_NOT_ALLOWED =
    SpeechRecognitionEvent_StatusCode_STATUS_NOT_ALLOWED;
  static constexpr StatusCode STATUS_SERVICE_NOT_ALLOWED =
    SpeechRecognitionEvent_StatusCode_STATUS_SERVICE_NOT_ALLOWED;
  static constexpr StatusCode STATUS_BAD_GRAMMAR =
    SpeechRecognitionEvent_StatusCode_STATUS_BAD_GRAMMAR;
  static constexpr StatusCode STATUS_LANGUAGE_NOT_SUPPORTED =
    SpeechRecognitionEvent_StatusCode_STATUS_LANGUAGE_NOT_SUPPORTED;
  static inline bool StatusCode_IsValid(int value) {
    return SpeechRecognitionEvent_StatusCode_IsValid(value);
  }
  static constexpr StatusCode StatusCode_MIN =
    SpeechRecognitionEvent_StatusCode_StatusCode_MIN;
  static constexpr StatusCode StatusCode_MAX =
    SpeechRecognitionEvent_StatusCode_StatusCode_MAX;
  static constexpr int StatusCode_ARRAYSIZE =
    SpeechRecognitionEvent_StatusCode_StatusCode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& StatusCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusCode_Name.");
    return SpeechRecognitionEvent_StatusCode_Name(enum_t_value);
  }
  static inline bool StatusCode_Parse(const std::string& name,
      StatusCode* value) {
    return SpeechRecognitionEvent_StatusCode_Parse(name, value);
  }

  typedef SpeechRecognitionEvent_EndpointerEventType EndpointerEventType;
  static constexpr EndpointerEventType START_OF_SPEECH =
    SpeechRecognitionEvent_EndpointerEventType_START_OF_SPEECH;
  static constexpr EndpointerEventType END_OF_SPEECH =
    SpeechRecognitionEvent_EndpointerEventType_END_OF_SPEECH;
  static constexpr EndpointerEventType END_OF_AUDIO =
    SpeechRecognitionEvent_EndpointerEventType_END_OF_AUDIO;
  static constexpr EndpointerEventType END_OF_UTTERANCE =
    SpeechRecognitionEvent_EndpointerEventType_END_OF_UTTERANCE;
  static inline bool EndpointerEventType_IsValid(int value) {
    return SpeechRecognitionEvent_EndpointerEventType_IsValid(value);
  }
  static constexpr EndpointerEventType EndpointerEventType_MIN =
    SpeechRecognitionEvent_EndpointerEventType_EndpointerEventType_MIN;
  static constexpr EndpointerEventType EndpointerEventType_MAX =
    SpeechRecognitionEvent_EndpointerEventType_EndpointerEventType_MAX;
  static constexpr int EndpointerEventType_ARRAYSIZE =
    SpeechRecognitionEvent_EndpointerEventType_EndpointerEventType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EndpointerEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EndpointerEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EndpointerEventType_Name.");
    return SpeechRecognitionEvent_EndpointerEventType_Name(enum_t_value);
  }
  static inline bool EndpointerEventType_Parse(const std::string& name,
      EndpointerEventType* value) {
    return SpeechRecognitionEvent_EndpointerEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kStatusFieldNumber = 1,
    kEndpointFieldNumber = 4,
  };
  // repeated .content.proto.SpeechRecognitionResult result = 2;
  int result_size() const;
  void clear_result();
  ::content::proto::SpeechRecognitionResult* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SpeechRecognitionResult >*
      mutable_result();
  const ::content::proto::SpeechRecognitionResult& result(int index) const;
  ::content::proto::SpeechRecognitionResult* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SpeechRecognitionResult >&
      result() const;

  // optional .content.proto.SpeechRecognitionEvent.StatusCode status = 1 [default = STATUS_SUCCESS];
  bool has_status() const;
  void clear_status();
  ::content::proto::SpeechRecognitionEvent_StatusCode status() const;
  void set_status(::content::proto::SpeechRecognitionEvent_StatusCode value);

  // optional .content.proto.SpeechRecognitionEvent.EndpointerEventType endpoint = 4;
  bool has_endpoint() const;
  void clear_endpoint();
  ::content::proto::SpeechRecognitionEvent_EndpointerEventType endpoint() const;
  void set_endpoint(::content::proto::SpeechRecognitionEvent_EndpointerEventType value);

  // @@protoc_insertion_point(class_scope:content.proto.SpeechRecognitionEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SpeechRecognitionResult > result_;
  int status_;
  int endpoint_;
  friend struct ::TableStruct_google_5fstreaming_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SpeechRecognitionResult :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.SpeechRecognitionResult) */ {
 public:
  SpeechRecognitionResult();
  virtual ~SpeechRecognitionResult();

  SpeechRecognitionResult(const SpeechRecognitionResult& from);
  SpeechRecognitionResult(SpeechRecognitionResult&& from) noexcept
    : SpeechRecognitionResult() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionResult& operator=(const SpeechRecognitionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionResult& operator=(SpeechRecognitionResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SpeechRecognitionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeechRecognitionResult* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionResult*>(
               &_SpeechRecognitionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpeechRecognitionResult& a, SpeechRecognitionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechRecognitionResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeechRecognitionResult* New() const final {
    return CreateMaybeMessage<SpeechRecognitionResult>(nullptr);
  }

  SpeechRecognitionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeechRecognitionResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SpeechRecognitionResult& from);
  void MergeFrom(const SpeechRecognitionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpeechRecognitionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.SpeechRecognitionResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlternativeFieldNumber = 1,
    kFinalFieldNumber = 2,
    kStabilityFieldNumber = 3,
  };
  // repeated .content.proto.SpeechRecognitionAlternative alternative = 1;
  int alternative_size() const;
  void clear_alternative();
  ::content::proto::SpeechRecognitionAlternative* mutable_alternative(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SpeechRecognitionAlternative >*
      mutable_alternative();
  const ::content::proto::SpeechRecognitionAlternative& alternative(int index) const;
  ::content::proto::SpeechRecognitionAlternative* add_alternative();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SpeechRecognitionAlternative >&
      alternative() const;

  // optional bool final = 2 [default = false];
  bool has_final() const;
  void clear_final();
  bool final() const;
  void set_final(bool value);

  // optional float stability = 3;
  bool has_stability() const;
  void clear_stability();
  float stability() const;
  void set_stability(float value);

  // @@protoc_insertion_point(class_scope:content.proto.SpeechRecognitionResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SpeechRecognitionAlternative > alternative_;
  bool final_;
  float stability_;
  friend struct ::TableStruct_google_5fstreaming_5fapi_2eproto;
};
// -------------------------------------------------------------------

class SpeechRecognitionAlternative :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.SpeechRecognitionAlternative) */ {
 public:
  SpeechRecognitionAlternative();
  virtual ~SpeechRecognitionAlternative();

  SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from);
  SpeechRecognitionAlternative(SpeechRecognitionAlternative&& from) noexcept
    : SpeechRecognitionAlternative() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionAlternative& operator=(const SpeechRecognitionAlternative& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionAlternative& operator=(SpeechRecognitionAlternative&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SpeechRecognitionAlternative& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeechRecognitionAlternative* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionAlternative*>(
               &_SpeechRecognitionAlternative_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpeechRecognitionAlternative& a, SpeechRecognitionAlternative& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechRecognitionAlternative* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeechRecognitionAlternative* New() const final {
    return CreateMaybeMessage<SpeechRecognitionAlternative>(nullptr);
  }

  SpeechRecognitionAlternative* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeechRecognitionAlternative>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SpeechRecognitionAlternative& from);
  void MergeFrom(const SpeechRecognitionAlternative& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpeechRecognitionAlternative* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.SpeechRecognitionAlternative";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // optional string transcript = 1;
  bool has_transcript() const;
  void clear_transcript();
  const std::string& transcript() const;
  void set_transcript(const std::string& value);
  void set_transcript(std::string&& value);
  void set_transcript(const char* value);
  void set_transcript(const char* value, size_t size);
  std::string* mutable_transcript();
  std::string* release_transcript();
  void set_allocated_transcript(std::string* transcript);

  // optional float confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:content.proto.SpeechRecognitionAlternative)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_;
  float confidence_;
  friend struct ::TableStruct_google_5fstreaming_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeechRecognitionEvent

// optional .content.proto.SpeechRecognitionEvent.StatusCode status = 1 [default = STATUS_SUCCESS];
inline bool SpeechRecognitionEvent::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeechRecognitionEvent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::content::proto::SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::status() const {
  // @@protoc_insertion_point(field_get:content.proto.SpeechRecognitionEvent.status)
  return static_cast< ::content::proto::SpeechRecognitionEvent_StatusCode >(status_);
}
inline void SpeechRecognitionEvent::set_status(::content::proto::SpeechRecognitionEvent_StatusCode value) {
  assert(::content::proto::SpeechRecognitionEvent_StatusCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
  // @@protoc_insertion_point(field_set:content.proto.SpeechRecognitionEvent.status)
}

// repeated .content.proto.SpeechRecognitionResult result = 2;
inline int SpeechRecognitionEvent::result_size() const {
  return result_.size();
}
inline void SpeechRecognitionEvent::clear_result() {
  result_.Clear();
}
inline ::content::proto::SpeechRecognitionResult* SpeechRecognitionEvent::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.SpeechRecognitionEvent.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SpeechRecognitionResult >*
SpeechRecognitionEvent::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.SpeechRecognitionEvent.result)
  return &result_;
}
inline const ::content::proto::SpeechRecognitionResult& SpeechRecognitionEvent::result(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.SpeechRecognitionEvent.result)
  return result_.Get(index);
}
inline ::content::proto::SpeechRecognitionResult* SpeechRecognitionEvent::add_result() {
  // @@protoc_insertion_point(field_add:content.proto.SpeechRecognitionEvent.result)
  return result_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SpeechRecognitionResult >&
SpeechRecognitionEvent::result() const {
  // @@protoc_insertion_point(field_list:content.proto.SpeechRecognitionEvent.result)
  return result_;
}

// optional .content.proto.SpeechRecognitionEvent.EndpointerEventType endpoint = 4;
inline bool SpeechRecognitionEvent::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeechRecognitionEvent::clear_endpoint() {
  endpoint_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::content::proto::SpeechRecognitionEvent_EndpointerEventType SpeechRecognitionEvent::endpoint() const {
  // @@protoc_insertion_point(field_get:content.proto.SpeechRecognitionEvent.endpoint)
  return static_cast< ::content::proto::SpeechRecognitionEvent_EndpointerEventType >(endpoint_);
}
inline void SpeechRecognitionEvent::set_endpoint(::content::proto::SpeechRecognitionEvent_EndpointerEventType value) {
  assert(::content::proto::SpeechRecognitionEvent_EndpointerEventType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  endpoint_ = value;
  // @@protoc_insertion_point(field_set:content.proto.SpeechRecognitionEvent.endpoint)
}

// -------------------------------------------------------------------

// SpeechRecognitionResult

// repeated .content.proto.SpeechRecognitionAlternative alternative = 1;
inline int SpeechRecognitionResult::alternative_size() const {
  return alternative_.size();
}
inline void SpeechRecognitionResult::clear_alternative() {
  alternative_.Clear();
}
inline ::content::proto::SpeechRecognitionAlternative* SpeechRecognitionResult::mutable_alternative(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.SpeechRecognitionResult.alternative)
  return alternative_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SpeechRecognitionAlternative >*
SpeechRecognitionResult::mutable_alternative() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.SpeechRecognitionResult.alternative)
  return &alternative_;
}
inline const ::content::proto::SpeechRecognitionAlternative& SpeechRecognitionResult::alternative(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.SpeechRecognitionResult.alternative)
  return alternative_.Get(index);
}
inline ::content::proto::SpeechRecognitionAlternative* SpeechRecognitionResult::add_alternative() {
  // @@protoc_insertion_point(field_add:content.proto.SpeechRecognitionResult.alternative)
  return alternative_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SpeechRecognitionAlternative >&
SpeechRecognitionResult::alternative() const {
  // @@protoc_insertion_point(field_list:content.proto.SpeechRecognitionResult.alternative)
  return alternative_;
}

// optional bool final = 2 [default = false];
inline bool SpeechRecognitionResult::has_final() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeechRecognitionResult::clear_final() {
  final_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SpeechRecognitionResult::final() const {
  // @@protoc_insertion_point(field_get:content.proto.SpeechRecognitionResult.final)
  return final_;
}
inline void SpeechRecognitionResult::set_final(bool value) {
  _has_bits_[0] |= 0x00000001u;
  final_ = value;
  // @@protoc_insertion_point(field_set:content.proto.SpeechRecognitionResult.final)
}

// optional float stability = 3;
inline bool SpeechRecognitionResult::has_stability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeechRecognitionResult::clear_stability() {
  stability_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SpeechRecognitionResult::stability() const {
  // @@protoc_insertion_point(field_get:content.proto.SpeechRecognitionResult.stability)
  return stability_;
}
inline void SpeechRecognitionResult::set_stability(float value) {
  _has_bits_[0] |= 0x00000002u;
  stability_ = value;
  // @@protoc_insertion_point(field_set:content.proto.SpeechRecognitionResult.stability)
}

// -------------------------------------------------------------------

// SpeechRecognitionAlternative

// optional string transcript = 1;
inline bool SpeechRecognitionAlternative::has_transcript() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeechRecognitionAlternative::clear_transcript() {
  transcript_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpeechRecognitionAlternative::transcript() const {
  // @@protoc_insertion_point(field_get:content.proto.SpeechRecognitionAlternative.transcript)
  return transcript_.GetNoArena();
}
inline void SpeechRecognitionAlternative::set_transcript(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  transcript_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.SpeechRecognitionAlternative.transcript)
}
inline void SpeechRecognitionAlternative::set_transcript(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  transcript_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.SpeechRecognitionAlternative.transcript)
}
inline void SpeechRecognitionAlternative::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  transcript_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.SpeechRecognitionAlternative.transcript)
}
inline void SpeechRecognitionAlternative::set_transcript(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  transcript_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.SpeechRecognitionAlternative.transcript)
}
inline std::string* SpeechRecognitionAlternative::mutable_transcript() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.SpeechRecognitionAlternative.transcript)
  return transcript_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpeechRecognitionAlternative::release_transcript() {
  // @@protoc_insertion_point(field_release:content.proto.SpeechRecognitionAlternative.transcript)
  if (!has_transcript()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return transcript_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpeechRecognitionAlternative::set_allocated_transcript(std::string* transcript) {
  if (transcript != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transcript_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript);
  // @@protoc_insertion_point(field_set_allocated:content.proto.SpeechRecognitionAlternative.transcript)
}

// optional float confidence = 2;
inline bool SpeechRecognitionAlternative::has_confidence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeechRecognitionAlternative::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SpeechRecognitionAlternative::confidence() const {
  // @@protoc_insertion_point(field_get:content.proto.SpeechRecognitionAlternative.confidence)
  return confidence_;
}
inline void SpeechRecognitionAlternative::set_confidence(float value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_ = value;
  // @@protoc_insertion_point(field_set:content.proto.SpeechRecognitionAlternative.confidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::proto::SpeechRecognitionEvent_StatusCode> : ::std::true_type {};
template <> struct is_proto_enum< ::content::proto::SpeechRecognitionEvent_EndpointerEventType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_5fstreaming_5fapi_2eproto
