// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/browser/devtools/protocol/system_info.h"

#include "content/browser/devtools/protocol/protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"

namespace content {
namespace protocol {
namespace SystemInfo {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "SystemInfo";
const char Metainfo::commandPrefix[] = "SystemInfo.";
const char Metainfo::version[] = "1.3";

std::unique_ptr<GPUDevice> GPUDevice::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<GPUDevice> result(new GPUDevice());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* vendorIdValue = object->get("vendorId");
    errors->setName("vendorId");
    result->m_vendorId = ValueConversions<double>::fromValue(vendorIdValue, errors);
    protocol::Value* deviceIdValue = object->get("deviceId");
    errors->setName("deviceId");
    result->m_deviceId = ValueConversions<double>::fromValue(deviceIdValue, errors);
    protocol::Value* subSysIdValue = object->get("subSysId");
    if (subSysIdValue) {
        errors->setName("subSysId");
        result->m_subSysId = ValueConversions<double>::fromValue(subSysIdValue, errors);
    }
    protocol::Value* revisionValue = object->get("revision");
    if (revisionValue) {
        errors->setName("revision");
        result->m_revision = ValueConversions<double>::fromValue(revisionValue, errors);
    }
    protocol::Value* vendorStringValue = object->get("vendorString");
    errors->setName("vendorString");
    result->m_vendorString = ValueConversions<String>::fromValue(vendorStringValue, errors);
    protocol::Value* deviceStringValue = object->get("deviceString");
    errors->setName("deviceString");
    result->m_deviceString = ValueConversions<String>::fromValue(deviceStringValue, errors);
    protocol::Value* driverVendorValue = object->get("driverVendor");
    errors->setName("driverVendor");
    result->m_driverVendor = ValueConversions<String>::fromValue(driverVendorValue, errors);
    protocol::Value* driverVersionValue = object->get("driverVersion");
    errors->setName("driverVersion");
    result->m_driverVersion = ValueConversions<String>::fromValue(driverVersionValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> GPUDevice::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("vendorId", ValueConversions<double>::toValue(m_vendorId));
    result->setValue("deviceId", ValueConversions<double>::toValue(m_deviceId));
    if (m_subSysId.isJust())
        result->setValue("subSysId", ValueConversions<double>::toValue(m_subSysId.fromJust()));
    if (m_revision.isJust())
        result->setValue("revision", ValueConversions<double>::toValue(m_revision.fromJust()));
    result->setValue("vendorString", ValueConversions<String>::toValue(m_vendorString));
    result->setValue("deviceString", ValueConversions<String>::toValue(m_deviceString));
    result->setValue("driverVendor", ValueConversions<String>::toValue(m_driverVendor));
    result->setValue("driverVersion", ValueConversions<String>::toValue(m_driverVersion));
    return result;
}

void GPUDevice::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("vendorId"), m_vendorId, out);
      crdtp::SerializeField(crdtp::SpanFrom("deviceId"), m_deviceId, out);
      crdtp::SerializeField(crdtp::SpanFrom("subSysId"), m_subSysId, out);
      crdtp::SerializeField(crdtp::SpanFrom("revision"), m_revision, out);
      crdtp::SerializeField(crdtp::SpanFrom("vendorString"), m_vendorString, out);
      crdtp::SerializeField(crdtp::SpanFrom("deviceString"), m_deviceString, out);
      crdtp::SerializeField(crdtp::SpanFrom("driverVendor"), m_driverVendor, out);
      crdtp::SerializeField(crdtp::SpanFrom("driverVersion"), m_driverVersion, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<GPUDevice> GPUDevice::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<Size> Size::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<Size> result(new Size());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* widthValue = object->get("width");
    errors->setName("width");
    result->m_width = ValueConversions<int>::fromValue(widthValue, errors);
    protocol::Value* heightValue = object->get("height");
    errors->setName("height");
    result->m_height = ValueConversions<int>::fromValue(heightValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> Size::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("width", ValueConversions<int>::toValue(m_width));
    result->setValue("height", ValueConversions<int>::toValue(m_height));
    return result;
}

void Size::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("width"), m_width, out);
      crdtp::SerializeField(crdtp::SpanFrom("height"), m_height, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<Size> Size::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<VideoDecodeAcceleratorCapability> VideoDecodeAcceleratorCapability::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<VideoDecodeAcceleratorCapability> result(new VideoDecodeAcceleratorCapability());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* profileValue = object->get("profile");
    errors->setName("profile");
    result->m_profile = ValueConversions<String>::fromValue(profileValue, errors);
    protocol::Value* maxResolutionValue = object->get("maxResolution");
    errors->setName("maxResolution");
    result->m_maxResolution = ValueConversions<protocol::SystemInfo::Size>::fromValue(maxResolutionValue, errors);
    protocol::Value* minResolutionValue = object->get("minResolution");
    errors->setName("minResolution");
    result->m_minResolution = ValueConversions<protocol::SystemInfo::Size>::fromValue(minResolutionValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> VideoDecodeAcceleratorCapability::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("profile", ValueConversions<String>::toValue(m_profile));
    result->setValue("maxResolution", ValueConversions<protocol::SystemInfo::Size>::toValue(m_maxResolution.get()));
    result->setValue("minResolution", ValueConversions<protocol::SystemInfo::Size>::toValue(m_minResolution.get()));
    return result;
}

void VideoDecodeAcceleratorCapability::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("profile"), m_profile, out);
      crdtp::SerializeField(crdtp::SpanFrom("maxResolution"), m_maxResolution, out);
      crdtp::SerializeField(crdtp::SpanFrom("minResolution"), m_minResolution, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<VideoDecodeAcceleratorCapability> VideoDecodeAcceleratorCapability::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<VideoEncodeAcceleratorCapability> VideoEncodeAcceleratorCapability::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<VideoEncodeAcceleratorCapability> result(new VideoEncodeAcceleratorCapability());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* profileValue = object->get("profile");
    errors->setName("profile");
    result->m_profile = ValueConversions<String>::fromValue(profileValue, errors);
    protocol::Value* maxResolutionValue = object->get("maxResolution");
    errors->setName("maxResolution");
    result->m_maxResolution = ValueConversions<protocol::SystemInfo::Size>::fromValue(maxResolutionValue, errors);
    protocol::Value* maxFramerateNumeratorValue = object->get("maxFramerateNumerator");
    errors->setName("maxFramerateNumerator");
    result->m_maxFramerateNumerator = ValueConversions<int>::fromValue(maxFramerateNumeratorValue, errors);
    protocol::Value* maxFramerateDenominatorValue = object->get("maxFramerateDenominator");
    errors->setName("maxFramerateDenominator");
    result->m_maxFramerateDenominator = ValueConversions<int>::fromValue(maxFramerateDenominatorValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> VideoEncodeAcceleratorCapability::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("profile", ValueConversions<String>::toValue(m_profile));
    result->setValue("maxResolution", ValueConversions<protocol::SystemInfo::Size>::toValue(m_maxResolution.get()));
    result->setValue("maxFramerateNumerator", ValueConversions<int>::toValue(m_maxFramerateNumerator));
    result->setValue("maxFramerateDenominator", ValueConversions<int>::toValue(m_maxFramerateDenominator));
    return result;
}

void VideoEncodeAcceleratorCapability::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("profile"), m_profile, out);
      crdtp::SerializeField(crdtp::SpanFrom("maxResolution"), m_maxResolution, out);
      crdtp::SerializeField(crdtp::SpanFrom("maxFramerateNumerator"), m_maxFramerateNumerator, out);
      crdtp::SerializeField(crdtp::SpanFrom("maxFramerateDenominator"), m_maxFramerateDenominator, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<VideoEncodeAcceleratorCapability> VideoEncodeAcceleratorCapability::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

namespace SubsamplingFormatEnum {
const char Yuv420[] = "yuv420";
const char Yuv422[] = "yuv422";
const char Yuv444[] = "yuv444";
} // namespace SubsamplingFormatEnum

namespace ImageTypeEnum {
const char Jpeg[] = "jpeg";
const char Webp[] = "webp";
const char Unknown[] = "unknown";
} // namespace ImageTypeEnum

std::unique_ptr<ImageDecodeAcceleratorCapability> ImageDecodeAcceleratorCapability::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<ImageDecodeAcceleratorCapability> result(new ImageDecodeAcceleratorCapability());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* imageTypeValue = object->get("imageType");
    errors->setName("imageType");
    result->m_imageType = ValueConversions<String>::fromValue(imageTypeValue, errors);
    protocol::Value* maxDimensionsValue = object->get("maxDimensions");
    errors->setName("maxDimensions");
    result->m_maxDimensions = ValueConversions<protocol::SystemInfo::Size>::fromValue(maxDimensionsValue, errors);
    protocol::Value* minDimensionsValue = object->get("minDimensions");
    errors->setName("minDimensions");
    result->m_minDimensions = ValueConversions<protocol::SystemInfo::Size>::fromValue(minDimensionsValue, errors);
    protocol::Value* subsamplingsValue = object->get("subsamplings");
    errors->setName("subsamplings");
    result->m_subsamplings = ValueConversions<protocol::Array<String>>::fromValue(subsamplingsValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ImageDecodeAcceleratorCapability::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("imageType", ValueConversions<String>::toValue(m_imageType));
    result->setValue("maxDimensions", ValueConversions<protocol::SystemInfo::Size>::toValue(m_maxDimensions.get()));
    result->setValue("minDimensions", ValueConversions<protocol::SystemInfo::Size>::toValue(m_minDimensions.get()));
    result->setValue("subsamplings", ValueConversions<protocol::Array<String>>::toValue(m_subsamplings.get()));
    return result;
}

void ImageDecodeAcceleratorCapability::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("imageType"), m_imageType, out);
      crdtp::SerializeField(crdtp::SpanFrom("maxDimensions"), m_maxDimensions, out);
      crdtp::SerializeField(crdtp::SpanFrom("minDimensions"), m_minDimensions, out);
      crdtp::SerializeField(crdtp::SpanFrom("subsamplings"), m_subsamplings, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ImageDecodeAcceleratorCapability> ImageDecodeAcceleratorCapability::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<GPUInfo> GPUInfo::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<GPUInfo> result(new GPUInfo());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* devicesValue = object->get("devices");
    errors->setName("devices");
    result->m_devices = ValueConversions<protocol::Array<protocol::SystemInfo::GPUDevice>>::fromValue(devicesValue, errors);
    protocol::Value* auxAttributesValue = object->get("auxAttributes");
    if (auxAttributesValue) {
        errors->setName("auxAttributes");
        result->m_auxAttributes = ValueConversions<protocol::DictionaryValue>::fromValue(auxAttributesValue, errors);
    }
    protocol::Value* featureStatusValue = object->get("featureStatus");
    if (featureStatusValue) {
        errors->setName("featureStatus");
        result->m_featureStatus = ValueConversions<protocol::DictionaryValue>::fromValue(featureStatusValue, errors);
    }
    protocol::Value* driverBugWorkaroundsValue = object->get("driverBugWorkarounds");
    errors->setName("driverBugWorkarounds");
    result->m_driverBugWorkarounds = ValueConversions<protocol::Array<String>>::fromValue(driverBugWorkaroundsValue, errors);
    protocol::Value* videoDecodingValue = object->get("videoDecoding");
    errors->setName("videoDecoding");
    result->m_videoDecoding = ValueConversions<protocol::Array<protocol::SystemInfo::VideoDecodeAcceleratorCapability>>::fromValue(videoDecodingValue, errors);
    protocol::Value* videoEncodingValue = object->get("videoEncoding");
    errors->setName("videoEncoding");
    result->m_videoEncoding = ValueConversions<protocol::Array<protocol::SystemInfo::VideoEncodeAcceleratorCapability>>::fromValue(videoEncodingValue, errors);
    protocol::Value* imageDecodingValue = object->get("imageDecoding");
    errors->setName("imageDecoding");
    result->m_imageDecoding = ValueConversions<protocol::Array<protocol::SystemInfo::ImageDecodeAcceleratorCapability>>::fromValue(imageDecodingValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> GPUInfo::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("devices", ValueConversions<protocol::Array<protocol::SystemInfo::GPUDevice>>::toValue(m_devices.get()));
    if (m_auxAttributes.isJust())
        result->setValue("auxAttributes", ValueConversions<protocol::DictionaryValue>::toValue(m_auxAttributes.fromJust()));
    if (m_featureStatus.isJust())
        result->setValue("featureStatus", ValueConversions<protocol::DictionaryValue>::toValue(m_featureStatus.fromJust()));
    result->setValue("driverBugWorkarounds", ValueConversions<protocol::Array<String>>::toValue(m_driverBugWorkarounds.get()));
    result->setValue("videoDecoding", ValueConversions<protocol::Array<protocol::SystemInfo::VideoDecodeAcceleratorCapability>>::toValue(m_videoDecoding.get()));
    result->setValue("videoEncoding", ValueConversions<protocol::Array<protocol::SystemInfo::VideoEncodeAcceleratorCapability>>::toValue(m_videoEncoding.get()));
    result->setValue("imageDecoding", ValueConversions<protocol::Array<protocol::SystemInfo::ImageDecodeAcceleratorCapability>>::toValue(m_imageDecoding.get()));
    return result;
}

void GPUInfo::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("devices"), m_devices, out);
      crdtp::SerializeField(crdtp::SpanFrom("auxAttributes"), m_auxAttributes, out);
      crdtp::SerializeField(crdtp::SpanFrom("featureStatus"), m_featureStatus, out);
      crdtp::SerializeField(crdtp::SpanFrom("driverBugWorkarounds"), m_driverBugWorkarounds, out);
      crdtp::SerializeField(crdtp::SpanFrom("videoDecoding"), m_videoDecoding, out);
      crdtp::SerializeField(crdtp::SpanFrom("videoEncoding"), m_videoEncoding, out);
      crdtp::SerializeField(crdtp::SpanFrom("imageDecoding"), m_imageDecoding, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<GPUInfo> GPUInfo::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ProcessInfo> ProcessInfo::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<ProcessInfo> result(new ProcessInfo());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* typeValue = object->get("type");
    errors->setName("type");
    result->m_type = ValueConversions<String>::fromValue(typeValue, errors);
    protocol::Value* idValue = object->get("id");
    errors->setName("id");
    result->m_id = ValueConversions<int>::fromValue(idValue, errors);
    protocol::Value* cpuTimeValue = object->get("cpuTime");
    errors->setName("cpuTime");
    result->m_cpuTime = ValueConversions<double>::fromValue(cpuTimeValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ProcessInfo::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("type", ValueConversions<String>::toValue(m_type));
    result->setValue("id", ValueConversions<int>::toValue(m_id));
    result->setValue("cpuTime", ValueConversions<double>::toValue(m_cpuTime));
    return result;
}

void ProcessInfo::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("type"), m_type, out);
      crdtp::SerializeField(crdtp::SpanFrom("id"), m_id, out);
      crdtp::SerializeField(crdtp::SpanFrom("cpuTime"), m_cpuTime, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ProcessInfo> ProcessInfo::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::flush()
{
    m_frontendChannel->flushProtocolNotifications();
}

void Frontend::sendRawCBORNotification(std::vector<uint8_t> notification)
{
    m_frontendChannel->sendProtocolNotification(InternalRawNotification::fromBinary(std::move(notification)));
}

// --------------------- Dispatcher.

class DispatcherImpl : public protocol::DispatcherBase {
public:
    DispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DispatcherBase(frontendChannel)
        , m_backend(backend) {
        m_dispatchMap["SystemInfo.getInfo"] = &DispatcherImpl::getInfo;
        m_dispatchMap["SystemInfo.getProcessInfo"] = &DispatcherImpl::getProcessInfo;
    }
    ~DispatcherImpl() override { }
    bool canDispatch(const String& method) override;
    void dispatch(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<protocol::DictionaryValue> messageObject) override;
    std::unordered_map<String, String>& redirects() { return m_redirects; }

protected:
    using CallHandler = void (DispatcherImpl::*)(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> messageObject, ErrorSupport* errors);
    using DispatchMap = std::unordered_map<String, CallHandler>;
    DispatchMap m_dispatchMap;
    std::unordered_map<String, String> m_redirects;

    void getInfo(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void getProcessInfo(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);

    Backend* m_backend;
};

bool DispatcherImpl::canDispatch(const String& method) {
    return m_dispatchMap.find(method) != m_dispatchMap.end();
}

void DispatcherImpl::dispatch(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<protocol::DictionaryValue> messageObject)
{
    std::unordered_map<String, CallHandler>::iterator it = m_dispatchMap.find(method);
    DCHECK(it != m_dispatchMap.end());
    protocol::ErrorSupport errors;
    (this->*(it->second))(callId, method, message, std::move(messageObject), &errors);
}


class GetInfoCallbackImpl : public Backend::GetInfoCallback, public DispatcherBase::Callback {
public:
    GetInfoCallbackImpl(std::unique_ptr<DispatcherBase::WeakPtr> backendImpl, int callId, const String& method, crdtp::span<uint8_t> message)
        : DispatcherBase::Callback(std::move(backendImpl), callId, method, message) { }

    void sendSuccess(std::unique_ptr<protocol::SystemInfo::GPUInfo> gpu, const String& modelName, const String& modelVersion, const String& commandLine) override
    {
        std::unique_ptr<protocol::DictionaryValue> resultObject = DictionaryValue::create();
        resultObject->setValue("gpu", ValueConversions<protocol::SystemInfo::GPUInfo>::toValue(gpu.get()));
        resultObject->setValue("modelName", ValueConversions<String>::toValue(modelName));
        resultObject->setValue("modelVersion", ValueConversions<String>::toValue(modelVersion));
        resultObject->setValue("commandLine", ValueConversions<String>::toValue(commandLine));
        sendIfActive(std::move(resultObject), DispatchResponse::OK());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.status() == DispatchResponse::kError);
        sendIfActive(nullptr, response);
    }
};

void DispatcherImpl::getInfo(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{

    std::unique_ptr<GetInfoCallbackImpl> callback(new GetInfoCallbackImpl(weakPtr(), callId, method, message));
    m_backend->GetInfo(std::move(callback));
    return;
}

class GetProcessInfoCallbackImpl : public Backend::GetProcessInfoCallback, public DispatcherBase::Callback {
public:
    GetProcessInfoCallbackImpl(std::unique_ptr<DispatcherBase::WeakPtr> backendImpl, int callId, const String& method, crdtp::span<uint8_t> message)
        : DispatcherBase::Callback(std::move(backendImpl), callId, method, message) { }

    void sendSuccess(std::unique_ptr<protocol::Array<protocol::SystemInfo::ProcessInfo>> processInfo) override
    {
        std::unique_ptr<protocol::DictionaryValue> resultObject = DictionaryValue::create();
        resultObject->setValue("processInfo", ValueConversions<protocol::Array<protocol::SystemInfo::ProcessInfo>>::toValue(processInfo.get()));
        sendIfActive(std::move(resultObject), DispatchResponse::OK());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.status() == DispatchResponse::kError);
        sendIfActive(nullptr, response);
    }
};

void DispatcherImpl::getProcessInfo(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{

    std::unique_ptr<GetProcessInfoCallbackImpl> callback(new GetProcessInfoCallbackImpl(weakPtr(), callId, method, message));
    m_backend->GetProcessInfo(std::move(callback));
    return;
}

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    std::unique_ptr<DispatcherImpl> dispatcher(new DispatcherImpl(uber->channel(), backend));
    uber->setupRedirects(dispatcher->redirects());
    uber->registerBackend("SystemInfo", std::move(dispatcher));
}

} // SystemInfo
} // namespace content
} // namespace protocol
