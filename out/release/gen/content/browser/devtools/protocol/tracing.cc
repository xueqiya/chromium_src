// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/browser/devtools/protocol/tracing.h"

#include "content/browser/devtools/protocol/protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"

namespace content {
namespace protocol {
namespace Tracing {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Tracing";
const char Metainfo::commandPrefix[] = "Tracing.";
const char Metainfo::version[] = "1.3";

const char* TraceConfig::RecordModeEnum::RecordUntilFull = "recordUntilFull";
const char* TraceConfig::RecordModeEnum::RecordContinuously = "recordContinuously";
const char* TraceConfig::RecordModeEnum::RecordAsMuchAsPossible = "recordAsMuchAsPossible";
const char* TraceConfig::RecordModeEnum::EchoToConsole = "echoToConsole";

std::unique_ptr<TraceConfig> TraceConfig::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<TraceConfig> result(new TraceConfig());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* recordModeValue = object->get("recordMode");
    if (recordModeValue) {
        errors->setName("recordMode");
        result->m_recordMode = ValueConversions<String>::fromValue(recordModeValue, errors);
    }
    protocol::Value* enableSamplingValue = object->get("enableSampling");
    if (enableSamplingValue) {
        errors->setName("enableSampling");
        result->m_enableSampling = ValueConversions<bool>::fromValue(enableSamplingValue, errors);
    }
    protocol::Value* enableSystraceValue = object->get("enableSystrace");
    if (enableSystraceValue) {
        errors->setName("enableSystrace");
        result->m_enableSystrace = ValueConversions<bool>::fromValue(enableSystraceValue, errors);
    }
    protocol::Value* enableArgumentFilterValue = object->get("enableArgumentFilter");
    if (enableArgumentFilterValue) {
        errors->setName("enableArgumentFilter");
        result->m_enableArgumentFilter = ValueConversions<bool>::fromValue(enableArgumentFilterValue, errors);
    }
    protocol::Value* includedCategoriesValue = object->get("includedCategories");
    if (includedCategoriesValue) {
        errors->setName("includedCategories");
        result->m_includedCategories = ValueConversions<protocol::Array<String>>::fromValue(includedCategoriesValue, errors);
    }
    protocol::Value* excludedCategoriesValue = object->get("excludedCategories");
    if (excludedCategoriesValue) {
        errors->setName("excludedCategories");
        result->m_excludedCategories = ValueConversions<protocol::Array<String>>::fromValue(excludedCategoriesValue, errors);
    }
    protocol::Value* syntheticDelaysValue = object->get("syntheticDelays");
    if (syntheticDelaysValue) {
        errors->setName("syntheticDelays");
        result->m_syntheticDelays = ValueConversions<protocol::Array<String>>::fromValue(syntheticDelaysValue, errors);
    }
    protocol::Value* memoryDumpConfigValue = object->get("memoryDumpConfig");
    if (memoryDumpConfigValue) {
        errors->setName("memoryDumpConfig");
        result->m_memoryDumpConfig = ValueConversions<protocol::Tracing::MemoryDumpConfig>::fromValue(memoryDumpConfigValue, errors);
    }
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> TraceConfig::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_recordMode.isJust())
        result->setValue("recordMode", ValueConversions<String>::toValue(m_recordMode.fromJust()));
    if (m_enableSampling.isJust())
        result->setValue("enableSampling", ValueConversions<bool>::toValue(m_enableSampling.fromJust()));
    if (m_enableSystrace.isJust())
        result->setValue("enableSystrace", ValueConversions<bool>::toValue(m_enableSystrace.fromJust()));
    if (m_enableArgumentFilter.isJust())
        result->setValue("enableArgumentFilter", ValueConversions<bool>::toValue(m_enableArgumentFilter.fromJust()));
    if (m_includedCategories.isJust())
        result->setValue("includedCategories", ValueConversions<protocol::Array<String>>::toValue(m_includedCategories.fromJust()));
    if (m_excludedCategories.isJust())
        result->setValue("excludedCategories", ValueConversions<protocol::Array<String>>::toValue(m_excludedCategories.fromJust()));
    if (m_syntheticDelays.isJust())
        result->setValue("syntheticDelays", ValueConversions<protocol::Array<String>>::toValue(m_syntheticDelays.fromJust()));
    if (m_memoryDumpConfig.isJust())
        result->setValue("memoryDumpConfig", ValueConversions<protocol::Tracing::MemoryDumpConfig>::toValue(m_memoryDumpConfig.fromJust()));
    return result;
}

void TraceConfig::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("recordMode"), m_recordMode, out);
      crdtp::SerializeField(crdtp::SpanFrom("enableSampling"), m_enableSampling, out);
      crdtp::SerializeField(crdtp::SpanFrom("enableSystrace"), m_enableSystrace, out);
      crdtp::SerializeField(crdtp::SpanFrom("enableArgumentFilter"), m_enableArgumentFilter, out);
      crdtp::SerializeField(crdtp::SpanFrom("includedCategories"), m_includedCategories, out);
      crdtp::SerializeField(crdtp::SpanFrom("excludedCategories"), m_excludedCategories, out);
      crdtp::SerializeField(crdtp::SpanFrom("syntheticDelays"), m_syntheticDelays, out);
      crdtp::SerializeField(crdtp::SpanFrom("memoryDumpConfig"), m_memoryDumpConfig, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<TraceConfig> TraceConfig::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

namespace StreamFormatEnum {
const char Json[] = "json";
const char Proto[] = "proto";
} // namespace StreamFormatEnum

namespace StreamCompressionEnum {
const char None[] = "none";
const char Gzip[] = "gzip";
} // namespace StreamCompressionEnum

std::unique_ptr<BufferUsageNotification> BufferUsageNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<BufferUsageNotification> result(new BufferUsageNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* percentFullValue = object->get("percentFull");
    if (percentFullValue) {
        errors->setName("percentFull");
        result->m_percentFull = ValueConversions<double>::fromValue(percentFullValue, errors);
    }
    protocol::Value* eventCountValue = object->get("eventCount");
    if (eventCountValue) {
        errors->setName("eventCount");
        result->m_eventCount = ValueConversions<double>::fromValue(eventCountValue, errors);
    }
    protocol::Value* valueValue = object->get("value");
    if (valueValue) {
        errors->setName("value");
        result->m_value = ValueConversions<double>::fromValue(valueValue, errors);
    }
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> BufferUsageNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_percentFull.isJust())
        result->setValue("percentFull", ValueConversions<double>::toValue(m_percentFull.fromJust()));
    if (m_eventCount.isJust())
        result->setValue("eventCount", ValueConversions<double>::toValue(m_eventCount.fromJust()));
    if (m_value.isJust())
        result->setValue("value", ValueConversions<double>::toValue(m_value.fromJust()));
    return result;
}

void BufferUsageNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("percentFull"), m_percentFull, out);
      crdtp::SerializeField(crdtp::SpanFrom("eventCount"), m_eventCount, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<BufferUsageNotification> BufferUsageNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<DataCollectedNotification> DataCollectedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<DataCollectedNotification> result(new DataCollectedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* valueValue = object->get("value");
    errors->setName("value");
    result->m_value = ValueConversions<protocol::Array<protocol::DictionaryValue>>::fromValue(valueValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DataCollectedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("value", ValueConversions<protocol::Array<protocol::DictionaryValue>>::toValue(m_value.get()));
    return result;
}

void DataCollectedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DataCollectedNotification> DataCollectedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<TracingCompleteNotification> TracingCompleteNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<TracingCompleteNotification> result(new TracingCompleteNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* dataLossOccurredValue = object->get("dataLossOccurred");
    errors->setName("dataLossOccurred");
    result->m_dataLossOccurred = ValueConversions<bool>::fromValue(dataLossOccurredValue, errors);
    protocol::Value* streamValue = object->get("stream");
    if (streamValue) {
        errors->setName("stream");
        result->m_stream = ValueConversions<String>::fromValue(streamValue, errors);
    }
    protocol::Value* traceFormatValue = object->get("traceFormat");
    if (traceFormatValue) {
        errors->setName("traceFormat");
        result->m_traceFormat = ValueConversions<String>::fromValue(traceFormatValue, errors);
    }
    protocol::Value* streamCompressionValue = object->get("streamCompression");
    if (streamCompressionValue) {
        errors->setName("streamCompression");
        result->m_streamCompression = ValueConversions<String>::fromValue(streamCompressionValue, errors);
    }
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> TracingCompleteNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("dataLossOccurred", ValueConversions<bool>::toValue(m_dataLossOccurred));
    if (m_stream.isJust())
        result->setValue("stream", ValueConversions<String>::toValue(m_stream.fromJust()));
    if (m_traceFormat.isJust())
        result->setValue("traceFormat", ValueConversions<String>::toValue(m_traceFormat.fromJust()));
    if (m_streamCompression.isJust())
        result->setValue("streamCompression", ValueConversions<String>::toValue(m_streamCompression.fromJust()));
    return result;
}

void TracingCompleteNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("dataLossOccurred"), m_dataLossOccurred, out);
      crdtp::SerializeField(crdtp::SpanFrom("stream"), m_stream, out);
      crdtp::SerializeField(crdtp::SpanFrom("traceFormat"), m_traceFormat, out);
      crdtp::SerializeField(crdtp::SpanFrom("streamCompression"), m_streamCompression, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<TracingCompleteNotification> TracingCompleteNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


namespace Start {
namespace TransferModeEnum {
const char* ReportEvents = "ReportEvents";
const char* ReturnAsStream = "ReturnAsStream";
} // namespace TransferModeEnum
} // namespace Start

// ------------- Frontend notifications.

void Frontend::BufferUsage(Maybe<double> percentFull, Maybe<double> eventCount, Maybe<double> value)
{
    if (!m_frontendChannel)
        return;
    std::unique_ptr<BufferUsageNotification> messageData = BufferUsageNotification::Create()
        .Build();
    if (percentFull.isJust())
        messageData->SetPercentFull(std::move(percentFull).takeJust());
    if (eventCount.isJust())
        messageData->SetEventCount(std::move(eventCount).takeJust());
    if (value.isJust())
        messageData->SetValue(std::move(value).takeJust());
    m_frontendChannel->sendProtocolNotification(InternalResponse::createNotification("Tracing.bufferUsage", std::move(messageData)));
}

void Frontend::DataCollected(std::unique_ptr<protocol::Array<protocol::DictionaryValue>> value)
{
    if (!m_frontendChannel)
        return;
    std::unique_ptr<DataCollectedNotification> messageData = DataCollectedNotification::Create()
        .SetValue(std::move(value))
        .Build();
    m_frontendChannel->sendProtocolNotification(InternalResponse::createNotification("Tracing.dataCollected", std::move(messageData)));
}

void Frontend::TracingComplete(bool dataLossOccurred, Maybe<String> stream, Maybe<String> traceFormat, Maybe<String> streamCompression)
{
    if (!m_frontendChannel)
        return;
    std::unique_ptr<TracingCompleteNotification> messageData = TracingCompleteNotification::Create()
        .SetDataLossOccurred(dataLossOccurred)
        .Build();
    if (stream.isJust())
        messageData->SetStream(std::move(stream).takeJust());
    if (traceFormat.isJust())
        messageData->SetTraceFormat(std::move(traceFormat).takeJust());
    if (streamCompression.isJust())
        messageData->SetStreamCompression(std::move(streamCompression).takeJust());
    m_frontendChannel->sendProtocolNotification(InternalResponse::createNotification("Tracing.tracingComplete", std::move(messageData)));
}

void Frontend::flush()
{
    m_frontendChannel->flushProtocolNotifications();
}

void Frontend::sendRawCBORNotification(std::vector<uint8_t> notification)
{
    m_frontendChannel->sendProtocolNotification(InternalRawNotification::fromBinary(std::move(notification)));
}

// --------------------- Dispatcher.

class DispatcherImpl : public protocol::DispatcherBase {
public:
    DispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DispatcherBase(frontendChannel)
        , m_backend(backend) {
        m_dispatchMap["Tracing.end"] = &DispatcherImpl::end;
        m_dispatchMap["Tracing.getCategories"] = &DispatcherImpl::getCategories;
        m_dispatchMap["Tracing.recordClockSyncMarker"] = &DispatcherImpl::recordClockSyncMarker;
        m_dispatchMap["Tracing.requestMemoryDump"] = &DispatcherImpl::requestMemoryDump;
        m_dispatchMap["Tracing.start"] = &DispatcherImpl::start;
    }
    ~DispatcherImpl() override { }
    bool canDispatch(const String& method) override;
    void dispatch(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<protocol::DictionaryValue> messageObject) override;
    std::unordered_map<String, String>& redirects() { return m_redirects; }

protected:
    using CallHandler = void (DispatcherImpl::*)(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> messageObject, ErrorSupport* errors);
    using DispatchMap = std::unordered_map<String, CallHandler>;
    DispatchMap m_dispatchMap;
    std::unordered_map<String, String> m_redirects;

    void end(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void getCategories(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void recordClockSyncMarker(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void requestMemoryDump(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void start(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);

    Backend* m_backend;
};

bool DispatcherImpl::canDispatch(const String& method) {
    return m_dispatchMap.find(method) != m_dispatchMap.end();
}

void DispatcherImpl::dispatch(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<protocol::DictionaryValue> messageObject)
{
    std::unordered_map<String, CallHandler>::iterator it = m_dispatchMap.find(method);
    DCHECK(it != m_dispatchMap.end());
    protocol::ErrorSupport errors;
    (this->*(it->second))(callId, method, message, std::move(messageObject), &errors);
}


void DispatcherImpl::end(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{

    std::unique_ptr<DispatcherBase::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->End();
    if (response.status() == DispatchResponse::kFallThrough) {
        channel()->fallThrough(callId, method, message);
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(callId, response);
    return;
}

class GetCategoriesCallbackImpl : public Backend::GetCategoriesCallback, public DispatcherBase::Callback {
public:
    GetCategoriesCallbackImpl(std::unique_ptr<DispatcherBase::WeakPtr> backendImpl, int callId, const String& method, crdtp::span<uint8_t> message)
        : DispatcherBase::Callback(std::move(backendImpl), callId, method, message) { }

    void sendSuccess(std::unique_ptr<protocol::Array<String>> categories) override
    {
        std::unique_ptr<protocol::DictionaryValue> resultObject = DictionaryValue::create();
        resultObject->setValue("categories", ValueConversions<protocol::Array<String>>::toValue(categories.get()));
        sendIfActive(std::move(resultObject), DispatchResponse::OK());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.status() == DispatchResponse::kError);
        sendIfActive(nullptr, response);
    }
};

void DispatcherImpl::getCategories(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{

    std::unique_ptr<GetCategoriesCallbackImpl> callback(new GetCategoriesCallbackImpl(weakPtr(), callId, method, message));
    m_backend->GetCategories(std::move(callback));
    return;
}

void DispatcherImpl::recordClockSyncMarker(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::DictionaryValue* object = DictionaryValue::cast(requestMessageObject->get("params"));
    errors->push();
    protocol::Value* syncIdValue = object ? object->get("syncId") : nullptr;
    errors->setName("syncId");
    String in_syncId = ValueConversions<String>::fromValue(syncIdValue, errors);
    errors->pop();
    if (errors->hasErrors()) {
        reportProtocolError(callId, DispatchResponse::kInvalidParams, kInvalidParamsString, errors);
        return;
    }

    std::unique_ptr<DispatcherBase::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->RecordClockSyncMarker(in_syncId);
    if (response.status() == DispatchResponse::kFallThrough) {
        channel()->fallThrough(callId, method, message);
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(callId, response);
    return;
}

class RequestMemoryDumpCallbackImpl : public Backend::RequestMemoryDumpCallback, public DispatcherBase::Callback {
public:
    RequestMemoryDumpCallbackImpl(std::unique_ptr<DispatcherBase::WeakPtr> backendImpl, int callId, const String& method, crdtp::span<uint8_t> message)
        : DispatcherBase::Callback(std::move(backendImpl), callId, method, message) { }

    void sendSuccess(const String& dumpGuid, bool success) override
    {
        std::unique_ptr<protocol::DictionaryValue> resultObject = DictionaryValue::create();
        resultObject->setValue("dumpGuid", ValueConversions<String>::toValue(dumpGuid));
        resultObject->setValue("success", ValueConversions<bool>::toValue(success));
        sendIfActive(std::move(resultObject), DispatchResponse::OK());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.status() == DispatchResponse::kError);
        sendIfActive(nullptr, response);
    }
};

void DispatcherImpl::requestMemoryDump(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::DictionaryValue* object = DictionaryValue::cast(requestMessageObject->get("params"));
    errors->push();
    protocol::Value* deterministicValue = object ? object->get("deterministic") : nullptr;
    Maybe<bool> in_deterministic;
    if (deterministicValue) {
        errors->setName("deterministic");
        in_deterministic = ValueConversions<bool>::fromValue(deterministicValue, errors);
    }
    errors->pop();
    if (errors->hasErrors()) {
        reportProtocolError(callId, DispatchResponse::kInvalidParams, kInvalidParamsString, errors);
        return;
    }

    std::unique_ptr<RequestMemoryDumpCallbackImpl> callback(new RequestMemoryDumpCallbackImpl(weakPtr(), callId, method, message));
    m_backend->RequestMemoryDump(std::move(in_deterministic), std::move(callback));
    return;
}

class StartCallbackImpl : public Backend::StartCallback, public DispatcherBase::Callback {
public:
    StartCallbackImpl(std::unique_ptr<DispatcherBase::WeakPtr> backendImpl, int callId, const String& method, crdtp::span<uint8_t> message)
        : DispatcherBase::Callback(std::move(backendImpl), callId, method, message) { }

    void sendSuccess() override
    {
        std::unique_ptr<protocol::DictionaryValue> resultObject = DictionaryValue::create();
        sendIfActive(std::move(resultObject), DispatchResponse::OK());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.status() == DispatchResponse::kError);
        sendIfActive(nullptr, response);
    }
};

void DispatcherImpl::start(int callId, const String& method, crdtp::span<uint8_t> message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::DictionaryValue* object = DictionaryValue::cast(requestMessageObject->get("params"));
    errors->push();
    protocol::Value* categoriesValue = object ? object->get("categories") : nullptr;
    Maybe<String> in_categories;
    if (categoriesValue) {
        errors->setName("categories");
        in_categories = ValueConversions<String>::fromValue(categoriesValue, errors);
    }
    protocol::Value* optionsValue = object ? object->get("options") : nullptr;
    Maybe<String> in_options;
    if (optionsValue) {
        errors->setName("options");
        in_options = ValueConversions<String>::fromValue(optionsValue, errors);
    }
    protocol::Value* bufferUsageReportingIntervalValue = object ? object->get("bufferUsageReportingInterval") : nullptr;
    Maybe<double> in_bufferUsageReportingInterval;
    if (bufferUsageReportingIntervalValue) {
        errors->setName("bufferUsageReportingInterval");
        in_bufferUsageReportingInterval = ValueConversions<double>::fromValue(bufferUsageReportingIntervalValue, errors);
    }
    protocol::Value* transferModeValue = object ? object->get("transferMode") : nullptr;
    Maybe<String> in_transferMode;
    if (transferModeValue) {
        errors->setName("transferMode");
        in_transferMode = ValueConversions<String>::fromValue(transferModeValue, errors);
    }
    protocol::Value* streamFormatValue = object ? object->get("streamFormat") : nullptr;
    Maybe<String> in_streamFormat;
    if (streamFormatValue) {
        errors->setName("streamFormat");
        in_streamFormat = ValueConversions<String>::fromValue(streamFormatValue, errors);
    }
    protocol::Value* streamCompressionValue = object ? object->get("streamCompression") : nullptr;
    Maybe<String> in_streamCompression;
    if (streamCompressionValue) {
        errors->setName("streamCompression");
        in_streamCompression = ValueConversions<String>::fromValue(streamCompressionValue, errors);
    }
    protocol::Value* traceConfigValue = object ? object->get("traceConfig") : nullptr;
    Maybe<protocol::Tracing::TraceConfig> in_traceConfig;
    if (traceConfigValue) {
        errors->setName("traceConfig");
        in_traceConfig = ValueConversions<protocol::Tracing::TraceConfig>::fromValue(traceConfigValue, errors);
    }
    errors->pop();
    if (errors->hasErrors()) {
        reportProtocolError(callId, DispatchResponse::kInvalidParams, kInvalidParamsString, errors);
        return;
    }

    std::unique_ptr<StartCallbackImpl> callback(new StartCallbackImpl(weakPtr(), callId, method, message));
    m_backend->Start(std::move(in_categories), std::move(in_options), std::move(in_bufferUsageReportingInterval), std::move(in_transferMode), std::move(in_streamFormat), std::move(in_streamCompression), std::move(in_traceConfig), std::move(callback));
    return;
}

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    std::unique_ptr<DispatcherImpl> dispatcher(new DispatcherImpl(uber->channel(), backend));
    uber->setupRedirects(dispatcher->redirects());
    uber->registerBackend("Tracing", std::move(dispatcher));
}

} // Tracing
} // namespace content
} // namespace protocol
