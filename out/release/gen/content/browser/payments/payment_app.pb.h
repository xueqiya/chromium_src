// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payment_app.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payment_5fapp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payment_5fapp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payment_5fapp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payment_5fapp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace content {
class ImageSizeProto;
class ImageSizeProtoDefaultTypeInternal;
extern ImageSizeProtoDefaultTypeInternal _ImageSizeProto_default_instance_;
class StoredPaymentAppProto;
class StoredPaymentAppProtoDefaultTypeInternal;
extern StoredPaymentAppProtoDefaultTypeInternal _StoredPaymentAppProto_default_instance_;
class StoredPaymentInstrumentImageObject;
class StoredPaymentInstrumentImageObjectDefaultTypeInternal;
extern StoredPaymentInstrumentImageObjectDefaultTypeInternal _StoredPaymentInstrumentImageObject_default_instance_;
class StoredPaymentInstrumentKeyInfoProto;
class StoredPaymentInstrumentKeyInfoProtoDefaultTypeInternal;
extern StoredPaymentInstrumentKeyInfoProtoDefaultTypeInternal _StoredPaymentInstrumentKeyInfoProto_default_instance_;
class StoredPaymentInstrumentProto;
class StoredPaymentInstrumentProtoDefaultTypeInternal;
extern StoredPaymentInstrumentProtoDefaultTypeInternal _StoredPaymentInstrumentProto_default_instance_;
class StoredRelatedApplicationProto;
class StoredRelatedApplicationProtoDefaultTypeInternal;
extern StoredRelatedApplicationProtoDefaultTypeInternal _StoredRelatedApplicationProto_default_instance_;
class SupportedDelegationsProto;
class SupportedDelegationsProtoDefaultTypeInternal;
extern SupportedDelegationsProtoDefaultTypeInternal _SupportedDelegationsProto_default_instance_;
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::ImageSizeProto* Arena::CreateMaybeMessage<::content::ImageSizeProto>(Arena*);
template<> ::content::StoredPaymentAppProto* Arena::CreateMaybeMessage<::content::StoredPaymentAppProto>(Arena*);
template<> ::content::StoredPaymentInstrumentImageObject* Arena::CreateMaybeMessage<::content::StoredPaymentInstrumentImageObject>(Arena*);
template<> ::content::StoredPaymentInstrumentKeyInfoProto* Arena::CreateMaybeMessage<::content::StoredPaymentInstrumentKeyInfoProto>(Arena*);
template<> ::content::StoredPaymentInstrumentProto* Arena::CreateMaybeMessage<::content::StoredPaymentInstrumentProto>(Arena*);
template<> ::content::StoredRelatedApplicationProto* Arena::CreateMaybeMessage<::content::StoredRelatedApplicationProto>(Arena*);
template<> ::content::SupportedDelegationsProto* Arena::CreateMaybeMessage<::content::SupportedDelegationsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {

// ===================================================================

class StoredPaymentInstrumentKeyInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.StoredPaymentInstrumentKeyInfoProto) */ {
 public:
  StoredPaymentInstrumentKeyInfoProto();
  virtual ~StoredPaymentInstrumentKeyInfoProto();

  StoredPaymentInstrumentKeyInfoProto(const StoredPaymentInstrumentKeyInfoProto& from);
  StoredPaymentInstrumentKeyInfoProto(StoredPaymentInstrumentKeyInfoProto&& from) noexcept
    : StoredPaymentInstrumentKeyInfoProto() {
    *this = ::std::move(from);
  }

  inline StoredPaymentInstrumentKeyInfoProto& operator=(const StoredPaymentInstrumentKeyInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredPaymentInstrumentKeyInfoProto& operator=(StoredPaymentInstrumentKeyInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StoredPaymentInstrumentKeyInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredPaymentInstrumentKeyInfoProto* internal_default_instance() {
    return reinterpret_cast<const StoredPaymentInstrumentKeyInfoProto*>(
               &_StoredPaymentInstrumentKeyInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StoredPaymentInstrumentKeyInfoProto& a, StoredPaymentInstrumentKeyInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StoredPaymentInstrumentKeyInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoredPaymentInstrumentKeyInfoProto* New() const final {
    return CreateMaybeMessage<StoredPaymentInstrumentKeyInfoProto>(nullptr);
  }

  StoredPaymentInstrumentKeyInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoredPaymentInstrumentKeyInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StoredPaymentInstrumentKeyInfoProto& from);
  void MergeFrom(const StoredPaymentInstrumentKeyInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoredPaymentInstrumentKeyInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.StoredPaymentInstrumentKeyInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kInsertionOrderFieldNumber = 1,
  };
  // optional string key = 2;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional uint64 insertion_order = 1;
  bool has_insertion_order() const;
  void clear_insertion_order();
  ::PROTOBUF_NAMESPACE_ID::uint64 insertion_order() const;
  void set_insertion_order(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:content.StoredPaymentInstrumentKeyInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 insertion_order_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class ImageSizeProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.ImageSizeProto) */ {
 public:
  ImageSizeProto();
  virtual ~ImageSizeProto();

  ImageSizeProto(const ImageSizeProto& from);
  ImageSizeProto(ImageSizeProto&& from) noexcept
    : ImageSizeProto() {
    *this = ::std::move(from);
  }

  inline ImageSizeProto& operator=(const ImageSizeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSizeProto& operator=(ImageSizeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ImageSizeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageSizeProto* internal_default_instance() {
    return reinterpret_cast<const ImageSizeProto*>(
               &_ImageSizeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageSizeProto& a, ImageSizeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSizeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageSizeProto* New() const final {
    return CreateMaybeMessage<ImageSizeProto>(nullptr);
  }

  ImageSizeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageSizeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ImageSizeProto& from);
  void MergeFrom(const ImageSizeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageSizeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.ImageSizeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // optional uint64 width = 1;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint64 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 height = 2;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:content.ImageSizeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 width_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class StoredPaymentInstrumentImageObject :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.StoredPaymentInstrumentImageObject) */ {
 public:
  StoredPaymentInstrumentImageObject();
  virtual ~StoredPaymentInstrumentImageObject();

  StoredPaymentInstrumentImageObject(const StoredPaymentInstrumentImageObject& from);
  StoredPaymentInstrumentImageObject(StoredPaymentInstrumentImageObject&& from) noexcept
    : StoredPaymentInstrumentImageObject() {
    *this = ::std::move(from);
  }

  inline StoredPaymentInstrumentImageObject& operator=(const StoredPaymentInstrumentImageObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredPaymentInstrumentImageObject& operator=(StoredPaymentInstrumentImageObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StoredPaymentInstrumentImageObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredPaymentInstrumentImageObject* internal_default_instance() {
    return reinterpret_cast<const StoredPaymentInstrumentImageObject*>(
               &_StoredPaymentInstrumentImageObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StoredPaymentInstrumentImageObject& a, StoredPaymentInstrumentImageObject& b) {
    a.Swap(&b);
  }
  inline void Swap(StoredPaymentInstrumentImageObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoredPaymentInstrumentImageObject* New() const final {
    return CreateMaybeMessage<StoredPaymentInstrumentImageObject>(nullptr);
  }

  StoredPaymentInstrumentImageObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoredPaymentInstrumentImageObject>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StoredPaymentInstrumentImageObject& from);
  void MergeFrom(const StoredPaymentInstrumentImageObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoredPaymentInstrumentImageObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.StoredPaymentInstrumentImageObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizesFieldNumber = 3,
    kSrcFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .content.ImageSizeProto sizes = 3;
  int sizes_size() const;
  void clear_sizes();
  ::content::ImageSizeProto* mutable_sizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ImageSizeProto >*
      mutable_sizes();
  const ::content::ImageSizeProto& sizes(int index) const;
  ::content::ImageSizeProto* add_sizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ImageSizeProto >&
      sizes() const;

  // optional string src = 1;
  bool has_src() const;
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:content.StoredPaymentInstrumentImageObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ImageSizeProto > sizes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class StoredPaymentInstrumentProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.StoredPaymentInstrumentProto) */ {
 public:
  StoredPaymentInstrumentProto();
  virtual ~StoredPaymentInstrumentProto();

  StoredPaymentInstrumentProto(const StoredPaymentInstrumentProto& from);
  StoredPaymentInstrumentProto(StoredPaymentInstrumentProto&& from) noexcept
    : StoredPaymentInstrumentProto() {
    *this = ::std::move(from);
  }

  inline StoredPaymentInstrumentProto& operator=(const StoredPaymentInstrumentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredPaymentInstrumentProto& operator=(StoredPaymentInstrumentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StoredPaymentInstrumentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredPaymentInstrumentProto* internal_default_instance() {
    return reinterpret_cast<const StoredPaymentInstrumentProto*>(
               &_StoredPaymentInstrumentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StoredPaymentInstrumentProto& a, StoredPaymentInstrumentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StoredPaymentInstrumentProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoredPaymentInstrumentProto* New() const final {
    return CreateMaybeMessage<StoredPaymentInstrumentProto>(nullptr);
  }

  StoredPaymentInstrumentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoredPaymentInstrumentProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StoredPaymentInstrumentProto& from);
  void MergeFrom(const StoredPaymentInstrumentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoredPaymentInstrumentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.StoredPaymentInstrumentProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconsFieldNumber = 6,
    kSupportedCardNetworksFieldNumber = 8,
    kInstrumentKeyFieldNumber = 2,
    kNameFieldNumber = 3,
    kMethodFieldNumber = 4,
    kStringifiedCapabilitiesFieldNumber = 5,
    kDecodedInstrumentIconFieldNumber = 7,
    kRegistrationIdFieldNumber = 1,
  };
  // repeated .content.StoredPaymentInstrumentImageObject icons = 6;
  int icons_size() const;
  void clear_icons();
  ::content::StoredPaymentInstrumentImageObject* mutable_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredPaymentInstrumentImageObject >*
      mutable_icons();
  const ::content::StoredPaymentInstrumentImageObject& icons(int index) const;
  ::content::StoredPaymentInstrumentImageObject* add_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredPaymentInstrumentImageObject >&
      icons() const;

  // repeated int32 supported_card_networks = 8;
  int supported_card_networks_size() const;
  void clear_supported_card_networks();
  ::PROTOBUF_NAMESPACE_ID::int32 supported_card_networks(int index) const;
  void set_supported_card_networks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_supported_card_networks(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      supported_card_networks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_supported_card_networks();

  // optional string instrument_key = 2;
  bool has_instrument_key() const;
  void clear_instrument_key();
  const std::string& instrument_key() const;
  void set_instrument_key(const std::string& value);
  void set_instrument_key(std::string&& value);
  void set_instrument_key(const char* value);
  void set_instrument_key(const char* value, size_t size);
  std::string* mutable_instrument_key();
  std::string* release_instrument_key();
  void set_allocated_instrument_key(std::string* instrument_key);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string method = 4;
  bool has_method() const;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);

  // optional string stringified_capabilities = 5;
  bool has_stringified_capabilities() const;
  void clear_stringified_capabilities();
  const std::string& stringified_capabilities() const;
  void set_stringified_capabilities(const std::string& value);
  void set_stringified_capabilities(std::string&& value);
  void set_stringified_capabilities(const char* value);
  void set_stringified_capabilities(const char* value, size_t size);
  std::string* mutable_stringified_capabilities();
  std::string* release_stringified_capabilities();
  void set_allocated_stringified_capabilities(std::string* stringified_capabilities);

  // optional string decoded_instrument_icon = 7;
  bool has_decoded_instrument_icon() const;
  void clear_decoded_instrument_icon();
  const std::string& decoded_instrument_icon() const;
  void set_decoded_instrument_icon(const std::string& value);
  void set_decoded_instrument_icon(std::string&& value);
  void set_decoded_instrument_icon(const char* value);
  void set_decoded_instrument_icon(const char* value, size_t size);
  std::string* mutable_decoded_instrument_icon();
  std::string* release_decoded_instrument_icon();
  void set_allocated_decoded_instrument_icon(std::string* decoded_instrument_icon);

  // optional int64 registration_id = 1;
  bool has_registration_id() const;
  void clear_registration_id();
  ::PROTOBUF_NAMESPACE_ID::int64 registration_id() const;
  void set_registration_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:content.StoredPaymentInstrumentProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredPaymentInstrumentImageObject > icons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > supported_card_networks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringified_capabilities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decoded_instrument_icon_;
  ::PROTOBUF_NAMESPACE_ID::int64 registration_id_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class StoredRelatedApplicationProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.StoredRelatedApplicationProto) */ {
 public:
  StoredRelatedApplicationProto();
  virtual ~StoredRelatedApplicationProto();

  StoredRelatedApplicationProto(const StoredRelatedApplicationProto& from);
  StoredRelatedApplicationProto(StoredRelatedApplicationProto&& from) noexcept
    : StoredRelatedApplicationProto() {
    *this = ::std::move(from);
  }

  inline StoredRelatedApplicationProto& operator=(const StoredRelatedApplicationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredRelatedApplicationProto& operator=(StoredRelatedApplicationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StoredRelatedApplicationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredRelatedApplicationProto* internal_default_instance() {
    return reinterpret_cast<const StoredRelatedApplicationProto*>(
               &_StoredRelatedApplicationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StoredRelatedApplicationProto& a, StoredRelatedApplicationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StoredRelatedApplicationProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoredRelatedApplicationProto* New() const final {
    return CreateMaybeMessage<StoredRelatedApplicationProto>(nullptr);
  }

  StoredRelatedApplicationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoredRelatedApplicationProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StoredRelatedApplicationProto& from);
  void MergeFrom(const StoredRelatedApplicationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoredRelatedApplicationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.StoredRelatedApplicationProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional string platform = 1;
  bool has_platform() const;
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:content.StoredRelatedApplicationProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class SupportedDelegationsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.SupportedDelegationsProto) */ {
 public:
  SupportedDelegationsProto();
  virtual ~SupportedDelegationsProto();

  SupportedDelegationsProto(const SupportedDelegationsProto& from);
  SupportedDelegationsProto(SupportedDelegationsProto&& from) noexcept
    : SupportedDelegationsProto() {
    *this = ::std::move(from);
  }

  inline SupportedDelegationsProto& operator=(const SupportedDelegationsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupportedDelegationsProto& operator=(SupportedDelegationsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SupportedDelegationsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SupportedDelegationsProto* internal_default_instance() {
    return reinterpret_cast<const SupportedDelegationsProto*>(
               &_SupportedDelegationsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SupportedDelegationsProto& a, SupportedDelegationsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SupportedDelegationsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SupportedDelegationsProto* New() const final {
    return CreateMaybeMessage<SupportedDelegationsProto>(nullptr);
  }

  SupportedDelegationsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SupportedDelegationsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SupportedDelegationsProto& from);
  void MergeFrom(const SupportedDelegationsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SupportedDelegationsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.SupportedDelegationsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShippingAddressFieldNumber = 1,
    kPayerNameFieldNumber = 2,
    kPayerPhoneFieldNumber = 3,
    kPayerEmailFieldNumber = 4,
  };
  // optional bool shipping_address = 1;
  bool has_shipping_address() const;
  void clear_shipping_address();
  bool shipping_address() const;
  void set_shipping_address(bool value);

  // optional bool payer_name = 2;
  bool has_payer_name() const;
  void clear_payer_name();
  bool payer_name() const;
  void set_payer_name(bool value);

  // optional bool payer_phone = 3;
  bool has_payer_phone() const;
  void clear_payer_phone();
  bool payer_phone() const;
  void set_payer_phone(bool value);

  // optional bool payer_email = 4;
  bool has_payer_email() const;
  void clear_payer_email();
  bool payer_email() const;
  void set_payer_email(bool value);

  // @@protoc_insertion_point(class_scope:content.SupportedDelegationsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool shipping_address_;
  bool payer_name_;
  bool payer_phone_;
  bool payer_email_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class StoredPaymentAppProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.StoredPaymentAppProto) */ {
 public:
  StoredPaymentAppProto();
  virtual ~StoredPaymentAppProto();

  StoredPaymentAppProto(const StoredPaymentAppProto& from);
  StoredPaymentAppProto(StoredPaymentAppProto&& from) noexcept
    : StoredPaymentAppProto() {
    *this = ::std::move(from);
  }

  inline StoredPaymentAppProto& operator=(const StoredPaymentAppProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredPaymentAppProto& operator=(StoredPaymentAppProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StoredPaymentAppProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredPaymentAppProto* internal_default_instance() {
    return reinterpret_cast<const StoredPaymentAppProto*>(
               &_StoredPaymentAppProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StoredPaymentAppProto& a, StoredPaymentAppProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StoredPaymentAppProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoredPaymentAppProto* New() const final {
    return CreateMaybeMessage<StoredPaymentAppProto>(nullptr);
  }

  StoredPaymentAppProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoredPaymentAppProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StoredPaymentAppProto& from);
  void MergeFrom(const StoredPaymentAppProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoredPaymentAppProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.StoredPaymentAppProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelatedApplicationsFieldNumber = 6,
    kScopeFieldNumber = 2,
    kNameFieldNumber = 3,
    kIconFieldNumber = 4,
    kUserHintFieldNumber = 7,
    kSupportedDelegationsFieldNumber = 8,
    kRegistrationIdFieldNumber = 1,
    kPreferRelatedApplicationsFieldNumber = 5,
  };
  // repeated .content.StoredRelatedApplicationProto related_applications = 6;
  int related_applications_size() const;
  void clear_related_applications();
  ::content::StoredRelatedApplicationProto* mutable_related_applications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredRelatedApplicationProto >*
      mutable_related_applications();
  const ::content::StoredRelatedApplicationProto& related_applications(int index) const;
  ::content::StoredRelatedApplicationProto* add_related_applications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredRelatedApplicationProto >&
      related_applications() const;

  // optional string scope = 2;
  bool has_scope() const;
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string icon = 4;
  bool has_icon() const;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);

  // optional string user_hint = 7;
  bool has_user_hint() const;
  void clear_user_hint();
  const std::string& user_hint() const;
  void set_user_hint(const std::string& value);
  void set_user_hint(std::string&& value);
  void set_user_hint(const char* value);
  void set_user_hint(const char* value, size_t size);
  std::string* mutable_user_hint();
  std::string* release_user_hint();
  void set_allocated_user_hint(std::string* user_hint);

  // optional .content.SupportedDelegationsProto supported_delegations = 8;
  bool has_supported_delegations() const;
  void clear_supported_delegations();
  const ::content::SupportedDelegationsProto& supported_delegations() const;
  ::content::SupportedDelegationsProto* release_supported_delegations();
  ::content::SupportedDelegationsProto* mutable_supported_delegations();
  void set_allocated_supported_delegations(::content::SupportedDelegationsProto* supported_delegations);

  // optional int64 registration_id = 1;
  bool has_registration_id() const;
  void clear_registration_id();
  ::PROTOBUF_NAMESPACE_ID::int64 registration_id() const;
  void set_registration_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool prefer_related_applications = 5;
  bool has_prefer_related_applications() const;
  void clear_prefer_related_applications();
  bool prefer_related_applications() const;
  void set_prefer_related_applications(bool value);

  // @@protoc_insertion_point(class_scope:content.StoredPaymentAppProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredRelatedApplicationProto > related_applications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_hint_;
  ::content::SupportedDelegationsProto* supported_delegations_;
  ::PROTOBUF_NAMESPACE_ID::int64 registration_id_;
  bool prefer_related_applications_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StoredPaymentInstrumentKeyInfoProto

// optional uint64 insertion_order = 1;
inline bool StoredPaymentInstrumentKeyInfoProto::has_insertion_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoredPaymentInstrumentKeyInfoProto::clear_insertion_order() {
  insertion_order_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoredPaymentInstrumentKeyInfoProto::insertion_order() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentKeyInfoProto.insertion_order)
  return insertion_order_;
}
inline void StoredPaymentInstrumentKeyInfoProto::set_insertion_order(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  insertion_order_ = value;
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentKeyInfoProto.insertion_order)
}

// optional string key = 2;
inline bool StoredPaymentInstrumentKeyInfoProto::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoredPaymentInstrumentKeyInfoProto::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoredPaymentInstrumentKeyInfoProto::key() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentKeyInfoProto.key)
  return key_.GetNoArena();
}
inline void StoredPaymentInstrumentKeyInfoProto::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentKeyInfoProto.key)
}
inline void StoredPaymentInstrumentKeyInfoProto::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentInstrumentKeyInfoProto.key)
}
inline void StoredPaymentInstrumentKeyInfoProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentInstrumentKeyInfoProto.key)
}
inline void StoredPaymentInstrumentKeyInfoProto::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentInstrumentKeyInfoProto.key)
}
inline std::string* StoredPaymentInstrumentKeyInfoProto::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentKeyInfoProto.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentInstrumentKeyInfoProto::release_key() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentKeyInfoProto.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentInstrumentKeyInfoProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentKeyInfoProto.key)
}

// -------------------------------------------------------------------

// ImageSizeProto

// optional uint64 width = 1;
inline bool ImageSizeProto::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageSizeProto::clear_width() {
  width_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImageSizeProto::width() const {
  // @@protoc_insertion_point(field_get:content.ImageSizeProto.width)
  return width_;
}
inline void ImageSizeProto::set_width(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
  // @@protoc_insertion_point(field_set:content.ImageSizeProto.width)
}

// optional uint64 height = 2;
inline bool ImageSizeProto::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageSizeProto::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImageSizeProto::height() const {
  // @@protoc_insertion_point(field_get:content.ImageSizeProto.height)
  return height_;
}
inline void ImageSizeProto::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
  // @@protoc_insertion_point(field_set:content.ImageSizeProto.height)
}

// -------------------------------------------------------------------

// StoredPaymentInstrumentImageObject

// optional string src = 1;
inline bool StoredPaymentInstrumentImageObject::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoredPaymentInstrumentImageObject::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoredPaymentInstrumentImageObject::src() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentImageObject.src)
  return src_.GetNoArena();
}
inline void StoredPaymentInstrumentImageObject::set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentImageObject.src)
}
inline void StoredPaymentInstrumentImageObject::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentInstrumentImageObject.src)
}
inline void StoredPaymentInstrumentImageObject::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentInstrumentImageObject.src)
}
inline void StoredPaymentInstrumentImageObject::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentInstrumentImageObject.src)
}
inline std::string* StoredPaymentInstrumentImageObject::mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentImageObject.src)
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentInstrumentImageObject::release_src() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentImageObject.src)
  if (!has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentInstrumentImageObject::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentImageObject.src)
}

// optional string type = 2;
inline bool StoredPaymentInstrumentImageObject::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoredPaymentInstrumentImageObject::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StoredPaymentInstrumentImageObject::type() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentImageObject.type)
  return type_.GetNoArena();
}
inline void StoredPaymentInstrumentImageObject::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentImageObject.type)
}
inline void StoredPaymentInstrumentImageObject::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentInstrumentImageObject.type)
}
inline void StoredPaymentInstrumentImageObject::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentInstrumentImageObject.type)
}
inline void StoredPaymentInstrumentImageObject::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentInstrumentImageObject.type)
}
inline std::string* StoredPaymentInstrumentImageObject::mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentImageObject.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentInstrumentImageObject::release_type() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentImageObject.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentInstrumentImageObject::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentImageObject.type)
}

// repeated .content.ImageSizeProto sizes = 3;
inline int StoredPaymentInstrumentImageObject::sizes_size() const {
  return sizes_.size();
}
inline void StoredPaymentInstrumentImageObject::clear_sizes() {
  sizes_.Clear();
}
inline ::content::ImageSizeProto* StoredPaymentInstrumentImageObject::mutable_sizes(int index) {
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentImageObject.sizes)
  return sizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ImageSizeProto >*
StoredPaymentInstrumentImageObject::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:content.StoredPaymentInstrumentImageObject.sizes)
  return &sizes_;
}
inline const ::content::ImageSizeProto& StoredPaymentInstrumentImageObject::sizes(int index) const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentImageObject.sizes)
  return sizes_.Get(index);
}
inline ::content::ImageSizeProto* StoredPaymentInstrumentImageObject::add_sizes() {
  // @@protoc_insertion_point(field_add:content.StoredPaymentInstrumentImageObject.sizes)
  return sizes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ImageSizeProto >&
StoredPaymentInstrumentImageObject::sizes() const {
  // @@protoc_insertion_point(field_list:content.StoredPaymentInstrumentImageObject.sizes)
  return sizes_;
}

// -------------------------------------------------------------------

// StoredPaymentInstrumentProto

// optional int64 registration_id = 1;
inline bool StoredPaymentInstrumentProto::has_registration_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StoredPaymentInstrumentProto::clear_registration_id() {
  registration_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StoredPaymentInstrumentProto::registration_id() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.registration_id)
  return registration_id_;
}
inline void StoredPaymentInstrumentProto::set_registration_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  registration_id_ = value;
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.registration_id)
}

// optional string instrument_key = 2;
inline bool StoredPaymentInstrumentProto::has_instrument_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoredPaymentInstrumentProto::clear_instrument_key() {
  instrument_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoredPaymentInstrumentProto::instrument_key() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.instrument_key)
  return instrument_key_.GetNoArena();
}
inline void StoredPaymentInstrumentProto::set_instrument_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  instrument_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.instrument_key)
}
inline void StoredPaymentInstrumentProto::set_instrument_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  instrument_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentInstrumentProto.instrument_key)
}
inline void StoredPaymentInstrumentProto::set_instrument_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  instrument_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentInstrumentProto.instrument_key)
}
inline void StoredPaymentInstrumentProto::set_instrument_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  instrument_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentInstrumentProto.instrument_key)
}
inline std::string* StoredPaymentInstrumentProto::mutable_instrument_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.instrument_key)
  return instrument_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentInstrumentProto::release_instrument_key() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentProto.instrument_key)
  if (!has_instrument_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return instrument_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentInstrumentProto::set_allocated_instrument_key(std::string* instrument_key) {
  if (instrument_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  instrument_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_key);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentProto.instrument_key)
}

// optional string name = 3;
inline bool StoredPaymentInstrumentProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoredPaymentInstrumentProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StoredPaymentInstrumentProto::name() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.name)
  return name_.GetNoArena();
}
inline void StoredPaymentInstrumentProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.name)
}
inline void StoredPaymentInstrumentProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentInstrumentProto.name)
}
inline void StoredPaymentInstrumentProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentInstrumentProto.name)
}
inline void StoredPaymentInstrumentProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentInstrumentProto.name)
}
inline std::string* StoredPaymentInstrumentProto::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentInstrumentProto::release_name() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentInstrumentProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentProto.name)
}

// optional string method = 4;
inline bool StoredPaymentInstrumentProto::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoredPaymentInstrumentProto::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StoredPaymentInstrumentProto::method() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.method)
  return method_.GetNoArena();
}
inline void StoredPaymentInstrumentProto::set_method(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.method)
}
inline void StoredPaymentInstrumentProto::set_method(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentInstrumentProto.method)
}
inline void StoredPaymentInstrumentProto::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentInstrumentProto.method)
}
inline void StoredPaymentInstrumentProto::set_method(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentInstrumentProto.method)
}
inline std::string* StoredPaymentInstrumentProto::mutable_method() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.method)
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentInstrumentProto::release_method() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentProto.method)
  if (!has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return method_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentInstrumentProto::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentProto.method)
}

// optional string stringified_capabilities = 5;
inline bool StoredPaymentInstrumentProto::has_stringified_capabilities() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoredPaymentInstrumentProto::clear_stringified_capabilities() {
  stringified_capabilities_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& StoredPaymentInstrumentProto::stringified_capabilities() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.stringified_capabilities)
  return stringified_capabilities_.GetNoArena();
}
inline void StoredPaymentInstrumentProto::set_stringified_capabilities(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  stringified_capabilities_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.stringified_capabilities)
}
inline void StoredPaymentInstrumentProto::set_stringified_capabilities(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  stringified_capabilities_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentInstrumentProto.stringified_capabilities)
}
inline void StoredPaymentInstrumentProto::set_stringified_capabilities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  stringified_capabilities_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentInstrumentProto.stringified_capabilities)
}
inline void StoredPaymentInstrumentProto::set_stringified_capabilities(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  stringified_capabilities_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentInstrumentProto.stringified_capabilities)
}
inline std::string* StoredPaymentInstrumentProto::mutable_stringified_capabilities() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.stringified_capabilities)
  return stringified_capabilities_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentInstrumentProto::release_stringified_capabilities() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentProto.stringified_capabilities)
  if (!has_stringified_capabilities()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return stringified_capabilities_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentInstrumentProto::set_allocated_stringified_capabilities(std::string* stringified_capabilities) {
  if (stringified_capabilities != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  stringified_capabilities_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stringified_capabilities);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentProto.stringified_capabilities)
}

// repeated .content.StoredPaymentInstrumentImageObject icons = 6;
inline int StoredPaymentInstrumentProto::icons_size() const {
  return icons_.size();
}
inline void StoredPaymentInstrumentProto::clear_icons() {
  icons_.Clear();
}
inline ::content::StoredPaymentInstrumentImageObject* StoredPaymentInstrumentProto::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.icons)
  return icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredPaymentInstrumentImageObject >*
StoredPaymentInstrumentProto::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:content.StoredPaymentInstrumentProto.icons)
  return &icons_;
}
inline const ::content::StoredPaymentInstrumentImageObject& StoredPaymentInstrumentProto::icons(int index) const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.icons)
  return icons_.Get(index);
}
inline ::content::StoredPaymentInstrumentImageObject* StoredPaymentInstrumentProto::add_icons() {
  // @@protoc_insertion_point(field_add:content.StoredPaymentInstrumentProto.icons)
  return icons_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredPaymentInstrumentImageObject >&
StoredPaymentInstrumentProto::icons() const {
  // @@protoc_insertion_point(field_list:content.StoredPaymentInstrumentProto.icons)
  return icons_;
}

// optional string decoded_instrument_icon = 7;
inline bool StoredPaymentInstrumentProto::has_decoded_instrument_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoredPaymentInstrumentProto::clear_decoded_instrument_icon() {
  decoded_instrument_icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& StoredPaymentInstrumentProto::decoded_instrument_icon() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
  return decoded_instrument_icon_.GetNoArena();
}
inline void StoredPaymentInstrumentProto::set_decoded_instrument_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  decoded_instrument_icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
}
inline void StoredPaymentInstrumentProto::set_decoded_instrument_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  decoded_instrument_icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
}
inline void StoredPaymentInstrumentProto::set_decoded_instrument_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  decoded_instrument_icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
}
inline void StoredPaymentInstrumentProto::set_decoded_instrument_icon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  decoded_instrument_icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
}
inline std::string* StoredPaymentInstrumentProto::mutable_decoded_instrument_icon() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
  return decoded_instrument_icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentInstrumentProto::release_decoded_instrument_icon() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
  if (!has_decoded_instrument_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return decoded_instrument_icon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentInstrumentProto::set_allocated_decoded_instrument_icon(std::string* decoded_instrument_icon) {
  if (decoded_instrument_icon != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  decoded_instrument_icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decoded_instrument_icon);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
}

// repeated int32 supported_card_networks = 8;
inline int StoredPaymentInstrumentProto::supported_card_networks_size() const {
  return supported_card_networks_.size();
}
inline void StoredPaymentInstrumentProto::clear_supported_card_networks() {
  supported_card_networks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoredPaymentInstrumentProto::supported_card_networks(int index) const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.supported_card_networks)
  return supported_card_networks_.Get(index);
}
inline void StoredPaymentInstrumentProto::set_supported_card_networks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  supported_card_networks_.Set(index, value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.supported_card_networks)
}
inline void StoredPaymentInstrumentProto::add_supported_card_networks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  supported_card_networks_.Add(value);
  // @@protoc_insertion_point(field_add:content.StoredPaymentInstrumentProto.supported_card_networks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StoredPaymentInstrumentProto::supported_card_networks() const {
  // @@protoc_insertion_point(field_list:content.StoredPaymentInstrumentProto.supported_card_networks)
  return supported_card_networks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StoredPaymentInstrumentProto::mutable_supported_card_networks() {
  // @@protoc_insertion_point(field_mutable_list:content.StoredPaymentInstrumentProto.supported_card_networks)
  return &supported_card_networks_;
}

// -------------------------------------------------------------------

// StoredRelatedApplicationProto

// optional string platform = 1;
inline bool StoredRelatedApplicationProto::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoredRelatedApplicationProto::clear_platform() {
  platform_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoredRelatedApplicationProto::platform() const {
  // @@protoc_insertion_point(field_get:content.StoredRelatedApplicationProto.platform)
  return platform_.GetNoArena();
}
inline void StoredRelatedApplicationProto::set_platform(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredRelatedApplicationProto.platform)
}
inline void StoredRelatedApplicationProto::set_platform(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredRelatedApplicationProto.platform)
}
inline void StoredRelatedApplicationProto::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredRelatedApplicationProto.platform)
}
inline void StoredRelatedApplicationProto::set_platform(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredRelatedApplicationProto.platform)
}
inline std::string* StoredRelatedApplicationProto::mutable_platform() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.StoredRelatedApplicationProto.platform)
  return platform_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredRelatedApplicationProto::release_platform() {
  // @@protoc_insertion_point(field_release:content.StoredRelatedApplicationProto.platform)
  if (!has_platform()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return platform_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredRelatedApplicationProto::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  platform_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:content.StoredRelatedApplicationProto.platform)
}

// optional string id = 2;
inline bool StoredRelatedApplicationProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoredRelatedApplicationProto::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StoredRelatedApplicationProto::id() const {
  // @@protoc_insertion_point(field_get:content.StoredRelatedApplicationProto.id)
  return id_.GetNoArena();
}
inline void StoredRelatedApplicationProto::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredRelatedApplicationProto.id)
}
inline void StoredRelatedApplicationProto::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredRelatedApplicationProto.id)
}
inline void StoredRelatedApplicationProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredRelatedApplicationProto.id)
}
inline void StoredRelatedApplicationProto::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredRelatedApplicationProto.id)
}
inline std::string* StoredRelatedApplicationProto::mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.StoredRelatedApplicationProto.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredRelatedApplicationProto::release_id() {
  // @@protoc_insertion_point(field_release:content.StoredRelatedApplicationProto.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredRelatedApplicationProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:content.StoredRelatedApplicationProto.id)
}

// -------------------------------------------------------------------

// SupportedDelegationsProto

// optional bool shipping_address = 1;
inline bool SupportedDelegationsProto::has_shipping_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SupportedDelegationsProto::clear_shipping_address() {
  shipping_address_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SupportedDelegationsProto::shipping_address() const {
  // @@protoc_insertion_point(field_get:content.SupportedDelegationsProto.shipping_address)
  return shipping_address_;
}
inline void SupportedDelegationsProto::set_shipping_address(bool value) {
  _has_bits_[0] |= 0x00000001u;
  shipping_address_ = value;
  // @@protoc_insertion_point(field_set:content.SupportedDelegationsProto.shipping_address)
}

// optional bool payer_name = 2;
inline bool SupportedDelegationsProto::has_payer_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SupportedDelegationsProto::clear_payer_name() {
  payer_name_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SupportedDelegationsProto::payer_name() const {
  // @@protoc_insertion_point(field_get:content.SupportedDelegationsProto.payer_name)
  return payer_name_;
}
inline void SupportedDelegationsProto::set_payer_name(bool value) {
  _has_bits_[0] |= 0x00000002u;
  payer_name_ = value;
  // @@protoc_insertion_point(field_set:content.SupportedDelegationsProto.payer_name)
}

// optional bool payer_phone = 3;
inline bool SupportedDelegationsProto::has_payer_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SupportedDelegationsProto::clear_payer_phone() {
  payer_phone_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SupportedDelegationsProto::payer_phone() const {
  // @@protoc_insertion_point(field_get:content.SupportedDelegationsProto.payer_phone)
  return payer_phone_;
}
inline void SupportedDelegationsProto::set_payer_phone(bool value) {
  _has_bits_[0] |= 0x00000004u;
  payer_phone_ = value;
  // @@protoc_insertion_point(field_set:content.SupportedDelegationsProto.payer_phone)
}

// optional bool payer_email = 4;
inline bool SupportedDelegationsProto::has_payer_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SupportedDelegationsProto::clear_payer_email() {
  payer_email_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SupportedDelegationsProto::payer_email() const {
  // @@protoc_insertion_point(field_get:content.SupportedDelegationsProto.payer_email)
  return payer_email_;
}
inline void SupportedDelegationsProto::set_payer_email(bool value) {
  _has_bits_[0] |= 0x00000008u;
  payer_email_ = value;
  // @@protoc_insertion_point(field_set:content.SupportedDelegationsProto.payer_email)
}

// -------------------------------------------------------------------

// StoredPaymentAppProto

// optional int64 registration_id = 1;
inline bool StoredPaymentAppProto::has_registration_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StoredPaymentAppProto::clear_registration_id() {
  registration_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StoredPaymentAppProto::registration_id() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.registration_id)
  return registration_id_;
}
inline void StoredPaymentAppProto::set_registration_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  registration_id_ = value;
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.registration_id)
}

// optional string scope = 2;
inline bool StoredPaymentAppProto::has_scope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoredPaymentAppProto::clear_scope() {
  scope_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoredPaymentAppProto::scope() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.scope)
  return scope_.GetNoArena();
}
inline void StoredPaymentAppProto::set_scope(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.scope)
}
inline void StoredPaymentAppProto::set_scope(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scope_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentAppProto.scope)
}
inline void StoredPaymentAppProto::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentAppProto.scope)
}
inline void StoredPaymentAppProto::set_scope(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentAppProto.scope)
}
inline std::string* StoredPaymentAppProto::mutable_scope() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.scope)
  return scope_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentAppProto::release_scope() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentAppProto.scope)
  if (!has_scope()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scope_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentAppProto::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scope_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentAppProto.scope)
}

// optional string name = 3;
inline bool StoredPaymentAppProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoredPaymentAppProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StoredPaymentAppProto::name() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.name)
  return name_.GetNoArena();
}
inline void StoredPaymentAppProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.name)
}
inline void StoredPaymentAppProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentAppProto.name)
}
inline void StoredPaymentAppProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentAppProto.name)
}
inline void StoredPaymentAppProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentAppProto.name)
}
inline std::string* StoredPaymentAppProto::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentAppProto::release_name() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentAppProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentAppProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentAppProto.name)
}

// optional string icon = 4;
inline bool StoredPaymentAppProto::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoredPaymentAppProto::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StoredPaymentAppProto::icon() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.icon)
  return icon_.GetNoArena();
}
inline void StoredPaymentAppProto::set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.icon)
}
inline void StoredPaymentAppProto::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentAppProto.icon)
}
inline void StoredPaymentAppProto::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentAppProto.icon)
}
inline void StoredPaymentAppProto::set_icon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentAppProto.icon)
}
inline std::string* StoredPaymentAppProto::mutable_icon() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.icon)
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentAppProto::release_icon() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentAppProto.icon)
  if (!has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return icon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentAppProto::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentAppProto.icon)
}

// optional bool prefer_related_applications = 5;
inline bool StoredPaymentAppProto::has_prefer_related_applications() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StoredPaymentAppProto::clear_prefer_related_applications() {
  prefer_related_applications_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool StoredPaymentAppProto::prefer_related_applications() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.prefer_related_applications)
  return prefer_related_applications_;
}
inline void StoredPaymentAppProto::set_prefer_related_applications(bool value) {
  _has_bits_[0] |= 0x00000040u;
  prefer_related_applications_ = value;
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.prefer_related_applications)
}

// repeated .content.StoredRelatedApplicationProto related_applications = 6;
inline int StoredPaymentAppProto::related_applications_size() const {
  return related_applications_.size();
}
inline void StoredPaymentAppProto::clear_related_applications() {
  related_applications_.Clear();
}
inline ::content::StoredRelatedApplicationProto* StoredPaymentAppProto::mutable_related_applications(int index) {
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.related_applications)
  return related_applications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredRelatedApplicationProto >*
StoredPaymentAppProto::mutable_related_applications() {
  // @@protoc_insertion_point(field_mutable_list:content.StoredPaymentAppProto.related_applications)
  return &related_applications_;
}
inline const ::content::StoredRelatedApplicationProto& StoredPaymentAppProto::related_applications(int index) const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.related_applications)
  return related_applications_.Get(index);
}
inline ::content::StoredRelatedApplicationProto* StoredPaymentAppProto::add_related_applications() {
  // @@protoc_insertion_point(field_add:content.StoredPaymentAppProto.related_applications)
  return related_applications_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredRelatedApplicationProto >&
StoredPaymentAppProto::related_applications() const {
  // @@protoc_insertion_point(field_list:content.StoredPaymentAppProto.related_applications)
  return related_applications_;
}

// optional string user_hint = 7;
inline bool StoredPaymentAppProto::has_user_hint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoredPaymentAppProto::clear_user_hint() {
  user_hint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& StoredPaymentAppProto::user_hint() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.user_hint)
  return user_hint_.GetNoArena();
}
inline void StoredPaymentAppProto::set_user_hint(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  user_hint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.user_hint)
}
inline void StoredPaymentAppProto::set_user_hint(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  user_hint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.StoredPaymentAppProto.user_hint)
}
inline void StoredPaymentAppProto::set_user_hint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  user_hint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.StoredPaymentAppProto.user_hint)
}
inline void StoredPaymentAppProto::set_user_hint(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  user_hint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.StoredPaymentAppProto.user_hint)
}
inline std::string* StoredPaymentAppProto::mutable_user_hint() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.user_hint)
  return user_hint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoredPaymentAppProto::release_user_hint() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentAppProto.user_hint)
  if (!has_user_hint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return user_hint_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoredPaymentAppProto::set_allocated_user_hint(std::string* user_hint) {
  if (user_hint != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_hint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_hint);
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentAppProto.user_hint)
}

// optional .content.SupportedDelegationsProto supported_delegations = 8;
inline bool StoredPaymentAppProto::has_supported_delegations() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoredPaymentAppProto::clear_supported_delegations() {
  if (supported_delegations_ != nullptr) supported_delegations_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::content::SupportedDelegationsProto& StoredPaymentAppProto::supported_delegations() const {
  const ::content::SupportedDelegationsProto* p = supported_delegations_;
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.supported_delegations)
  return p != nullptr ? *p : *reinterpret_cast<const ::content::SupportedDelegationsProto*>(
      &::content::_SupportedDelegationsProto_default_instance_);
}
inline ::content::SupportedDelegationsProto* StoredPaymentAppProto::release_supported_delegations() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentAppProto.supported_delegations)
  _has_bits_[0] &= ~0x00000010u;
  ::content::SupportedDelegationsProto* temp = supported_delegations_;
  supported_delegations_ = nullptr;
  return temp;
}
inline ::content::SupportedDelegationsProto* StoredPaymentAppProto::mutable_supported_delegations() {
  _has_bits_[0] |= 0x00000010u;
  if (supported_delegations_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::SupportedDelegationsProto>(GetArenaNoVirtual());
    supported_delegations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.supported_delegations)
  return supported_delegations_;
}
inline void StoredPaymentAppProto::set_allocated_supported_delegations(::content::SupportedDelegationsProto* supported_delegations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete supported_delegations_;
  }
  if (supported_delegations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      supported_delegations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supported_delegations, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  supported_delegations_ = supported_delegations;
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentAppProto.supported_delegations)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payment_5fapp_2eproto
