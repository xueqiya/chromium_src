// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_database_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_notification_5fdatabase_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_notification_5fdatabase_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_notification_5fdatabase_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_notification_5fdatabase_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace content {
class NotificationDatabaseDataProto;
class NotificationDatabaseDataProtoDefaultTypeInternal;
extern NotificationDatabaseDataProtoDefaultTypeInternal _NotificationDatabaseDataProto_default_instance_;
class NotificationDatabaseDataProto_NotificationAction;
class NotificationDatabaseDataProto_NotificationActionDefaultTypeInternal;
extern NotificationDatabaseDataProto_NotificationActionDefaultTypeInternal _NotificationDatabaseDataProto_NotificationAction_default_instance_;
class NotificationDatabaseDataProto_NotificationData;
class NotificationDatabaseDataProto_NotificationDataDefaultTypeInternal;
extern NotificationDatabaseDataProto_NotificationDataDefaultTypeInternal _NotificationDatabaseDataProto_NotificationData_default_instance_;
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::NotificationDatabaseDataProto* Arena::CreateMaybeMessage<::content::NotificationDatabaseDataProto>(Arena*);
template<> ::content::NotificationDatabaseDataProto_NotificationAction* Arena::CreateMaybeMessage<::content::NotificationDatabaseDataProto_NotificationAction>(Arena*);
template<> ::content::NotificationDatabaseDataProto_NotificationData* Arena::CreateMaybeMessage<::content::NotificationDatabaseDataProto_NotificationData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {

enum NotificationDatabaseDataProto_NotificationAction_Type : int {
  NotificationDatabaseDataProto_NotificationAction_Type_BUTTON = 0,
  NotificationDatabaseDataProto_NotificationAction_Type_TEXT = 1
};
bool NotificationDatabaseDataProto_NotificationAction_Type_IsValid(int value);
constexpr NotificationDatabaseDataProto_NotificationAction_Type NotificationDatabaseDataProto_NotificationAction_Type_Type_MIN = NotificationDatabaseDataProto_NotificationAction_Type_BUTTON;
constexpr NotificationDatabaseDataProto_NotificationAction_Type NotificationDatabaseDataProto_NotificationAction_Type_Type_MAX = NotificationDatabaseDataProto_NotificationAction_Type_TEXT;
constexpr int NotificationDatabaseDataProto_NotificationAction_Type_Type_ARRAYSIZE = NotificationDatabaseDataProto_NotificationAction_Type_Type_MAX + 1;

const std::string& NotificationDatabaseDataProto_NotificationAction_Type_Name(NotificationDatabaseDataProto_NotificationAction_Type value);
template<typename T>
inline const std::string& NotificationDatabaseDataProto_NotificationAction_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationDatabaseDataProto_NotificationAction_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationDatabaseDataProto_NotificationAction_Type_Name.");
  return NotificationDatabaseDataProto_NotificationAction_Type_Name(static_cast<NotificationDatabaseDataProto_NotificationAction_Type>(enum_t_value));
}
bool NotificationDatabaseDataProto_NotificationAction_Type_Parse(
    const std::string& name, NotificationDatabaseDataProto_NotificationAction_Type* value);
enum NotificationDatabaseDataProto_NotificationData_Direction : int {
  NotificationDatabaseDataProto_NotificationData_Direction_LEFT_TO_RIGHT = 0,
  NotificationDatabaseDataProto_NotificationData_Direction_RIGHT_TO_LEFT = 1,
  NotificationDatabaseDataProto_NotificationData_Direction_AUTO = 2
};
bool NotificationDatabaseDataProto_NotificationData_Direction_IsValid(int value);
constexpr NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData_Direction_Direction_MIN = NotificationDatabaseDataProto_NotificationData_Direction_LEFT_TO_RIGHT;
constexpr NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData_Direction_Direction_MAX = NotificationDatabaseDataProto_NotificationData_Direction_AUTO;
constexpr int NotificationDatabaseDataProto_NotificationData_Direction_Direction_ARRAYSIZE = NotificationDatabaseDataProto_NotificationData_Direction_Direction_MAX + 1;

const std::string& NotificationDatabaseDataProto_NotificationData_Direction_Name(NotificationDatabaseDataProto_NotificationData_Direction value);
template<typename T>
inline const std::string& NotificationDatabaseDataProto_NotificationData_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationDatabaseDataProto_NotificationData_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationDatabaseDataProto_NotificationData_Direction_Name.");
  return NotificationDatabaseDataProto_NotificationData_Direction_Name(static_cast<NotificationDatabaseDataProto_NotificationData_Direction>(enum_t_value));
}
bool NotificationDatabaseDataProto_NotificationData_Direction_Parse(
    const std::string& name, NotificationDatabaseDataProto_NotificationData_Direction* value);
enum NotificationDatabaseDataProto_ClosedReason : int {
  NotificationDatabaseDataProto_ClosedReason_USER = 0,
  NotificationDatabaseDataProto_ClosedReason_DEVELOPER = 1,
  NotificationDatabaseDataProto_ClosedReason_UNKNOWN = 2
};
bool NotificationDatabaseDataProto_ClosedReason_IsValid(int value);
constexpr NotificationDatabaseDataProto_ClosedReason NotificationDatabaseDataProto_ClosedReason_ClosedReason_MIN = NotificationDatabaseDataProto_ClosedReason_USER;
constexpr NotificationDatabaseDataProto_ClosedReason NotificationDatabaseDataProto_ClosedReason_ClosedReason_MAX = NotificationDatabaseDataProto_ClosedReason_UNKNOWN;
constexpr int NotificationDatabaseDataProto_ClosedReason_ClosedReason_ARRAYSIZE = NotificationDatabaseDataProto_ClosedReason_ClosedReason_MAX + 1;

const std::string& NotificationDatabaseDataProto_ClosedReason_Name(NotificationDatabaseDataProto_ClosedReason value);
template<typename T>
inline const std::string& NotificationDatabaseDataProto_ClosedReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationDatabaseDataProto_ClosedReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationDatabaseDataProto_ClosedReason_Name.");
  return NotificationDatabaseDataProto_ClosedReason_Name(static_cast<NotificationDatabaseDataProto_ClosedReason>(enum_t_value));
}
bool NotificationDatabaseDataProto_ClosedReason_Parse(
    const std::string& name, NotificationDatabaseDataProto_ClosedReason* value);
// ===================================================================

class NotificationDatabaseDataProto_NotificationAction :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.NotificationDatabaseDataProto.NotificationAction) */ {
 public:
  NotificationDatabaseDataProto_NotificationAction();
  virtual ~NotificationDatabaseDataProto_NotificationAction();

  NotificationDatabaseDataProto_NotificationAction(const NotificationDatabaseDataProto_NotificationAction& from);
  NotificationDatabaseDataProto_NotificationAction(NotificationDatabaseDataProto_NotificationAction&& from) noexcept
    : NotificationDatabaseDataProto_NotificationAction() {
    *this = ::std::move(from);
  }

  inline NotificationDatabaseDataProto_NotificationAction& operator=(const NotificationDatabaseDataProto_NotificationAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationDatabaseDataProto_NotificationAction& operator=(NotificationDatabaseDataProto_NotificationAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationDatabaseDataProto_NotificationAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationDatabaseDataProto_NotificationAction* internal_default_instance() {
    return reinterpret_cast<const NotificationDatabaseDataProto_NotificationAction*>(
               &_NotificationDatabaseDataProto_NotificationAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotificationDatabaseDataProto_NotificationAction& a, NotificationDatabaseDataProto_NotificationAction& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationDatabaseDataProto_NotificationAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationDatabaseDataProto_NotificationAction* New() const final {
    return CreateMaybeMessage<NotificationDatabaseDataProto_NotificationAction>(nullptr);
  }

  NotificationDatabaseDataProto_NotificationAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationDatabaseDataProto_NotificationAction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationDatabaseDataProto_NotificationAction& from);
  void MergeFrom(const NotificationDatabaseDataProto_NotificationAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationDatabaseDataProto_NotificationAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.NotificationDatabaseDataProto.NotificationAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NotificationDatabaseDataProto_NotificationAction_Type Type;
  static constexpr Type BUTTON =
    NotificationDatabaseDataProto_NotificationAction_Type_BUTTON;
  static constexpr Type TEXT =
    NotificationDatabaseDataProto_NotificationAction_Type_TEXT;
  static inline bool Type_IsValid(int value) {
    return NotificationDatabaseDataProto_NotificationAction_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    NotificationDatabaseDataProto_NotificationAction_Type_Type_MIN;
  static constexpr Type Type_MAX =
    NotificationDatabaseDataProto_NotificationAction_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    NotificationDatabaseDataProto_NotificationAction_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return NotificationDatabaseDataProto_NotificationAction_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return NotificationDatabaseDataProto_NotificationAction_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kTitleFieldNumber = 2,
    kIconFieldNumber = 3,
    kPlaceholderFieldNumber = 5,
    kTypeFieldNumber = 4,
  };
  // optional string action = 1;
  bool has_action() const;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string icon = 3;
  bool has_icon() const;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);

  // optional string placeholder = 5;
  bool has_placeholder() const;
  void clear_placeholder();
  const std::string& placeholder() const;
  void set_placeholder(const std::string& value);
  void set_placeholder(std::string&& value);
  void set_placeholder(const char* value);
  void set_placeholder(const char* value, size_t size);
  std::string* mutable_placeholder();
  std::string* release_placeholder();
  void set_allocated_placeholder(std::string* placeholder);

  // optional .content.NotificationDatabaseDataProto.NotificationAction.Type type = 4;
  bool has_type() const;
  void clear_type();
  ::content::NotificationDatabaseDataProto_NotificationAction_Type type() const;
  void set_type(::content::NotificationDatabaseDataProto_NotificationAction_Type value);

  // @@protoc_insertion_point(class_scope:content.NotificationDatabaseDataProto.NotificationAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeholder_;
  int type_;
  friend struct ::TableStruct_notification_5fdatabase_5fdata_2eproto;
};
// -------------------------------------------------------------------

class NotificationDatabaseDataProto_NotificationData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.NotificationDatabaseDataProto.NotificationData) */ {
 public:
  NotificationDatabaseDataProto_NotificationData();
  virtual ~NotificationDatabaseDataProto_NotificationData();

  NotificationDatabaseDataProto_NotificationData(const NotificationDatabaseDataProto_NotificationData& from);
  NotificationDatabaseDataProto_NotificationData(NotificationDatabaseDataProto_NotificationData&& from) noexcept
    : NotificationDatabaseDataProto_NotificationData() {
    *this = ::std::move(from);
  }

  inline NotificationDatabaseDataProto_NotificationData& operator=(const NotificationDatabaseDataProto_NotificationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationDatabaseDataProto_NotificationData& operator=(NotificationDatabaseDataProto_NotificationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationDatabaseDataProto_NotificationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationDatabaseDataProto_NotificationData* internal_default_instance() {
    return reinterpret_cast<const NotificationDatabaseDataProto_NotificationData*>(
               &_NotificationDatabaseDataProto_NotificationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NotificationDatabaseDataProto_NotificationData& a, NotificationDatabaseDataProto_NotificationData& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationDatabaseDataProto_NotificationData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationDatabaseDataProto_NotificationData* New() const final {
    return CreateMaybeMessage<NotificationDatabaseDataProto_NotificationData>(nullptr);
  }

  NotificationDatabaseDataProto_NotificationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationDatabaseDataProto_NotificationData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationDatabaseDataProto_NotificationData& from);
  void MergeFrom(const NotificationDatabaseDataProto_NotificationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationDatabaseDataProto_NotificationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.NotificationDatabaseDataProto.NotificationData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NotificationDatabaseDataProto_NotificationData_Direction Direction;
  static constexpr Direction LEFT_TO_RIGHT =
    NotificationDatabaseDataProto_NotificationData_Direction_LEFT_TO_RIGHT;
  static constexpr Direction RIGHT_TO_LEFT =
    NotificationDatabaseDataProto_NotificationData_Direction_RIGHT_TO_LEFT;
  static constexpr Direction AUTO =
    NotificationDatabaseDataProto_NotificationData_Direction_AUTO;
  static inline bool Direction_IsValid(int value) {
    return NotificationDatabaseDataProto_NotificationData_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    NotificationDatabaseDataProto_NotificationData_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    NotificationDatabaseDataProto_NotificationData_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    NotificationDatabaseDataProto_NotificationData_Direction_Direction_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return NotificationDatabaseDataProto_NotificationData_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(const std::string& name,
      Direction* value) {
    return NotificationDatabaseDataProto_NotificationData_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVibrationPatternFieldNumber = 9,
    kActionsFieldNumber = 10,
    kTitleFieldNumber = 1,
    kLangFieldNumber = 3,
    kBodyFieldNumber = 4,
    kTagFieldNumber = 5,
    kIconFieldNumber = 6,
    kDataFieldNumber = 8,
    kBadgeFieldNumber = 14,
    kImageFieldNumber = 15,
    kDirectionFieldNumber = 2,
    kRenotifyFieldNumber = 13,
    kSilentFieldNumber = 7,
    kRequireInteractionFieldNumber = 11,
    kTimestampFieldNumber = 12,
    kShowTriggerTimestampFieldNumber = 16,
  };
  // repeated int32 vibration_pattern = 9 [packed = true];
  int vibration_pattern_size() const;
  void clear_vibration_pattern();
  ::PROTOBUF_NAMESPACE_ID::int32 vibration_pattern(int index) const;
  void set_vibration_pattern(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_vibration_pattern(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      vibration_pattern() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_vibration_pattern();

  // repeated .content.NotificationDatabaseDataProto.NotificationAction actions = 10;
  int actions_size() const;
  void clear_actions();
  ::content::NotificationDatabaseDataProto_NotificationAction* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::NotificationDatabaseDataProto_NotificationAction >*
      mutable_actions();
  const ::content::NotificationDatabaseDataProto_NotificationAction& actions(int index) const;
  ::content::NotificationDatabaseDataProto_NotificationAction* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::NotificationDatabaseDataProto_NotificationAction >&
      actions() const;

  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string lang = 3;
  bool has_lang() const;
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);

  // optional string body = 4;
  bool has_body() const;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // optional string tag = 5;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional string icon = 6;
  bool has_icon() const;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);

  // optional bytes data = 8;
  bool has_data() const;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // optional string badge = 14;
  bool has_badge() const;
  void clear_badge();
  const std::string& badge() const;
  void set_badge(const std::string& value);
  void set_badge(std::string&& value);
  void set_badge(const char* value);
  void set_badge(const char* value, size_t size);
  std::string* mutable_badge();
  std::string* release_badge();
  void set_allocated_badge(std::string* badge);

  // optional string image = 15;
  bool has_image() const;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);

  // optional .content.NotificationDatabaseDataProto.NotificationData.Direction direction = 2;
  bool has_direction() const;
  void clear_direction();
  ::content::NotificationDatabaseDataProto_NotificationData_Direction direction() const;
  void set_direction(::content::NotificationDatabaseDataProto_NotificationData_Direction value);

  // optional bool renotify = 13;
  bool has_renotify() const;
  void clear_renotify();
  bool renotify() const;
  void set_renotify(bool value);

  // optional bool silent = 7;
  bool has_silent() const;
  void clear_silent();
  bool silent() const;
  void set_silent(bool value);

  // optional bool require_interaction = 11;
  bool has_require_interaction() const;
  void clear_require_interaction();
  bool require_interaction() const;
  void set_require_interaction(bool value);

  // optional int64 timestamp = 12;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 show_trigger_timestamp = 16;
  bool has_show_trigger_timestamp() const;
  void clear_show_trigger_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 show_trigger_timestamp() const;
  void set_show_trigger_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:content.NotificationDatabaseDataProto.NotificationData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > vibration_pattern_;
  mutable std::atomic<int> _vibration_pattern_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::NotificationDatabaseDataProto_NotificationAction > actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr badge_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  int direction_;
  bool renotify_;
  bool silent_;
  bool require_interaction_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 show_trigger_timestamp_;
  friend struct ::TableStruct_notification_5fdatabase_5fdata_2eproto;
};
// -------------------------------------------------------------------

class NotificationDatabaseDataProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.NotificationDatabaseDataProto) */ {
 public:
  NotificationDatabaseDataProto();
  virtual ~NotificationDatabaseDataProto();

  NotificationDatabaseDataProto(const NotificationDatabaseDataProto& from);
  NotificationDatabaseDataProto(NotificationDatabaseDataProto&& from) noexcept
    : NotificationDatabaseDataProto() {
    *this = ::std::move(from);
  }

  inline NotificationDatabaseDataProto& operator=(const NotificationDatabaseDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationDatabaseDataProto& operator=(NotificationDatabaseDataProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationDatabaseDataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationDatabaseDataProto* internal_default_instance() {
    return reinterpret_cast<const NotificationDatabaseDataProto*>(
               &_NotificationDatabaseDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NotificationDatabaseDataProto& a, NotificationDatabaseDataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationDatabaseDataProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationDatabaseDataProto* New() const final {
    return CreateMaybeMessage<NotificationDatabaseDataProto>(nullptr);
  }

  NotificationDatabaseDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationDatabaseDataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationDatabaseDataProto& from);
  void MergeFrom(const NotificationDatabaseDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationDatabaseDataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.NotificationDatabaseDataProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NotificationDatabaseDataProto_NotificationAction NotificationAction;
  typedef NotificationDatabaseDataProto_NotificationData NotificationData;

  typedef NotificationDatabaseDataProto_ClosedReason ClosedReason;
  static constexpr ClosedReason USER =
    NotificationDatabaseDataProto_ClosedReason_USER;
  static constexpr ClosedReason DEVELOPER =
    NotificationDatabaseDataProto_ClosedReason_DEVELOPER;
  static constexpr ClosedReason UNKNOWN =
    NotificationDatabaseDataProto_ClosedReason_UNKNOWN;
  static inline bool ClosedReason_IsValid(int value) {
    return NotificationDatabaseDataProto_ClosedReason_IsValid(value);
  }
  static constexpr ClosedReason ClosedReason_MIN =
    NotificationDatabaseDataProto_ClosedReason_ClosedReason_MIN;
  static constexpr ClosedReason ClosedReason_MAX =
    NotificationDatabaseDataProto_ClosedReason_ClosedReason_MAX;
  static constexpr int ClosedReason_ARRAYSIZE =
    NotificationDatabaseDataProto_ClosedReason_ClosedReason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ClosedReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClosedReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClosedReason_Name.");
    return NotificationDatabaseDataProto_ClosedReason_Name(enum_t_value);
  }
  static inline bool ClosedReason_Parse(const std::string& name,
      ClosedReason* value) {
    return NotificationDatabaseDataProto_ClosedReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 2,
    kNotificationIdFieldNumber = 5,
    kNotificationDataFieldNumber = 4,
    kPersistentNotificationIdFieldNumber = 1,
    kServiceWorkerRegistrationIdFieldNumber = 3,
    kNumClicksFieldNumber = 7,
    kNumActionButtonClicksFieldNumber = 8,
    kCreationTimeMillisFieldNumber = 9,
    kTimeUntilFirstClickMillisFieldNumber = 10,
    kTimeUntilLastClickMillisFieldNumber = 11,
    kReplacedExistingNotificationFieldNumber = 6,
    kHasTriggeredFieldNumber = 14,
    kClosedReasonFieldNumber = 13,
    kTimeUntilCloseMillisFieldNumber = 12,
  };
  // optional string origin = 2;
  bool has_origin() const;
  void clear_origin();
  const std::string& origin() const;
  void set_origin(const std::string& value);
  void set_origin(std::string&& value);
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  std::string* mutable_origin();
  std::string* release_origin();
  void set_allocated_origin(std::string* origin);

  // optional string notification_id = 5;
  bool has_notification_id() const;
  void clear_notification_id();
  const std::string& notification_id() const;
  void set_notification_id(const std::string& value);
  void set_notification_id(std::string&& value);
  void set_notification_id(const char* value);
  void set_notification_id(const char* value, size_t size);
  std::string* mutable_notification_id();
  std::string* release_notification_id();
  void set_allocated_notification_id(std::string* notification_id);

  // optional .content.NotificationDatabaseDataProto.NotificationData notification_data = 4;
  bool has_notification_data() const;
  void clear_notification_data();
  const ::content::NotificationDatabaseDataProto_NotificationData& notification_data() const;
  ::content::NotificationDatabaseDataProto_NotificationData* release_notification_data();
  ::content::NotificationDatabaseDataProto_NotificationData* mutable_notification_data();
  void set_allocated_notification_data(::content::NotificationDatabaseDataProto_NotificationData* notification_data);

  // optional int64 persistent_notification_id = 1;
  bool has_persistent_notification_id() const;
  void clear_persistent_notification_id();
  ::PROTOBUF_NAMESPACE_ID::int64 persistent_notification_id() const;
  void set_persistent_notification_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 service_worker_registration_id = 3;
  bool has_service_worker_registration_id() const;
  void clear_service_worker_registration_id();
  ::PROTOBUF_NAMESPACE_ID::int64 service_worker_registration_id() const;
  void set_service_worker_registration_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 num_clicks = 7;
  bool has_num_clicks() const;
  void clear_num_clicks();
  ::PROTOBUF_NAMESPACE_ID::int32 num_clicks() const;
  void set_num_clicks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_action_button_clicks = 8;
  bool has_num_action_button_clicks() const;
  void clear_num_action_button_clicks();
  ::PROTOBUF_NAMESPACE_ID::int32 num_action_button_clicks() const;
  void set_num_action_button_clicks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 creation_time_millis = 9;
  bool has_creation_time_millis() const;
  void clear_creation_time_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_millis() const;
  void set_creation_time_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 time_until_first_click_millis = 10;
  bool has_time_until_first_click_millis() const;
  void clear_time_until_first_click_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 time_until_first_click_millis() const;
  void set_time_until_first_click_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 time_until_last_click_millis = 11;
  bool has_time_until_last_click_millis() const;
  void clear_time_until_last_click_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 time_until_last_click_millis() const;
  void set_time_until_last_click_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool replaced_existing_notification = 6;
  bool has_replaced_existing_notification() const;
  void clear_replaced_existing_notification();
  bool replaced_existing_notification() const;
  void set_replaced_existing_notification(bool value);

  // optional bool has_triggered = 14;
  bool has_has_triggered() const;
  void clear_has_triggered();
  bool has_triggered() const;
  void set_has_triggered(bool value);

  // optional .content.NotificationDatabaseDataProto.ClosedReason closed_reason = 13;
  bool has_closed_reason() const;
  void clear_closed_reason();
  ::content::NotificationDatabaseDataProto_ClosedReason closed_reason() const;
  void set_closed_reason(::content::NotificationDatabaseDataProto_ClosedReason value);

  // optional int64 time_until_close_millis = 12;
  bool has_time_until_close_millis() const;
  void clear_time_until_close_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 time_until_close_millis() const;
  void set_time_until_close_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:content.NotificationDatabaseDataProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_id_;
  ::content::NotificationDatabaseDataProto_NotificationData* notification_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 persistent_notification_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 service_worker_registration_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_clicks_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_action_button_clicks_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_millis_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_until_first_click_millis_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_until_last_click_millis_;
  bool replaced_existing_notification_;
  bool has_triggered_;
  int closed_reason_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_until_close_millis_;
  friend struct ::TableStruct_notification_5fdatabase_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotificationDatabaseDataProto_NotificationAction

// optional string action = 1;
inline bool NotificationDatabaseDataProto_NotificationAction::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationAction::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationAction::action() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationAction.action)
  return action_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationAction::set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationAction.action)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_action(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationAction.action)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationAction.action)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_action(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationAction.action)
}
inline std::string* NotificationDatabaseDataProto_NotificationAction::mutable_action() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationAction.action)
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationAction::release_action() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationAction.action)
  if (!has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return action_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationAction::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationAction.action)
}

// optional string title = 2;
inline bool NotificationDatabaseDataProto_NotificationAction::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationAction::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationAction::title() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationAction.title)
  return title_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationAction::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationAction.title)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationAction.title)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationAction.title)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationAction.title)
}
inline std::string* NotificationDatabaseDataProto_NotificationAction::mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationAction.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationAction::release_title() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationAction.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationAction::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationAction.title)
}

// optional string icon = 3;
inline bool NotificationDatabaseDataProto_NotificationAction::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationAction::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationAction::icon() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationAction.icon)
  return icon_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationAction::set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationAction.icon)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationAction.icon)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationAction.icon)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_icon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationAction.icon)
}
inline std::string* NotificationDatabaseDataProto_NotificationAction::mutable_icon() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationAction.icon)
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationAction::release_icon() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationAction.icon)
  if (!has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return icon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationAction::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationAction.icon)
}

// optional .content.NotificationDatabaseDataProto.NotificationAction.Type type = 4;
inline bool NotificationDatabaseDataProto_NotificationAction::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationAction::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::content::NotificationDatabaseDataProto_NotificationAction_Type NotificationDatabaseDataProto_NotificationAction::type() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationAction.type)
  return static_cast< ::content::NotificationDatabaseDataProto_NotificationAction_Type >(type_);
}
inline void NotificationDatabaseDataProto_NotificationAction::set_type(::content::NotificationDatabaseDataProto_NotificationAction_Type value) {
  assert(::content::NotificationDatabaseDataProto_NotificationAction_Type_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationAction.type)
}

// optional string placeholder = 5;
inline bool NotificationDatabaseDataProto_NotificationAction::has_placeholder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationAction::clear_placeholder() {
  placeholder_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationAction::placeholder() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationAction.placeholder)
  return placeholder_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationAction::set_placeholder(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  placeholder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationAction.placeholder)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_placeholder(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  placeholder_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationAction.placeholder)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_placeholder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  placeholder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationAction.placeholder)
}
inline void NotificationDatabaseDataProto_NotificationAction::set_placeholder(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  placeholder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationAction.placeholder)
}
inline std::string* NotificationDatabaseDataProto_NotificationAction::mutable_placeholder() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationAction.placeholder)
  return placeholder_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationAction::release_placeholder() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationAction.placeholder)
  if (!has_placeholder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return placeholder_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationAction::set_allocated_placeholder(std::string* placeholder) {
  if (placeholder != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  placeholder_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placeholder);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationAction.placeholder)
}

// -------------------------------------------------------------------

// NotificationDatabaseDataProto_NotificationData

// optional string title = 1;
inline bool NotificationDatabaseDataProto_NotificationData::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationData::title() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.title)
  return title_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationData::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.title)
}
inline void NotificationDatabaseDataProto_NotificationData::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationData.title)
}
inline void NotificationDatabaseDataProto_NotificationData::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationData.title)
}
inline void NotificationDatabaseDataProto_NotificationData::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationData.title)
}
inline std::string* NotificationDatabaseDataProto_NotificationData::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationData.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationData::release_title() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationData.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationData.title)
}

// optional .content.NotificationDatabaseDataProto.NotificationData.Direction direction = 2;
inline bool NotificationDatabaseDataProto_NotificationData::has_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::content::NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::direction() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.direction)
  return static_cast< ::content::NotificationDatabaseDataProto_NotificationData_Direction >(direction_);
}
inline void NotificationDatabaseDataProto_NotificationData::set_direction(::content::NotificationDatabaseDataProto_NotificationData_Direction value) {
  assert(::content::NotificationDatabaseDataProto_NotificationData_Direction_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  direction_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.direction)
}

// optional string lang = 3;
inline bool NotificationDatabaseDataProto_NotificationData::has_lang() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_lang() {
  lang_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationData::lang() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.lang)
  return lang_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationData::set_lang(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.lang)
}
inline void NotificationDatabaseDataProto_NotificationData::set_lang(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lang_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationData.lang)
}
inline void NotificationDatabaseDataProto_NotificationData::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationData.lang)
}
inline void NotificationDatabaseDataProto_NotificationData::set_lang(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationData.lang)
}
inline std::string* NotificationDatabaseDataProto_NotificationData::mutable_lang() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationData.lang)
  return lang_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationData::release_lang() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationData.lang)
  if (!has_lang()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lang_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lang_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationData.lang)
}

// optional string body = 4;
inline bool NotificationDatabaseDataProto_NotificationData::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationData::body() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.body)
  return body_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationData::set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.body)
}
inline void NotificationDatabaseDataProto_NotificationData::set_body(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationData.body)
}
inline void NotificationDatabaseDataProto_NotificationData::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationData.body)
}
inline void NotificationDatabaseDataProto_NotificationData::set_body(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationData.body)
}
inline std::string* NotificationDatabaseDataProto_NotificationData::mutable_body() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationData.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationData::release_body() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationData.body)
  if (!has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return body_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationData.body)
}

// optional string tag = 5;
inline bool NotificationDatabaseDataProto_NotificationData::has_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationData::tag() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.tag)
  return tag_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationData::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.tag)
}
inline void NotificationDatabaseDataProto_NotificationData::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationData.tag)
}
inline void NotificationDatabaseDataProto_NotificationData::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationData.tag)
}
inline void NotificationDatabaseDataProto_NotificationData::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationData.tag)
}
inline std::string* NotificationDatabaseDataProto_NotificationData::mutable_tag() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationData.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationData::release_tag() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationData.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationData.tag)
}

// optional string image = 15;
inline bool NotificationDatabaseDataProto_NotificationData::has_image() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationData::image() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.image)
  return image_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationData::set_image(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.image)
}
inline void NotificationDatabaseDataProto_NotificationData::set_image(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationData.image)
}
inline void NotificationDatabaseDataProto_NotificationData::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationData.image)
}
inline void NotificationDatabaseDataProto_NotificationData::set_image(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationData.image)
}
inline std::string* NotificationDatabaseDataProto_NotificationData::mutable_image() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationData.image)
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationData::release_image() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationData.image)
  if (!has_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return image_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationData.image)
}

// optional string icon = 6;
inline bool NotificationDatabaseDataProto_NotificationData::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationData::icon() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.icon)
  return icon_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationData::set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.icon)
}
inline void NotificationDatabaseDataProto_NotificationData::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationData.icon)
}
inline void NotificationDatabaseDataProto_NotificationData::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationData.icon)
}
inline void NotificationDatabaseDataProto_NotificationData::set_icon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationData.icon)
}
inline std::string* NotificationDatabaseDataProto_NotificationData::mutable_icon() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationData.icon)
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationData::release_icon() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationData.icon)
  if (!has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return icon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationData.icon)
}

// optional string badge = 14;
inline bool NotificationDatabaseDataProto_NotificationData::has_badge() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_badge() {
  badge_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationData::badge() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.badge)
  return badge_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationData::set_badge(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  badge_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.badge)
}
inline void NotificationDatabaseDataProto_NotificationData::set_badge(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  badge_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationData.badge)
}
inline void NotificationDatabaseDataProto_NotificationData::set_badge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  badge_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationData.badge)
}
inline void NotificationDatabaseDataProto_NotificationData::set_badge(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  badge_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationData.badge)
}
inline std::string* NotificationDatabaseDataProto_NotificationData::mutable_badge() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationData.badge)
  return badge_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationData::release_badge() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationData.badge)
  if (!has_badge()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return badge_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_badge(std::string* badge) {
  if (badge != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  badge_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), badge);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationData.badge)
}

// repeated int32 vibration_pattern = 9 [packed = true];
inline int NotificationDatabaseDataProto_NotificationData::vibration_pattern_size() const {
  return vibration_pattern_.size();
}
inline void NotificationDatabaseDataProto_NotificationData::clear_vibration_pattern() {
  vibration_pattern_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationDatabaseDataProto_NotificationData::vibration_pattern(int index) const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.vibration_pattern)
  return vibration_pattern_.Get(index);
}
inline void NotificationDatabaseDataProto_NotificationData::set_vibration_pattern(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  vibration_pattern_.Set(index, value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.vibration_pattern)
}
inline void NotificationDatabaseDataProto_NotificationData::add_vibration_pattern(::PROTOBUF_NAMESPACE_ID::int32 value) {
  vibration_pattern_.Add(value);
  // @@protoc_insertion_point(field_add:content.NotificationDatabaseDataProto.NotificationData.vibration_pattern)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NotificationDatabaseDataProto_NotificationData::vibration_pattern() const {
  // @@protoc_insertion_point(field_list:content.NotificationDatabaseDataProto.NotificationData.vibration_pattern)
  return vibration_pattern_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NotificationDatabaseDataProto_NotificationData::mutable_vibration_pattern() {
  // @@protoc_insertion_point(field_mutable_list:content.NotificationDatabaseDataProto.NotificationData.vibration_pattern)
  return &vibration_pattern_;
}

// optional int64 timestamp = 12;
inline bool NotificationDatabaseDataProto_NotificationData::has_timestamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationDatabaseDataProto_NotificationData::timestamp() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.timestamp)
  return timestamp_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.timestamp)
}

// optional bool renotify = 13;
inline bool NotificationDatabaseDataProto_NotificationData::has_renotify() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_renotify() {
  renotify_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool NotificationDatabaseDataProto_NotificationData::renotify() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.renotify)
  return renotify_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_renotify(bool value) {
  _has_bits_[0] |= 0x00000200u;
  renotify_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.renotify)
}

// optional bool silent = 7;
inline bool NotificationDatabaseDataProto_NotificationData::has_silent() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_silent() {
  silent_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool NotificationDatabaseDataProto_NotificationData::silent() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.silent)
  return silent_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_silent(bool value) {
  _has_bits_[0] |= 0x00000400u;
  silent_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.silent)
}

// optional bool require_interaction = 11;
inline bool NotificationDatabaseDataProto_NotificationData::has_require_interaction() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_require_interaction() {
  require_interaction_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool NotificationDatabaseDataProto_NotificationData::require_interaction() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.require_interaction)
  return require_interaction_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_require_interaction(bool value) {
  _has_bits_[0] |= 0x00000800u;
  require_interaction_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.require_interaction)
}

// optional bytes data = 8;
inline bool NotificationDatabaseDataProto_NotificationData::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& NotificationDatabaseDataProto_NotificationData::data() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.data)
  return data_.GetNoArena();
}
inline void NotificationDatabaseDataProto_NotificationData::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.data)
}
inline void NotificationDatabaseDataProto_NotificationData::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.NotificationData.data)
}
inline void NotificationDatabaseDataProto_NotificationData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.NotificationData.data)
}
inline void NotificationDatabaseDataProto_NotificationData::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.NotificationData.data)
}
inline std::string* NotificationDatabaseDataProto_NotificationData::mutable_data() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationData.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto_NotificationData::release_data() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.NotificationData.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto_NotificationData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.NotificationData.data)
}

// repeated .content.NotificationDatabaseDataProto.NotificationAction actions = 10;
inline int NotificationDatabaseDataProto_NotificationData::actions_size() const {
  return actions_.size();
}
inline void NotificationDatabaseDataProto_NotificationData::clear_actions() {
  actions_.Clear();
}
inline ::content::NotificationDatabaseDataProto_NotificationAction* NotificationDatabaseDataProto_NotificationData::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.NotificationData.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::NotificationDatabaseDataProto_NotificationAction >*
NotificationDatabaseDataProto_NotificationData::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:content.NotificationDatabaseDataProto.NotificationData.actions)
  return &actions_;
}
inline const ::content::NotificationDatabaseDataProto_NotificationAction& NotificationDatabaseDataProto_NotificationData::actions(int index) const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.actions)
  return actions_.Get(index);
}
inline ::content::NotificationDatabaseDataProto_NotificationAction* NotificationDatabaseDataProto_NotificationData::add_actions() {
  // @@protoc_insertion_point(field_add:content.NotificationDatabaseDataProto.NotificationData.actions)
  return actions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::NotificationDatabaseDataProto_NotificationAction >&
NotificationDatabaseDataProto_NotificationData::actions() const {
  // @@protoc_insertion_point(field_list:content.NotificationDatabaseDataProto.NotificationData.actions)
  return actions_;
}

// optional int64 show_trigger_timestamp = 16;
inline bool NotificationDatabaseDataProto_NotificationData::has_show_trigger_timestamp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NotificationDatabaseDataProto_NotificationData::clear_show_trigger_timestamp() {
  show_trigger_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationDatabaseDataProto_NotificationData::show_trigger_timestamp() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.NotificationData.show_trigger_timestamp)
  return show_trigger_timestamp_;
}
inline void NotificationDatabaseDataProto_NotificationData::set_show_trigger_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  show_trigger_timestamp_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.NotificationData.show_trigger_timestamp)
}

// -------------------------------------------------------------------

// NotificationDatabaseDataProto

// optional int64 persistent_notification_id = 1;
inline bool NotificationDatabaseDataProto::has_persistent_notification_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationDatabaseDataProto::clear_persistent_notification_id() {
  persistent_notification_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationDatabaseDataProto::persistent_notification_id() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.persistent_notification_id)
  return persistent_notification_id_;
}
inline void NotificationDatabaseDataProto::set_persistent_notification_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  persistent_notification_id_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.persistent_notification_id)
}

// optional string notification_id = 5;
inline bool NotificationDatabaseDataProto::has_notification_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationDatabaseDataProto::clear_notification_id() {
  notification_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationDatabaseDataProto::notification_id() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.notification_id)
  return notification_id_.GetNoArena();
}
inline void NotificationDatabaseDataProto::set_notification_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  notification_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.notification_id)
}
inline void NotificationDatabaseDataProto::set_notification_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  notification_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.notification_id)
}
inline void NotificationDatabaseDataProto::set_notification_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  notification_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.notification_id)
}
inline void NotificationDatabaseDataProto::set_notification_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  notification_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.notification_id)
}
inline std::string* NotificationDatabaseDataProto::mutable_notification_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.notification_id)
  return notification_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto::release_notification_id() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.notification_id)
  if (!has_notification_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return notification_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto::set_allocated_notification_id(std::string* notification_id) {
  if (notification_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  notification_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification_id);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.notification_id)
}

// optional string origin = 2;
inline bool NotificationDatabaseDataProto::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationDatabaseDataProto::clear_origin() {
  origin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationDatabaseDataProto::origin() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.origin)
  return origin_.GetNoArena();
}
inline void NotificationDatabaseDataProto::set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.origin)
}
inline void NotificationDatabaseDataProto::set_origin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NotificationDatabaseDataProto.origin)
}
inline void NotificationDatabaseDataProto::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseDataProto.origin)
}
inline void NotificationDatabaseDataProto::set_origin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseDataProto.origin)
}
inline std::string* NotificationDatabaseDataProto::mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.origin)
  return origin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationDatabaseDataProto::release_origin() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.origin)
  if (!has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return origin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationDatabaseDataProto::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.origin)
}

// optional int64 service_worker_registration_id = 3;
inline bool NotificationDatabaseDataProto::has_service_worker_registration_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationDatabaseDataProto::clear_service_worker_registration_id() {
  service_worker_registration_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationDatabaseDataProto::service_worker_registration_id() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.service_worker_registration_id)
  return service_worker_registration_id_;
}
inline void NotificationDatabaseDataProto::set_service_worker_registration_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  service_worker_registration_id_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.service_worker_registration_id)
}

// optional bool replaced_existing_notification = 6;
inline bool NotificationDatabaseDataProto::has_replaced_existing_notification() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NotificationDatabaseDataProto::clear_replaced_existing_notification() {
  replaced_existing_notification_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool NotificationDatabaseDataProto::replaced_existing_notification() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.replaced_existing_notification)
  return replaced_existing_notification_;
}
inline void NotificationDatabaseDataProto::set_replaced_existing_notification(bool value) {
  _has_bits_[0] |= 0x00000400u;
  replaced_existing_notification_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.replaced_existing_notification)
}

// optional int32 num_clicks = 7;
inline bool NotificationDatabaseDataProto::has_num_clicks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotificationDatabaseDataProto::clear_num_clicks() {
  num_clicks_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationDatabaseDataProto::num_clicks() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.num_clicks)
  return num_clicks_;
}
inline void NotificationDatabaseDataProto::set_num_clicks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_clicks_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.num_clicks)
}

// optional int32 num_action_button_clicks = 8;
inline bool NotificationDatabaseDataProto::has_num_action_button_clicks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NotificationDatabaseDataProto::clear_num_action_button_clicks() {
  num_action_button_clicks_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationDatabaseDataProto::num_action_button_clicks() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.num_action_button_clicks)
  return num_action_button_clicks_;
}
inline void NotificationDatabaseDataProto::set_num_action_button_clicks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_action_button_clicks_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.num_action_button_clicks)
}

// optional int64 creation_time_millis = 9;
inline bool NotificationDatabaseDataProto::has_creation_time_millis() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotificationDatabaseDataProto::clear_creation_time_millis() {
  creation_time_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationDatabaseDataProto::creation_time_millis() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.creation_time_millis)
  return creation_time_millis_;
}
inline void NotificationDatabaseDataProto::set_creation_time_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  creation_time_millis_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.creation_time_millis)
}

// optional int64 time_until_first_click_millis = 10;
inline bool NotificationDatabaseDataProto::has_time_until_first_click_millis() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NotificationDatabaseDataProto::clear_time_until_first_click_millis() {
  time_until_first_click_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationDatabaseDataProto::time_until_first_click_millis() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.time_until_first_click_millis)
  return time_until_first_click_millis_;
}
inline void NotificationDatabaseDataProto::set_time_until_first_click_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  time_until_first_click_millis_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.time_until_first_click_millis)
}

// optional int64 time_until_last_click_millis = 11;
inline bool NotificationDatabaseDataProto::has_time_until_last_click_millis() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NotificationDatabaseDataProto::clear_time_until_last_click_millis() {
  time_until_last_click_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationDatabaseDataProto::time_until_last_click_millis() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.time_until_last_click_millis)
  return time_until_last_click_millis_;
}
inline void NotificationDatabaseDataProto::set_time_until_last_click_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  time_until_last_click_millis_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.time_until_last_click_millis)
}

// optional int64 time_until_close_millis = 12;
inline bool NotificationDatabaseDataProto::has_time_until_close_millis() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NotificationDatabaseDataProto::clear_time_until_close_millis() {
  time_until_close_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationDatabaseDataProto::time_until_close_millis() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.time_until_close_millis)
  return time_until_close_millis_;
}
inline void NotificationDatabaseDataProto::set_time_until_close_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  time_until_close_millis_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.time_until_close_millis)
}

// optional .content.NotificationDatabaseDataProto.ClosedReason closed_reason = 13;
inline bool NotificationDatabaseDataProto::has_closed_reason() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NotificationDatabaseDataProto::clear_closed_reason() {
  closed_reason_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::content::NotificationDatabaseDataProto_ClosedReason NotificationDatabaseDataProto::closed_reason() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.closed_reason)
  return static_cast< ::content::NotificationDatabaseDataProto_ClosedReason >(closed_reason_);
}
inline void NotificationDatabaseDataProto::set_closed_reason(::content::NotificationDatabaseDataProto_ClosedReason value) {
  assert(::content::NotificationDatabaseDataProto_ClosedReason_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  closed_reason_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.closed_reason)
}

// optional .content.NotificationDatabaseDataProto.NotificationData notification_data = 4;
inline bool NotificationDatabaseDataProto::has_notification_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationDatabaseDataProto::clear_notification_data() {
  if (notification_data_ != nullptr) notification_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::content::NotificationDatabaseDataProto_NotificationData& NotificationDatabaseDataProto::notification_data() const {
  const ::content::NotificationDatabaseDataProto_NotificationData* p = notification_data_;
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.notification_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::content::NotificationDatabaseDataProto_NotificationData*>(
      &::content::_NotificationDatabaseDataProto_NotificationData_default_instance_);
}
inline ::content::NotificationDatabaseDataProto_NotificationData* NotificationDatabaseDataProto::release_notification_data() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseDataProto.notification_data)
  _has_bits_[0] &= ~0x00000004u;
  ::content::NotificationDatabaseDataProto_NotificationData* temp = notification_data_;
  notification_data_ = nullptr;
  return temp;
}
inline ::content::NotificationDatabaseDataProto_NotificationData* NotificationDatabaseDataProto::mutable_notification_data() {
  _has_bits_[0] |= 0x00000004u;
  if (notification_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::NotificationDatabaseDataProto_NotificationData>(GetArenaNoVirtual());
    notification_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseDataProto.notification_data)
  return notification_data_;
}
inline void NotificationDatabaseDataProto::set_allocated_notification_data(::content::NotificationDatabaseDataProto_NotificationData* notification_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete notification_data_;
  }
  if (notification_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notification_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  notification_data_ = notification_data;
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseDataProto.notification_data)
}

// optional bool has_triggered = 14;
inline bool NotificationDatabaseDataProto::has_has_triggered() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NotificationDatabaseDataProto::clear_has_triggered() {
  has_triggered_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool NotificationDatabaseDataProto::has_triggered() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseDataProto.has_triggered)
  return has_triggered_;
}
inline void NotificationDatabaseDataProto::set_has_triggered(bool value) {
  _has_bits_[0] |= 0x00000800u;
  has_triggered_ = value;
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseDataProto.has_triggered)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::NotificationDatabaseDataProto_NotificationAction_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::content::NotificationDatabaseDataProto_NotificationData_Direction> : ::std::true_type {};
template <> struct is_proto_enum< ::content::NotificationDatabaseDataProto_ClosedReason> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_notification_5fdatabase_5fdata_2eproto
