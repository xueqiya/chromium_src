// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cookie_change_subscriptions.proto

#include "cookie_change_subscriptions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cookie_5fchange_5fsubscriptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CookieChangeSubscriptionProto_cookie_5fchange_5fsubscriptions_2eproto;
namespace content {
namespace proto {
class CookieChangeSubscriptionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CookieChangeSubscriptionProto> _instance;
} _CookieChangeSubscriptionProto_default_instance_;
class CookieChangeSubscriptionsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CookieChangeSubscriptionsProto> _instance;
} _CookieChangeSubscriptionsProto_default_instance_;
}  // namespace proto
}  // namespace content
static void InitDefaultsscc_info_CookieChangeSubscriptionProto_cookie_5fchange_5fsubscriptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_CookieChangeSubscriptionProto_default_instance_;
    new (ptr) ::content::proto::CookieChangeSubscriptionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::CookieChangeSubscriptionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CookieChangeSubscriptionProto_cookie_5fchange_5fsubscriptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CookieChangeSubscriptionProto_cookie_5fchange_5fsubscriptions_2eproto}, {}};

static void InitDefaultsscc_info_CookieChangeSubscriptionsProto_cookie_5fchange_5fsubscriptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_CookieChangeSubscriptionsProto_default_instance_;
    new (ptr) ::content::proto::CookieChangeSubscriptionsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::CookieChangeSubscriptionsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CookieChangeSubscriptionsProto_cookie_5fchange_5fsubscriptions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CookieChangeSubscriptionsProto_cookie_5fchange_5fsubscriptions_2eproto}, {
      &scc_info_CookieChangeSubscriptionProto_cookie_5fchange_5fsubscriptions_2eproto.base,}};

namespace content {
namespace proto {
bool CookieMatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CookieMatchType_strings[2] = {};

static const char CookieMatchType_names[] =
  "EQUALS"
  "STARTS_WITH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CookieMatchType_entries[] = {
  { {CookieMatchType_names + 0, 6}, 0 },
  { {CookieMatchType_names + 6, 11}, 1 },
};

static const int CookieMatchType_entries_by_number[] = {
  0, // 0 -> EQUALS
  1, // 1 -> STARTS_WITH
};

const std::string& CookieMatchType_Name(
    CookieMatchType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CookieMatchType_entries,
          CookieMatchType_entries_by_number,
          2, CookieMatchType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CookieMatchType_entries,
      CookieMatchType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CookieMatchType_strings[idx].get();
}
bool CookieMatchType_Parse(
    const std::string& name, CookieMatchType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CookieMatchType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CookieMatchType>(int_value);
  }
  return success;
}

// ===================================================================

void CookieChangeSubscriptionProto::InitAsDefaultInstance() {
}
class CookieChangeSubscriptionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CookieChangeSubscriptionProto>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CookieChangeSubscriptionProto::CookieChangeSubscriptionProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.CookieChangeSubscriptionProto)
}
CookieChangeSubscriptionProto::CookieChangeSubscriptionProto(const CookieChangeSubscriptionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  match_type_ = from.match_type_;
  // @@protoc_insertion_point(copy_constructor:content.proto.CookieChangeSubscriptionProto)
}

void CookieChangeSubscriptionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CookieChangeSubscriptionProto_cookie_5fchange_5fsubscriptions_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  match_type_ = 0;
}

CookieChangeSubscriptionProto::~CookieChangeSubscriptionProto() {
  // @@protoc_insertion_point(destructor:content.proto.CookieChangeSubscriptionProto)
  SharedDtor();
}

void CookieChangeSubscriptionProto::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CookieChangeSubscriptionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CookieChangeSubscriptionProto& CookieChangeSubscriptionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CookieChangeSubscriptionProto_cookie_5fchange_5fsubscriptions_2eproto.base);
  return *internal_default_instance();
}


void CookieChangeSubscriptionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CookieChangeSubscriptionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  match_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CookieChangeSubscriptionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.proto.CookieMatchType match_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::CookieMatchType_IsValid(val))) {
            set_match_type(static_cast<::content::proto::CookieMatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CookieChangeSubscriptionProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.CookieChangeSubscriptionProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.proto.CookieMatchType match_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::proto::CookieMatchType_IsValid(value)) {
            set_match_type(static_cast< ::content::proto::CookieMatchType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.CookieChangeSubscriptionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.CookieChangeSubscriptionProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CookieChangeSubscriptionProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.CookieChangeSubscriptionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .content.proto.CookieMatchType match_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->match_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.CookieChangeSubscriptionProto)
}

size_t CookieChangeSubscriptionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CookieChangeSubscriptionProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->url());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .content.proto.CookieMatchType match_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->match_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CookieChangeSubscriptionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CookieChangeSubscriptionProto*>(
      &from));
}

void CookieChangeSubscriptionProto::MergeFrom(const CookieChangeSubscriptionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CookieChangeSubscriptionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      match_type_ = from.match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CookieChangeSubscriptionProto::CopyFrom(const CookieChangeSubscriptionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CookieChangeSubscriptionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CookieChangeSubscriptionProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CookieChangeSubscriptionProto::InternalSwap(CookieChangeSubscriptionProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_type_, other->match_type_);
}

std::string CookieChangeSubscriptionProto::GetTypeName() const {
  return "content.proto.CookieChangeSubscriptionProto";
}


// ===================================================================

void CookieChangeSubscriptionsProto::InitAsDefaultInstance() {
}
class CookieChangeSubscriptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CookieChangeSubscriptionsProto>()._has_bits_);
};

CookieChangeSubscriptionsProto::CookieChangeSubscriptionsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.CookieChangeSubscriptionsProto)
}
CookieChangeSubscriptionsProto::CookieChangeSubscriptionsProto(const CookieChangeSubscriptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      subscriptions_(from.subscriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:content.proto.CookieChangeSubscriptionsProto)
}

void CookieChangeSubscriptionsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CookieChangeSubscriptionsProto_cookie_5fchange_5fsubscriptions_2eproto.base);
}

CookieChangeSubscriptionsProto::~CookieChangeSubscriptionsProto() {
  // @@protoc_insertion_point(destructor:content.proto.CookieChangeSubscriptionsProto)
  SharedDtor();
}

void CookieChangeSubscriptionsProto::SharedDtor() {
}

void CookieChangeSubscriptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CookieChangeSubscriptionsProto& CookieChangeSubscriptionsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CookieChangeSubscriptionsProto_cookie_5fchange_5fsubscriptions_2eproto.base);
  return *internal_default_instance();
}


void CookieChangeSubscriptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.CookieChangeSubscriptionsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CookieChangeSubscriptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CookieChangeSubscriptionsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.CookieChangeSubscriptionsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.CookieChangeSubscriptionsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.CookieChangeSubscriptionsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CookieChangeSubscriptionsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.CookieChangeSubscriptionsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscriptions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->subscriptions(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.CookieChangeSubscriptionsProto)
}

size_t CookieChangeSubscriptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.CookieChangeSubscriptionsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->subscriptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->subscriptions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CookieChangeSubscriptionsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CookieChangeSubscriptionsProto*>(
      &from));
}

void CookieChangeSubscriptionsProto::MergeFrom(const CookieChangeSubscriptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.CookieChangeSubscriptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
}

void CookieChangeSubscriptionsProto::CopyFrom(const CookieChangeSubscriptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.CookieChangeSubscriptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CookieChangeSubscriptionsProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->subscriptions())) return false;
  return true;
}

void CookieChangeSubscriptionsProto::InternalSwap(CookieChangeSubscriptionsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&subscriptions_)->InternalSwap(CastToBase(&other->subscriptions_));
}

std::string CookieChangeSubscriptionsProto::GetTypeName() const {
  return "content.proto.CookieChangeSubscriptionsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::proto::CookieChangeSubscriptionProto* Arena::CreateMaybeMessage< ::content::proto::CookieChangeSubscriptionProto >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::CookieChangeSubscriptionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::CookieChangeSubscriptionsProto* Arena::CreateMaybeMessage< ::content::proto::CookieChangeSubscriptionsProto >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::CookieChangeSubscriptionsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
