// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cookie_change_subscriptions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cookie_5fchange_5fsubscriptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cookie_5fchange_5fsubscriptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cookie_5fchange_5fsubscriptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cookie_5fchange_5fsubscriptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace content {
namespace proto {
class CookieChangeSubscriptionProto;
class CookieChangeSubscriptionProtoDefaultTypeInternal;
extern CookieChangeSubscriptionProtoDefaultTypeInternal _CookieChangeSubscriptionProto_default_instance_;
class CookieChangeSubscriptionsProto;
class CookieChangeSubscriptionsProtoDefaultTypeInternal;
extern CookieChangeSubscriptionsProtoDefaultTypeInternal _CookieChangeSubscriptionsProto_default_instance_;
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::proto::CookieChangeSubscriptionProto* Arena::CreateMaybeMessage<::content::proto::CookieChangeSubscriptionProto>(Arena*);
template<> ::content::proto::CookieChangeSubscriptionsProto* Arena::CreateMaybeMessage<::content::proto::CookieChangeSubscriptionsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {
namespace proto {

enum CookieMatchType : int {
  EQUALS = 0,
  STARTS_WITH = 1
};
bool CookieMatchType_IsValid(int value);
constexpr CookieMatchType CookieMatchType_MIN = EQUALS;
constexpr CookieMatchType CookieMatchType_MAX = STARTS_WITH;
constexpr int CookieMatchType_ARRAYSIZE = CookieMatchType_MAX + 1;

const std::string& CookieMatchType_Name(CookieMatchType value);
template<typename T>
inline const std::string& CookieMatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CookieMatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CookieMatchType_Name.");
  return CookieMatchType_Name(static_cast<CookieMatchType>(enum_t_value));
}
bool CookieMatchType_Parse(
    const std::string& name, CookieMatchType* value);
// ===================================================================

class CookieChangeSubscriptionProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CookieChangeSubscriptionProto) */ {
 public:
  CookieChangeSubscriptionProto();
  virtual ~CookieChangeSubscriptionProto();

  CookieChangeSubscriptionProto(const CookieChangeSubscriptionProto& from);
  CookieChangeSubscriptionProto(CookieChangeSubscriptionProto&& from) noexcept
    : CookieChangeSubscriptionProto() {
    *this = ::std::move(from);
  }

  inline CookieChangeSubscriptionProto& operator=(const CookieChangeSubscriptionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CookieChangeSubscriptionProto& operator=(CookieChangeSubscriptionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CookieChangeSubscriptionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CookieChangeSubscriptionProto* internal_default_instance() {
    return reinterpret_cast<const CookieChangeSubscriptionProto*>(
               &_CookieChangeSubscriptionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CookieChangeSubscriptionProto& a, CookieChangeSubscriptionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CookieChangeSubscriptionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CookieChangeSubscriptionProto* New() const final {
    return CreateMaybeMessage<CookieChangeSubscriptionProto>(nullptr);
  }

  CookieChangeSubscriptionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CookieChangeSubscriptionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CookieChangeSubscriptionProto& from);
  void MergeFrom(const CookieChangeSubscriptionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CookieChangeSubscriptionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.CookieChangeSubscriptionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kNameFieldNumber = 2,
    kMatchTypeFieldNumber = 3,
  };
  // required string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .content.proto.CookieMatchType match_type = 3;
  bool has_match_type() const;
  void clear_match_type();
  ::content::proto::CookieMatchType match_type() const;
  void set_match_type(::content::proto::CookieMatchType value);

  // @@protoc_insertion_point(class_scope:content.proto.CookieChangeSubscriptionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int match_type_;
  friend struct ::TableStruct_cookie_5fchange_5fsubscriptions_2eproto;
};
// -------------------------------------------------------------------

class CookieChangeSubscriptionsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CookieChangeSubscriptionsProto) */ {
 public:
  CookieChangeSubscriptionsProto();
  virtual ~CookieChangeSubscriptionsProto();

  CookieChangeSubscriptionsProto(const CookieChangeSubscriptionsProto& from);
  CookieChangeSubscriptionsProto(CookieChangeSubscriptionsProto&& from) noexcept
    : CookieChangeSubscriptionsProto() {
    *this = ::std::move(from);
  }

  inline CookieChangeSubscriptionsProto& operator=(const CookieChangeSubscriptionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CookieChangeSubscriptionsProto& operator=(CookieChangeSubscriptionsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CookieChangeSubscriptionsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CookieChangeSubscriptionsProto* internal_default_instance() {
    return reinterpret_cast<const CookieChangeSubscriptionsProto*>(
               &_CookieChangeSubscriptionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CookieChangeSubscriptionsProto& a, CookieChangeSubscriptionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CookieChangeSubscriptionsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CookieChangeSubscriptionsProto* New() const final {
    return CreateMaybeMessage<CookieChangeSubscriptionsProto>(nullptr);
  }

  CookieChangeSubscriptionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CookieChangeSubscriptionsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CookieChangeSubscriptionsProto& from);
  void MergeFrom(const CookieChangeSubscriptionsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CookieChangeSubscriptionsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.CookieChangeSubscriptionsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionsFieldNumber = 1,
  };
  // repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
  int subscriptions_size() const;
  void clear_subscriptions();
  ::content::proto::CookieChangeSubscriptionProto* mutable_subscriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto >*
      mutable_subscriptions();
  const ::content::proto::CookieChangeSubscriptionProto& subscriptions(int index) const;
  ::content::proto::CookieChangeSubscriptionProto* add_subscriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto >&
      subscriptions() const;

  // @@protoc_insertion_point(class_scope:content.proto.CookieChangeSubscriptionsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto > subscriptions_;
  friend struct ::TableStruct_cookie_5fchange_5fsubscriptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CookieChangeSubscriptionProto

// required string url = 1;
inline bool CookieChangeSubscriptionProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CookieChangeSubscriptionProto::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CookieChangeSubscriptionProto::url() const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionProto.url)
  return url_.GetNoArena();
}
inline void CookieChangeSubscriptionProto::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CookieChangeSubscriptionProto.url)
}
inline void CookieChangeSubscriptionProto::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CookieChangeSubscriptionProto.url)
}
inline void CookieChangeSubscriptionProto::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CookieChangeSubscriptionProto.url)
}
inline void CookieChangeSubscriptionProto::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CookieChangeSubscriptionProto.url)
}
inline std::string* CookieChangeSubscriptionProto::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.CookieChangeSubscriptionProto.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CookieChangeSubscriptionProto::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.CookieChangeSubscriptionProto.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CookieChangeSubscriptionProto::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CookieChangeSubscriptionProto.url)
}

// optional string name = 2;
inline bool CookieChangeSubscriptionProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CookieChangeSubscriptionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CookieChangeSubscriptionProto::name() const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionProto.name)
  return name_.GetNoArena();
}
inline void CookieChangeSubscriptionProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.CookieChangeSubscriptionProto.name)
}
inline void CookieChangeSubscriptionProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.CookieChangeSubscriptionProto.name)
}
inline void CookieChangeSubscriptionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.CookieChangeSubscriptionProto.name)
}
inline void CookieChangeSubscriptionProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.CookieChangeSubscriptionProto.name)
}
inline std::string* CookieChangeSubscriptionProto::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.proto.CookieChangeSubscriptionProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CookieChangeSubscriptionProto::release_name() {
  // @@protoc_insertion_point(field_release:content.proto.CookieChangeSubscriptionProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CookieChangeSubscriptionProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:content.proto.CookieChangeSubscriptionProto.name)
}

// optional .content.proto.CookieMatchType match_type = 3;
inline bool CookieChangeSubscriptionProto::has_match_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CookieChangeSubscriptionProto::clear_match_type() {
  match_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::content::proto::CookieMatchType CookieChangeSubscriptionProto::match_type() const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionProto.match_type)
  return static_cast< ::content::proto::CookieMatchType >(match_type_);
}
inline void CookieChangeSubscriptionProto::set_match_type(::content::proto::CookieMatchType value) {
  assert(::content::proto::CookieMatchType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  match_type_ = value;
  // @@protoc_insertion_point(field_set:content.proto.CookieChangeSubscriptionProto.match_type)
}

// -------------------------------------------------------------------

// CookieChangeSubscriptionsProto

// repeated .content.proto.CookieChangeSubscriptionProto subscriptions = 1;
inline int CookieChangeSubscriptionsProto::subscriptions_size() const {
  return subscriptions_.size();
}
inline void CookieChangeSubscriptionsProto::clear_subscriptions() {
  subscriptions_.Clear();
}
inline ::content::proto::CookieChangeSubscriptionProto* CookieChangeSubscriptionsProto::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto >*
CookieChangeSubscriptionsProto::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return &subscriptions_;
}
inline const ::content::proto::CookieChangeSubscriptionProto& CookieChangeSubscriptionsProto::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_.Get(index);
}
inline ::content::proto::CookieChangeSubscriptionProto* CookieChangeSubscriptionsProto::add_subscriptions() {
  // @@protoc_insertion_point(field_add:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CookieChangeSubscriptionProto >&
CookieChangeSubscriptionsProto::subscriptions() const {
  // @@protoc_insertion_point(field_list:content.proto.CookieChangeSubscriptionsProto.subscriptions)
  return subscriptions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::proto::CookieMatchType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cookie_5fchange_5fsubscriptions_2eproto
