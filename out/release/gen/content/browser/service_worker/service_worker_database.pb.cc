// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_worker_database.proto

#include "service_worker_database.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_service_5fworker_5fdatabase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceWorkerNavigationPreloadState_service_5fworker_5fdatabase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_service_5fworker_5fdatabase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceWorkerOriginTrialFeature_service_5fworker_5fdatabase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_service_5fworker_5fdatabase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceWorkerOriginTrialInfo_service_5fworker_5fdatabase_2eproto;
namespace content {
class ServiceWorkerOriginTrialFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceWorkerOriginTrialFeature> _instance;
} _ServiceWorkerOriginTrialFeature_default_instance_;
class ServiceWorkerOriginTrialInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceWorkerOriginTrialInfo> _instance;
} _ServiceWorkerOriginTrialInfo_default_instance_;
class ServiceWorkerNavigationPreloadStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceWorkerNavigationPreloadState> _instance;
} _ServiceWorkerNavigationPreloadState_default_instance_;
class ServiceWorkerRegistrationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceWorkerRegistrationData> _instance;
} _ServiceWorkerRegistrationData_default_instance_;
class ServiceWorkerResourceRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceWorkerResourceRecord> _instance;
} _ServiceWorkerResourceRecord_default_instance_;
}  // namespace content
static void InitDefaultsscc_info_ServiceWorkerNavigationPreloadState_service_5fworker_5fdatabase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_ServiceWorkerNavigationPreloadState_default_instance_;
    new (ptr) ::content::ServiceWorkerNavigationPreloadState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::ServiceWorkerNavigationPreloadState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceWorkerNavigationPreloadState_service_5fworker_5fdatabase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServiceWorkerNavigationPreloadState_service_5fworker_5fdatabase_2eproto}, {}};

static void InitDefaultsscc_info_ServiceWorkerOriginTrialFeature_service_5fworker_5fdatabase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_ServiceWorkerOriginTrialFeature_default_instance_;
    new (ptr) ::content::ServiceWorkerOriginTrialFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::ServiceWorkerOriginTrialFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceWorkerOriginTrialFeature_service_5fworker_5fdatabase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServiceWorkerOriginTrialFeature_service_5fworker_5fdatabase_2eproto}, {}};

static void InitDefaultsscc_info_ServiceWorkerOriginTrialInfo_service_5fworker_5fdatabase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_ServiceWorkerOriginTrialInfo_default_instance_;
    new (ptr) ::content::ServiceWorkerOriginTrialInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::ServiceWorkerOriginTrialInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceWorkerOriginTrialInfo_service_5fworker_5fdatabase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ServiceWorkerOriginTrialInfo_service_5fworker_5fdatabase_2eproto}, {
      &scc_info_ServiceWorkerOriginTrialFeature_service_5fworker_5fdatabase_2eproto.base,}};

static void InitDefaultsscc_info_ServiceWorkerRegistrationData_service_5fworker_5fdatabase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_ServiceWorkerRegistrationData_default_instance_;
    new (ptr) ::content::ServiceWorkerRegistrationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::ServiceWorkerRegistrationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServiceWorkerRegistrationData_service_5fworker_5fdatabase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ServiceWorkerRegistrationData_service_5fworker_5fdatabase_2eproto}, {
      &scc_info_ServiceWorkerOriginTrialInfo_service_5fworker_5fdatabase_2eproto.base,
      &scc_info_ServiceWorkerNavigationPreloadState_service_5fworker_5fdatabase_2eproto.base,}};

static void InitDefaultsscc_info_ServiceWorkerResourceRecord_service_5fworker_5fdatabase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_ServiceWorkerResourceRecord_default_instance_;
    new (ptr) ::content::ServiceWorkerResourceRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::ServiceWorkerResourceRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceWorkerResourceRecord_service_5fworker_5fdatabase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServiceWorkerResourceRecord_service_5fworker_5fdatabase_2eproto}, {}};

namespace content {
bool ServiceWorkerRegistrationData_ServiceWorkerScriptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ServiceWorkerRegistrationData_ServiceWorkerScriptType_strings[2] = {};

static const char ServiceWorkerRegistrationData_ServiceWorkerScriptType_names[] =
  "CLASSIC"
  "MODULE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ServiceWorkerRegistrationData_ServiceWorkerScriptType_entries[] = {
  { {ServiceWorkerRegistrationData_ServiceWorkerScriptType_names + 0, 7}, 0 },
  { {ServiceWorkerRegistrationData_ServiceWorkerScriptType_names + 7, 6}, 1 },
};

static const int ServiceWorkerRegistrationData_ServiceWorkerScriptType_entries_by_number[] = {
  0, // 0 -> CLASSIC
  1, // 1 -> MODULE
};

const std::string& ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name(
    ServiceWorkerRegistrationData_ServiceWorkerScriptType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ServiceWorkerRegistrationData_ServiceWorkerScriptType_entries,
          ServiceWorkerRegistrationData_ServiceWorkerScriptType_entries_by_number,
          2, ServiceWorkerRegistrationData_ServiceWorkerScriptType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ServiceWorkerRegistrationData_ServiceWorkerScriptType_entries,
      ServiceWorkerRegistrationData_ServiceWorkerScriptType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ServiceWorkerRegistrationData_ServiceWorkerScriptType_strings[idx].get();
}
bool ServiceWorkerRegistrationData_ServiceWorkerScriptType_Parse(
    const std::string& name, ServiceWorkerRegistrationData_ServiceWorkerScriptType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ServiceWorkerRegistrationData_ServiceWorkerScriptType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ServiceWorkerRegistrationData_ServiceWorkerScriptType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData::CLASSIC;
constexpr ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData::MODULE;
constexpr ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData::ServiceWorkerScriptType_MIN;
constexpr ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData::ServiceWorkerScriptType_MAX;
constexpr int ServiceWorkerRegistrationData::ServiceWorkerScriptType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_strings[3] = {};

static const char ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_names[] =
  "ALL"
  "IMPORTS"
  "NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_entries[] = {
  { {ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_names + 0, 3}, 1 },
  { {ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_names + 3, 7}, 0 },
  { {ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_names + 10, 4}, 2 },
};

static const int ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_entries_by_number[] = {
  1, // 0 -> IMPORTS
  0, // 1 -> ALL
  2, // 2 -> NONE
};

const std::string& ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name(
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_entries,
          ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_entries_by_number,
          3, ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_entries,
      ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_strings[idx].get();
}
bool ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Parse(
    const std::string& name, ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::IMPORTS;
constexpr ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::ALL;
constexpr ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::NONE;
constexpr ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::ServiceWorkerUpdateViaCacheType_MIN;
constexpr ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::ServiceWorkerUpdateViaCacheType_MAX;
constexpr int ServiceWorkerRegistrationData::ServiceWorkerUpdateViaCacheType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_strings[2] = {};

static const char ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_names[] =
  "NONE_OR_NOT_EXIST"
  "REQUIRE_CORP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_entries[] = {
  { {ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_names + 0, 17}, 0 },
  { {ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_names + 17, 12}, 1 },
};

static const int ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_entries_by_number[] = {
  0, // 0 -> NONE_OR_NOT_EXIST
  1, // 1 -> REQUIRE_CORP
};

const std::string& ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_Name(
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_entries,
          ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_entries_by_number,
          2, ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_entries,
      ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_strings[idx].get();
}
bool ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_Parse(
    const std::string& name, ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy ServiceWorkerRegistrationData::NONE_OR_NOT_EXIST;
constexpr ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy ServiceWorkerRegistrationData::REQUIRE_CORP;
constexpr ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy ServiceWorkerRegistrationData::CrossOriginEmbedderPolicy_MIN;
constexpr ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy ServiceWorkerRegistrationData::CrossOriginEmbedderPolicy_MAX;
constexpr int ServiceWorkerRegistrationData::CrossOriginEmbedderPolicy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ServiceWorkerOriginTrialFeature::InitAsDefaultInstance() {
}
class ServiceWorkerOriginTrialFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceWorkerOriginTrialFeature>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServiceWorkerOriginTrialFeature::ServiceWorkerOriginTrialFeature()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ServiceWorkerOriginTrialFeature)
}
ServiceWorkerOriginTrialFeature::ServiceWorkerOriginTrialFeature(const ServiceWorkerOriginTrialFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerOriginTrialFeature)
}

void ServiceWorkerOriginTrialFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceWorkerOriginTrialFeature_service_5fworker_5fdatabase_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServiceWorkerOriginTrialFeature::~ServiceWorkerOriginTrialFeature() {
  // @@protoc_insertion_point(destructor:content.ServiceWorkerOriginTrialFeature)
  SharedDtor();
}

void ServiceWorkerOriginTrialFeature::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceWorkerOriginTrialFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceWorkerOriginTrialFeature& ServiceWorkerOriginTrialFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceWorkerOriginTrialFeature_service_5fworker_5fdatabase_2eproto.base);
  return *internal_default_instance();
}


void ServiceWorkerOriginTrialFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerOriginTrialFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceWorkerOriginTrialFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_tokens(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceWorkerOriginTrialFeature::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.ServiceWorkerOriginTrialFeature)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tokens = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ServiceWorkerOriginTrialFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ServiceWorkerOriginTrialFeature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceWorkerOriginTrialFeature::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ServiceWorkerOriginTrialFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string tokens = 2;
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->tokens(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.ServiceWorkerOriginTrialFeature)
}

size_t ServiceWorkerOriginTrialFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerOriginTrialFeature)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tokens = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->tokens_size());
  for (int i = 0, n = this->tokens_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->tokens(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceWorkerOriginTrialFeature::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServiceWorkerOriginTrialFeature*>(
      &from));
}

void ServiceWorkerOriginTrialFeature::MergeFrom(const ServiceWorkerOriginTrialFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerOriginTrialFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ServiceWorkerOriginTrialFeature::CopyFrom(const ServiceWorkerOriginTrialFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerOriginTrialFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerOriginTrialFeature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ServiceWorkerOriginTrialFeature::InternalSwap(ServiceWorkerOriginTrialFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tokens_.InternalSwap(CastToBase(&other->tokens_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ServiceWorkerOriginTrialFeature::GetTypeName() const {
  return "content.ServiceWorkerOriginTrialFeature";
}


// ===================================================================

void ServiceWorkerOriginTrialInfo::InitAsDefaultInstance() {
}
class ServiceWorkerOriginTrialInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceWorkerOriginTrialInfo>()._has_bits_);
};

ServiceWorkerOriginTrialInfo::ServiceWorkerOriginTrialInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ServiceWorkerOriginTrialInfo)
}
ServiceWorkerOriginTrialInfo::ServiceWorkerOriginTrialInfo(const ServiceWorkerOriginTrialInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerOriginTrialInfo)
}

void ServiceWorkerOriginTrialInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceWorkerOriginTrialInfo_service_5fworker_5fdatabase_2eproto.base);
}

ServiceWorkerOriginTrialInfo::~ServiceWorkerOriginTrialInfo() {
  // @@protoc_insertion_point(destructor:content.ServiceWorkerOriginTrialInfo)
  SharedDtor();
}

void ServiceWorkerOriginTrialInfo::SharedDtor() {
}

void ServiceWorkerOriginTrialInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceWorkerOriginTrialInfo& ServiceWorkerOriginTrialInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceWorkerOriginTrialInfo_service_5fworker_5fdatabase_2eproto.base);
  return *internal_default_instance();
}


void ServiceWorkerOriginTrialInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerOriginTrialInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceWorkerOriginTrialInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceWorkerOriginTrialInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.ServiceWorkerOriginTrialInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ServiceWorkerOriginTrialInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ServiceWorkerOriginTrialInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceWorkerOriginTrialInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ServiceWorkerOriginTrialInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->features(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.ServiceWorkerOriginTrialInfo)
}

size_t ServiceWorkerOriginTrialInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerOriginTrialInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->features(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceWorkerOriginTrialInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServiceWorkerOriginTrialInfo*>(
      &from));
}

void ServiceWorkerOriginTrialInfo::MergeFrom(const ServiceWorkerOriginTrialInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerOriginTrialInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
}

void ServiceWorkerOriginTrialInfo::CopyFrom(const ServiceWorkerOriginTrialInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerOriginTrialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerOriginTrialInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->features())) return false;
  return true;
}

void ServiceWorkerOriginTrialInfo::InternalSwap(ServiceWorkerOriginTrialInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&features_)->InternalSwap(CastToBase(&other->features_));
}

std::string ServiceWorkerOriginTrialInfo::GetTypeName() const {
  return "content.ServiceWorkerOriginTrialInfo";
}


// ===================================================================

void ServiceWorkerNavigationPreloadState::InitAsDefaultInstance() {
}
class ServiceWorkerNavigationPreloadState::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceWorkerNavigationPreloadState>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServiceWorkerNavigationPreloadState::ServiceWorkerNavigationPreloadState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ServiceWorkerNavigationPreloadState)
}
ServiceWorkerNavigationPreloadState::ServiceWorkerNavigationPreloadState(const ServiceWorkerNavigationPreloadState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_header()) {
    header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerNavigationPreloadState)
}

void ServiceWorkerNavigationPreloadState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceWorkerNavigationPreloadState_service_5fworker_5fdatabase_2eproto.base);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
}

ServiceWorkerNavigationPreloadState::~ServiceWorkerNavigationPreloadState() {
  // @@protoc_insertion_point(destructor:content.ServiceWorkerNavigationPreloadState)
  SharedDtor();
}

void ServiceWorkerNavigationPreloadState::SharedDtor() {
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceWorkerNavigationPreloadState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceWorkerNavigationPreloadState& ServiceWorkerNavigationPreloadState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceWorkerNavigationPreloadState_service_5fworker_5fdatabase_2eproto.base);
  return *internal_default_instance();
}


void ServiceWorkerNavigationPreloadState::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerNavigationPreloadState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    header_.ClearNonDefaultToEmptyNoArena();
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceWorkerNavigationPreloadState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_header(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceWorkerNavigationPreloadState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.ServiceWorkerNavigationPreloadState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string header = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ServiceWorkerNavigationPreloadState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ServiceWorkerNavigationPreloadState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceWorkerNavigationPreloadState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ServiceWorkerNavigationPreloadState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional string header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->header(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.ServiceWorkerNavigationPreloadState)
}

size_t ServiceWorkerNavigationPreloadState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerNavigationPreloadState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string header = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->header());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceWorkerNavigationPreloadState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServiceWorkerNavigationPreloadState*>(
      &from));
}

void ServiceWorkerNavigationPreloadState::MergeFrom(const ServiceWorkerNavigationPreloadState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerNavigationPreloadState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      header_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.header_);
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceWorkerNavigationPreloadState::CopyFrom(const ServiceWorkerNavigationPreloadState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerNavigationPreloadState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerNavigationPreloadState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ServiceWorkerNavigationPreloadState::InternalSwap(ServiceWorkerNavigationPreloadState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_.Swap(&other->header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enabled_, other->enabled_);
}

std::string ServiceWorkerNavigationPreloadState::GetTypeName() const {
  return "content.ServiceWorkerNavigationPreloadState";
}


// ===================================================================

void ServiceWorkerRegistrationData::InitAsDefaultInstance() {
  ::content::_ServiceWorkerRegistrationData_default_instance_._instance.get_mutable()->origin_trial_tokens_ = const_cast< ::content::ServiceWorkerOriginTrialInfo*>(
      ::content::ServiceWorkerOriginTrialInfo::internal_default_instance());
  ::content::_ServiceWorkerRegistrationData_default_instance_._instance.get_mutable()->navigation_preload_state_ = const_cast< ::content::ServiceWorkerNavigationPreloadState*>(
      ::content::ServiceWorkerNavigationPreloadState::internal_default_instance());
}
class ServiceWorkerRegistrationData::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceWorkerRegistrationData>()._has_bits_);
  static void set_has_registration_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scope_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_script_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_active(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_has_fetch_handler(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_last_update_check_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_resources_total_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::content::ServiceWorkerOriginTrialInfo& origin_trial_tokens(const ServiceWorkerRegistrationData* msg);
  static void set_has_origin_trial_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::content::ServiceWorkerNavigationPreloadState& navigation_preload_state(const ServiceWorkerRegistrationData* msg);
  static void set_has_navigation_preload_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_update_via_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_script_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_script_response_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cross_origin_embedder_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::content::ServiceWorkerOriginTrialInfo&
ServiceWorkerRegistrationData::_Internal::origin_trial_tokens(const ServiceWorkerRegistrationData* msg) {
  return *msg->origin_trial_tokens_;
}
const ::content::ServiceWorkerNavigationPreloadState&
ServiceWorkerRegistrationData::_Internal::navigation_preload_state(const ServiceWorkerRegistrationData* msg) {
  return *msg->navigation_preload_state_;
}
ServiceWorkerRegistrationData::ServiceWorkerRegistrationData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ServiceWorkerRegistrationData)
}
ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(const ServiceWorkerRegistrationData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      used_features_(from.used_features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scope_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_scope_url()) {
    scope_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scope_url_);
  }
  script_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_script_url()) {
    script_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.script_url_);
  }
  if (from.has_origin_trial_tokens()) {
    origin_trial_tokens_ = new ::content::ServiceWorkerOriginTrialInfo(*from.origin_trial_tokens_);
  } else {
    origin_trial_tokens_ = nullptr;
  }
  if (from.has_navigation_preload_state()) {
    navigation_preload_state_ = new ::content::ServiceWorkerNavigationPreloadState(*from.navigation_preload_state_);
  } else {
    navigation_preload_state_ = nullptr;
  }
  ::memcpy(&registration_id_, &from.registration_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cross_origin_embedder_policy_) -
    reinterpret_cast<char*>(&registration_id_)) + sizeof(cross_origin_embedder_policy_));
  // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerRegistrationData)
}

void ServiceWorkerRegistrationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceWorkerRegistrationData_service_5fworker_5fdatabase_2eproto.base);
  scope_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&origin_trial_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_origin_embedder_policy_) -
      reinterpret_cast<char*>(&origin_trial_tokens_)) + sizeof(cross_origin_embedder_policy_));
}

ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData() {
  // @@protoc_insertion_point(destructor:content.ServiceWorkerRegistrationData)
  SharedDtor();
}

void ServiceWorkerRegistrationData::SharedDtor() {
  scope_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete origin_trial_tokens_;
  if (this != internal_default_instance()) delete navigation_preload_state_;
}

void ServiceWorkerRegistrationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceWorkerRegistrationData& ServiceWorkerRegistrationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceWorkerRegistrationData_service_5fworker_5fdatabase_2eproto.base);
  return *internal_default_instance();
}


void ServiceWorkerRegistrationData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerRegistrationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  used_features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      scope_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      script_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(origin_trial_tokens_ != nullptr);
      origin_trial_tokens_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(navigation_preload_state_ != nullptr);
      navigation_preload_state_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&registration_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resources_total_size_bytes_) -
        reinterpret_cast<char*>(&registration_id_)) + sizeof(resources_total_size_bytes_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&is_active_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cross_origin_embedder_policy_) -
        reinterpret_cast<char*>(&is_active_)) + sizeof(cross_origin_embedder_policy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceWorkerRegistrationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 registration_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_registration_id(&has_bits);
          registration_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string scope_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_scope_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string script_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_script_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 version_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_version_id(&has_bits);
          version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_active(&has_bits);
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool has_fetch_handler = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_has_fetch_handler(&has_bits);
          has_fetch_handler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 last_update_check_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_last_update_check_time(&has_bits);
          last_update_check_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 resources_total_size_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_resources_total_size_bytes(&has_bits);
          resources_total_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_origin_trial_tokens(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_navigation_preload_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 used_features = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_used_features(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 104);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_used_features(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(val))) {
            set_update_via_cache(static_cast<::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .content.ServiceWorkerRegistrationData.ServiceWorkerScriptType script_type = 15 [default = CLASSIC];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType_IsValid(val))) {
            set_script_type(static_cast<::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 script_response_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_script_response_time(&has_bits);
          script_response_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.ServiceWorkerRegistrationData.CrossOriginEmbedderPolicy cross_origin_embedder_policy = 17 [default = NONE_OR_NOT_EXIST];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_IsValid(val))) {
            set_cross_origin_embedder_policy(static_cast<::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceWorkerRegistrationData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.ServiceWorkerRegistrationData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 registration_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_registration_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &registration_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string scope_url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scope_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string script_url = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_script_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_version_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_active = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool has_fetch_handler = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_has_fetch_handler(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_fetch_handler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_update_check_time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_last_update_check_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_check_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 resources_total_size_bytes = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_resources_total_size_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resources_total_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_origin_trial_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_navigation_preload_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 used_features = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104u, input, this->mutable_used_features())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_used_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(value)) {
            set_update_via_cache(static_cast< ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(112u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.ServiceWorkerRegistrationData.ServiceWorkerScriptType script_type = 15 [default = CLASSIC];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType_IsValid(value)) {
            set_script_type(static_cast< ::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(120u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 script_response_time = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_script_response_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &script_response_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.ServiceWorkerRegistrationData.CrossOriginEmbedderPolicy cross_origin_embedder_policy = 17 [default = NONE_OR_NOT_EXIST];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_IsValid(value)) {
            set_cross_origin_embedder_policy(static_cast< ::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy >(value));
          } else {
            unknown_fields_stream.WriteVarint32(136u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ServiceWorkerRegistrationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ServiceWorkerRegistrationData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceWorkerRegistrationData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ServiceWorkerRegistrationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 registration_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->registration_id(), output);
  }

  // required string scope_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scope_url(), output);
  }

  // required string script_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->script_url(), output);
  }

  // required int64 version_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->version_id(), output);
  }

  // required bool is_active = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_active(), output);
  }

  // required bool has_fetch_handler = 6;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->has_fetch_handler(), output);
  }

  // required int64 last_update_check_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->last_update_check_time(), output);
  }

  // optional uint64 resources_total_size_bytes = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->resources_total_size_bytes(), output);
  }

  // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::origin_trial_tokens(this), output);
  }

  // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::navigation_preload_state(this), output);
  }

  // repeated uint32 used_features = 13;
  for (int i = 0, n = this->used_features_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      13, this->used_features(i), output);
  }

  // optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      14, this->update_via_cache(), output);
  }

  // optional .content.ServiceWorkerRegistrationData.ServiceWorkerScriptType script_type = 15 [default = CLASSIC];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      15, this->script_type(), output);
  }

  // optional int64 script_response_time = 16;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->script_response_time(), output);
  }

  // optional .content.ServiceWorkerRegistrationData.CrossOriginEmbedderPolicy cross_origin_embedder_policy = 17 [default = NONE_OR_NOT_EXIST];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      17, this->cross_origin_embedder_policy(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.ServiceWorkerRegistrationData)
}

size_t ServiceWorkerRegistrationData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.ServiceWorkerRegistrationData)
  size_t total_size = 0;

  if (has_scope_url()) {
    // required string scope_url = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scope_url());
  }

  if (has_script_url()) {
    // required string script_url = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->script_url());
  }

  if (has_registration_id()) {
    // required int64 registration_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->registration_id());
  }

  if (has_version_id()) {
    // required int64 version_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->version_id());
  }

  if (has_last_update_check_time()) {
    // required int64 last_update_check_time = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_update_check_time());
  }

  if (has_is_active()) {
    // required bool is_active = 5;
    total_size += 1 + 1;
  }

  if (has_has_fetch_handler()) {
    // required bool has_fetch_handler = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ServiceWorkerRegistrationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerRegistrationData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000373) ^ 0x00000373) == 0) {  // All required fields are present.
    // required string scope_url = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scope_url());

    // required string script_url = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->script_url());

    // required int64 registration_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->registration_id());

    // required int64 version_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->version_id());

    // required int64 last_update_check_time = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_update_check_time());

    // required bool is_active = 5;
    total_size += 1 + 1;

    // required bool has_fetch_handler = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 used_features = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->used_features_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->used_features_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_trial_tokens_);
    }

    // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navigation_preload_state_);
    }

  }
  // optional uint64 resources_total_size_bytes = 8;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->resources_total_size_bytes());
  }

  if (cached_has_bits & 0x00003c00u) {
    // optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->update_via_cache());
    }

    // optional int64 script_response_time = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->script_response_time());
    }

    // optional .content.ServiceWorkerRegistrationData.ServiceWorkerScriptType script_type = 15 [default = CLASSIC];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->script_type());
    }

    // optional .content.ServiceWorkerRegistrationData.CrossOriginEmbedderPolicy cross_origin_embedder_policy = 17 [default = NONE_OR_NOT_EXIST];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cross_origin_embedder_policy());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceWorkerRegistrationData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServiceWorkerRegistrationData*>(
      &from));
}

void ServiceWorkerRegistrationData::MergeFrom(const ServiceWorkerRegistrationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerRegistrationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  used_features_.MergeFrom(from.used_features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      scope_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scope_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      script_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.script_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_origin_trial_tokens()->::content::ServiceWorkerOriginTrialInfo::MergeFrom(from.origin_trial_tokens());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_navigation_preload_state()->::content::ServiceWorkerNavigationPreloadState::MergeFrom(from.navigation_preload_state());
    }
    if (cached_has_bits & 0x00000010u) {
      registration_id_ = from.registration_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      version_id_ = from.version_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_update_check_time_ = from.last_update_check_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      resources_total_size_bytes_ = from.resources_total_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_active_ = from.is_active_;
    }
    if (cached_has_bits & 0x00000200u) {
      has_fetch_handler_ = from.has_fetch_handler_;
    }
    if (cached_has_bits & 0x00000400u) {
      update_via_cache_ = from.update_via_cache_;
    }
    if (cached_has_bits & 0x00000800u) {
      script_response_time_ = from.script_response_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      script_type_ = from.script_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      cross_origin_embedder_policy_ = from.cross_origin_embedder_policy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceWorkerRegistrationData::CopyFrom(const ServiceWorkerRegistrationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerRegistrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerRegistrationData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000373) != 0x00000373) return false;
  if (has_origin_trial_tokens()) {
    if (!this->origin_trial_tokens_->IsInitialized()) return false;
  }
  if (has_navigation_preload_state()) {
    if (!this->navigation_preload_state_->IsInitialized()) return false;
  }
  return true;
}

void ServiceWorkerRegistrationData::InternalSwap(ServiceWorkerRegistrationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  used_features_.InternalSwap(&other->used_features_);
  scope_url_.Swap(&other->scope_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  script_url_.Swap(&other->script_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(origin_trial_tokens_, other->origin_trial_tokens_);
  swap(navigation_preload_state_, other->navigation_preload_state_);
  swap(registration_id_, other->registration_id_);
  swap(version_id_, other->version_id_);
  swap(last_update_check_time_, other->last_update_check_time_);
  swap(resources_total_size_bytes_, other->resources_total_size_bytes_);
  swap(is_active_, other->is_active_);
  swap(has_fetch_handler_, other->has_fetch_handler_);
  swap(update_via_cache_, other->update_via_cache_);
  swap(script_response_time_, other->script_response_time_);
  swap(script_type_, other->script_type_);
  swap(cross_origin_embedder_policy_, other->cross_origin_embedder_policy_);
}

std::string ServiceWorkerRegistrationData::GetTypeName() const {
  return "content.ServiceWorkerRegistrationData";
}


// ===================================================================

void ServiceWorkerResourceRecord::InitAsDefaultInstance() {
}
class ServiceWorkerResourceRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceWorkerResourceRecord>()._has_bits_);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ServiceWorkerResourceRecord::ServiceWorkerResourceRecord()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ServiceWorkerResourceRecord)
}
ServiceWorkerResourceRecord::ServiceWorkerResourceRecord(const ServiceWorkerResourceRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&resource_id_, &from.resource_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_bytes_) -
    reinterpret_cast<char*>(&resource_id_)) + sizeof(size_bytes_));
  // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerResourceRecord)
}

void ServiceWorkerResourceRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceWorkerResourceRecord_service_5fworker_5fdatabase_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resource_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_bytes_) -
      reinterpret_cast<char*>(&resource_id_)) + sizeof(size_bytes_));
}

ServiceWorkerResourceRecord::~ServiceWorkerResourceRecord() {
  // @@protoc_insertion_point(destructor:content.ServiceWorkerResourceRecord)
  SharedDtor();
}

void ServiceWorkerResourceRecord::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceWorkerResourceRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceWorkerResourceRecord& ServiceWorkerResourceRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceWorkerResourceRecord_service_5fworker_5fdatabase_2eproto.base);
  return *internal_default_instance();
}


void ServiceWorkerResourceRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerResourceRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&resource_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_bytes_) -
        reinterpret_cast<char*>(&resource_id_)) + sizeof(size_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServiceWorkerResourceRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 resource_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_resource_id(&has_bits);
          resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 size_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size_bytes(&has_bits);
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServiceWorkerResourceRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.ServiceWorkerResourceRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 resource_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_resource_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &resource_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 size_bytes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_size_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ServiceWorkerResourceRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ServiceWorkerResourceRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServiceWorkerResourceRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ServiceWorkerResourceRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 resource_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->resource_id(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional uint64 size_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->size_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.ServiceWorkerResourceRecord)
}

size_t ServiceWorkerResourceRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.ServiceWorkerResourceRecord)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_resource_id()) {
    // required int64 resource_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->resource_id());
  }

  return total_size;
}
size_t ServiceWorkerResourceRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerResourceRecord)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->url());

    // required int64 resource_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->resource_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 size_bytes = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size_bytes());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceWorkerResourceRecord::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServiceWorkerResourceRecord*>(
      &from));
}

void ServiceWorkerResourceRecord::MergeFrom(const ServiceWorkerResourceRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerResourceRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      resource_id_ = from.resource_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_bytes_ = from.size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceWorkerResourceRecord::CopyFrom(const ServiceWorkerResourceRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerResourceRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceWorkerResourceRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ServiceWorkerResourceRecord::InternalSwap(ServiceWorkerResourceRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resource_id_, other->resource_id_);
  swap(size_bytes_, other->size_bytes_);
}

std::string ServiceWorkerResourceRecord::GetTypeName() const {
  return "content.ServiceWorkerResourceRecord";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::ServiceWorkerOriginTrialFeature* Arena::CreateMaybeMessage< ::content::ServiceWorkerOriginTrialFeature >(Arena* arena) {
  return Arena::CreateInternal< ::content::ServiceWorkerOriginTrialFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::content::ServiceWorkerOriginTrialInfo* Arena::CreateMaybeMessage< ::content::ServiceWorkerOriginTrialInfo >(Arena* arena) {
  return Arena::CreateInternal< ::content::ServiceWorkerOriginTrialInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::content::ServiceWorkerNavigationPreloadState* Arena::CreateMaybeMessage< ::content::ServiceWorkerNavigationPreloadState >(Arena* arena) {
  return Arena::CreateInternal< ::content::ServiceWorkerNavigationPreloadState >(arena);
}
template<> PROTOBUF_NOINLINE ::content::ServiceWorkerRegistrationData* Arena::CreateMaybeMessage< ::content::ServiceWorkerRegistrationData >(Arena* arena) {
  return Arena::CreateInternal< ::content::ServiceWorkerRegistrationData >(arena);
}
template<> PROTOBUF_NOINLINE ::content::ServiceWorkerResourceRecord* Arena::CreateMaybeMessage< ::content::ServiceWorkerResourceRecord >(Arena* arena) {
  return Arena::CreateInternal< ::content::ServiceWorkerResourceRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
