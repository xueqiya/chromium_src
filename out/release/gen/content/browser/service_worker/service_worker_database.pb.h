// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_worker_database.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_5fworker_5fdatabase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_5fworker_5fdatabase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_5fworker_5fdatabase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_5fworker_5fdatabase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace content {
class ServiceWorkerNavigationPreloadState;
class ServiceWorkerNavigationPreloadStateDefaultTypeInternal;
extern ServiceWorkerNavigationPreloadStateDefaultTypeInternal _ServiceWorkerNavigationPreloadState_default_instance_;
class ServiceWorkerOriginTrialFeature;
class ServiceWorkerOriginTrialFeatureDefaultTypeInternal;
extern ServiceWorkerOriginTrialFeatureDefaultTypeInternal _ServiceWorkerOriginTrialFeature_default_instance_;
class ServiceWorkerOriginTrialInfo;
class ServiceWorkerOriginTrialInfoDefaultTypeInternal;
extern ServiceWorkerOriginTrialInfoDefaultTypeInternal _ServiceWorkerOriginTrialInfo_default_instance_;
class ServiceWorkerRegistrationData;
class ServiceWorkerRegistrationDataDefaultTypeInternal;
extern ServiceWorkerRegistrationDataDefaultTypeInternal _ServiceWorkerRegistrationData_default_instance_;
class ServiceWorkerResourceRecord;
class ServiceWorkerResourceRecordDefaultTypeInternal;
extern ServiceWorkerResourceRecordDefaultTypeInternal _ServiceWorkerResourceRecord_default_instance_;
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::ServiceWorkerNavigationPreloadState* Arena::CreateMaybeMessage<::content::ServiceWorkerNavigationPreloadState>(Arena*);
template<> ::content::ServiceWorkerOriginTrialFeature* Arena::CreateMaybeMessage<::content::ServiceWorkerOriginTrialFeature>(Arena*);
template<> ::content::ServiceWorkerOriginTrialInfo* Arena::CreateMaybeMessage<::content::ServiceWorkerOriginTrialInfo>(Arena*);
template<> ::content::ServiceWorkerRegistrationData* Arena::CreateMaybeMessage<::content::ServiceWorkerRegistrationData>(Arena*);
template<> ::content::ServiceWorkerResourceRecord* Arena::CreateMaybeMessage<::content::ServiceWorkerResourceRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {

enum ServiceWorkerRegistrationData_ServiceWorkerScriptType : int {
  ServiceWorkerRegistrationData_ServiceWorkerScriptType_CLASSIC = 0,
  ServiceWorkerRegistrationData_ServiceWorkerScriptType_MODULE = 1
};
bool ServiceWorkerRegistrationData_ServiceWorkerScriptType_IsValid(int value);
constexpr ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_MIN = ServiceWorkerRegistrationData_ServiceWorkerScriptType_CLASSIC;
constexpr ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_MAX = ServiceWorkerRegistrationData_ServiceWorkerScriptType_MODULE;
constexpr int ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_ARRAYSIZE = ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_MAX + 1;

const std::string& ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name(ServiceWorkerRegistrationData_ServiceWorkerScriptType value);
template<typename T>
inline const std::string& ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceWorkerRegistrationData_ServiceWorkerScriptType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name.");
  return ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name(static_cast<ServiceWorkerRegistrationData_ServiceWorkerScriptType>(enum_t_value));
}
bool ServiceWorkerRegistrationData_ServiceWorkerScriptType_Parse(
    const std::string& name, ServiceWorkerRegistrationData_ServiceWorkerScriptType* value);
enum ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType : int {
  ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IMPORTS = 0,
  ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ALL = 1,
  ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_NONE = 2
};
bool ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(int value);
constexpr ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MIN = ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IMPORTS;
constexpr ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MAX = ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_NONE;
constexpr int ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_ARRAYSIZE = ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MAX + 1;

const std::string& ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name(ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value);
template<typename T>
inline const std::string& ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name.");
  return ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name(static_cast<ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType>(enum_t_value));
}
bool ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Parse(
    const std::string& name, ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType* value);
enum ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy : int {
  ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_NONE_OR_NOT_EXIST = 0,
  ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_REQUIRE_CORP = 1
};
bool ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_IsValid(int value);
constexpr ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_CrossOriginEmbedderPolicy_MIN = ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_NONE_OR_NOT_EXIST;
constexpr ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_CrossOriginEmbedderPolicy_MAX = ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_REQUIRE_CORP;
constexpr int ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_CrossOriginEmbedderPolicy_ARRAYSIZE = ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_CrossOriginEmbedderPolicy_MAX + 1;

const std::string& ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_Name(ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy value);
template<typename T>
inline const std::string& ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_Name.");
  return ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_Name(static_cast<ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy>(enum_t_value));
}
bool ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_Parse(
    const std::string& name, ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy* value);
// ===================================================================

class ServiceWorkerOriginTrialFeature :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.ServiceWorkerOriginTrialFeature) */ {
 public:
  ServiceWorkerOriginTrialFeature();
  virtual ~ServiceWorkerOriginTrialFeature();

  ServiceWorkerOriginTrialFeature(const ServiceWorkerOriginTrialFeature& from);
  ServiceWorkerOriginTrialFeature(ServiceWorkerOriginTrialFeature&& from) noexcept
    : ServiceWorkerOriginTrialFeature() {
    *this = ::std::move(from);
  }

  inline ServiceWorkerOriginTrialFeature& operator=(const ServiceWorkerOriginTrialFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceWorkerOriginTrialFeature& operator=(ServiceWorkerOriginTrialFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerOriginTrialFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceWorkerOriginTrialFeature* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerOriginTrialFeature*>(
               &_ServiceWorkerOriginTrialFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceWorkerOriginTrialFeature& a, ServiceWorkerOriginTrialFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceWorkerOriginTrialFeature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceWorkerOriginTrialFeature* New() const final {
    return CreateMaybeMessage<ServiceWorkerOriginTrialFeature>(nullptr);
  }

  ServiceWorkerOriginTrialFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceWorkerOriginTrialFeature>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceWorkerOriginTrialFeature& from);
  void MergeFrom(const ServiceWorkerOriginTrialFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerOriginTrialFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.ServiceWorkerOriginTrialFeature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string tokens = 2;
  int tokens_size() const;
  void clear_tokens();
  const std::string& tokens(int index) const;
  std::string* mutable_tokens(int index);
  void set_tokens(int index, const std::string& value);
  void set_tokens(int index, std::string&& value);
  void set_tokens(int index, const char* value);
  void set_tokens(int index, const char* value, size_t size);
  std::string* add_tokens();
  void add_tokens(const std::string& value);
  void add_tokens(std::string&& value);
  void add_tokens(const char* value);
  void add_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tokens();

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerOriginTrialFeature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_service_5fworker_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class ServiceWorkerOriginTrialInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.ServiceWorkerOriginTrialInfo) */ {
 public:
  ServiceWorkerOriginTrialInfo();
  virtual ~ServiceWorkerOriginTrialInfo();

  ServiceWorkerOriginTrialInfo(const ServiceWorkerOriginTrialInfo& from);
  ServiceWorkerOriginTrialInfo(ServiceWorkerOriginTrialInfo&& from) noexcept
    : ServiceWorkerOriginTrialInfo() {
    *this = ::std::move(from);
  }

  inline ServiceWorkerOriginTrialInfo& operator=(const ServiceWorkerOriginTrialInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceWorkerOriginTrialInfo& operator=(ServiceWorkerOriginTrialInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerOriginTrialInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceWorkerOriginTrialInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerOriginTrialInfo*>(
               &_ServiceWorkerOriginTrialInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceWorkerOriginTrialInfo& a, ServiceWorkerOriginTrialInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceWorkerOriginTrialInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceWorkerOriginTrialInfo* New() const final {
    return CreateMaybeMessage<ServiceWorkerOriginTrialInfo>(nullptr);
  }

  ServiceWorkerOriginTrialInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceWorkerOriginTrialInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceWorkerOriginTrialInfo& from);
  void MergeFrom(const ServiceWorkerOriginTrialInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerOriginTrialInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.ServiceWorkerOriginTrialInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 1,
  };
  // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
  int features_size() const;
  void clear_features();
  ::content::ServiceWorkerOriginTrialFeature* mutable_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature >*
      mutable_features();
  const ::content::ServiceWorkerOriginTrialFeature& features(int index) const;
  ::content::ServiceWorkerOriginTrialFeature* add_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature >&
      features() const;

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerOriginTrialInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature > features_;
  friend struct ::TableStruct_service_5fworker_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class ServiceWorkerNavigationPreloadState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.ServiceWorkerNavigationPreloadState) */ {
 public:
  ServiceWorkerNavigationPreloadState();
  virtual ~ServiceWorkerNavigationPreloadState();

  ServiceWorkerNavigationPreloadState(const ServiceWorkerNavigationPreloadState& from);
  ServiceWorkerNavigationPreloadState(ServiceWorkerNavigationPreloadState&& from) noexcept
    : ServiceWorkerNavigationPreloadState() {
    *this = ::std::move(from);
  }

  inline ServiceWorkerNavigationPreloadState& operator=(const ServiceWorkerNavigationPreloadState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceWorkerNavigationPreloadState& operator=(ServiceWorkerNavigationPreloadState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerNavigationPreloadState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceWorkerNavigationPreloadState* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerNavigationPreloadState*>(
               &_ServiceWorkerNavigationPreloadState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceWorkerNavigationPreloadState& a, ServiceWorkerNavigationPreloadState& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceWorkerNavigationPreloadState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceWorkerNavigationPreloadState* New() const final {
    return CreateMaybeMessage<ServiceWorkerNavigationPreloadState>(nullptr);
  }

  ServiceWorkerNavigationPreloadState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceWorkerNavigationPreloadState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceWorkerNavigationPreloadState& from);
  void MergeFrom(const ServiceWorkerNavigationPreloadState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerNavigationPreloadState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.ServiceWorkerNavigationPreloadState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // optional string header = 2;
  bool has_header() const;
  void clear_header();
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const char* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);

  // required bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerNavigationPreloadState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  bool enabled_;
  friend struct ::TableStruct_service_5fworker_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class ServiceWorkerRegistrationData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.ServiceWorkerRegistrationData) */ {
 public:
  ServiceWorkerRegistrationData();
  virtual ~ServiceWorkerRegistrationData();

  ServiceWorkerRegistrationData(const ServiceWorkerRegistrationData& from);
  ServiceWorkerRegistrationData(ServiceWorkerRegistrationData&& from) noexcept
    : ServiceWorkerRegistrationData() {
    *this = ::std::move(from);
  }

  inline ServiceWorkerRegistrationData& operator=(const ServiceWorkerRegistrationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceWorkerRegistrationData& operator=(ServiceWorkerRegistrationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerRegistrationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceWorkerRegistrationData* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerRegistrationData*>(
               &_ServiceWorkerRegistrationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServiceWorkerRegistrationData& a, ServiceWorkerRegistrationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceWorkerRegistrationData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceWorkerRegistrationData* New() const final {
    return CreateMaybeMessage<ServiceWorkerRegistrationData>(nullptr);
  }

  ServiceWorkerRegistrationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceWorkerRegistrationData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceWorkerRegistrationData& from);
  void MergeFrom(const ServiceWorkerRegistrationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerRegistrationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.ServiceWorkerRegistrationData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerScriptType;
  static constexpr ServiceWorkerScriptType CLASSIC =
    ServiceWorkerRegistrationData_ServiceWorkerScriptType_CLASSIC;
  static constexpr ServiceWorkerScriptType MODULE =
    ServiceWorkerRegistrationData_ServiceWorkerScriptType_MODULE;
  static inline bool ServiceWorkerScriptType_IsValid(int value) {
    return ServiceWorkerRegistrationData_ServiceWorkerScriptType_IsValid(value);
  }
  static constexpr ServiceWorkerScriptType ServiceWorkerScriptType_MIN =
    ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_MIN;
  static constexpr ServiceWorkerScriptType ServiceWorkerScriptType_MAX =
    ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_MAX;
  static constexpr int ServiceWorkerScriptType_ARRAYSIZE =
    ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ServiceWorkerScriptType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceWorkerScriptType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceWorkerScriptType_Name.");
    return ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name(enum_t_value);
  }
  static inline bool ServiceWorkerScriptType_Parse(const std::string& name,
      ServiceWorkerScriptType* value) {
    return ServiceWorkerRegistrationData_ServiceWorkerScriptType_Parse(name, value);
  }

  typedef ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerUpdateViaCacheType;
  static constexpr ServiceWorkerUpdateViaCacheType IMPORTS =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IMPORTS;
  static constexpr ServiceWorkerUpdateViaCacheType ALL =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ALL;
  static constexpr ServiceWorkerUpdateViaCacheType NONE =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_NONE;
  static inline bool ServiceWorkerUpdateViaCacheType_IsValid(int value) {
    return ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(value);
  }
  static constexpr ServiceWorkerUpdateViaCacheType ServiceWorkerUpdateViaCacheType_MIN =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MIN;
  static constexpr ServiceWorkerUpdateViaCacheType ServiceWorkerUpdateViaCacheType_MAX =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MAX;
  static constexpr int ServiceWorkerUpdateViaCacheType_ARRAYSIZE =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ServiceWorkerUpdateViaCacheType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceWorkerUpdateViaCacheType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceWorkerUpdateViaCacheType_Name.");
    return ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name(enum_t_value);
  }
  static inline bool ServiceWorkerUpdateViaCacheType_Parse(const std::string& name,
      ServiceWorkerUpdateViaCacheType* value) {
    return ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Parse(name, value);
  }

  typedef ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
  static constexpr CrossOriginEmbedderPolicy NONE_OR_NOT_EXIST =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_NONE_OR_NOT_EXIST;
  static constexpr CrossOriginEmbedderPolicy REQUIRE_CORP =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_REQUIRE_CORP;
  static inline bool CrossOriginEmbedderPolicy_IsValid(int value) {
    return ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_IsValid(value);
  }
  static constexpr CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy_MIN =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_CrossOriginEmbedderPolicy_MIN;
  static constexpr CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy_MAX =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_CrossOriginEmbedderPolicy_MAX;
  static constexpr int CrossOriginEmbedderPolicy_ARRAYSIZE =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_CrossOriginEmbedderPolicy_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CrossOriginEmbedderPolicy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CrossOriginEmbedderPolicy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CrossOriginEmbedderPolicy_Name.");
    return ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_Name(enum_t_value);
  }
  static inline bool CrossOriginEmbedderPolicy_Parse(const std::string& name,
      CrossOriginEmbedderPolicy* value) {
    return ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsedFeaturesFieldNumber = 13,
    kScopeUrlFieldNumber = 2,
    kScriptUrlFieldNumber = 3,
    kOriginTrialTokensFieldNumber = 11,
    kNavigationPreloadStateFieldNumber = 12,
    kRegistrationIdFieldNumber = 1,
    kVersionIdFieldNumber = 4,
    kLastUpdateCheckTimeFieldNumber = 7,
    kResourcesTotalSizeBytesFieldNumber = 8,
    kIsActiveFieldNumber = 5,
    kHasFetchHandlerFieldNumber = 6,
    kUpdateViaCacheFieldNumber = 14,
    kScriptResponseTimeFieldNumber = 16,
    kScriptTypeFieldNumber = 15,
    kCrossOriginEmbedderPolicyFieldNumber = 17,
  };
  // repeated uint32 used_features = 13;
  int used_features_size() const;
  void clear_used_features();
  ::PROTOBUF_NAMESPACE_ID::uint32 used_features(int index) const;
  void set_used_features(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_used_features(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      used_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_used_features();

  // required string scope_url = 2;
  bool has_scope_url() const;
  void clear_scope_url();
  const std::string& scope_url() const;
  void set_scope_url(const std::string& value);
  void set_scope_url(std::string&& value);
  void set_scope_url(const char* value);
  void set_scope_url(const char* value, size_t size);
  std::string* mutable_scope_url();
  std::string* release_scope_url();
  void set_allocated_scope_url(std::string* scope_url);

  // required string script_url = 3;
  bool has_script_url() const;
  void clear_script_url();
  const std::string& script_url() const;
  void set_script_url(const std::string& value);
  void set_script_url(std::string&& value);
  void set_script_url(const char* value);
  void set_script_url(const char* value, size_t size);
  std::string* mutable_script_url();
  std::string* release_script_url();
  void set_allocated_script_url(std::string* script_url);

  // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
  bool has_origin_trial_tokens() const;
  void clear_origin_trial_tokens();
  const ::content::ServiceWorkerOriginTrialInfo& origin_trial_tokens() const;
  ::content::ServiceWorkerOriginTrialInfo* release_origin_trial_tokens();
  ::content::ServiceWorkerOriginTrialInfo* mutable_origin_trial_tokens();
  void set_allocated_origin_trial_tokens(::content::ServiceWorkerOriginTrialInfo* origin_trial_tokens);

  // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
  bool has_navigation_preload_state() const;
  void clear_navigation_preload_state();
  const ::content::ServiceWorkerNavigationPreloadState& navigation_preload_state() const;
  ::content::ServiceWorkerNavigationPreloadState* release_navigation_preload_state();
  ::content::ServiceWorkerNavigationPreloadState* mutable_navigation_preload_state();
  void set_allocated_navigation_preload_state(::content::ServiceWorkerNavigationPreloadState* navigation_preload_state);

  // required int64 registration_id = 1;
  bool has_registration_id() const;
  void clear_registration_id();
  ::PROTOBUF_NAMESPACE_ID::int64 registration_id() const;
  void set_registration_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 version_id = 4;
  bool has_version_id() const;
  void clear_version_id();
  ::PROTOBUF_NAMESPACE_ID::int64 version_id() const;
  void set_version_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 last_update_check_time = 7;
  bool has_last_update_check_time() const;
  void clear_last_update_check_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_update_check_time() const;
  void set_last_update_check_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 resources_total_size_bytes = 8;
  bool has_resources_total_size_bytes() const;
  void clear_resources_total_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 resources_total_size_bytes() const;
  void set_resources_total_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required bool is_active = 5;
  bool has_is_active() const;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);

  // required bool has_fetch_handler = 6;
  bool has_has_fetch_handler() const;
  void clear_has_fetch_handler();
  bool has_fetch_handler() const;
  void set_has_fetch_handler(bool value);

  // optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
  bool has_update_via_cache() const;
  void clear_update_via_cache();
  ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType update_via_cache() const;
  void set_update_via_cache(::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value);

  // optional int64 script_response_time = 16;
  bool has_script_response_time() const;
  void clear_script_response_time();
  ::PROTOBUF_NAMESPACE_ID::int64 script_response_time() const;
  void set_script_response_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .content.ServiceWorkerRegistrationData.ServiceWorkerScriptType script_type = 15 [default = CLASSIC];
  bool has_script_type() const;
  void clear_script_type();
  ::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType script_type() const;
  void set_script_type(::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType value);

  // optional .content.ServiceWorkerRegistrationData.CrossOriginEmbedderPolicy cross_origin_embedder_policy = 17 [default = NONE_OR_NOT_EXIST];
  bool has_cross_origin_embedder_policy() const;
  void clear_cross_origin_embedder_policy();
  ::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy cross_origin_embedder_policy() const;
  void set_cross_origin_embedder_policy(::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy value);

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerRegistrationData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > used_features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_url_;
  ::content::ServiceWorkerOriginTrialInfo* origin_trial_tokens_;
  ::content::ServiceWorkerNavigationPreloadState* navigation_preload_state_;
  ::PROTOBUF_NAMESPACE_ID::int64 registration_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_update_check_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 resources_total_size_bytes_;
  bool is_active_;
  bool has_fetch_handler_;
  int update_via_cache_;
  ::PROTOBUF_NAMESPACE_ID::int64 script_response_time_;
  int script_type_;
  int cross_origin_embedder_policy_;
  friend struct ::TableStruct_service_5fworker_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class ServiceWorkerResourceRecord :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.ServiceWorkerResourceRecord) */ {
 public:
  ServiceWorkerResourceRecord();
  virtual ~ServiceWorkerResourceRecord();

  ServiceWorkerResourceRecord(const ServiceWorkerResourceRecord& from);
  ServiceWorkerResourceRecord(ServiceWorkerResourceRecord&& from) noexcept
    : ServiceWorkerResourceRecord() {
    *this = ::std::move(from);
  }

  inline ServiceWorkerResourceRecord& operator=(const ServiceWorkerResourceRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceWorkerResourceRecord& operator=(ServiceWorkerResourceRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceWorkerResourceRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceWorkerResourceRecord* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerResourceRecord*>(
               &_ServiceWorkerResourceRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServiceWorkerResourceRecord& a, ServiceWorkerResourceRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceWorkerResourceRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceWorkerResourceRecord* New() const final {
    return CreateMaybeMessage<ServiceWorkerResourceRecord>(nullptr);
  }

  ServiceWorkerResourceRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceWorkerResourceRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceWorkerResourceRecord& from);
  void MergeFrom(const ServiceWorkerResourceRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerResourceRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.ServiceWorkerResourceRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kResourceIdFieldNumber = 1,
    kSizeBytesFieldNumber = 3,
  };
  // required string url = 2;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // required int64 resource_id = 1;
  bool has_resource_id() const;
  void clear_resource_id();
  ::PROTOBUF_NAMESPACE_ID::int64 resource_id() const;
  void set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 size_bytes = 3;
  bool has_size_bytes() const;
  void clear_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 size_bytes() const;
  void set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:content.ServiceWorkerResourceRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int64 resource_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_bytes_;
  friend struct ::TableStruct_service_5fworker_5fdatabase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceWorkerOriginTrialFeature

// required string name = 1;
inline bool ServiceWorkerOriginTrialFeature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerOriginTrialFeature::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceWorkerOriginTrialFeature::name() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialFeature.name)
  return name_.GetNoArena();
}
inline void ServiceWorkerOriginTrialFeature::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.name)
}
inline void ServiceWorkerOriginTrialFeature::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerOriginTrialFeature.name)
}
inline void ServiceWorkerOriginTrialFeature::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerOriginTrialFeature.name)
}
inline void ServiceWorkerOriginTrialFeature::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerOriginTrialFeature.name)
}
inline std::string* ServiceWorkerOriginTrialFeature::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialFeature.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceWorkerOriginTrialFeature::release_name() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerOriginTrialFeature.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerOriginTrialFeature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerOriginTrialFeature.name)
}

// repeated string tokens = 2;
inline int ServiceWorkerOriginTrialFeature::tokens_size() const {
  return tokens_.size();
}
inline void ServiceWorkerOriginTrialFeature::clear_tokens() {
  tokens_.Clear();
}
inline const std::string& ServiceWorkerOriginTrialFeature::tokens(int index) const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_.Get(index);
}
inline std::string* ServiceWorkerOriginTrialFeature::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_.Mutable(index);
}
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.tokens)
  tokens_.Mutable(index)->assign(value);
}
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.tokens)
  tokens_.Mutable(index)->assign(std::move(value));
}
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, const char* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerOriginTrialFeature.tokens)
}
inline std::string* ServiceWorkerOriginTrialFeature::add_tokens() {
  // @@protoc_insertion_point(field_add_mutable:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_.Add();
}
inline void ServiceWorkerOriginTrialFeature::add_tokens(const std::string& value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::add_tokens(std::string&& value) {
  tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::add_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:content.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::add_tokens(const char* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:content.ServiceWorkerOriginTrialFeature.tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServiceWorkerOriginTrialFeature::tokens() const {
  // @@protoc_insertion_point(field_list:content.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServiceWorkerOriginTrialFeature::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerOriginTrialFeature.tokens)
  return &tokens_;
}

// -------------------------------------------------------------------

// ServiceWorkerOriginTrialInfo

// repeated .content.ServiceWorkerOriginTrialFeature features = 1;
inline int ServiceWorkerOriginTrialInfo::features_size() const {
  return features_.size();
}
inline void ServiceWorkerOriginTrialInfo::clear_features() {
  features_.Clear();
}
inline ::content::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialInfo.features)
  return features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature >*
ServiceWorkerOriginTrialInfo::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerOriginTrialInfo.features)
  return &features_;
}
inline const ::content::ServiceWorkerOriginTrialFeature& ServiceWorkerOriginTrialInfo::features(int index) const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialInfo.features)
  return features_.Get(index);
}
inline ::content::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::add_features() {
  // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialInfo.features)
  return features_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ServiceWorkerOriginTrialFeature >&
ServiceWorkerOriginTrialInfo::features() const {
  // @@protoc_insertion_point(field_list:content.ServiceWorkerOriginTrialInfo.features)
  return features_;
}

// -------------------------------------------------------------------

// ServiceWorkerNavigationPreloadState

// required bool enabled = 1;
inline bool ServiceWorkerNavigationPreloadState::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWorkerNavigationPreloadState::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ServiceWorkerNavigationPreloadState::enabled() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerNavigationPreloadState.enabled)
  return enabled_;
}
inline void ServiceWorkerNavigationPreloadState::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerNavigationPreloadState.enabled)
}

// optional string header = 2;
inline bool ServiceWorkerNavigationPreloadState::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerNavigationPreloadState::clear_header() {
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceWorkerNavigationPreloadState::header() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerNavigationPreloadState.header)
  return header_.GetNoArena();
}
inline void ServiceWorkerNavigationPreloadState::set_header(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerNavigationPreloadState.header)
}
inline void ServiceWorkerNavigationPreloadState::set_header(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  header_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerNavigationPreloadState.header)
}
inline void ServiceWorkerNavigationPreloadState::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerNavigationPreloadState.header)
}
inline void ServiceWorkerNavigationPreloadState::set_header(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerNavigationPreloadState.header)
}
inline std::string* ServiceWorkerNavigationPreloadState::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerNavigationPreloadState.header)
  return header_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceWorkerNavigationPreloadState::release_header() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerNavigationPreloadState.header)
  if (!has_header()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return header_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerNavigationPreloadState::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerNavigationPreloadState.header)
}

// -------------------------------------------------------------------

// ServiceWorkerRegistrationData

// required int64 registration_id = 1;
inline bool ServiceWorkerRegistrationData::has_registration_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_registration_id() {
  registration_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceWorkerRegistrationData::registration_id() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.registration_id)
  return registration_id_;
}
inline void ServiceWorkerRegistrationData::set_registration_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  registration_id_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.registration_id)
}

// required string scope_url = 2;
inline bool ServiceWorkerRegistrationData::has_scope_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_scope_url() {
  scope_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceWorkerRegistrationData::scope_url() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.scope_url)
  return scope_url_.GetNoArena();
}
inline void ServiceWorkerRegistrationData::set_scope_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scope_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.scope_url)
}
inline void ServiceWorkerRegistrationData::set_scope_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scope_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerRegistrationData.scope_url)
}
inline void ServiceWorkerRegistrationData::set_scope_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scope_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerRegistrationData.scope_url)
}
inline void ServiceWorkerRegistrationData::set_scope_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scope_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerRegistrationData.scope_url)
}
inline std::string* ServiceWorkerRegistrationData::mutable_scope_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.scope_url)
  return scope_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceWorkerRegistrationData::release_scope_url() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.scope_url)
  if (!has_scope_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scope_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerRegistrationData::set_allocated_scope_url(std::string* scope_url) {
  if (scope_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scope_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope_url);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.scope_url)
}

// required string script_url = 3;
inline bool ServiceWorkerRegistrationData::has_script_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_script_url() {
  script_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServiceWorkerRegistrationData::script_url() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.script_url)
  return script_url_.GetNoArena();
}
inline void ServiceWorkerRegistrationData::set_script_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  script_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.script_url)
}
inline void ServiceWorkerRegistrationData::set_script_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  script_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerRegistrationData.script_url)
}
inline void ServiceWorkerRegistrationData::set_script_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  script_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerRegistrationData.script_url)
}
inline void ServiceWorkerRegistrationData::set_script_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  script_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerRegistrationData.script_url)
}
inline std::string* ServiceWorkerRegistrationData::mutable_script_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.script_url)
  return script_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceWorkerRegistrationData::release_script_url() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.script_url)
  if (!has_script_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return script_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerRegistrationData::set_allocated_script_url(std::string* script_url) {
  if (script_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  script_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script_url);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.script_url)
}

// required int64 version_id = 4;
inline bool ServiceWorkerRegistrationData::has_version_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_version_id() {
  version_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceWorkerRegistrationData::version_id() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.version_id)
  return version_id_;
}
inline void ServiceWorkerRegistrationData::set_version_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  version_id_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.version_id)
}

// required bool is_active = 5;
inline bool ServiceWorkerRegistrationData::has_is_active() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_is_active() {
  is_active_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ServiceWorkerRegistrationData::is_active() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.is_active)
  return is_active_;
}
inline void ServiceWorkerRegistrationData::set_is_active(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_active_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.is_active)
}

// required bool has_fetch_handler = 6;
inline bool ServiceWorkerRegistrationData::has_has_fetch_handler() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_has_fetch_handler() {
  has_fetch_handler_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ServiceWorkerRegistrationData::has_fetch_handler() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.has_fetch_handler)
  return has_fetch_handler_;
}
inline void ServiceWorkerRegistrationData::set_has_fetch_handler(bool value) {
  _has_bits_[0] |= 0x00000200u;
  has_fetch_handler_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.has_fetch_handler)
}

// required int64 last_update_check_time = 7;
inline bool ServiceWorkerRegistrationData::has_last_update_check_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_last_update_check_time() {
  last_update_check_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceWorkerRegistrationData::last_update_check_time() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.last_update_check_time)
  return last_update_check_time_;
}
inline void ServiceWorkerRegistrationData::set_last_update_check_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  last_update_check_time_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.last_update_check_time)
}

// optional uint64 resources_total_size_bytes = 8;
inline bool ServiceWorkerRegistrationData::has_resources_total_size_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_resources_total_size_bytes() {
  resources_total_size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServiceWorkerRegistrationData::resources_total_size_bytes() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.resources_total_size_bytes)
  return resources_total_size_bytes_;
}
inline void ServiceWorkerRegistrationData::set_resources_total_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  resources_total_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.resources_total_size_bytes)
}

// optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
inline bool ServiceWorkerRegistrationData::has_origin_trial_tokens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_origin_trial_tokens() {
  if (origin_trial_tokens_ != nullptr) origin_trial_tokens_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::content::ServiceWorkerOriginTrialInfo& ServiceWorkerRegistrationData::origin_trial_tokens() const {
  const ::content::ServiceWorkerOriginTrialInfo* p = origin_trial_tokens_;
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.origin_trial_tokens)
  return p != nullptr ? *p : *reinterpret_cast<const ::content::ServiceWorkerOriginTrialInfo*>(
      &::content::_ServiceWorkerOriginTrialInfo_default_instance_);
}
inline ::content::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::release_origin_trial_tokens() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.origin_trial_tokens)
  _has_bits_[0] &= ~0x00000004u;
  ::content::ServiceWorkerOriginTrialInfo* temp = origin_trial_tokens_;
  origin_trial_tokens_ = nullptr;
  return temp;
}
inline ::content::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::mutable_origin_trial_tokens() {
  _has_bits_[0] |= 0x00000004u;
  if (origin_trial_tokens_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::ServiceWorkerOriginTrialInfo>(GetArenaNoVirtual());
    origin_trial_tokens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.origin_trial_tokens)
  return origin_trial_tokens_;
}
inline void ServiceWorkerRegistrationData::set_allocated_origin_trial_tokens(::content::ServiceWorkerOriginTrialInfo* origin_trial_tokens) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete origin_trial_tokens_;
  }
  if (origin_trial_tokens) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      origin_trial_tokens = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_trial_tokens, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  origin_trial_tokens_ = origin_trial_tokens;
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.origin_trial_tokens)
}

// optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
inline bool ServiceWorkerRegistrationData::has_navigation_preload_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_navigation_preload_state() {
  if (navigation_preload_state_ != nullptr) navigation_preload_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::content::ServiceWorkerNavigationPreloadState& ServiceWorkerRegistrationData::navigation_preload_state() const {
  const ::content::ServiceWorkerNavigationPreloadState* p = navigation_preload_state_;
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.navigation_preload_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::content::ServiceWorkerNavigationPreloadState*>(
      &::content::_ServiceWorkerNavigationPreloadState_default_instance_);
}
inline ::content::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::release_navigation_preload_state() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.navigation_preload_state)
  _has_bits_[0] &= ~0x00000008u;
  ::content::ServiceWorkerNavigationPreloadState* temp = navigation_preload_state_;
  navigation_preload_state_ = nullptr;
  return temp;
}
inline ::content::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::mutable_navigation_preload_state() {
  _has_bits_[0] |= 0x00000008u;
  if (navigation_preload_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::ServiceWorkerNavigationPreloadState>(GetArenaNoVirtual());
    navigation_preload_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.navigation_preload_state)
  return navigation_preload_state_;
}
inline void ServiceWorkerRegistrationData::set_allocated_navigation_preload_state(::content::ServiceWorkerNavigationPreloadState* navigation_preload_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete navigation_preload_state_;
  }
  if (navigation_preload_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      navigation_preload_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_preload_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  navigation_preload_state_ = navigation_preload_state;
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.navigation_preload_state)
}

// repeated uint32 used_features = 13;
inline int ServiceWorkerRegistrationData::used_features_size() const {
  return used_features_.size();
}
inline void ServiceWorkerRegistrationData::clear_used_features() {
  used_features_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceWorkerRegistrationData::used_features(int index) const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.used_features)
  return used_features_.Get(index);
}
inline void ServiceWorkerRegistrationData::set_used_features(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  used_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.used_features)
}
inline void ServiceWorkerRegistrationData::add_used_features(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  used_features_.Add(value);
  // @@protoc_insertion_point(field_add:content.ServiceWorkerRegistrationData.used_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ServiceWorkerRegistrationData::used_features() const {
  // @@protoc_insertion_point(field_list:content.ServiceWorkerRegistrationData.used_features)
  return used_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ServiceWorkerRegistrationData::mutable_used_features() {
  // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerRegistrationData.used_features)
  return &used_features_;
}

// optional .content.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
inline bool ServiceWorkerRegistrationData::has_update_via_cache() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_update_via_cache() {
  update_via_cache_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::update_via_cache() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.update_via_cache)
  return static_cast< ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType >(update_via_cache_);
}
inline void ServiceWorkerRegistrationData::set_update_via_cache(::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value) {
  assert(::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  update_via_cache_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.update_via_cache)
}

// optional .content.ServiceWorkerRegistrationData.ServiceWorkerScriptType script_type = 15 [default = CLASSIC];
inline bool ServiceWorkerRegistrationData::has_script_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_script_type() {
  script_type_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData::script_type() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.script_type)
  return static_cast< ::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType >(script_type_);
}
inline void ServiceWorkerRegistrationData::set_script_type(::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType value) {
  assert(::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  script_type_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.script_type)
}

// optional int64 script_response_time = 16;
inline bool ServiceWorkerRegistrationData::has_script_response_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_script_response_time() {
  script_response_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceWorkerRegistrationData::script_response_time() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.script_response_time)
  return script_response_time_;
}
inline void ServiceWorkerRegistrationData::set_script_response_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  script_response_time_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.script_response_time)
}

// optional .content.ServiceWorkerRegistrationData.CrossOriginEmbedderPolicy cross_origin_embedder_policy = 17 [default = NONE_OR_NOT_EXIST];
inline bool ServiceWorkerRegistrationData::has_cross_origin_embedder_policy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ServiceWorkerRegistrationData::clear_cross_origin_embedder_policy() {
  cross_origin_embedder_policy_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy ServiceWorkerRegistrationData::cross_origin_embedder_policy() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.cross_origin_embedder_policy)
  return static_cast< ::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy >(cross_origin_embedder_policy_);
}
inline void ServiceWorkerRegistrationData::set_cross_origin_embedder_policy(::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy value) {
  assert(::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  cross_origin_embedder_policy_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.cross_origin_embedder_policy)
}

// -------------------------------------------------------------------

// ServiceWorkerResourceRecord

// required int64 resource_id = 1;
inline bool ServiceWorkerResourceRecord::has_resource_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceWorkerResourceRecord::clear_resource_id() {
  resource_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceWorkerResourceRecord::resource_id() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.resource_id)
  return resource_id_;
}
inline void ServiceWorkerResourceRecord::set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  resource_id_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.resource_id)
}

// required string url = 2;
inline bool ServiceWorkerResourceRecord::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceWorkerResourceRecord::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceWorkerResourceRecord::url() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.url)
  return url_.GetNoArena();
}
inline void ServiceWorkerResourceRecord::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.url)
}
inline void ServiceWorkerResourceRecord::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.ServiceWorkerResourceRecord.url)
}
inline void ServiceWorkerResourceRecord::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.ServiceWorkerResourceRecord.url)
}
inline void ServiceWorkerResourceRecord::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerResourceRecord.url)
}
inline std::string* ServiceWorkerResourceRecord::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.ServiceWorkerResourceRecord.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceWorkerResourceRecord::release_url() {
  // @@protoc_insertion_point(field_release:content.ServiceWorkerResourceRecord.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceWorkerResourceRecord::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerResourceRecord.url)
}

// optional uint64 size_bytes = 3;
inline bool ServiceWorkerResourceRecord::has_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceWorkerResourceRecord::clear_size_bytes() {
  size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServiceWorkerResourceRecord::size_bytes() const {
  // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.size_bytes)
  return size_bytes_;
}
inline void ServiceWorkerResourceRecord::set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  size_bytes_ = value;
  // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.size_bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::ServiceWorkerRegistrationData_ServiceWorkerScriptType> : ::std::true_type {};
template <> struct is_proto_enum< ::content::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType> : ::std::true_type {};
template <> struct is_proto_enum< ::content::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicy> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_5fworker_5fdatabase_2eproto
