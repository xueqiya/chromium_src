// content/browser/process_internals/process_internals.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_BROWSER_PROCESS_INTERNALS_PROCESS_INTERNALS_MOJOM_SHARED_INTERNAL_H_
#define CONTENT_BROWSER_PROCESS_INTERNALS_PROCESS_INTERNALS_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace mojom {
namespace internal {
class SiteInstanceInfo_Data;
class FrameInfo_Data;
class WebContentsInfo_Data;
class IsolatedOriginInfo_Data;

#pragma pack(push, 1)
class  SiteInstanceInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SiteInstanceInfo_Data));
      new (data()) SiteInstanceInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SiteInstanceInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SiteInstanceInfo_Data>(index_);
    }
    SiteInstanceInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t id;
  uint8_t locked : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> site_url;

 private:
  SiteInstanceInfo_Data();
  ~SiteInstanceInfo_Data() = delete;
};
static_assert(sizeof(SiteInstanceInfo_Data) == 24,
              "Bad sizeof(SiteInstanceInfo_Data)");
// Used by SiteInstanceInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SiteInstanceInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SiteInstanceInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SiteInstanceInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    SiteInstanceInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SiteInstanceInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FrameInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInfo_Data));
      new (data()) FrameInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInfo_Data>(index_);
    }
    FrameInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t routing_id;
  int32_t process_id;
  mojo::internal::Pointer<internal::SiteInstanceInfo_Data> site_instance;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> last_committed_url;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::FrameInfo_Data>>> subframes;

 private:
  FrameInfo_Data();
  ~FrameInfo_Data() = delete;
};
static_assert(sizeof(FrameInfo_Data) == 40,
              "Bad sizeof(FrameInfo_Data)");
// Used by FrameInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FrameInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FrameInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FrameInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    FrameInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FrameInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  WebContentsInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WebContentsInfo_Data));
      new (data()) WebContentsInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WebContentsInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WebContentsInfo_Data>(index_);
    }
    WebContentsInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> title;
  mojo::internal::Pointer<internal::FrameInfo_Data> root_frame;

 private:
  WebContentsInfo_Data();
  ~WebContentsInfo_Data() = delete;
};
static_assert(sizeof(WebContentsInfo_Data) == 24,
              "Bad sizeof(WebContentsInfo_Data)");
// Used by WebContentsInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebContentsInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebContentsInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebContentsInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    WebContentsInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebContentsInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  IsolatedOriginInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(IsolatedOriginInfo_Data));
      new (data()) IsolatedOriginInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    IsolatedOriginInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<IsolatedOriginInfo_Data>(index_);
    }
    IsolatedOriginInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> origin;
  mojo::internal::Pointer<mojo::internal::String_Data> source;

 private:
  IsolatedOriginInfo_Data();
  ~IsolatedOriginInfo_Data() = delete;
};
static_assert(sizeof(IsolatedOriginInfo_Data) == 24,
              "Bad sizeof(IsolatedOriginInfo_Data)");
// Used by IsolatedOriginInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct IsolatedOriginInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  IsolatedOriginInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~IsolatedOriginInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    IsolatedOriginInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    IsolatedOriginInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom

#endif  // CONTENT_BROWSER_PROCESS_INTERNALS_PROCESS_INTERNALS_MOJOM_SHARED_INTERNAL_H_