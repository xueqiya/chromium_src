// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/lang/reflect/Modifier

#ifndef java_lang_reflect_Modifier_JNI
#define java_lang_reflect_Modifier_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_java_lang_reflect_Modifier[];
const char kClassPath_java_lang_reflect_Modifier[] = "java/lang/reflect/Modifier";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_java_lang_reflect_Modifier_clazz(nullptr);
#ifndef java_lang_reflect_Modifier_clazz_defined
#define java_lang_reflect_Modifier_clazz_defined
inline jclass java_lang_reflect_Modifier_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_java_lang_reflect_Modifier,
      &g_java_lang_reflect_Modifier_clazz);
}
#endif


// Step 2: Constants (optional).

namespace JNI_Modifier {

enum Java_Modifier_constant_fields {
  ABSTRACT = 1024,
  FINAL = 16,
  INTERFACE = 512,
  NATIVE = 256,
  PRIVATE = 2,
  PROTECTED = 4,
  PUBLIC = 1,
  STATIC = 8,
  STRICT = 2048,
  SYNCHRONIZED = 32,
  TRANSIENT = 128,
  VOLATILE = 64,
};


}  // namespace JNI_Modifier
// Step 3: Method stubs.
namespace JNI_Modifier {


static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isPublic(nullptr);
static jboolean Java_Modifier_isPublic(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isPublic(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isPublic",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isPublic);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isPrivate(nullptr);
static jboolean Java_Modifier_isPrivate(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isPrivate(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isPrivate",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isPrivate);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isProtected(nullptr);
static jboolean Java_Modifier_isProtected(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isProtected(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isProtected",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isProtected);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isStatic(nullptr);
static jboolean Java_Modifier_isStatic(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isStatic(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isStatic",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isStatic);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isFinal(nullptr);
static jboolean Java_Modifier_isFinal(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isFinal(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isFinal",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isFinal);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isSynchronized(nullptr);
static jboolean Java_Modifier_isSynchronized(JNIEnv* env, JniIntWrapper p0) __attribute__
    ((unused));
static jboolean Java_Modifier_isSynchronized(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isSynchronized",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isSynchronized);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isVolatile(nullptr);
static jboolean Java_Modifier_isVolatile(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isVolatile(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isVolatile",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isVolatile);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isTransient(nullptr);
static jboolean Java_Modifier_isTransient(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isTransient(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isTransient",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isTransient);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isNative(nullptr);
static jboolean Java_Modifier_isNative(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isNative(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isNative",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isNative);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isInterface(nullptr);
static jboolean Java_Modifier_isInterface(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isInterface(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isInterface",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isInterface);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isAbstract(nullptr);
static jboolean Java_Modifier_isAbstract(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isAbstract(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isAbstract",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isAbstract);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_isStrict(nullptr);
static jboolean Java_Modifier_isStrict(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jboolean Java_Modifier_isStrict(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isStrict",
          "(I)Z",
          &g_java_lang_reflect_Modifier_isStrict);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(p0));
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_toString(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Modifier_toString(JNIEnv* env, JniIntWrapper
    p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Modifier_toString(JNIEnv* env, JniIntWrapper
    p0) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "toString",
          "(I)Ljava/lang/String;",
          &g_java_lang_reflect_Modifier_toString);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(p0)));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_classModifiers(nullptr);
static jint Java_Modifier_classModifiers(JNIEnv* env) __attribute__ ((unused));
static jint Java_Modifier_classModifiers(JNIEnv* env) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "classModifiers",
          "()I",
          &g_java_lang_reflect_Modifier_classModifiers);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_interfaceModifiers(nullptr);
static jint Java_Modifier_interfaceModifiers(JNIEnv* env) __attribute__ ((unused));
static jint Java_Modifier_interfaceModifiers(JNIEnv* env) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "interfaceModifiers",
          "()I",
          &g_java_lang_reflect_Modifier_interfaceModifiers);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_constructorModifiers(nullptr);
static jint Java_Modifier_constructorModifiers(JNIEnv* env) __attribute__ ((unused));
static jint Java_Modifier_constructorModifiers(JNIEnv* env) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "constructorModifiers",
          "()I",
          &g_java_lang_reflect_Modifier_constructorModifiers);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_methodModifiers(nullptr);
static jint Java_Modifier_methodModifiers(JNIEnv* env) __attribute__ ((unused));
static jint Java_Modifier_methodModifiers(JNIEnv* env) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "methodModifiers",
          "()I",
          &g_java_lang_reflect_Modifier_methodModifiers);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_fieldModifiers(nullptr);
static jint Java_Modifier_fieldModifiers(JNIEnv* env) __attribute__ ((unused));
static jint Java_Modifier_fieldModifiers(JNIEnv* env) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "fieldModifiers",
          "()I",
          &g_java_lang_reflect_Modifier_fieldModifiers);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_parameterModifiers(nullptr);
static jint Java_Modifier_parameterModifiers(JNIEnv* env) __attribute__ ((unused));
static jint Java_Modifier_parameterModifiers(JNIEnv* env) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "parameterModifiers",
          "()I",
          &g_java_lang_reflect_Modifier_parameterModifiers);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Modifier_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Modifier_Constructor(JNIEnv* env)
    __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Modifier_Constructor(JNIEnv* env) {
  jclass clazz = java_lang_reflect_Modifier_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_Modifier_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "()V",
          &g_java_lang_reflect_Modifier_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace JNI_Modifier

// Step 4: Generated test functions (optional).


#endif  // java_lang_reflect_Modifier_JNI
