// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/lang/reflect/Method

#ifndef java_lang_reflect_Method_JNI
#define java_lang_reflect_Method_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_java_lang_reflect_Method[];
const char kClassPath_java_lang_reflect_Method[] = "java/lang/reflect/Method";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_java_lang_reflect_Method_clazz(nullptr);
#ifndef java_lang_reflect_Method_clazz_defined
#define java_lang_reflect_Method_clazz_defined
inline jclass java_lang_reflect_Method_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_java_lang_reflect_Method,
      &g_java_lang_reflect_Method_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace JNI_Method {


static std::atomic<jmethodID> g_java_lang_reflect_Method_getDeclaringClass(nullptr);
static base::android::ScopedJavaLocalRef<jclass> Java_Method_getDeclaringClass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jclass> Java_Method_getDeclaringClass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaringClass",
          "()Ljava/lang/Class;",
          &g_java_lang_reflect_Method_getDeclaringClass);

  jclass ret =
      static_cast<jclass>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jclass>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getName(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Method_getName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Method_getName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getName",
          "()Ljava/lang/String;",
          &g_java_lang_reflect_Method_getName);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getModifiers(nullptr);
static jint Java_Method_getModifiers(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jint Java_Method_getModifiers(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getModifiers",
          "()I",
          &g_java_lang_reflect_Method_getModifiers);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getTypeParameters(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getTypeParameters(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getTypeParameters(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getTypeParameters",
          "()[Ljava/lang/reflect/TypeVariable;",
          &g_java_lang_reflect_Method_getTypeParameters);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getReturnType(nullptr);
static base::android::ScopedJavaLocalRef<jclass> Java_Method_getReturnType(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jclass> Java_Method_getReturnType(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getReturnType",
          "()Ljava/lang/Class;",
          &g_java_lang_reflect_Method_getReturnType);

  jclass ret =
      static_cast<jclass>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jclass>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getGenericReturnType(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Method_getGenericReturnType(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Method_getGenericReturnType(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getGenericReturnType",
          "()Ljava/lang/reflect/Type;",
          &g_java_lang_reflect_Method_getGenericReturnType);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getParameterTypes(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getParameterTypes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getParameterTypes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getParameterTypes",
          "()[Ljava/lang/Class;",
          &g_java_lang_reflect_Method_getParameterTypes);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getParameterCount(nullptr);
static jint Java_Method_getParameterCount(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jint Java_Method_getParameterCount(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getParameterCount",
          "()I",
          &g_java_lang_reflect_Method_getParameterCount);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getGenericParameterTypes(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getGenericParameterTypes(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getGenericParameterTypes(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getGenericParameterTypes",
          "()[Ljava/lang/reflect/Type;",
          &g_java_lang_reflect_Method_getGenericParameterTypes);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getExceptionTypes(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getExceptionTypes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getExceptionTypes(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getExceptionTypes",
          "()[Ljava/lang/Class;",
          &g_java_lang_reflect_Method_getExceptionTypes);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getGenericExceptionTypes(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getGenericExceptionTypes(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getGenericExceptionTypes(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getGenericExceptionTypes",
          "()[Ljava/lang/reflect/Type;",
          &g_java_lang_reflect_Method_getGenericExceptionTypes);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_equals(nullptr);
static jboolean Java_Method_equals(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static jboolean Java_Method_equals(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "equals",
          "(Ljava/lang/Object;)Z",
          &g_java_lang_reflect_Method_equals);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_hashCode(nullptr);
static jint Java_Method_hashCode(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jint Java_Method_hashCode(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "hashCode",
          "()I",
          &g_java_lang_reflect_Method_hashCode);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_toString(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Method_toString(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Method_toString(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "toString",
          "()Ljava/lang/String;",
          &g_java_lang_reflect_Method_toString);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_toGenericString(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Method_toGenericString(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Method_toGenericString(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "toGenericString",
          "()Ljava/lang/String;",
          &g_java_lang_reflect_Method_toGenericString);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_invoke(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Method_invoke(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Method_invoke(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0,
    const base::android::JavaRef<jobject>& p1) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "invoke",
          "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",
          &g_java_lang_reflect_Method_invoke);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj(), p1.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_isBridge(nullptr);
static jboolean Java_Method_isBridge(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Method_isBridge(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isBridge",
          "()Z",
          &g_java_lang_reflect_Method_isBridge);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_isVarArgs(nullptr);
static jboolean Java_Method_isVarArgs(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Method_isVarArgs(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isVarArgs",
          "()Z",
          &g_java_lang_reflect_Method_isVarArgs);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_isSynthetic(nullptr);
static jboolean Java_Method_isSynthetic(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Method_isSynthetic(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isSynthetic",
          "()Z",
          &g_java_lang_reflect_Method_isSynthetic);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_isDefault(nullptr);
static jboolean Java_Method_isDefault(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Method_isDefault(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isDefault",
          "()Z",
          &g_java_lang_reflect_Method_isDefault);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getDefaultValue(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Method_getDefaultValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Method_getDefaultValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDefaultValue",
          "()Ljava/lang/Object;",
          &g_java_lang_reflect_Method_getDefaultValue);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getAnnotation(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Method_getAnnotation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Method_getAnnotation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAnnotation",
          "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;",
          &g_java_lang_reflect_Method_getAnnotation);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getDeclaredAnnotations(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getDeclaredAnnotations(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getDeclaredAnnotations(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredAnnotations",
          "()[Ljava/lang/annotation/Annotation;",
          &g_java_lang_reflect_Method_getDeclaredAnnotations);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_Method_getParameterAnnotations(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getParameterAnnotations(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Method_getParameterAnnotations(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_Method_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_Method_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getParameterAnnotations",
          "()[[Ljava/lang/annotation/Annotation;",
          &g_java_lang_reflect_Method_getParameterAnnotations);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

}  // namespace JNI_Method

// Step 4: Generated test functions (optional).


#endif  // java_lang_reflect_Method_JNI
