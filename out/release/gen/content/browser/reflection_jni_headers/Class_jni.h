// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/lang/Class

#ifndef java_lang_Class_JNI
#define java_lang_Class_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_java_lang_Class[];
const char kClassPath_java_lang_Class[] = "java/lang/Class";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_java_lang_Class_clazz(nullptr);
#ifndef java_lang_Class_clazz_defined
#define java_lang_Class_clazz_defined
inline jclass java_lang_Class_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_java_lang_Class, &g_java_lang_Class_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace JNI_Class {


static std::atomic<jmethodID> g_java_lang_Class_toString(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Class_toString(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Class_toString(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "toString",
          "()Ljava/lang/String;",
          &g_java_lang_Class_toString);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_toGenericString(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Class_toGenericString(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Class_toGenericString(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "toGenericString",
          "()Ljava/lang/String;",
          &g_java_lang_Class_toGenericString);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_forNameJLC_JLS(nullptr);
static base::android::ScopedJavaLocalRef<jclass> Java_Class_forNameJLC_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jclass> Java_Class_forNameJLC_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "forName",
          "(Ljava/lang/String;)Ljava/lang/Class;",
          &g_java_lang_Class_forNameJLC_JLS);

  jclass ret =
      static_cast<jclass>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, p0.obj()));
  return base::android::ScopedJavaLocalRef<jclass>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_forNameJLC_JLS_Z_JLCLO(nullptr);
static base::android::ScopedJavaLocalRef<jclass> Java_Class_forNameJLC_JLS_Z_JLCLO(JNIEnv* env,
    const base::android::JavaRef<jstring>& p0,
    jboolean p1,
    const base::android::JavaRef<jobject>& p2) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jclass> Java_Class_forNameJLC_JLS_Z_JLCLO(JNIEnv* env,
    const base::android::JavaRef<jstring>& p0,
    jboolean p1,
    const base::android::JavaRef<jobject>& p2) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "forName",
          "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;",
          &g_java_lang_Class_forNameJLC_JLS_Z_JLCLO);

  jclass ret =
      static_cast<jclass>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, p0.obj(), p1, p2.obj()));
  return base::android::ScopedJavaLocalRef<jclass>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_newInstance(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_newInstance(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_newInstance(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "newInstance",
          "()Ljava/lang/Object;",
          &g_java_lang_Class_newInstance);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_isInstance(nullptr);
static jboolean Java_Class_isInstance(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static jboolean Java_Class_isInstance(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isInstance",
          "(Ljava/lang/Object;)Z",
          &g_java_lang_Class_isInstance);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_isAssignableFrom(nullptr);
static jboolean Java_Class_isAssignableFrom(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jclass>& p0) __attribute__ ((unused));
static jboolean Java_Class_isAssignableFrom(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isAssignableFrom",
          "(Ljava/lang/Class;)Z",
          &g_java_lang_Class_isAssignableFrom);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_isInterface(nullptr);
static jboolean Java_Class_isInterface(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Class_isInterface(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isInterface",
          "()Z",
          &g_java_lang_Class_isInterface);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_isArray(nullptr);
static jboolean Java_Class_isArray(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Class_isArray(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isArray",
          "()Z",
          &g_java_lang_Class_isArray);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_isPrimitive(nullptr);
static jboolean Java_Class_isPrimitive(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Class_isPrimitive(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isPrimitive",
          "()Z",
          &g_java_lang_Class_isPrimitive);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_isAnnotation(nullptr);
static jboolean Java_Class_isAnnotation(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Class_isAnnotation(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isAnnotation",
          "()Z",
          &g_java_lang_Class_isAnnotation);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_isSynthetic(nullptr);
static jboolean Java_Class_isSynthetic(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Class_isSynthetic(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isSynthetic",
          "()Z",
          &g_java_lang_Class_isSynthetic);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_getName(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Class_getName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Class_getName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getName",
          "()Ljava/lang/String;",
          &g_java_lang_Class_getName);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getClassLoader(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getClassLoader(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getClassLoader(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getClassLoader",
          "()Ljava/lang/ClassLoader;",
          &g_java_lang_Class_getClassLoader);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getTypeParameters(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getTypeParameters(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getTypeParameters(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getTypeParameters",
          "()[Ljava/lang/reflect/TypeVariable;",
          &g_java_lang_Class_getTypeParameters);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getSuperclass(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getSuperclass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getSuperclass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSuperclass",
          "()Ljava/lang/Class;",
          &g_java_lang_Class_getSuperclass);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getGenericSuperclass(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getGenericSuperclass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getGenericSuperclass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getGenericSuperclass",
          "()Ljava/lang/reflect/Type;",
          &g_java_lang_Class_getGenericSuperclass);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getPackage(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getPackage(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getPackage(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getPackage",
          "()Ljava/lang/Package;",
          &g_java_lang_Class_getPackage);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getInterfaces(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getInterfaces(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getInterfaces(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getInterfaces",
          "()[Ljava/lang/Class;",
          &g_java_lang_Class_getInterfaces);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getGenericInterfaces(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getGenericInterfaces(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getGenericInterfaces(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getGenericInterfaces",
          "()[Ljava/lang/reflect/Type;",
          &g_java_lang_Class_getGenericInterfaces);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getComponentType(nullptr);
static base::android::ScopedJavaLocalRef<jclass> Java_Class_getComponentType(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jclass> Java_Class_getComponentType(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getComponentType",
          "()Ljava/lang/Class;",
          &g_java_lang_Class_getComponentType);

  jclass ret =
      static_cast<jclass>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jclass>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getModifiers(nullptr);
static jint Java_Class_getModifiers(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jint Java_Class_getModifiers(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getModifiers",
          "()I",
          &g_java_lang_Class_getModifiers);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_getSigners(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getSigners(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getSigners(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSigners",
          "()[Ljava/lang/Object;",
          &g_java_lang_Class_getSigners);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getEnclosingMethod(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getEnclosingMethod(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getEnclosingMethod(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getEnclosingMethod",
          "()Ljava/lang/reflect/Method;",
          &g_java_lang_Class_getEnclosingMethod);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getEnclosingConstructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getEnclosingConstructor(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getEnclosingConstructor(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getEnclosingConstructor",
          "()Ljava/lang/reflect/Constructor;",
          &g_java_lang_Class_getEnclosingConstructor);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getDeclaringClass(nullptr);
static base::android::ScopedJavaLocalRef<jclass> Java_Class_getDeclaringClass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jclass> Java_Class_getDeclaringClass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaringClass",
          "()Ljava/lang/Class;",
          &g_java_lang_Class_getDeclaringClass);

  jclass ret =
      static_cast<jclass>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jclass>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getEnclosingClass(nullptr);
static base::android::ScopedJavaLocalRef<jclass> Java_Class_getEnclosingClass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jclass> Java_Class_getEnclosingClass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getEnclosingClass",
          "()Ljava/lang/Class;",
          &g_java_lang_Class_getEnclosingClass);

  jclass ret =
      static_cast<jclass>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jclass>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getSimpleName(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Class_getSimpleName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Class_getSimpleName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSimpleName",
          "()Ljava/lang/String;",
          &g_java_lang_Class_getSimpleName);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getTypeName(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Class_getTypeName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Class_getTypeName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getTypeName",
          "()Ljava/lang/String;",
          &g_java_lang_Class_getTypeName);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getCanonicalName(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Class_getCanonicalName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Class_getCanonicalName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getCanonicalName",
          "()Ljava/lang/String;",
          &g_java_lang_Class_getCanonicalName);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_isAnonymousClass(nullptr);
static jboolean Java_Class_isAnonymousClass(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Class_isAnonymousClass(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isAnonymousClass",
          "()Z",
          &g_java_lang_Class_isAnonymousClass);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_isLocalClass(nullptr);
static jboolean Java_Class_isLocalClass(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Class_isLocalClass(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isLocalClass",
          "()Z",
          &g_java_lang_Class_isLocalClass);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_isMemberClass(nullptr);
static jboolean Java_Class_isMemberClass(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Class_isMemberClass(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isMemberClass",
          "()Z",
          &g_java_lang_Class_isMemberClass);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_getClasses(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getClasses(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getClasses(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getClasses",
          "()[Ljava/lang/Class;",
          &g_java_lang_Class_getClasses);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getFields(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getFields(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getFields(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getFields",
          "()[Ljava/lang/reflect/Field;",
          &g_java_lang_Class_getFields);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getMethods(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getMethods(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getMethods(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMethods",
          "()[Ljava/lang/reflect/Method;",
          &g_java_lang_Class_getMethods);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getConstructors(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getConstructors(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getConstructors(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getConstructors",
          "()[Ljava/lang/reflect/Constructor;",
          &g_java_lang_Class_getConstructors);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getField(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getField(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getField(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getField",
          "(Ljava/lang/String;)Ljava/lang/reflect/Field;",
          &g_java_lang_Class_getField);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getMethod(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getMethod(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getMethod(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0,
    const base::android::JavaRef<jobject>& p1) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMethod",
          "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;",
          &g_java_lang_Class_getMethod);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj(), p1.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getConstructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getConstructor(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getConstructor(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getConstructor",
          "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;",
          &g_java_lang_Class_getConstructor);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getDeclaredClasses(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getDeclaredClasses(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getDeclaredClasses(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredClasses",
          "()[Ljava/lang/Class;",
          &g_java_lang_Class_getDeclaredClasses);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getDeclaredFields(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getDeclaredFields(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getDeclaredFields(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredFields",
          "()[Ljava/lang/reflect/Field;",
          &g_java_lang_Class_getDeclaredFields);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getDeclaredMethods(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getDeclaredMethods(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getDeclaredMethods(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredMethods",
          "()[Ljava/lang/reflect/Method;",
          &g_java_lang_Class_getDeclaredMethods);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getDeclaredConstructors(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getDeclaredConstructors(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getDeclaredConstructors(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredConstructors",
          "()[Ljava/lang/reflect/Constructor;",
          &g_java_lang_Class_getDeclaredConstructors);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getDeclaredField(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getDeclaredField(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getDeclaredField(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredField",
          "(Ljava/lang/String;)Ljava/lang/reflect/Field;",
          &g_java_lang_Class_getDeclaredField);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getDeclaredMethod(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getDeclaredMethod(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getDeclaredMethod(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0,
    const base::android::JavaRef<jobject>& p1) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredMethod",
          "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;",
          &g_java_lang_Class_getDeclaredMethod);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj(), p1.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getDeclaredConstructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getDeclaredConstructor(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0)
    __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getDeclaredConstructor(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredConstructor",
          "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;",
          &g_java_lang_Class_getDeclaredConstructor);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getResourceAsStream(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getResourceAsStream(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getResourceAsStream(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getResourceAsStream",
          "(Ljava/lang/String;)Ljava/io/InputStream;",
          &g_java_lang_Class_getResourceAsStream);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getResource(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getResource(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getResource(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getResource",
          "(Ljava/lang/String;)Ljava/net/URL;",
          &g_java_lang_Class_getResource);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getProtectionDomain(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getProtectionDomain(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getProtectionDomain(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getProtectionDomain",
          "()Ljava/security/ProtectionDomain;",
          &g_java_lang_Class_getProtectionDomain);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_desiredAssertionStatus(nullptr);
static jboolean Java_Class_desiredAssertionStatus(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jboolean Java_Class_desiredAssertionStatus(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "desiredAssertionStatus",
          "()Z",
          &g_java_lang_Class_desiredAssertionStatus);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_isEnum(nullptr);
static jboolean Java_Class_isEnum(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jboolean Java_Class_isEnum(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isEnum",
          "()Z",
          &g_java_lang_Class_isEnum);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_getEnumConstants(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getEnumConstants(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getEnumConstants(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getEnumConstants",
          "()[Ljava/lang/Object;",
          &g_java_lang_Class_getEnumConstants);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_cast(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_cast(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_cast(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "cast",
          "(Ljava/lang/Object;)Ljava/lang/Object;",
          &g_java_lang_Class_cast);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_asSubclass(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_asSubclass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_asSubclass(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "asSubclass",
          "(Ljava/lang/Class;)Ljava/lang/Class;",
          &g_java_lang_Class_asSubclass);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getAnnotation(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getAnnotation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getAnnotation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAnnotation",
          "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;",
          &g_java_lang_Class_getAnnotation);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_isAnnotationPresent(nullptr);
static jboolean Java_Class_isAnnotationPresent(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jclass>& p0) __attribute__ ((unused));
static jboolean Java_Class_isAnnotationPresent(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isAnnotationPresent",
          "(Ljava/lang/Class;)Z",
          &g_java_lang_Class_isAnnotationPresent);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Class_getAnnotationsByType(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getAnnotationsByType(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0)
    __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getAnnotationsByType(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAnnotationsByType",
          "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;",
          &g_java_lang_Class_getAnnotationsByType);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj()));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getAnnotations(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getAnnotations(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getAnnotations(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAnnotations",
          "()[Ljava/lang/annotation/Annotation;",
          &g_java_lang_Class_getAnnotations);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getDeclaredAnnotation(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getDeclaredAnnotation(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0)
    __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Class_getDeclaredAnnotation(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredAnnotation",
          "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;",
          &g_java_lang_Class_getDeclaredAnnotation);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Class_getDeclaredAnnotations(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getDeclaredAnnotations(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_Class_getDeclaredAnnotations(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_Class_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Class_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredAnnotations",
          "()[Ljava/lang/annotation/Annotation;",
          &g_java_lang_Class_getDeclaredAnnotations);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

}  // namespace JNI_Class

// Step 4: Generated test functions (optional).


#endif  // java_lang_Class_JNI
