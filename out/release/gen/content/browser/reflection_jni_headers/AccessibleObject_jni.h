// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/lang/reflect/AccessibleObject

#ifndef java_lang_reflect_AccessibleObject_JNI
#define java_lang_reflect_AccessibleObject_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_java_lang_reflect_AccessibleObject[];
const char kClassPath_java_lang_reflect_AccessibleObject[] = "java/lang/reflect/AccessibleObject";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_java_lang_reflect_AccessibleObject_clazz(nullptr);
#ifndef java_lang_reflect_AccessibleObject_clazz_defined
#define java_lang_reflect_AccessibleObject_clazz_defined
inline jclass java_lang_reflect_AccessibleObject_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_java_lang_reflect_AccessibleObject,
      &g_java_lang_reflect_AccessibleObject_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace JNI_AccessibleObject {


static std::atomic<jmethodID> g_java_lang_reflect_AccessibleObject_setAccessibleV_LJLRAO_Z(nullptr);
static void Java_AccessibleObject_setAccessibleV_LJLRAO_Z(JNIEnv* env, const
    base::android::JavaRef<jobjectArray>& p0,
    jboolean p1) __attribute__ ((unused));
static void Java_AccessibleObject_setAccessibleV_LJLRAO_Z(JNIEnv* env, const
    base::android::JavaRef<jobjectArray>& p0,
    jboolean p1) {
  jclass clazz = java_lang_reflect_AccessibleObject_clazz(env);
  CHECK_CLAZZ(env, clazz,
      java_lang_reflect_AccessibleObject_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setAccessible",
          "([Ljava/lang/reflect/AccessibleObject;Z)V",
          &g_java_lang_reflect_AccessibleObject_setAccessibleV_LJLRAO_Z);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, p0.obj(), p1);
}

static std::atomic<jmethodID> g_java_lang_reflect_AccessibleObject_setAccessibleV_Z(nullptr);
static void Java_AccessibleObject_setAccessibleV_Z(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean p0) __attribute__ ((unused));
static void Java_AccessibleObject_setAccessibleV_Z(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean p0) {
  jclass clazz = java_lang_reflect_AccessibleObject_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_AccessibleObject_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setAccessible",
          "(Z)V",
          &g_java_lang_reflect_AccessibleObject_setAccessibleV_Z);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, p0);
}

static std::atomic<jmethodID> g_java_lang_reflect_AccessibleObject_isAccessible(nullptr);
static jboolean Java_AccessibleObject_isAccessible(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jboolean Java_AccessibleObject_isAccessible(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_AccessibleObject_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_AccessibleObject_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isAccessible",
          "()Z",
          &g_java_lang_reflect_AccessibleObject_isAccessible);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_AccessibleObject_getAnnotation(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_AccessibleObject_getAnnotation(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0)
    __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_AccessibleObject_getAnnotation(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_reflect_AccessibleObject_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_AccessibleObject_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAnnotation",
          "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;",
          &g_java_lang_reflect_AccessibleObject_getAnnotation);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_AccessibleObject_isAnnotationPresent(nullptr);
static jboolean Java_AccessibleObject_isAnnotationPresent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) __attribute__
    ((unused));
static jboolean Java_AccessibleObject_isAnnotationPresent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_reflect_AccessibleObject_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_AccessibleObject_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isAnnotationPresent",
          "(Ljava/lang/Class;)Z",
          &g_java_lang_reflect_AccessibleObject_isAnnotationPresent);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return ret;
}

static std::atomic<jmethodID> g_java_lang_reflect_AccessibleObject_getAnnotationsByType(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_AccessibleObject_getAnnotationsByType(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jclass>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_AccessibleObject_getAnnotationsByType(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_reflect_AccessibleObject_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_AccessibleObject_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAnnotationsByType",
          "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;",
          &g_java_lang_reflect_AccessibleObject_getAnnotationsByType);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj()));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_AccessibleObject_getAnnotations(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_AccessibleObject_getAnnotations(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray> Java_AccessibleObject_getAnnotations(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = java_lang_reflect_AccessibleObject_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_AccessibleObject_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAnnotations",
          "()[Ljava/lang/annotation/Annotation;",
          &g_java_lang_reflect_AccessibleObject_getAnnotations);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_AccessibleObject_getDeclaredAnnotation(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_AccessibleObject_getDeclaredAnnotation(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jclass>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_AccessibleObject_getDeclaredAnnotation(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_reflect_AccessibleObject_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_AccessibleObject_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredAnnotation",
          "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;",
          &g_java_lang_reflect_AccessibleObject_getDeclaredAnnotation);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_java_lang_reflect_AccessibleObject_getDeclaredAnnotationsByType(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_AccessibleObject_getDeclaredAnnotationsByType(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_AccessibleObject_getDeclaredAnnotationsByType(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jclass>& p0) {
  jclass clazz = java_lang_reflect_AccessibleObject_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_AccessibleObject_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredAnnotationsByType",
          "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;",
          &g_java_lang_reflect_AccessibleObject_getDeclaredAnnotationsByType);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj()));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_reflect_AccessibleObject_getDeclaredAnnotations(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_AccessibleObject_getDeclaredAnnotations(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_AccessibleObject_getDeclaredAnnotations(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = java_lang_reflect_AccessibleObject_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_reflect_AccessibleObject_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDeclaredAnnotations",
          "()[Ljava/lang/annotation/Annotation;",
          &g_java_lang_reflect_AccessibleObject_getDeclaredAnnotations);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

}  // namespace JNI_AccessibleObject

// Step 4: Generated test functions (optional).


#endif  // java_lang_reflect_AccessibleObject_JNI
