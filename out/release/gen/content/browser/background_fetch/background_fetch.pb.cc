// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: background_fetch.proto

#include "background_fetch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_background_5ffetch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackgroundFetchOptions_background_5ffetch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_background_5ffetch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackgroundFetchOptions_ImageResource_background_5ffetch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_background_5ffetch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundFetchOptions_ImageResource_Size_background_5ffetch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_background_5ffetch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundFetchRegistration_background_5ffetch_2eproto;
namespace content {
namespace proto {
class BackgroundFetchRegistrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundFetchRegistration> _instance;
} _BackgroundFetchRegistration_default_instance_;
class BackgroundFetchOptions_ImageResource_SizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundFetchOptions_ImageResource_Size> _instance;
} _BackgroundFetchOptions_ImageResource_Size_default_instance_;
class BackgroundFetchOptions_ImageResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundFetchOptions_ImageResource> _instance;
} _BackgroundFetchOptions_ImageResource_default_instance_;
class BackgroundFetchOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundFetchOptions> _instance;
} _BackgroundFetchOptions_default_instance_;
class BackgroundFetchMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundFetchMetadata> _instance;
} _BackgroundFetchMetadata_default_instance_;
class BackgroundFetchUIOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundFetchUIOptions> _instance;
} _BackgroundFetchUIOptions_default_instance_;
class BackgroundFetchPendingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundFetchPendingRequest> _instance;
} _BackgroundFetchPendingRequest_default_instance_;
class BackgroundFetchActiveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundFetchActiveRequest> _instance;
} _BackgroundFetchActiveRequest_default_instance_;
class BackgroundFetchCompletedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundFetchCompletedRequest> _instance;
} _BackgroundFetchCompletedRequest_default_instance_;
}  // namespace proto
}  // namespace content
static void InitDefaultsscc_info_BackgroundFetchActiveRequest_background_5ffetch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_BackgroundFetchActiveRequest_default_instance_;
    new (ptr) ::content::proto::BackgroundFetchActiveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::BackgroundFetchActiveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundFetchActiveRequest_background_5ffetch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BackgroundFetchActiveRequest_background_5ffetch_2eproto}, {}};

static void InitDefaultsscc_info_BackgroundFetchCompletedRequest_background_5ffetch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_BackgroundFetchCompletedRequest_default_instance_;
    new (ptr) ::content::proto::BackgroundFetchCompletedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::BackgroundFetchCompletedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundFetchCompletedRequest_background_5ffetch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BackgroundFetchCompletedRequest_background_5ffetch_2eproto}, {}};

static void InitDefaultsscc_info_BackgroundFetchMetadata_background_5ffetch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_BackgroundFetchMetadata_default_instance_;
    new (ptr) ::content::proto::BackgroundFetchMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::BackgroundFetchMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BackgroundFetchMetadata_background_5ffetch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BackgroundFetchMetadata_background_5ffetch_2eproto}, {
      &scc_info_BackgroundFetchRegistration_background_5ffetch_2eproto.base,
      &scc_info_BackgroundFetchOptions_background_5ffetch_2eproto.base,}};

static void InitDefaultsscc_info_BackgroundFetchOptions_background_5ffetch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_BackgroundFetchOptions_default_instance_;
    new (ptr) ::content::proto::BackgroundFetchOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::BackgroundFetchOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackgroundFetchOptions_background_5ffetch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BackgroundFetchOptions_background_5ffetch_2eproto}, {
      &scc_info_BackgroundFetchOptions_ImageResource_background_5ffetch_2eproto.base,}};

static void InitDefaultsscc_info_BackgroundFetchOptions_ImageResource_background_5ffetch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_BackgroundFetchOptions_ImageResource_default_instance_;
    new (ptr) ::content::proto::BackgroundFetchOptions_ImageResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::BackgroundFetchOptions_ImageResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackgroundFetchOptions_ImageResource_background_5ffetch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BackgroundFetchOptions_ImageResource_background_5ffetch_2eproto}, {
      &scc_info_BackgroundFetchOptions_ImageResource_Size_background_5ffetch_2eproto.base,}};

static void InitDefaultsscc_info_BackgroundFetchOptions_ImageResource_Size_background_5ffetch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_BackgroundFetchOptions_ImageResource_Size_default_instance_;
    new (ptr) ::content::proto::BackgroundFetchOptions_ImageResource_Size();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::BackgroundFetchOptions_ImageResource_Size::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundFetchOptions_ImageResource_Size_background_5ffetch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BackgroundFetchOptions_ImageResource_Size_background_5ffetch_2eproto}, {}};

static void InitDefaultsscc_info_BackgroundFetchPendingRequest_background_5ffetch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_BackgroundFetchPendingRequest_default_instance_;
    new (ptr) ::content::proto::BackgroundFetchPendingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::BackgroundFetchPendingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundFetchPendingRequest_background_5ffetch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BackgroundFetchPendingRequest_background_5ffetch_2eproto}, {}};

static void InitDefaultsscc_info_BackgroundFetchRegistration_background_5ffetch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_BackgroundFetchRegistration_default_instance_;
    new (ptr) ::content::proto::BackgroundFetchRegistration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::BackgroundFetchRegistration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundFetchRegistration_background_5ffetch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BackgroundFetchRegistration_background_5ffetch_2eproto}, {}};

static void InitDefaultsscc_info_BackgroundFetchUIOptions_background_5ffetch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::proto::_BackgroundFetchUIOptions_default_instance_;
    new (ptr) ::content::proto::BackgroundFetchUIOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::proto::BackgroundFetchUIOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundFetchUIOptions_background_5ffetch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BackgroundFetchUIOptions_background_5ffetch_2eproto}, {}};

namespace content {
namespace proto {
bool BackgroundFetchRegistration_BackgroundFetchResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundFetchRegistration_BackgroundFetchResult_strings[3] = {};

static const char BackgroundFetchRegistration_BackgroundFetchResult_names[] =
  "FAILURE"
  "SUCCESS"
  "UNSET";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundFetchRegistration_BackgroundFetchResult_entries[] = {
  { {BackgroundFetchRegistration_BackgroundFetchResult_names + 0, 7}, 1 },
  { {BackgroundFetchRegistration_BackgroundFetchResult_names + 7, 7}, 2 },
  { {BackgroundFetchRegistration_BackgroundFetchResult_names + 14, 5}, 0 },
};

static const int BackgroundFetchRegistration_BackgroundFetchResult_entries_by_number[] = {
  2, // 0 -> UNSET
  0, // 1 -> FAILURE
  1, // 2 -> SUCCESS
};

const std::string& BackgroundFetchRegistration_BackgroundFetchResult_Name(
    BackgroundFetchRegistration_BackgroundFetchResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundFetchRegistration_BackgroundFetchResult_entries,
          BackgroundFetchRegistration_BackgroundFetchResult_entries_by_number,
          3, BackgroundFetchRegistration_BackgroundFetchResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundFetchRegistration_BackgroundFetchResult_entries,
      BackgroundFetchRegistration_BackgroundFetchResult_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundFetchRegistration_BackgroundFetchResult_strings[idx].get();
}
bool BackgroundFetchRegistration_BackgroundFetchResult_Parse(
    const std::string& name, BackgroundFetchRegistration_BackgroundFetchResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundFetchRegistration_BackgroundFetchResult_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundFetchRegistration_BackgroundFetchResult>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::UNSET;
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::FAILURE;
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::SUCCESS;
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::BackgroundFetchResult_MIN;
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::BackgroundFetchResult_MAX;
constexpr int BackgroundFetchRegistration::BackgroundFetchResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundFetchRegistration_BackgroundFetchFailureReason_strings[8] = {};

static const char BackgroundFetchRegistration_BackgroundFetchFailureReason_names[] =
  "BAD_STATUS"
  "CANCELLED_BY_DEVELOPER"
  "CANCELLED_FROM_UI"
  "DOWNLOAD_TOTAL_EXCEEDED"
  "FETCH_ERROR"
  "NONE"
  "QUOTA_EXCEEDED"
  "SERVICE_WORKER_UNAVAILABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundFetchRegistration_BackgroundFetchFailureReason_entries[] = {
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 0, 10}, 3 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 10, 22}, 2 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 32, 17}, 1 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 49, 23}, 7 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 72, 11}, 4 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 83, 4}, 0 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 87, 14}, 6 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 101, 26}, 5 },
};

static const int BackgroundFetchRegistration_BackgroundFetchFailureReason_entries_by_number[] = {
  5, // 0 -> NONE
  2, // 1 -> CANCELLED_FROM_UI
  1, // 2 -> CANCELLED_BY_DEVELOPER
  0, // 3 -> BAD_STATUS
  4, // 4 -> FETCH_ERROR
  7, // 5 -> SERVICE_WORKER_UNAVAILABLE
  6, // 6 -> QUOTA_EXCEEDED
  3, // 7 -> DOWNLOAD_TOTAL_EXCEEDED
};

const std::string& BackgroundFetchRegistration_BackgroundFetchFailureReason_Name(
    BackgroundFetchRegistration_BackgroundFetchFailureReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundFetchRegistration_BackgroundFetchFailureReason_entries,
          BackgroundFetchRegistration_BackgroundFetchFailureReason_entries_by_number,
          8, BackgroundFetchRegistration_BackgroundFetchFailureReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundFetchRegistration_BackgroundFetchFailureReason_entries,
      BackgroundFetchRegistration_BackgroundFetchFailureReason_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundFetchRegistration_BackgroundFetchFailureReason_strings[idx].get();
}
bool BackgroundFetchRegistration_BackgroundFetchFailureReason_Parse(
    const std::string& name, BackgroundFetchRegistration_BackgroundFetchFailureReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundFetchRegistration_BackgroundFetchFailureReason_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundFetchRegistration_BackgroundFetchFailureReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::NONE;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::CANCELLED_FROM_UI;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::CANCELLED_BY_DEVELOPER;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::BAD_STATUS;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::FETCH_ERROR;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::SERVICE_WORKER_UNAVAILABLE;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::QUOTA_EXCEEDED;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::DOWNLOAD_TOTAL_EXCEEDED;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::BackgroundFetchFailureReason_MIN;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::BackgroundFetchFailureReason_MAX;
constexpr int BackgroundFetchRegistration::BackgroundFetchFailureReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BackgroundFetchOptions_ImageResource_Purpose_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundFetchOptions_ImageResource_Purpose_strings[3] = {};

static const char BackgroundFetchOptions_ImageResource_Purpose_names[] =
  "ANY"
  "BADGE"
  "MASKABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundFetchOptions_ImageResource_Purpose_entries[] = {
  { {BackgroundFetchOptions_ImageResource_Purpose_names + 0, 3}, 1 },
  { {BackgroundFetchOptions_ImageResource_Purpose_names + 3, 5}, 2 },
  { {BackgroundFetchOptions_ImageResource_Purpose_names + 8, 8}, 3 },
};

static const int BackgroundFetchOptions_ImageResource_Purpose_entries_by_number[] = {
  0, // 1 -> ANY
  1, // 2 -> BADGE
  2, // 3 -> MASKABLE
};

const std::string& BackgroundFetchOptions_ImageResource_Purpose_Name(
    BackgroundFetchOptions_ImageResource_Purpose value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundFetchOptions_ImageResource_Purpose_entries,
          BackgroundFetchOptions_ImageResource_Purpose_entries_by_number,
          3, BackgroundFetchOptions_ImageResource_Purpose_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundFetchOptions_ImageResource_Purpose_entries,
      BackgroundFetchOptions_ImageResource_Purpose_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundFetchOptions_ImageResource_Purpose_strings[idx].get();
}
bool BackgroundFetchOptions_ImageResource_Purpose_Parse(
    const std::string& name, BackgroundFetchOptions_ImageResource_Purpose* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundFetchOptions_ImageResource_Purpose_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundFetchOptions_ImageResource_Purpose>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::ANY;
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::BADGE;
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::MASKABLE;
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::Purpose_MIN;
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::Purpose_MAX;
constexpr int BackgroundFetchOptions_ImageResource::Purpose_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BackgroundFetchStorageVersion_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundFetchStorageVersion_strings[4] = {};

static const char BackgroundFetchStorageVersion_names[] =
  "SV_CURRENT"
  "SV_ERROR"
  "SV_UNINITIALIZED"
  "SV_UNIQUE_CACHE_KEYS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundFetchStorageVersion_entries[] = {
  { {BackgroundFetchStorageVersion_names + 0, 10}, 2 },
  { {BackgroundFetchStorageVersion_names + 10, 8}, -1 },
  { {BackgroundFetchStorageVersion_names + 18, 16}, 0 },
  { {BackgroundFetchStorageVersion_names + 34, 20}, 1 },
};

static const int BackgroundFetchStorageVersion_entries_by_number[] = {
  1, // -1 -> SV_ERROR
  2, // 0 -> SV_UNINITIALIZED
  3, // 1 -> SV_UNIQUE_CACHE_KEYS
  0, // 2 -> SV_CURRENT
};

const std::string& BackgroundFetchStorageVersion_Name(
    BackgroundFetchStorageVersion value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundFetchStorageVersion_entries,
          BackgroundFetchStorageVersion_entries_by_number,
          4, BackgroundFetchStorageVersion_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundFetchStorageVersion_entries,
      BackgroundFetchStorageVersion_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundFetchStorageVersion_strings[idx].get();
}
bool BackgroundFetchStorageVersion_Parse(
    const std::string& name, BackgroundFetchStorageVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundFetchStorageVersion_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundFetchStorageVersion>(int_value);
  }
  return success;
}

// ===================================================================

void BackgroundFetchRegistration::InitAsDefaultInstance() {
}
class BackgroundFetchRegistration::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchRegistration>()._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_developer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upload_total(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uploaded(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_download_total(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_failure_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

BackgroundFetchRegistration::BackgroundFetchRegistration()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.BackgroundFetchRegistration)
}
BackgroundFetchRegistration::BackgroundFetchRegistration(const BackgroundFetchRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unique_id()) {
    unique_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
  }
  developer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_developer_id()) {
    developer_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.developer_id_);
  }
  ::memcpy(&upload_total_, &from.upload_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&failure_reason_) -
    reinterpret_cast<char*>(&upload_total_)) + sizeof(failure_reason_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchRegistration)
}

void BackgroundFetchRegistration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundFetchRegistration_background_5ffetch_2eproto.base);
  unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  developer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&upload_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failure_reason_) -
      reinterpret_cast<char*>(&upload_total_)) + sizeof(failure_reason_));
}

BackgroundFetchRegistration::~BackgroundFetchRegistration() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchRegistration)
  SharedDtor();
}

void BackgroundFetchRegistration::SharedDtor() {
  unique_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  developer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackgroundFetchRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundFetchRegistration& BackgroundFetchRegistration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundFetchRegistration_background_5ffetch_2eproto.base);
  return *internal_default_instance();
}


void BackgroundFetchRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      unique_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      developer_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&upload_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failure_reason_) -
        reinterpret_cast<char*>(&upload_total_)) + sizeof(failure_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundFetchRegistration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_unique_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes developer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_developer_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 upload_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_upload_total(&has_bits);
          upload_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uploaded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uploaded(&has_bits);
          uploaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 download_total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_download_total(&has_bits);
          download_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 downloaded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_downloaded(&has_bits);
          downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchResult result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::BackgroundFetchRegistration_BackgroundFetchResult_IsValid(val))) {
            set_result(static_cast<::content::proto::BackgroundFetchRegistration_BackgroundFetchResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(val))) {
            set_failure_reason(static_cast<::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundFetchRegistration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.BackgroundFetchRegistration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unique_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes developer_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_developer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 upload_total = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_upload_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uploaded = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_uploaded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uploaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 download_total = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_download_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 downloaded = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_downloaded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &downloaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchResult result = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::proto::BackgroundFetchRegistration_BackgroundFetchResult_IsValid(value)) {
            set_result(static_cast< ::content::proto::BackgroundFetchRegistration_BackgroundFetchResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(value)) {
            set_failure_reason(static_cast< ::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.BackgroundFetchRegistration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.BackgroundFetchRegistration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundFetchRegistration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.BackgroundFetchRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unique_id(), output);
  }

  // optional bytes developer_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->developer_id(), output);
  }

  // optional uint64 upload_total = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->upload_total(), output);
  }

  // optional uint64 uploaded = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->uploaded(), output);
  }

  // optional uint64 download_total = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->download_total(), output);
  }

  // optional uint64 downloaded = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->downloaded(), output);
  }

  // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchResult result = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->result(), output);
  }

  // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->failure_reason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.BackgroundFetchRegistration)
}

size_t BackgroundFetchRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchRegistration)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unique_id());
    }

    // optional bytes developer_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->developer_id());
    }

    // optional uint64 upload_total = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->upload_total());
    }

    // optional uint64 uploaded = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->uploaded());
    }

    // optional uint64 download_total = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->download_total());
    }

    // optional uint64 downloaded = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->downloaded());
    }

    // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchResult result = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->failure_reason());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchRegistration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundFetchRegistration*>(
      &from));
}

void BackgroundFetchRegistration::MergeFrom(const BackgroundFetchRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unique_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      developer_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.developer_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      upload_total_ = from.upload_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      uploaded_ = from.uploaded_;
    }
    if (cached_has_bits & 0x00000010u) {
      download_total_ = from.download_total_;
    }
    if (cached_has_bits & 0x00000020u) {
      downloaded_ = from.downloaded_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000080u) {
      failure_reason_ = from.failure_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundFetchRegistration::CopyFrom(const BackgroundFetchRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchRegistration::IsInitialized() const {
  return true;
}

void BackgroundFetchRegistration::InternalSwap(BackgroundFetchRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unique_id_.Swap(&other->unique_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  developer_id_.Swap(&other->developer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(upload_total_, other->upload_total_);
  swap(uploaded_, other->uploaded_);
  swap(download_total_, other->download_total_);
  swap(downloaded_, other->downloaded_);
  swap(result_, other->result_);
  swap(failure_reason_, other->failure_reason_);
}

std::string BackgroundFetchRegistration::GetTypeName() const {
  return "content.proto.BackgroundFetchRegistration";
}


// ===================================================================

void BackgroundFetchOptions_ImageResource_Size::InitAsDefaultInstance() {
}
class BackgroundFetchOptions_ImageResource_Size::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchOptions_ImageResource_Size>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BackgroundFetchOptions_ImageResource_Size::BackgroundFetchOptions_ImageResource_Size()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.BackgroundFetchOptions.ImageResource.Size)
}
BackgroundFetchOptions_ImageResource_Size::BackgroundFetchOptions_ImageResource_Size(const BackgroundFetchOptions_ImageResource_Size& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchOptions.ImageResource.Size)
}

void BackgroundFetchOptions_ImageResource_Size::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

BackgroundFetchOptions_ImageResource_Size::~BackgroundFetchOptions_ImageResource_Size() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchOptions.ImageResource.Size)
  SharedDtor();
}

void BackgroundFetchOptions_ImageResource_Size::SharedDtor() {
}

void BackgroundFetchOptions_ImageResource_Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundFetchOptions_ImageResource_Size& BackgroundFetchOptions_ImageResource_Size::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundFetchOptions_ImageResource_Size_background_5ffetch_2eproto.base);
  return *internal_default_instance();
}


void BackgroundFetchOptions_ImageResource_Size::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundFetchOptions_ImageResource_Size::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundFetchOptions_ImageResource_Size::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.BackgroundFetchOptions.ImageResource.Size)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.BackgroundFetchOptions.ImageResource.Size)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundFetchOptions_ImageResource_Size::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.BackgroundFetchOptions.ImageResource.Size)
}

size_t BackgroundFetchOptions_ImageResource_Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchOptions_ImageResource_Size::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundFetchOptions_ImageResource_Size*>(
      &from));
}

void BackgroundFetchOptions_ImageResource_Size::MergeFrom(const BackgroundFetchOptions_ImageResource_Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundFetchOptions_ImageResource_Size::CopyFrom(const BackgroundFetchOptions_ImageResource_Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchOptions_ImageResource_Size::IsInitialized() const {
  return true;
}

void BackgroundFetchOptions_ImageResource_Size::InternalSwap(BackgroundFetchOptions_ImageResource_Size* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

std::string BackgroundFetchOptions_ImageResource_Size::GetTypeName() const {
  return "content.proto.BackgroundFetchOptions.ImageResource.Size";
}


// ===================================================================

void BackgroundFetchOptions_ImageResource::InitAsDefaultInstance() {
}
class BackgroundFetchOptions_ImageResource::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchOptions_ImageResource>()._has_bits_);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BackgroundFetchOptions_ImageResource::BackgroundFetchOptions_ImageResource()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.BackgroundFetchOptions.ImageResource)
}
BackgroundFetchOptions_ImageResource::BackgroundFetchOptions_ImageResource(const BackgroundFetchOptions_ImageResource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sizes_(from.sizes_),
      purpose_(from.purpose_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_src()) {
    src_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchOptions.ImageResource)
}

void BackgroundFetchOptions_ImageResource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundFetchOptions_ImageResource_background_5ffetch_2eproto.base);
  src_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BackgroundFetchOptions_ImageResource::~BackgroundFetchOptions_ImageResource() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchOptions.ImageResource)
  SharedDtor();
}

void BackgroundFetchOptions_ImageResource::SharedDtor() {
  src_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackgroundFetchOptions_ImageResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundFetchOptions_ImageResource& BackgroundFetchOptions_ImageResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundFetchOptions_ImageResource_background_5ffetch_2eproto.base);
  return *internal_default_instance();
}


void BackgroundFetchOptions_ImageResource::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchOptions.ImageResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  purpose_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundFetchOptions_ImageResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_src(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .content.proto.BackgroundFetchOptions.ImageResource.Size sizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional bytes type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .content.proto.BackgroundFetchOptions.ImageResource.Purpose purpose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::content::proto::BackgroundFetchOptions_ImageResource_Purpose_IsValid(val))) {
              add_purpose(static_cast<::content::proto::BackgroundFetchOptions_ImageResource_Purpose>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_purpose(), ptr, ctx, ::content::proto::BackgroundFetchOptions_ImageResource_Purpose_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundFetchOptions_ImageResource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.BackgroundFetchOptions.ImageResource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string src = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .content.proto.BackgroundFetchOptions.ImageResource.Size sizes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sizes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .content.proto.BackgroundFetchOptions.ImageResource.Purpose purpose = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::proto::BackgroundFetchOptions_ImageResource_Purpose_IsValid(value)) {
            add_purpose(static_cast< ::content::proto::BackgroundFetchOptions_ImageResource_Purpose >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::content::proto::BackgroundFetchOptions_ImageResource_Purpose_IsValid,
                 &unknown_fields_stream,
                 this->mutable_purpose())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.BackgroundFetchOptions.ImageResource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.BackgroundFetchOptions.ImageResource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundFetchOptions_ImageResource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.BackgroundFetchOptions.ImageResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // repeated .content.proto.BackgroundFetchOptions.ImageResource.Size sizes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sizes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->sizes(static_cast<int>(i)),
      output);
  }

  // optional bytes type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  // repeated .content.proto.BackgroundFetchOptions.ImageResource.Purpose purpose = 4;
  for (int i = 0, n = this->purpose_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->purpose(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.BackgroundFetchOptions.ImageResource)
}

size_t BackgroundFetchOptions_ImageResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchOptions.ImageResource)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.BackgroundFetchOptions.ImageResource.Size sizes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sizes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sizes(static_cast<int>(i)));
    }
  }

  // repeated .content.proto.BackgroundFetchOptions.ImageResource.Purpose purpose = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->purpose_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->purpose(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string src = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->src());
    }

    // optional bytes type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchOptions_ImageResource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundFetchOptions_ImageResource*>(
      &from));
}

void BackgroundFetchOptions_ImageResource::MergeFrom(const BackgroundFetchOptions_ImageResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchOptions.ImageResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  purpose_.MergeFrom(from.purpose_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      src_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
}

void BackgroundFetchOptions_ImageResource::CopyFrom(const BackgroundFetchOptions_ImageResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchOptions.ImageResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchOptions_ImageResource::IsInitialized() const {
  return true;
}

void BackgroundFetchOptions_ImageResource::InternalSwap(BackgroundFetchOptions_ImageResource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sizes_)->InternalSwap(CastToBase(&other->sizes_));
  purpose_.InternalSwap(&other->purpose_);
  src_.Swap(&other->src_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string BackgroundFetchOptions_ImageResource::GetTypeName() const {
  return "content.proto.BackgroundFetchOptions.ImageResource";
}


// ===================================================================

void BackgroundFetchOptions::InitAsDefaultInstance() {
}
class BackgroundFetchOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchOptions>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_download_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BackgroundFetchOptions::BackgroundFetchOptions()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.BackgroundFetchOptions)
}
BackgroundFetchOptions::BackgroundFetchOptions(const BackgroundFetchOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      icons_(from.icons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  download_total_ = from.download_total_;
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchOptions)
}

void BackgroundFetchOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundFetchOptions_background_5ffetch_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  download_total_ = PROTOBUF_ULONGLONG(0);
}

BackgroundFetchOptions::~BackgroundFetchOptions() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchOptions)
  SharedDtor();
}

void BackgroundFetchOptions::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackgroundFetchOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundFetchOptions& BackgroundFetchOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundFetchOptions_background_5ffetch_2eproto.base);
  return *internal_default_instance();
}


void BackgroundFetchOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmptyNoArena();
  }
  download_total_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundFetchOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_title(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .content.proto.BackgroundFetchOptions.ImageResource icons = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_icons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional uint64 download_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_download_total(&has_bits);
          download_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundFetchOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.BackgroundFetchOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .content.proto.BackgroundFetchOptions.ImageResource icons = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_icons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 download_total = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_download_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.BackgroundFetchOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.BackgroundFetchOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundFetchOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.BackgroundFetchOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // repeated .content.proto.BackgroundFetchOptions.ImageResource icons = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->icons_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->icons(static_cast<int>(i)),
      output);
  }

  // optional uint64 download_total = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->download_total(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.BackgroundFetchOptions)
}

size_t BackgroundFetchOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchOptions)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.BackgroundFetchOptions.ImageResource icons = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->icons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->icons(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint64 download_total = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->download_total());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundFetchOptions*>(
      &from));
}

void BackgroundFetchOptions::MergeFrom(const BackgroundFetchOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  icons_.MergeFrom(from.icons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      download_total_ = from.download_total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundFetchOptions::CopyFrom(const BackgroundFetchOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchOptions::IsInitialized() const {
  return true;
}

void BackgroundFetchOptions::InternalSwap(BackgroundFetchOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&icons_)->InternalSwap(CastToBase(&other->icons_));
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(download_total_, other->download_total_);
}

std::string BackgroundFetchOptions::GetTypeName() const {
  return "content.proto.BackgroundFetchOptions";
}


// ===================================================================

void BackgroundFetchMetadata::InitAsDefaultInstance() {
  ::content::proto::_BackgroundFetchMetadata_default_instance_._instance.get_mutable()->registration_ = const_cast< ::content::proto::BackgroundFetchRegistration*>(
      ::content::proto::BackgroundFetchRegistration::internal_default_instance());
  ::content::proto::_BackgroundFetchMetadata_default_instance_._instance.get_mutable()->options_ = const_cast< ::content::proto::BackgroundFetchOptions*>(
      ::content::proto::BackgroundFetchOptions::internal_default_instance());
}
class BackgroundFetchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchMetadata>()._has_bits_);
  static void set_has_creation_microseconds_since_unix_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::content::proto::BackgroundFetchRegistration& registration(const BackgroundFetchMetadata* msg);
  static void set_has_registration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::content::proto::BackgroundFetchOptions& options(const BackgroundFetchMetadata* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_fetches(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::content::proto::BackgroundFetchRegistration&
BackgroundFetchMetadata::_Internal::registration(const BackgroundFetchMetadata* msg) {
  return *msg->registration_;
}
const ::content::proto::BackgroundFetchOptions&
BackgroundFetchMetadata::_Internal::options(const BackgroundFetchMetadata* msg) {
  return *msg->options_;
}
BackgroundFetchMetadata::BackgroundFetchMetadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.BackgroundFetchMetadata)
}
BackgroundFetchMetadata::BackgroundFetchMetadata(const BackgroundFetchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_origin()) {
    origin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  if (from.has_registration()) {
    registration_ = new ::content::proto::BackgroundFetchRegistration(*from.registration_);
  } else {
    registration_ = nullptr;
  }
  if (from.has_options()) {
    options_ = new ::content::proto::BackgroundFetchOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&creation_microseconds_since_unix_epoch_, &from.creation_microseconds_since_unix_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_fetches_) -
    reinterpret_cast<char*>(&creation_microseconds_since_unix_epoch_)) + sizeof(num_fetches_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchMetadata)
}

void BackgroundFetchMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundFetchMetadata_background_5ffetch_2eproto.base);
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&registration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_fetches_) -
      reinterpret_cast<char*>(&registration_)) + sizeof(num_fetches_));
}

BackgroundFetchMetadata::~BackgroundFetchMetadata() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchMetadata)
  SharedDtor();
}

void BackgroundFetchMetadata::SharedDtor() {
  origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete registration_;
  if (this != internal_default_instance()) delete options_;
}

void BackgroundFetchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundFetchMetadata& BackgroundFetchMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundFetchMetadata_background_5ffetch_2eproto.base);
  return *internal_default_instance();
}


void BackgroundFetchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      origin_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(registration_ != nullptr);
      registration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&creation_microseconds_since_unix_epoch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_fetches_) -
        reinterpret_cast<char*>(&creation_microseconds_since_unix_epoch_)) + sizeof(num_fetches_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundFetchMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 creation_microseconds_since_unix_epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_creation_microseconds_since_unix_epoch(&has_bits);
          creation_microseconds_since_unix_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_origin(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.proto.BackgroundFetchRegistration registration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_registration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.proto.BackgroundFetchOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_fetches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_fetches(&has_bits);
          num_fetches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundFetchMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.BackgroundFetchMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 creation_microseconds_since_unix_epoch = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_creation_microseconds_since_unix_epoch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_microseconds_since_unix_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string origin = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.proto.BackgroundFetchRegistration registration = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_registration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.proto.BackgroundFetchOptions options = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_fetches = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_num_fetches(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_fetches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.BackgroundFetchMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.BackgroundFetchMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundFetchMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.BackgroundFetchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 creation_microseconds_since_unix_epoch = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->creation_microseconds_since_unix_epoch(), output);
  }

  // optional string origin = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->origin(), output);
  }

  // optional .content.proto.BackgroundFetchRegistration registration = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::registration(this), output);
  }

  // optional .content.proto.BackgroundFetchOptions options = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::options(this), output);
  }

  // optional int32 num_fetches = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->num_fetches(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.BackgroundFetchMetadata)
}

size_t BackgroundFetchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchMetadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string origin = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional .content.proto.BackgroundFetchRegistration registration = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *registration_);
    }

    // optional .content.proto.BackgroundFetchOptions options = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional int64 creation_microseconds_since_unix_epoch = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->creation_microseconds_since_unix_epoch());
    }

    // optional int32 num_fetches = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_fetches());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundFetchMetadata*>(
      &from));
}

void BackgroundFetchMetadata::MergeFrom(const BackgroundFetchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      origin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.origin_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_registration()->::content::proto::BackgroundFetchRegistration::MergeFrom(from.registration());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_options()->::content::proto::BackgroundFetchOptions::MergeFrom(from.options());
    }
    if (cached_has_bits & 0x00000008u) {
      creation_microseconds_since_unix_epoch_ = from.creation_microseconds_since_unix_epoch_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_fetches_ = from.num_fetches_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundFetchMetadata::CopyFrom(const BackgroundFetchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchMetadata::IsInitialized() const {
  return true;
}

void BackgroundFetchMetadata::InternalSwap(BackgroundFetchMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  origin_.Swap(&other->origin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(registration_, other->registration_);
  swap(options_, other->options_);
  swap(creation_microseconds_since_unix_epoch_, other->creation_microseconds_since_unix_epoch_);
  swap(num_fetches_, other->num_fetches_);
}

std::string BackgroundFetchMetadata::GetTypeName() const {
  return "content.proto.BackgroundFetchMetadata";
}


// ===================================================================

void BackgroundFetchUIOptions::InitAsDefaultInstance() {
}
class BackgroundFetchUIOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchUIOptions>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BackgroundFetchUIOptions::BackgroundFetchUIOptions()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.BackgroundFetchUIOptions)
}
BackgroundFetchUIOptions::BackgroundFetchUIOptions(const BackgroundFetchUIOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchUIOptions)
}

void BackgroundFetchUIOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundFetchUIOptions_background_5ffetch_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BackgroundFetchUIOptions::~BackgroundFetchUIOptions() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchUIOptions)
  SharedDtor();
}

void BackgroundFetchUIOptions::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackgroundFetchUIOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundFetchUIOptions& BackgroundFetchUIOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundFetchUIOptions_background_5ffetch_2eproto.base);
  return *internal_default_instance();
}


void BackgroundFetchUIOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchUIOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundFetchUIOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_title(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_icon(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundFetchUIOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.BackgroundFetchUIOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes icon = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.BackgroundFetchUIOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.BackgroundFetchUIOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundFetchUIOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.BackgroundFetchUIOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional bytes icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->icon(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.BackgroundFetchUIOptions)
}

size_t BackgroundFetchUIOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchUIOptions)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional bytes icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->icon());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchUIOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundFetchUIOptions*>(
      &from));
}

void BackgroundFetchUIOptions::MergeFrom(const BackgroundFetchUIOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchUIOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
  }
}

void BackgroundFetchUIOptions::CopyFrom(const BackgroundFetchUIOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchUIOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchUIOptions::IsInitialized() const {
  return true;
}

void BackgroundFetchUIOptions::InternalSwap(BackgroundFetchUIOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string BackgroundFetchUIOptions::GetTypeName() const {
  return "content.proto.BackgroundFetchUIOptions";
}


// ===================================================================

void BackgroundFetchPendingRequest::InitAsDefaultInstance() {
}
class BackgroundFetchPendingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchPendingRequest>()._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_serialized_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_request_body_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BackgroundFetchPendingRequest::BackgroundFetchPendingRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.BackgroundFetchPendingRequest)
}
BackgroundFetchPendingRequest::BackgroundFetchPendingRequest(const BackgroundFetchPendingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unique_id()) {
    unique_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
  }
  serialized_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_request()) {
    serialized_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
  }
  ::memcpy(&request_body_size_, &from.request_body_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_index_) -
    reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchPendingRequest)
}

void BackgroundFetchPendingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundFetchPendingRequest_background_5ffetch_2eproto.base);
  unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_body_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_index_) -
      reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
}

BackgroundFetchPendingRequest::~BackgroundFetchPendingRequest() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchPendingRequest)
  SharedDtor();
}

void BackgroundFetchPendingRequest::SharedDtor() {
  unique_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackgroundFetchPendingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundFetchPendingRequest& BackgroundFetchPendingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundFetchPendingRequest_background_5ffetch_2eproto.base);
  return *internal_default_instance();
}


void BackgroundFetchPendingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchPendingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      unique_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_request_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&request_body_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_index_) -
        reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundFetchPendingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_unique_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 request_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_request_index(&has_bits);
          request_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serialized_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serialized_request(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 request_body_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_request_body_size(&has_bits);
          request_body_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundFetchPendingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.BackgroundFetchPendingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unique_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 request_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_request_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serialized_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_serialized_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 request_body_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_request_body_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_body_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.BackgroundFetchPendingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.BackgroundFetchPendingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundFetchPendingRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.BackgroundFetchPendingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unique_id(), output);
  }

  // optional int32 request_index = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->request_index(), output);
  }

  // optional string serialized_request = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serialized_request(), output);
  }

  // optional uint64 request_body_size = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->request_body_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.BackgroundFetchPendingRequest)
}

size_t BackgroundFetchPendingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchPendingRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unique_id());
    }

    // optional string serialized_request = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->serialized_request());
    }

    // optional uint64 request_body_size = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->request_body_size());
    }

    // optional int32 request_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->request_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchPendingRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundFetchPendingRequest*>(
      &from));
}

void BackgroundFetchPendingRequest::MergeFrom(const BackgroundFetchPendingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchPendingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unique_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      serialized_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
    }
    if (cached_has_bits & 0x00000004u) {
      request_body_size_ = from.request_body_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      request_index_ = from.request_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundFetchPendingRequest::CopyFrom(const BackgroundFetchPendingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchPendingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchPendingRequest::IsInitialized() const {
  return true;
}

void BackgroundFetchPendingRequest::InternalSwap(BackgroundFetchPendingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unique_id_.Swap(&other->unique_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_request_.Swap(&other->serialized_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_body_size_, other->request_body_size_);
  swap(request_index_, other->request_index_);
}

std::string BackgroundFetchPendingRequest::GetTypeName() const {
  return "content.proto.BackgroundFetchPendingRequest";
}


// ===================================================================

void BackgroundFetchActiveRequest::InitAsDefaultInstance() {
}
class BackgroundFetchActiveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchActiveRequest>()._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_serialized_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_download_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_request_body_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BackgroundFetchActiveRequest::BackgroundFetchActiveRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.BackgroundFetchActiveRequest)
}
BackgroundFetchActiveRequest::BackgroundFetchActiveRequest(const BackgroundFetchActiveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unique_id()) {
    unique_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
  }
  serialized_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_request()) {
    serialized_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
  }
  download_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_download_guid()) {
    download_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.download_guid_);
  }
  ::memcpy(&request_body_size_, &from.request_body_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_index_) -
    reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchActiveRequest)
}

void BackgroundFetchActiveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundFetchActiveRequest_background_5ffetch_2eproto.base);
  unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  download_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_body_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_index_) -
      reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
}

BackgroundFetchActiveRequest::~BackgroundFetchActiveRequest() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchActiveRequest)
  SharedDtor();
}

void BackgroundFetchActiveRequest::SharedDtor() {
  unique_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  download_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackgroundFetchActiveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundFetchActiveRequest& BackgroundFetchActiveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundFetchActiveRequest_background_5ffetch_2eproto.base);
  return *internal_default_instance();
}


void BackgroundFetchActiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchActiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      unique_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_request_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      download_guid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&request_body_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_index_) -
        reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundFetchActiveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_unique_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 request_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_request_index(&has_bits);
          request_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serialized_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serialized_request(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string download_guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_download_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 request_body_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_request_body_size(&has_bits);
          request_body_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundFetchActiveRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.BackgroundFetchActiveRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unique_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 request_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_request_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serialized_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_serialized_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string download_guid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_download_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 request_body_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_request_body_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_body_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.BackgroundFetchActiveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.BackgroundFetchActiveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundFetchActiveRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.BackgroundFetchActiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unique_id(), output);
  }

  // optional int32 request_index = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->request_index(), output);
  }

  // optional string serialized_request = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serialized_request(), output);
  }

  // optional string download_guid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->download_guid(), output);
  }

  // optional uint64 request_body_size = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->request_body_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.BackgroundFetchActiveRequest)
}

size_t BackgroundFetchActiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchActiveRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unique_id());
    }

    // optional string serialized_request = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->serialized_request());
    }

    // optional string download_guid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->download_guid());
    }

    // optional uint64 request_body_size = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->request_body_size());
    }

    // optional int32 request_index = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->request_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchActiveRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundFetchActiveRequest*>(
      &from));
}

void BackgroundFetchActiveRequest::MergeFrom(const BackgroundFetchActiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchActiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unique_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      serialized_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      download_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.download_guid_);
    }
    if (cached_has_bits & 0x00000008u) {
      request_body_size_ = from.request_body_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_index_ = from.request_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundFetchActiveRequest::CopyFrom(const BackgroundFetchActiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchActiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchActiveRequest::IsInitialized() const {
  return true;
}

void BackgroundFetchActiveRequest::InternalSwap(BackgroundFetchActiveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unique_id_.Swap(&other->unique_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_request_.Swap(&other->serialized_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  download_guid_.Swap(&other->download_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_body_size_, other->request_body_size_);
  swap(request_index_, other->request_index_);
}

std::string BackgroundFetchActiveRequest::GetTypeName() const {
  return "content.proto.BackgroundFetchActiveRequest";
}


// ===================================================================

void BackgroundFetchCompletedRequest::InitAsDefaultInstance() {
}
class BackgroundFetchCompletedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchCompletedRequest>()._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_serialized_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_download_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_failure_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

BackgroundFetchCompletedRequest::BackgroundFetchCompletedRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.proto.BackgroundFetchCompletedRequest)
}
BackgroundFetchCompletedRequest::BackgroundFetchCompletedRequest(const BackgroundFetchCompletedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unique_id()) {
    unique_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
  }
  serialized_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_request()) {
    serialized_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
  }
  download_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_download_guid()) {
    download_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.download_guid_);
  }
  ::memcpy(&request_index_, &from.request_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&failure_reason_) -
    reinterpret_cast<char*>(&request_index_)) + sizeof(failure_reason_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchCompletedRequest)
}

void BackgroundFetchCompletedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundFetchCompletedRequest_background_5ffetch_2eproto.base);
  unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  download_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failure_reason_) -
      reinterpret_cast<char*>(&request_index_)) + sizeof(failure_reason_));
}

BackgroundFetchCompletedRequest::~BackgroundFetchCompletedRequest() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchCompletedRequest)
  SharedDtor();
}

void BackgroundFetchCompletedRequest::SharedDtor() {
  unique_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  download_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackgroundFetchCompletedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundFetchCompletedRequest& BackgroundFetchCompletedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundFetchCompletedRequest_background_5ffetch_2eproto.base);
  return *internal_default_instance();
}


void BackgroundFetchCompletedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchCompletedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      unique_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_request_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      download_guid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&request_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failure_reason_) -
        reinterpret_cast<char*>(&request_index_)) + sizeof(failure_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundFetchCompletedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_unique_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 request_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_request_index(&has_bits);
          request_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serialized_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serialized_request(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string download_guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_download_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(val))) {
            set_failure_reason(static_cast<::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundFetchCompletedRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.proto.BackgroundFetchCompletedRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unique_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 request_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_request_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serialized_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_serialized_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string download_guid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_download_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(value)) {
            set_failure_reason(static_cast< ::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.proto.BackgroundFetchCompletedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.proto.BackgroundFetchCompletedRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundFetchCompletedRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.proto.BackgroundFetchCompletedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unique_id(), output);
  }

  // optional int32 request_index = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->request_index(), output);
  }

  // optional string serialized_request = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serialized_request(), output);
  }

  // optional string download_guid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->download_guid(), output);
  }

  // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->failure_reason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.proto.BackgroundFetchCompletedRequest)
}

size_t BackgroundFetchCompletedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchCompletedRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unique_id());
    }

    // optional string serialized_request = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->serialized_request());
    }

    // optional string download_guid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->download_guid());
    }

    // optional int32 request_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->request_index());
    }

    // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->failure_reason());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchCompletedRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundFetchCompletedRequest*>(
      &from));
}

void BackgroundFetchCompletedRequest::MergeFrom(const BackgroundFetchCompletedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchCompletedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unique_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      serialized_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_request_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      download_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.download_guid_);
    }
    if (cached_has_bits & 0x00000008u) {
      request_index_ = from.request_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      failure_reason_ = from.failure_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundFetchCompletedRequest::CopyFrom(const BackgroundFetchCompletedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchCompletedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchCompletedRequest::IsInitialized() const {
  return true;
}

void BackgroundFetchCompletedRequest::InternalSwap(BackgroundFetchCompletedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unique_id_.Swap(&other->unique_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_request_.Swap(&other->serialized_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  download_guid_.Swap(&other->download_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_index_, other->request_index_);
  swap(failure_reason_, other->failure_reason_);
}

std::string BackgroundFetchCompletedRequest::GetTypeName() const {
  return "content.proto.BackgroundFetchCompletedRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchRegistration* Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchRegistration >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::BackgroundFetchRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchOptions_ImageResource_Size* Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchOptions_ImageResource_Size >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::BackgroundFetchOptions_ImageResource_Size >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchOptions_ImageResource* Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchOptions_ImageResource >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::BackgroundFetchOptions_ImageResource >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchOptions* Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchOptions >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::BackgroundFetchOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchMetadata* Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::BackgroundFetchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchUIOptions* Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchUIOptions >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::BackgroundFetchUIOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchPendingRequest* Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchPendingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::BackgroundFetchPendingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchActiveRequest* Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchActiveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::BackgroundFetchActiveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchCompletedRequest* Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchCompletedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::content::proto::BackgroundFetchCompletedRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
