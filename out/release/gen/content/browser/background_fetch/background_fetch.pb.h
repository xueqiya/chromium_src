// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: background_fetch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_background_5ffetch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_background_5ffetch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_background_5ffetch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_background_5ffetch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace content {
namespace proto {
class BackgroundFetchActiveRequest;
class BackgroundFetchActiveRequestDefaultTypeInternal;
extern BackgroundFetchActiveRequestDefaultTypeInternal _BackgroundFetchActiveRequest_default_instance_;
class BackgroundFetchCompletedRequest;
class BackgroundFetchCompletedRequestDefaultTypeInternal;
extern BackgroundFetchCompletedRequestDefaultTypeInternal _BackgroundFetchCompletedRequest_default_instance_;
class BackgroundFetchMetadata;
class BackgroundFetchMetadataDefaultTypeInternal;
extern BackgroundFetchMetadataDefaultTypeInternal _BackgroundFetchMetadata_default_instance_;
class BackgroundFetchOptions;
class BackgroundFetchOptionsDefaultTypeInternal;
extern BackgroundFetchOptionsDefaultTypeInternal _BackgroundFetchOptions_default_instance_;
class BackgroundFetchOptions_ImageResource;
class BackgroundFetchOptions_ImageResourceDefaultTypeInternal;
extern BackgroundFetchOptions_ImageResourceDefaultTypeInternal _BackgroundFetchOptions_ImageResource_default_instance_;
class BackgroundFetchOptions_ImageResource_Size;
class BackgroundFetchOptions_ImageResource_SizeDefaultTypeInternal;
extern BackgroundFetchOptions_ImageResource_SizeDefaultTypeInternal _BackgroundFetchOptions_ImageResource_Size_default_instance_;
class BackgroundFetchPendingRequest;
class BackgroundFetchPendingRequestDefaultTypeInternal;
extern BackgroundFetchPendingRequestDefaultTypeInternal _BackgroundFetchPendingRequest_default_instance_;
class BackgroundFetchRegistration;
class BackgroundFetchRegistrationDefaultTypeInternal;
extern BackgroundFetchRegistrationDefaultTypeInternal _BackgroundFetchRegistration_default_instance_;
class BackgroundFetchUIOptions;
class BackgroundFetchUIOptionsDefaultTypeInternal;
extern BackgroundFetchUIOptionsDefaultTypeInternal _BackgroundFetchUIOptions_default_instance_;
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::proto::BackgroundFetchActiveRequest* Arena::CreateMaybeMessage<::content::proto::BackgroundFetchActiveRequest>(Arena*);
template<> ::content::proto::BackgroundFetchCompletedRequest* Arena::CreateMaybeMessage<::content::proto::BackgroundFetchCompletedRequest>(Arena*);
template<> ::content::proto::BackgroundFetchMetadata* Arena::CreateMaybeMessage<::content::proto::BackgroundFetchMetadata>(Arena*);
template<> ::content::proto::BackgroundFetchOptions* Arena::CreateMaybeMessage<::content::proto::BackgroundFetchOptions>(Arena*);
template<> ::content::proto::BackgroundFetchOptions_ImageResource* Arena::CreateMaybeMessage<::content::proto::BackgroundFetchOptions_ImageResource>(Arena*);
template<> ::content::proto::BackgroundFetchOptions_ImageResource_Size* Arena::CreateMaybeMessage<::content::proto::BackgroundFetchOptions_ImageResource_Size>(Arena*);
template<> ::content::proto::BackgroundFetchPendingRequest* Arena::CreateMaybeMessage<::content::proto::BackgroundFetchPendingRequest>(Arena*);
template<> ::content::proto::BackgroundFetchRegistration* Arena::CreateMaybeMessage<::content::proto::BackgroundFetchRegistration>(Arena*);
template<> ::content::proto::BackgroundFetchUIOptions* Arena::CreateMaybeMessage<::content::proto::BackgroundFetchUIOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {
namespace proto {

enum BackgroundFetchRegistration_BackgroundFetchResult : int {
  BackgroundFetchRegistration_BackgroundFetchResult_UNSET = 0,
  BackgroundFetchRegistration_BackgroundFetchResult_FAILURE = 1,
  BackgroundFetchRegistration_BackgroundFetchResult_SUCCESS = 2
};
bool BackgroundFetchRegistration_BackgroundFetchResult_IsValid(int value);
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration_BackgroundFetchResult_BackgroundFetchResult_MIN = BackgroundFetchRegistration_BackgroundFetchResult_UNSET;
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration_BackgroundFetchResult_BackgroundFetchResult_MAX = BackgroundFetchRegistration_BackgroundFetchResult_SUCCESS;
constexpr int BackgroundFetchRegistration_BackgroundFetchResult_BackgroundFetchResult_ARRAYSIZE = BackgroundFetchRegistration_BackgroundFetchResult_BackgroundFetchResult_MAX + 1;

const std::string& BackgroundFetchRegistration_BackgroundFetchResult_Name(BackgroundFetchRegistration_BackgroundFetchResult value);
template<typename T>
inline const std::string& BackgroundFetchRegistration_BackgroundFetchResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackgroundFetchRegistration_BackgroundFetchResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackgroundFetchRegistration_BackgroundFetchResult_Name.");
  return BackgroundFetchRegistration_BackgroundFetchResult_Name(static_cast<BackgroundFetchRegistration_BackgroundFetchResult>(enum_t_value));
}
bool BackgroundFetchRegistration_BackgroundFetchResult_Parse(
    const std::string& name, BackgroundFetchRegistration_BackgroundFetchResult* value);
enum BackgroundFetchRegistration_BackgroundFetchFailureReason : int {
  BackgroundFetchRegistration_BackgroundFetchFailureReason_NONE = 0,
  BackgroundFetchRegistration_BackgroundFetchFailureReason_CANCELLED_FROM_UI = 1,
  BackgroundFetchRegistration_BackgroundFetchFailureReason_CANCELLED_BY_DEVELOPER = 2,
  BackgroundFetchRegistration_BackgroundFetchFailureReason_BAD_STATUS = 3,
  BackgroundFetchRegistration_BackgroundFetchFailureReason_FETCH_ERROR = 4,
  BackgroundFetchRegistration_BackgroundFetchFailureReason_SERVICE_WORKER_UNAVAILABLE = 5,
  BackgroundFetchRegistration_BackgroundFetchFailureReason_QUOTA_EXCEEDED = 6,
  BackgroundFetchRegistration_BackgroundFetchFailureReason_DOWNLOAD_TOTAL_EXCEEDED = 7
};
bool BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(int value);
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration_BackgroundFetchFailureReason_BackgroundFetchFailureReason_MIN = BackgroundFetchRegistration_BackgroundFetchFailureReason_NONE;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration_BackgroundFetchFailureReason_BackgroundFetchFailureReason_MAX = BackgroundFetchRegistration_BackgroundFetchFailureReason_DOWNLOAD_TOTAL_EXCEEDED;
constexpr int BackgroundFetchRegistration_BackgroundFetchFailureReason_BackgroundFetchFailureReason_ARRAYSIZE = BackgroundFetchRegistration_BackgroundFetchFailureReason_BackgroundFetchFailureReason_MAX + 1;

const std::string& BackgroundFetchRegistration_BackgroundFetchFailureReason_Name(BackgroundFetchRegistration_BackgroundFetchFailureReason value);
template<typename T>
inline const std::string& BackgroundFetchRegistration_BackgroundFetchFailureReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackgroundFetchRegistration_BackgroundFetchFailureReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackgroundFetchRegistration_BackgroundFetchFailureReason_Name.");
  return BackgroundFetchRegistration_BackgroundFetchFailureReason_Name(static_cast<BackgroundFetchRegistration_BackgroundFetchFailureReason>(enum_t_value));
}
bool BackgroundFetchRegistration_BackgroundFetchFailureReason_Parse(
    const std::string& name, BackgroundFetchRegistration_BackgroundFetchFailureReason* value);
enum BackgroundFetchOptions_ImageResource_Purpose : int {
  BackgroundFetchOptions_ImageResource_Purpose_ANY = 1,
  BackgroundFetchOptions_ImageResource_Purpose_BADGE = 2,
  BackgroundFetchOptions_ImageResource_Purpose_MASKABLE = 3
};
bool BackgroundFetchOptions_ImageResource_Purpose_IsValid(int value);
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource_Purpose_Purpose_MIN = BackgroundFetchOptions_ImageResource_Purpose_ANY;
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource_Purpose_Purpose_MAX = BackgroundFetchOptions_ImageResource_Purpose_MASKABLE;
constexpr int BackgroundFetchOptions_ImageResource_Purpose_Purpose_ARRAYSIZE = BackgroundFetchOptions_ImageResource_Purpose_Purpose_MAX + 1;

const std::string& BackgroundFetchOptions_ImageResource_Purpose_Name(BackgroundFetchOptions_ImageResource_Purpose value);
template<typename T>
inline const std::string& BackgroundFetchOptions_ImageResource_Purpose_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackgroundFetchOptions_ImageResource_Purpose>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackgroundFetchOptions_ImageResource_Purpose_Name.");
  return BackgroundFetchOptions_ImageResource_Purpose_Name(static_cast<BackgroundFetchOptions_ImageResource_Purpose>(enum_t_value));
}
bool BackgroundFetchOptions_ImageResource_Purpose_Parse(
    const std::string& name, BackgroundFetchOptions_ImageResource_Purpose* value);
enum BackgroundFetchStorageVersion : int {
  SV_ERROR = -1,
  SV_UNINITIALIZED = 0,
  SV_UNIQUE_CACHE_KEYS = 1,
  SV_CURRENT = 2
};
bool BackgroundFetchStorageVersion_IsValid(int value);
constexpr BackgroundFetchStorageVersion BackgroundFetchStorageVersion_MIN = SV_ERROR;
constexpr BackgroundFetchStorageVersion BackgroundFetchStorageVersion_MAX = SV_CURRENT;
constexpr int BackgroundFetchStorageVersion_ARRAYSIZE = BackgroundFetchStorageVersion_MAX + 1;

const std::string& BackgroundFetchStorageVersion_Name(BackgroundFetchStorageVersion value);
template<typename T>
inline const std::string& BackgroundFetchStorageVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackgroundFetchStorageVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackgroundFetchStorageVersion_Name.");
  return BackgroundFetchStorageVersion_Name(static_cast<BackgroundFetchStorageVersion>(enum_t_value));
}
bool BackgroundFetchStorageVersion_Parse(
    const std::string& name, BackgroundFetchStorageVersion* value);
// ===================================================================

class BackgroundFetchRegistration :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchRegistration) */ {
 public:
  BackgroundFetchRegistration();
  virtual ~BackgroundFetchRegistration();

  BackgroundFetchRegistration(const BackgroundFetchRegistration& from);
  BackgroundFetchRegistration(BackgroundFetchRegistration&& from) noexcept
    : BackgroundFetchRegistration() {
    *this = ::std::move(from);
  }

  inline BackgroundFetchRegistration& operator=(const BackgroundFetchRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundFetchRegistration& operator=(BackgroundFetchRegistration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchRegistration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundFetchRegistration* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchRegistration*>(
               &_BackgroundFetchRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BackgroundFetchRegistration& a, BackgroundFetchRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundFetchRegistration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundFetchRegistration* New() const final {
    return CreateMaybeMessage<BackgroundFetchRegistration>(nullptr);
  }

  BackgroundFetchRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundFetchRegistration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundFetchRegistration& from);
  void MergeFrom(const BackgroundFetchRegistration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchRegistration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.BackgroundFetchRegistration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchResult;
  static constexpr BackgroundFetchResult UNSET =
    BackgroundFetchRegistration_BackgroundFetchResult_UNSET;
  static constexpr BackgroundFetchResult FAILURE =
    BackgroundFetchRegistration_BackgroundFetchResult_FAILURE;
  static constexpr BackgroundFetchResult SUCCESS =
    BackgroundFetchRegistration_BackgroundFetchResult_SUCCESS;
  static inline bool BackgroundFetchResult_IsValid(int value) {
    return BackgroundFetchRegistration_BackgroundFetchResult_IsValid(value);
  }
  static constexpr BackgroundFetchResult BackgroundFetchResult_MIN =
    BackgroundFetchRegistration_BackgroundFetchResult_BackgroundFetchResult_MIN;
  static constexpr BackgroundFetchResult BackgroundFetchResult_MAX =
    BackgroundFetchRegistration_BackgroundFetchResult_BackgroundFetchResult_MAX;
  static constexpr int BackgroundFetchResult_ARRAYSIZE =
    BackgroundFetchRegistration_BackgroundFetchResult_BackgroundFetchResult_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BackgroundFetchResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BackgroundFetchResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BackgroundFetchResult_Name.");
    return BackgroundFetchRegistration_BackgroundFetchResult_Name(enum_t_value);
  }
  static inline bool BackgroundFetchResult_Parse(const std::string& name,
      BackgroundFetchResult* value) {
    return BackgroundFetchRegistration_BackgroundFetchResult_Parse(name, value);
  }

  typedef BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchFailureReason;
  static constexpr BackgroundFetchFailureReason NONE =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_NONE;
  static constexpr BackgroundFetchFailureReason CANCELLED_FROM_UI =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_CANCELLED_FROM_UI;
  static constexpr BackgroundFetchFailureReason CANCELLED_BY_DEVELOPER =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_CANCELLED_BY_DEVELOPER;
  static constexpr BackgroundFetchFailureReason BAD_STATUS =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_BAD_STATUS;
  static constexpr BackgroundFetchFailureReason FETCH_ERROR =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_FETCH_ERROR;
  static constexpr BackgroundFetchFailureReason SERVICE_WORKER_UNAVAILABLE =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_SERVICE_WORKER_UNAVAILABLE;
  static constexpr BackgroundFetchFailureReason QUOTA_EXCEEDED =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_QUOTA_EXCEEDED;
  static constexpr BackgroundFetchFailureReason DOWNLOAD_TOTAL_EXCEEDED =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_DOWNLOAD_TOTAL_EXCEEDED;
  static inline bool BackgroundFetchFailureReason_IsValid(int value) {
    return BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(value);
  }
  static constexpr BackgroundFetchFailureReason BackgroundFetchFailureReason_MIN =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_BackgroundFetchFailureReason_MIN;
  static constexpr BackgroundFetchFailureReason BackgroundFetchFailureReason_MAX =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_BackgroundFetchFailureReason_MAX;
  static constexpr int BackgroundFetchFailureReason_ARRAYSIZE =
    BackgroundFetchRegistration_BackgroundFetchFailureReason_BackgroundFetchFailureReason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BackgroundFetchFailureReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BackgroundFetchFailureReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BackgroundFetchFailureReason_Name.");
    return BackgroundFetchRegistration_BackgroundFetchFailureReason_Name(enum_t_value);
  }
  static inline bool BackgroundFetchFailureReason_Parse(const std::string& name,
      BackgroundFetchFailureReason* value) {
    return BackgroundFetchRegistration_BackgroundFetchFailureReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kDeveloperIdFieldNumber = 2,
    kUploadTotalFieldNumber = 3,
    kUploadedFieldNumber = 4,
    kDownloadTotalFieldNumber = 5,
    kDownloadedFieldNumber = 6,
    kResultFieldNumber = 7,
    kFailureReasonFieldNumber = 8,
  };
  // optional string unique_id = 1;
  bool has_unique_id() const;
  void clear_unique_id();
  const std::string& unique_id() const;
  void set_unique_id(const std::string& value);
  void set_unique_id(std::string&& value);
  void set_unique_id(const char* value);
  void set_unique_id(const char* value, size_t size);
  std::string* mutable_unique_id();
  std::string* release_unique_id();
  void set_allocated_unique_id(std::string* unique_id);

  // optional bytes developer_id = 2;
  bool has_developer_id() const;
  void clear_developer_id();
  const std::string& developer_id() const;
  void set_developer_id(const std::string& value);
  void set_developer_id(std::string&& value);
  void set_developer_id(const char* value);
  void set_developer_id(const void* value, size_t size);
  std::string* mutable_developer_id();
  std::string* release_developer_id();
  void set_allocated_developer_id(std::string* developer_id);

  // optional uint64 upload_total = 3;
  bool has_upload_total() const;
  void clear_upload_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 upload_total() const;
  void set_upload_total(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 uploaded = 4;
  bool has_uploaded() const;
  void clear_uploaded();
  ::PROTOBUF_NAMESPACE_ID::uint64 uploaded() const;
  void set_uploaded(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 download_total = 5;
  bool has_download_total() const;
  void clear_download_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 download_total() const;
  void set_download_total(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 downloaded = 6;
  bool has_downloaded() const;
  void clear_downloaded();
  ::PROTOBUF_NAMESPACE_ID::uint64 downloaded() const;
  void set_downloaded(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchResult result = 7;
  bool has_result() const;
  void clear_result();
  ::content::proto::BackgroundFetchRegistration_BackgroundFetchResult result() const;
  void set_result(::content::proto::BackgroundFetchRegistration_BackgroundFetchResult value);

  // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 8;
  bool has_failure_reason() const;
  void clear_failure_reason();
  ::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason failure_reason() const;
  void set_failure_reason(::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchRegistration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr developer_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 upload_total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uploaded_;
  ::PROTOBUF_NAMESPACE_ID::uint64 download_total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 downloaded_;
  int result_;
  int failure_reason_;
  friend struct ::TableStruct_background_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class BackgroundFetchOptions_ImageResource_Size :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchOptions.ImageResource.Size) */ {
 public:
  BackgroundFetchOptions_ImageResource_Size();
  virtual ~BackgroundFetchOptions_ImageResource_Size();

  BackgroundFetchOptions_ImageResource_Size(const BackgroundFetchOptions_ImageResource_Size& from);
  BackgroundFetchOptions_ImageResource_Size(BackgroundFetchOptions_ImageResource_Size&& from) noexcept
    : BackgroundFetchOptions_ImageResource_Size() {
    *this = ::std::move(from);
  }

  inline BackgroundFetchOptions_ImageResource_Size& operator=(const BackgroundFetchOptions_ImageResource_Size& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundFetchOptions_ImageResource_Size& operator=(BackgroundFetchOptions_ImageResource_Size&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchOptions_ImageResource_Size& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundFetchOptions_ImageResource_Size* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchOptions_ImageResource_Size*>(
               &_BackgroundFetchOptions_ImageResource_Size_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BackgroundFetchOptions_ImageResource_Size& a, BackgroundFetchOptions_ImageResource_Size& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundFetchOptions_ImageResource_Size* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundFetchOptions_ImageResource_Size* New() const final {
    return CreateMaybeMessage<BackgroundFetchOptions_ImageResource_Size>(nullptr);
  }

  BackgroundFetchOptions_ImageResource_Size* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundFetchOptions_ImageResource_Size>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundFetchOptions_ImageResource_Size& from);
  void MergeFrom(const BackgroundFetchOptions_ImageResource_Size& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchOptions_ImageResource_Size* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.BackgroundFetchOptions.ImageResource.Size";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // optional int32 width = 1;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 2;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchOptions.ImageResource.Size)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_background_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class BackgroundFetchOptions_ImageResource :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchOptions.ImageResource) */ {
 public:
  BackgroundFetchOptions_ImageResource();
  virtual ~BackgroundFetchOptions_ImageResource();

  BackgroundFetchOptions_ImageResource(const BackgroundFetchOptions_ImageResource& from);
  BackgroundFetchOptions_ImageResource(BackgroundFetchOptions_ImageResource&& from) noexcept
    : BackgroundFetchOptions_ImageResource() {
    *this = ::std::move(from);
  }

  inline BackgroundFetchOptions_ImageResource& operator=(const BackgroundFetchOptions_ImageResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundFetchOptions_ImageResource& operator=(BackgroundFetchOptions_ImageResource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchOptions_ImageResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundFetchOptions_ImageResource* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchOptions_ImageResource*>(
               &_BackgroundFetchOptions_ImageResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BackgroundFetchOptions_ImageResource& a, BackgroundFetchOptions_ImageResource& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundFetchOptions_ImageResource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundFetchOptions_ImageResource* New() const final {
    return CreateMaybeMessage<BackgroundFetchOptions_ImageResource>(nullptr);
  }

  BackgroundFetchOptions_ImageResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundFetchOptions_ImageResource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundFetchOptions_ImageResource& from);
  void MergeFrom(const BackgroundFetchOptions_ImageResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchOptions_ImageResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.BackgroundFetchOptions.ImageResource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BackgroundFetchOptions_ImageResource_Size Size;

  typedef BackgroundFetchOptions_ImageResource_Purpose Purpose;
  static constexpr Purpose ANY =
    BackgroundFetchOptions_ImageResource_Purpose_ANY;
  static constexpr Purpose BADGE =
    BackgroundFetchOptions_ImageResource_Purpose_BADGE;
  static constexpr Purpose MASKABLE =
    BackgroundFetchOptions_ImageResource_Purpose_MASKABLE;
  static inline bool Purpose_IsValid(int value) {
    return BackgroundFetchOptions_ImageResource_Purpose_IsValid(value);
  }
  static constexpr Purpose Purpose_MIN =
    BackgroundFetchOptions_ImageResource_Purpose_Purpose_MIN;
  static constexpr Purpose Purpose_MAX =
    BackgroundFetchOptions_ImageResource_Purpose_Purpose_MAX;
  static constexpr int Purpose_ARRAYSIZE =
    BackgroundFetchOptions_ImageResource_Purpose_Purpose_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Purpose_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Purpose>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Purpose_Name.");
    return BackgroundFetchOptions_ImageResource_Purpose_Name(enum_t_value);
  }
  static inline bool Purpose_Parse(const std::string& name,
      Purpose* value) {
    return BackgroundFetchOptions_ImageResource_Purpose_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSizesFieldNumber = 2,
    kPurposeFieldNumber = 4,
    kSrcFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated .content.proto.BackgroundFetchOptions.ImageResource.Size sizes = 2;
  int sizes_size() const;
  void clear_sizes();
  ::content::proto::BackgroundFetchOptions_ImageResource_Size* mutable_sizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_ImageResource_Size >*
      mutable_sizes();
  const ::content::proto::BackgroundFetchOptions_ImageResource_Size& sizes(int index) const;
  ::content::proto::BackgroundFetchOptions_ImageResource_Size* add_sizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_ImageResource_Size >&
      sizes() const;

  // repeated .content.proto.BackgroundFetchOptions.ImageResource.Purpose purpose = 4;
  int purpose_size() const;
  void clear_purpose();
  ::content::proto::BackgroundFetchOptions_ImageResource_Purpose purpose(int index) const;
  void set_purpose(int index, ::content::proto::BackgroundFetchOptions_ImageResource_Purpose value);
  void add_purpose(::content::proto::BackgroundFetchOptions_ImageResource_Purpose value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& purpose() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_purpose();

  // optional string src = 1;
  bool has_src() const;
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);

  // optional bytes type = 3;
  bool has_type() const;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchOptions.ImageResource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_ImageResource_Size > sizes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> purpose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_background_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class BackgroundFetchOptions :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchOptions) */ {
 public:
  BackgroundFetchOptions();
  virtual ~BackgroundFetchOptions();

  BackgroundFetchOptions(const BackgroundFetchOptions& from);
  BackgroundFetchOptions(BackgroundFetchOptions&& from) noexcept
    : BackgroundFetchOptions() {
    *this = ::std::move(from);
  }

  inline BackgroundFetchOptions& operator=(const BackgroundFetchOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundFetchOptions& operator=(BackgroundFetchOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundFetchOptions* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchOptions*>(
               &_BackgroundFetchOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BackgroundFetchOptions& a, BackgroundFetchOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundFetchOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundFetchOptions* New() const final {
    return CreateMaybeMessage<BackgroundFetchOptions>(nullptr);
  }

  BackgroundFetchOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundFetchOptions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundFetchOptions& from);
  void MergeFrom(const BackgroundFetchOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.BackgroundFetchOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BackgroundFetchOptions_ImageResource ImageResource;

  // accessors -------------------------------------------------------

  enum : int {
    kIconsFieldNumber = 2,
    kTitleFieldNumber = 1,
    kDownloadTotalFieldNumber = 3,
  };
  // repeated .content.proto.BackgroundFetchOptions.ImageResource icons = 2;
  int icons_size() const;
  void clear_icons();
  ::content::proto::BackgroundFetchOptions_ImageResource* mutable_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_ImageResource >*
      mutable_icons();
  const ::content::proto::BackgroundFetchOptions_ImageResource& icons(int index) const;
  ::content::proto::BackgroundFetchOptions_ImageResource* add_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_ImageResource >&
      icons() const;

  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional uint64 download_total = 3;
  bool has_download_total() const;
  void clear_download_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 download_total() const;
  void set_download_total(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_ImageResource > icons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::uint64 download_total_;
  friend struct ::TableStruct_background_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class BackgroundFetchMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchMetadata) */ {
 public:
  BackgroundFetchMetadata();
  virtual ~BackgroundFetchMetadata();

  BackgroundFetchMetadata(const BackgroundFetchMetadata& from);
  BackgroundFetchMetadata(BackgroundFetchMetadata&& from) noexcept
    : BackgroundFetchMetadata() {
    *this = ::std::move(from);
  }

  inline BackgroundFetchMetadata& operator=(const BackgroundFetchMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundFetchMetadata& operator=(BackgroundFetchMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundFetchMetadata* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchMetadata*>(
               &_BackgroundFetchMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BackgroundFetchMetadata& a, BackgroundFetchMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundFetchMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundFetchMetadata* New() const final {
    return CreateMaybeMessage<BackgroundFetchMetadata>(nullptr);
  }

  BackgroundFetchMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundFetchMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundFetchMetadata& from);
  void MergeFrom(const BackgroundFetchMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.BackgroundFetchMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 2,
    kRegistrationFieldNumber = 3,
    kOptionsFieldNumber = 4,
    kCreationMicrosecondsSinceUnixEpochFieldNumber = 1,
    kNumFetchesFieldNumber = 5,
  };
  // optional string origin = 2;
  bool has_origin() const;
  void clear_origin();
  const std::string& origin() const;
  void set_origin(const std::string& value);
  void set_origin(std::string&& value);
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  std::string* mutable_origin();
  std::string* release_origin();
  void set_allocated_origin(std::string* origin);

  // optional .content.proto.BackgroundFetchRegistration registration = 3;
  bool has_registration() const;
  void clear_registration();
  const ::content::proto::BackgroundFetchRegistration& registration() const;
  ::content::proto::BackgroundFetchRegistration* release_registration();
  ::content::proto::BackgroundFetchRegistration* mutable_registration();
  void set_allocated_registration(::content::proto::BackgroundFetchRegistration* registration);

  // optional .content.proto.BackgroundFetchOptions options = 4;
  bool has_options() const;
  void clear_options();
  const ::content::proto::BackgroundFetchOptions& options() const;
  ::content::proto::BackgroundFetchOptions* release_options();
  ::content::proto::BackgroundFetchOptions* mutable_options();
  void set_allocated_options(::content::proto::BackgroundFetchOptions* options);

  // optional int64 creation_microseconds_since_unix_epoch = 1;
  bool has_creation_microseconds_since_unix_epoch() const;
  void clear_creation_microseconds_since_unix_epoch();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_microseconds_since_unix_epoch() const;
  void set_creation_microseconds_since_unix_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 num_fetches = 5;
  bool has_num_fetches() const;
  void clear_num_fetches();
  ::PROTOBUF_NAMESPACE_ID::int32 num_fetches() const;
  void set_num_fetches(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::content::proto::BackgroundFetchRegistration* registration_;
  ::content::proto::BackgroundFetchOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_microseconds_since_unix_epoch_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_fetches_;
  friend struct ::TableStruct_background_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class BackgroundFetchUIOptions :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchUIOptions) */ {
 public:
  BackgroundFetchUIOptions();
  virtual ~BackgroundFetchUIOptions();

  BackgroundFetchUIOptions(const BackgroundFetchUIOptions& from);
  BackgroundFetchUIOptions(BackgroundFetchUIOptions&& from) noexcept
    : BackgroundFetchUIOptions() {
    *this = ::std::move(from);
  }

  inline BackgroundFetchUIOptions& operator=(const BackgroundFetchUIOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundFetchUIOptions& operator=(BackgroundFetchUIOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchUIOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundFetchUIOptions* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchUIOptions*>(
               &_BackgroundFetchUIOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BackgroundFetchUIOptions& a, BackgroundFetchUIOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundFetchUIOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundFetchUIOptions* New() const final {
    return CreateMaybeMessage<BackgroundFetchUIOptions>(nullptr);
  }

  BackgroundFetchUIOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundFetchUIOptions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundFetchUIOptions& from);
  void MergeFrom(const BackgroundFetchUIOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchUIOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.BackgroundFetchUIOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kIconFieldNumber = 2,
  };
  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional bytes icon = 2;
  bool has_icon() const;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const void* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchUIOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  friend struct ::TableStruct_background_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class BackgroundFetchPendingRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchPendingRequest) */ {
 public:
  BackgroundFetchPendingRequest();
  virtual ~BackgroundFetchPendingRequest();

  BackgroundFetchPendingRequest(const BackgroundFetchPendingRequest& from);
  BackgroundFetchPendingRequest(BackgroundFetchPendingRequest&& from) noexcept
    : BackgroundFetchPendingRequest() {
    *this = ::std::move(from);
  }

  inline BackgroundFetchPendingRequest& operator=(const BackgroundFetchPendingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundFetchPendingRequest& operator=(BackgroundFetchPendingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchPendingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundFetchPendingRequest* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchPendingRequest*>(
               &_BackgroundFetchPendingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BackgroundFetchPendingRequest& a, BackgroundFetchPendingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundFetchPendingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundFetchPendingRequest* New() const final {
    return CreateMaybeMessage<BackgroundFetchPendingRequest>(nullptr);
  }

  BackgroundFetchPendingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundFetchPendingRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundFetchPendingRequest& from);
  void MergeFrom(const BackgroundFetchPendingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchPendingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.BackgroundFetchPendingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kSerializedRequestFieldNumber = 3,
    kRequestBodySizeFieldNumber = 5,
    kRequestIndexFieldNumber = 2,
  };
  // optional string unique_id = 1;
  bool has_unique_id() const;
  void clear_unique_id();
  const std::string& unique_id() const;
  void set_unique_id(const std::string& value);
  void set_unique_id(std::string&& value);
  void set_unique_id(const char* value);
  void set_unique_id(const char* value, size_t size);
  std::string* mutable_unique_id();
  std::string* release_unique_id();
  void set_allocated_unique_id(std::string* unique_id);

  // optional string serialized_request = 3;
  bool has_serialized_request() const;
  void clear_serialized_request();
  const std::string& serialized_request() const;
  void set_serialized_request(const std::string& value);
  void set_serialized_request(std::string&& value);
  void set_serialized_request(const char* value);
  void set_serialized_request(const char* value, size_t size);
  std::string* mutable_serialized_request();
  std::string* release_serialized_request();
  void set_allocated_serialized_request(std::string* serialized_request);

  // optional uint64 request_body_size = 5;
  bool has_request_body_size() const;
  void clear_request_body_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_body_size() const;
  void set_request_body_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 request_index = 2;
  bool has_request_index() const;
  void clear_request_index();
  ::PROTOBUF_NAMESPACE_ID::int32 request_index() const;
  void set_request_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchPendingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_request_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_body_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_index_;
  friend struct ::TableStruct_background_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class BackgroundFetchActiveRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchActiveRequest) */ {
 public:
  BackgroundFetchActiveRequest();
  virtual ~BackgroundFetchActiveRequest();

  BackgroundFetchActiveRequest(const BackgroundFetchActiveRequest& from);
  BackgroundFetchActiveRequest(BackgroundFetchActiveRequest&& from) noexcept
    : BackgroundFetchActiveRequest() {
    *this = ::std::move(from);
  }

  inline BackgroundFetchActiveRequest& operator=(const BackgroundFetchActiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundFetchActiveRequest& operator=(BackgroundFetchActiveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchActiveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundFetchActiveRequest* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchActiveRequest*>(
               &_BackgroundFetchActiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BackgroundFetchActiveRequest& a, BackgroundFetchActiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundFetchActiveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundFetchActiveRequest* New() const final {
    return CreateMaybeMessage<BackgroundFetchActiveRequest>(nullptr);
  }

  BackgroundFetchActiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundFetchActiveRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundFetchActiveRequest& from);
  void MergeFrom(const BackgroundFetchActiveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchActiveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.BackgroundFetchActiveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kSerializedRequestFieldNumber = 3,
    kDownloadGuidFieldNumber = 4,
    kRequestBodySizeFieldNumber = 6,
    kRequestIndexFieldNumber = 2,
  };
  // optional string unique_id = 1;
  bool has_unique_id() const;
  void clear_unique_id();
  const std::string& unique_id() const;
  void set_unique_id(const std::string& value);
  void set_unique_id(std::string&& value);
  void set_unique_id(const char* value);
  void set_unique_id(const char* value, size_t size);
  std::string* mutable_unique_id();
  std::string* release_unique_id();
  void set_allocated_unique_id(std::string* unique_id);

  // optional string serialized_request = 3;
  bool has_serialized_request() const;
  void clear_serialized_request();
  const std::string& serialized_request() const;
  void set_serialized_request(const std::string& value);
  void set_serialized_request(std::string&& value);
  void set_serialized_request(const char* value);
  void set_serialized_request(const char* value, size_t size);
  std::string* mutable_serialized_request();
  std::string* release_serialized_request();
  void set_allocated_serialized_request(std::string* serialized_request);

  // optional string download_guid = 4;
  bool has_download_guid() const;
  void clear_download_guid();
  const std::string& download_guid() const;
  void set_download_guid(const std::string& value);
  void set_download_guid(std::string&& value);
  void set_download_guid(const char* value);
  void set_download_guid(const char* value, size_t size);
  std::string* mutable_download_guid();
  std::string* release_download_guid();
  void set_allocated_download_guid(std::string* download_guid);

  // optional uint64 request_body_size = 6;
  bool has_request_body_size() const;
  void clear_request_body_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_body_size() const;
  void set_request_body_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 request_index = 2;
  bool has_request_index() const;
  void clear_request_index();
  ::PROTOBUF_NAMESPACE_ID::int32 request_index() const;
  void set_request_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchActiveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_request_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr download_guid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_body_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_index_;
  friend struct ::TableStruct_background_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class BackgroundFetchCompletedRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.BackgroundFetchCompletedRequest) */ {
 public:
  BackgroundFetchCompletedRequest();
  virtual ~BackgroundFetchCompletedRequest();

  BackgroundFetchCompletedRequest(const BackgroundFetchCompletedRequest& from);
  BackgroundFetchCompletedRequest(BackgroundFetchCompletedRequest&& from) noexcept
    : BackgroundFetchCompletedRequest() {
    *this = ::std::move(from);
  }

  inline BackgroundFetchCompletedRequest& operator=(const BackgroundFetchCompletedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundFetchCompletedRequest& operator=(BackgroundFetchCompletedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundFetchCompletedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundFetchCompletedRequest* internal_default_instance() {
    return reinterpret_cast<const BackgroundFetchCompletedRequest*>(
               &_BackgroundFetchCompletedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BackgroundFetchCompletedRequest& a, BackgroundFetchCompletedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundFetchCompletedRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundFetchCompletedRequest* New() const final {
    return CreateMaybeMessage<BackgroundFetchCompletedRequest>(nullptr);
  }

  BackgroundFetchCompletedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundFetchCompletedRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundFetchCompletedRequest& from);
  void MergeFrom(const BackgroundFetchCompletedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundFetchCompletedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.BackgroundFetchCompletedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kSerializedRequestFieldNumber = 3,
    kDownloadGuidFieldNumber = 4,
    kRequestIndexFieldNumber = 2,
    kFailureReasonFieldNumber = 6,
  };
  // optional string unique_id = 1;
  bool has_unique_id() const;
  void clear_unique_id();
  const std::string& unique_id() const;
  void set_unique_id(const std::string& value);
  void set_unique_id(std::string&& value);
  void set_unique_id(const char* value);
  void set_unique_id(const char* value, size_t size);
  std::string* mutable_unique_id();
  std::string* release_unique_id();
  void set_allocated_unique_id(std::string* unique_id);

  // optional string serialized_request = 3;
  bool has_serialized_request() const;
  void clear_serialized_request();
  const std::string& serialized_request() const;
  void set_serialized_request(const std::string& value);
  void set_serialized_request(std::string&& value);
  void set_serialized_request(const char* value);
  void set_serialized_request(const char* value, size_t size);
  std::string* mutable_serialized_request();
  std::string* release_serialized_request();
  void set_allocated_serialized_request(std::string* serialized_request);

  // optional string download_guid = 4;
  bool has_download_guid() const;
  void clear_download_guid();
  const std::string& download_guid() const;
  void set_download_guid(const std::string& value);
  void set_download_guid(std::string&& value);
  void set_download_guid(const char* value);
  void set_download_guid(const char* value, size_t size);
  std::string* mutable_download_guid();
  std::string* release_download_guid();
  void set_allocated_download_guid(std::string* download_guid);

  // optional int32 request_index = 2;
  bool has_request_index() const;
  void clear_request_index();
  ::PROTOBUF_NAMESPACE_ID::int32 request_index() const;
  void set_request_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 6;
  bool has_failure_reason() const;
  void clear_failure_reason();
  ::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason failure_reason() const;
  void set_failure_reason(::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason value);

  // @@protoc_insertion_point(class_scope:content.proto.BackgroundFetchCompletedRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_request_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr download_guid_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_index_;
  int failure_reason_;
  friend struct ::TableStruct_background_5ffetch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BackgroundFetchRegistration

// optional string unique_id = 1;
inline bool BackgroundFetchRegistration::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchRegistration::clear_unique_id() {
  unique_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundFetchRegistration::unique_id() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.unique_id)
  return unique_id_.GetNoArena();
}
inline void BackgroundFetchRegistration::set_unique_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.unique_id)
}
inline void BackgroundFetchRegistration::set_unique_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchRegistration.unique_id)
}
inline void BackgroundFetchRegistration::set_unique_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchRegistration.unique_id)
}
inline void BackgroundFetchRegistration::set_unique_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchRegistration.unique_id)
}
inline std::string* BackgroundFetchRegistration::mutable_unique_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchRegistration.unique_id)
  return unique_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchRegistration::release_unique_id() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchRegistration.unique_id)
  if (!has_unique_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unique_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchRegistration::set_allocated_unique_id(std::string* unique_id) {
  if (unique_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unique_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchRegistration.unique_id)
}

// optional bytes developer_id = 2;
inline bool BackgroundFetchRegistration::has_developer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchRegistration::clear_developer_id() {
  developer_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BackgroundFetchRegistration::developer_id() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.developer_id)
  return developer_id_.GetNoArena();
}
inline void BackgroundFetchRegistration::set_developer_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  developer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.developer_id)
}
inline void BackgroundFetchRegistration::set_developer_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  developer_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchRegistration.developer_id)
}
inline void BackgroundFetchRegistration::set_developer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  developer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchRegistration.developer_id)
}
inline void BackgroundFetchRegistration::set_developer_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  developer_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchRegistration.developer_id)
}
inline std::string* BackgroundFetchRegistration::mutable_developer_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchRegistration.developer_id)
  return developer_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchRegistration::release_developer_id() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchRegistration.developer_id)
  if (!has_developer_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return developer_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchRegistration::set_allocated_developer_id(std::string* developer_id) {
  if (developer_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  developer_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), developer_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchRegistration.developer_id)
}

// optional uint64 upload_total = 3;
inline bool BackgroundFetchRegistration::has_upload_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchRegistration::clear_upload_total() {
  upload_total_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BackgroundFetchRegistration::upload_total() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.upload_total)
  return upload_total_;
}
inline void BackgroundFetchRegistration::set_upload_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  upload_total_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.upload_total)
}

// optional uint64 uploaded = 4;
inline bool BackgroundFetchRegistration::has_uploaded() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundFetchRegistration::clear_uploaded() {
  uploaded_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BackgroundFetchRegistration::uploaded() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.uploaded)
  return uploaded_;
}
inline void BackgroundFetchRegistration::set_uploaded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  uploaded_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.uploaded)
}

// optional uint64 download_total = 5;
inline bool BackgroundFetchRegistration::has_download_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackgroundFetchRegistration::clear_download_total() {
  download_total_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BackgroundFetchRegistration::download_total() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.download_total)
  return download_total_;
}
inline void BackgroundFetchRegistration::set_download_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  download_total_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.download_total)
}

// optional uint64 downloaded = 6;
inline bool BackgroundFetchRegistration::has_downloaded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BackgroundFetchRegistration::clear_downloaded() {
  downloaded_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BackgroundFetchRegistration::downloaded() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.downloaded)
  return downloaded_;
}
inline void BackgroundFetchRegistration::set_downloaded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  downloaded_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.downloaded)
}

// optional .content.proto.BackgroundFetchRegistration.BackgroundFetchResult result = 7;
inline bool BackgroundFetchRegistration::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BackgroundFetchRegistration::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::content::proto::BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::result() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.result)
  return static_cast< ::content::proto::BackgroundFetchRegistration_BackgroundFetchResult >(result_);
}
inline void BackgroundFetchRegistration::set_result(::content::proto::BackgroundFetchRegistration_BackgroundFetchResult value) {
  assert(::content::proto::BackgroundFetchRegistration_BackgroundFetchResult_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  result_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.result)
}

// optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 8;
inline bool BackgroundFetchRegistration::has_failure_reason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BackgroundFetchRegistration::clear_failure_reason() {
  failure_reason_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::failure_reason() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchRegistration.failure_reason)
  return static_cast< ::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason >(failure_reason_);
}
inline void BackgroundFetchRegistration::set_failure_reason(::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason value) {
  assert(::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  failure_reason_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchRegistration.failure_reason)
}

// -------------------------------------------------------------------

// BackgroundFetchOptions_ImageResource_Size

// optional int32 width = 1;
inline bool BackgroundFetchOptions_ImageResource_Size::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchOptions_ImageResource_Size::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BackgroundFetchOptions_ImageResource_Size::width() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.ImageResource.Size.width)
  return width_;
}
inline void BackgroundFetchOptions_ImageResource_Size::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.ImageResource.Size.width)
}

// optional int32 height = 2;
inline bool BackgroundFetchOptions_ImageResource_Size::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchOptions_ImageResource_Size::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BackgroundFetchOptions_ImageResource_Size::height() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.ImageResource.Size.height)
  return height_;
}
inline void BackgroundFetchOptions_ImageResource_Size::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.ImageResource.Size.height)
}

// -------------------------------------------------------------------

// BackgroundFetchOptions_ImageResource

// optional string src = 1;
inline bool BackgroundFetchOptions_ImageResource::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchOptions_ImageResource::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundFetchOptions_ImageResource::src() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.ImageResource.src)
  return src_.GetNoArena();
}
inline void BackgroundFetchOptions_ImageResource::set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.ImageResource.src)
}
inline void BackgroundFetchOptions_ImageResource::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchOptions.ImageResource.src)
}
inline void BackgroundFetchOptions_ImageResource::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchOptions.ImageResource.src)
}
inline void BackgroundFetchOptions_ImageResource::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchOptions.ImageResource.src)
}
inline std::string* BackgroundFetchOptions_ImageResource::mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchOptions.ImageResource.src)
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchOptions_ImageResource::release_src() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchOptions.ImageResource.src)
  if (!has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchOptions_ImageResource::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchOptions.ImageResource.src)
}

// repeated .content.proto.BackgroundFetchOptions.ImageResource.Size sizes = 2;
inline int BackgroundFetchOptions_ImageResource::sizes_size() const {
  return sizes_.size();
}
inline void BackgroundFetchOptions_ImageResource::clear_sizes() {
  sizes_.Clear();
}
inline ::content::proto::BackgroundFetchOptions_ImageResource_Size* BackgroundFetchOptions_ImageResource::mutable_sizes(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchOptions.ImageResource.sizes)
  return sizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_ImageResource_Size >*
BackgroundFetchOptions_ImageResource::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.BackgroundFetchOptions.ImageResource.sizes)
  return &sizes_;
}
inline const ::content::proto::BackgroundFetchOptions_ImageResource_Size& BackgroundFetchOptions_ImageResource::sizes(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.ImageResource.sizes)
  return sizes_.Get(index);
}
inline ::content::proto::BackgroundFetchOptions_ImageResource_Size* BackgroundFetchOptions_ImageResource::add_sizes() {
  // @@protoc_insertion_point(field_add:content.proto.BackgroundFetchOptions.ImageResource.sizes)
  return sizes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_ImageResource_Size >&
BackgroundFetchOptions_ImageResource::sizes() const {
  // @@protoc_insertion_point(field_list:content.proto.BackgroundFetchOptions.ImageResource.sizes)
  return sizes_;
}

// optional bytes type = 3;
inline bool BackgroundFetchOptions_ImageResource::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchOptions_ImageResource::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BackgroundFetchOptions_ImageResource::type() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.ImageResource.type)
  return type_.GetNoArena();
}
inline void BackgroundFetchOptions_ImageResource::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.ImageResource.type)
}
inline void BackgroundFetchOptions_ImageResource::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchOptions.ImageResource.type)
}
inline void BackgroundFetchOptions_ImageResource::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchOptions.ImageResource.type)
}
inline void BackgroundFetchOptions_ImageResource::set_type(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchOptions.ImageResource.type)
}
inline std::string* BackgroundFetchOptions_ImageResource::mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchOptions.ImageResource.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchOptions_ImageResource::release_type() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchOptions.ImageResource.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchOptions_ImageResource::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchOptions.ImageResource.type)
}

// repeated .content.proto.BackgroundFetchOptions.ImageResource.Purpose purpose = 4;
inline int BackgroundFetchOptions_ImageResource::purpose_size() const {
  return purpose_.size();
}
inline void BackgroundFetchOptions_ImageResource::clear_purpose() {
  purpose_.Clear();
}
inline ::content::proto::BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::purpose(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.ImageResource.purpose)
  return static_cast< ::content::proto::BackgroundFetchOptions_ImageResource_Purpose >(purpose_.Get(index));
}
inline void BackgroundFetchOptions_ImageResource::set_purpose(int index, ::content::proto::BackgroundFetchOptions_ImageResource_Purpose value) {
  assert(::content::proto::BackgroundFetchOptions_ImageResource_Purpose_IsValid(value));
  purpose_.Set(index, value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.ImageResource.purpose)
}
inline void BackgroundFetchOptions_ImageResource::add_purpose(::content::proto::BackgroundFetchOptions_ImageResource_Purpose value) {
  assert(::content::proto::BackgroundFetchOptions_ImageResource_Purpose_IsValid(value));
  purpose_.Add(value);
  // @@protoc_insertion_point(field_add:content.proto.BackgroundFetchOptions.ImageResource.purpose)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
BackgroundFetchOptions_ImageResource::purpose() const {
  // @@protoc_insertion_point(field_list:content.proto.BackgroundFetchOptions.ImageResource.purpose)
  return purpose_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BackgroundFetchOptions_ImageResource::mutable_purpose() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.BackgroundFetchOptions.ImageResource.purpose)
  return &purpose_;
}

// -------------------------------------------------------------------

// BackgroundFetchOptions

// optional string title = 1;
inline bool BackgroundFetchOptions::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchOptions::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundFetchOptions::title() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.title)
  return title_.GetNoArena();
}
inline void BackgroundFetchOptions::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.title)
}
inline void BackgroundFetchOptions::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchOptions.title)
}
inline void BackgroundFetchOptions::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchOptions.title)
}
inline void BackgroundFetchOptions::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchOptions.title)
}
inline std::string* BackgroundFetchOptions::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchOptions.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchOptions::release_title() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchOptions.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchOptions::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchOptions.title)
}

// repeated .content.proto.BackgroundFetchOptions.ImageResource icons = 2;
inline int BackgroundFetchOptions::icons_size() const {
  return icons_.size();
}
inline void BackgroundFetchOptions::clear_icons() {
  icons_.Clear();
}
inline ::content::proto::BackgroundFetchOptions_ImageResource* BackgroundFetchOptions::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchOptions.icons)
  return icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_ImageResource >*
BackgroundFetchOptions::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.BackgroundFetchOptions.icons)
  return &icons_;
}
inline const ::content::proto::BackgroundFetchOptions_ImageResource& BackgroundFetchOptions::icons(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.icons)
  return icons_.Get(index);
}
inline ::content::proto::BackgroundFetchOptions_ImageResource* BackgroundFetchOptions::add_icons() {
  // @@protoc_insertion_point(field_add:content.proto.BackgroundFetchOptions.icons)
  return icons_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::BackgroundFetchOptions_ImageResource >&
BackgroundFetchOptions::icons() const {
  // @@protoc_insertion_point(field_list:content.proto.BackgroundFetchOptions.icons)
  return icons_;
}

// optional uint64 download_total = 3;
inline bool BackgroundFetchOptions::has_download_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchOptions::clear_download_total() {
  download_total_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BackgroundFetchOptions::download_total() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchOptions.download_total)
  return download_total_;
}
inline void BackgroundFetchOptions::set_download_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  download_total_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchOptions.download_total)
}

// -------------------------------------------------------------------

// BackgroundFetchMetadata

// optional int64 creation_microseconds_since_unix_epoch = 1;
inline bool BackgroundFetchMetadata::has_creation_microseconds_since_unix_epoch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundFetchMetadata::clear_creation_microseconds_since_unix_epoch() {
  creation_microseconds_since_unix_epoch_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BackgroundFetchMetadata::creation_microseconds_since_unix_epoch() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchMetadata.creation_microseconds_since_unix_epoch)
  return creation_microseconds_since_unix_epoch_;
}
inline void BackgroundFetchMetadata::set_creation_microseconds_since_unix_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  creation_microseconds_since_unix_epoch_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchMetadata.creation_microseconds_since_unix_epoch)
}

// optional string origin = 2;
inline bool BackgroundFetchMetadata::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchMetadata::clear_origin() {
  origin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundFetchMetadata::origin() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchMetadata.origin)
  return origin_.GetNoArena();
}
inline void BackgroundFetchMetadata::set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchMetadata.origin)
}
inline void BackgroundFetchMetadata::set_origin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchMetadata.origin)
}
inline void BackgroundFetchMetadata::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchMetadata.origin)
}
inline void BackgroundFetchMetadata::set_origin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchMetadata.origin)
}
inline std::string* BackgroundFetchMetadata::mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchMetadata.origin)
  return origin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchMetadata::release_origin() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchMetadata.origin)
  if (!has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return origin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchMetadata::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchMetadata.origin)
}

// optional .content.proto.BackgroundFetchRegistration registration = 3;
inline bool BackgroundFetchMetadata::has_registration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchMetadata::clear_registration() {
  if (registration_ != nullptr) registration_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::content::proto::BackgroundFetchRegistration& BackgroundFetchMetadata::registration() const {
  const ::content::proto::BackgroundFetchRegistration* p = registration_;
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchMetadata.registration)
  return p != nullptr ? *p : *reinterpret_cast<const ::content::proto::BackgroundFetchRegistration*>(
      &::content::proto::_BackgroundFetchRegistration_default_instance_);
}
inline ::content::proto::BackgroundFetchRegistration* BackgroundFetchMetadata::release_registration() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchMetadata.registration)
  _has_bits_[0] &= ~0x00000002u;
  ::content::proto::BackgroundFetchRegistration* temp = registration_;
  registration_ = nullptr;
  return temp;
}
inline ::content::proto::BackgroundFetchRegistration* BackgroundFetchMetadata::mutable_registration() {
  _has_bits_[0] |= 0x00000002u;
  if (registration_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::proto::BackgroundFetchRegistration>(GetArenaNoVirtual());
    registration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchMetadata.registration)
  return registration_;
}
inline void BackgroundFetchMetadata::set_allocated_registration(::content::proto::BackgroundFetchRegistration* registration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete registration_;
  }
  if (registration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      registration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  registration_ = registration;
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchMetadata.registration)
}

// optional .content.proto.BackgroundFetchOptions options = 4;
inline bool BackgroundFetchMetadata::has_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchMetadata::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::content::proto::BackgroundFetchOptions& BackgroundFetchMetadata::options() const {
  const ::content::proto::BackgroundFetchOptions* p = options_;
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchMetadata.options)
  return p != nullptr ? *p : *reinterpret_cast<const ::content::proto::BackgroundFetchOptions*>(
      &::content::proto::_BackgroundFetchOptions_default_instance_);
}
inline ::content::proto::BackgroundFetchOptions* BackgroundFetchMetadata::release_options() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchMetadata.options)
  _has_bits_[0] &= ~0x00000004u;
  ::content::proto::BackgroundFetchOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::content::proto::BackgroundFetchOptions* BackgroundFetchMetadata::mutable_options() {
  _has_bits_[0] |= 0x00000004u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::proto::BackgroundFetchOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchMetadata.options)
  return options_;
}
inline void BackgroundFetchMetadata::set_allocated_options(::content::proto::BackgroundFetchOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchMetadata.options)
}

// optional int32 num_fetches = 5;
inline bool BackgroundFetchMetadata::has_num_fetches() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackgroundFetchMetadata::clear_num_fetches() {
  num_fetches_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BackgroundFetchMetadata::num_fetches() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchMetadata.num_fetches)
  return num_fetches_;
}
inline void BackgroundFetchMetadata::set_num_fetches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_fetches_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchMetadata.num_fetches)
}

// -------------------------------------------------------------------

// BackgroundFetchUIOptions

// optional string title = 1;
inline bool BackgroundFetchUIOptions::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchUIOptions::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundFetchUIOptions::title() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchUIOptions.title)
  return title_.GetNoArena();
}
inline void BackgroundFetchUIOptions::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchUIOptions.title)
}
inline void BackgroundFetchUIOptions::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchUIOptions.title)
}
inline void BackgroundFetchUIOptions::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchUIOptions.title)
}
inline void BackgroundFetchUIOptions::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchUIOptions.title)
}
inline std::string* BackgroundFetchUIOptions::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchUIOptions.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchUIOptions::release_title() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchUIOptions.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchUIOptions::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchUIOptions.title)
}

// optional bytes icon = 2;
inline bool BackgroundFetchUIOptions::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchUIOptions::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BackgroundFetchUIOptions::icon() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchUIOptions.icon)
  return icon_.GetNoArena();
}
inline void BackgroundFetchUIOptions::set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchUIOptions.icon)
}
inline void BackgroundFetchUIOptions::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchUIOptions.icon)
}
inline void BackgroundFetchUIOptions::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchUIOptions.icon)
}
inline void BackgroundFetchUIOptions::set_icon(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchUIOptions.icon)
}
inline std::string* BackgroundFetchUIOptions::mutable_icon() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchUIOptions.icon)
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchUIOptions::release_icon() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchUIOptions.icon)
  if (!has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return icon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchUIOptions::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchUIOptions.icon)
}

// -------------------------------------------------------------------

// BackgroundFetchPendingRequest

// optional string unique_id = 1;
inline bool BackgroundFetchPendingRequest::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchPendingRequest::clear_unique_id() {
  unique_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundFetchPendingRequest::unique_id() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchPendingRequest.unique_id)
  return unique_id_.GetNoArena();
}
inline void BackgroundFetchPendingRequest::set_unique_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchPendingRequest.unique_id)
}
inline void BackgroundFetchPendingRequest::set_unique_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchPendingRequest.unique_id)
}
inline void BackgroundFetchPendingRequest::set_unique_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchPendingRequest.unique_id)
}
inline void BackgroundFetchPendingRequest::set_unique_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchPendingRequest.unique_id)
}
inline std::string* BackgroundFetchPendingRequest::mutable_unique_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchPendingRequest.unique_id)
  return unique_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchPendingRequest::release_unique_id() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchPendingRequest.unique_id)
  if (!has_unique_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unique_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchPendingRequest::set_allocated_unique_id(std::string* unique_id) {
  if (unique_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unique_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchPendingRequest.unique_id)
}

// optional int32 request_index = 2;
inline bool BackgroundFetchPendingRequest::has_request_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundFetchPendingRequest::clear_request_index() {
  request_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BackgroundFetchPendingRequest::request_index() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchPendingRequest.request_index)
  return request_index_;
}
inline void BackgroundFetchPendingRequest::set_request_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  request_index_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchPendingRequest.request_index)
}

// optional string serialized_request = 3;
inline bool BackgroundFetchPendingRequest::has_serialized_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchPendingRequest::clear_serialized_request() {
  serialized_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BackgroundFetchPendingRequest::serialized_request() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchPendingRequest.serialized_request)
  return serialized_request_.GetNoArena();
}
inline void BackgroundFetchPendingRequest::set_serialized_request(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchPendingRequest.serialized_request)
}
inline void BackgroundFetchPendingRequest::set_serialized_request(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchPendingRequest.serialized_request)
}
inline void BackgroundFetchPendingRequest::set_serialized_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchPendingRequest.serialized_request)
}
inline void BackgroundFetchPendingRequest::set_serialized_request(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchPendingRequest.serialized_request)
}
inline std::string* BackgroundFetchPendingRequest::mutable_serialized_request() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchPendingRequest.serialized_request)
  return serialized_request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchPendingRequest::release_serialized_request() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchPendingRequest.serialized_request)
  if (!has_serialized_request()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return serialized_request_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchPendingRequest::set_allocated_serialized_request(std::string* serialized_request) {
  if (serialized_request != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serialized_request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_request);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchPendingRequest.serialized_request)
}

// optional uint64 request_body_size = 5;
inline bool BackgroundFetchPendingRequest::has_request_body_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchPendingRequest::clear_request_body_size() {
  request_body_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BackgroundFetchPendingRequest::request_body_size() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchPendingRequest.request_body_size)
  return request_body_size_;
}
inline void BackgroundFetchPendingRequest::set_request_body_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  request_body_size_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchPendingRequest.request_body_size)
}

// -------------------------------------------------------------------

// BackgroundFetchActiveRequest

// optional string unique_id = 1;
inline bool BackgroundFetchActiveRequest::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchActiveRequest::clear_unique_id() {
  unique_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundFetchActiveRequest::unique_id() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchActiveRequest.unique_id)
  return unique_id_.GetNoArena();
}
inline void BackgroundFetchActiveRequest::set_unique_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchActiveRequest.unique_id)
}
inline void BackgroundFetchActiveRequest::set_unique_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchActiveRequest.unique_id)
}
inline void BackgroundFetchActiveRequest::set_unique_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchActiveRequest.unique_id)
}
inline void BackgroundFetchActiveRequest::set_unique_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchActiveRequest.unique_id)
}
inline std::string* BackgroundFetchActiveRequest::mutable_unique_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchActiveRequest.unique_id)
  return unique_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchActiveRequest::release_unique_id() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchActiveRequest.unique_id)
  if (!has_unique_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unique_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchActiveRequest::set_allocated_unique_id(std::string* unique_id) {
  if (unique_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unique_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchActiveRequest.unique_id)
}

// optional int32 request_index = 2;
inline bool BackgroundFetchActiveRequest::has_request_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackgroundFetchActiveRequest::clear_request_index() {
  request_index_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BackgroundFetchActiveRequest::request_index() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchActiveRequest.request_index)
  return request_index_;
}
inline void BackgroundFetchActiveRequest::set_request_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  request_index_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchActiveRequest.request_index)
}

// optional string serialized_request = 3;
inline bool BackgroundFetchActiveRequest::has_serialized_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchActiveRequest::clear_serialized_request() {
  serialized_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BackgroundFetchActiveRequest::serialized_request() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchActiveRequest.serialized_request)
  return serialized_request_.GetNoArena();
}
inline void BackgroundFetchActiveRequest::set_serialized_request(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchActiveRequest.serialized_request)
}
inline void BackgroundFetchActiveRequest::set_serialized_request(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchActiveRequest.serialized_request)
}
inline void BackgroundFetchActiveRequest::set_serialized_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchActiveRequest.serialized_request)
}
inline void BackgroundFetchActiveRequest::set_serialized_request(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchActiveRequest.serialized_request)
}
inline std::string* BackgroundFetchActiveRequest::mutable_serialized_request() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchActiveRequest.serialized_request)
  return serialized_request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchActiveRequest::release_serialized_request() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchActiveRequest.serialized_request)
  if (!has_serialized_request()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return serialized_request_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchActiveRequest::set_allocated_serialized_request(std::string* serialized_request) {
  if (serialized_request != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serialized_request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_request);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchActiveRequest.serialized_request)
}

// optional string download_guid = 4;
inline bool BackgroundFetchActiveRequest::has_download_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchActiveRequest::clear_download_guid() {
  download_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BackgroundFetchActiveRequest::download_guid() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchActiveRequest.download_guid)
  return download_guid_.GetNoArena();
}
inline void BackgroundFetchActiveRequest::set_download_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  download_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchActiveRequest.download_guid)
}
inline void BackgroundFetchActiveRequest::set_download_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  download_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchActiveRequest.download_guid)
}
inline void BackgroundFetchActiveRequest::set_download_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  download_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchActiveRequest.download_guid)
}
inline void BackgroundFetchActiveRequest::set_download_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  download_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchActiveRequest.download_guid)
}
inline std::string* BackgroundFetchActiveRequest::mutable_download_guid() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchActiveRequest.download_guid)
  return download_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchActiveRequest::release_download_guid() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchActiveRequest.download_guid)
  if (!has_download_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return download_guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchActiveRequest::set_allocated_download_guid(std::string* download_guid) {
  if (download_guid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  download_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), download_guid);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchActiveRequest.download_guid)
}

// optional uint64 request_body_size = 6;
inline bool BackgroundFetchActiveRequest::has_request_body_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundFetchActiveRequest::clear_request_body_size() {
  request_body_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BackgroundFetchActiveRequest::request_body_size() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchActiveRequest.request_body_size)
  return request_body_size_;
}
inline void BackgroundFetchActiveRequest::set_request_body_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  request_body_size_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchActiveRequest.request_body_size)
}

// -------------------------------------------------------------------

// BackgroundFetchCompletedRequest

// optional string unique_id = 1;
inline bool BackgroundFetchCompletedRequest::has_unique_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundFetchCompletedRequest::clear_unique_id() {
  unique_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundFetchCompletedRequest::unique_id() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchCompletedRequest.unique_id)
  return unique_id_.GetNoArena();
}
inline void BackgroundFetchCompletedRequest::set_unique_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchCompletedRequest.unique_id)
}
inline void BackgroundFetchCompletedRequest::set_unique_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchCompletedRequest.unique_id)
}
inline void BackgroundFetchCompletedRequest::set_unique_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchCompletedRequest.unique_id)
}
inline void BackgroundFetchCompletedRequest::set_unique_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchCompletedRequest.unique_id)
}
inline std::string* BackgroundFetchCompletedRequest::mutable_unique_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchCompletedRequest.unique_id)
  return unique_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchCompletedRequest::release_unique_id() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchCompletedRequest.unique_id)
  if (!has_unique_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unique_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchCompletedRequest::set_allocated_unique_id(std::string* unique_id) {
  if (unique_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unique_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchCompletedRequest.unique_id)
}

// optional int32 request_index = 2;
inline bool BackgroundFetchCompletedRequest::has_request_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundFetchCompletedRequest::clear_request_index() {
  request_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BackgroundFetchCompletedRequest::request_index() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchCompletedRequest.request_index)
  return request_index_;
}
inline void BackgroundFetchCompletedRequest::set_request_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  request_index_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchCompletedRequest.request_index)
}

// optional string serialized_request = 3;
inline bool BackgroundFetchCompletedRequest::has_serialized_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundFetchCompletedRequest::clear_serialized_request() {
  serialized_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BackgroundFetchCompletedRequest::serialized_request() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchCompletedRequest.serialized_request)
  return serialized_request_.GetNoArena();
}
inline void BackgroundFetchCompletedRequest::set_serialized_request(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchCompletedRequest.serialized_request)
}
inline void BackgroundFetchCompletedRequest::set_serialized_request(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchCompletedRequest.serialized_request)
}
inline void BackgroundFetchCompletedRequest::set_serialized_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchCompletedRequest.serialized_request)
}
inline void BackgroundFetchCompletedRequest::set_serialized_request(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  serialized_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchCompletedRequest.serialized_request)
}
inline std::string* BackgroundFetchCompletedRequest::mutable_serialized_request() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchCompletedRequest.serialized_request)
  return serialized_request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchCompletedRequest::release_serialized_request() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchCompletedRequest.serialized_request)
  if (!has_serialized_request()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return serialized_request_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchCompletedRequest::set_allocated_serialized_request(std::string* serialized_request) {
  if (serialized_request != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serialized_request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_request);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchCompletedRequest.serialized_request)
}

// optional string download_guid = 4;
inline bool BackgroundFetchCompletedRequest::has_download_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundFetchCompletedRequest::clear_download_guid() {
  download_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BackgroundFetchCompletedRequest::download_guid() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchCompletedRequest.download_guid)
  return download_guid_.GetNoArena();
}
inline void BackgroundFetchCompletedRequest::set_download_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  download_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchCompletedRequest.download_guid)
}
inline void BackgroundFetchCompletedRequest::set_download_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  download_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.BackgroundFetchCompletedRequest.download_guid)
}
inline void BackgroundFetchCompletedRequest::set_download_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  download_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.BackgroundFetchCompletedRequest.download_guid)
}
inline void BackgroundFetchCompletedRequest::set_download_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  download_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.BackgroundFetchCompletedRequest.download_guid)
}
inline std::string* BackgroundFetchCompletedRequest::mutable_download_guid() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:content.proto.BackgroundFetchCompletedRequest.download_guid)
  return download_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundFetchCompletedRequest::release_download_guid() {
  // @@protoc_insertion_point(field_release:content.proto.BackgroundFetchCompletedRequest.download_guid)
  if (!has_download_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return download_guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundFetchCompletedRequest::set_allocated_download_guid(std::string* download_guid) {
  if (download_guid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  download_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), download_guid);
  // @@protoc_insertion_point(field_set_allocated:content.proto.BackgroundFetchCompletedRequest.download_guid)
}

// optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 6;
inline bool BackgroundFetchCompletedRequest::has_failure_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackgroundFetchCompletedRequest::clear_failure_reason() {
  failure_reason_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchCompletedRequest::failure_reason() const {
  // @@protoc_insertion_point(field_get:content.proto.BackgroundFetchCompletedRequest.failure_reason)
  return static_cast< ::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason >(failure_reason_);
}
inline void BackgroundFetchCompletedRequest::set_failure_reason(::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason value) {
  assert(::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  failure_reason_ = value;
  // @@protoc_insertion_point(field_set:content.proto.BackgroundFetchCompletedRequest.failure_reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::proto::BackgroundFetchRegistration_BackgroundFetchResult> : ::std::true_type {};
template <> struct is_proto_enum< ::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason> : ::std::true_type {};
template <> struct is_proto_enum< ::content::proto::BackgroundFetchOptions_ImageResource_Purpose> : ::std::true_type {};
template <> struct is_proto_enum< ::content::proto::BackgroundFetchStorageVersion> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_background_5ffetch_2eproto
