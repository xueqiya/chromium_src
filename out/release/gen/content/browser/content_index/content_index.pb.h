// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_index.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_content_5findex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_content_5findex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_content_5findex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_content_5findex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace content {
namespace proto {
class ContentDescription;
class ContentDescriptionDefaultTypeInternal;
extern ContentDescriptionDefaultTypeInternal _ContentDescription_default_instance_;
class ContentEntry;
class ContentEntryDefaultTypeInternal;
extern ContentEntryDefaultTypeInternal _ContentEntry_default_instance_;
class ContentIconDefinition;
class ContentIconDefinitionDefaultTypeInternal;
extern ContentIconDefinitionDefaultTypeInternal _ContentIconDefinition_default_instance_;
class SerializedIcons;
class SerializedIconsDefaultTypeInternal;
extern SerializedIconsDefaultTypeInternal _SerializedIcons_default_instance_;
class SerializedIcons_SerializedIcon;
class SerializedIcons_SerializedIconDefaultTypeInternal;
extern SerializedIcons_SerializedIconDefaultTypeInternal _SerializedIcons_SerializedIcon_default_instance_;
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::proto::ContentDescription* Arena::CreateMaybeMessage<::content::proto::ContentDescription>(Arena*);
template<> ::content::proto::ContentEntry* Arena::CreateMaybeMessage<::content::proto::ContentEntry>(Arena*);
template<> ::content::proto::ContentIconDefinition* Arena::CreateMaybeMessage<::content::proto::ContentIconDefinition>(Arena*);
template<> ::content::proto::SerializedIcons* Arena::CreateMaybeMessage<::content::proto::SerializedIcons>(Arena*);
template<> ::content::proto::SerializedIcons_SerializedIcon* Arena::CreateMaybeMessage<::content::proto::SerializedIcons_SerializedIcon>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {
namespace proto {

// ===================================================================

class ContentIconDefinition :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.ContentIconDefinition) */ {
 public:
  ContentIconDefinition();
  virtual ~ContentIconDefinition();

  ContentIconDefinition(const ContentIconDefinition& from);
  ContentIconDefinition(ContentIconDefinition&& from) noexcept
    : ContentIconDefinition() {
    *this = ::std::move(from);
  }

  inline ContentIconDefinition& operator=(const ContentIconDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentIconDefinition& operator=(ContentIconDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContentIconDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentIconDefinition* internal_default_instance() {
    return reinterpret_cast<const ContentIconDefinition*>(
               &_ContentIconDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContentIconDefinition& a, ContentIconDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentIconDefinition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentIconDefinition* New() const final {
    return CreateMaybeMessage<ContentIconDefinition>(nullptr);
  }

  ContentIconDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentIconDefinition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentIconDefinition& from);
  void MergeFrom(const ContentIconDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentIconDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.ContentIconDefinition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kSizesFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // optional string src = 1;
  bool has_src() const;
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);

  // optional string sizes = 2;
  bool has_sizes() const;
  void clear_sizes();
  const std::string& sizes() const;
  void set_sizes(const std::string& value);
  void set_sizes(std::string&& value);
  void set_sizes(const char* value);
  void set_sizes(const char* value, size_t size);
  std::string* mutable_sizes();
  std::string* release_sizes();
  void set_allocated_sizes(std::string* sizes);

  // optional string type = 3;
  bool has_type() const;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:content.proto.ContentIconDefinition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sizes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_content_5findex_2eproto;
};
// -------------------------------------------------------------------

class ContentDescription :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.ContentDescription) */ {
 public:
  ContentDescription();
  virtual ~ContentDescription();

  ContentDescription(const ContentDescription& from);
  ContentDescription(ContentDescription&& from) noexcept
    : ContentDescription() {
    *this = ::std::move(from);
  }

  inline ContentDescription& operator=(const ContentDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentDescription& operator=(ContentDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContentDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentDescription* internal_default_instance() {
    return reinterpret_cast<const ContentDescription*>(
               &_ContentDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContentDescription& a, ContentDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentDescription* New() const final {
    return CreateMaybeMessage<ContentDescription>(nullptr);
  }

  ContentDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentDescription>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentDescription& from);
  void MergeFrom(const ContentDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.ContentDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconsFieldNumber = 5,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kLaunchUrlFieldNumber = 6,
    kCategoryFieldNumber = 4,
  };
  // repeated .content.proto.ContentIconDefinition icons = 5;
  int icons_size() const;
  void clear_icons();
  ::content::proto::ContentIconDefinition* mutable_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::ContentIconDefinition >*
      mutable_icons();
  const ::content::proto::ContentIconDefinition& icons(int index) const;
  ::content::proto::ContentIconDefinition* add_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::ContentIconDefinition >&
      icons() const;

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional string launch_url = 6;
  bool has_launch_url() const;
  void clear_launch_url();
  const std::string& launch_url() const;
  void set_launch_url(const std::string& value);
  void set_launch_url(std::string&& value);
  void set_launch_url(const char* value);
  void set_launch_url(const char* value, size_t size);
  std::string* mutable_launch_url();
  std::string* release_launch_url();
  void set_allocated_launch_url(std::string* launch_url);

  // optional int32 category = 4;
  bool has_category() const;
  void clear_category();
  ::PROTOBUF_NAMESPACE_ID::int32 category() const;
  void set_category(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:content.proto.ContentDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::ContentIconDefinition > icons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 category_;
  friend struct ::TableStruct_content_5findex_2eproto;
};
// -------------------------------------------------------------------

class ContentEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.ContentEntry) */ {
 public:
  ContentEntry();
  virtual ~ContentEntry();

  ContentEntry(const ContentEntry& from);
  ContentEntry(ContentEntry&& from) noexcept
    : ContentEntry() {
    *this = ::std::move(from);
  }

  inline ContentEntry& operator=(const ContentEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentEntry& operator=(ContentEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContentEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentEntry* internal_default_instance() {
    return reinterpret_cast<const ContentEntry*>(
               &_ContentEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContentEntry& a, ContentEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentEntry* New() const final {
    return CreateMaybeMessage<ContentEntry>(nullptr);
  }

  ContentEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentEntry& from);
  void MergeFrom(const ContentEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.ContentEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaunchUrlFieldNumber = 3,
    kDescriptionFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // optional string launch_url = 3;
  bool has_launch_url() const;
  void clear_launch_url();
  const std::string& launch_url() const;
  void set_launch_url(const std::string& value);
  void set_launch_url(std::string&& value);
  void set_launch_url(const char* value);
  void set_launch_url(const char* value, size_t size);
  std::string* mutable_launch_url();
  std::string* release_launch_url();
  void set_allocated_launch_url(std::string* launch_url);

  // optional .content.proto.ContentDescription description = 1;
  bool has_description() const;
  void clear_description();
  const ::content::proto::ContentDescription& description() const;
  ::content::proto::ContentDescription* release_description();
  ::content::proto::ContentDescription* mutable_description();
  void set_allocated_description(::content::proto::ContentDescription* description);

  // optional int64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:content.proto.ContentEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_url_;
  ::content::proto::ContentDescription* description_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_content_5findex_2eproto;
};
// -------------------------------------------------------------------

class SerializedIcons_SerializedIcon :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.SerializedIcons.SerializedIcon) */ {
 public:
  SerializedIcons_SerializedIcon();
  virtual ~SerializedIcons_SerializedIcon();

  SerializedIcons_SerializedIcon(const SerializedIcons_SerializedIcon& from);
  SerializedIcons_SerializedIcon(SerializedIcons_SerializedIcon&& from) noexcept
    : SerializedIcons_SerializedIcon() {
    *this = ::std::move(from);
  }

  inline SerializedIcons_SerializedIcon& operator=(const SerializedIcons_SerializedIcon& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedIcons_SerializedIcon& operator=(SerializedIcons_SerializedIcon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SerializedIcons_SerializedIcon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerializedIcons_SerializedIcon* internal_default_instance() {
    return reinterpret_cast<const SerializedIcons_SerializedIcon*>(
               &_SerializedIcons_SerializedIcon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SerializedIcons_SerializedIcon& a, SerializedIcons_SerializedIcon& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedIcons_SerializedIcon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedIcons_SerializedIcon* New() const final {
    return CreateMaybeMessage<SerializedIcons_SerializedIcon>(nullptr);
  }

  SerializedIcons_SerializedIcon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedIcons_SerializedIcon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SerializedIcons_SerializedIcon& from);
  void MergeFrom(const SerializedIcons_SerializedIcon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerializedIcons_SerializedIcon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.SerializedIcons.SerializedIcon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconFieldNumber = 1,
  };
  // optional string icon = 1;
  bool has_icon() const;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);

  // @@protoc_insertion_point(class_scope:content.proto.SerializedIcons.SerializedIcon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  friend struct ::TableStruct_content_5findex_2eproto;
};
// -------------------------------------------------------------------

class SerializedIcons :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.SerializedIcons) */ {
 public:
  SerializedIcons();
  virtual ~SerializedIcons();

  SerializedIcons(const SerializedIcons& from);
  SerializedIcons(SerializedIcons&& from) noexcept
    : SerializedIcons() {
    *this = ::std::move(from);
  }

  inline SerializedIcons& operator=(const SerializedIcons& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedIcons& operator=(SerializedIcons&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SerializedIcons& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerializedIcons* internal_default_instance() {
    return reinterpret_cast<const SerializedIcons*>(
               &_SerializedIcons_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SerializedIcons& a, SerializedIcons& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedIcons* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedIcons* New() const final {
    return CreateMaybeMessage<SerializedIcons>(nullptr);
  }

  SerializedIcons* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedIcons>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SerializedIcons& from);
  void MergeFrom(const SerializedIcons& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerializedIcons* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.SerializedIcons";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SerializedIcons_SerializedIcon SerializedIcon;

  // accessors -------------------------------------------------------

  enum : int {
    kIconsFieldNumber = 1,
  };
  // repeated .content.proto.SerializedIcons.SerializedIcon icons = 1;
  int icons_size() const;
  void clear_icons();
  ::content::proto::SerializedIcons_SerializedIcon* mutable_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SerializedIcons_SerializedIcon >*
      mutable_icons();
  const ::content::proto::SerializedIcons_SerializedIcon& icons(int index) const;
  ::content::proto::SerializedIcons_SerializedIcon* add_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SerializedIcons_SerializedIcon >&
      icons() const;

  // @@protoc_insertion_point(class_scope:content.proto.SerializedIcons)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SerializedIcons_SerializedIcon > icons_;
  friend struct ::TableStruct_content_5findex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContentIconDefinition

// optional string src = 1;
inline bool ContentIconDefinition::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentIconDefinition::clear_src() {
  src_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentIconDefinition::src() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentIconDefinition.src)
  return src_.GetNoArena();
}
inline void ContentIconDefinition::set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.ContentIconDefinition.src)
}
inline void ContentIconDefinition::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.ContentIconDefinition.src)
}
inline void ContentIconDefinition::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.ContentIconDefinition.src)
}
inline void ContentIconDefinition::set_src(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.ContentIconDefinition.src)
}
inline std::string* ContentIconDefinition::mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.ContentIconDefinition.src)
  return src_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentIconDefinition::release_src() {
  // @@protoc_insertion_point(field_release:content.proto.ContentIconDefinition.src)
  if (!has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentIconDefinition::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentIconDefinition.src)
}

// optional string sizes = 2;
inline bool ContentIconDefinition::has_sizes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentIconDefinition::clear_sizes() {
  sizes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentIconDefinition::sizes() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentIconDefinition.sizes)
  return sizes_.GetNoArena();
}
inline void ContentIconDefinition::set_sizes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sizes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.ContentIconDefinition.sizes)
}
inline void ContentIconDefinition::set_sizes(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sizes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.ContentIconDefinition.sizes)
}
inline void ContentIconDefinition::set_sizes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sizes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.ContentIconDefinition.sizes)
}
inline void ContentIconDefinition::set_sizes(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sizes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.ContentIconDefinition.sizes)
}
inline std::string* ContentIconDefinition::mutable_sizes() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.proto.ContentIconDefinition.sizes)
  return sizes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentIconDefinition::release_sizes() {
  // @@protoc_insertion_point(field_release:content.proto.ContentIconDefinition.sizes)
  if (!has_sizes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sizes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentIconDefinition::set_allocated_sizes(std::string* sizes) {
  if (sizes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sizes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sizes);
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentIconDefinition.sizes)
}

// optional string type = 3;
inline bool ContentIconDefinition::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentIconDefinition::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentIconDefinition::type() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentIconDefinition.type)
  return type_.GetNoArena();
}
inline void ContentIconDefinition::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.ContentIconDefinition.type)
}
inline void ContentIconDefinition::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.ContentIconDefinition.type)
}
inline void ContentIconDefinition::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.ContentIconDefinition.type)
}
inline void ContentIconDefinition::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.ContentIconDefinition.type)
}
inline std::string* ContentIconDefinition::mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:content.proto.ContentIconDefinition.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentIconDefinition::release_type() {
  // @@protoc_insertion_point(field_release:content.proto.ContentIconDefinition.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentIconDefinition::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentIconDefinition.type)
}

// -------------------------------------------------------------------

// ContentDescription

// optional string id = 1;
inline bool ContentDescription::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentDescription::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentDescription::id() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.id)
  return id_.GetNoArena();
}
inline void ContentDescription::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.ContentDescription.id)
}
inline void ContentDescription::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.ContentDescription.id)
}
inline void ContentDescription::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.ContentDescription.id)
}
inline void ContentDescription::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.ContentDescription.id)
}
inline std::string* ContentDescription::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.ContentDescription.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentDescription::release_id() {
  // @@protoc_insertion_point(field_release:content.proto.ContentDescription.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDescription::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentDescription.id)
}

// optional string title = 2;
inline bool ContentDescription::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentDescription::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentDescription::title() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.title)
  return title_.GetNoArena();
}
inline void ContentDescription::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.ContentDescription.title)
}
inline void ContentDescription::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.ContentDescription.title)
}
inline void ContentDescription::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.ContentDescription.title)
}
inline void ContentDescription::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.ContentDescription.title)
}
inline std::string* ContentDescription::mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.proto.ContentDescription.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentDescription::release_title() {
  // @@protoc_insertion_point(field_release:content.proto.ContentDescription.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDescription::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentDescription.title)
}

// optional string description = 3;
inline bool ContentDescription::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentDescription::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentDescription::description() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.description)
  return description_.GetNoArena();
}
inline void ContentDescription::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.ContentDescription.description)
}
inline void ContentDescription::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.ContentDescription.description)
}
inline void ContentDescription::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.ContentDescription.description)
}
inline void ContentDescription::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.ContentDescription.description)
}
inline std::string* ContentDescription::mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:content.proto.ContentDescription.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentDescription::release_description() {
  // @@protoc_insertion_point(field_release:content.proto.ContentDescription.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDescription::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentDescription.description)
}

// optional int32 category = 4;
inline bool ContentDescription::has_category() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentDescription::clear_category() {
  category_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContentDescription::category() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.category)
  return category_;
}
inline void ContentDescription::set_category(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  category_ = value;
  // @@protoc_insertion_point(field_set:content.proto.ContentDescription.category)
}

// repeated .content.proto.ContentIconDefinition icons = 5;
inline int ContentDescription::icons_size() const {
  return icons_.size();
}
inline void ContentDescription::clear_icons() {
  icons_.Clear();
}
inline ::content::proto::ContentIconDefinition* ContentDescription::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.ContentDescription.icons)
  return icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::ContentIconDefinition >*
ContentDescription::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.ContentDescription.icons)
  return &icons_;
}
inline const ::content::proto::ContentIconDefinition& ContentDescription::icons(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.icons)
  return icons_.Get(index);
}
inline ::content::proto::ContentIconDefinition* ContentDescription::add_icons() {
  // @@protoc_insertion_point(field_add:content.proto.ContentDescription.icons)
  return icons_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::ContentIconDefinition >&
ContentDescription::icons() const {
  // @@protoc_insertion_point(field_list:content.proto.ContentDescription.icons)
  return icons_;
}

// optional string launch_url = 6;
inline bool ContentDescription::has_launch_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentDescription::clear_launch_url() {
  launch_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ContentDescription::launch_url() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentDescription.launch_url)
  return launch_url_.GetNoArena();
}
inline void ContentDescription::set_launch_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  launch_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.ContentDescription.launch_url)
}
inline void ContentDescription::set_launch_url(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  launch_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.ContentDescription.launch_url)
}
inline void ContentDescription::set_launch_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  launch_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.ContentDescription.launch_url)
}
inline void ContentDescription::set_launch_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  launch_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.ContentDescription.launch_url)
}
inline std::string* ContentDescription::mutable_launch_url() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:content.proto.ContentDescription.launch_url)
  return launch_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentDescription::release_launch_url() {
  // @@protoc_insertion_point(field_release:content.proto.ContentDescription.launch_url)
  if (!has_launch_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return launch_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentDescription::set_allocated_launch_url(std::string* launch_url) {
  if (launch_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  launch_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launch_url);
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentDescription.launch_url)
}

// -------------------------------------------------------------------

// ContentEntry

// optional .content.proto.ContentDescription description = 1;
inline bool ContentEntry::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentEntry::clear_description() {
  if (description_ != nullptr) description_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::content::proto::ContentDescription& ContentEntry::description() const {
  const ::content::proto::ContentDescription* p = description_;
  // @@protoc_insertion_point(field_get:content.proto.ContentEntry.description)
  return p != nullptr ? *p : *reinterpret_cast<const ::content::proto::ContentDescription*>(
      &::content::proto::_ContentDescription_default_instance_);
}
inline ::content::proto::ContentDescription* ContentEntry::release_description() {
  // @@protoc_insertion_point(field_release:content.proto.ContentEntry.description)
  _has_bits_[0] &= ~0x00000002u;
  ::content::proto::ContentDescription* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::content::proto::ContentDescription* ContentEntry::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::proto::ContentDescription>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:content.proto.ContentEntry.description)
  return description_;
}
inline void ContentEntry::set_allocated_description(::content::proto::ContentDescription* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentEntry.description)
}

// optional int64 timestamp = 2;
inline bool ContentEntry::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentEntry::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContentEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentEntry.timestamp)
  return timestamp_;
}
inline void ContentEntry::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:content.proto.ContentEntry.timestamp)
}

// optional string launch_url = 3;
inline bool ContentEntry::has_launch_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentEntry::clear_launch_url() {
  launch_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentEntry::launch_url() const {
  // @@protoc_insertion_point(field_get:content.proto.ContentEntry.launch_url)
  return launch_url_.GetNoArena();
}
inline void ContentEntry::set_launch_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  launch_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.ContentEntry.launch_url)
}
inline void ContentEntry::set_launch_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  launch_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.ContentEntry.launch_url)
}
inline void ContentEntry::set_launch_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  launch_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.ContentEntry.launch_url)
}
inline void ContentEntry::set_launch_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  launch_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.ContentEntry.launch_url)
}
inline std::string* ContentEntry::mutable_launch_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.ContentEntry.launch_url)
  return launch_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentEntry::release_launch_url() {
  // @@protoc_insertion_point(field_release:content.proto.ContentEntry.launch_url)
  if (!has_launch_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return launch_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentEntry::set_allocated_launch_url(std::string* launch_url) {
  if (launch_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  launch_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launch_url);
  // @@protoc_insertion_point(field_set_allocated:content.proto.ContentEntry.launch_url)
}

// -------------------------------------------------------------------

// SerializedIcons_SerializedIcon

// optional string icon = 1;
inline bool SerializedIcons_SerializedIcon::has_icon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerializedIcons_SerializedIcon::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SerializedIcons_SerializedIcon::icon() const {
  // @@protoc_insertion_point(field_get:content.proto.SerializedIcons.SerializedIcon.icon)
  return icon_.GetNoArena();
}
inline void SerializedIcons_SerializedIcon::set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.proto.SerializedIcons.SerializedIcon.icon)
}
inline void SerializedIcons_SerializedIcon::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.proto.SerializedIcons.SerializedIcon.icon)
}
inline void SerializedIcons_SerializedIcon::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.proto.SerializedIcons.SerializedIcon.icon)
}
inline void SerializedIcons_SerializedIcon::set_icon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.proto.SerializedIcons.SerializedIcon.icon)
}
inline std::string* SerializedIcons_SerializedIcon::mutable_icon() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.proto.SerializedIcons.SerializedIcon.icon)
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SerializedIcons_SerializedIcon::release_icon() {
  // @@protoc_insertion_point(field_release:content.proto.SerializedIcons.SerializedIcon.icon)
  if (!has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return icon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SerializedIcons_SerializedIcon::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:content.proto.SerializedIcons.SerializedIcon.icon)
}

// -------------------------------------------------------------------

// SerializedIcons

// repeated .content.proto.SerializedIcons.SerializedIcon icons = 1;
inline int SerializedIcons::icons_size() const {
  return icons_.size();
}
inline void SerializedIcons::clear_icons() {
  icons_.Clear();
}
inline ::content::proto::SerializedIcons_SerializedIcon* SerializedIcons::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.SerializedIcons.icons)
  return icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SerializedIcons_SerializedIcon >*
SerializedIcons::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.SerializedIcons.icons)
  return &icons_;
}
inline const ::content::proto::SerializedIcons_SerializedIcon& SerializedIcons::icons(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.SerializedIcons.icons)
  return icons_.Get(index);
}
inline ::content::proto::SerializedIcons_SerializedIcon* SerializedIcons::add_icons() {
  // @@protoc_insertion_point(field_add:content.proto.SerializedIcons.icons)
  return icons_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::SerializedIcons_SerializedIcon >&
SerializedIcons::icons() const {
  // @@protoc_insertion_point(field_list:content.proto.SerializedIcons.icons)
  return icons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace content

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_content_5findex_2eproto
