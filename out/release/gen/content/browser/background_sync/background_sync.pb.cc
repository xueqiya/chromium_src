// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: background_sync.proto

#include "background_sync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_background_5fsync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackgroundSyncRegistrationProto_background_5fsync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_background_5fsync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeriodicSyncOptions_background_5fsync_2eproto;
namespace content {
class PeriodicSyncOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeriodicSyncOptions> _instance;
} _PeriodicSyncOptions_default_instance_;
class BackgroundSyncRegistrationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundSyncRegistrationProto> _instance;
} _BackgroundSyncRegistrationProto_default_instance_;
class BackgroundSyncRegistrationsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundSyncRegistrationsProto> _instance;
} _BackgroundSyncRegistrationsProto_default_instance_;
}  // namespace content
static void InitDefaultsscc_info_BackgroundSyncRegistrationProto_background_5fsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_BackgroundSyncRegistrationProto_default_instance_;
    new (ptr) ::content::BackgroundSyncRegistrationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::BackgroundSyncRegistrationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackgroundSyncRegistrationProto_background_5fsync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BackgroundSyncRegistrationProto_background_5fsync_2eproto}, {
      &scc_info_PeriodicSyncOptions_background_5fsync_2eproto.base,}};

static void InitDefaultsscc_info_BackgroundSyncRegistrationsProto_background_5fsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_BackgroundSyncRegistrationsProto_default_instance_;
    new (ptr) ::content::BackgroundSyncRegistrationsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::BackgroundSyncRegistrationsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackgroundSyncRegistrationsProto_background_5fsync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BackgroundSyncRegistrationsProto_background_5fsync_2eproto}, {
      &scc_info_BackgroundSyncRegistrationProto_background_5fsync_2eproto.base,}};

static void InitDefaultsscc_info_PeriodicSyncOptions_background_5fsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_PeriodicSyncOptions_default_instance_;
    new (ptr) ::content::PeriodicSyncOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::PeriodicSyncOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeriodicSyncOptions_background_5fsync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PeriodicSyncOptions_background_5fsync_2eproto}, {}};

namespace content {
bool SyncNetworkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SyncNetworkState_strings[3] = {};

static const char SyncNetworkState_names[] =
  "NETWORK_STATE_ANY"
  "NETWORK_STATE_AVOID_CELLULAR"
  "NETWORK_STATE_ONLINE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SyncNetworkState_entries[] = {
  { {SyncNetworkState_names + 0, 17}, 0 },
  { {SyncNetworkState_names + 17, 28}, 1 },
  { {SyncNetworkState_names + 45, 20}, 2 },
};

static const int SyncNetworkState_entries_by_number[] = {
  0, // 0 -> NETWORK_STATE_ANY
  1, // 1 -> NETWORK_STATE_AVOID_CELLULAR
  2, // 2 -> NETWORK_STATE_ONLINE
};

const std::string& SyncNetworkState_Name(
    SyncNetworkState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SyncNetworkState_entries,
          SyncNetworkState_entries_by_number,
          3, SyncNetworkState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SyncNetworkState_entries,
      SyncNetworkState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SyncNetworkState_strings[idx].get();
}
bool SyncNetworkState_Parse(
    const std::string& name, SyncNetworkState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SyncNetworkState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SyncNetworkState>(int_value);
  }
  return success;
}

// ===================================================================

void PeriodicSyncOptions::InitAsDefaultInstance() {
}
class PeriodicSyncOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<PeriodicSyncOptions>()._has_bits_);
  static void set_has_min_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PeriodicSyncOptions::PeriodicSyncOptions()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.PeriodicSyncOptions)
}
PeriodicSyncOptions::PeriodicSyncOptions(const PeriodicSyncOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  min_interval_ = from.min_interval_;
  // @@protoc_insertion_point(copy_constructor:content.PeriodicSyncOptions)
}

void PeriodicSyncOptions::SharedCtor() {
  min_interval_ = PROTOBUF_LONGLONG(0);
}

PeriodicSyncOptions::~PeriodicSyncOptions() {
  // @@protoc_insertion_point(destructor:content.PeriodicSyncOptions)
  SharedDtor();
}

void PeriodicSyncOptions::SharedDtor() {
}

void PeriodicSyncOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeriodicSyncOptions& PeriodicSyncOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeriodicSyncOptions_background_5fsync_2eproto.base);
  return *internal_default_instance();
}


void PeriodicSyncOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:content.PeriodicSyncOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_interval_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeriodicSyncOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 min_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_interval(&has_bits);
          min_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeriodicSyncOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.PeriodicSyncOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 min_interval = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_min_interval(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.PeriodicSyncOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.PeriodicSyncOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeriodicSyncOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.PeriodicSyncOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 min_interval = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->min_interval(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.PeriodicSyncOptions)
}

size_t PeriodicSyncOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.PeriodicSyncOptions)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 min_interval = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->min_interval());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeriodicSyncOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PeriodicSyncOptions*>(
      &from));
}

void PeriodicSyncOptions::MergeFrom(const PeriodicSyncOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.PeriodicSyncOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min_interval()) {
    set_min_interval(from.min_interval());
  }
}

void PeriodicSyncOptions::CopyFrom(const PeriodicSyncOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.PeriodicSyncOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodicSyncOptions::IsInitialized() const {
  return true;
}

void PeriodicSyncOptions::InternalSwap(PeriodicSyncOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_interval_, other->min_interval_);
}

std::string PeriodicSyncOptions::GetTypeName() const {
  return "content.PeriodicSyncOptions";
}


// ===================================================================

void BackgroundSyncRegistrationProto::InitAsDefaultInstance() {
  ::content::_BackgroundSyncRegistrationProto_default_instance_._instance.get_mutable()->periodic_sync_options_ = const_cast< ::content::PeriodicSyncOptions*>(
      ::content::PeriodicSyncOptions::internal_default_instance());
}
class BackgroundSyncRegistrationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundSyncRegistrationProto>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_delay_until(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::content::PeriodicSyncOptions& periodic_sync_options(const BackgroundSyncRegistrationProto* msg);
  static void set_has_periodic_sync_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::content::PeriodicSyncOptions&
BackgroundSyncRegistrationProto::_Internal::periodic_sync_options(const BackgroundSyncRegistrationProto* msg) {
  return *msg->periodic_sync_options_;
}
BackgroundSyncRegistrationProto::BackgroundSyncRegistrationProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.BackgroundSyncRegistrationProto)
}
BackgroundSyncRegistrationProto::BackgroundSyncRegistrationProto(const BackgroundSyncRegistrationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.has_periodic_sync_options()) {
    periodic_sync_options_ = new ::content::PeriodicSyncOptions(*from.periodic_sync_options_);
  } else {
    periodic_sync_options_ = nullptr;
  }
  ::memcpy(&delay_until_, &from.delay_until_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_attempts_) -
    reinterpret_cast<char*>(&delay_until_)) + sizeof(max_attempts_));
  // @@protoc_insertion_point(copy_constructor:content.BackgroundSyncRegistrationProto)
}

void BackgroundSyncRegistrationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundSyncRegistrationProto_background_5fsync_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&periodic_sync_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_attempts_) -
      reinterpret_cast<char*>(&periodic_sync_options_)) + sizeof(max_attempts_));
}

BackgroundSyncRegistrationProto::~BackgroundSyncRegistrationProto() {
  // @@protoc_insertion_point(destructor:content.BackgroundSyncRegistrationProto)
  SharedDtor();
}

void BackgroundSyncRegistrationProto::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete periodic_sync_options_;
}

void BackgroundSyncRegistrationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundSyncRegistrationProto& BackgroundSyncRegistrationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundSyncRegistrationProto_background_5fsync_2eproto.base);
  return *internal_default_instance();
}


void BackgroundSyncRegistrationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.BackgroundSyncRegistrationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(periodic_sync_options_ != nullptr);
      periodic_sync_options_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&delay_until_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_attempts_) -
        reinterpret_cast<char*>(&delay_until_)) + sizeof(max_attempts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundSyncRegistrationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_tag(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num_attempts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_attempts(&has_bits);
          num_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 delay_until = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_delay_until(&has_bits);
          delay_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.PeriodicSyncOptions periodic_sync_options = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_periodic_sync_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_attempts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_attempts(&has_bits);
          max_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundSyncRegistrationProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.BackgroundSyncRegistrationProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_attempts = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_num_attempts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 delay_until = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_delay_until(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &delay_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.PeriodicSyncOptions periodic_sync_options = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_periodic_sync_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_attempts = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_max_attempts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.BackgroundSyncRegistrationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.BackgroundSyncRegistrationProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundSyncRegistrationProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.BackgroundSyncRegistrationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // required int32 num_attempts = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->num_attempts(), output);
  }

  // required int64 delay_until = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->delay_until(), output);
  }

  // optional .content.PeriodicSyncOptions periodic_sync_options = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::periodic_sync_options(this), output);
  }

  // optional int32 max_attempts = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->max_attempts(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.BackgroundSyncRegistrationProto)
}

size_t BackgroundSyncRegistrationProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.BackgroundSyncRegistrationProto)
  size_t total_size = 0;

  if (has_tag()) {
    // required string tag = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tag());
  }

  if (has_delay_until()) {
    // required int64 delay_until = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->delay_until());
  }

  if (has_num_attempts()) {
    // required int32 num_attempts = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_attempts());
  }

  return total_size;
}
size_t BackgroundSyncRegistrationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.BackgroundSyncRegistrationProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string tag = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tag());

    // required int64 delay_until = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->delay_until());

    // required int32 num_attempts = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_attempts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .content.PeriodicSyncOptions periodic_sync_options = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *periodic_sync_options_);
  }

  // optional int32 max_attempts = 10;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_attempts());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundSyncRegistrationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundSyncRegistrationProto*>(
      &from));
}

void BackgroundSyncRegistrationProto::MergeFrom(const BackgroundSyncRegistrationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.BackgroundSyncRegistrationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_periodic_sync_options()->::content::PeriodicSyncOptions::MergeFrom(from.periodic_sync_options());
    }
    if (cached_has_bits & 0x00000004u) {
      delay_until_ = from.delay_until_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_attempts_ = from.num_attempts_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_attempts_ = from.max_attempts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundSyncRegistrationProto::CopyFrom(const BackgroundSyncRegistrationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.BackgroundSyncRegistrationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundSyncRegistrationProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  return true;
}

void BackgroundSyncRegistrationProto::InternalSwap(BackgroundSyncRegistrationProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(periodic_sync_options_, other->periodic_sync_options_);
  swap(delay_until_, other->delay_until_);
  swap(num_attempts_, other->num_attempts_);
  swap(max_attempts_, other->max_attempts_);
}

std::string BackgroundSyncRegistrationProto::GetTypeName() const {
  return "content.BackgroundSyncRegistrationProto";
}


// ===================================================================

void BackgroundSyncRegistrationsProto::InitAsDefaultInstance() {
}
class BackgroundSyncRegistrationsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundSyncRegistrationsProto>()._has_bits_);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BackgroundSyncRegistrationsProto::BackgroundSyncRegistrationsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.BackgroundSyncRegistrationsProto)
}
BackgroundSyncRegistrationsProto::BackgroundSyncRegistrationsProto(const BackgroundSyncRegistrationsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      registration_(from.registration_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_origin()) {
    origin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  // @@protoc_insertion_point(copy_constructor:content.BackgroundSyncRegistrationsProto)
}

void BackgroundSyncRegistrationsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundSyncRegistrationsProto_background_5fsync_2eproto.base);
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BackgroundSyncRegistrationsProto::~BackgroundSyncRegistrationsProto() {
  // @@protoc_insertion_point(destructor:content.BackgroundSyncRegistrationsProto)
  SharedDtor();
}

void BackgroundSyncRegistrationsProto::SharedDtor() {
  origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackgroundSyncRegistrationsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundSyncRegistrationsProto& BackgroundSyncRegistrationsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundSyncRegistrationsProto_background_5fsync_2eproto.base);
  return *internal_default_instance();
}


void BackgroundSyncRegistrationsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.BackgroundSyncRegistrationsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  registration_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    origin_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundSyncRegistrationsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .content.BackgroundSyncRegistrationProto registration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_registration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // required string origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_origin(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundSyncRegistrationsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.BackgroundSyncRegistrationsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .content.BackgroundSyncRegistrationProto registration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_registration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string origin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.BackgroundSyncRegistrationsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.BackgroundSyncRegistrationsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundSyncRegistrationsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.BackgroundSyncRegistrationsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.BackgroundSyncRegistrationProto registration = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->registration_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->registration(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // required string origin = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->origin(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.BackgroundSyncRegistrationsProto)
}

size_t BackgroundSyncRegistrationsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.BackgroundSyncRegistrationsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string origin = 3;
  if (has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->origin());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.BackgroundSyncRegistrationProto registration = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->registration_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->registration(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundSyncRegistrationsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundSyncRegistrationsProto*>(
      &from));
}

void BackgroundSyncRegistrationsProto::MergeFrom(const BackgroundSyncRegistrationsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.BackgroundSyncRegistrationsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  registration_.MergeFrom(from.registration_);
  if (from.has_origin()) {
    _has_bits_[0] |= 0x00000001u;
    origin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
}

void BackgroundSyncRegistrationsProto::CopyFrom(const BackgroundSyncRegistrationsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.BackgroundSyncRegistrationsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundSyncRegistrationsProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->registration())) return false;
  return true;
}

void BackgroundSyncRegistrationsProto::InternalSwap(BackgroundSyncRegistrationsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&registration_)->InternalSwap(CastToBase(&other->registration_));
  origin_.Swap(&other->origin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string BackgroundSyncRegistrationsProto::GetTypeName() const {
  return "content.BackgroundSyncRegistrationsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::PeriodicSyncOptions* Arena::CreateMaybeMessage< ::content::PeriodicSyncOptions >(Arena* arena) {
  return Arena::CreateInternal< ::content::PeriodicSyncOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::content::BackgroundSyncRegistrationProto* Arena::CreateMaybeMessage< ::content::BackgroundSyncRegistrationProto >(Arena* arena) {
  return Arena::CreateInternal< ::content::BackgroundSyncRegistrationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::content::BackgroundSyncRegistrationsProto* Arena::CreateMaybeMessage< ::content::BackgroundSyncRegistrationsProto >(Arena* arena) {
  return Arena::CreateInternal< ::content::BackgroundSyncRegistrationsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
