// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: background_sync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_background_5fsync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_background_5fsync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_background_5fsync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_background_5fsync_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace content {
class BackgroundSyncRegistrationProto;
class BackgroundSyncRegistrationProtoDefaultTypeInternal;
extern BackgroundSyncRegistrationProtoDefaultTypeInternal _BackgroundSyncRegistrationProto_default_instance_;
class BackgroundSyncRegistrationsProto;
class BackgroundSyncRegistrationsProtoDefaultTypeInternal;
extern BackgroundSyncRegistrationsProtoDefaultTypeInternal _BackgroundSyncRegistrationsProto_default_instance_;
class PeriodicSyncOptions;
class PeriodicSyncOptionsDefaultTypeInternal;
extern PeriodicSyncOptionsDefaultTypeInternal _PeriodicSyncOptions_default_instance_;
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::BackgroundSyncRegistrationProto* Arena::CreateMaybeMessage<::content::BackgroundSyncRegistrationProto>(Arena*);
template<> ::content::BackgroundSyncRegistrationsProto* Arena::CreateMaybeMessage<::content::BackgroundSyncRegistrationsProto>(Arena*);
template<> ::content::PeriodicSyncOptions* Arena::CreateMaybeMessage<::content::PeriodicSyncOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {

enum SyncNetworkState : int {
  NETWORK_STATE_ANY = 0,
  NETWORK_STATE_AVOID_CELLULAR = 1,
  NETWORK_STATE_ONLINE = 2
};
bool SyncNetworkState_IsValid(int value);
constexpr SyncNetworkState SyncNetworkState_MIN = NETWORK_STATE_ANY;
constexpr SyncNetworkState SyncNetworkState_MAX = NETWORK_STATE_ONLINE;
constexpr int SyncNetworkState_ARRAYSIZE = SyncNetworkState_MAX + 1;

const std::string& SyncNetworkState_Name(SyncNetworkState value);
template<typename T>
inline const std::string& SyncNetworkState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncNetworkState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncNetworkState_Name.");
  return SyncNetworkState_Name(static_cast<SyncNetworkState>(enum_t_value));
}
bool SyncNetworkState_Parse(
    const std::string& name, SyncNetworkState* value);
// ===================================================================

class PeriodicSyncOptions :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.PeriodicSyncOptions) */ {
 public:
  PeriodicSyncOptions();
  virtual ~PeriodicSyncOptions();

  PeriodicSyncOptions(const PeriodicSyncOptions& from);
  PeriodicSyncOptions(PeriodicSyncOptions&& from) noexcept
    : PeriodicSyncOptions() {
    *this = ::std::move(from);
  }

  inline PeriodicSyncOptions& operator=(const PeriodicSyncOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeriodicSyncOptions& operator=(PeriodicSyncOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PeriodicSyncOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeriodicSyncOptions* internal_default_instance() {
    return reinterpret_cast<const PeriodicSyncOptions*>(
               &_PeriodicSyncOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PeriodicSyncOptions& a, PeriodicSyncOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(PeriodicSyncOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeriodicSyncOptions* New() const final {
    return CreateMaybeMessage<PeriodicSyncOptions>(nullptr);
  }

  PeriodicSyncOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeriodicSyncOptions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PeriodicSyncOptions& from);
  void MergeFrom(const PeriodicSyncOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeriodicSyncOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.PeriodicSyncOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinIntervalFieldNumber = 1,
  };
  // optional int64 min_interval = 1;
  bool has_min_interval() const;
  void clear_min_interval();
  ::PROTOBUF_NAMESPACE_ID::int64 min_interval() const;
  void set_min_interval(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:content.PeriodicSyncOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_interval_;
  friend struct ::TableStruct_background_5fsync_2eproto;
};
// -------------------------------------------------------------------

class BackgroundSyncRegistrationProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.BackgroundSyncRegistrationProto) */ {
 public:
  BackgroundSyncRegistrationProto();
  virtual ~BackgroundSyncRegistrationProto();

  BackgroundSyncRegistrationProto(const BackgroundSyncRegistrationProto& from);
  BackgroundSyncRegistrationProto(BackgroundSyncRegistrationProto&& from) noexcept
    : BackgroundSyncRegistrationProto() {
    *this = ::std::move(from);
  }

  inline BackgroundSyncRegistrationProto& operator=(const BackgroundSyncRegistrationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundSyncRegistrationProto& operator=(BackgroundSyncRegistrationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundSyncRegistrationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundSyncRegistrationProto* internal_default_instance() {
    return reinterpret_cast<const BackgroundSyncRegistrationProto*>(
               &_BackgroundSyncRegistrationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BackgroundSyncRegistrationProto& a, BackgroundSyncRegistrationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundSyncRegistrationProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundSyncRegistrationProto* New() const final {
    return CreateMaybeMessage<BackgroundSyncRegistrationProto>(nullptr);
  }

  BackgroundSyncRegistrationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundSyncRegistrationProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundSyncRegistrationProto& from);
  void MergeFrom(const BackgroundSyncRegistrationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundSyncRegistrationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.BackgroundSyncRegistrationProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 2,
    kPeriodicSyncOptionsFieldNumber = 9,
    kDelayUntilFieldNumber = 8,
    kNumAttemptsFieldNumber = 7,
    kMaxAttemptsFieldNumber = 10,
  };
  // required string tag = 2;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional .content.PeriodicSyncOptions periodic_sync_options = 9;
  bool has_periodic_sync_options() const;
  void clear_periodic_sync_options();
  const ::content::PeriodicSyncOptions& periodic_sync_options() const;
  ::content::PeriodicSyncOptions* release_periodic_sync_options();
  ::content::PeriodicSyncOptions* mutable_periodic_sync_options();
  void set_allocated_periodic_sync_options(::content::PeriodicSyncOptions* periodic_sync_options);

  // required int64 delay_until = 8;
  bool has_delay_until() const;
  void clear_delay_until();
  ::PROTOBUF_NAMESPACE_ID::int64 delay_until() const;
  void set_delay_until(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 num_attempts = 7;
  bool has_num_attempts() const;
  void clear_num_attempts();
  ::PROTOBUF_NAMESPACE_ID::int32 num_attempts() const;
  void set_num_attempts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_attempts = 10;
  bool has_max_attempts() const;
  void clear_max_attempts();
  ::PROTOBUF_NAMESPACE_ID::int32 max_attempts() const;
  void set_max_attempts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:content.BackgroundSyncRegistrationProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::content::PeriodicSyncOptions* periodic_sync_options_;
  ::PROTOBUF_NAMESPACE_ID::int64 delay_until_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_attempts_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_attempts_;
  friend struct ::TableStruct_background_5fsync_2eproto;
};
// -------------------------------------------------------------------

class BackgroundSyncRegistrationsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.BackgroundSyncRegistrationsProto) */ {
 public:
  BackgroundSyncRegistrationsProto();
  virtual ~BackgroundSyncRegistrationsProto();

  BackgroundSyncRegistrationsProto(const BackgroundSyncRegistrationsProto& from);
  BackgroundSyncRegistrationsProto(BackgroundSyncRegistrationsProto&& from) noexcept
    : BackgroundSyncRegistrationsProto() {
    *this = ::std::move(from);
  }

  inline BackgroundSyncRegistrationsProto& operator=(const BackgroundSyncRegistrationsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundSyncRegistrationsProto& operator=(BackgroundSyncRegistrationsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundSyncRegistrationsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundSyncRegistrationsProto* internal_default_instance() {
    return reinterpret_cast<const BackgroundSyncRegistrationsProto*>(
               &_BackgroundSyncRegistrationsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BackgroundSyncRegistrationsProto& a, BackgroundSyncRegistrationsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundSyncRegistrationsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundSyncRegistrationsProto* New() const final {
    return CreateMaybeMessage<BackgroundSyncRegistrationsProto>(nullptr);
  }

  BackgroundSyncRegistrationsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundSyncRegistrationsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundSyncRegistrationsProto& from);
  void MergeFrom(const BackgroundSyncRegistrationsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundSyncRegistrationsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.BackgroundSyncRegistrationsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegistrationFieldNumber = 1,
    kOriginFieldNumber = 3,
  };
  // repeated .content.BackgroundSyncRegistrationProto registration = 1;
  int registration_size() const;
  void clear_registration();
  ::content::BackgroundSyncRegistrationProto* mutable_registration(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::BackgroundSyncRegistrationProto >*
      mutable_registration();
  const ::content::BackgroundSyncRegistrationProto& registration(int index) const;
  ::content::BackgroundSyncRegistrationProto* add_registration();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::BackgroundSyncRegistrationProto >&
      registration() const;

  // required string origin = 3;
  bool has_origin() const;
  void clear_origin();
  const std::string& origin() const;
  void set_origin(const std::string& value);
  void set_origin(std::string&& value);
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  std::string* mutable_origin();
  std::string* release_origin();
  void set_allocated_origin(std::string* origin);

  // @@protoc_insertion_point(class_scope:content.BackgroundSyncRegistrationsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::BackgroundSyncRegistrationProto > registration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  friend struct ::TableStruct_background_5fsync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeriodicSyncOptions

// optional int64 min_interval = 1;
inline bool PeriodicSyncOptions::has_min_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeriodicSyncOptions::clear_min_interval() {
  min_interval_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PeriodicSyncOptions::min_interval() const {
  // @@protoc_insertion_point(field_get:content.PeriodicSyncOptions.min_interval)
  return min_interval_;
}
inline void PeriodicSyncOptions::set_min_interval(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  min_interval_ = value;
  // @@protoc_insertion_point(field_set:content.PeriodicSyncOptions.min_interval)
}

// -------------------------------------------------------------------

// BackgroundSyncRegistrationProto

// required string tag = 2;
inline bool BackgroundSyncRegistrationProto::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundSyncRegistrationProto::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundSyncRegistrationProto::tag() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationProto.tag)
  return tag_.GetNoArena();
}
inline void BackgroundSyncRegistrationProto::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.BackgroundSyncRegistrationProto.tag)
}
inline void BackgroundSyncRegistrationProto::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.BackgroundSyncRegistrationProto.tag)
}
inline void BackgroundSyncRegistrationProto::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.BackgroundSyncRegistrationProto.tag)
}
inline void BackgroundSyncRegistrationProto::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.BackgroundSyncRegistrationProto.tag)
}
inline std::string* BackgroundSyncRegistrationProto::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.BackgroundSyncRegistrationProto.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundSyncRegistrationProto::release_tag() {
  // @@protoc_insertion_point(field_release:content.BackgroundSyncRegistrationProto.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundSyncRegistrationProto::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:content.BackgroundSyncRegistrationProto.tag)
}

// required int32 num_attempts = 7;
inline bool BackgroundSyncRegistrationProto::has_num_attempts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackgroundSyncRegistrationProto::clear_num_attempts() {
  num_attempts_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BackgroundSyncRegistrationProto::num_attempts() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationProto.num_attempts)
  return num_attempts_;
}
inline void BackgroundSyncRegistrationProto::set_num_attempts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_attempts_ = value;
  // @@protoc_insertion_point(field_set:content.BackgroundSyncRegistrationProto.num_attempts)
}

// required int64 delay_until = 8;
inline bool BackgroundSyncRegistrationProto::has_delay_until() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackgroundSyncRegistrationProto::clear_delay_until() {
  delay_until_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BackgroundSyncRegistrationProto::delay_until() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationProto.delay_until)
  return delay_until_;
}
inline void BackgroundSyncRegistrationProto::set_delay_until(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  delay_until_ = value;
  // @@protoc_insertion_point(field_set:content.BackgroundSyncRegistrationProto.delay_until)
}

// optional .content.PeriodicSyncOptions periodic_sync_options = 9;
inline bool BackgroundSyncRegistrationProto::has_periodic_sync_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackgroundSyncRegistrationProto::clear_periodic_sync_options() {
  if (periodic_sync_options_ != nullptr) periodic_sync_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::content::PeriodicSyncOptions& BackgroundSyncRegistrationProto::periodic_sync_options() const {
  const ::content::PeriodicSyncOptions* p = periodic_sync_options_;
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationProto.periodic_sync_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::content::PeriodicSyncOptions*>(
      &::content::_PeriodicSyncOptions_default_instance_);
}
inline ::content::PeriodicSyncOptions* BackgroundSyncRegistrationProto::release_periodic_sync_options() {
  // @@protoc_insertion_point(field_release:content.BackgroundSyncRegistrationProto.periodic_sync_options)
  _has_bits_[0] &= ~0x00000002u;
  ::content::PeriodicSyncOptions* temp = periodic_sync_options_;
  periodic_sync_options_ = nullptr;
  return temp;
}
inline ::content::PeriodicSyncOptions* BackgroundSyncRegistrationProto::mutable_periodic_sync_options() {
  _has_bits_[0] |= 0x00000002u;
  if (periodic_sync_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::PeriodicSyncOptions>(GetArenaNoVirtual());
    periodic_sync_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:content.BackgroundSyncRegistrationProto.periodic_sync_options)
  return periodic_sync_options_;
}
inline void BackgroundSyncRegistrationProto::set_allocated_periodic_sync_options(::content::PeriodicSyncOptions* periodic_sync_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete periodic_sync_options_;
  }
  if (periodic_sync_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      periodic_sync_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, periodic_sync_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  periodic_sync_options_ = periodic_sync_options;
  // @@protoc_insertion_point(field_set_allocated:content.BackgroundSyncRegistrationProto.periodic_sync_options)
}

// optional int32 max_attempts = 10;
inline bool BackgroundSyncRegistrationProto::has_max_attempts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackgroundSyncRegistrationProto::clear_max_attempts() {
  max_attempts_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BackgroundSyncRegistrationProto::max_attempts() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationProto.max_attempts)
  return max_attempts_;
}
inline void BackgroundSyncRegistrationProto::set_max_attempts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_attempts_ = value;
  // @@protoc_insertion_point(field_set:content.BackgroundSyncRegistrationProto.max_attempts)
}

// -------------------------------------------------------------------

// BackgroundSyncRegistrationsProto

// repeated .content.BackgroundSyncRegistrationProto registration = 1;
inline int BackgroundSyncRegistrationsProto::registration_size() const {
  return registration_.size();
}
inline void BackgroundSyncRegistrationsProto::clear_registration() {
  registration_.Clear();
}
inline ::content::BackgroundSyncRegistrationProto* BackgroundSyncRegistrationsProto::mutable_registration(int index) {
  // @@protoc_insertion_point(field_mutable:content.BackgroundSyncRegistrationsProto.registration)
  return registration_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::BackgroundSyncRegistrationProto >*
BackgroundSyncRegistrationsProto::mutable_registration() {
  // @@protoc_insertion_point(field_mutable_list:content.BackgroundSyncRegistrationsProto.registration)
  return &registration_;
}
inline const ::content::BackgroundSyncRegistrationProto& BackgroundSyncRegistrationsProto::registration(int index) const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationsProto.registration)
  return registration_.Get(index);
}
inline ::content::BackgroundSyncRegistrationProto* BackgroundSyncRegistrationsProto::add_registration() {
  // @@protoc_insertion_point(field_add:content.BackgroundSyncRegistrationsProto.registration)
  return registration_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::BackgroundSyncRegistrationProto >&
BackgroundSyncRegistrationsProto::registration() const {
  // @@protoc_insertion_point(field_list:content.BackgroundSyncRegistrationsProto.registration)
  return registration_;
}

// required string origin = 3;
inline bool BackgroundSyncRegistrationsProto::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundSyncRegistrationsProto::clear_origin() {
  origin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundSyncRegistrationsProto::origin() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationsProto.origin)
  return origin_.GetNoArena();
}
inline void BackgroundSyncRegistrationsProto::set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.BackgroundSyncRegistrationsProto.origin)
}
inline void BackgroundSyncRegistrationsProto::set_origin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.BackgroundSyncRegistrationsProto.origin)
}
inline void BackgroundSyncRegistrationsProto::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.BackgroundSyncRegistrationsProto.origin)
}
inline void BackgroundSyncRegistrationsProto::set_origin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.BackgroundSyncRegistrationsProto.origin)
}
inline std::string* BackgroundSyncRegistrationsProto::mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.BackgroundSyncRegistrationsProto.origin)
  return origin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BackgroundSyncRegistrationsProto::release_origin() {
  // @@protoc_insertion_point(field_release:content.BackgroundSyncRegistrationsProto.origin)
  if (!has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return origin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BackgroundSyncRegistrationsProto::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:content.BackgroundSyncRegistrationsProto.origin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::SyncNetworkState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_background_5fsync_2eproto
