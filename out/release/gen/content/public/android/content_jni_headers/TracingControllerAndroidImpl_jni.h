// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/TracingControllerAndroidImpl

#ifndef org_chromium_content_browser_TracingControllerAndroidImpl_JNI
#define org_chromium_content_browser_TracingControllerAndroidImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_TracingControllerAndroidImpl[];
const char kClassPath_org_chromium_content_browser_TracingControllerAndroidImpl[] =
    "org/chromium/content/browser/TracingControllerAndroidImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_TracingControllerAndroidImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_TracingControllerAndroidImpl_clazz_defined
#define org_chromium_content_browser_TracingControllerAndroidImpl_clazz_defined
inline jclass org_chromium_content_browser_TracingControllerAndroidImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_TracingControllerAndroidImpl,
      &g_org_chromium_content_browser_TracingControllerAndroidImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_TracingControllerAndroidImpl_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MWlLnA_000246(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_TracingControllerAndroidImpl_Init(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MLYQdwUF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTracingControllerAndroid,
    jobject caller) {
  TracingControllerAndroid* native =
      reinterpret_cast<TracingControllerAndroid*>(nativeTracingControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MZYMIGWv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTracingControllerAndroid,
    jobject caller,
    jstring categories,
    jstring traceOptions) {
  TracingControllerAndroid* native =
      reinterpret_cast<TracingControllerAndroid*>(nativeTracingControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartTracing", false);
  return native->StartTracing(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, categories),
      base::android::JavaParamRef<jstring>(env, traceOptions));
}

JNI_GENERATOR_EXPORT void Java_J_N_M_00024HKWu8q(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTracingControllerAndroid,
    jobject caller,
    jstring filename,
    jboolean compressFile,
    jobject callback) {
  TracingControllerAndroid* native =
      reinterpret_cast<TracingControllerAndroid*>(nativeTracingControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "StopTracing");
  return native->StopTracing(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, filename), compressFile,
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MdRNuqnW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTracingControllerAndroid,
    jobject caller,
    jobject callback) {
  TracingControllerAndroid* native =
      reinterpret_cast<TracingControllerAndroid*>(nativeTracingControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetKnownCategoriesAsync", false);
  return native->GetKnownCategoriesAsync(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, callback));
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_TracingControllerAndroidImpl_GetDefaultCategories(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jstring Java_J_N_My9pNx9O(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_TracingControllerAndroidImpl_GetDefaultCategories(env,
      base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MkLMghix(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTracingControllerAndroid,
    jobject caller,
    jobject callback) {
  TracingControllerAndroid* native =
      reinterpret_cast<TracingControllerAndroid*>(nativeTracingControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTraceBufferUsageAsync", false);
  return native->GetTraceBufferUsageAsync(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, callback));
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_TracingControllerAndroidImpl_generateTracingFilePath(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_TracingControllerAndroidImpl_generateTracingFilePath(JNIEnv* env) {
  jclass clazz = org_chromium_content_browser_TracingControllerAndroidImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_TracingControllerAndroidImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "generateTracingFilePath",
          "()Ljava/lang/String;",
          &g_org_chromium_content_browser_TracingControllerAndroidImpl_generateTracingFilePath);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_TracingControllerAndroidImpl_onTracingStopped(nullptr);
static void Java_TracingControllerAndroidImpl_onTracingStopped(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& callback) {
  jclass clazz = org_chromium_content_browser_TracingControllerAndroidImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_TracingControllerAndroidImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onTracingStopped",
          "(Ljava/lang/Object;)V",
          &g_org_chromium_content_browser_TracingControllerAndroidImpl_onTracingStopped);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, callback.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_TracingControllerAndroidImpl_onKnownCategoriesReceived(nullptr);
static void Java_TracingControllerAndroidImpl_onKnownCategoriesReceived(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobjectArray>& categories,
    const base::android::JavaRef<jobject>& callback) {
  jclass clazz = org_chromium_content_browser_TracingControllerAndroidImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_TracingControllerAndroidImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onKnownCategoriesReceived",
          "([Ljava/lang/String;Ljava/lang/Object;)V",
          &g_org_chromium_content_browser_TracingControllerAndroidImpl_onKnownCategoriesReceived);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, categories.obj(), callback.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_TracingControllerAndroidImpl_onTraceBufferUsageReceived(nullptr);
static void Java_TracingControllerAndroidImpl_onTraceBufferUsageReceived(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jfloat percentFull,
    jlong approximateEventCount,
    const base::android::JavaRef<jobject>& callback) {
  jclass clazz = org_chromium_content_browser_TracingControllerAndroidImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_TracingControllerAndroidImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onTraceBufferUsageReceived",
          "(FJLjava/lang/Object;)V",
          &g_org_chromium_content_browser_TracingControllerAndroidImpl_onTraceBufferUsageReceived);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, percentFull, approximateEventCount, callback.obj());
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_TracingControllerAndroidImpl_JNI
