// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/webcontents/WebContentsImpl

#ifndef org_chromium_content_browser_webcontents_WebContentsImpl_JNI
#define org_chromium_content_browser_webcontents_WebContentsImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_webcontents_WebContentsImpl[];
const char kClassPath_org_chromium_content_browser_webcontents_WebContentsImpl[] =
    "org/chromium/content/browser/webcontents/WebContentsImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_webcontents_WebContentsImpl_clazz_defined
#define org_chromium_content_browser_webcontents_WebContentsImpl_clazz_defined
inline jclass org_chromium_content_browser_webcontents_WebContentsImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_webcontents_WebContentsImpl,
      &g_org_chromium_content_browser_webcontents_WebContentsImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static void JNI_WebContentsImpl_DestroyWebContents(JNIEnv* env, jlong webContentsAndroidPtr);

JNI_GENERATOR_EXPORT void Java_J_N_MxxzO9Pe(
    JNIEnv* env,
    jclass jcaller,
    jlong webContentsAndroidPtr) {
  return JNI_WebContentsImpl_DestroyWebContents(env, webContentsAndroidPtr);
}

static base::android::ScopedJavaLocalRef<jobject> JNI_WebContentsImpl_FromNativePtr(JNIEnv* env,
    jlong webContentsAndroidPtr);

JNI_GENERATOR_EXPORT jobject Java_J_N_M_00024eaBDjM(
    JNIEnv* env,
    jclass jcaller,
    jlong webContentsAndroidPtr) {
  return JNI_WebContentsImpl_FromNativePtr(env, webContentsAndroidPtr).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_M0iG1Oc2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearNativeReference");
  return native->ClearNativeReference(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MunY3e38(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTopLevelNativeWindow", NULL);
  return native->GetTopLevelNativeWindow(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MOKG_1Wbb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jobject windowAndroid) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTopLevelNativeWindow");
  return native->SetTopLevelNativeWindow(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, windowAndroid));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MjidYpBx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetMainFrame", NULL);
  return native->GetMainFrame(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MT2cFaRc(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFocusedFrame", NULL);
  return native->GetFocusedFrame(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_Mj9slq6o(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetRenderWidgetHostView", NULL);
  return native->GetRenderWidgetHostView(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MJSe_1z5C(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetInnerWebContents", NULL);
  return native->GetInnerWebContents(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_M7OgjMU8(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTitle", NULL);
  return native->GetTitle(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_M8927Uaf(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetVisibleURL", NULL);
  return native->GetVisibleURL(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_M4pZ82rG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetEncoding", NULL);
  return native->GetEncoding(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MtSTkEp2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsLoading", false);
  return native->IsLoading(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M93b11tE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsLoadingToDifferentDocument", false);
  return native->IsLoadingToDifferentDocument(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M_00024_0002425N5_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Stop");
  return native->Stop(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MhIiCaN7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Cut");
  return native->Cut(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MpfMxfut(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Copy");
  return native->Copy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MYRJ_1nNk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Paste");
  return native->Paste(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MdSkKRWg(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PasteAsPlainText");
  return native->PasteAsPlainText(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MevqfbP8(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jstring word) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Replace");
  return native->Replace(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, word));
}

JNI_GENERATOR_EXPORT void Java_J_N_MNvj1u1S(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectAll");
  return native->SelectAll(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MDK_1KK0z(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CollapseSelection");
  return native->CollapseSelection(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MHNkuuGQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnHide");
  return native->OnHide(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MtakfqIH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnShow");
  return native->OnShow(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MkBVGSRs(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jint importance) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetImportance");
  return native->SetImportance(env, base::android::JavaParamRef<jobject>(env, caller), importance);
}

JNI_GENERATOR_EXPORT void Java_J_N_MSOsA4Ii(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SuspendAllMediaPlayers");
  return native->SuspendAllMediaPlayers(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M4fkbrQM(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jboolean mute) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAudioMuted");
  return native->SetAudioMuted(env, base::android::JavaParamRef<jobject>(env, caller), mute);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MPePqASo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsShowingInterstitialPage", false);
  return native->IsShowingInterstitialPage(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MkIL2bW9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FocusLocationBarByDefault", false);
  return native->FocusLocationBarByDefault(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M6c69Eq5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ExitFullscreen");
  return native->ExitFullscreen(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MgbVQff0(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollFocusedEditableNodeIntoView");
  return native->ScrollFocusedEditableNodeIntoView(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MlfwWHGJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectWordAroundCaret");
  return native->SelectWordAroundCaret(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MjgOFo_1o(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jint startAdjust,
    jint endAdjust,
    jboolean showSelectionMenu) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AdjustSelectionByCharacterOffset");
  return native->AdjustSelectionByCharacterOffset(env, base::android::JavaParamRef<jobject>(env,
      caller), startAdjust, endAdjust, showSelectionMenu);
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MrqMRJsG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLastCommittedURL", NULL);
  return native->GetLastCommittedURL(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MZbfAARG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsIncognito", false);
  return native->IsIncognito(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MQnLkNkP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResumeLoadingCreatedWebContents");
  return native->ResumeLoadingCreatedWebContents(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M0uS2SDH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jstring script,
    jobject callback) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScript");
  return native->EvaluateJavaScript(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, script), base::android::JavaParamRef<jobject>(env,
      callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MPoHZQTR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jstring script,
    jobject callback) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScriptForTests");
  return native->EvaluateJavaScriptForTests(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, script), base::android::JavaParamRef<jobject>(env,
      callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MseJ7A4a(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jint level,
    jstring message) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddMessageToDevToolsConsole");
  return native->AddMessageToDevToolsConsole(env, base::android::JavaParamRef<jobject>(env, caller),
      level, base::android::JavaParamRef<jstring>(env, message));
}

JNI_GENERATOR_EXPORT void Java_J_N_MZFXk0el(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jstring message,
    jstring sourceOrigin,
    jstring targetOrigin,
    jobjectArray ports) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PostMessageToMainFrame");
  return native->PostMessageToMainFrame(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, message), base::android::JavaParamRef<jstring>(env,
      sourceOrigin), base::android::JavaParamRef<jstring>(env, targetOrigin),
      base::android::JavaParamRef<jobjectArray>(env, ports));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M6It8dra(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasAccessedInitialDocument", false);
  return native->HasAccessedInitialDocument(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_MGZCJ6jO(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetThemeColor", 0);
  return native->GetThemeColor(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jfloat Java_J_N_MoQgY_1pw(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLoadProgress", 0);
  return native->GetLoadProgress(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MHF1rPTW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jobject callback,
    jint x,
    jint y,
    jint width,
    jint height) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestSmartClipExtract");
  return native->RequestSmartClipExtract(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, callback), x, y, width, height);
}

JNI_GENERATOR_EXPORT void Java_J_N_M16eLpU9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jobject callback) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestAccessibilitySnapshot");
  return native->RequestAccessibilitySnapshot(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MTTB8znA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jobject nativeOverscrollRefreshHandler) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetOverscrollRefreshHandler");
  return native->SetOverscrollRefreshHandler(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, nativeOverscrollRefreshHandler));
}

JNI_GENERATOR_EXPORT void Java_J_N_MjBPqNgx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jboolean disabled) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSpatialNavigationDisabled");
  return native->SetSpatialNavigationDisabled(env, base::android::JavaParamRef<jobject>(env,
      caller), disabled);
}

JNI_GENERATOR_EXPORT jint Java_J_N_Mi3V1mlO(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jstring url,
    jboolean isFavicon,
    jint maxBitmapSize,
    jboolean bypassCache,
    jobject callback) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DownloadImage", 0);
  return native->DownloadImage(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, url), isFavicon, maxBitmapSize, bypassCache,
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_M12SiBFk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jboolean value) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetHasPersistentVideo");
  return native->SetHasPersistentVideo(env, base::android::JavaParamRef<jobject>(env, caller),
      value);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MZao1OQG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasActiveEffectivelyFullscreenVideo", false);
  return native->HasActiveEffectivelyFullscreenVideo(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MS0xMYL9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsPictureInPictureAllowedForFullscreenVideo", false);
  return native->IsPictureInPictureAllowedForFullscreenVideo(env,
      base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MN9JdEk5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFullscreenVideoSize", NULL);
  return native->GetFullscreenVideoSize(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_M7tTrJ_1X(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jint width,
    jint height) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSize");
  return native->SetSize(env, base::android::JavaParamRef<jobject>(env, caller), width, height);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MB0i5_1ri(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetWidth", 0);
  return native->GetWidth(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_MRVeP4Wk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetHeight", 0);
  return native->GetHeight(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MJJFrmZs(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOrCreateEventForwarder", NULL);
  return native->GetOrCreateEventForwarder(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MgyWdCWB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jobject viewDelegate) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetViewAndroidDelegate");
  return native->SetViewAndroidDelegate(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, viewDelegate));
}

JNI_GENERATOR_EXPORT void Java_J_N_MlztHl3v(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jint orientation) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendOrientationChangeEvent");
  return native->SendOrientationChangeEvent(env, base::android::JavaParamRef<jobject>(env, caller),
      orientation);
}

JNI_GENERATOR_EXPORT void Java_J_N_MqhGkzSt(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnScaleFactorChanged");
  return native->OnScaleFactorChanged(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M9QxNoTJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jboolean focused) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFocus");
  return native->SetFocus(env, base::android::JavaParamRef<jobject>(env, caller), focused);
}

JNI_GENERATOR_EXPORT void Java_J_N_MtjP03pj(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller,
    jint top,
    jint left,
    jint bottom,
    jint right) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetDisplayCutoutSafeArea");
  return native->SetDisplayCutoutSafeArea(env, base::android::JavaParamRef<jobject>(env, caller),
      top, left, bottom, right);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mzsx8Sk2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NotifyRendererPreferenceUpdate");
  return native->NotifyRendererPreferenceUpdate(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MgcGzQax(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NotifyBrowserControlsHeightChanged");
  return native->NotifyBrowserControlsHeightChanged(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M5A4vDoy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeWebContentsAndroid,
    jobject caller) {
  WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsBeingDestroyed", false);
  return native->IsBeingDestroyed(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_WebContentsImpl_create(JNIEnv* env, jlong
    nativeWebContentsAndroid,
    const base::android::JavaRef<jobject>& navigationController) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLorg/chromium/content_public/browser/NavigationController;)Lorg/chromium/content/browser/webcontents/WebContentsImpl;",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeWebContentsAndroid, navigationController.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_clearNativePtr(nullptr);
static void Java_WebContentsImpl_clearNativePtr(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "clearNativePtr",
          "()V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_getNativePointer(nullptr);
static jlong Java_WebContentsImpl_getNativePointer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativePointer",
          "()J",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_getNativePointer);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_onEvaluateJavaScriptResult(nullptr);
static void Java_WebContentsImpl_onEvaluateJavaScriptResult(JNIEnv* env, const
    base::android::JavaRef<jstring>& jsonResult,
    const base::android::JavaRef<jobject>& callback) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onEvaluateJavaScriptResult",
          "(Ljava/lang/String;Lorg/chromium/content_public/browser/JavaScriptCallback;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_onEvaluateJavaScriptResult);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, jsonResult.obj(), callback.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_onSmartClipDataExtracted(nullptr);
static void Java_WebContentsImpl_onSmartClipDataExtracted(JNIEnv* env, const
    base::android::JavaRef<jstring>& text,
    const base::android::JavaRef<jstring>& html,
    JniIntWrapper left,
    JniIntWrapper top,
    JniIntWrapper right,
    JniIntWrapper bottom,
    const base::android::JavaRef<jobject>& callback) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onSmartClipDataExtracted",
"(Ljava/lang/String;Ljava/lang/String;IIIILorg/chromium/content/browser/webcontents/WebContentsImpl$SmartClipCallback;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_onSmartClipDataExtracted);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, text.obj(), html.obj(), as_jint(left), as_jint(top),
              as_jint(right), as_jint(bottom), callback.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_onAccessibilitySnapshot(nullptr);
static void Java_WebContentsImpl_onAccessibilitySnapshot(JNIEnv* env, const
    base::android::JavaRef<jobject>& root,
    const base::android::JavaRef<jobject>& callback) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onAccessibilitySnapshot",
"(Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;Lorg/chromium/content_public/browser/AccessibilitySnapshotCallback;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_onAccessibilitySnapshot);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, root.obj(), callback.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_addAccessibilityNodeAsChild(nullptr);
static void Java_WebContentsImpl_addAccessibilityNodeAsChild(JNIEnv* env, const
    base::android::JavaRef<jobject>& parent,
    const base::android::JavaRef<jobject>& child) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addAccessibilityNodeAsChild",
"(Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_addAccessibilityNodeAsChild);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, parent.obj(), child.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_createAccessibilitySnapshotNode(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_WebContentsImpl_createAccessibilitySnapshotNode(JNIEnv* env, JniIntWrapper
    parentRelativeLeft,
    JniIntWrapper parentRelativeTop,
    JniIntWrapper width,
    JniIntWrapper height,
    jboolean isRootNode,
    const base::android::JavaRef<jstring>& text,
    JniIntWrapper color,
    JniIntWrapper bgcolor,
    jfloat size,
    jboolean bold,
    jboolean italic,
    jboolean underline,
    jboolean lineThrough,
    const base::android::JavaRef<jstring>& className) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createAccessibilitySnapshotNode",
"(IIIIZLjava/lang/String;IIFZZZZLjava/lang/String;)Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;",
&g_org_chromium_content_browser_webcontents_WebContentsImpl_createAccessibilitySnapshotNode);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(parentRelativeLeft), as_jint(parentRelativeTop),
              as_jint(width), as_jint(height), isRootNode, text.obj(), as_jint(color),
              as_jint(bgcolor), size, bold, italic, underline, lineThrough, className.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_setAccessibilitySnapshotSelection(nullptr);
static void Java_WebContentsImpl_setAccessibilitySnapshotSelection(JNIEnv* env, const
    base::android::JavaRef<jobject>& node,
    JniIntWrapper start,
    JniIntWrapper end) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setAccessibilitySnapshotSelection",
          "(Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;II)V",
&g_org_chromium_content_browser_webcontents_WebContentsImpl_setAccessibilitySnapshotSelection);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, node.obj(), as_jint(start), as_jint(end));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_onDownloadImageFinished(nullptr);
static void Java_WebContentsImpl_onDownloadImageFinished(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& callback,
    JniIntWrapper id,
    JniIntWrapper httpStatusCode,
    const base::android::JavaRef<jstring>& imageUrl,
    const base::android::JavaRef<jobject>& bitmaps,
    const base::android::JavaRef<jobject>& sizes) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onDownloadImageFinished",
"(Lorg/chromium/content_public/browser/ImageDownloadCallback;IILjava/lang/String;Ljava/util/List;Ljava/util/List;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_onDownloadImageFinished);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, callback.obj(), as_jint(id), as_jint(httpStatusCode),
              imageUrl.obj(), bitmaps.obj(), sizes.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_setMediaSession(nullptr);
static void Java_WebContentsImpl_setMediaSession(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& mediaSession) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setMediaSession",
          "(Lorg/chromium/content/browser/MediaSessionImpl;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_setMediaSession);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, mediaSession.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_createBitmapList(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_WebContentsImpl_createBitmapList(JNIEnv* env)
    {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createBitmapList",
          "()Ljava/util/List;",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_createBitmapList);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_addToBitmapList(nullptr);
static void Java_WebContentsImpl_addToBitmapList(JNIEnv* env, const base::android::JavaRef<jobject>&
    bitmaps,
    const base::android::JavaRef<jobject>& bitmap) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addToBitmapList",
          "(Ljava/util/List;Landroid/graphics/Bitmap;)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_addToBitmapList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, bitmaps.obj(), bitmap.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_createSizeList(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_WebContentsImpl_createSizeList(JNIEnv* env) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createSizeList",
          "()Ljava/util/List;",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_createSizeList);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_createSizeAndAddToList(nullptr);
static void Java_WebContentsImpl_createSizeAndAddToList(JNIEnv* env, const
    base::android::JavaRef<jobject>& sizes,
    JniIntWrapper width,
    JniIntWrapper height) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createSizeAndAddToList",
          "(Ljava/util/List;II)V",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_createSizeAndAddToList);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, sizes.obj(), as_jint(width), as_jint(height));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_webcontents_WebContentsImpl_createSize(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_WebContentsImpl_createSize(JNIEnv* env,
    JniIntWrapper width,
    JniIntWrapper height) {
  jclass clazz = org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_webcontents_WebContentsImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createSize",
          "(II)Landroid/graphics/Rect;",
          &g_org_chromium_content_browser_webcontents_WebContentsImpl_createSize);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(width), as_jint(height));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_webcontents_WebContentsImpl_JNI
