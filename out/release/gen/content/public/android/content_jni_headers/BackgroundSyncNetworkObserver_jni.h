// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/BackgroundSyncNetworkObserver

#ifndef org_chromium_content_browser_BackgroundSyncNetworkObserver_JNI
#define org_chromium_content_browser_BackgroundSyncNetworkObserver_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_BackgroundSyncNetworkObserver[];
const char kClassPath_org_chromium_content_browser_BackgroundSyncNetworkObserver[] =
    "org/chromium/content/browser/BackgroundSyncNetworkObserver";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_BackgroundSyncNetworkObserver_clazz(nullptr);
#ifndef org_chromium_content_browser_BackgroundSyncNetworkObserver_clazz_defined
#define org_chromium_content_browser_BackgroundSyncNetworkObserver_clazz_defined
inline jclass org_chromium_content_browser_BackgroundSyncNetworkObserver_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_BackgroundSyncNetworkObserver,
      &g_org_chromium_content_browser_BackgroundSyncNetworkObserver_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT void Java_J_N_MJIG3QvD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jint newConnectionType) {
  BackgroundSyncNetworkObserverAndroid::Observer* native =
      reinterpret_cast<BackgroundSyncNetworkObserverAndroid::Observer*>(nativePtr);
  CHECK_NATIVE_PTR(env, jcaller, native, "NotifyConnectionTypeChanged");
  return native->NotifyConnectionTypeChanged(env, base::android::JavaParamRef<jobject>(env, caller),
      newConnectionType);
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_BackgroundSyncNetworkObserver_createObserver(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_BackgroundSyncNetworkObserver_createObserver(JNIEnv* env, jlong nativePtr) {
  jclass clazz = org_chromium_content_browser_BackgroundSyncNetworkObserver_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_BackgroundSyncNetworkObserver_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createObserver",
          "(J)Lorg/chromium/content/browser/BackgroundSyncNetworkObserver;",
          &g_org_chromium_content_browser_BackgroundSyncNetworkObserver_createObserver);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePtr);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_BackgroundSyncNetworkObserver_removeObserver(nullptr);
static void Java_BackgroundSyncNetworkObserver_removeObserver(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativePtr) {
  jclass clazz = org_chromium_content_browser_BackgroundSyncNetworkObserver_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_BackgroundSyncNetworkObserver_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "removeObserver",
          "(J)V",
          &g_org_chromium_content_browser_BackgroundSyncNetworkObserver_removeObserver);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativePtr);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_BackgroundSyncNetworkObserver_JNI
