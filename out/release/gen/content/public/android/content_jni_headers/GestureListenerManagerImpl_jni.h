// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/GestureListenerManagerImpl

#ifndef org_chromium_content_browser_GestureListenerManagerImpl_JNI
#define org_chromium_content_browser_GestureListenerManagerImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_GestureListenerManagerImpl[];
const char kClassPath_org_chromium_content_browser_GestureListenerManagerImpl[] =
    "org/chromium/content/browser/GestureListenerManagerImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_GestureListenerManagerImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_GestureListenerManagerImpl_clazz_defined
#define org_chromium_content_browser_GestureListenerManagerImpl_clazz_defined
inline jclass org_chromium_content_browser_GestureListenerManagerImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_GestureListenerManagerImpl,
      &g_org_chromium_content_browser_GestureListenerManagerImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_GestureListenerManagerImpl_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong Java_J_N_MefCIE9S(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject webContents) {
  return JNI_GestureListenerManagerImpl_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_MMR0DKoy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeGestureListenerManager,
    jobject caller) {
  GestureListenerManager* native =
      reinterpret_cast<GestureListenerManager*>(nativeGestureListenerManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResetGestureDetection");
  return native->ResetGestureDetection(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MrZmTSS9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeGestureListenerManager,
    jobject caller,
    jboolean enabled) {
  GestureListenerManager* native =
      reinterpret_cast<GestureListenerManager*>(nativeGestureListenerManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetDoubleTapSupportEnabled");
  return native->SetDoubleTapSupportEnabled(env, base::android::JavaParamRef<jobject>(env, caller),
      enabled);
}

JNI_GENERATOR_EXPORT void Java_J_N_M6a5zchR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeGestureListenerManager,
    jobject caller,
    jboolean enabled) {
  GestureListenerManager* native =
      reinterpret_cast<GestureListenerManager*>(nativeGestureListenerManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetMultiTouchZoomSupportEnabled");
  return native->SetMultiTouchZoomSupportEnabled(env, base::android::JavaParamRef<jobject>(env,
      caller), enabled);
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_GestureListenerManagerImpl_updateOnTouchDown(nullptr);
static void Java_GestureListenerManagerImpl_updateOnTouchDown(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_GestureListenerManagerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_GestureListenerManagerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateOnTouchDown",
          "()V",
          &g_org_chromium_content_browser_GestureListenerManagerImpl_updateOnTouchDown);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_GestureListenerManagerImpl_onFlingEnd(nullptr);
static void Java_GestureListenerManagerImpl_onFlingEnd(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_GestureListenerManagerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_GestureListenerManagerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onFlingEnd",
          "()V",
          &g_org_chromium_content_browser_GestureListenerManagerImpl_onFlingEnd);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_GestureListenerManagerImpl_onEventAck(nullptr);
static void Java_GestureListenerManagerImpl_onEventAck(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper event,
    jboolean consumed) {
  jclass clazz = org_chromium_content_browser_GestureListenerManagerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_GestureListenerManagerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onEventAck",
          "(IZ)V",
          &g_org_chromium_content_browser_GestureListenerManagerImpl_onEventAck);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(event), consumed);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_GestureListenerManagerImpl_resetPopupsAndInput(nullptr);
static void Java_GestureListenerManagerImpl_resetPopupsAndInput(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean renderProcessGone) {
  jclass clazz = org_chromium_content_browser_GestureListenerManagerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_GestureListenerManagerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "resetPopupsAndInput",
          "(Z)V",
          &g_org_chromium_content_browser_GestureListenerManagerImpl_resetPopupsAndInput);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, renderProcessGone);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_GestureListenerManagerImpl_onNativeDestroyed(nullptr);
static void Java_GestureListenerManagerImpl_onNativeDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_GestureListenerManagerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_GestureListenerManagerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroyed",
          "()V",
          &g_org_chromium_content_browser_GestureListenerManagerImpl_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_GestureListenerManagerImpl_filterTapOrPressEvent(nullptr);
static jboolean Java_GestureListenerManagerImpl_filterTapOrPressEvent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper type,
    JniIntWrapper x,
    JniIntWrapper y) {
  jclass clazz = org_chromium_content_browser_GestureListenerManagerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_GestureListenerManagerImpl_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "filterTapOrPressEvent",
          "(III)Z",
          &g_org_chromium_content_browser_GestureListenerManagerImpl_filterTapOrPressEvent);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, as_jint(type), as_jint(x), as_jint(y));
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_GestureListenerManagerImpl_updateScrollInfo(nullptr);
static void Java_GestureListenerManagerImpl_updateScrollInfo(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jfloat scrollOffsetX,
    jfloat scrollOffsetY,
    jfloat pageScaleFactor,
    jfloat minPageScaleFactor,
    jfloat maxPageScaleFactor,
    jfloat contentWidth,
    jfloat contentHeight,
    jfloat viewportWidth,
    jfloat viewportHeight,
    jfloat topBarShownPix,
    jboolean topBarChanged) {
  jclass clazz = org_chromium_content_browser_GestureListenerManagerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_GestureListenerManagerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateScrollInfo",
          "(FFFFFFFFFFZ)V",
          &g_org_chromium_content_browser_GestureListenerManagerImpl_updateScrollInfo);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, scrollOffsetX, scrollOffsetY, pageScaleFactor,
              minPageScaleFactor, maxPageScaleFactor, contentWidth, contentHeight, viewportWidth,
              viewportHeight, topBarShownPix, topBarChanged);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_GestureListenerManagerImpl_JNI
