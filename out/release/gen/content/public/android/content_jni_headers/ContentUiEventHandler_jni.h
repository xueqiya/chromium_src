// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentUiEventHandler

#ifndef org_chromium_content_browser_ContentUiEventHandler_JNI
#define org_chromium_content_browser_ContentUiEventHandler_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_ContentUiEventHandler[];
const char kClassPath_org_chromium_content_browser_ContentUiEventHandler[] =
    "org/chromium/content/browser/ContentUiEventHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_ContentUiEventHandler_clazz(nullptr);
#ifndef org_chromium_content_browser_ContentUiEventHandler_clazz_defined
#define org_chromium_content_browser_ContentUiEventHandler_clazz_defined
inline jclass org_chromium_content_browser_ContentUiEventHandler_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_ContentUiEventHandler,
      &g_org_chromium_content_browser_ContentUiEventHandler_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_ContentUiEventHandler_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong Java_J_N_MXL6itCa(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject webContents) {
  return JNI_ContentUiEventHandler_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_MifdK0lh(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentUiEventHandler,
    jobject caller,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jfloat ticksX,
    jfloat ticksY) {
  ContentUiEventHandler* native =
      reinterpret_cast<ContentUiEventHandler*>(nativeContentUiEventHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendMouseWheelEvent");
  return native->SendMouseWheelEvent(env, base::android::JavaParamRef<jobject>(env, caller), timeMs,
      x, y, ticksX, ticksY);
}

JNI_GENERATOR_EXPORT void Java_J_N_MjyjK8Gd(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentUiEventHandler,
    jobject caller,
    jlong timeMs,
    jint action,
    jfloat x,
    jfloat y,
    jint pointerId,
    jfloat pressure,
    jfloat orientation,
    jfloat tilt,
    jint changedButton,
    jint buttonState,
    jint metaState,
    jint toolType) {
  ContentUiEventHandler* native =
      reinterpret_cast<ContentUiEventHandler*>(nativeContentUiEventHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendMouseEvent");
  return native->SendMouseEvent(env, base::android::JavaParamRef<jobject>(env, caller), timeMs,
      action, x, y, pointerId, pressure, orientation, tilt, changedButton, buttonState, metaState,
      toolType);
}

JNI_GENERATOR_EXPORT void Java_J_N_M_11sgTVt(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentUiEventHandler,
    jobject caller,
    jlong timeMs,
    jfloat deltaX,
    jfloat deltaY) {
  ContentUiEventHandler* native =
      reinterpret_cast<ContentUiEventHandler*>(nativeContentUiEventHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendScrollEvent");
  return native->SendScrollEvent(env, base::android::JavaParamRef<jobject>(env, caller), timeMs,
      deltaX, deltaY);
}

JNI_GENERATOR_EXPORT void Java_J_N_MW_00024k83qi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContentUiEventHandler,
    jobject caller,
    jlong timeMs) {
  ContentUiEventHandler* native =
      reinterpret_cast<ContentUiEventHandler*>(nativeContentUiEventHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelFling");
  return native->CancelFling(env, base::android::JavaParamRef<jobject>(env, caller), timeMs);
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_ContentUiEventHandler_onGenericMotionEvent(nullptr);
static jboolean Java_ContentUiEventHandler_onGenericMotionEvent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event) {
  jclass clazz = org_chromium_content_browser_ContentUiEventHandler_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ContentUiEventHandler_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onGenericMotionEvent",
          "(Landroid/view/MotionEvent;)Z",
          &g_org_chromium_content_browser_ContentUiEventHandler_onGenericMotionEvent);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, event.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_content_browser_ContentUiEventHandler_onKeyUp(nullptr);
static jboolean Java_ContentUiEventHandler_onKeyUp(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper keyCode,
    const base::android::JavaRef<jobject>& event) {
  jclass clazz = org_chromium_content_browser_ContentUiEventHandler_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ContentUiEventHandler_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onKeyUp",
          "(ILandroid/view/KeyEvent;)Z",
          &g_org_chromium_content_browser_ContentUiEventHandler_onKeyUp);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, as_jint(keyCode), event.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_ContentUiEventHandler_dispatchKeyEvent(nullptr);
static jboolean Java_ContentUiEventHandler_dispatchKeyEvent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& event) {
  jclass clazz = org_chromium_content_browser_ContentUiEventHandler_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ContentUiEventHandler_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "dispatchKeyEvent",
          "(Landroid/view/KeyEvent;)Z",
          &g_org_chromium_content_browser_ContentUiEventHandler_dispatchKeyEvent);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, event.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_ContentUiEventHandler_scrollBy(nullptr);
static void Java_ContentUiEventHandler_scrollBy(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jfloat dxPix,
    jfloat dyPix) {
  jclass clazz = org_chromium_content_browser_ContentUiEventHandler_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ContentUiEventHandler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "scrollBy",
          "(FF)V",
          &g_org_chromium_content_browser_ContentUiEventHandler_scrollBy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, dxPix, dyPix);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_ContentUiEventHandler_scrollTo(nullptr);
static void Java_ContentUiEventHandler_scrollTo(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jfloat xPix,
    jfloat yPix) {
  jclass clazz = org_chromium_content_browser_ContentUiEventHandler_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ContentUiEventHandler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "scrollTo",
          "(FF)V",
          &g_org_chromium_content_browser_ContentUiEventHandler_scrollTo);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, xPix, yPix);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_ContentUiEventHandler_JNI
