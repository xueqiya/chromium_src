// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/BrowserStartupControllerImpl

#ifndef org_chromium_content_browser_BrowserStartupControllerImpl_JNI
#define org_chromium_content_browser_BrowserStartupControllerImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_BrowserStartupControllerImpl[];
const char kClassPath_org_chromium_content_browser_BrowserStartupControllerImpl[] =
    "org/chromium/content/browser/BrowserStartupControllerImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_BrowserStartupControllerImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_BrowserStartupControllerImpl_clazz_defined
#define org_chromium_content_browser_BrowserStartupControllerImpl_clazz_defined
inline jclass org_chromium_content_browser_BrowserStartupControllerImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_BrowserStartupControllerImpl,
      &g_org_chromium_content_browser_BrowserStartupControllerImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static void JNI_BrowserStartupControllerImpl_SetCommandLineFlags(JNIEnv* env, jboolean
    singleProcess);

JNI_GENERATOR_EXPORT void Java_J_N_MwoPtAzD(
    JNIEnv* env,
    jclass jcaller,
    jboolean singleProcess) {
  return JNI_BrowserStartupControllerImpl_SetCommandLineFlags(env, singleProcess);
}

static jboolean JNI_BrowserStartupControllerImpl_IsOfficialBuild(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MT_00024iIjxT(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_BrowserStartupControllerImpl_IsOfficialBuild(env);
}

static void JNI_BrowserStartupControllerImpl_FlushStartupTasks(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_M9iLjy6T(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_BrowserStartupControllerImpl_FlushStartupTasks(env);
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_BrowserStartupControllerImpl_browserStartupComplete(nullptr);
static void Java_BrowserStartupControllerImpl_browserStartupComplete(JNIEnv* env, JniIntWrapper
    result) {
  jclass clazz = org_chromium_content_browser_BrowserStartupControllerImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_BrowserStartupControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "browserStartupComplete",
          "(I)V",
          &g_org_chromium_content_browser_BrowserStartupControllerImpl_browserStartupComplete);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(result));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_BrowserStartupControllerImpl_serviceManagerStartupComplete(nullptr);
static void Java_BrowserStartupControllerImpl_serviceManagerStartupComplete(JNIEnv* env) {
  jclass clazz = org_chromium_content_browser_BrowserStartupControllerImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_BrowserStartupControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "serviceManagerStartupComplete",
          "()V",
&g_org_chromium_content_browser_BrowserStartupControllerImpl_serviceManagerStartupComplete);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_BrowserStartupControllerImpl_shouldStartGpuProcessOnBrowserStartup(nullptr);
static jboolean Java_BrowserStartupControllerImpl_shouldStartGpuProcessOnBrowserStartup(JNIEnv* env)
    {
  jclass clazz = org_chromium_content_browser_BrowserStartupControllerImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_BrowserStartupControllerImpl_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "shouldStartGpuProcessOnBrowserStartup",
          "()Z",
&g_org_chromium_content_browser_BrowserStartupControllerImpl_shouldStartGpuProcessOnBrowserStartup);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_BrowserStartupControllerImpl_JNI
