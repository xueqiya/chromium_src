// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/sms/SmsReceiver

#ifndef org_chromium_content_browser_sms_SmsReceiver_JNI
#define org_chromium_content_browser_sms_SmsReceiver_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_content_browser_sms_SmsReceiver[];
const char kClassPath_org_chromium_content_browser_sms_SmsReceiver[] =
    "org/chromium/content/browser/sms/SmsReceiver";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_sms_SmsReceiver_clazz(nullptr);
#ifndef org_chromium_content_browser_sms_SmsReceiver_clazz_defined
#define org_chromium_content_browser_sms_SmsReceiver_clazz_defined
inline jclass org_chromium_content_browser_sms_SmsReceiver_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_content_browser_sms_SmsReceiver,
      &g_org_chromium_content_browser_sms_SmsReceiver_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT void Java_J_N_McAbc1cO(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSmsProviderAndroid,
    jstring sms) {
  SmsProviderAndroid* native = reinterpret_cast<SmsProviderAndroid*>(nativeSmsProviderAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnReceive");
  return native->OnReceive(env, base::android::JavaParamRef<jstring>(env, sms));
}

JNI_GENERATOR_EXPORT void Java_J_N_MW3td7Xy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSmsProviderAndroid) {
  SmsProviderAndroid* native = reinterpret_cast<SmsProviderAndroid*>(nativeSmsProviderAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnTimeout");
  return native->OnTimeout(env);
}


static std::atomic<jmethodID> g_org_chromium_content_browser_sms_SmsReceiver_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_SmsReceiver_create(JNIEnv* env, jlong
    smsProviderAndroid) {
  jclass clazz = org_chromium_content_browser_sms_SmsReceiver_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_sms_SmsReceiver_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/content/browser/sms/SmsReceiver;",
          &g_org_chromium_content_browser_sms_SmsReceiver_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, smsProviderAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_content_browser_sms_SmsReceiver_destroy(nullptr);
static void Java_SmsReceiver_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_sms_SmsReceiver_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_sms_SmsReceiver_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_content_browser_sms_SmsReceiver_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_content_browser_sms_SmsReceiver_listen(nullptr);
static void Java_SmsReceiver_listen(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_sms_SmsReceiver_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_sms_SmsReceiver_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "listen",
          "()V",
          &g_org_chromium_content_browser_sms_SmsReceiver_listen);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_sms_SmsReceiver_JNI
