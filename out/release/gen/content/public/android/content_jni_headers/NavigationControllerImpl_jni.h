// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/framehost/NavigationControllerImpl

#ifndef org_chromium_content_browser_framehost_NavigationControllerImpl_JNI
#define org_chromium_content_browser_framehost_NavigationControllerImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_framehost_NavigationControllerImpl[];
const char kClassPath_org_chromium_content_browser_framehost_NavigationControllerImpl[] =
    "org/chromium/content/browser/framehost/NavigationControllerImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_framehost_NavigationControllerImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_framehost_NavigationControllerImpl_clazz_defined
#define org_chromium_content_browser_framehost_NavigationControllerImpl_clazz_defined
inline jclass org_chromium_content_browser_framehost_NavigationControllerImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_framehost_NavigationControllerImpl,
      &g_org_chromium_content_browser_framehost_NavigationControllerImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT jboolean Java_J_N_MgAw5sIR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CanGoBack", false);
  return native->CanGoBack(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MCUxt83x(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CanGoForward", false);
  return native->CanGoForward(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MEOFE6aD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsInitialNavigation", false);
  return native->IsInitialNavigation(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MWJb9aa_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "LoadIfNecessary");
  return native->LoadIfNecessary(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MsUTH_1HQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NeedsReload", false);
  return native->NeedsReload(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MQgIP2q9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetNeedsReload");
  return native->SetNeedsReload(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M4jjW0jG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jint offset) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CanGoToOffset", false);
  return native->CanGoToOffset(env, base::android::JavaParamRef<jobject>(env, caller), offset);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mdhd0AR3(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GoBack");
  return native->GoBack(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MEEEhNfT(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GoForward");
  return native->GoForward(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_ML_1uBbdi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jint offset) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GoToOffset");
  return native->GoToOffset(env, base::android::JavaParamRef<jobject>(env, caller), offset);
}

JNI_GENERATOR_EXPORT void Java_J_N_MuxwAbEo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jint index) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GoToNavigationIndex");
  return native->GoToNavigationIndex(env, base::android::JavaParamRef<jobject>(env, caller), index);
}

JNI_GENERATOR_EXPORT void Java_J_N_MNF4lMMb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelPendingReload");
  return native->CancelPendingReload(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mp5SLq_1N(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ContinuePendingReload");
  return native->ContinuePendingReload(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M81h_00024w2r(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jboolean checkForRepost) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Reload");
  return native->Reload(env, base::android::JavaParamRef<jobject>(env, caller), checkForRepost);
}

JNI_GENERATOR_EXPORT void Java_J_N_My0bMgld(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jboolean checkForRepost) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ReloadBypassingCache");
  return native->ReloadBypassingCache(env, base::android::JavaParamRef<jobject>(env, caller),
      checkForRepost);
}

JNI_GENERATOR_EXPORT void Java_J_N_MAqmDh4t(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jstring url,
    jint loadUrlType,
    jint transitionType,
    jstring referrerUrl,
    jint referrerPolicy,
    jint uaOverrideOption,
    jstring extraHeaders,
    jobject postData,
    jstring baseUrlForDataUrl,
    jstring virtualUrlForDataUrl,
    jstring dataUrlAsString,
    jboolean canLoadLocalResources,
    jboolean isRendererInitiated,
    jboolean shouldReplaceCurrentEntry) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "LoadUrl");
  return native->LoadUrl(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, url), loadUrlType, transitionType,
      base::android::JavaParamRef<jstring>(env, referrerUrl), referrerPolicy, uaOverrideOption,
      base::android::JavaParamRef<jstring>(env, extraHeaders),
      base::android::JavaParamRef<jobject>(env, postData), base::android::JavaParamRef<jstring>(env,
      baseUrlForDataUrl), base::android::JavaParamRef<jstring>(env, virtualUrlForDataUrl),
      base::android::JavaParamRef<jstring>(env, dataUrlAsString), canLoadLocalResources,
      isRendererInitiated, shouldReplaceCurrentEntry);
}

JNI_GENERATOR_EXPORT void Java_J_N_MK2ttcH1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearHistory");
  return native->ClearHistory(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_MUZRDUOx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jobject history) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetNavigationHistory", 0);
  return native->GetNavigationHistory(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, history));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mx5VuK3_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jobject history,
    jboolean isForward,
    jint itemLimit) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetDirectedNavigationHistory");
  return native->GetDirectedNavigationHistory(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, history), isForward, itemLimit);
}

JNI_GENERATOR_EXPORT void Java_J_N_MpKIKzer(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearSslPreferences");
  return native->ClearSslPreferences(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MCIN9_00024qH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetUseDesktopUserAgent", false);
  return native->GetUseDesktopUserAgent(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MrilyCK6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jboolean override,
    jboolean reloadOnChange) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetUseDesktopUserAgent");
  return native->SetUseDesktopUserAgent(env, base::android::JavaParamRef<jobject>(env, caller),
      override, reloadOnChange);
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MLcS2_00024Fy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jint index) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetEntryAtIndex", NULL);
  return native->GetEntryAtIndex(env, base::android::JavaParamRef<jobject>(env, caller),
      index).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MHqMy8sY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetVisibleEntry", NULL);
  return native->GetVisibleEntry(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_Mgxh2WfC(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPendingEntry", NULL);
  return native->GetPendingEntry(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jint Java_J_N_Mil0WqAo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLastCommittedEntryIndex", 0);
  return native->GetLastCommittedEntryIndex(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MVbDeBRx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jint index) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveEntryAtIndex", false);
  return native->RemoveEntryAtIndex(env, base::android::JavaParamRef<jobject>(env, caller), index);
}

JNI_GENERATOR_EXPORT void Java_J_N_M2mQucXv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PruneForwardEntries");
  return native->PruneForwardEntries(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_McQE1GI8(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jint index,
    jstring key) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetEntryExtraData", NULL);
  return native->GetEntryExtraData(env, base::android::JavaParamRef<jobject>(env, caller), index,
      base::android::JavaParamRef<jstring>(env, key)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_Mw19wBW8(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jint index,
    jstring key,
    jstring value) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetEntryExtraData");
  return native->SetEntryExtraData(env, base::android::JavaParamRef<jobject>(env, caller), index,
      base::android::JavaParamRef<jstring>(env, key), base::android::JavaParamRef<jstring>(env,
      value));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MVjP87pN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationControllerAndroid,
    jobject caller,
    jint index) {
  NavigationControllerAndroid* native =
      reinterpret_cast<NavigationControllerAndroid*>(nativeNavigationControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsEntryMarkedToBeSkipped", false);
  return native->IsEntryMarkedToBeSkipped(env, base::android::JavaParamRef<jobject>(env, caller),
      index);
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_framehost_NavigationControllerImpl_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_NavigationControllerImpl_create(JNIEnv* env,
    jlong nativeNavigationControllerAndroid) {
  jclass clazz = org_chromium_content_browser_framehost_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_framehost_NavigationControllerImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/content/browser/framehost/NavigationControllerImpl;",
          &g_org_chromium_content_browser_framehost_NavigationControllerImpl_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeNavigationControllerAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_framehost_NavigationControllerImpl_destroy(nullptr);
static void Java_NavigationControllerImpl_destroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_framehost_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_framehost_NavigationControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_content_browser_framehost_NavigationControllerImpl_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_framehost_NavigationControllerImpl_addToNavigationHistory(nullptr);
static void Java_NavigationControllerImpl_addToNavigationHistory(JNIEnv* env, const
    base::android::JavaRef<jobject>& history,
    const base::android::JavaRef<jobject>& navigationEntry) {
  jclass clazz = org_chromium_content_browser_framehost_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_framehost_NavigationControllerImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addToNavigationHistory",
          "(Ljava/lang/Object;Ljava/lang/Object;)V",
&g_org_chromium_content_browser_framehost_NavigationControllerImpl_addToNavigationHistory);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, history.obj(), navigationEntry.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_framehost_NavigationControllerImpl_createNavigationEntry(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_NavigationControllerImpl_createNavigationEntry(JNIEnv* env, JniIntWrapper index,
    const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& virtualUrl,
    const base::android::JavaRef<jstring>& originalUrl,
    const base::android::JavaRef<jstring>& referrerUrl,
    const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jobject>& favicon,
    JniIntWrapper transition,
    jlong timestamp) {
  jclass clazz = org_chromium_content_browser_framehost_NavigationControllerImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_framehost_NavigationControllerImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createNavigationEntry",
"(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap;IJ)Lorg/chromium/content_public/browser/NavigationEntry;",
          &g_org_chromium_content_browser_framehost_NavigationControllerImpl_createNavigationEntry);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(index), url.obj(), virtualUrl.obj(),
              originalUrl.obj(), referrerUrl.obj(), title.obj(), favicon.obj(), as_jint(transition),
              timestamp);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_framehost_NavigationControllerImpl_JNI
