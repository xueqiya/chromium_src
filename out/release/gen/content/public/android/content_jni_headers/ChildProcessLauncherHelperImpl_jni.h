// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ChildProcessLauncherHelperImpl

#ifndef org_chromium_content_browser_ChildProcessLauncherHelperImpl_JNI
#define org_chromium_content_browser_ChildProcessLauncherHelperImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_ChildProcessLauncherHelperImpl[];
const char kClassPath_org_chromium_content_browser_ChildProcessLauncherHelperImpl[] =
    "org/chromium/content/browser/ChildProcessLauncherHelperImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz_defined
#define org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz_defined
inline jclass org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_ChildProcessLauncherHelperImpl,
      &g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {
namespace internal {

JNI_GENERATOR_EXPORT void Java_J_N_MXR_00024KaDS(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeChildProcessLauncherHelper,
    jint pid) {
  ChildProcessLauncherHelper* native =
      reinterpret_cast<ChildProcessLauncherHelper*>(nativeChildProcessLauncherHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnChildProcessStarted");
  return native->OnChildProcessStarted(env, pid);
}

static void JNI_ChildProcessLauncherHelperImpl_SetTerminationInfo(JNIEnv* env, jlong
    termiantionInfoPtr,
    jint bindingState,
    jboolean killedByUs,
    jboolean cleanExit,
    jint remainingStrong,
    jint remainingModerate,
    jint remainingWaived,
    jint reverseRank);

JNI_GENERATOR_EXPORT void Java_J_N_MJcoZ9pW(
    JNIEnv* env,
    jclass jcaller,
    jlong termiantionInfoPtr,
    jint bindingState,
    jboolean killedByUs,
    jboolean cleanExit,
    jint remainingStrong,
    jint remainingModerate,
    jint remainingWaived,
    jint reverseRank) {
  return JNI_ChildProcessLauncherHelperImpl_SetTerminationInfo(env, termiantionInfoPtr,
      bindingState, killedByUs, cleanExit, remainingStrong, remainingModerate, remainingWaived,
      reverseRank);
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_makeFdInfo(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_ChildProcessLauncherHelperImpl_makeFdInfo(JNIEnv* env, JniIntWrapper id,
    JniIntWrapper fd,
    jboolean autoClose,
    jlong offset,
    jlong size) {
  jclass clazz = org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "makeFdInfo",
          "(IIZJJ)Lorg/chromium/base/process_launcher/FileDescriptorInfo;",
          &g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_makeFdInfo);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(id), as_jint(fd), autoClose, offset, size);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_createAndStart(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_ChildProcessLauncherHelperImpl_createAndStart(JNIEnv* env, jlong nativePointer,
    const base::android::JavaRef<jobjectArray>& commandLine,
    const base::android::JavaRef<jobjectArray>& filesToBeMapped,
    jboolean canUseWarmUpConnection) {
  jclass clazz = org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createAndStart",
"(J[Ljava/lang/String;[Lorg/chromium/base/process_launcher/FileDescriptorInfo;Z)Lorg/chromium/content/browser/ChildProcessLauncherHelperImpl;",
          &g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_createAndStart);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePointer, commandLine.obj(), filesToBeMapped.obj(),
              canUseWarmUpConnection);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_getTerminationInfoAndStop(nullptr);
static void Java_ChildProcessLauncherHelperImpl_getTerminationInfoAndStop(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong terminationInfoPtr) {
  jclass clazz = org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getTerminationInfoAndStop",
          "(J)V",
          &g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_getTerminationInfoAndStop);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, terminationInfoPtr);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_setPriority(nullptr);
static void Java_ChildProcessLauncherHelperImpl_setPriority(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper pid,
    jboolean visible,
    jboolean hasMediaStream,
    jboolean hasForegroundServiceWorker,
    jlong frameDepth,
    jboolean intersectsViewport,
    jboolean boostForPendingViews,
    JniIntWrapper importance) {
  jclass clazz = org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setPriority",
          "(IZZZJZZI)V",
          &g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_setPriority);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(pid), visible, hasMediaStream,
              hasForegroundServiceWorker, frameDepth, intersectsViewport, boostForPendingViews,
              as_jint(importance));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_stop(nullptr);
static void Java_ChildProcessLauncherHelperImpl_stop(JNIEnv* env, JniIntWrapper pid) {
  jclass clazz = org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "stop",
          "(I)V",
          &g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_stop);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(pid));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_dumpProcessStack(nullptr);
static void Java_ChildProcessLauncherHelperImpl_dumpProcessStack(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper pid) {
  jclass clazz = org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ChildProcessLauncherHelperImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "dumpProcessStack",
          "(I)V",
          &g_org_chromium_content_browser_ChildProcessLauncherHelperImpl_dumpProcessStack);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(pid));
}

}  // namespace internal
}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_ChildProcessLauncherHelperImpl_JNI
