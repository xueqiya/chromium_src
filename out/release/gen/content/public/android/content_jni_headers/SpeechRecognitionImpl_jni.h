// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/SpeechRecognitionImpl

#ifndef org_chromium_content_browser_SpeechRecognitionImpl_JNI
#define org_chromium_content_browser_SpeechRecognitionImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_SpeechRecognitionImpl[];
const char kClassPath_org_chromium_content_browser_SpeechRecognitionImpl[] =
    "org/chromium/content/browser/SpeechRecognitionImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_SpeechRecognitionImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_SpeechRecognitionImpl_clazz_defined
#define org_chromium_content_browser_SpeechRecognitionImpl_clazz_defined
inline jclass org_chromium_content_browser_SpeechRecognitionImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_SpeechRecognitionImpl,
      &g_org_chromium_content_browser_SpeechRecognitionImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT void Java_J_N_MdhaXGcn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSpeechRecognizerImplAndroid,
    jobject caller) {
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAudioStart");
  return native->OnAudioStart(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2Nl8ID9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSpeechRecognizerImplAndroid,
    jobject caller) {
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSoundStart");
  return native->OnSoundStart(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MFB2QCbe(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSpeechRecognizerImplAndroid,
    jobject caller) {
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSoundEnd");
  return native->OnSoundEnd(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2TRi32V(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSpeechRecognizerImplAndroid,
    jobject caller) {
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAudioEnd");
  return native->OnAudioEnd(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MnkvkoGY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSpeechRecognizerImplAndroid,
    jobject caller,
    jobjectArray results,
    jfloatArray scores,
    jboolean provisional) {
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnRecognitionResults");
  return native->OnRecognitionResults(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobjectArray>(env, results),
      base::android::JavaParamRef<jfloatArray>(env, scores), provisional);
}

JNI_GENERATOR_EXPORT void Java_J_N_MUf_1fHKN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSpeechRecognizerImplAndroid,
    jobject caller,
    jint error) {
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnRecognitionError");
  return native->OnRecognitionError(env, base::android::JavaParamRef<jobject>(env, caller), error);
}

JNI_GENERATOR_EXPORT void Java_J_N_MmgQYR9M(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSpeechRecognizerImplAndroid,
    jobject caller) {
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnRecognitionEnd");
  return native->OnRecognitionEnd(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_SpeechRecognitionImpl_createSpeechRecognition(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_SpeechRecognitionImpl_createSpeechRecognition(JNIEnv* env, jlong
    nativeSpeechRecognizerImplAndroid) {
  jclass clazz = org_chromium_content_browser_SpeechRecognitionImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_SpeechRecognitionImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createSpeechRecognition",
          "(J)Lorg/chromium/content/browser/SpeechRecognitionImpl;",
          &g_org_chromium_content_browser_SpeechRecognitionImpl_createSpeechRecognition);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeSpeechRecognizerImplAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_SpeechRecognitionImpl_startRecognition(nullptr);
static void Java_SpeechRecognitionImpl_startRecognition(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& language,
    jboolean continuous,
    jboolean interimResults) {
  jclass clazz = org_chromium_content_browser_SpeechRecognitionImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_SpeechRecognitionImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "startRecognition",
          "(Ljava/lang/String;ZZ)V",
          &g_org_chromium_content_browser_SpeechRecognitionImpl_startRecognition);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, language.obj(), continuous, interimResults);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_SpeechRecognitionImpl_abortRecognition(nullptr);
static void Java_SpeechRecognitionImpl_abortRecognition(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_SpeechRecognitionImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_SpeechRecognitionImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "abortRecognition",
          "()V",
          &g_org_chromium_content_browser_SpeechRecognitionImpl_abortRecognition);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_SpeechRecognitionImpl_stopRecognition(nullptr);
static void Java_SpeechRecognitionImpl_stopRecognition(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_SpeechRecognitionImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_SpeechRecognitionImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "stopRecognition",
          "()V",
          &g_org_chromium_content_browser_SpeechRecognitionImpl_stopRecognition);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_SpeechRecognitionImpl_JNI
