// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/RenderWidgetHostViewImpl

#ifndef org_chromium_content_browser_RenderWidgetHostViewImpl_JNI
#define org_chromium_content_browser_RenderWidgetHostViewImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_RenderWidgetHostViewImpl[];
const char kClassPath_org_chromium_content_browser_RenderWidgetHostViewImpl[] =
    "org/chromium/content/browser/RenderWidgetHostViewImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_RenderWidgetHostViewImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_RenderWidgetHostViewImpl_clazz_defined
#define org_chromium_content_browser_RenderWidgetHostViewImpl_clazz_defined
inline jclass org_chromium_content_browser_RenderWidgetHostViewImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_RenderWidgetHostViewImpl,
      &g_org_chromium_content_browser_RenderWidgetHostViewImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT jboolean Java_J_N_MZn2HluM(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeRenderWidgetHostViewAndroid,
    jobject caller) {
  RenderWidgetHostViewAndroid* native =
      reinterpret_cast<RenderWidgetHostViewAndroid*>(nativeRenderWidgetHostViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsReady", false);
  return native->IsReady(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_MRWsmoin(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeRenderWidgetHostViewAndroid,
    jobject caller) {
  RenderWidgetHostViewAndroid* native =
      reinterpret_cast<RenderWidgetHostViewAndroid*>(nativeRenderWidgetHostViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetBackgroundColor", 0);
  return native->GetBackgroundColor(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MQWja_00024xA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeRenderWidgetHostViewAndroid,
    jobject caller) {
  RenderWidgetHostViewAndroid* native =
      reinterpret_cast<RenderWidgetHostViewAndroid*>(nativeRenderWidgetHostViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DismissTextHandles");
  return native->DismissTextHandles(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_McU85DFE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeRenderWidgetHostViewAndroid,
    jobject caller,
    jint x,
    jint y) {
  RenderWidgetHostViewAndroid* native =
      reinterpret_cast<RenderWidgetHostViewAndroid*>(nativeRenderWidgetHostViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowContextMenuAtTouchHandle");
  return native->ShowContextMenuAtTouchHandle(env, base::android::JavaParamRef<jobject>(env,
      caller), x, y);
}

JNI_GENERATOR_EXPORT void Java_J_N_Myd8R_1Wn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeRenderWidgetHostViewAndroid,
    jobject caller) {
  RenderWidgetHostViewAndroid* native =
      reinterpret_cast<RenderWidgetHostViewAndroid*>(nativeRenderWidgetHostViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnViewportInsetBottomChanged");
  return native->OnViewportInsetBottomChanged(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mjmv7RJS(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeRenderWidgetHostViewAndroid,
    jobject caller,
    jint width,
    jint height,
    jstring path,
    jobject callback) {
  RenderWidgetHostViewAndroid* native =
      reinterpret_cast<RenderWidgetHostViewAndroid*>(nativeRenderWidgetHostViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "WriteContentBitmapToDiskAsync");
  return native->WriteContentBitmapToDiskAsync(env, base::android::JavaParamRef<jobject>(env,
      caller), width, height, base::android::JavaParamRef<jstring>(env, path),
      base::android::JavaParamRef<jobject>(env, callback));
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_RenderWidgetHostViewImpl_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_RenderWidgetHostViewImpl_create(JNIEnv* env,
    jlong renderWidgetHostViewLong) {
  jclass clazz = org_chromium_content_browser_RenderWidgetHostViewImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_RenderWidgetHostViewImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/content/browser/RenderWidgetHostViewImpl;",
          &g_org_chromium_content_browser_RenderWidgetHostViewImpl_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, renderWidgetHostViewLong);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_RenderWidgetHostViewImpl_clearNativePtr(nullptr);
static void Java_RenderWidgetHostViewImpl_clearNativePtr(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_RenderWidgetHostViewImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_RenderWidgetHostViewImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "clearNativePtr",
          "()V",
          &g_org_chromium_content_browser_RenderWidgetHostViewImpl_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_RenderWidgetHostViewImpl_JNI
