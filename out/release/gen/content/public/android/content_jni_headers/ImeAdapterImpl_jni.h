// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/input/ImeAdapterImpl

#ifndef org_chromium_content_browser_input_ImeAdapterImpl_JNI
#define org_chromium_content_browser_input_ImeAdapterImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_input_ImeAdapterImpl[];
const char kClassPath_org_chromium_content_browser_input_ImeAdapterImpl[] =
    "org/chromium/content/browser/input/ImeAdapterImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_input_ImeAdapterImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_input_ImeAdapterImpl_clazz_defined
#define org_chromium_content_browser_input_ImeAdapterImpl_clazz_defined
inline jclass org_chromium_content_browser_input_ImeAdapterImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_input_ImeAdapterImpl,
      &g_org_chromium_content_browser_input_ImeAdapterImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static jlong JNI_ImeAdapterImpl_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong Java_J_N_MhbsQh1H(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject webContents) {
  return JNI_ImeAdapterImpl_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M1qwlrOP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller,
    jobject event,
    jint type,
    jint modifiers,
    jlong timestampMs,
    jint keyCode,
    jint scanCode,
    jboolean isSystemKey,
    jint unicodeChar) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendKeyEvent", false);
  return native->SendKeyEvent(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, event), type, modifiers, timestampMs, keyCode,
      scanCode, isSystemKey, unicodeChar);
}

static void JNI_ImeAdapterImpl_AppendUnderlineSpan(JNIEnv* env, jlong spanPtr,
    jint start,
    jint end);

JNI_GENERATOR_EXPORT void Java_J_N_MFfRzF_00024Z(
    JNIEnv* env,
    jclass jcaller,
    jlong spanPtr,
    jint start,
    jint end) {
  return JNI_ImeAdapterImpl_AppendUnderlineSpan(env, spanPtr, start, end);
}

static void JNI_ImeAdapterImpl_AppendBackgroundColorSpan(JNIEnv* env, jlong spanPtr,
    jint start,
    jint end,
    jint backgroundColor);

JNI_GENERATOR_EXPORT void Java_J_N_MqqhDONa(
    JNIEnv* env,
    jclass jcaller,
    jlong spanPtr,
    jint start,
    jint end,
    jint backgroundColor) {
  return JNI_ImeAdapterImpl_AppendBackgroundColorSpan(env, spanPtr, start, end, backgroundColor);
}

static void JNI_ImeAdapterImpl_AppendSuggestionSpan(JNIEnv* env, jlong spanPtr,
    jint start,
    jint end,
    jboolean isMisspelling,
    jboolean removeOnFinishComposing,
    jint underlineColor,
    jint suggestionHighlightColor,
    const base::android::JavaParamRef<jobjectArray>& suggestions);

JNI_GENERATOR_EXPORT void Java_J_N_M_00024b45Vvn(
    JNIEnv* env,
    jclass jcaller,
    jlong spanPtr,
    jint start,
    jint end,
    jboolean isMisspelling,
    jboolean removeOnFinishComposing,
    jint underlineColor,
    jint suggestionHighlightColor,
    jobjectArray suggestions) {
  return JNI_ImeAdapterImpl_AppendSuggestionSpan(env, spanPtr, start, end, isMisspelling,
      removeOnFinishComposing, underlineColor, suggestionHighlightColor,
      base::android::JavaParamRef<jobjectArray>(env, suggestions));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mlslst_1P(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller,
    jobject text,
    jstring textStr,
    jint newCursorPosition) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetComposingText");
  return native->SetComposingText(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, text), base::android::JavaParamRef<jstring>(env,
      textStr), newCursorPosition);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mb6t43di(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller,
    jobject text,
    jstring textStr,
    jint newCursorPosition) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CommitText");
  return native->CommitText(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, text), base::android::JavaParamRef<jstring>(env,
      textStr), newCursorPosition);
}

JNI_GENERATOR_EXPORT void Java_J_N_M_1V5g5ie(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "FinishComposingText");
  return native->FinishComposingText(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MmtjCblb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller,
    jint start,
    jint end) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetEditableSelectionOffsets");
  return native->SetEditableSelectionOffsets(env, base::android::JavaParamRef<jobject>(env, caller),
      start, end);
}

JNI_GENERATOR_EXPORT void Java_J_N_M8ty0WHb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller,
    jint start,
    jint end) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetComposingRegion");
  return native->SetComposingRegion(env, base::android::JavaParamRef<jobject>(env, caller), start,
      end);
}

JNI_GENERATOR_EXPORT void Java_J_N_M26GCjn5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller,
    jint before,
    jint after) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteSurroundingText");
  return native->DeleteSurroundingText(env, base::android::JavaParamRef<jobject>(env, caller),
      before, after);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mvb046o_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller,
    jint before,
    jint after) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteSurroundingTextInCodePoints");
  return native->DeleteSurroundingTextInCodePoints(env, base::android::JavaParamRef<jobject>(env,
      caller), before, after);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M7o5Xhhi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestTextInputStateUpdate", false);
  return native->RequestTextInputStateUpdate(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MdwW1P2L(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller,
    jboolean immediateRequest,
    jboolean monitorRequest) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestCursorUpdate");
  return native->RequestCursorUpdate(env, base::android::JavaParamRef<jobject>(env, caller),
      immediateRequest, monitorRequest);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mm_1z91JF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeImeAdapterAndroid,
    jobject caller,
    jint focusType) {
  ImeAdapterAndroid* native = reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AdvanceFocusInForm");
  return native->AdvanceFocusInForm(env, base::android::JavaParamRef<jobject>(env, caller),
      focusType);
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_input_ImeAdapterImpl_updateState(nullptr);
static void Java_ImeAdapterImpl_updateState(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    JniIntWrapper textInputType,
    JniIntWrapper textInputFlags,
    JniIntWrapper textInputMode,
    JniIntWrapper textInputAction,
    jboolean showIfNeeded,
    jboolean alwaysHide,
    const base::android::JavaRef<jstring>& text,
    JniIntWrapper selectionStart,
    JniIntWrapper selectionEnd,
    JniIntWrapper compositionStart,
    JniIntWrapper compositionEnd,
    jboolean replyToRequest) {
  jclass clazz = org_chromium_content_browser_input_ImeAdapterImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_input_ImeAdapterImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateState",
          "(IIIIZZLjava/lang/String;IIIIZ)V",
          &g_org_chromium_content_browser_input_ImeAdapterImpl_updateState);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(textInputType), as_jint(textInputFlags),
              as_jint(textInputMode), as_jint(textInputAction), showIfNeeded, alwaysHide,
              text.obj(), as_jint(selectionStart), as_jint(selectionEnd), as_jint(compositionStart),
              as_jint(compositionEnd), replyToRequest);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_input_ImeAdapterImpl_updateOnTouchDown(nullptr);
static void Java_ImeAdapterImpl_updateOnTouchDown(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_input_ImeAdapterImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_input_ImeAdapterImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateOnTouchDown",
          "()V",
          &g_org_chromium_content_browser_input_ImeAdapterImpl_updateOnTouchDown);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_input_ImeAdapterImpl_onNativeDestroyed(nullptr);
static void Java_ImeAdapterImpl_onNativeDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_input_ImeAdapterImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_input_ImeAdapterImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroyed",
          "()V",
          &g_org_chromium_content_browser_input_ImeAdapterImpl_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_input_ImeAdapterImpl_focusedNodeChanged(nullptr);
static void Java_ImeAdapterImpl_focusedNodeChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isEditable) {
  jclass clazz = org_chromium_content_browser_input_ImeAdapterImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_input_ImeAdapterImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "focusedNodeChanged",
          "(Z)V",
          &g_org_chromium_content_browser_input_ImeAdapterImpl_focusedNodeChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, isEditable);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_input_ImeAdapterImpl_updateFrameInfo(nullptr);
static void Java_ImeAdapterImpl_updateFrameInfo(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jfloat scaleFactor,
    jfloat contentOffsetYPix,
    jboolean hasInsertionMarker,
    jboolean isInsertionMarkerVisible,
    jfloat insertionMarkerHorizontal,
    jfloat insertionMarkerTop,
    jfloat insertionMarkerBottom) {
  jclass clazz = org_chromium_content_browser_input_ImeAdapterImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_input_ImeAdapterImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateFrameInfo",
          "(FFZZFFF)V",
          &g_org_chromium_content_browser_input_ImeAdapterImpl_updateFrameInfo);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, scaleFactor, contentOffsetYPix, hasInsertionMarker,
              isInsertionMarkerVisible, insertionMarkerHorizontal, insertionMarkerTop,
              insertionMarkerBottom);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_input_ImeAdapterImpl_onResizeScrollableViewport(nullptr);
static void Java_ImeAdapterImpl_onResizeScrollableViewport(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean contentsHeightReduced) {
  jclass clazz = org_chromium_content_browser_input_ImeAdapterImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_input_ImeAdapterImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onResizeScrollableViewport",
          "(Z)V",
          &g_org_chromium_content_browser_input_ImeAdapterImpl_onResizeScrollableViewport);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, contentsHeightReduced);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_input_ImeAdapterImpl_populateImeTextSpansFromJava(nullptr);
static void Java_ImeAdapterImpl_populateImeTextSpansFromJava(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& text,
    jlong imeTextSpans) {
  jclass clazz = org_chromium_content_browser_input_ImeAdapterImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_input_ImeAdapterImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "populateImeTextSpansFromJava",
          "(Ljava/lang/CharSequence;J)V",
          &g_org_chromium_content_browser_input_ImeAdapterImpl_populateImeTextSpansFromJava);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, text.obj(), imeTextSpans);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_input_ImeAdapterImpl_cancelComposition(nullptr);
static void Java_ImeAdapterImpl_cancelComposition(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_input_ImeAdapterImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_input_ImeAdapterImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "cancelComposition",
          "()V",
          &g_org_chromium_content_browser_input_ImeAdapterImpl_cancelComposition);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_input_ImeAdapterImpl_setCharacterBounds(nullptr);
static void Java_ImeAdapterImpl_setCharacterBounds(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jfloatArray>&
    characterBounds) {
  jclass clazz = org_chromium_content_browser_input_ImeAdapterImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_input_ImeAdapterImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setCharacterBounds",
          "([F)V",
          &g_org_chromium_content_browser_input_ImeAdapterImpl_setCharacterBounds);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, characterBounds.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_input_ImeAdapterImpl_onConnectedToRenderProcess(nullptr);
static void Java_ImeAdapterImpl_onConnectedToRenderProcess(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_input_ImeAdapterImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_input_ImeAdapterImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onConnectedToRenderProcess",
          "()V",
          &g_org_chromium_content_browser_input_ImeAdapterImpl_onConnectedToRenderProcess);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_input_ImeAdapterImpl_JNI
