// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content_public/browser/NavigationHandle

#ifndef org_chromium_content_public_browser_NavigationHandle_JNI
#define org_chromium_content_public_browser_NavigationHandle_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_1public_browser_NavigationHandle[];
const char kClassPath_org_chromium_content_1public_browser_NavigationHandle[] =
    "org/chromium/content_public/browser/NavigationHandle";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_1public_browser_NavigationHandle_clazz(nullptr);
#ifndef org_chromium_content_1public_browser_NavigationHandle_clazz_defined
#define org_chromium_content_1public_browser_NavigationHandle_clazz_defined
inline jclass org_chromium_content_1public_browser_NavigationHandle_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_1public_browser_NavigationHandle,
      &g_org_chromium_content_1public_browser_NavigationHandle_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT void Java_J_N_MACALLtV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationHandleProxy,
    jstring headerName,
    jstring headerValue) {
  NavigationHandleProxy* native =
      reinterpret_cast<NavigationHandleProxy*>(nativeNavigationHandleProxy);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetRequestHeader");
  return native->SetRequestHeader(env, base::android::JavaParamRef<jstring>(env, headerName),
      base::android::JavaParamRef<jstring>(env, headerValue));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mo7byNs_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNavigationHandleProxy,
    jstring headerName) {
  NavigationHandleProxy* native =
      reinterpret_cast<NavigationHandleProxy*>(nativeNavigationHandleProxy);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveRequestHeader");
  return native->RemoveRequestHeader(env, base::android::JavaParamRef<jstring>(env, headerName));
}


static std::atomic<jmethodID>
    g_org_chromium_content_1public_browser_NavigationHandle_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_NavigationHandle_Constructor(JNIEnv* env,
    jlong nativeNavigationHandleProxy,
    const base::android::JavaRef<jstring>& url,
    jboolean isInMainFrame,
    jboolean isSameDocument,
    jboolean isRendererInitiated) {
  jclass clazz = org_chromium_content_1public_browser_NavigationHandle_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_1public_browser_NavigationHandle_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(JLjava/lang/String;ZZZ)V",
          &g_org_chromium_content_1public_browser_NavigationHandle_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, nativeNavigationHandleProxy, url.obj(), isInMainFrame,
              isSameDocument, isRendererInitiated);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_1public_browser_NavigationHandle_didRedirect(nullptr);
static void Java_NavigationHandle_didRedirect(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jstring>& url) {
  jclass clazz = org_chromium_content_1public_browser_NavigationHandle_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_1public_browser_NavigationHandle_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "didRedirect",
          "(Ljava/lang/String;)V",
          &g_org_chromium_content_1public_browser_NavigationHandle_didRedirect);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_1public_browser_NavigationHandle_didFinish(nullptr);
static void Java_NavigationHandle_didFinish(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jstring>& url,
    jboolean isErrorPage,
    jboolean hasCommitted,
    jboolean isFragmentNavigation,
    jboolean isDownload,
    jboolean isValidSearchFormUrl,
    JniIntWrapper transition,
    JniIntWrapper errorCode,
    JniIntWrapper httpStatuscode) {
  jclass clazz = org_chromium_content_1public_browser_NavigationHandle_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_1public_browser_NavigationHandle_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "didFinish",
          "(Ljava/lang/String;ZZZZZIII)V",
          &g_org_chromium_content_1public_browser_NavigationHandle_didFinish);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, url.obj(), isErrorPage, hasCommitted, isFragmentNavigation,
              isDownload, isValidSearchFormUrl, as_jint(transition), as_jint(errorCode),
              as_jint(httpStatuscode));
}

static std::atomic<jmethodID>
    g_org_chromium_content_1public_browser_NavigationHandle_release(nullptr);
static void Java_NavigationHandle_release(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_1public_browser_NavigationHandle_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_1public_browser_NavigationHandle_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "release",
          "()V",
          &g_org_chromium_content_1public_browser_NavigationHandle_release);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_public_browser_NavigationHandle_JNI
