// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/TtsPlatformImpl

#ifndef org_chromium_content_browser_TtsPlatformImpl_JNI
#define org_chromium_content_browser_TtsPlatformImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_content_browser_TtsPlatformImpl[];
const char kClassPath_org_chromium_content_browser_TtsPlatformImpl[] =
    "org/chromium/content/browser/TtsPlatformImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_TtsPlatformImpl_clazz(nullptr);
#ifndef org_chromium_content_browser_TtsPlatformImpl_clazz_defined
#define org_chromium_content_browser_TtsPlatformImpl_clazz_defined
inline jclass org_chromium_content_browser_TtsPlatformImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_content_browser_TtsPlatformImpl,
      &g_org_chromium_content_browser_TtsPlatformImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT void Java_J_N_M0BAvNEw(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTtsPlatformImplAndroid,
    jobject caller) {
  TtsPlatformImplAndroid* native =
      reinterpret_cast<TtsPlatformImplAndroid*>(nativeTtsPlatformImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestTtsStop");
  return native->RequestTtsStop(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MpJkwIUo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTtsPlatformImplAndroid,
    jobject caller) {
  TtsPlatformImplAndroid* native =
      reinterpret_cast<TtsPlatformImplAndroid*>(nativeTtsPlatformImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "VoicesChanged");
  return native->VoicesChanged(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M47GdBO5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTtsPlatformImplAndroid,
    jobject caller,
    jint utteranceId) {
  TtsPlatformImplAndroid* native =
      reinterpret_cast<TtsPlatformImplAndroid*>(nativeTtsPlatformImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnEndEvent");
  return native->OnEndEvent(env, base::android::JavaParamRef<jobject>(env, caller), utteranceId);
}

JNI_GENERATOR_EXPORT void Java_J_N_M2_00024X0reE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTtsPlatformImplAndroid,
    jobject caller,
    jint utteranceId) {
  TtsPlatformImplAndroid* native =
      reinterpret_cast<TtsPlatformImplAndroid*>(nativeTtsPlatformImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnStartEvent");
  return native->OnStartEvent(env, base::android::JavaParamRef<jobject>(env, caller), utteranceId);
}

JNI_GENERATOR_EXPORT void Java_J_N_M1Kw17GB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTtsPlatformImplAndroid,
    jobject caller,
    jint utteranceId) {
  TtsPlatformImplAndroid* native =
      reinterpret_cast<TtsPlatformImplAndroid*>(nativeTtsPlatformImplAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnErrorEvent");
  return native->OnErrorEvent(env, base::android::JavaParamRef<jobject>(env, caller), utteranceId);
}


static std::atomic<jmethodID> g_org_chromium_content_browser_TtsPlatformImpl_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TtsPlatformImpl_create(JNIEnv* env, jlong
    nativeTtsPlatformImplAndroid) {
  jclass clazz = org_chromium_content_browser_TtsPlatformImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_TtsPlatformImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/content/browser/TtsPlatformImpl;",
          &g_org_chromium_content_browser_TtsPlatformImpl_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeTtsPlatformImplAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_content_browser_TtsPlatformImpl_destroy(nullptr);
static void Java_TtsPlatformImpl_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_TtsPlatformImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_TtsPlatformImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_content_browser_TtsPlatformImpl_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_content_browser_TtsPlatformImpl_isInitialized(nullptr);
static jboolean Java_TtsPlatformImpl_isInitialized(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_TtsPlatformImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_TtsPlatformImpl_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isInitialized",
          "()Z",
          &g_org_chromium_content_browser_TtsPlatformImpl_isInitialized);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_content_browser_TtsPlatformImpl_getVoiceCount(nullptr);
static jint Java_TtsPlatformImpl_getVoiceCount(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_content_browser_TtsPlatformImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_TtsPlatformImpl_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getVoiceCount",
          "()I",
          &g_org_chromium_content_browser_TtsPlatformImpl_getVoiceCount);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_content_browser_TtsPlatformImpl_getVoiceName(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_TtsPlatformImpl_getVoiceName(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, JniIntWrapper voiceIndex) {
  jclass clazz = org_chromium_content_browser_TtsPlatformImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_TtsPlatformImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getVoiceName",
          "(I)Ljava/lang/String;",
          &g_org_chromium_content_browser_TtsPlatformImpl_getVoiceName);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, as_jint(voiceIndex)));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_TtsPlatformImpl_getVoiceLanguage(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_TtsPlatformImpl_getVoiceLanguage(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, JniIntWrapper voiceIndex) {
  jclass clazz = org_chromium_content_browser_TtsPlatformImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_TtsPlatformImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getVoiceLanguage",
          "(I)Ljava/lang/String;",
          &g_org_chromium_content_browser_TtsPlatformImpl_getVoiceLanguage);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, as_jint(voiceIndex)));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_content_browser_TtsPlatformImpl_speak(nullptr);
static jboolean Java_TtsPlatformImpl_speak(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    JniIntWrapper utteranceId,
    const base::android::JavaRef<jstring>& text,
    const base::android::JavaRef<jstring>& lang,
    jfloat rate,
    jfloat pitch,
    jfloat volume) {
  jclass clazz = org_chromium_content_browser_TtsPlatformImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_TtsPlatformImpl_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "speak",
          "(ILjava/lang/String;Ljava/lang/String;FFF)Z",
          &g_org_chromium_content_browser_TtsPlatformImpl_speak);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, as_jint(utteranceId), text.obj(), lang.obj(), rate, pitch,
              volume);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_content_browser_TtsPlatformImpl_stop(nullptr);
static void Java_TtsPlatformImpl_stop(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_content_browser_TtsPlatformImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_TtsPlatformImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "stop",
          "()V",
          &g_org_chromium_content_browser_TtsPlatformImpl_stop);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_TtsPlatformImpl_JNI
