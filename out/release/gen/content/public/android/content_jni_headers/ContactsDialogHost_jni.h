// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContactsDialogHost

#ifndef org_chromium_content_browser_ContactsDialogHost_JNI
#define org_chromium_content_browser_ContactsDialogHost_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_ContactsDialogHost[];
const char kClassPath_org_chromium_content_browser_ContactsDialogHost[] =
    "org/chromium/content/browser/ContactsDialogHost";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_ContactsDialogHost_clazz(nullptr);
#ifndef org_chromium_content_browser_ContactsDialogHost_clazz_defined
#define org_chromium_content_browser_ContactsDialogHost_clazz_defined
inline jclass org_chromium_content_browser_ContactsDialogHost_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_ContactsDialogHost,
      &g_org_chromium_content_browser_ContactsDialogHost_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

JNI_GENERATOR_EXPORT void Java_J_N_MS9BZrW0(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContactsProviderAndroid,
    jobjectArray names,
    jobjectArray emails,
    jobjectArray tel,
    jobjectArray addresses,
    jobjectArray icons) {
  ContactsProviderAndroid* native =
      reinterpret_cast<ContactsProviderAndroid*>(nativeContactsProviderAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddContact");
  return native->AddContact(env, base::android::JavaParamRef<jobjectArray>(env, names),
      base::android::JavaParamRef<jobjectArray>(env, emails),
      base::android::JavaParamRef<jobjectArray>(env, tel),
      base::android::JavaParamRef<jobjectArray>(env, addresses),
      base::android::JavaParamRef<jobjectArray>(env, icons));
}

JNI_GENERATOR_EXPORT void Java_J_N_MwwTaBAE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContactsProviderAndroid,
    jint percentageShared,
    jint propertiesRequested) {
  ContactsProviderAndroid* native =
      reinterpret_cast<ContactsProviderAndroid*>(nativeContactsProviderAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "EndContactsList");
  return native->EndContactsList(env, percentageShared, propertiesRequested);
}

JNI_GENERATOR_EXPORT void Java_J_N_MOM50EIZ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContactsProviderAndroid) {
  ContactsProviderAndroid* native =
      reinterpret_cast<ContactsProviderAndroid*>(nativeContactsProviderAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "EndWithPermissionDenied");
  return native->EndWithPermissionDenied(env);
}


static std::atomic<jmethodID> g_org_chromium_content_browser_ContactsDialogHost_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ContactsDialogHost_create(JNIEnv* env, const
    base::android::JavaRef<jobject>& windowAndroid,
    jlong nativeContactsProviderAndroid) {
  jclass clazz = org_chromium_content_browser_ContactsDialogHost_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_ContactsDialogHost_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(Lorg/chromium/ui/base/WindowAndroid;J)Lorg/chromium/content/browser/ContactsDialogHost;",
          &g_org_chromium_content_browser_ContactsDialogHost_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, windowAndroid.obj(), nativeContactsProviderAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_content_browser_ContactsDialogHost_destroy(nullptr);
static void Java_ContactsDialogHost_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_content_browser_ContactsDialogHost_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ContactsDialogHost_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_content_browser_ContactsDialogHost_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_content_browser_ContactsDialogHost_showDialog(nullptr);
static void Java_ContactsDialogHost_showDialog(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jboolean multiple,
    jboolean includeNames,
    jboolean includeEmails,
    jboolean includeTel,
    jboolean includeAddresses,
    jboolean includeIcons,
    const base::android::JavaRef<jstring>& formattedOrigin) {
  jclass clazz = org_chromium_content_browser_ContactsDialogHost_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_ContactsDialogHost_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "showDialog",
          "(ZZZZZZLjava/lang/String;)V",
          &g_org_chromium_content_browser_ContactsDialogHost_showDialog);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, multiple, includeNames, includeEmails, includeTel,
              includeAddresses, includeIcons, formattedOrigin.obj());
}

}  // namespace content

// Step 4: Generated test functions (optional).


#endif  // org_chromium_content_browser_ContactsDialogHost_JNI
