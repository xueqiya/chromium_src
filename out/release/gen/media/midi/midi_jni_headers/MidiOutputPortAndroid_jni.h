// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/midi/MidiOutputPortAndroid

#ifndef org_chromium_midi_MidiOutputPortAndroid_JNI
#define org_chromium_midi_MidiOutputPortAndroid_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_midi_MidiOutputPortAndroid[];
const char kClassPath_org_chromium_midi_MidiOutputPortAndroid[] =
    "org/chromium/midi/MidiOutputPortAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_midi_MidiOutputPortAndroid_clazz(nullptr);
#ifndef org_chromium_midi_MidiOutputPortAndroid_clazz_defined
#define org_chromium_midi_MidiOutputPortAndroid_clazz_defined
inline jclass org_chromium_midi_MidiOutputPortAndroid_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_midi_MidiOutputPortAndroid,
      &g_org_chromium_midi_MidiOutputPortAndroid_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace midi {


static std::atomic<jmethodID> g_org_chromium_midi_MidiOutputPortAndroid_open(nullptr);
static jboolean Java_MidiOutputPortAndroid_open(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_midi_MidiOutputPortAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_midi_MidiOutputPortAndroid_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "open",
          "()Z",
          &g_org_chromium_midi_MidiOutputPortAndroid_open);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_midi_MidiOutputPortAndroid_send(nullptr);
static void Java_MidiOutputPortAndroid_send(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jbyteArray>& bs) {
  jclass clazz = org_chromium_midi_MidiOutputPortAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_midi_MidiOutputPortAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "send",
          "([B)V",
          &g_org_chromium_midi_MidiOutputPortAndroid_send);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, bs.obj());
}

static std::atomic<jmethodID> g_org_chromium_midi_MidiOutputPortAndroid_close(nullptr);
static void Java_MidiOutputPortAndroid_close(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_midi_MidiOutputPortAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_midi_MidiOutputPortAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "close",
          "()V",
          &g_org_chromium_midi_MidiOutputPortAndroid_close);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace midi

// Step 4: Generated test functions (optional).


#endif  // org_chromium_midi_MidiOutputPortAndroid_JNI
