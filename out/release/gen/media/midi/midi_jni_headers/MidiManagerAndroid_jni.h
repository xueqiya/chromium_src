// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/midi/MidiManagerAndroid

#ifndef org_chromium_midi_MidiManagerAndroid_JNI
#define org_chromium_midi_MidiManagerAndroid_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_midi_MidiManagerAndroid[];
const char kClassPath_org_chromium_midi_MidiManagerAndroid[] =
    "org/chromium/midi/MidiManagerAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_midi_MidiManagerAndroid_clazz(nullptr);
#ifndef org_chromium_midi_MidiManagerAndroid_clazz_defined
#define org_chromium_midi_MidiManagerAndroid_clazz_defined
inline jclass org_chromium_midi_MidiManagerAndroid_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_midi_MidiManagerAndroid,
      &g_org_chromium_midi_MidiManagerAndroid_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace midi {

JNI_GENERATOR_EXPORT void Java_J_N_M3znzcE9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMidiManagerAndroid,
    jobjectArray devices) {
  MidiManagerAndroid* native = reinterpret_cast<MidiManagerAndroid*>(nativeMidiManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnInitialized");
  return native->OnInitialized(env, base::android::JavaParamRef<jobjectArray>(env, devices));
}

JNI_GENERATOR_EXPORT void Java_J_N_MfmZ2_00024zu(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMidiManagerAndroid) {
  MidiManagerAndroid* native = reinterpret_cast<MidiManagerAndroid*>(nativeMidiManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnInitializationFailed");
  return native->OnInitializationFailed(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MEOWUhL5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMidiManagerAndroid,
    jobject device) {
  MidiManagerAndroid* native = reinterpret_cast<MidiManagerAndroid*>(nativeMidiManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAttached");
  return native->OnAttached(env, base::android::JavaParamRef<jobject>(env, device));
}

JNI_GENERATOR_EXPORT void Java_J_N_Md3XPFG5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMidiManagerAndroid,
    jobject device) {
  MidiManagerAndroid* native = reinterpret_cast<MidiManagerAndroid*>(nativeMidiManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDetached");
  return native->OnDetached(env, base::android::JavaParamRef<jobject>(env, device));
}


static std::atomic<jmethodID> g_org_chromium_midi_MidiManagerAndroid_hasSystemFeatureMidi(nullptr);
static jboolean Java_MidiManagerAndroid_hasSystemFeatureMidi(JNIEnv* env) {
  jclass clazz = org_chromium_midi_MidiManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_midi_MidiManagerAndroid_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "hasSystemFeatureMidi",
          "()Z",
          &g_org_chromium_midi_MidiManagerAndroid_hasSystemFeatureMidi);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_midi_MidiManagerAndroid_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_MidiManagerAndroid_create(JNIEnv* env, jlong
    nativeManagerPointer) {
  jclass clazz = org_chromium_midi_MidiManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_midi_MidiManagerAndroid_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/midi/MidiManagerAndroid;",
          &g_org_chromium_midi_MidiManagerAndroid_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeManagerPointer);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_midi_MidiManagerAndroid_initialize(nullptr);
static void Java_MidiManagerAndroid_initialize(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_midi_MidiManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_midi_MidiManagerAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "initialize",
          "()V",
          &g_org_chromium_midi_MidiManagerAndroid_initialize);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_midi_MidiManagerAndroid_stop(nullptr);
static void Java_MidiManagerAndroid_stop(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_midi_MidiManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_midi_MidiManagerAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "stop",
          "()V",
          &g_org_chromium_midi_MidiManagerAndroid_stop);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace midi

// Step 4: Generated test functions (optional).


#endif  // org_chromium_midi_MidiManagerAndroid_JNI
