// media/learning/mojo/public/mojom/learning_task_controller.mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "media/learning/mojo/public/mojom/learning_task_controller.mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-blink.h"
#include "media/learning/mojo/public/mojom/learning_types.mojom-blink.h"


#ifndef MEDIA_LEARNING_MOJO_PUBLIC_MOJOM_LEARNING_TASK_CONTROLLER_MOJOM_BLINK_JUMBO_H_
#define MEDIA_LEARNING_MOJO_PUBLIC_MOJOM_LEARNING_TASK_CONTROLLER_MOJOM_BLINK_JUMBO_H_
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#endif


namespace media {
namespace learning {
namespace mojom {
namespace blink {


void LearningTaskControllerInterceptorForTesting::BeginObservation(const ::base::UnguessableToken& id, WTF::Vector<::media::learning::mojom::blink::FeatureValuePtr> features, ::media::learning::mojom::blink::TargetValuePtr default_target) {
  GetForwardingInterface()->BeginObservation(std::move(id), std::move(features), std::move(default_target));
}
void LearningTaskControllerInterceptorForTesting::CompleteObservation(const ::base::UnguessableToken& id, ::media::learning::mojom::blink::ObservationCompletionPtr completion) {
  GetForwardingInterface()->CompleteObservation(std::move(id), std::move(completion));
}
void LearningTaskControllerInterceptorForTesting::CancelObservation(const ::base::UnguessableToken& id) {
  GetForwardingInterface()->CancelObservation(std::move(id));
}
void LearningTaskControllerInterceptorForTesting::UpdateDefaultTarget(const ::base::UnguessableToken& id, ::media::learning::mojom::blink::TargetValuePtr default_target) {
  GetForwardingInterface()->UpdateDefaultTarget(std::move(id), std::move(default_target));
}
void LearningTaskControllerInterceptorForTesting::PredictDistribution(WTF::Vector<::media::learning::mojom::blink::FeatureValuePtr> features, PredictDistributionCallback callback) {
  GetForwardingInterface()->PredictDistribution(std::move(features), std::move(callback));
}
LearningTaskControllerAsyncWaiter::LearningTaskControllerAsyncWaiter(
    LearningTaskController* proxy) : proxy_(proxy) {}

LearningTaskControllerAsyncWaiter::~LearningTaskControllerAsyncWaiter() = default;

void LearningTaskControllerAsyncWaiter::PredictDistribution(
    WTF::Vector<::media::learning::mojom::blink::FeatureValuePtr> features, ::media::learning::mojom::blink::TargetHistogramPtr* out_predicted) {
  base::RunLoop loop;
  proxy_->PredictDistribution(std::move(features),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::media::learning::mojom::blink::TargetHistogramPtr* out_predicted
,
             ::media::learning::mojom::blink::TargetHistogramPtr predicted) {*out_predicted = std::move(predicted);
            loop->Quit();
          },
          &loop,
          out_predicted));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace learning
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif