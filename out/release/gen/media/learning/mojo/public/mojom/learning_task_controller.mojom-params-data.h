// media/learning/mojo/public/mojom/learning_task_controller.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_LEARNING_MOJO_PUBLIC_MOJOM_LEARNING_TASK_CONTROLLER_MOJOM_PARAMS_DATA_H_
#define MEDIA_LEARNING_MOJO_PUBLIC_MOJOM_LEARNING_TASK_CONTROLLER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace media {
namespace learning {
namespace mojom {
namespace internal {
class  LearningTaskController_BeginObservation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LearningTaskController_BeginObservation_Params_Data));
      new (data()) LearningTaskController_BeginObservation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LearningTaskController_BeginObservation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LearningTaskController_BeginObservation_Params_Data>(index_);
    }
    LearningTaskController_BeginObservation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::media::learning::mojom::internal::FeatureValue_Data>>> features;
  mojo::internal::Pointer<::media::learning::mojom::internal::TargetValue_Data> default_target;

 private:
  LearningTaskController_BeginObservation_Params_Data();
  ~LearningTaskController_BeginObservation_Params_Data() = delete;
};
static_assert(sizeof(LearningTaskController_BeginObservation_Params_Data) == 32,
              "Bad sizeof(LearningTaskController_BeginObservation_Params_Data)");
class  LearningTaskController_CompleteObservation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LearningTaskController_CompleteObservation_Params_Data));
      new (data()) LearningTaskController_CompleteObservation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LearningTaskController_CompleteObservation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LearningTaskController_CompleteObservation_Params_Data>(index_);
    }
    LearningTaskController_CompleteObservation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;
  mojo::internal::Pointer<::media::learning::mojom::internal::ObservationCompletion_Data> completion;

 private:
  LearningTaskController_CompleteObservation_Params_Data();
  ~LearningTaskController_CompleteObservation_Params_Data() = delete;
};
static_assert(sizeof(LearningTaskController_CompleteObservation_Params_Data) == 24,
              "Bad sizeof(LearningTaskController_CompleteObservation_Params_Data)");
class  LearningTaskController_CancelObservation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LearningTaskController_CancelObservation_Params_Data));
      new (data()) LearningTaskController_CancelObservation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LearningTaskController_CancelObservation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LearningTaskController_CancelObservation_Params_Data>(index_);
    }
    LearningTaskController_CancelObservation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;

 private:
  LearningTaskController_CancelObservation_Params_Data();
  ~LearningTaskController_CancelObservation_Params_Data() = delete;
};
static_assert(sizeof(LearningTaskController_CancelObservation_Params_Data) == 16,
              "Bad sizeof(LearningTaskController_CancelObservation_Params_Data)");
class  LearningTaskController_UpdateDefaultTarget_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LearningTaskController_UpdateDefaultTarget_Params_Data));
      new (data()) LearningTaskController_UpdateDefaultTarget_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LearningTaskController_UpdateDefaultTarget_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LearningTaskController_UpdateDefaultTarget_Params_Data>(index_);
    }
    LearningTaskController_UpdateDefaultTarget_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> id;
  mojo::internal::Pointer<::media::learning::mojom::internal::TargetValue_Data> default_target;

 private:
  LearningTaskController_UpdateDefaultTarget_Params_Data();
  ~LearningTaskController_UpdateDefaultTarget_Params_Data() = delete;
};
static_assert(sizeof(LearningTaskController_UpdateDefaultTarget_Params_Data) == 24,
              "Bad sizeof(LearningTaskController_UpdateDefaultTarget_Params_Data)");
class  LearningTaskController_PredictDistribution_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LearningTaskController_PredictDistribution_Params_Data));
      new (data()) LearningTaskController_PredictDistribution_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LearningTaskController_PredictDistribution_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LearningTaskController_PredictDistribution_Params_Data>(index_);
    }
    LearningTaskController_PredictDistribution_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::media::learning::mojom::internal::FeatureValue_Data>>> features;

 private:
  LearningTaskController_PredictDistribution_Params_Data();
  ~LearningTaskController_PredictDistribution_Params_Data() = delete;
};
static_assert(sizeof(LearningTaskController_PredictDistribution_Params_Data) == 16,
              "Bad sizeof(LearningTaskController_PredictDistribution_Params_Data)");
class  LearningTaskController_PredictDistribution_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LearningTaskController_PredictDistribution_ResponseParams_Data));
      new (data()) LearningTaskController_PredictDistribution_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LearningTaskController_PredictDistribution_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LearningTaskController_PredictDistribution_ResponseParams_Data>(index_);
    }
    LearningTaskController_PredictDistribution_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::learning::mojom::internal::TargetHistogram_Data> predicted;

 private:
  LearningTaskController_PredictDistribution_ResponseParams_Data();
  ~LearningTaskController_PredictDistribution_ResponseParams_Data() = delete;
};
static_assert(sizeof(LearningTaskController_PredictDistribution_ResponseParams_Data) == 16,
              "Bad sizeof(LearningTaskController_PredictDistribution_ResponseParams_Data)");

}  // namespace internal
class LearningTaskController_BeginObservation_ParamsDataView {
 public:
  LearningTaskController_BeginObservation_ParamsDataView() {}

  LearningTaskController_BeginObservation_ParamsDataView(
      internal::LearningTaskController_BeginObservation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  inline void GetFeaturesDataView(
      mojo::ArrayDataView<::media::learning::mojom::FeatureValueDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFeatures(UserType* output) {
    auto* pointer = data_->features.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media::learning::mojom::FeatureValueDataView>>(
        pointer, output, context_);
  }
  inline void GetDefaultTargetDataView(
      ::media::learning::mojom::TargetValueDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDefaultTarget(UserType* output) {
    auto* pointer = data_->default_target.Get();
    return mojo::internal::Deserialize<::media::learning::mojom::TargetValueDataView>(
        pointer, output, context_);
  }
 private:
  internal::LearningTaskController_BeginObservation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LearningTaskController_CompleteObservation_ParamsDataView {
 public:
  LearningTaskController_CompleteObservation_ParamsDataView() {}

  LearningTaskController_CompleteObservation_ParamsDataView(
      internal::LearningTaskController_CompleteObservation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  inline void GetCompletionDataView(
      ::media::learning::mojom::ObservationCompletionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCompletion(UserType* output) {
    auto* pointer = data_->completion.Get();
    return mojo::internal::Deserialize<::media::learning::mojom::ObservationCompletionDataView>(
        pointer, output, context_);
  }
 private:
  internal::LearningTaskController_CompleteObservation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LearningTaskController_CancelObservation_ParamsDataView {
 public:
  LearningTaskController_CancelObservation_ParamsDataView() {}

  LearningTaskController_CancelObservation_ParamsDataView(
      internal::LearningTaskController_CancelObservation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
 private:
  internal::LearningTaskController_CancelObservation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LearningTaskController_UpdateDefaultTarget_ParamsDataView {
 public:
  LearningTaskController_UpdateDefaultTarget_ParamsDataView() {}

  LearningTaskController_UpdateDefaultTarget_ParamsDataView(
      internal::LearningTaskController_UpdateDefaultTarget_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  inline void GetDefaultTargetDataView(
      ::media::learning::mojom::TargetValueDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDefaultTarget(UserType* output) {
    auto* pointer = data_->default_target.Get();
    return mojo::internal::Deserialize<::media::learning::mojom::TargetValueDataView>(
        pointer, output, context_);
  }
 private:
  internal::LearningTaskController_UpdateDefaultTarget_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LearningTaskController_PredictDistribution_ParamsDataView {
 public:
  LearningTaskController_PredictDistribution_ParamsDataView() {}

  LearningTaskController_PredictDistribution_ParamsDataView(
      internal::LearningTaskController_PredictDistribution_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFeaturesDataView(
      mojo::ArrayDataView<::media::learning::mojom::FeatureValueDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFeatures(UserType* output) {
    auto* pointer = data_->features.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media::learning::mojom::FeatureValueDataView>>(
        pointer, output, context_);
  }
 private:
  internal::LearningTaskController_PredictDistribution_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LearningTaskController_PredictDistribution_ResponseParamsDataView {
 public:
  LearningTaskController_PredictDistribution_ResponseParamsDataView() {}

  LearningTaskController_PredictDistribution_ResponseParamsDataView(
      internal::LearningTaskController_PredictDistribution_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPredictedDataView(
      ::media::learning::mojom::TargetHistogramDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPredicted(UserType* output) {
    auto* pointer = data_->predicted.Get();
    return mojo::internal::Deserialize<::media::learning::mojom::TargetHistogramDataView>(
        pointer, output, context_);
  }
 private:
  internal::LearningTaskController_PredictDistribution_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void LearningTaskController_BeginObservation_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void LearningTaskController_BeginObservation_ParamsDataView::GetFeaturesDataView(
    mojo::ArrayDataView<::media::learning::mojom::FeatureValueDataView>* output) {
  auto pointer = data_->features.Get();
  *output = mojo::ArrayDataView<::media::learning::mojom::FeatureValueDataView>(pointer, context_);
}
inline void LearningTaskController_BeginObservation_ParamsDataView::GetDefaultTargetDataView(
    ::media::learning::mojom::TargetValueDataView* output) {
  auto pointer = data_->default_target.Get();
  *output = ::media::learning::mojom::TargetValueDataView(pointer, context_);
}


inline void LearningTaskController_CompleteObservation_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void LearningTaskController_CompleteObservation_ParamsDataView::GetCompletionDataView(
    ::media::learning::mojom::ObservationCompletionDataView* output) {
  auto pointer = data_->completion.Get();
  *output = ::media::learning::mojom::ObservationCompletionDataView(pointer, context_);
}


inline void LearningTaskController_CancelObservation_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}


inline void LearningTaskController_UpdateDefaultTarget_ParamsDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void LearningTaskController_UpdateDefaultTarget_ParamsDataView::GetDefaultTargetDataView(
    ::media::learning::mojom::TargetValueDataView* output) {
  auto pointer = data_->default_target.Get();
  *output = ::media::learning::mojom::TargetValueDataView(pointer, context_);
}


inline void LearningTaskController_PredictDistribution_ParamsDataView::GetFeaturesDataView(
    mojo::ArrayDataView<::media::learning::mojom::FeatureValueDataView>* output) {
  auto pointer = data_->features.Get();
  *output = mojo::ArrayDataView<::media::learning::mojom::FeatureValueDataView>(pointer, context_);
}


inline void LearningTaskController_PredictDistribution_ResponseParamsDataView::GetPredictedDataView(
    ::media::learning::mojom::TargetHistogramDataView* output) {
  auto pointer = data_->predicted.Get();
  *output = ::media::learning::mojom::TargetHistogramDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace learning
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // MEDIA_LEARNING_MOJO_PUBLIC_MOJOM_LEARNING_TASK_CONTROLLER_MOJOM_PARAMS_DATA_H_