// media/learning/mojo/public/mojom/learning_types.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "media/learning/mojo/public/mojom/learning_types.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "media/learning/mojo/public/mojom/learning_types.mojom-params-data.h"
#include "media/learning/mojo/public/mojom/learning_types.mojom-shared-message-ids.h"

#include "media/learning/mojo/public/mojom/learning_types.mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MEDIA_LEARNING_MOJO_PUBLIC_MOJOM_LEARNING_TYPES_MOJOM_BLINK_JUMBO_H_
#define MEDIA_LEARNING_MOJO_PUBLIC_MOJOM_LEARNING_TYPES_MOJOM_BLINK_JUMBO_H_
#endif
namespace media {
namespace learning {
namespace mojom {
namespace blink {
FeatureValue::FeatureValue()
    : value() {}

FeatureValue::FeatureValue(
    int64_t value_in)
    : value(std::move(value_in)) {}

FeatureValue::~FeatureValue() = default;
size_t FeatureValue::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->value);
  return seed;
}

bool FeatureValue::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
TargetValue::TargetValue()
    : value() {}

TargetValue::TargetValue(
    int64_t value_in)
    : value(std::move(value_in)) {}

TargetValue::~TargetValue() = default;
size_t TargetValue::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->value);
  return seed;
}

bool TargetValue::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
LabelledExample::LabelledExample()
    : features(),
      target_value() {}

LabelledExample::LabelledExample(
    WTF::Vector<FeatureValuePtr> features_in,
    TargetValuePtr target_value_in)
    : features(std::move(features_in)),
      target_value(std::move(target_value_in)) {}

LabelledExample::~LabelledExample() = default;

bool LabelledExample::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ObservationCompletion::ObservationCompletion()
    : target_value(),
      weight(1ULL) {}

ObservationCompletion::ObservationCompletion(
    TargetValuePtr target_value_in,
    uint64_t weight_in)
    : target_value(std::move(target_value_in)),
      weight(std::move(weight_in)) {}

ObservationCompletion::~ObservationCompletion() = default;
size_t ObservationCompletion::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->target_value);
  seed = mojo::internal::WTFHash(seed, this->weight);
  return seed;
}

bool ObservationCompletion::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
TargetHistogram::TargetHistogram()
    : counts() {}

TargetHistogram::TargetHistogram(
    WTF::HashMap<TargetValuePtr, double> counts_in)
    : counts(std::move(counts_in)) {}

TargetHistogram::~TargetHistogram() = default;

bool TargetHistogram::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace blink
}  // namespace mojom
}  // namespace learning
}  // namespace media

namespace mojo {


// static
bool StructTraits<::media::learning::mojom::blink::FeatureValue::DataView, ::media::learning::mojom::blink::FeatureValuePtr>::Read(
    ::media::learning::mojom::blink::FeatureValue::DataView input,
    ::media::learning::mojom::blink::FeatureValuePtr* output) {
  bool success = true;
  ::media::learning::mojom::blink::FeatureValuePtr result(::media::learning::mojom::blink::FeatureValue::New());
  
      if (success)
        result->value = input.value();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::media::learning::mojom::blink::TargetValue::DataView, ::media::learning::mojom::blink::TargetValuePtr>::Read(
    ::media::learning::mojom::blink::TargetValue::DataView input,
    ::media::learning::mojom::blink::TargetValuePtr* output) {
  bool success = true;
  ::media::learning::mojom::blink::TargetValuePtr result(::media::learning::mojom::blink::TargetValue::New());
  
      if (success)
        result->value = input.value();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::media::learning::mojom::blink::LabelledExample::DataView, ::media::learning::mojom::blink::LabelledExamplePtr>::Read(
    ::media::learning::mojom::blink::LabelledExample::DataView input,
    ::media::learning::mojom::blink::LabelledExamplePtr* output) {
  bool success = true;
  ::media::learning::mojom::blink::LabelledExamplePtr result(::media::learning::mojom::blink::LabelledExample::New());
  
      if (success && !input.ReadFeatures(&result->features))
        success = false;
      if (success && !input.ReadTargetValue(&result->target_value))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::media::learning::mojom::blink::ObservationCompletion::DataView, ::media::learning::mojom::blink::ObservationCompletionPtr>::Read(
    ::media::learning::mojom::blink::ObservationCompletion::DataView input,
    ::media::learning::mojom::blink::ObservationCompletionPtr* output) {
  bool success = true;
  ::media::learning::mojom::blink::ObservationCompletionPtr result(::media::learning::mojom::blink::ObservationCompletion::New());
  
      if (success && !input.ReadTargetValue(&result->target_value))
        success = false;
      if (success)
        result->weight = input.weight();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::media::learning::mojom::blink::TargetHistogram::DataView, ::media::learning::mojom::blink::TargetHistogramPtr>::Read(
    ::media::learning::mojom::blink::TargetHistogram::DataView input,
    ::media::learning::mojom::blink::TargetHistogramPtr* output) {
  bool success = true;
  ::media::learning::mojom::blink::TargetHistogramPtr result(::media::learning::mojom::blink::TargetHistogram::New());
  
      if (success && !input.ReadCounts(&result->counts))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif