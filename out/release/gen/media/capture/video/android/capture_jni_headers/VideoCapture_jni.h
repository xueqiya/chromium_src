// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/VideoCapture

#ifndef org_chromium_media_VideoCapture_JNI
#define org_chromium_media_VideoCapture_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_media_VideoCapture[];
const char kClassPath_org_chromium_media_VideoCapture[] = "org/chromium/media/VideoCapture";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_media_VideoCapture_clazz(nullptr);
#ifndef org_chromium_media_VideoCapture_clazz_defined
#define org_chromium_media_VideoCapture_clazz_defined
inline jclass org_chromium_media_VideoCapture_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_media_VideoCapture,
      &g_org_chromium_media_VideoCapture_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace media {

JNI_GENERATOR_EXPORT void Java_J_N_Mq5gIPzl(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jobject caller,
    jbyteArray data,
    jint length,
    jint rotation) {
  VideoCaptureDeviceAndroid* native =
      reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnFrameAvailable");
  return native->OnFrameAvailable(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jbyteArray>(env, data), length, rotation);
}

JNI_GENERATOR_EXPORT void Java_J_N_MlTacwJQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jobject caller,
    jobject yBuffer,
    jint yStride,
    jobject uBuffer,
    jobject vBuffer,
    jint uvRowStride,
    jint uvPixelStride,
    jint width,
    jint height,
    jint rotation,
    jlong timestamp) {
  VideoCaptureDeviceAndroid* native =
      reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnI420FrameAvailable");
  return native->OnI420FrameAvailable(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, yBuffer), yStride,
      base::android::JavaParamRef<jobject>(env, uBuffer), base::android::JavaParamRef<jobject>(env,
      vBuffer), uvRowStride, uvPixelStride, width, height, rotation, timestamp);
}

JNI_GENERATOR_EXPORT void Java_J_N_MhmwjISE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jobject caller,
    jint androidVideoCaptureError,
    jstring message) {
  VideoCaptureDeviceAndroid* native =
      reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnError");
  return native->OnError(env, base::android::JavaParamRef<jobject>(env, caller),
      androidVideoCaptureError, base::android::JavaParamRef<jstring>(env, message));
}

JNI_GENERATOR_EXPORT void Java_J_N_M651cEC1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jobject caller,
    jint androidVideoCaptureFrameDropReason) {
  VideoCaptureDeviceAndroid* native =
      reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnFrameDropped");
  return native->OnFrameDropped(env, base::android::JavaParamRef<jobject>(env, caller),
      androidVideoCaptureFrameDropReason);
}

JNI_GENERATOR_EXPORT void Java_J_N_MumkJZ3e(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jobject caller,
    jlong callbackId,
    jobject result) {
  VideoCaptureDeviceAndroid* native =
      reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnGetPhotoCapabilitiesReply");
  return native->OnGetPhotoCapabilitiesReply(env, base::android::JavaParamRef<jobject>(env, caller),
      callbackId, base::android::JavaParamRef<jobject>(env, result));
}

JNI_GENERATOR_EXPORT void Java_J_N_MdZBZ_00024ST(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jobject caller,
    jlong callbackId,
    jbyteArray data) {
  VideoCaptureDeviceAndroid* native =
      reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPhotoTaken");
  return native->OnPhotoTaken(env, base::android::JavaParamRef<jobject>(env, caller), callbackId,
      base::android::JavaParamRef<jbyteArray>(env, data));
}

JNI_GENERATOR_EXPORT void Java_J_N_MPaf3s5k(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jobject caller) {
  VideoCaptureDeviceAndroid* native =
      reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnStarted");
  return native->OnStarted(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mqw5545M(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jobject caller) {
  VideoCaptureDeviceAndroid* native =
      reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DCheckCurrentlyOnIncomingTaskRunner");
  return native->DCheckCurrentlyOnIncomingTaskRunner(env, base::android::JavaParamRef<jobject>(env,
      caller));
}


static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_allocate(nullptr);
static jboolean Java_VideoCapture_allocate(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    JniIntWrapper width,
    JniIntWrapper height,
    JniIntWrapper frameRate,
    jboolean enableFaceDetection) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "allocate",
          "(IIIZ)Z",
          &g_org_chromium_media_VideoCapture_allocate);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, as_jint(width), as_jint(height), as_jint(frameRate),
              enableFaceDetection);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_startCaptureMaybeAsync(nullptr);
static jboolean Java_VideoCapture_startCaptureMaybeAsync(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "startCaptureMaybeAsync",
          "()Z",
          &g_org_chromium_media_VideoCapture_startCaptureMaybeAsync);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_VideoCapture_stopCaptureAndBlockUntilStopped(nullptr);
static jboolean Java_VideoCapture_stopCaptureAndBlockUntilStopped(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "stopCaptureAndBlockUntilStopped",
          "()Z",
          &g_org_chromium_media_VideoCapture_stopCaptureAndBlockUntilStopped);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_getPhotoCapabilitiesAsync(nullptr);
static void Java_VideoCapture_getPhotoCapabilitiesAsync(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong callbackId) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getPhotoCapabilitiesAsync",
          "(J)V",
          &g_org_chromium_media_VideoCapture_getPhotoCapabilitiesAsync);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, callbackId);
}

static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_setPhotoOptions(nullptr);
static void Java_VideoCapture_setPhotoOptions(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jdouble zoom,
    JniIntWrapper focusMode,
    jdouble focusDistance,
    JniIntWrapper exposureMode,
    jdouble width,
    jdouble height,
    const base::android::JavaRef<jdoubleArray>& pointsOfInterest2D,
    jboolean hasExposureCompensation,
    jdouble exposureCompensation,
    jdouble exposureTime,
    JniIntWrapper whiteBalanceMode,
    jdouble iso,
    jboolean hasRedEyeReduction,
    jboolean redEyeReduction,
    JniIntWrapper fillLightMode,
    jboolean hasTorch,
    jboolean torch,
    jdouble colorTemperature) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setPhotoOptions",
          "(DIDIDD[DZDDIDZZIZZD)V",
          &g_org_chromium_media_VideoCapture_setPhotoOptions);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, zoom, as_jint(focusMode), focusDistance,
              as_jint(exposureMode), width, height, pointsOfInterest2D.obj(),
              hasExposureCompensation, exposureCompensation, exposureTime,
              as_jint(whiteBalanceMode), iso, hasRedEyeReduction, redEyeReduction,
              as_jint(fillLightMode), hasTorch, torch, colorTemperature);
}

static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_takePhotoAsync(nullptr);
static void Java_VideoCapture_takePhotoAsync(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jlong callbackId) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "takePhotoAsync",
          "(J)V",
          &g_org_chromium_media_VideoCapture_takePhotoAsync);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, callbackId);
}

static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_deallocate(nullptr);
static void Java_VideoCapture_deallocate(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "deallocate",
          "()V",
          &g_org_chromium_media_VideoCapture_deallocate);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_queryWidth(nullptr);
static jint Java_VideoCapture_queryWidth(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "queryWidth",
          "()I",
          &g_org_chromium_media_VideoCapture_queryWidth);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_queryHeight(nullptr);
static jint Java_VideoCapture_queryHeight(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "queryHeight",
          "()I",
          &g_org_chromium_media_VideoCapture_queryHeight);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_queryFrameRate(nullptr);
static jint Java_VideoCapture_queryFrameRate(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "queryFrameRate",
          "()I",
          &g_org_chromium_media_VideoCapture_queryFrameRate);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_getColorspace(nullptr);
static jint Java_VideoCapture_getColorspace(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getColorspace",
          "()I",
          &g_org_chromium_media_VideoCapture_getColorspace);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_VideoCapture_setTestMode(nullptr);
static void Java_VideoCapture_setTestMode(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_VideoCapture_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_VideoCapture_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setTestMode",
          "()V",
          &g_org_chromium_media_VideoCapture_setTestMode);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace media

// Step 4: Generated test functions (optional).


#endif  // org_chromium_media_VideoCapture_JNI
