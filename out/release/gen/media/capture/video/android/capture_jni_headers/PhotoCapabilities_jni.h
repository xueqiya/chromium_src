// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/PhotoCapabilities

#ifndef org_chromium_media_PhotoCapabilities_JNI
#define org_chromium_media_PhotoCapabilities_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_media_PhotoCapabilities[];
const char kClassPath_org_chromium_media_PhotoCapabilities[] =
    "org/chromium/media/PhotoCapabilities";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_media_PhotoCapabilities_clazz(nullptr);
#ifndef org_chromium_media_PhotoCapabilities_clazz_defined
#define org_chromium_media_PhotoCapabilities_clazz_defined
inline jclass org_chromium_media_PhotoCapabilities_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_media_PhotoCapabilities,
      &g_org_chromium_media_PhotoCapabilities_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace media {


static std::atomic<jmethodID> g_org_chromium_media_PhotoCapabilities_getBool(nullptr);
static jboolean Java_PhotoCapabilities_getBool(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper capability) {
  jclass clazz = org_chromium_media_PhotoCapabilities_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_PhotoCapabilities_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getBool",
          "(I)Z",
          &g_org_chromium_media_PhotoCapabilities_getBool);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, as_jint(capability));
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_PhotoCapabilities_getDouble(nullptr);
static jdouble Java_PhotoCapabilities_getDouble(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper capability) {
  jclass clazz = org_chromium_media_PhotoCapabilities_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_PhotoCapabilities_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDouble",
          "(I)D",
          &g_org_chromium_media_PhotoCapabilities_getDouble);

  jdouble ret =
      env->CallDoubleMethod(obj.obj(),
          call_context.base.method_id, as_jint(capability));
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_PhotoCapabilities_getInt(nullptr);
static jint Java_PhotoCapabilities_getInt(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    JniIntWrapper capability) {
  jclass clazz = org_chromium_media_PhotoCapabilities_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_PhotoCapabilities_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getInt",
          "(I)I",
          &g_org_chromium_media_PhotoCapabilities_getInt);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id, as_jint(capability));
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_PhotoCapabilities_getFillLightModeArray(nullptr);
static base::android::ScopedJavaLocalRef<jintArray>
    Java_PhotoCapabilities_getFillLightModeArray(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_media_PhotoCapabilities_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_PhotoCapabilities_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getFillLightModeArray",
          "()[I",
          &g_org_chromium_media_PhotoCapabilities_getFillLightModeArray);

  jintArray ret =
      static_cast<jintArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_media_PhotoCapabilities_getMeteringMode(nullptr);
static jint Java_PhotoCapabilities_getMeteringMode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper type) {
  jclass clazz = org_chromium_media_PhotoCapabilities_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_PhotoCapabilities_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMeteringMode",
          "(I)I",
          &g_org_chromium_media_PhotoCapabilities_getMeteringMode);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id, as_jint(type));
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_PhotoCapabilities_getMeteringModeArray(nullptr);
static base::android::ScopedJavaLocalRef<jintArray>
    Java_PhotoCapabilities_getMeteringModeArray(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper type) {
  jclass clazz = org_chromium_media_PhotoCapabilities_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_PhotoCapabilities_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getMeteringModeArray",
          "(I)[I",
          &g_org_chromium_media_PhotoCapabilities_getMeteringModeArray);

  jintArray ret =
      static_cast<jintArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, as_jint(type)));
  return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

}  // namespace media

// Step 4: Generated test functions (optional).


#endif  // org_chromium_media_PhotoCapabilities_JNI
