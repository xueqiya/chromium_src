// media/capture/mojom/video_capture.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_MOJOM_BLINK_TEST_UTILS_H_
#define MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_MOJOM_BLINK_TEST_UTILS_H_

#include "media/capture/mojom/video_capture.mojom-blink.h"
#include "third_party/blink/public/platform/web_common.h"


namespace media {
namespace mojom {
namespace blink {


class BLINK_PLATFORM_EXPORT VideoCaptureObserverInterceptorForTesting : public VideoCaptureObserver {
  virtual VideoCaptureObserver* GetForwardingInterface() = 0;
  void OnStateChanged(VideoCaptureState state) override;
  void OnNewBuffer(int32_t buffer_id, ::media::mojom::blink::VideoBufferHandlePtr buffer_handle) override;
  void OnBufferReady(int32_t buffer_id, ::media::mojom::blink::VideoFrameInfoPtr info) override;
  void OnBufferDestroyed(int32_t buffer_id) override;
};
class BLINK_PLATFORM_EXPORT VideoCaptureObserverAsyncWaiter {
 public:
  explicit VideoCaptureObserverAsyncWaiter(VideoCaptureObserver* proxy);
  ~VideoCaptureObserverAsyncWaiter();

 private:
  VideoCaptureObserver* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(VideoCaptureObserverAsyncWaiter);
};


class BLINK_PLATFORM_EXPORT VideoCaptureHostInterceptorForTesting : public VideoCaptureHost {
  virtual VideoCaptureHost* GetForwardingInterface() = 0;
  void Start(const ::base::UnguessableToken& device_id, const ::base::UnguessableToken& session_id, const ::media::VideoCaptureParams& params, mojo::PendingRemote<VideoCaptureObserver> observer) override;
  void Stop(const ::base::UnguessableToken& device_id) override;
  void Pause(const ::base::UnguessableToken& device_id) override;
  void Resume(const ::base::UnguessableToken& device_id, const ::base::UnguessableToken& session_id, const ::media::VideoCaptureParams& params) override;
  void RequestRefreshFrame(const ::base::UnguessableToken& device_id) override;
  void ReleaseBuffer(const ::base::UnguessableToken& device_id, int32_t buffer_id, double consumer_resource_utilization) override;
  void GetDeviceSupportedFormats(const ::base::UnguessableToken& device_id, const ::base::UnguessableToken& session_id, GetDeviceSupportedFormatsCallback callback) override;
  void GetDeviceFormatsInUse(const ::base::UnguessableToken& device_id, const ::base::UnguessableToken& session_id, GetDeviceFormatsInUseCallback callback) override;
  void OnFrameDropped(const ::base::UnguessableToken& device_id, ::media::VideoCaptureFrameDropReason reason) override;
  void OnLog(const ::base::UnguessableToken& device_id, const WTF::String& message) override;
};
class BLINK_PLATFORM_EXPORT VideoCaptureHostAsyncWaiter {
 public:
  explicit VideoCaptureHostAsyncWaiter(VideoCaptureHost* proxy);
  ~VideoCaptureHostAsyncWaiter();
  void GetDeviceSupportedFormats(
      const ::base::UnguessableToken& device_id, const ::base::UnguessableToken& session_id, WTF::Vector<::media::VideoCaptureFormat>* out_formats_supported);
  void GetDeviceFormatsInUse(
      const ::base::UnguessableToken& device_id, const ::base::UnguessableToken& session_id, WTF::Vector<::media::VideoCaptureFormat>* out_formats_in_use);

 private:
  VideoCaptureHost* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(VideoCaptureHostAsyncWaiter);
};




}  // namespace blink
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_MOJOM_BLINK_TEST_UTILS_H_