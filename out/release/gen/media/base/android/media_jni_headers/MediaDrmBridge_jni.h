// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/MediaDrmBridge

#ifndef org_chromium_media_MediaDrmBridge_JNI
#define org_chromium_media_MediaDrmBridge_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_media_MediaDrmBridge[];
const char kClassPath_org_chromium_media_MediaDrmBridge[] = "org/chromium/media/MediaDrmBridge";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_media_MediaDrmBridge_00024KeyStatus[];
const char kClassPath_org_chromium_media_MediaDrmBridge_00024KeyStatus[] =
    "org/chromium/media/MediaDrmBridge$KeyStatus";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_media_MediaDrmBridge_clazz(nullptr);
#ifndef org_chromium_media_MediaDrmBridge_clazz_defined
#define org_chromium_media_MediaDrmBridge_clazz_defined
inline jclass org_chromium_media_MediaDrmBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_media_MediaDrmBridge,
      &g_org_chromium_media_MediaDrmBridge_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(nullptr);
#ifndef org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz_defined
#define org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz_defined
inline jclass org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_media_MediaDrmBridge_00024KeyStatus,
      &g_org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace media {

JNI_GENERATOR_EXPORT void Java_J_N_MV9yuwVC(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMediaDrmBridge,
    jobject caller,
    jobject mediaCrypto) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnMediaCryptoReady");
  return native->OnMediaCryptoReady(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, mediaCrypto));
}

JNI_GENERATOR_EXPORT void Java_J_N_MmhSkOYV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMediaDrmBridge,
    jobject caller,
    jstring defaultUrl,
    jbyteArray requestData) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnProvisionRequest");
  return native->OnProvisionRequest(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, defaultUrl),
      base::android::JavaParamRef<jbyteArray>(env, requestData));
}

JNI_GENERATOR_EXPORT void Java_J_N_MAaklmRW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMediaDrmBridge,
    jobject caller,
    jboolean success) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnProvisioningComplete");
  return native->OnProvisioningComplete(env, base::android::JavaParamRef<jobject>(env, caller),
      success);
}

JNI_GENERATOR_EXPORT void Java_J_N_MOzXytse(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMediaDrmBridge,
    jobject caller,
    jlong promiseId) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPromiseResolved");
  return native->OnPromiseResolved(env, base::android::JavaParamRef<jobject>(env, caller),
      promiseId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MtWWjNjU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMediaDrmBridge,
    jobject caller,
    jlong promiseId,
    jbyteArray emeSessionId) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPromiseResolvedWithSession");
  return native->OnPromiseResolvedWithSession(env, base::android::JavaParamRef<jobject>(env,
      caller), promiseId, base::android::JavaParamRef<jbyteArray>(env, emeSessionId));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2P7BQ98(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMediaDrmBridge,
    jobject caller,
    jlong promiseId,
    jstring errorMessage) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPromiseRejected");
  return native->OnPromiseRejected(env, base::android::JavaParamRef<jobject>(env, caller),
      promiseId, base::android::JavaParamRef<jstring>(env, errorMessage));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mf7HZHqV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMediaDrmBridge,
    jobject caller,
    jbyteArray emeSessionId,
    jint requestType,
    jbyteArray message) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSessionMessage");
  return native->OnSessionMessage(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jbyteArray>(env, emeSessionId), requestType,
      base::android::JavaParamRef<jbyteArray>(env, message));
}

JNI_GENERATOR_EXPORT void Java_J_N_MulYy5b7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMediaDrmBridge,
    jobject caller,
    jbyteArray emeSessionId) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSessionClosed");
  return native->OnSessionClosed(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jbyteArray>(env, emeSessionId));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mk8V79M2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMediaDrmBridge,
    jobject caller,
    jbyteArray emeSessionId,
    jobjectArray keysInfo,
    jboolean hasAdditionalUsableKey,
    jboolean isKeyRelease) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSessionKeysChange");
  return native->OnSessionKeysChange(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jbyteArray>(env, emeSessionId),
      base::android::JavaParamRef<jobjectArray>(env, keysInfo), hasAdditionalUsableKey,
      isKeyRelease);
}

JNI_GENERATOR_EXPORT void Java_J_N_MFLUFEZc(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeMediaDrmBridge,
    jobject caller,
    jbyteArray emeSessionId,
    jlong expirationTime) {
  MediaDrmBridge* native = reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSessionExpirationUpdate");
  return native->OnSessionExpirationUpdate(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jbyteArray>(env, emeSessionId), expirationTime);
}


static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_00024KeyStatus_getKeyId(nullptr);
static base::android::ScopedJavaLocalRef<jbyteArray> Java_KeyStatus_getKeyId(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getKeyId",
          "()[B",
          &g_org_chromium_media_MediaDrmBridge_00024KeyStatus_getKeyId);

  jbyteArray ret =
      static_cast<jbyteArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_media_MediaDrmBridge_00024KeyStatus_getStatusCode(nullptr);
static jint Java_KeyStatus_getStatusCode(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_00024KeyStatus_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getStatusCode",
          "()I",
          &g_org_chromium_media_MediaDrmBridge_00024KeyStatus_getStatusCode);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_isCryptoSchemeSupported(nullptr);
static jboolean Java_MediaDrmBridge_isCryptoSchemeSupported(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& schemeUUID,
    const base::android::JavaRef<jstring>& containerMimeType) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaDrmBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isCryptoSchemeSupported",
          "([BLjava/lang/String;)Z",
          &g_org_chromium_media_MediaDrmBridge_isCryptoSchemeSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, schemeUUID.obj(), containerMimeType.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_getFirstApiLevel(nullptr);
static jint Java_MediaDrmBridge_getFirstApiLevel(JNIEnv* env) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaDrmBridge_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getFirstApiLevel",
          "()I",
          &g_org_chromium_media_MediaDrmBridge_getFirstApiLevel);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_MediaDrmBridge_create(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& schemeUUID,
    const base::android::JavaRef<jstring>& securityOrigin,
    const base::android::JavaRef<jstring>& securityLevel,
    jboolean requiresMediaCrypto,
    jlong nativeMediaDrmBridge,
    jlong nativeMediaDrmStorageBridge) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaDrmBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "([BLjava/lang/String;Ljava/lang/String;ZJJ)Lorg/chromium/media/MediaDrmBridge;",
          &g_org_chromium_media_MediaDrmBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, schemeUUID.obj(), securityOrigin.obj(), securityLevel.obj(),
              requiresMediaCrypto, nativeMediaDrmBridge, nativeMediaDrmStorageBridge);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_setServerCertificate(nullptr);
static jboolean Java_MediaDrmBridge_setServerCertificate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jbyteArray>& certificate) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setServerCertificate",
          "([B)Z",
          &g_org_chromium_media_MediaDrmBridge_setServerCertificate);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, certificate.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_provision(nullptr);
static void Java_MediaDrmBridge_provision(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "provision",
          "()V",
          &g_org_chromium_media_MediaDrmBridge_provision);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_unprovision(nullptr);
static void Java_MediaDrmBridge_unprovision(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "unprovision",
          "()V",
          &g_org_chromium_media_MediaDrmBridge_unprovision);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_destroy(nullptr);
static void Java_MediaDrmBridge_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_media_MediaDrmBridge_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_createSessionFromNative(nullptr);
static void Java_MediaDrmBridge_createSessionFromNative(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jbyteArray>& initData,
    const base::android::JavaRef<jstring>& mime,
    JniIntWrapper keyType,
    const base::android::JavaRef<jobjectArray>& optionalParamsArray,
    jlong promiseId) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "createSessionFromNative",
          "([BLjava/lang/String;I[Ljava/lang/String;J)V",
          &g_org_chromium_media_MediaDrmBridge_createSessionFromNative);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, initData.obj(), mime.obj(), as_jint(keyType),
              optionalParamsArray.obj(), promiseId);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_closeSession(nullptr);
static void Java_MediaDrmBridge_closeSession(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jbyteArray>& emeSessionId,
    jlong promiseId) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "closeSession",
          "([BJ)V",
          &g_org_chromium_media_MediaDrmBridge_closeSession);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, emeSessionId.obj(), promiseId);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_updateSession(nullptr);
static void Java_MediaDrmBridge_updateSession(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jbyteArray>& emeSessionId,
    const base::android::JavaRef<jbyteArray>& response,
    jlong promiseId) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateSession",
          "([B[BJ)V",
          &g_org_chromium_media_MediaDrmBridge_updateSession);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, emeSessionId.obj(), response.obj(), promiseId);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_loadSession(nullptr);
static void Java_MediaDrmBridge_loadSession(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jbyteArray>& emeId,
    jlong promiseId) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "loadSession",
          "([BJ)V",
          &g_org_chromium_media_MediaDrmBridge_loadSession);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, emeId.obj(), promiseId);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_removeSession(nullptr);
static void Java_MediaDrmBridge_removeSession(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jbyteArray>& emeId,
    jlong promiseId) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "removeSession",
          "([BJ)V",
          &g_org_chromium_media_MediaDrmBridge_removeSession);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, emeId.obj(), promiseId);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_getSecurityLevel(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_MediaDrmBridge_getSecurityLevel(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSecurityLevel",
          "()Ljava/lang/String;",
          &g_org_chromium_media_MediaDrmBridge_getSecurityLevel);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaDrmBridge_processProvisionResponse(nullptr);
static void Java_MediaDrmBridge_processProvisionResponse(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isResponseReceived,
    const base::android::JavaRef<jbyteArray>& response) {
  jclass clazz = org_chromium_media_MediaDrmBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_MediaDrmBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "processProvisionResponse",
          "(Z[B)V",
          &g_org_chromium_media_MediaDrmBridge_processProvisionResponse);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, isResponseReceived, response.obj());
}

}  // namespace media

// Step 4: Generated test functions (optional).


#endif  // org_chromium_media_MediaDrmBridge_JNI
