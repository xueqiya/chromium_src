// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/MediaCodecUtil

#ifndef org_chromium_media_MediaCodecUtil_JNI
#define org_chromium_media_MediaCodecUtil_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_media_MediaCodecUtil[];
const char kClassPath_org_chromium_media_MediaCodecUtil[] = "org/chromium/media/MediaCodecUtil";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_media_MediaCodecUtil_clazz(nullptr);
#ifndef org_chromium_media_MediaCodecUtil_clazz_defined
#define org_chromium_media_MediaCodecUtil_clazz_defined
inline jclass org_chromium_media_MediaCodecUtil_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_media_MediaCodecUtil,
      &g_org_chromium_media_MediaCodecUtil_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace media {


static std::atomic<jmethodID> g_org_chromium_media_MediaCodecUtil_getDefaultCodecName(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_MediaCodecUtil_getDefaultCodecName(JNIEnv*
    env, const base::android::JavaRef<jstring>& mime,
    JniIntWrapper direction,
    jboolean requireSoftwareCodec) {
  jclass clazz = org_chromium_media_MediaCodecUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaCodecUtil_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getDefaultCodecName",
          "(Ljava/lang/String;IZ)Ljava/lang/String;",
          &g_org_chromium_media_MediaCodecUtil_getDefaultCodecName);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, mime.obj(), as_jint(direction), requireSoftwareCodec));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_media_MediaCodecUtil_getEncoderColorFormatsForMime(nullptr);
static base::android::ScopedJavaLocalRef<jintArray>
    Java_MediaCodecUtil_getEncoderColorFormatsForMime(JNIEnv* env, const
    base::android::JavaRef<jstring>& mime) {
  jclass clazz = org_chromium_media_MediaCodecUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaCodecUtil_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getEncoderColorFormatsForMime",
          "(Ljava/lang/String;)[I",
          &g_org_chromium_media_MediaCodecUtil_getEncoderColorFormatsForMime);

  jintArray ret =
      static_cast<jintArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, mime.obj()));
  return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_media_MediaCodecUtil_canDecode(nullptr);
static jboolean Java_MediaCodecUtil_canDecode(JNIEnv* env, const base::android::JavaRef<jstring>&
    mime,
    jboolean isSecure) {
  jclass clazz = org_chromium_media_MediaCodecUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaCodecUtil_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "canDecode",
          "(Ljava/lang/String;Z)Z",
          &g_org_chromium_media_MediaCodecUtil_canDecode);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, mime.obj(), isSecure);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_MediaCodecUtil_getSupportedCodecProfileLevels(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_MediaCodecUtil_getSupportedCodecProfileLevels(JNIEnv* env) {
  jclass clazz = org_chromium_media_MediaCodecUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaCodecUtil_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getSupportedCodecProfileLevels",
          "()[Ljava/lang/Object;",
          &g_org_chromium_media_MediaCodecUtil_getSupportedCodecProfileLevels);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_media_MediaCodecUtil_isDecoderSupportedForDevice(nullptr);
static jboolean Java_MediaCodecUtil_isDecoderSupportedForDevice(JNIEnv* env, const
    base::android::JavaRef<jstring>& mime) {
  jclass clazz = org_chromium_media_MediaCodecUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaCodecUtil_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isDecoderSupportedForDevice",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_media_MediaCodecUtil_isDecoderSupportedForDevice);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, mime.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_MediaCodecUtil_isEncoderSupportedByDevice(nullptr);
static jboolean Java_MediaCodecUtil_isEncoderSupportedByDevice(JNIEnv* env, const
    base::android::JavaRef<jstring>& mime) {
  jclass clazz = org_chromium_media_MediaCodecUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaCodecUtil_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isEncoderSupportedByDevice",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_media_MediaCodecUtil_isEncoderSupportedByDevice);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, mime.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_MediaCodecUtil_isSetOutputSurfaceSupported(nullptr);
static jboolean Java_MediaCodecUtil_isSetOutputSurfaceSupported(JNIEnv* env) {
  jclass clazz = org_chromium_media_MediaCodecUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaCodecUtil_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isSetOutputSurfaceSupported",
          "()Z",
          &g_org_chromium_media_MediaCodecUtil_isSetOutputSurfaceSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_MediaCodecUtil_platformSupportsCbcsEncryption(nullptr);
static jboolean Java_MediaCodecUtil_platformSupportsCbcsEncryption(JNIEnv* env, JniIntWrapper sdk) {
  jclass clazz = org_chromium_media_MediaCodecUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_MediaCodecUtil_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "platformSupportsCbcsEncryption",
          "(I)Z",
          &g_org_chromium_media_MediaCodecUtil_platformSupportsCbcsEncryption);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, as_jint(sdk));
  return ret;
}

}  // namespace media

// Step 4: Generated test functions (optional).


#endif  // org_chromium_media_MediaCodecUtil_JNI
