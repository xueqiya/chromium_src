// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/AudioManagerAndroid

#ifndef org_chromium_media_AudioManagerAndroid_JNI
#define org_chromium_media_AudioManagerAndroid_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_media_AudioManagerAndroid[];
const char kClassPath_org_chromium_media_AudioManagerAndroid[] =
    "org/chromium/media/AudioManagerAndroid";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_media_AudioManagerAndroid_00024AudioDeviceName[];
const char kClassPath_org_chromium_media_AudioManagerAndroid_00024AudioDeviceName[] =
    "org/chromium/media/AudioManagerAndroid$AudioDeviceName";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_media_AudioManagerAndroid_clazz(nullptr);
#ifndef org_chromium_media_AudioManagerAndroid_clazz_defined
#define org_chromium_media_AudioManagerAndroid_clazz_defined
inline jclass org_chromium_media_AudioManagerAndroid_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_media_AudioManagerAndroid,
      &g_org_chromium_media_AudioManagerAndroid_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_clazz(nullptr);
#ifndef org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_clazz_defined
#define org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_clazz_defined
inline jclass org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_media_AudioManagerAndroid_00024AudioDeviceName,
      &g_org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace media {

JNI_GENERATOR_EXPORT void Java_J_N_MCgftn_1d(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAudioManagerAndroid,
    jobject caller,
    jboolean muted) {
  AudioManagerAndroid* native = reinterpret_cast<AudioManagerAndroid*>(nativeAudioManagerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetMute");
  return native->SetMute(env, base::android::JavaParamRef<jobject>(env, caller), muted);
}


static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_id(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AudioDeviceName_id(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "id",
          "()Ljava/lang/String;",
          &g_org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_id);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_name(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_AudioDeviceName_name(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "name",
          "()Ljava/lang/String;",
          &g_org_chromium_media_AudioManagerAndroid_00024AudioDeviceName_name);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_createAudioManagerAndroid(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_AudioManagerAndroid_createAudioManagerAndroid(JNIEnv* env, jlong nativeAudioManagerAndroid)
    {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_AudioManagerAndroid_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createAudioManagerAndroid",
          "(J)Lorg/chromium/media/AudioManagerAndroid;",
          &g_org_chromium_media_AudioManagerAndroid_createAudioManagerAndroid);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeAudioManagerAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_media_AudioManagerAndroid_init(nullptr);
static void Java_AudioManagerAndroid_init(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "init",
          "()V",
          &g_org_chromium_media_AudioManagerAndroid_init);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID> g_org_chromium_media_AudioManagerAndroid_close(nullptr);
static void Java_AudioManagerAndroid_close(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "close",
          "()V",
          &g_org_chromium_media_AudioManagerAndroid_close);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_setCommunicationAudioModeOn(nullptr);
static void Java_AudioManagerAndroid_setCommunicationAudioModeOn(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean on) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setCommunicationAudioModeOn",
          "(Z)V",
          &g_org_chromium_media_AudioManagerAndroid_setCommunicationAudioModeOn);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, on);
}

static std::atomic<jmethodID> g_org_chromium_media_AudioManagerAndroid_setDevice(nullptr);
static jboolean Java_AudioManagerAndroid_setDevice(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& deviceId) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setDevice",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_media_AudioManagerAndroid_setDevice);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id, deviceId.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_getAudioInputDeviceNames(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_AudioManagerAndroid_getAudioInputDeviceNames(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAudioInputDeviceNames",
          "()[Lorg/chromium/media/AudioManagerAndroid$AudioDeviceName;",
          &g_org_chromium_media_AudioManagerAndroid_getAudioInputDeviceNames);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_getNativeOutputSampleRate(nullptr);
static jint Java_AudioManagerAndroid_getNativeOutputSampleRate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativeOutputSampleRate",
          "()I",
          &g_org_chromium_media_AudioManagerAndroid_getNativeOutputSampleRate);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_getMinInputFrameSize(nullptr);
static jint Java_AudioManagerAndroid_getMinInputFrameSize(JNIEnv* env, JniIntWrapper sampleRate,
    JniIntWrapper channels) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_AudioManagerAndroid_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getMinInputFrameSize",
          "(II)I",
          &g_org_chromium_media_AudioManagerAndroid_getMinInputFrameSize);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, as_jint(sampleRate), as_jint(channels));
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_getMinOutputFrameSize(nullptr);
static jint Java_AudioManagerAndroid_getMinOutputFrameSize(JNIEnv* env, JniIntWrapper sampleRate,
    JniIntWrapper channels) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_AudioManagerAndroid_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getMinOutputFrameSize",
          "(II)I",
          &g_org_chromium_media_AudioManagerAndroid_getMinOutputFrameSize);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, as_jint(sampleRate), as_jint(channels));
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_isAudioLowLatencySupported(nullptr);
static jboolean Java_AudioManagerAndroid_isAudioLowLatencySupported(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isAudioLowLatencySupported",
          "()Z",
          &g_org_chromium_media_AudioManagerAndroid_isAudioLowLatencySupported);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_getAudioLowLatencyOutputFrameSize(nullptr);
static jint Java_AudioManagerAndroid_getAudioLowLatencyOutputFrameSize(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getAudioLowLatencyOutputFrameSize",
          "()I",
          &g_org_chromium_media_AudioManagerAndroid_getAudioLowLatencyOutputFrameSize);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_media_AudioManagerAndroid_acousticEchoCancelerIsAvailable(nullptr);
static jboolean Java_AudioManagerAndroid_acousticEchoCancelerIsAvailable(JNIEnv* env) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_media_AudioManagerAndroid_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "acousticEchoCancelerIsAvailable",
          "()Z",
          &g_org_chromium_media_AudioManagerAndroid_acousticEchoCancelerIsAvailable);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_media_AudioManagerAndroid_getOutputLatency(nullptr);
static jint Java_AudioManagerAndroid_getOutputLatency(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_media_AudioManagerAndroid_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_media_AudioManagerAndroid_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getOutputLatency",
          "()I",
          &g_org_chromium_media_AudioManagerAndroid_getOutputLatency);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace media

// Step 4: Generated test functions (optional).


#endif  // org_chromium_media_AudioManagerAndroid_JNI
