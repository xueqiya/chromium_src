// media/mojo/mojom/video_decoder.mojom-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_VIDEO_DECODER_MOJOM_FORWARD_H_
#define MEDIA_MOJO_MOJOM_VIDEO_DECODER_MOJOM_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"



namespace mojo {
enum class NativeEnum;
}  // namespace mojo


namespace media {
namespace mojom {
class SupportedVideoDecoderConfigDataView;

class CommandBufferIdDataView;

using OverlayInfoDataView = mojo::native::NativeStructDataView;

using VideoDecoderImplementation = mojo::NativeEnum;
class SupportedVideoDecoderConfig;
using SupportedVideoDecoderConfigPtr = mojo::StructPtr<SupportedVideoDecoderConfig>;

class CommandBufferId;
using CommandBufferIdPtr = mojo::StructPtr<CommandBufferId>;

using OverlayInfo = mojo::native::NativeStruct;
using OverlayInfoPtr = mojo::native::NativeStructPtr;

class VideoFrameHandleReleaser;

using VideoFrameHandleReleaserPtr = mojo::InterfacePtr<VideoFrameHandleReleaser>;
using VideoFrameHandleReleaserPtrInfo = mojo::InterfacePtrInfo<VideoFrameHandleReleaser>;
using ThreadSafeVideoFrameHandleReleaserPtr =
    mojo::ThreadSafeInterfacePtr<VideoFrameHandleReleaser>;

using VideoFrameHandleReleaserRequest = mojo::InterfaceRequest<VideoFrameHandleReleaser>;

using VideoFrameHandleReleaserAssociatedPtr =
    mojo::AssociatedInterfacePtr<VideoFrameHandleReleaser>;
using ThreadSafeVideoFrameHandleReleaserAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<VideoFrameHandleReleaser>;
using VideoFrameHandleReleaserAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<VideoFrameHandleReleaser>;

using VideoFrameHandleReleaserAssociatedRequest =
    mojo::AssociatedInterfaceRequest<VideoFrameHandleReleaser>;

class VideoDecoder;

using VideoDecoderPtr = mojo::InterfacePtr<VideoDecoder>;
using VideoDecoderPtrInfo = mojo::InterfacePtrInfo<VideoDecoder>;
using ThreadSafeVideoDecoderPtr =
    mojo::ThreadSafeInterfacePtr<VideoDecoder>;

using VideoDecoderRequest = mojo::InterfaceRequest<VideoDecoder>;

using VideoDecoderAssociatedPtr =
    mojo::AssociatedInterfacePtr<VideoDecoder>;
using ThreadSafeVideoDecoderAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<VideoDecoder>;
using VideoDecoderAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<VideoDecoder>;

using VideoDecoderAssociatedRequest =
    mojo::AssociatedInterfaceRequest<VideoDecoder>;

class VideoDecoderClient;

using VideoDecoderClientPtr = mojo::InterfacePtr<VideoDecoderClient>;
using VideoDecoderClientPtrInfo = mojo::InterfacePtrInfo<VideoDecoderClient>;
using ThreadSafeVideoDecoderClientPtr =
    mojo::ThreadSafeInterfacePtr<VideoDecoderClient>;

using VideoDecoderClientRequest = mojo::InterfaceRequest<VideoDecoderClient>;

using VideoDecoderClientAssociatedPtr =
    mojo::AssociatedInterfacePtr<VideoDecoderClient>;
using ThreadSafeVideoDecoderClientAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<VideoDecoderClient>;
using VideoDecoderClientAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<VideoDecoderClient>;

using VideoDecoderClientAssociatedRequest =
    mojo::AssociatedInterfaceRequest<VideoDecoderClient>;




}  // namespace mojom
}  // namespace media
#include "media/base/overlay_info.h"
#include "media/video/supported_video_decoder_config.h"

#endif  // MEDIA_MOJO_MOJOM_VIDEO_DECODER_MOJOM_FORWARD_H_