// media/mojo/mojom/media_drm_storage.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_MEDIA_DRM_STORAGE_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_MEDIA_DRM_STORAGE_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace media {
namespace mojom {
namespace internal {
class  MediaDrmStorage_Initialize_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaDrmStorage_Initialize_Params_Data));
      new (data()) MediaDrmStorage_Initialize_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaDrmStorage_Initialize_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaDrmStorage_Initialize_Params_Data>(index_);
    }
    MediaDrmStorage_Initialize_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaDrmStorage_Initialize_Params_Data();
  ~MediaDrmStorage_Initialize_Params_Data() = delete;
};
static_assert(sizeof(MediaDrmStorage_Initialize_Params_Data) == 8,
              "Bad sizeof(MediaDrmStorage_Initialize_Params_Data)");
class  MediaDrmStorage_Initialize_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaDrmStorage_Initialize_ResponseParams_Data));
      new (data()) MediaDrmStorage_Initialize_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaDrmStorage_Initialize_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaDrmStorage_Initialize_ResponseParams_Data>(index_);
    }
    MediaDrmStorage_Initialize_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> origin_id;

 private:
  MediaDrmStorage_Initialize_ResponseParams_Data();
  ~MediaDrmStorage_Initialize_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaDrmStorage_Initialize_ResponseParams_Data) == 24,
              "Bad sizeof(MediaDrmStorage_Initialize_ResponseParams_Data)");
class  MediaDrmStorage_OnProvisioned_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaDrmStorage_OnProvisioned_Params_Data));
      new (data()) MediaDrmStorage_OnProvisioned_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaDrmStorage_OnProvisioned_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaDrmStorage_OnProvisioned_Params_Data>(index_);
    }
    MediaDrmStorage_OnProvisioned_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaDrmStorage_OnProvisioned_Params_Data();
  ~MediaDrmStorage_OnProvisioned_Params_Data() = delete;
};
static_assert(sizeof(MediaDrmStorage_OnProvisioned_Params_Data) == 8,
              "Bad sizeof(MediaDrmStorage_OnProvisioned_Params_Data)");
class  MediaDrmStorage_OnProvisioned_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaDrmStorage_OnProvisioned_ResponseParams_Data));
      new (data()) MediaDrmStorage_OnProvisioned_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaDrmStorage_OnProvisioned_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaDrmStorage_OnProvisioned_ResponseParams_Data>(index_);
    }
    MediaDrmStorage_OnProvisioned_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  MediaDrmStorage_OnProvisioned_ResponseParams_Data();
  ~MediaDrmStorage_OnProvisioned_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaDrmStorage_OnProvisioned_ResponseParams_Data) == 16,
              "Bad sizeof(MediaDrmStorage_OnProvisioned_ResponseParams_Data)");
class  MediaDrmStorage_SavePersistentSession_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaDrmStorage_SavePersistentSession_Params_Data));
      new (data()) MediaDrmStorage_SavePersistentSession_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaDrmStorage_SavePersistentSession_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaDrmStorage_SavePersistentSession_Params_Data>(index_);
    }
    MediaDrmStorage_SavePersistentSession_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> session_id;
  mojo::internal::Pointer<internal::SessionData_Data> session_data;

 private:
  MediaDrmStorage_SavePersistentSession_Params_Data();
  ~MediaDrmStorage_SavePersistentSession_Params_Data() = delete;
};
static_assert(sizeof(MediaDrmStorage_SavePersistentSession_Params_Data) == 24,
              "Bad sizeof(MediaDrmStorage_SavePersistentSession_Params_Data)");
class  MediaDrmStorage_SavePersistentSession_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaDrmStorage_SavePersistentSession_ResponseParams_Data));
      new (data()) MediaDrmStorage_SavePersistentSession_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaDrmStorage_SavePersistentSession_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaDrmStorage_SavePersistentSession_ResponseParams_Data>(index_);
    }
    MediaDrmStorage_SavePersistentSession_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  MediaDrmStorage_SavePersistentSession_ResponseParams_Data();
  ~MediaDrmStorage_SavePersistentSession_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaDrmStorage_SavePersistentSession_ResponseParams_Data) == 16,
              "Bad sizeof(MediaDrmStorage_SavePersistentSession_ResponseParams_Data)");
class  MediaDrmStorage_LoadPersistentSession_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaDrmStorage_LoadPersistentSession_Params_Data));
      new (data()) MediaDrmStorage_LoadPersistentSession_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaDrmStorage_LoadPersistentSession_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaDrmStorage_LoadPersistentSession_Params_Data>(index_);
    }
    MediaDrmStorage_LoadPersistentSession_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> session_id;

 private:
  MediaDrmStorage_LoadPersistentSession_Params_Data();
  ~MediaDrmStorage_LoadPersistentSession_Params_Data() = delete;
};
static_assert(sizeof(MediaDrmStorage_LoadPersistentSession_Params_Data) == 16,
              "Bad sizeof(MediaDrmStorage_LoadPersistentSession_Params_Data)");
class  MediaDrmStorage_LoadPersistentSession_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaDrmStorage_LoadPersistentSession_ResponseParams_Data));
      new (data()) MediaDrmStorage_LoadPersistentSession_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaDrmStorage_LoadPersistentSession_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaDrmStorage_LoadPersistentSession_ResponseParams_Data>(index_);
    }
    MediaDrmStorage_LoadPersistentSession_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SessionData_Data> session_data;

 private:
  MediaDrmStorage_LoadPersistentSession_ResponseParams_Data();
  ~MediaDrmStorage_LoadPersistentSession_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaDrmStorage_LoadPersistentSession_ResponseParams_Data) == 16,
              "Bad sizeof(MediaDrmStorage_LoadPersistentSession_ResponseParams_Data)");
class  MediaDrmStorage_RemovePersistentSession_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaDrmStorage_RemovePersistentSession_Params_Data));
      new (data()) MediaDrmStorage_RemovePersistentSession_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaDrmStorage_RemovePersistentSession_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaDrmStorage_RemovePersistentSession_Params_Data>(index_);
    }
    MediaDrmStorage_RemovePersistentSession_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> session_id;

 private:
  MediaDrmStorage_RemovePersistentSession_Params_Data();
  ~MediaDrmStorage_RemovePersistentSession_Params_Data() = delete;
};
static_assert(sizeof(MediaDrmStorage_RemovePersistentSession_Params_Data) == 16,
              "Bad sizeof(MediaDrmStorage_RemovePersistentSession_Params_Data)");
class  MediaDrmStorage_RemovePersistentSession_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaDrmStorage_RemovePersistentSession_ResponseParams_Data));
      new (data()) MediaDrmStorage_RemovePersistentSession_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaDrmStorage_RemovePersistentSession_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaDrmStorage_RemovePersistentSession_ResponseParams_Data>(index_);
    }
    MediaDrmStorage_RemovePersistentSession_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  MediaDrmStorage_RemovePersistentSession_ResponseParams_Data();
  ~MediaDrmStorage_RemovePersistentSession_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaDrmStorage_RemovePersistentSession_ResponseParams_Data) == 16,
              "Bad sizeof(MediaDrmStorage_RemovePersistentSession_ResponseParams_Data)");

}  // namespace internal
class MediaDrmStorage_Initialize_ParamsDataView {
 public:
  MediaDrmStorage_Initialize_ParamsDataView() {}

  MediaDrmStorage_Initialize_ParamsDataView(
      internal::MediaDrmStorage_Initialize_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaDrmStorage_Initialize_Params_Data* data_ = nullptr;
};

class MediaDrmStorage_Initialize_ResponseParamsDataView {
 public:
  MediaDrmStorage_Initialize_ResponseParamsDataView() {}

  MediaDrmStorage_Initialize_ResponseParamsDataView(
      internal::MediaDrmStorage_Initialize_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetOriginIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOriginId(UserType* output) {
    auto* pointer = data_->origin_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
 private:
  internal::MediaDrmStorage_Initialize_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaDrmStorage_OnProvisioned_ParamsDataView {
 public:
  MediaDrmStorage_OnProvisioned_ParamsDataView() {}

  MediaDrmStorage_OnProvisioned_ParamsDataView(
      internal::MediaDrmStorage_OnProvisioned_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaDrmStorage_OnProvisioned_Params_Data* data_ = nullptr;
};

class MediaDrmStorage_OnProvisioned_ResponseParamsDataView {
 public:
  MediaDrmStorage_OnProvisioned_ResponseParamsDataView() {}

  MediaDrmStorage_OnProvisioned_ResponseParamsDataView(
      internal::MediaDrmStorage_OnProvisioned_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::MediaDrmStorage_OnProvisioned_ResponseParams_Data* data_ = nullptr;
};

class MediaDrmStorage_SavePersistentSession_ParamsDataView {
 public:
  MediaDrmStorage_SavePersistentSession_ParamsDataView() {}

  MediaDrmStorage_SavePersistentSession_ParamsDataView(
      internal::MediaDrmStorage_SavePersistentSession_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSessionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionId(UserType* output) {
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSessionDataDataView(
      SessionDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionData(UserType* output) {
    auto* pointer = data_->session_data.Get();
    return mojo::internal::Deserialize<::media::mojom::SessionDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::MediaDrmStorage_SavePersistentSession_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaDrmStorage_SavePersistentSession_ResponseParamsDataView {
 public:
  MediaDrmStorage_SavePersistentSession_ResponseParamsDataView() {}

  MediaDrmStorage_SavePersistentSession_ResponseParamsDataView(
      internal::MediaDrmStorage_SavePersistentSession_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::MediaDrmStorage_SavePersistentSession_ResponseParams_Data* data_ = nullptr;
};

class MediaDrmStorage_LoadPersistentSession_ParamsDataView {
 public:
  MediaDrmStorage_LoadPersistentSession_ParamsDataView() {}

  MediaDrmStorage_LoadPersistentSession_ParamsDataView(
      internal::MediaDrmStorage_LoadPersistentSession_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSessionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionId(UserType* output) {
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::MediaDrmStorage_LoadPersistentSession_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaDrmStorage_LoadPersistentSession_ResponseParamsDataView {
 public:
  MediaDrmStorage_LoadPersistentSession_ResponseParamsDataView() {}

  MediaDrmStorage_LoadPersistentSession_ResponseParamsDataView(
      internal::MediaDrmStorage_LoadPersistentSession_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSessionDataDataView(
      SessionDataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionData(UserType* output) {
    auto* pointer = data_->session_data.Get();
    return mojo::internal::Deserialize<::media::mojom::SessionDataDataView>(
        pointer, output, context_);
  }
 private:
  internal::MediaDrmStorage_LoadPersistentSession_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaDrmStorage_RemovePersistentSession_ParamsDataView {
 public:
  MediaDrmStorage_RemovePersistentSession_ParamsDataView() {}

  MediaDrmStorage_RemovePersistentSession_ParamsDataView(
      internal::MediaDrmStorage_RemovePersistentSession_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSessionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionId(UserType* output) {
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::MediaDrmStorage_RemovePersistentSession_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaDrmStorage_RemovePersistentSession_ResponseParamsDataView {
 public:
  MediaDrmStorage_RemovePersistentSession_ResponseParamsDataView() {}

  MediaDrmStorage_RemovePersistentSession_ResponseParamsDataView(
      internal::MediaDrmStorage_RemovePersistentSession_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::MediaDrmStorage_RemovePersistentSession_ResponseParams_Data* data_ = nullptr;
};




inline void MediaDrmStorage_Initialize_ResponseParamsDataView::GetOriginIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->origin_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}






inline void MediaDrmStorage_SavePersistentSession_ParamsDataView::GetSessionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void MediaDrmStorage_SavePersistentSession_ParamsDataView::GetSessionDataDataView(
    SessionDataDataView* output) {
  auto pointer = data_->session_data.Get();
  *output = SessionDataDataView(pointer, context_);
}




inline void MediaDrmStorage_LoadPersistentSession_ParamsDataView::GetSessionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void MediaDrmStorage_LoadPersistentSession_ResponseParamsDataView::GetSessionDataDataView(
    SessionDataDataView* output) {
  auto pointer = data_->session_data.Get();
  *output = SessionDataDataView(pointer, context_);
}


inline void MediaDrmStorage_RemovePersistentSession_ParamsDataView::GetSessionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // MEDIA_MOJO_MOJOM_MEDIA_DRM_STORAGE_MOJOM_PARAMS_DATA_H_