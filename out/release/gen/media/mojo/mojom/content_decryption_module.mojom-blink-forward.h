// media/mojo/mojom/content_decryption_module.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_CONTENT_DECRYPTION_MODULE_MOJOM_BLINK_FORWARD_H_
#define MEDIA_MOJO_MOJOM_CONTENT_DECRYPTION_MODULE_MOJOM_BLINK_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"



namespace mojo {
enum class NativeEnum;
}  // namespace mojo
namespace media {
namespace mojom {
using EmeInitDataType = mojo::NativeEnum;
using CdmSessionType = mojo::NativeEnum;
using CdmMessageType = mojo::NativeEnum;

enum class CdmKeyStatus : int32_t;
using HdcpVersion = mojo::NativeEnum;
using CdmPromiseResult_Exception = mojo::NativeEnum;
}  // namespace media
}  // namespace mojom

namespace WTF {
template <typename T>
struct DefaultHash;
}

namespace WTF {
struct media_mojom_internal_CdmKeyStatus_DataHashFn;

template <>
struct DefaultHash<::media::mojom::CdmKeyStatus> {
  using Hash = media_mojom_internal_CdmKeyStatus_DataHashFn;
};
}  // namespace WTF


namespace media {
namespace mojom {
namespace blink {
using EmeInitDataType = EmeInitDataType;  // Alias for definition in the parent namespace.
using CdmSessionType = CdmSessionType;  // Alias for definition in the parent namespace.
using CdmMessageType = CdmMessageType;  // Alias for definition in the parent namespace.
using CdmKeyStatus = CdmKeyStatus;  // Alias for definition in the parent namespace.
using HdcpVersion = HdcpVersion;  // Alias for definition in the parent namespace.
using CdmConfig = mojo::native::NativeStruct;
using CdmConfigPtr = mojo::native::NativeStructPtr;

class CdmPromiseResult;
using CdmPromiseResultPtr = mojo::InlinedStructPtr<CdmPromiseResult>;

class CdmKeyInformation;
using CdmKeyInformationPtr = mojo::StructPtr<CdmKeyInformation>;

class ContentDecryptionModule;

using ContentDecryptionModulePtr = mojo::InterfacePtr<ContentDecryptionModule>;
using ContentDecryptionModulePtrInfo = mojo::InterfacePtrInfo<ContentDecryptionModule>;
using ThreadSafeContentDecryptionModulePtr =
    mojo::ThreadSafeInterfacePtr<ContentDecryptionModule>;

using ContentDecryptionModuleRequest = mojo::InterfaceRequest<ContentDecryptionModule>;

using ContentDecryptionModuleAssociatedPtr =
    mojo::AssociatedInterfacePtr<ContentDecryptionModule>;
using ThreadSafeContentDecryptionModuleAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<ContentDecryptionModule>;
using ContentDecryptionModuleAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<ContentDecryptionModule>;

using ContentDecryptionModuleAssociatedRequest =
    mojo::AssociatedInterfaceRequest<ContentDecryptionModule>;

class ContentDecryptionModuleClient;

using ContentDecryptionModuleClientPtr = mojo::InterfacePtr<ContentDecryptionModuleClient>;
using ContentDecryptionModuleClientPtrInfo = mojo::InterfacePtrInfo<ContentDecryptionModuleClient>;
using ThreadSafeContentDecryptionModuleClientPtr =
    mojo::ThreadSafeInterfacePtr<ContentDecryptionModuleClient>;

using ContentDecryptionModuleClientRequest = mojo::InterfaceRequest<ContentDecryptionModuleClient>;

using ContentDecryptionModuleClientAssociatedPtr =
    mojo::AssociatedInterfacePtr<ContentDecryptionModuleClient>;
using ThreadSafeContentDecryptionModuleClientAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<ContentDecryptionModuleClient>;
using ContentDecryptionModuleClientAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<ContentDecryptionModuleClient>;

using ContentDecryptionModuleClientAssociatedRequest =
    mojo::AssociatedInterfaceRequest<ContentDecryptionModuleClient>;

class CdmFactory;

using CdmFactoryPtr = mojo::InterfacePtr<CdmFactory>;
using CdmFactoryPtrInfo = mojo::InterfacePtrInfo<CdmFactory>;
using ThreadSafeCdmFactoryPtr =
    mojo::ThreadSafeInterfacePtr<CdmFactory>;

using CdmFactoryRequest = mojo::InterfaceRequest<CdmFactory>;

using CdmFactoryAssociatedPtr =
    mojo::AssociatedInterfacePtr<CdmFactory>;
using ThreadSafeCdmFactoryAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<CdmFactory>;
using CdmFactoryAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<CdmFactory>;

using CdmFactoryAssociatedRequest =
    mojo::AssociatedInterfaceRequest<CdmFactory>;




}  // namespace blink
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_CONTENT_DECRYPTION_MODULE_MOJOM_BLINK_FORWARD_H_