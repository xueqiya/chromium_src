// media/mojo/mojom/media_drm_storage.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "media/mojo/mojom/media_drm_storage.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/unguessable_token.mojom.h"


#ifndef MEDIA_MOJO_MOJOM_MEDIA_DRM_STORAGE_MOJOM_JUMBO_H_
#define MEDIA_MOJO_MOJOM_MEDIA_DRM_STORAGE_MOJOM_JUMBO_H_
#include "media/base/ipc/media_param_traits_macros.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#endif


namespace media {
namespace mojom {


void MediaDrmStorageInterceptorForTesting::Initialize(InitializeCallback callback) {
  GetForwardingInterface()->Initialize(std::move(callback));
}
void MediaDrmStorageInterceptorForTesting::OnProvisioned(OnProvisionedCallback callback) {
  GetForwardingInterface()->OnProvisioned(std::move(callback));
}
void MediaDrmStorageInterceptorForTesting::SavePersistentSession(const std::string& session_id, SessionDataPtr session_data, SavePersistentSessionCallback callback) {
  GetForwardingInterface()->SavePersistentSession(std::move(session_id), std::move(session_data), std::move(callback));
}
void MediaDrmStorageInterceptorForTesting::LoadPersistentSession(const std::string& session_id, LoadPersistentSessionCallback callback) {
  GetForwardingInterface()->LoadPersistentSession(std::move(session_id), std::move(callback));
}
void MediaDrmStorageInterceptorForTesting::RemovePersistentSession(const std::string& session_id, RemovePersistentSessionCallback callback) {
  GetForwardingInterface()->RemovePersistentSession(std::move(session_id), std::move(callback));
}
MediaDrmStorageAsyncWaiter::MediaDrmStorageAsyncWaiter(
    MediaDrmStorage* proxy) : proxy_(proxy) {}

MediaDrmStorageAsyncWaiter::~MediaDrmStorageAsyncWaiter() = default;

void MediaDrmStorageAsyncWaiter::Initialize(
    bool* out_success, base::Optional<::base::UnguessableToken>* out_origin_id) {
  base::RunLoop loop;
  proxy_->Initialize(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             base::Optional<::base::UnguessableToken>* out_origin_id
,
             bool success,
             const base::Optional<::base::UnguessableToken>& origin_id) {*out_success = std::move(success);*out_origin_id = std::move(origin_id);
            loop->Quit();
          },
          &loop,
          out_success,
          out_origin_id));
  loop.Run();
}
void MediaDrmStorageAsyncWaiter::OnProvisioned(
    bool* out_success) {
  base::RunLoop loop;
  proxy_->OnProvisioned(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void MediaDrmStorageAsyncWaiter::SavePersistentSession(
    const std::string& session_id, SessionDataPtr session_data, bool* out_success) {
  base::RunLoop loop;
  proxy_->SavePersistentSession(std::move(session_id),std::move(session_data),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void MediaDrmStorageAsyncWaiter::LoadPersistentSession(
    const std::string& session_id, SessionDataPtr* out_session_data) {
  base::RunLoop loop;
  proxy_->LoadPersistentSession(std::move(session_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             SessionDataPtr* out_session_data
,
             SessionDataPtr session_data) {*out_session_data = std::move(session_data);
            loop->Quit();
          },
          &loop,
          out_session_data));
  loop.Run();
}
void MediaDrmStorageAsyncWaiter::RemovePersistentSession(
    const std::string& session_id, bool* out_success) {
  base::RunLoop loop;
  proxy_->RemovePersistentSession(std::move(session_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}





}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif