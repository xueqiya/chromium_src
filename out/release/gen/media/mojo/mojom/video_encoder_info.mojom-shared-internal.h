// media/mojo/mojom/video_encoder_info.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_VIDEO_ENCODER_INFO_MOJOM_SHARED_INTERNAL_H_
#define MEDIA_MOJO_MOJOM_VIDEO_ENCODER_INFO_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace media {
namespace mojom {
namespace internal {
class ScalingSettings_Data;
class ResolutionBitrateLimit_Data;
class VideoEncoderInfo_Data;

#pragma pack(push, 1)
class  ScalingSettings_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ScalingSettings_Data));
      new (data()) ScalingSettings_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ScalingSettings_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ScalingSettings_Data>(index_);
    }
    ScalingSettings_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t min_qp;
  uint8_t max_qp;
  uint8_t padfinal_[6];

 private:
  ScalingSettings_Data();
  ~ScalingSettings_Data() = delete;
};
static_assert(sizeof(ScalingSettings_Data) == 16,
              "Bad sizeof(ScalingSettings_Data)");
// Used by ScalingSettings::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ScalingSettings_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ScalingSettings_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ScalingSettings_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ScalingSettings_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ScalingSettings_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ResolutionBitrateLimit_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ResolutionBitrateLimit_Data));
      new (data()) ResolutionBitrateLimit_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ResolutionBitrateLimit_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ResolutionBitrateLimit_Data>(index_);
    }
    ResolutionBitrateLimit_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> frame_size;
  int32_t min_start_bitrate_bps;
  int32_t min_bitrate_bps;
  int32_t max_bitrate_bps;
  uint8_t padfinal_[4];

 private:
  ResolutionBitrateLimit_Data();
  ~ResolutionBitrateLimit_Data() = delete;
};
static_assert(sizeof(ResolutionBitrateLimit_Data) == 32,
              "Bad sizeof(ResolutionBitrateLimit_Data)");
// Used by ResolutionBitrateLimit::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ResolutionBitrateLimit_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ResolutionBitrateLimit_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ResolutionBitrateLimit_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ResolutionBitrateLimit_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ResolutionBitrateLimit_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  VideoEncoderInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(VideoEncoderInfo_Data));
      new (data()) VideoEncoderInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    VideoEncoderInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<VideoEncoderInfo_Data>(index_);
    }
    VideoEncoderInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> implementation_name;
  uint8_t supports_native_handle : 1;
  uint8_t has_trusted_rate_controller : 1;
  uint8_t is_hardware_accelerated : 1;
  uint8_t supports_simulcast : 1;
  uint8_t pad4_[7];
  mojo::internal::Pointer<internal::ScalingSettings_Data> scaling_settings;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>>>> fps_allocation;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ResolutionBitrateLimit_Data>>> resolution_bitrate_limits;

 private:
  VideoEncoderInfo_Data();
  ~VideoEncoderInfo_Data() = delete;
};
static_assert(sizeof(VideoEncoderInfo_Data) == 48,
              "Bad sizeof(VideoEncoderInfo_Data)");
// Used by VideoEncoderInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct VideoEncoderInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  VideoEncoderInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~VideoEncoderInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    VideoEncoderInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    VideoEncoderInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_VIDEO_ENCODER_INFO_MOJOM_SHARED_INTERNAL_H_