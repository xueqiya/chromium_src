// third_party/blink/public/mojom/fetch/fetch_api_request.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "third_party/blink/public/mojom/fetch/fetch_api_request.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "third_party/blink/public/mojom/fetch/fetch_api_request.mojom-params-data.h"
#include "third_party/blink/public/mojom/fetch/fetch_api_request.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/fetch/fetch_api_request.mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FETCH_FETCH_API_REQUEST_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FETCH_FETCH_API_REQUEST_MOJOM_BLINK_JUMBO_H_
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/file_path_mojom_traits.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "services/network/public/cpp/network_ipc_param_traits.h"
#include "services/network/public/cpp/network_isolation_key_mojom_traits.h"
#include "services/network/public/cpp/url_request_mojom_traits.h"
#include "third_party/blink/renderer/platform/blob/serialized_blob_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/fetch_api_request_headers_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/kurl_mojom_traits.h"
#include "third_party/blink/renderer/platform/network/encoded_form_data_element_mojom_traits.h"
#include "third_party/blink/renderer/platform/network/encoded_form_data_mojom_traits.h"
#include "url/mojom/origin_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif
namespace blink {
namespace mojom {
namespace blink {
FetchAPIRequestHeaders::FetchAPIRequestHeaders()
    : headers() {}

FetchAPIRequestHeaders::FetchAPIRequestHeaders(
    const WTF::HashMap<WTF::String, WTF::String>& headers_in)
    : headers(std::move(headers_in)) {}

FetchAPIRequestHeaders::~FetchAPIRequestHeaders() = default;

bool FetchAPIRequestHeaders::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
FetchAPIDataElement::FetchAPIDataElement()
    : type(),
      buf(),
      path(),
      file(),
      blob_uuid(),
      data_pipe_getter(),
      chunked_data_pipe_getter(),
      offset(),
      length(),
      expected_modification_time() {}

FetchAPIDataElement::FetchAPIDataElement(
    ::network::mojom::blink::DataElementType type_in,
    WTF::Vector<uint8_t> buf_in,
    const ::base::FilePath& path_in,
    ::base::File file_in,
    const WTF::String& blob_uuid_in,
    mojo::PendingRemote<::network::mojom::blink::DataPipeGetter> data_pipe_getter_in,
    mojo::PendingRemote<::network::mojom::blink::ChunkedDataPipeGetter> chunked_data_pipe_getter_in,
    uint64_t offset_in,
    uint64_t length_in,
    ::base::Time expected_modification_time_in)
    : type(std::move(type_in)),
      buf(std::move(buf_in)),
      path(std::move(path_in)),
      file(std::move(file_in)),
      blob_uuid(std::move(blob_uuid_in)),
      data_pipe_getter(std::move(data_pipe_getter_in)),
      chunked_data_pipe_getter(std::move(chunked_data_pipe_getter_in)),
      offset(std::move(offset_in)),
      length(std::move(length_in)),
      expected_modification_time(std::move(expected_modification_time_in)) {}

FetchAPIDataElement::~FetchAPIDataElement() = default;

bool FetchAPIDataElement::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
FetchAPIRequestBody::FetchAPIRequestBody()
    : elements(),
      identifier(),
      contains_sensitive_info() {}

FetchAPIRequestBody::FetchAPIRequestBody(
    WTF::Vector<::blink::FormDataElement> elements_in,
    uint64_t identifier_in,
    bool contains_sensitive_info_in)
    : elements(std::move(elements_in)),
      identifier(std::move(identifier_in)),
      contains_sensitive_info(std::move(contains_sensitive_info_in)) {}

FetchAPIRequestBody::~FetchAPIRequestBody() = default;

bool FetchAPIRequestBody::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
FetchAPIRequest::FetchAPIRequest()
    : mode(::network::mojom::blink::RequestMode::kNoCors),
      is_main_resource_load(false),
      request_context_type(RequestContextType::UNSPECIFIED),
      destination(::network::mojom::blink::RequestDestination::kEmpty),
      frame_type(::blink::mojom::blink::RequestContextFrameType::kNone),
      url(),
      method(),
      headers(),
      blob(),
      body(),
      referrer(),
      credentials_mode(::network::mojom::blink::CredentialsMode::kOmit),
      cache_mode(FetchCacheMode::kDefault),
      redirect_mode(::network::mojom::blink::RedirectMode::kFollow),
      integrity(),
      priority(mojo::internal::ConvertEnumValue<::network::mojom::blink::RequestPriority, ::net::RequestPriority>(::network::mojom::blink::RequestPriority::kIdle)),
      fetch_window_id(),
      keepalive(false),
      is_reload(false),
      is_history_navigation(false) {}

FetchAPIRequest::FetchAPIRequest(
    ::network::mojom::blink::RequestMode mode_in,
    bool is_main_resource_load_in,
    RequestContextType request_context_type_in,
    ::network::mojom::blink::RequestDestination destination_in,
    ::blink::mojom::blink::RequestContextFrameType frame_type_in,
    const ::blink::KURL& url_in,
    const WTF::String& method_in,
    ::WTF::HashMap<::WTF::String, WTF::String, WTF::CaseFoldingHash> headers_in,
    const ::scoped_refptr<::blink::BlobDataHandle>& blob_in,
    ::scoped_refptr<::blink::EncodedFormData> body_in,
    ::blink::mojom::blink::ReferrerPtr referrer_in,
    ::network::mojom::blink::CredentialsMode credentials_mode_in,
    FetchCacheMode cache_mode_in,
    ::network::mojom::blink::RedirectMode redirect_mode_in,
    const WTF::String& integrity_in,
    ::net::RequestPriority priority_in,
    const base::Optional<::base::UnguessableToken>& fetch_window_id_in,
    bool keepalive_in,
    bool is_reload_in,
    bool is_history_navigation_in)
    : mode(std::move(mode_in)),
      is_main_resource_load(std::move(is_main_resource_load_in)),
      request_context_type(std::move(request_context_type_in)),
      destination(std::move(destination_in)),
      frame_type(std::move(frame_type_in)),
      url(std::move(url_in)),
      method(std::move(method_in)),
      headers(std::move(headers_in)),
      blob(std::move(blob_in)),
      body(std::move(body_in)),
      referrer(std::move(referrer_in)),
      credentials_mode(std::move(credentials_mode_in)),
      cache_mode(std::move(cache_mode_in)),
      redirect_mode(std::move(redirect_mode_in)),
      integrity(std::move(integrity_in)),
      priority(std::move(priority_in)),
      fetch_window_id(std::move(fetch_window_id_in)),
      keepalive(std::move(keepalive_in)),
      is_reload(std::move(is_reload_in)),
      is_history_navigation(std::move(is_history_navigation_in)) {}

FetchAPIRequest::~FetchAPIRequest() = default;

bool FetchAPIRequest::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::FetchAPIRequestHeaders::DataView, ::blink::mojom::blink::FetchAPIRequestHeadersPtr>::Read(
    ::blink::mojom::blink::FetchAPIRequestHeaders::DataView input,
    ::blink::mojom::blink::FetchAPIRequestHeadersPtr* output) {
  bool success = true;
  ::blink::mojom::blink::FetchAPIRequestHeadersPtr result(::blink::mojom::blink::FetchAPIRequestHeaders::New());
  
      if (success && !input.ReadHeaders(&result->headers))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::FetchAPIDataElement::DataView, ::blink::mojom::blink::FetchAPIDataElementPtr>::Read(
    ::blink::mojom::blink::FetchAPIDataElement::DataView input,
    ::blink::mojom::blink::FetchAPIDataElementPtr* output) {
  bool success = true;
  ::blink::mojom::blink::FetchAPIDataElementPtr result(::blink::mojom::blink::FetchAPIDataElement::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadBuf(&result->buf))
        success = false;
      if (success && !input.ReadPath(&result->path))
        success = false;
      if (success && !input.ReadFile(&result->file))
        success = false;
      if (success && !input.ReadBlobUuid(&result->blob_uuid))
        success = false;
      if (success) {
        result->data_pipe_getter =
            input.TakeDataPipeGetter<decltype(result->data_pipe_getter)>();
      }
      if (success) {
        result->chunked_data_pipe_getter =
            input.TakeChunkedDataPipeGetter<decltype(result->chunked_data_pipe_getter)>();
      }
      if (success)
        result->offset = input.offset();
      if (success)
        result->length = input.length();
      if (success && !input.ReadExpectedModificationTime(&result->expected_modification_time))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::FetchAPIRequestBody::DataView, ::blink::mojom::blink::FetchAPIRequestBodyPtr>::Read(
    ::blink::mojom::blink::FetchAPIRequestBody::DataView input,
    ::blink::mojom::blink::FetchAPIRequestBodyPtr* output) {
  bool success = true;
  ::blink::mojom::blink::FetchAPIRequestBodyPtr result(::blink::mojom::blink::FetchAPIRequestBody::New());
  
      if (success && !input.ReadElements(&result->elements))
        success = false;
      if (success)
        result->identifier = input.identifier();
      if (success)
        result->contains_sensitive_info = input.contains_sensitive_info();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::FetchAPIRequest::DataView, ::blink::mojom::blink::FetchAPIRequestPtr>::Read(
    ::blink::mojom::blink::FetchAPIRequest::DataView input,
    ::blink::mojom::blink::FetchAPIRequestPtr* output) {
  bool success = true;
  ::blink::mojom::blink::FetchAPIRequestPtr result(::blink::mojom::blink::FetchAPIRequest::New());
  
      if (success && !input.ReadMode(&result->mode))
        success = false;
      if (success)
        result->is_main_resource_load = input.is_main_resource_load();
      if (success && !input.ReadRequestContextType(&result->request_context_type))
        success = false;
      if (success && !input.ReadDestination(&result->destination))
        success = false;
      if (success && !input.ReadFrameType(&result->frame_type))
        success = false;
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success && !input.ReadMethod(&result->method))
        success = false;
      if (success && !input.ReadHeaders(&result->headers))
        success = false;
      if (success && !input.ReadBlob(&result->blob))
        success = false;
      if (success && !input.ReadBody(&result->body))
        success = false;
      if (success && !input.ReadReferrer(&result->referrer))
        success = false;
      if (success && !input.ReadCredentialsMode(&result->credentials_mode))
        success = false;
      if (success && !input.ReadCacheMode(&result->cache_mode))
        success = false;
      if (success && !input.ReadRedirectMode(&result->redirect_mode))
        success = false;
      if (success && !input.ReadIntegrity(&result->integrity))
        success = false;
      if (success && !input.ReadPriority(&result->priority))
        success = false;
      if (success && !input.ReadFetchWindowId(&result->fetch_window_id))
        success = false;
      if (success)
        result->keepalive = input.keepalive();
      if (success)
        result->is_reload = input.is_reload();
      if (success)
        result->is_history_navigation = input.is_history_navigation();
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif