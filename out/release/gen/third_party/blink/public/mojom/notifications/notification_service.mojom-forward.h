// third_party/blink/public/mojom/notifications/notification_service.mojom-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NOTIFICATIONS_NOTIFICATION_SERVICE_MOJOM_FORWARD_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NOTIFICATIONS_NOTIFICATION_SERVICE_MOJOM_FORWARD_H_

#include <stdint.h>



#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"








namespace blink {
namespace mojom {

enum class PersistentNotificationError : int32_t;
class NonPersistentNotificationListener;

using NonPersistentNotificationListenerPtr = mojo::InterfacePtr<NonPersistentNotificationListener>;
using NonPersistentNotificationListenerPtrInfo = mojo::InterfacePtrInfo<NonPersistentNotificationListener>;
using ThreadSafeNonPersistentNotificationListenerPtr =
    mojo::ThreadSafeInterfacePtr<NonPersistentNotificationListener>;

using NonPersistentNotificationListenerRequest = mojo::InterfaceRequest<NonPersistentNotificationListener>;

using NonPersistentNotificationListenerAssociatedPtr =
    mojo::AssociatedInterfacePtr<NonPersistentNotificationListener>;
using ThreadSafeNonPersistentNotificationListenerAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<NonPersistentNotificationListener>;
using NonPersistentNotificationListenerAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<NonPersistentNotificationListener>;

using NonPersistentNotificationListenerAssociatedRequest =
    mojo::AssociatedInterfaceRequest<NonPersistentNotificationListener>;

class NotificationService;

using NotificationServicePtr = mojo::InterfacePtr<NotificationService>;
using NotificationServicePtrInfo = mojo::InterfacePtrInfo<NotificationService>;
using ThreadSafeNotificationServicePtr =
    mojo::ThreadSafeInterfacePtr<NotificationService>;

using NotificationServiceRequest = mojo::InterfaceRequest<NotificationService>;

using NotificationServiceAssociatedPtr =
    mojo::AssociatedInterfacePtr<NotificationService>;
using ThreadSafeNotificationServiceAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<NotificationService>;
using NotificationServiceAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<NotificationService>;

using NotificationServiceAssociatedRequest =
    mojo::AssociatedInterfaceRequest<NotificationService>;




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_NOTIFICATIONS_NOTIFICATION_SERVICE_MOJOM_FORWARD_H_