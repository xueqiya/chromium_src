// third_party/blink/public/mojom/feature_policy/feature_policy_feature.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FEATURE_POLICY_FEATURE_POLICY_FEATURE_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FEATURE_POLICY_FEATURE_POLICY_FEATURE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/blink/public/mojom/feature_policy/feature_policy_feature.mojom-shared-internal.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {


}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class FeaturePolicyFeature : int32_t {
  
  kNotFound = 0,
  
  kAutoplay = 1,
  
  kCamera = 2,
  
  kEncryptedMedia = 3,
  
  kFullscreen = 4,
  
  kGeolocation = 5,
  
  kMicrophone = 6,
  
  kMidiFeature = 7,
  
  kPayment = 8,
  
  kDocumentCookie = 10,
  
  kDocumentDomain = 11,
  
  kSyncScript = 12,
  
  kSyncXHR = 13,
  
  kUsb = 14,
  
  kAccessibilityEvents = 15,
  
  kWebVr = 16,
  
  kAccelerometer = 17,
  
  kAmbientLightSensor = 18,
  
  kGyroscope = 19,
  
  kMagnetometer = 20,
  
  kUnsizedMedia = 21,
  
  kOversizedImages = 25,
  
  kPictureInPicture = 26,
  
  kVerticalScroll = 27,
  
  kDocumentWrite = 28,
  
  kLazyLoad = 29,
  
  kLayoutAnimations = 30,
  
  kWakeLock = 31,
  
  kFontDisplay = 32,
  
  kTopNavigation = 33,
  
  kFormSubmission = 34,
  
  kScript = 35,
  
  kPopups = 36,
  
  kPointerLock = 37,
  
  kModals = 38,
  
  kOrientationLock = 39,
  
  kPresentation = 40,
  
  kFrobulate = 41,
  
  kSerial = 42,
  
  kHid = 43,
  
  kIdleDetection = 44,
  
  kUnoptimizedLossyImages = 45,
  
  kUnoptimizedLosslessImages = 46,
  
  kUnoptimizedLosslessImagesStrict = 47,
  
  kLoadingFrameDefaultEager = 48,
  
  kDownloads = 49,
  
  kExecutionWhileOutOfViewport = 50,
  
  kExecutionWhileNotRendered = 51,
  
  kFocusWithoutUserActivation = 52,
  
  kClientHintDPR = 53,
  
  kClientHintDeviceMemory = 54,
  
  kClientHintDownlink = 55,
  
  kClientHintECT = 56,
  
  kClientHintLang = 57,
  
  kClientHintRTT = 58,
  
  kClientHintUA = 59,
  
  kClientHintUAArch = 60,
  
  kClientHintUAModel = 61,
  
  kClientHintUAPlatform = 62,
  
  kClientHintViewportWidth = 63,
  
  kClientHintWidth = 64,
  
  kWebXr = 66,
  
  kPublicKeyCredentials = 67,
  
  kClipboard = 68,
  
  kClientHintUAMobile = 69,
  kMinValue = 0,
  kMaxValue = 69,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, FeaturePolicyFeature value);
inline bool IsKnownEnumValue(FeaturePolicyFeature value) {
  return internal::FeaturePolicyFeature_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::FeaturePolicyFeature>
    : public mojo::internal::EnumHashImpl<::blink::mojom::FeaturePolicyFeature> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::blink::mojom::FeaturePolicyFeature, ::blink::mojom::FeaturePolicyFeature> {
  static ::blink::mojom::FeaturePolicyFeature ToMojom(::blink::mojom::FeaturePolicyFeature input) { return input; }
  static bool FromMojom(::blink::mojom::FeaturePolicyFeature input, ::blink::mojom::FeaturePolicyFeature* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FeaturePolicyFeature, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::FeaturePolicyFeature, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::blink::mojom::FeaturePolicyFeature>(input), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {


}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FEATURE_POLICY_FEATURE_POLICY_FEATURE_MOJOM_SHARED_H_