// third_party/blink/public/mojom/feature_policy/feature_policy.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4065)
#endif

#include "third_party/blink/public/mojom/feature_policy/feature_policy.mojom-shared.h"

#include <utility>

#include "base/logging.h"
#include "base/stl_util.h"  // for base::size()
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"

#include "third_party/blink/public/mojom/feature_policy/feature_policy.mojom-params-data.h"
namespace blink {
namespace mojom {

std::ostream& operator<<(std::ostream& os, WebSandboxFlags value) {
  switch(value) {
    case WebSandboxFlags::kNone:
      return os << "WebSandboxFlags::kNone";
    case WebSandboxFlags::kNavigation:
      return os << "WebSandboxFlags::kNavigation";
    case WebSandboxFlags::kPlugins:
      return os << "WebSandboxFlags::kPlugins";
    case WebSandboxFlags::kOrigin:
      return os << "WebSandboxFlags::kOrigin";
    case WebSandboxFlags::kForms:
      return os << "WebSandboxFlags::kForms";
    case WebSandboxFlags::kScripts:
      return os << "WebSandboxFlags::kScripts";
    case WebSandboxFlags::kTopNavigation:
      return os << "WebSandboxFlags::kTopNavigation";
    case WebSandboxFlags::kPopups:
      return os << "WebSandboxFlags::kPopups";
    case WebSandboxFlags::kAutomaticFeatures:
      return os << "WebSandboxFlags::kAutomaticFeatures";
    case WebSandboxFlags::kPointerLock:
      return os << "WebSandboxFlags::kPointerLock";
    case WebSandboxFlags::kDocumentDomain:
      return os << "WebSandboxFlags::kDocumentDomain";
    case WebSandboxFlags::kOrientationLock:
      return os << "WebSandboxFlags::kOrientationLock";
    case WebSandboxFlags::kPropagatesToAuxiliaryBrowsingContexts:
      return os << "WebSandboxFlags::kPropagatesToAuxiliaryBrowsingContexts";
    case WebSandboxFlags::kModals:
      return os << "WebSandboxFlags::kModals";
    case WebSandboxFlags::kPresentationController:
      return os << "WebSandboxFlags::kPresentationController";
    case WebSandboxFlags::kTopNavigationByUserActivation:
      return os << "WebSandboxFlags::kTopNavigationByUserActivation";
    case WebSandboxFlags::kDownloads:
      return os << "WebSandboxFlags::kDownloads";
    case WebSandboxFlags::kStorageAccessByUserActivation:
      return os << "WebSandboxFlags::kStorageAccessByUserActivation";
    default:
      return os << "Unknown WebSandboxFlags value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, FeaturePolicyDisposition value) {
  switch(value) {
    case FeaturePolicyDisposition::kEnforce:
      return os << "FeaturePolicyDisposition::kEnforce";
    case FeaturePolicyDisposition::kReport:
      return os << "FeaturePolicyDisposition::kReport";
    default:
      return os << "Unknown FeaturePolicyDisposition value: " << static_cast<int32_t>(value);
  }
}

namespace internal {


// static
bool ParsedFeaturePolicyDeclaration_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ParsedFeaturePolicyDeclaration_Data* object = static_cast<const ParsedFeaturePolicyDeclaration_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }


  if (!::blink::mojom::internal::FeaturePolicyFeature_Data
        ::Validate(object->feature, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->values, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams values_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->values, validation_context,
                                         &values_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->fallback_value, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->fallback_value, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->opaque_value, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->opaque_value, validation_context))
    return false;

  return true;
}

ParsedFeaturePolicyDeclaration_Data::ParsedFeaturePolicyDeclaration_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#if defined(_MSC_VER)
#pragma warning(pop)
#endif