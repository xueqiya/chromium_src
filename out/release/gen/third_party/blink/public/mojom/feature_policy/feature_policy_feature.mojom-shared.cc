// third_party/blink/public/mojom/feature_policy/feature_policy_feature.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4065)
#endif

#include "third_party/blink/public/mojom/feature_policy/feature_policy_feature.mojom-shared.h"

#include <utility>

#include "base/logging.h"
#include "base/stl_util.h"  // for base::size()
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"

#include "third_party/blink/public/mojom/feature_policy/feature_policy_feature.mojom-params-data.h"
namespace blink {
namespace mojom {

std::ostream& operator<<(std::ostream& os, FeaturePolicyFeature value) {
  switch(value) {
    case FeaturePolicyFeature::kNotFound:
      return os << "FeaturePolicyFeature::kNotFound";
    case FeaturePolicyFeature::kAutoplay:
      return os << "FeaturePolicyFeature::kAutoplay";
    case FeaturePolicyFeature::kCamera:
      return os << "FeaturePolicyFeature::kCamera";
    case FeaturePolicyFeature::kEncryptedMedia:
      return os << "FeaturePolicyFeature::kEncryptedMedia";
    case FeaturePolicyFeature::kFullscreen:
      return os << "FeaturePolicyFeature::kFullscreen";
    case FeaturePolicyFeature::kGeolocation:
      return os << "FeaturePolicyFeature::kGeolocation";
    case FeaturePolicyFeature::kMicrophone:
      return os << "FeaturePolicyFeature::kMicrophone";
    case FeaturePolicyFeature::kMidiFeature:
      return os << "FeaturePolicyFeature::kMidiFeature";
    case FeaturePolicyFeature::kPayment:
      return os << "FeaturePolicyFeature::kPayment";
    case FeaturePolicyFeature::kDocumentCookie:
      return os << "FeaturePolicyFeature::kDocumentCookie";
    case FeaturePolicyFeature::kDocumentDomain:
      return os << "FeaturePolicyFeature::kDocumentDomain";
    case FeaturePolicyFeature::kSyncScript:
      return os << "FeaturePolicyFeature::kSyncScript";
    case FeaturePolicyFeature::kSyncXHR:
      return os << "FeaturePolicyFeature::kSyncXHR";
    case FeaturePolicyFeature::kUsb:
      return os << "FeaturePolicyFeature::kUsb";
    case FeaturePolicyFeature::kAccessibilityEvents:
      return os << "FeaturePolicyFeature::kAccessibilityEvents";
    case FeaturePolicyFeature::kWebVr:
      return os << "FeaturePolicyFeature::kWebVr";
    case FeaturePolicyFeature::kAccelerometer:
      return os << "FeaturePolicyFeature::kAccelerometer";
    case FeaturePolicyFeature::kAmbientLightSensor:
      return os << "FeaturePolicyFeature::kAmbientLightSensor";
    case FeaturePolicyFeature::kGyroscope:
      return os << "FeaturePolicyFeature::kGyroscope";
    case FeaturePolicyFeature::kMagnetometer:
      return os << "FeaturePolicyFeature::kMagnetometer";
    case FeaturePolicyFeature::kUnsizedMedia:
      return os << "FeaturePolicyFeature::kUnsizedMedia";
    case FeaturePolicyFeature::kOversizedImages:
      return os << "FeaturePolicyFeature::kOversizedImages";
    case FeaturePolicyFeature::kPictureInPicture:
      return os << "FeaturePolicyFeature::kPictureInPicture";
    case FeaturePolicyFeature::kVerticalScroll:
      return os << "FeaturePolicyFeature::kVerticalScroll";
    case FeaturePolicyFeature::kDocumentWrite:
      return os << "FeaturePolicyFeature::kDocumentWrite";
    case FeaturePolicyFeature::kLazyLoad:
      return os << "FeaturePolicyFeature::kLazyLoad";
    case FeaturePolicyFeature::kLayoutAnimations:
      return os << "FeaturePolicyFeature::kLayoutAnimations";
    case FeaturePolicyFeature::kWakeLock:
      return os << "FeaturePolicyFeature::kWakeLock";
    case FeaturePolicyFeature::kFontDisplay:
      return os << "FeaturePolicyFeature::kFontDisplay";
    case FeaturePolicyFeature::kTopNavigation:
      return os << "FeaturePolicyFeature::kTopNavigation";
    case FeaturePolicyFeature::kFormSubmission:
      return os << "FeaturePolicyFeature::kFormSubmission";
    case FeaturePolicyFeature::kScript:
      return os << "FeaturePolicyFeature::kScript";
    case FeaturePolicyFeature::kPopups:
      return os << "FeaturePolicyFeature::kPopups";
    case FeaturePolicyFeature::kPointerLock:
      return os << "FeaturePolicyFeature::kPointerLock";
    case FeaturePolicyFeature::kModals:
      return os << "FeaturePolicyFeature::kModals";
    case FeaturePolicyFeature::kOrientationLock:
      return os << "FeaturePolicyFeature::kOrientationLock";
    case FeaturePolicyFeature::kPresentation:
      return os << "FeaturePolicyFeature::kPresentation";
    case FeaturePolicyFeature::kFrobulate:
      return os << "FeaturePolicyFeature::kFrobulate";
    case FeaturePolicyFeature::kSerial:
      return os << "FeaturePolicyFeature::kSerial";
    case FeaturePolicyFeature::kHid:
      return os << "FeaturePolicyFeature::kHid";
    case FeaturePolicyFeature::kIdleDetection:
      return os << "FeaturePolicyFeature::kIdleDetection";
    case FeaturePolicyFeature::kUnoptimizedLossyImages:
      return os << "FeaturePolicyFeature::kUnoptimizedLossyImages";
    case FeaturePolicyFeature::kUnoptimizedLosslessImages:
      return os << "FeaturePolicyFeature::kUnoptimizedLosslessImages";
    case FeaturePolicyFeature::kUnoptimizedLosslessImagesStrict:
      return os << "FeaturePolicyFeature::kUnoptimizedLosslessImagesStrict";
    case FeaturePolicyFeature::kLoadingFrameDefaultEager:
      return os << "FeaturePolicyFeature::kLoadingFrameDefaultEager";
    case FeaturePolicyFeature::kDownloads:
      return os << "FeaturePolicyFeature::kDownloads";
    case FeaturePolicyFeature::kExecutionWhileOutOfViewport:
      return os << "FeaturePolicyFeature::kExecutionWhileOutOfViewport";
    case FeaturePolicyFeature::kExecutionWhileNotRendered:
      return os << "FeaturePolicyFeature::kExecutionWhileNotRendered";
    case FeaturePolicyFeature::kFocusWithoutUserActivation:
      return os << "FeaturePolicyFeature::kFocusWithoutUserActivation";
    case FeaturePolicyFeature::kClientHintDPR:
      return os << "FeaturePolicyFeature::kClientHintDPR";
    case FeaturePolicyFeature::kClientHintDeviceMemory:
      return os << "FeaturePolicyFeature::kClientHintDeviceMemory";
    case FeaturePolicyFeature::kClientHintDownlink:
      return os << "FeaturePolicyFeature::kClientHintDownlink";
    case FeaturePolicyFeature::kClientHintECT:
      return os << "FeaturePolicyFeature::kClientHintECT";
    case FeaturePolicyFeature::kClientHintLang:
      return os << "FeaturePolicyFeature::kClientHintLang";
    case FeaturePolicyFeature::kClientHintRTT:
      return os << "FeaturePolicyFeature::kClientHintRTT";
    case FeaturePolicyFeature::kClientHintUA:
      return os << "FeaturePolicyFeature::kClientHintUA";
    case FeaturePolicyFeature::kClientHintUAArch:
      return os << "FeaturePolicyFeature::kClientHintUAArch";
    case FeaturePolicyFeature::kClientHintUAModel:
      return os << "FeaturePolicyFeature::kClientHintUAModel";
    case FeaturePolicyFeature::kClientHintUAPlatform:
      return os << "FeaturePolicyFeature::kClientHintUAPlatform";
    case FeaturePolicyFeature::kClientHintViewportWidth:
      return os << "FeaturePolicyFeature::kClientHintViewportWidth";
    case FeaturePolicyFeature::kClientHintWidth:
      return os << "FeaturePolicyFeature::kClientHintWidth";
    case FeaturePolicyFeature::kWebXr:
      return os << "FeaturePolicyFeature::kWebXr";
    case FeaturePolicyFeature::kPublicKeyCredentials:
      return os << "FeaturePolicyFeature::kPublicKeyCredentials";
    case FeaturePolicyFeature::kClipboard:
      return os << "FeaturePolicyFeature::kClipboard";
    case FeaturePolicyFeature::kClientHintUAMobile:
      return os << "FeaturePolicyFeature::kClientHintUAMobile";
    default:
      return os << "Unknown FeaturePolicyFeature value: " << static_cast<int32_t>(value);
  }
}

namespace internal {

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#if defined(_MSC_VER)
#pragma warning(pop)
#endif