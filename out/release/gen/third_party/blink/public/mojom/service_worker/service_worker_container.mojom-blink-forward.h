// third_party/blink/public/mojom/service_worker/service_worker_container.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CONTAINER_MOJOM_BLINK_FORWARD_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CONTAINER_MOJOM_BLINK_FORWARD_H_

#include <stdint.h>



#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"






namespace blink {
namespace mojom {

enum class ControllerServiceWorkerPurpose : int32_t;
}  // namespace blink
}  // namespace mojom

namespace WTF {
template <typename T>
struct DefaultHash;
}

namespace WTF {
struct blink_mojom_internal_ControllerServiceWorkerPurpose_DataHashFn;

template <>
struct DefaultHash<::blink::mojom::ControllerServiceWorkerPurpose> {
  using Hash = blink_mojom_internal_ControllerServiceWorkerPurpose_DataHashFn;
};
}  // namespace WTF


namespace blink {
namespace mojom {
namespace blink {
using ControllerServiceWorkerPurpose = ControllerServiceWorkerPurpose;  // Alias for definition in the parent namespace.
class ServiceWorkerContainerHost;

using ServiceWorkerContainerHostPtr = mojo::InterfacePtr<ServiceWorkerContainerHost>;
using ServiceWorkerContainerHostPtrInfo = mojo::InterfacePtrInfo<ServiceWorkerContainerHost>;
using ThreadSafeServiceWorkerContainerHostPtr =
    mojo::ThreadSafeInterfacePtr<ServiceWorkerContainerHost>;

using ServiceWorkerContainerHostRequest = mojo::InterfaceRequest<ServiceWorkerContainerHost>;

using ServiceWorkerContainerHostAssociatedPtr =
    mojo::AssociatedInterfacePtr<ServiceWorkerContainerHost>;
using ThreadSafeServiceWorkerContainerHostAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<ServiceWorkerContainerHost>;
using ServiceWorkerContainerHostAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<ServiceWorkerContainerHost>;

using ServiceWorkerContainerHostAssociatedRequest =
    mojo::AssociatedInterfaceRequest<ServiceWorkerContainerHost>;

class ServiceWorkerContainer;

using ServiceWorkerContainerPtr = mojo::InterfacePtr<ServiceWorkerContainer>;
using ServiceWorkerContainerPtrInfo = mojo::InterfacePtrInfo<ServiceWorkerContainer>;
using ThreadSafeServiceWorkerContainerPtr =
    mojo::ThreadSafeInterfacePtr<ServiceWorkerContainer>;

using ServiceWorkerContainerRequest = mojo::InterfaceRequest<ServiceWorkerContainer>;

using ServiceWorkerContainerAssociatedPtr =
    mojo::AssociatedInterfacePtr<ServiceWorkerContainer>;
using ThreadSafeServiceWorkerContainerAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<ServiceWorkerContainer>;
using ServiceWorkerContainerAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<ServiceWorkerContainer>;

using ServiceWorkerContainerAssociatedRequest =
    mojo::AssociatedInterfaceRequest<ServiceWorkerContainer>;




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CONTAINER_MOJOM_BLINK_FORWARD_H_