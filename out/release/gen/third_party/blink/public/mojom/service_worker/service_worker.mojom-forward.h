// third_party/blink/public/mojom/service_worker/service_worker.mojom-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_MOJOM_FORWARD_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_MOJOM_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"
#include "third_party/blink/public/common/common_export.h"






namespace blink {
namespace mojom {
class ExtendableMessageEventDataView;


enum class FetchHandlerExistence : int32_t;

constexpr int32_t kPushEventTimeoutSeconds = 90;

constexpr int32_t kServiceWorkerDefaultIdleDelayInSeconds = 30;
class ExtendableMessageEvent;
using ExtendableMessageEventPtr = mojo::StructPtr<ExtendableMessageEvent>;

class ServiceWorkerHost;

using ServiceWorkerHostPtr = mojo::InterfacePtr<ServiceWorkerHost>;
using ServiceWorkerHostPtrInfo = mojo::InterfacePtrInfo<ServiceWorkerHost>;
using ThreadSafeServiceWorkerHostPtr =
    mojo::ThreadSafeInterfacePtr<ServiceWorkerHost>;

using ServiceWorkerHostRequest = mojo::InterfaceRequest<ServiceWorkerHost>;

using ServiceWorkerHostAssociatedPtr =
    mojo::AssociatedInterfacePtr<ServiceWorkerHost>;
using ThreadSafeServiceWorkerHostAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<ServiceWorkerHost>;
using ServiceWorkerHostAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<ServiceWorkerHost>;

using ServiceWorkerHostAssociatedRequest =
    mojo::AssociatedInterfaceRequest<ServiceWorkerHost>;

class ServiceWorker;

using ServiceWorkerPtr = mojo::InterfacePtr<ServiceWorker>;
using ServiceWorkerPtrInfo = mojo::InterfacePtrInfo<ServiceWorker>;
using ThreadSafeServiceWorkerPtr =
    mojo::ThreadSafeInterfacePtr<ServiceWorker>;

using ServiceWorkerRequest = mojo::InterfaceRequest<ServiceWorker>;

using ServiceWorkerAssociatedPtr =
    mojo::AssociatedInterfacePtr<ServiceWorker>;
using ThreadSafeServiceWorkerAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<ServiceWorker>;
using ServiceWorkerAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<ServiceWorker>;

using ServiceWorkerAssociatedRequest =
    mojo::AssociatedInterfaceRequest<ServiceWorker>;




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_MOJOM_FORWARD_H_