// third_party/blink/public/mojom/frame/frame.mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "third_party/blink/public/mojom/frame/frame.mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"
#include "cc/mojom/touch_action.mojom-blink.h"
#include "mojo/public/mojom/base/string16.mojom-blink.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-blink.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"
#include "services/network/public/mojom/content_security_policy.mojom-blink.h"
#include "skia/public/mojom/skcolor.mojom-blink.h"
#include "third_party/blink/public/mojom/ad_tagging/ad_frame.mojom-blink.h"
#include "third_party/blink/public/mojom/devtools/console_message.mojom-blink.h"
#include "third_party/blink/public/mojom/frame/blocked_navigation_types.mojom-blink.h"
#include "third_party/blink/public/mojom/frame/fullscreen.mojom-blink.h"
#include "third_party/blink/public/mojom/frame/intrinsic_sizing_info.mojom-blink.h"
#include "third_party/blink/public/mojom/frame/lifecycle.mojom-blink.h"
#include "third_party/blink/public/mojom/frame/media_player_action.mojom-blink.h"
#include "third_party/blink/public/mojom/frame/sudden_termination_disabler_type.mojom-blink.h"
#include "third_party/blink/public/mojom/frame/user_activation_update_types.mojom-blink.h"
#include "third_party/blink/public/mojom/input/focus_type.mojom-blink.h"
#include "third_party/blink/public/mojom/input/scroll_direction.mojom-blink.h"
#include "third_party/blink/public/mojom/timing/resource_timing.mojom-blink.h"
#include "third_party/blink/public/mojom/web_feature/web_feature.mojom-blink.h"
#include "third_party/blink/public/mojom/scroll/scroll_into_view_params.mojom-blink.h"
#include "ui/events/mojom/scroll_granularity.mojom-blink.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-blink.h"
#include "url/mojom/origin.mojom-blink.h"
#include "url/mojom/url.mojom-blink.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_JUMBO_H_
#include "cc/ipc/cc_param_traits_macros.h"
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "skia/public/mojom/skcolor_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/geometry_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/kurl_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/security_origin_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/string16_mojom_traits.h"
#include "ui/events/ipc/ui_events_param_traits_macros.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#endif


namespace blink {
namespace mojom {
namespace blink {


void LocalFrameHostInterceptorForTesting::EnterFullscreen(::blink::mojom::blink::FullscreenOptionsPtr options) {
  GetForwardingInterface()->EnterFullscreen(std::move(options));
}
void LocalFrameHostInterceptorForTesting::ExitFullscreen() {
  GetForwardingInterface()->ExitFullscreen();
}
void LocalFrameHostInterceptorForTesting::FullscreenStateChanged(bool is_fullscreen) {
  GetForwardingInterface()->FullscreenStateChanged(std::move(is_fullscreen));
}
void LocalFrameHostInterceptorForTesting::RegisterProtocolHandler(const WTF::String& scheme, const ::blink::KURL& url, const ::WTF::String& title, bool user_gesture) {
  GetForwardingInterface()->RegisterProtocolHandler(std::move(scheme), std::move(url), std::move(title), std::move(user_gesture));
}
void LocalFrameHostInterceptorForTesting::UnregisterProtocolHandler(const WTF::String& scheme, const ::blink::KURL& url, bool user_gesture) {
  GetForwardingInterface()->UnregisterProtocolHandler(std::move(scheme), std::move(url), std::move(user_gesture));
}
void LocalFrameHostInterceptorForTesting::DidDisplayInsecureContent() {
  GetForwardingInterface()->DidDisplayInsecureContent();
}
void LocalFrameHostInterceptorForTesting::DidContainInsecureFormAction() {
  GetForwardingInterface()->DidContainInsecureFormAction();
}
void LocalFrameHostInterceptorForTesting::DocumentAvailableInMainFrame(bool uses_temporary_zoom_level) {
  GetForwardingInterface()->DocumentAvailableInMainFrame(std::move(uses_temporary_zoom_level));
}
void LocalFrameHostInterceptorForTesting::SetNeedsOcclusionTracking(bool needs_tracking) {
  GetForwardingInterface()->SetNeedsOcclusionTracking(std::move(needs_tracking));
}
void LocalFrameHostInterceptorForTesting::LifecycleStateChanged(::blink::mojom::blink::FrameLifecycleState state) {
  GetForwardingInterface()->LifecycleStateChanged(std::move(state));
}
void LocalFrameHostInterceptorForTesting::EvictFromBackForwardCache() {
  GetForwardingInterface()->EvictFromBackForwardCache();
}
void LocalFrameHostInterceptorForTesting::VisibilityChanged(::blink::mojom::blink::FrameVisibility visibility) {
  GetForwardingInterface()->VisibilityChanged(std::move(visibility));
}
void LocalFrameHostInterceptorForTesting::DidChangeThemeColor(const base::Optional<::SkColor>& theme_color) {
  GetForwardingInterface()->DidChangeThemeColor(std::move(theme_color));
}
void LocalFrameHostInterceptorForTesting::DidFocusFrame() {
  GetForwardingInterface()->DidFocusFrame();
}
void LocalFrameHostInterceptorForTesting::EnforceInsecureRequestPolicy(uint8_t policy_bitmap) {
  GetForwardingInterface()->EnforceInsecureRequestPolicy(std::move(policy_bitmap));
}
void LocalFrameHostInterceptorForTesting::EnforceInsecureNavigationsSet(const WTF::Vector<uint32_t>& set) {
  GetForwardingInterface()->EnforceInsecureNavigationsSet(std::move(set));
}
void LocalFrameHostInterceptorForTesting::DidChangeActiveSchedulerTrackedFeatures(uint64_t features_mask) {
  GetForwardingInterface()->DidChangeActiveSchedulerTrackedFeatures(std::move(features_mask));
}
void LocalFrameHostInterceptorForTesting::SuddenTerminationDisablerChanged(bool present, ::blink::mojom::blink::SuddenTerminationDisablerType disabler_type) {
  GetForwardingInterface()->SuddenTerminationDisablerChanged(std::move(present), std::move(disabler_type));
}
void LocalFrameHostInterceptorForTesting::HadStickyUserActivationBeforeNavigationChanged(bool has_gesture) {
  GetForwardingInterface()->HadStickyUserActivationBeforeNavigationChanged(std::move(has_gesture));
}
void LocalFrameHostInterceptorForTesting::ScrollRectToVisibleInParentFrame(const ::blink::WebRect& rect_to_scroll, ::blink::mojom::blink::ScrollIntoViewParamsPtr params) {
  GetForwardingInterface()->ScrollRectToVisibleInParentFrame(std::move(rect_to_scroll), std::move(params));
}
void LocalFrameHostInterceptorForTesting::BubbleLogicalScrollInParentFrame(::blink::mojom::blink::ScrollDirection direction, ::ui::input_types::ScrollGranularity granularity) {
  GetForwardingInterface()->BubbleLogicalScrollInParentFrame(std::move(direction), std::move(granularity));
}
void LocalFrameHostInterceptorForTesting::DidAccessInitialDocument() {
  GetForwardingInterface()->DidAccessInitialDocument();
}
void LocalFrameHostInterceptorForTesting::DidBlockNavigation(const ::blink::KURL& blocked_url, const ::blink::KURL& initiator_url, ::blink::mojom::blink::NavigationBlockedReason reason) {
  GetForwardingInterface()->DidBlockNavigation(std::move(blocked_url), std::move(initiator_url), std::move(reason));
}
void LocalFrameHostInterceptorForTesting::DidChangeLoadProgress(double load_progress) {
  GetForwardingInterface()->DidChangeLoadProgress(std::move(load_progress));
}
void LocalFrameHostInterceptorForTesting::DispatchLoad() {
  GetForwardingInterface()->DispatchLoad();
}
void LocalFrameHostInterceptorForTesting::GoToEntryAtOffset(int32_t offset, bool has_user_gesture) {
  GetForwardingInterface()->GoToEntryAtOffset(std::move(offset), std::move(has_user_gesture));
}
void LocalFrameHostInterceptorForTesting::RenderFallbackContentInParentProcess() {
  GetForwardingInterface()->RenderFallbackContentInParentProcess();
}
void LocalFrameHostInterceptorForTesting::HandleAccessibilityFindInPageResult(FindInPageResultAXParamsPtr params) {
  GetForwardingInterface()->HandleAccessibilityFindInPageResult(std::move(params));
}
void LocalFrameHostInterceptorForTesting::HandleAccessibilityFindInPageTermination() {
  GetForwardingInterface()->HandleAccessibilityFindInPageTermination();
}
void LocalFrameHostInterceptorForTesting::DocumentOnLoadCompleted() {
  GetForwardingInterface()->DocumentOnLoadCompleted();
}
void LocalFrameHostInterceptorForTesting::ForwardResourceTimingToParent(::blink::mojom::blink::ResourceTimingInfoPtr timing) {
  GetForwardingInterface()->ForwardResourceTimingToParent(std::move(timing));
}
void LocalFrameHostInterceptorForTesting::DidFinishDocumentLoad() {
  GetForwardingInterface()->DidFinishDocumentLoad();
}
void LocalFrameHostInterceptorForTesting::RunModalAlertDialog(const ::WTF::String& alert_message, RunModalAlertDialogCallback callback) {
  GetForwardingInterface()->RunModalAlertDialog(std::move(alert_message), std::move(callback));
}
void LocalFrameHostInterceptorForTesting::RunModalConfirmDialog(const ::WTF::String& alert_message, RunModalConfirmDialogCallback callback) {
  GetForwardingInterface()->RunModalConfirmDialog(std::move(alert_message), std::move(callback));
}
void LocalFrameHostInterceptorForTesting::RunModalPromptDialog(const ::WTF::String& alert_message, const ::WTF::String& default_value, RunModalPromptDialogCallback callback) {
  GetForwardingInterface()->RunModalPromptDialog(std::move(alert_message), std::move(default_value), std::move(callback));
}
void LocalFrameHostInterceptorForTesting::RunBeforeUnloadConfirm(bool is_reload, RunBeforeUnloadConfirmCallback callback) {
  GetForwardingInterface()->RunBeforeUnloadConfirm(std::move(is_reload), std::move(callback));
}
LocalFrameHostAsyncWaiter::LocalFrameHostAsyncWaiter(
    LocalFrameHost* proxy) : proxy_(proxy) {}

LocalFrameHostAsyncWaiter::~LocalFrameHostAsyncWaiter() = default;

void LocalFrameHostAsyncWaiter::RunModalAlertDialog(
    const ::WTF::String& alert_message) {
  base::RunLoop loop;
  proxy_->RunModalAlertDialog(std::move(alert_message),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void LocalFrameHostAsyncWaiter::RunModalConfirmDialog(
    const ::WTF::String& alert_message, bool* out_success) {
  base::RunLoop loop;
  proxy_->RunModalConfirmDialog(std::move(alert_message),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void LocalFrameHostAsyncWaiter::RunModalPromptDialog(
    const ::WTF::String& alert_message, const ::WTF::String& default_value, bool* out_success, ::WTF::String* out_result) {
  base::RunLoop loop;
  proxy_->RunModalPromptDialog(std::move(alert_message),std::move(default_value),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             ::WTF::String* out_result
,
             bool success,
             const ::WTF::String& result) {*out_success = std::move(success);*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_success,
          out_result));
  loop.Run();
}
void LocalFrameHostAsyncWaiter::RunBeforeUnloadConfirm(
    bool is_reload, bool* out_success) {
  base::RunLoop loop;
  proxy_->RunBeforeUnloadConfirm(std::move(is_reload),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}



void LocalFrameInterceptorForTesting::GetTextSurroundingSelection(uint32_t max_length, GetTextSurroundingSelectionCallback callback) {
  GetForwardingInterface()->GetTextSurroundingSelection(std::move(max_length), std::move(callback));
}
void LocalFrameInterceptorForTesting::SendInterventionReport(const WTF::String& id, const WTF::String& message) {
  GetForwardingInterface()->SendInterventionReport(std::move(id), std::move(message));
}
void LocalFrameInterceptorForTesting::NotifyUserActivation() {
  GetForwardingInterface()->NotifyUserActivation();
}
void LocalFrameInterceptorForTesting::AddMessageToConsole(::blink::mojom::blink::ConsoleMessageLevel level, const WTF::String& message, bool discard_duplicates) {
  GetForwardingInterface()->AddMessageToConsole(std::move(level), std::move(message), std::move(discard_duplicates));
}
void LocalFrameInterceptorForTesting::CheckCompleted() {
  GetForwardingInterface()->CheckCompleted();
}
void LocalFrameInterceptorForTesting::Collapse(bool collapsed) {
  GetForwardingInterface()->Collapse(std::move(collapsed));
}
void LocalFrameInterceptorForTesting::EnableViewSourceMode() {
  GetForwardingInterface()->EnableViewSourceMode();
}
void LocalFrameInterceptorForTesting::Focus() {
  GetForwardingInterface()->Focus();
}
void LocalFrameInterceptorForTesting::ClearFocusedElement() {
  GetForwardingInterface()->ClearFocusedElement();
}
void LocalFrameInterceptorForTesting::CopyImageAt(const ::gfx::Point& window_point) {
  GetForwardingInterface()->CopyImageAt(std::move(window_point));
}
void LocalFrameInterceptorForTesting::SaveImageAt(const ::gfx::Point& window_point) {
  GetForwardingInterface()->SaveImageAt(std::move(window_point));
}
void LocalFrameInterceptorForTesting::ReportBlinkFeatureUsage(const WTF::Vector<::blink::mojom::blink::WebFeature>& features) {
  GetForwardingInterface()->ReportBlinkFeatureUsage(std::move(features));
}
void LocalFrameInterceptorForTesting::RenderFallbackContent() {
  GetForwardingInterface()->RenderFallbackContent();
}
void LocalFrameInterceptorForTesting::BeforeUnload(bool is_reload, BeforeUnloadCallback callback) {
  GetForwardingInterface()->BeforeUnload(std::move(is_reload), std::move(callback));
}
void LocalFrameInterceptorForTesting::MediaPlayerActionAt(const ::gfx::Point& location, ::blink::mojom::blink::MediaPlayerActionPtr action) {
  GetForwardingInterface()->MediaPlayerActionAt(std::move(location), std::move(action));
}
void LocalFrameInterceptorForTesting::AdvanceFocusInForm(::blink::mojom::blink::FocusType focus_type) {
  GetForwardingInterface()->AdvanceFocusInForm(std::move(focus_type));
}
LocalFrameAsyncWaiter::LocalFrameAsyncWaiter(
    LocalFrame* proxy) : proxy_(proxy) {}

LocalFrameAsyncWaiter::~LocalFrameAsyncWaiter() = default;

void LocalFrameAsyncWaiter::GetTextSurroundingSelection(
    uint32_t max_length, ::WTF::String* out_content, uint32_t* out_start_offset, uint32_t* out_end_offset) {
  base::RunLoop loop;
  proxy_->GetTextSurroundingSelection(std::move(max_length),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::WTF::String* out_content
,
             uint32_t* out_start_offset
,
             uint32_t* out_end_offset
,
             const ::WTF::String& content,
             uint32_t start_offset,
             uint32_t end_offset) {*out_content = std::move(content);*out_start_offset = std::move(start_offset);*out_end_offset = std::move(end_offset);
            loop->Quit();
          },
          &loop,
          out_content,
          out_start_offset,
          out_end_offset));
  loop.Run();
}
void LocalFrameAsyncWaiter::BeforeUnload(
    bool is_reload, bool* out_proceed, ::base::TimeTicks* out_before_unload_start_time, ::base::TimeTicks* out_before_unload_end_time) {
  base::RunLoop loop;
  proxy_->BeforeUnload(std::move(is_reload),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_proceed
,
             ::base::TimeTicks* out_before_unload_start_time
,
             ::base::TimeTicks* out_before_unload_end_time
,
             bool proceed,
             ::base::TimeTicks before_unload_start_time,
             ::base::TimeTicks before_unload_end_time) {*out_proceed = std::move(proceed);*out_before_unload_start_time = std::move(before_unload_start_time);*out_before_unload_end_time = std::move(before_unload_end_time);
            loop->Quit();
          },
          &loop,
          out_proceed,
          out_before_unload_start_time,
          out_before_unload_end_time));
  loop.Run();
}



void RemoteFrameHostInterceptorForTesting::SetInheritedEffectiveTouchAction(::cc::TouchAction touch_action) {
  GetForwardingInterface()->SetInheritedEffectiveTouchAction(std::move(touch_action));
}
void RemoteFrameHostInterceptorForTesting::VisibilityChanged(::blink::mojom::blink::FrameVisibility visibility) {
  GetForwardingInterface()->VisibilityChanged(std::move(visibility));
}
void RemoteFrameHostInterceptorForTesting::DidFocusFrame() {
  GetForwardingInterface()->DidFocusFrame();
}
void RemoteFrameHostInterceptorForTesting::CheckCompleted() {
  GetForwardingInterface()->CheckCompleted();
}
RemoteFrameHostAsyncWaiter::RemoteFrameHostAsyncWaiter(
    RemoteFrameHost* proxy) : proxy_(proxy) {}

RemoteFrameHostAsyncWaiter::~RemoteFrameHostAsyncWaiter() = default;




void RemoteFrameInterceptorForTesting::WillEnterFullscreen() {
  GetForwardingInterface()->WillEnterFullscreen();
}
void RemoteFrameInterceptorForTesting::AddReplicatedContentSecurityPolicies(WTF::Vector<::network::mojom::blink::ContentSecurityPolicyHeaderPtr> headers) {
  GetForwardingInterface()->AddReplicatedContentSecurityPolicies(std::move(headers));
}
void RemoteFrameInterceptorForTesting::ResetReplicatedContentSecurityPolicy() {
  GetForwardingInterface()->ResetReplicatedContentSecurityPolicy();
}
void RemoteFrameInterceptorForTesting::EnforceInsecureNavigationsSet(const WTF::Vector<uint32_t>& set) {
  GetForwardingInterface()->EnforceInsecureNavigationsSet(std::move(set));
}
void RemoteFrameInterceptorForTesting::SetReplicatedOrigin(const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, bool is_potentially_trustworthy_unique_origin) {
  GetForwardingInterface()->SetReplicatedOrigin(std::move(origin), std::move(is_potentially_trustworthy_unique_origin));
}
void RemoteFrameInterceptorForTesting::SetReplicatedAdFrameType(::blink::mojom::blink::AdFrameType ad_frame_type) {
  GetForwardingInterface()->SetReplicatedAdFrameType(std::move(ad_frame_type));
}
void RemoteFrameInterceptorForTesting::DispatchLoadEventForFrameOwner() {
  GetForwardingInterface()->DispatchLoadEventForFrameOwner();
}
void RemoteFrameInterceptorForTesting::SetNeedsOcclusionTracking(bool needs_tracking) {
  GetForwardingInterface()->SetNeedsOcclusionTracking(std::move(needs_tracking));
}
void RemoteFrameInterceptorForTesting::Collapse(bool collapsed) {
  GetForwardingInterface()->Collapse(std::move(collapsed));
}
void RemoteFrameInterceptorForTesting::Focus() {
  GetForwardingInterface()->Focus();
}
void RemoteFrameInterceptorForTesting::SetHadStickyUserActivationBeforeNavigation(bool has_gesture) {
  GetForwardingInterface()->SetHadStickyUserActivationBeforeNavigation(std::move(has_gesture));
}
void RemoteFrameInterceptorForTesting::BubbleLogicalScroll(::blink::mojom::blink::ScrollDirection direction, ::ui::input_types::ScrollGranularity granularity) {
  GetForwardingInterface()->BubbleLogicalScroll(std::move(direction), std::move(granularity));
}
void RemoteFrameInterceptorForTesting::UpdateUserActivationState(::blink::mojom::blink::UserActivationUpdateType state_update_type) {
  GetForwardingInterface()->UpdateUserActivationState(std::move(state_update_type));
}
void RemoteFrameInterceptorForTesting::SetEmbeddingToken(const ::base::UnguessableToken& embedding_token) {
  GetForwardingInterface()->SetEmbeddingToken(std::move(embedding_token));
}
void RemoteFrameInterceptorForTesting::SetPageFocus(bool is_focused) {
  GetForwardingInterface()->SetPageFocus(std::move(is_focused));
}
void RemoteFrameInterceptorForTesting::RenderFallbackContent() {
  GetForwardingInterface()->RenderFallbackContent();
}
void RemoteFrameInterceptorForTesting::AddResourceTimingFromChild(::blink::mojom::blink::ResourceTimingInfoPtr timing) {
  GetForwardingInterface()->AddResourceTimingFromChild(std::move(timing));
}
void RemoteFrameInterceptorForTesting::ScrollRectToVisible(const ::blink::WebRect& rect, ::blink::mojom::blink::ScrollIntoViewParamsPtr params) {
  GetForwardingInterface()->ScrollRectToVisible(std::move(rect), std::move(params));
}
void RemoteFrameInterceptorForTesting::DidStartLoading() {
  GetForwardingInterface()->DidStartLoading();
}
void RemoteFrameInterceptorForTesting::DidStopLoading() {
  GetForwardingInterface()->DidStopLoading();
}
void RemoteFrameInterceptorForTesting::IntrinsicSizingInfoOfChildChanged(::blink::mojom::blink::IntrinsicSizingInfoPtr sizing_info) {
  GetForwardingInterface()->IntrinsicSizingInfoOfChildChanged(std::move(sizing_info));
}
RemoteFrameAsyncWaiter::RemoteFrameAsyncWaiter(
    RemoteFrame* proxy) : proxy_(proxy) {}

RemoteFrameAsyncWaiter::~RemoteFrameAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif