// third_party/blink/public/mojom/frame/intrinsic_sizing_info.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "third_party/blink/public/mojom/frame/intrinsic_sizing_info.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "third_party/blink/public/mojom/frame/intrinsic_sizing_info.mojom-params-data.h"
#include "third_party/blink/public/mojom/frame/intrinsic_sizing_info.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/frame/intrinsic_sizing_info.mojom-import-headers.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_INTRINSIC_SIZING_INFO_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_INTRINSIC_SIZING_INFO_MOJOM_JUMBO_H_
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#endif
namespace blink {
namespace mojom {
IntrinsicSizingInfo::IntrinsicSizingInfo()
    : size(),
      aspect_ratio(),
      has_width(),
      has_height() {}

IntrinsicSizingInfo::IntrinsicSizingInfo(
    const ::gfx::SizeF& size_in,
    const ::gfx::SizeF& aspect_ratio_in,
    bool has_width_in,
    bool has_height_in)
    : size(std::move(size_in)),
      aspect_ratio(std::move(aspect_ratio_in)),
      has_width(std::move(has_width_in)),
      has_height(std::move(has_height_in)) {}

IntrinsicSizingInfo::~IntrinsicSizingInfo() = default;

bool IntrinsicSizingInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace blink

namespace mojo {


// static
bool StructTraits<::blink::mojom::IntrinsicSizingInfo::DataView, ::blink::mojom::IntrinsicSizingInfoPtr>::Read(
    ::blink::mojom::IntrinsicSizingInfo::DataView input,
    ::blink::mojom::IntrinsicSizingInfoPtr* output) {
  bool success = true;
  ::blink::mojom::IntrinsicSizingInfoPtr result(::blink::mojom::IntrinsicSizingInfo::New());
  
      if (success && !input.ReadSize(&result->size))
        success = false;
      if (success && !input.ReadAspectRatio(&result->aspect_ratio))
        success = false;
      if (success)
        result->has_width = input.has_width();
      if (success)
        result->has_height = input.has_height();
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif