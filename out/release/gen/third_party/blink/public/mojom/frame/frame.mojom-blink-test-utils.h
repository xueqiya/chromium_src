// third_party/blink/public/mojom/frame/frame.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/frame/frame.mojom-blink.h"
#include "third_party/blink/renderer/platform/platform_export.h"


namespace blink {
namespace mojom {
namespace blink {


class PLATFORM_EXPORT LocalFrameHostInterceptorForTesting : public LocalFrameHost {
  virtual LocalFrameHost* GetForwardingInterface() = 0;
  void EnterFullscreen(::blink::mojom::blink::FullscreenOptionsPtr options) override;
  void ExitFullscreen() override;
  void FullscreenStateChanged(bool is_fullscreen) override;
  void RegisterProtocolHandler(const WTF::String& scheme, const ::blink::KURL& url, const ::WTF::String& title, bool user_gesture) override;
  void UnregisterProtocolHandler(const WTF::String& scheme, const ::blink::KURL& url, bool user_gesture) override;
  void DidDisplayInsecureContent() override;
  void DidContainInsecureFormAction() override;
  void DocumentAvailableInMainFrame(bool uses_temporary_zoom_level) override;
  void SetNeedsOcclusionTracking(bool needs_tracking) override;
  void LifecycleStateChanged(::blink::mojom::blink::FrameLifecycleState state) override;
  void EvictFromBackForwardCache() override;
  void VisibilityChanged(::blink::mojom::blink::FrameVisibility visibility) override;
  void DidChangeThemeColor(const base::Optional<::SkColor>& theme_color) override;
  void DidFocusFrame() override;
  void EnforceInsecureRequestPolicy(uint8_t policy_bitmap) override;
  void EnforceInsecureNavigationsSet(const WTF::Vector<uint32_t>& set) override;
  void DidChangeActiveSchedulerTrackedFeatures(uint64_t features_mask) override;
  void SuddenTerminationDisablerChanged(bool present, ::blink::mojom::blink::SuddenTerminationDisablerType disabler_type) override;
  void HadStickyUserActivationBeforeNavigationChanged(bool has_gesture) override;
  void ScrollRectToVisibleInParentFrame(const ::blink::WebRect& rect_to_scroll, ::blink::mojom::blink::ScrollIntoViewParamsPtr params) override;
  void BubbleLogicalScrollInParentFrame(::blink::mojom::blink::ScrollDirection direction, ::ui::input_types::ScrollGranularity granularity) override;
  void DidAccessInitialDocument() override;
  void DidBlockNavigation(const ::blink::KURL& blocked_url, const ::blink::KURL& initiator_url, ::blink::mojom::blink::NavigationBlockedReason reason) override;
  void DidChangeLoadProgress(double load_progress) override;
  void DispatchLoad() override;
  void GoToEntryAtOffset(int32_t offset, bool has_user_gesture) override;
  void RenderFallbackContentInParentProcess() override;
  void HandleAccessibilityFindInPageResult(FindInPageResultAXParamsPtr params) override;
  void HandleAccessibilityFindInPageTermination() override;
  void DocumentOnLoadCompleted() override;
  void ForwardResourceTimingToParent(::blink::mojom::blink::ResourceTimingInfoPtr timing) override;
  void DidFinishDocumentLoad() override;
  void RunModalAlertDialog(const ::WTF::String& alert_message, RunModalAlertDialogCallback callback) override;
  void RunModalConfirmDialog(const ::WTF::String& alert_message, RunModalConfirmDialogCallback callback) override;
  void RunModalPromptDialog(const ::WTF::String& alert_message, const ::WTF::String& default_value, RunModalPromptDialogCallback callback) override;
  void RunBeforeUnloadConfirm(bool is_reload, RunBeforeUnloadConfirmCallback callback) override;
};
class PLATFORM_EXPORT LocalFrameHostAsyncWaiter {
 public:
  explicit LocalFrameHostAsyncWaiter(LocalFrameHost* proxy);
  ~LocalFrameHostAsyncWaiter();
  void RunModalAlertDialog(
      const ::WTF::String& alert_message);
  void RunModalConfirmDialog(
      const ::WTF::String& alert_message, bool* out_success);
  void RunModalPromptDialog(
      const ::WTF::String& alert_message, const ::WTF::String& default_value, bool* out_success, ::WTF::String* out_result);
  void RunBeforeUnloadConfirm(
      bool is_reload, bool* out_success);

 private:
  LocalFrameHost* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(LocalFrameHostAsyncWaiter);
};


class PLATFORM_EXPORT LocalFrameInterceptorForTesting : public LocalFrame {
  virtual LocalFrame* GetForwardingInterface() = 0;
  void GetTextSurroundingSelection(uint32_t max_length, GetTextSurroundingSelectionCallback callback) override;
  void SendInterventionReport(const WTF::String& id, const WTF::String& message) override;
  void NotifyUserActivation() override;
  void AddMessageToConsole(::blink::mojom::blink::ConsoleMessageLevel level, const WTF::String& message, bool discard_duplicates) override;
  void CheckCompleted() override;
  void Collapse(bool collapsed) override;
  void EnableViewSourceMode() override;
  void Focus() override;
  void ClearFocusedElement() override;
  void CopyImageAt(const ::gfx::Point& window_point) override;
  void SaveImageAt(const ::gfx::Point& window_point) override;
  void ReportBlinkFeatureUsage(const WTF::Vector<::blink::mojom::blink::WebFeature>& features) override;
  void RenderFallbackContent() override;
  void BeforeUnload(bool is_reload, BeforeUnloadCallback callback) override;
  void MediaPlayerActionAt(const ::gfx::Point& location, ::blink::mojom::blink::MediaPlayerActionPtr action) override;
  void AdvanceFocusInForm(::blink::mojom::blink::FocusType focus_type) override;
};
class PLATFORM_EXPORT LocalFrameAsyncWaiter {
 public:
  explicit LocalFrameAsyncWaiter(LocalFrame* proxy);
  ~LocalFrameAsyncWaiter();
  void GetTextSurroundingSelection(
      uint32_t max_length, ::WTF::String* out_content, uint32_t* out_start_offset, uint32_t* out_end_offset);
  void BeforeUnload(
      bool is_reload, bool* out_proceed, ::base::TimeTicks* out_before_unload_start_time, ::base::TimeTicks* out_before_unload_end_time);

 private:
  LocalFrame* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(LocalFrameAsyncWaiter);
};


class PLATFORM_EXPORT RemoteFrameHostInterceptorForTesting : public RemoteFrameHost {
  virtual RemoteFrameHost* GetForwardingInterface() = 0;
  void SetInheritedEffectiveTouchAction(::cc::TouchAction touch_action) override;
  void VisibilityChanged(::blink::mojom::blink::FrameVisibility visibility) override;
  void DidFocusFrame() override;
  void CheckCompleted() override;
};
class PLATFORM_EXPORT RemoteFrameHostAsyncWaiter {
 public:
  explicit RemoteFrameHostAsyncWaiter(RemoteFrameHost* proxy);
  ~RemoteFrameHostAsyncWaiter();

 private:
  RemoteFrameHost* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(RemoteFrameHostAsyncWaiter);
};


class PLATFORM_EXPORT RemoteFrameInterceptorForTesting : public RemoteFrame {
  virtual RemoteFrame* GetForwardingInterface() = 0;
  void WillEnterFullscreen() override;
  void AddReplicatedContentSecurityPolicies(WTF::Vector<::network::mojom::blink::ContentSecurityPolicyHeaderPtr> headers) override;
  void ResetReplicatedContentSecurityPolicy() override;
  void EnforceInsecureNavigationsSet(const WTF::Vector<uint32_t>& set) override;
  void SetReplicatedOrigin(const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, bool is_potentially_trustworthy_unique_origin) override;
  void SetReplicatedAdFrameType(::blink::mojom::blink::AdFrameType ad_frame_type) override;
  void DispatchLoadEventForFrameOwner() override;
  void SetNeedsOcclusionTracking(bool needs_tracking) override;
  void Collapse(bool collapsed) override;
  void Focus() override;
  void SetHadStickyUserActivationBeforeNavigation(bool has_gesture) override;
  void BubbleLogicalScroll(::blink::mojom::blink::ScrollDirection direction, ::ui::input_types::ScrollGranularity granularity) override;
  void UpdateUserActivationState(::blink::mojom::blink::UserActivationUpdateType state_update_type) override;
  void SetEmbeddingToken(const ::base::UnguessableToken& embedding_token) override;
  void SetPageFocus(bool is_focused) override;
  void RenderFallbackContent() override;
  void AddResourceTimingFromChild(::blink::mojom::blink::ResourceTimingInfoPtr timing) override;
  void ScrollRectToVisible(const ::blink::WebRect& rect, ::blink::mojom::blink::ScrollIntoViewParamsPtr params) override;
  void DidStartLoading() override;
  void DidStopLoading() override;
  void IntrinsicSizingInfoOfChildChanged(::blink::mojom::blink::IntrinsicSizingInfoPtr sizing_info) override;
};
class PLATFORM_EXPORT RemoteFrameAsyncWaiter {
 public:
  explicit RemoteFrameAsyncWaiter(RemoteFrame* proxy);
  ~RemoteFrameAsyncWaiter();

 private:
  RemoteFrame* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(RemoteFrameAsyncWaiter);
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_TEST_UTILS_H_