// third_party/blink/public/mojom/frame/frame.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace blink {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_EnterFullscreen_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_EnterFullscreen_Params_Data));
      new (data()) LocalFrameHost_EnterFullscreen_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_EnterFullscreen_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_EnterFullscreen_Params_Data>(index_);
    }
    LocalFrameHost_EnterFullscreen_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FullscreenOptions_Data> options;

 private:
  LocalFrameHost_EnterFullscreen_Params_Data();
  ~LocalFrameHost_EnterFullscreen_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_EnterFullscreen_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_EnterFullscreen_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_ExitFullscreen_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_ExitFullscreen_Params_Data));
      new (data()) LocalFrameHost_ExitFullscreen_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_ExitFullscreen_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_ExitFullscreen_Params_Data>(index_);
    }
    LocalFrameHost_ExitFullscreen_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_ExitFullscreen_Params_Data();
  ~LocalFrameHost_ExitFullscreen_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_ExitFullscreen_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_ExitFullscreen_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_FullscreenStateChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_FullscreenStateChanged_Params_Data));
      new (data()) LocalFrameHost_FullscreenStateChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_FullscreenStateChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_FullscreenStateChanged_Params_Data>(index_);
    }
    LocalFrameHost_FullscreenStateChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_fullscreen : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrameHost_FullscreenStateChanged_Params_Data();
  ~LocalFrameHost_FullscreenStateChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_FullscreenStateChanged_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_FullscreenStateChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RegisterProtocolHandler_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_RegisterProtocolHandler_Params_Data));
      new (data()) LocalFrameHost_RegisterProtocolHandler_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_RegisterProtocolHandler_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_RegisterProtocolHandler_Params_Data>(index_);
    }
    LocalFrameHost_RegisterProtocolHandler_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> scheme;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> title;
  uint8_t user_gesture : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrameHost_RegisterProtocolHandler_Params_Data();
  ~LocalFrameHost_RegisterProtocolHandler_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RegisterProtocolHandler_Params_Data) == 40,
              "Bad sizeof(LocalFrameHost_RegisterProtocolHandler_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_UnregisterProtocolHandler_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_UnregisterProtocolHandler_Params_Data));
      new (data()) LocalFrameHost_UnregisterProtocolHandler_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_UnregisterProtocolHandler_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_UnregisterProtocolHandler_Params_Data>(index_);
    }
    LocalFrameHost_UnregisterProtocolHandler_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> scheme;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  uint8_t user_gesture : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrameHost_UnregisterProtocolHandler_Params_Data();
  ~LocalFrameHost_UnregisterProtocolHandler_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_UnregisterProtocolHandler_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_UnregisterProtocolHandler_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidDisplayInsecureContent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DidDisplayInsecureContent_Params_Data));
      new (data()) LocalFrameHost_DidDisplayInsecureContent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DidDisplayInsecureContent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DidDisplayInsecureContent_Params_Data>(index_);
    }
    LocalFrameHost_DidDisplayInsecureContent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_DidDisplayInsecureContent_Params_Data();
  ~LocalFrameHost_DidDisplayInsecureContent_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidDisplayInsecureContent_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DidDisplayInsecureContent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidContainInsecureFormAction_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DidContainInsecureFormAction_Params_Data));
      new (data()) LocalFrameHost_DidContainInsecureFormAction_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DidContainInsecureFormAction_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DidContainInsecureFormAction_Params_Data>(index_);
    }
    LocalFrameHost_DidContainInsecureFormAction_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_DidContainInsecureFormAction_Params_Data();
  ~LocalFrameHost_DidContainInsecureFormAction_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidContainInsecureFormAction_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DidContainInsecureFormAction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DocumentAvailableInMainFrame_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DocumentAvailableInMainFrame_Params_Data));
      new (data()) LocalFrameHost_DocumentAvailableInMainFrame_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DocumentAvailableInMainFrame_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DocumentAvailableInMainFrame_Params_Data>(index_);
    }
    LocalFrameHost_DocumentAvailableInMainFrame_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t uses_temporary_zoom_level : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrameHost_DocumentAvailableInMainFrame_Params_Data();
  ~LocalFrameHost_DocumentAvailableInMainFrame_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DocumentAvailableInMainFrame_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_DocumentAvailableInMainFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_SetNeedsOcclusionTracking_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_SetNeedsOcclusionTracking_Params_Data));
      new (data()) LocalFrameHost_SetNeedsOcclusionTracking_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_SetNeedsOcclusionTracking_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_SetNeedsOcclusionTracking_Params_Data>(index_);
    }
    LocalFrameHost_SetNeedsOcclusionTracking_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t needs_tracking : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrameHost_SetNeedsOcclusionTracking_Params_Data();
  ~LocalFrameHost_SetNeedsOcclusionTracking_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_SetNeedsOcclusionTracking_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_SetNeedsOcclusionTracking_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_LifecycleStateChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_LifecycleStateChanged_Params_Data));
      new (data()) LocalFrameHost_LifecycleStateChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_LifecycleStateChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_LifecycleStateChanged_Params_Data>(index_);
    }
    LocalFrameHost_LifecycleStateChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state;
  uint8_t padfinal_[4];

 private:
  LocalFrameHost_LifecycleStateChanged_Params_Data();
  ~LocalFrameHost_LifecycleStateChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_LifecycleStateChanged_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_LifecycleStateChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_EvictFromBackForwardCache_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_EvictFromBackForwardCache_Params_Data));
      new (data()) LocalFrameHost_EvictFromBackForwardCache_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_EvictFromBackForwardCache_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_EvictFromBackForwardCache_Params_Data>(index_);
    }
    LocalFrameHost_EvictFromBackForwardCache_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_EvictFromBackForwardCache_Params_Data();
  ~LocalFrameHost_EvictFromBackForwardCache_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_EvictFromBackForwardCache_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_EvictFromBackForwardCache_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_VisibilityChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_VisibilityChanged_Params_Data));
      new (data()) LocalFrameHost_VisibilityChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_VisibilityChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_VisibilityChanged_Params_Data>(index_);
    }
    LocalFrameHost_VisibilityChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t visibility;
  uint8_t padfinal_[4];

 private:
  LocalFrameHost_VisibilityChanged_Params_Data();
  ~LocalFrameHost_VisibilityChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_VisibilityChanged_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_VisibilityChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeThemeColor_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DidChangeThemeColor_Params_Data));
      new (data()) LocalFrameHost_DidChangeThemeColor_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DidChangeThemeColor_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DidChangeThemeColor_Params_Data>(index_);
    }
    LocalFrameHost_DidChangeThemeColor_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> theme_color;

 private:
  LocalFrameHost_DidChangeThemeColor_Params_Data();
  ~LocalFrameHost_DidChangeThemeColor_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeThemeColor_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_DidChangeThemeColor_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidFocusFrame_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DidFocusFrame_Params_Data));
      new (data()) LocalFrameHost_DidFocusFrame_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DidFocusFrame_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DidFocusFrame_Params_Data>(index_);
    }
    LocalFrameHost_DidFocusFrame_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_DidFocusFrame_Params_Data();
  ~LocalFrameHost_DidFocusFrame_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidFocusFrame_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DidFocusFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data));
      new (data()) LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data>(index_);
    }
    LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t policy_bitmap;
  uint8_t padfinal_[7];

 private:
  LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data();
  ~LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data));
      new (data()) LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data>(index_);
    }
    LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint32_t>> set;

 private:
  LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data();
  ~LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data));
      new (data()) LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data>(index_);
    }
    LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t features_mask;

 private:
  LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data();
  ~LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data));
      new (data()) LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data>(index_);
    }
    LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t present : 1;
  uint8_t pad0_[3];
  int32_t disabler_type;

 private:
  LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data();
  ~LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data));
      new (data()) LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data>(index_);
    }
    LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t has_gesture : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data();
  ~LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data));
      new (data()) LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data>(index_);
    }
    LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect_to_scroll;
  mojo::internal::Pointer<::blink::mojom::internal::ScrollIntoViewParams_Data> params;

 private:
  LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data();
  ~LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data));
      new (data()) LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data>(index_);
    }
    LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t direction;
  int32_t granularity;

 private:
  LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data();
  ~LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidAccessInitialDocument_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DidAccessInitialDocument_Params_Data));
      new (data()) LocalFrameHost_DidAccessInitialDocument_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DidAccessInitialDocument_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DidAccessInitialDocument_Params_Data>(index_);
    }
    LocalFrameHost_DidAccessInitialDocument_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_DidAccessInitialDocument_Params_Data();
  ~LocalFrameHost_DidAccessInitialDocument_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidAccessInitialDocument_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DidAccessInitialDocument_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidBlockNavigation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DidBlockNavigation_Params_Data));
      new (data()) LocalFrameHost_DidBlockNavigation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DidBlockNavigation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DidBlockNavigation_Params_Data>(index_);
    }
    LocalFrameHost_DidBlockNavigation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> blocked_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> initiator_url;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  LocalFrameHost_DidBlockNavigation_Params_Data();
  ~LocalFrameHost_DidBlockNavigation_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidBlockNavigation_Params_Data) == 32,
              "Bad sizeof(LocalFrameHost_DidBlockNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidChangeLoadProgress_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DidChangeLoadProgress_Params_Data));
      new (data()) LocalFrameHost_DidChangeLoadProgress_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DidChangeLoadProgress_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DidChangeLoadProgress_Params_Data>(index_);
    }
    LocalFrameHost_DidChangeLoadProgress_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  double load_progress;

 private:
  LocalFrameHost_DidChangeLoadProgress_Params_Data();
  ~LocalFrameHost_DidChangeLoadProgress_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidChangeLoadProgress_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_DidChangeLoadProgress_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DispatchLoad_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DispatchLoad_Params_Data));
      new (data()) LocalFrameHost_DispatchLoad_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DispatchLoad_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DispatchLoad_Params_Data>(index_);
    }
    LocalFrameHost_DispatchLoad_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_DispatchLoad_Params_Data();
  ~LocalFrameHost_DispatchLoad_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DispatchLoad_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DispatchLoad_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_GoToEntryAtOffset_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_GoToEntryAtOffset_Params_Data));
      new (data()) LocalFrameHost_GoToEntryAtOffset_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_GoToEntryAtOffset_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_GoToEntryAtOffset_Params_Data>(index_);
    }
    LocalFrameHost_GoToEntryAtOffset_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t offset;
  uint8_t has_user_gesture : 1;
  uint8_t padfinal_[3];

 private:
  LocalFrameHost_GoToEntryAtOffset_Params_Data();
  ~LocalFrameHost_GoToEntryAtOffset_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_GoToEntryAtOffset_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_GoToEntryAtOffset_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data));
      new (data()) LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data>(index_);
    }
    LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data();
  ~LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data));
      new (data()) LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data>(index_);
    }
    LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::FindInPageResultAXParams_Data> params;

 private:
  LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data();
  ~LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data));
      new (data()) LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data>(index_);
    }
    LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data();
  ~LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DocumentOnLoadCompleted_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DocumentOnLoadCompleted_Params_Data));
      new (data()) LocalFrameHost_DocumentOnLoadCompleted_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DocumentOnLoadCompleted_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DocumentOnLoadCompleted_Params_Data>(index_);
    }
    LocalFrameHost_DocumentOnLoadCompleted_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_DocumentOnLoadCompleted_Params_Data();
  ~LocalFrameHost_DocumentOnLoadCompleted_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DocumentOnLoadCompleted_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DocumentOnLoadCompleted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_ForwardResourceTimingToParent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_ForwardResourceTimingToParent_Params_Data));
      new (data()) LocalFrameHost_ForwardResourceTimingToParent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_ForwardResourceTimingToParent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_ForwardResourceTimingToParent_Params_Data>(index_);
    }
    LocalFrameHost_ForwardResourceTimingToParent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ResourceTimingInfo_Data> timing;

 private:
  LocalFrameHost_ForwardResourceTimingToParent_Params_Data();
  ~LocalFrameHost_ForwardResourceTimingToParent_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_ForwardResourceTimingToParent_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_ForwardResourceTimingToParent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_DidFinishDocumentLoad_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_DidFinishDocumentLoad_Params_Data));
      new (data()) LocalFrameHost_DidFinishDocumentLoad_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_DidFinishDocumentLoad_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_DidFinishDocumentLoad_Params_Data>(index_);
    }
    LocalFrameHost_DidFinishDocumentLoad_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_DidFinishDocumentLoad_Params_Data();
  ~LocalFrameHost_DidFinishDocumentLoad_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_DidFinishDocumentLoad_Params_Data) == 8,
              "Bad sizeof(LocalFrameHost_DidFinishDocumentLoad_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalAlertDialog_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_RunModalAlertDialog_Params_Data));
      new (data()) LocalFrameHost_RunModalAlertDialog_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_RunModalAlertDialog_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_RunModalAlertDialog_Params_Data>(index_);
    }
    LocalFrameHost_RunModalAlertDialog_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> alert_message;

 private:
  LocalFrameHost_RunModalAlertDialog_Params_Data();
  ~LocalFrameHost_RunModalAlertDialog_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalAlertDialog_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_RunModalAlertDialog_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalAlertDialog_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_RunModalAlertDialog_ResponseParams_Data));
      new (data()) LocalFrameHost_RunModalAlertDialog_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_RunModalAlertDialog_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_RunModalAlertDialog_ResponseParams_Data>(index_);
    }
    LocalFrameHost_RunModalAlertDialog_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrameHost_RunModalAlertDialog_ResponseParams_Data();
  ~LocalFrameHost_RunModalAlertDialog_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalAlertDialog_ResponseParams_Data) == 8,
              "Bad sizeof(LocalFrameHost_RunModalAlertDialog_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalConfirmDialog_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_RunModalConfirmDialog_Params_Data));
      new (data()) LocalFrameHost_RunModalConfirmDialog_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_RunModalConfirmDialog_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_RunModalConfirmDialog_Params_Data>(index_);
    }
    LocalFrameHost_RunModalConfirmDialog_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> alert_message;

 private:
  LocalFrameHost_RunModalConfirmDialog_Params_Data();
  ~LocalFrameHost_RunModalConfirmDialog_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalConfirmDialog_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_RunModalConfirmDialog_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data));
      new (data()) LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data>(index_);
    }
    LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data();
  ~LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data) == 16,
              "Bad sizeof(LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalPromptDialog_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_RunModalPromptDialog_Params_Data));
      new (data()) LocalFrameHost_RunModalPromptDialog_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_RunModalPromptDialog_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_RunModalPromptDialog_Params_Data>(index_);
    }
    LocalFrameHost_RunModalPromptDialog_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> alert_message;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> default_value;

 private:
  LocalFrameHost_RunModalPromptDialog_Params_Data();
  ~LocalFrameHost_RunModalPromptDialog_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalPromptDialog_Params_Data) == 24,
              "Bad sizeof(LocalFrameHost_RunModalPromptDialog_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunModalPromptDialog_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_RunModalPromptDialog_ResponseParams_Data));
      new (data()) LocalFrameHost_RunModalPromptDialog_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_RunModalPromptDialog_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_RunModalPromptDialog_ResponseParams_Data>(index_);
    }
    LocalFrameHost_RunModalPromptDialog_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> result;

 private:
  LocalFrameHost_RunModalPromptDialog_ResponseParams_Data();
  ~LocalFrameHost_RunModalPromptDialog_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunModalPromptDialog_ResponseParams_Data) == 24,
              "Bad sizeof(LocalFrameHost_RunModalPromptDialog_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunBeforeUnloadConfirm_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_RunBeforeUnloadConfirm_Params_Data));
      new (data()) LocalFrameHost_RunBeforeUnloadConfirm_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_RunBeforeUnloadConfirm_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_RunBeforeUnloadConfirm_Params_Data>(index_);
    }
    LocalFrameHost_RunBeforeUnloadConfirm_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_reload : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrameHost_RunBeforeUnloadConfirm_Params_Data();
  ~LocalFrameHost_RunBeforeUnloadConfirm_Params_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunBeforeUnloadConfirm_Params_Data) == 16,
              "Bad sizeof(LocalFrameHost_RunBeforeUnloadConfirm_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data));
      new (data()) LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data>(index_);
    }
    LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data();
  ~LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data) == 16,
              "Bad sizeof(LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetTextSurroundingSelection_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_GetTextSurroundingSelection_Params_Data));
      new (data()) LocalFrame_GetTextSurroundingSelection_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_GetTextSurroundingSelection_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_GetTextSurroundingSelection_Params_Data>(index_);
    }
    LocalFrame_GetTextSurroundingSelection_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t max_length;
  uint8_t padfinal_[4];

 private:
  LocalFrame_GetTextSurroundingSelection_Params_Data();
  ~LocalFrame_GetTextSurroundingSelection_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetTextSurroundingSelection_Params_Data) == 16,
              "Bad sizeof(LocalFrame_GetTextSurroundingSelection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_GetTextSurroundingSelection_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_GetTextSurroundingSelection_ResponseParams_Data));
      new (data()) LocalFrame_GetTextSurroundingSelection_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_GetTextSurroundingSelection_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_GetTextSurroundingSelection_ResponseParams_Data>(index_);
    }
    LocalFrame_GetTextSurroundingSelection_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> content;
  uint32_t start_offset;
  uint32_t end_offset;

 private:
  LocalFrame_GetTextSurroundingSelection_ResponseParams_Data();
  ~LocalFrame_GetTextSurroundingSelection_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_GetTextSurroundingSelection_ResponseParams_Data) == 24,
              "Bad sizeof(LocalFrame_GetTextSurroundingSelection_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_SendInterventionReport_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_SendInterventionReport_Params_Data));
      new (data()) LocalFrame_SendInterventionReport_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_SendInterventionReport_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_SendInterventionReport_Params_Data>(index_);
    }
    LocalFrame_SendInterventionReport_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  LocalFrame_SendInterventionReport_Params_Data();
  ~LocalFrame_SendInterventionReport_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_SendInterventionReport_Params_Data) == 24,
              "Bad sizeof(LocalFrame_SendInterventionReport_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_NotifyUserActivation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_NotifyUserActivation_Params_Data));
      new (data()) LocalFrame_NotifyUserActivation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_NotifyUserActivation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_NotifyUserActivation_Params_Data>(index_);
    }
    LocalFrame_NotifyUserActivation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrame_NotifyUserActivation_Params_Data();
  ~LocalFrame_NotifyUserActivation_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_NotifyUserActivation_Params_Data) == 8,
              "Bad sizeof(LocalFrame_NotifyUserActivation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_AddMessageToConsole_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_AddMessageToConsole_Params_Data));
      new (data()) LocalFrame_AddMessageToConsole_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_AddMessageToConsole_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_AddMessageToConsole_Params_Data>(index_);
    }
    LocalFrame_AddMessageToConsole_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t level;
  uint8_t discard_duplicates : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  LocalFrame_AddMessageToConsole_Params_Data();
  ~LocalFrame_AddMessageToConsole_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_AddMessageToConsole_Params_Data) == 24,
              "Bad sizeof(LocalFrame_AddMessageToConsole_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_CheckCompleted_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_CheckCompleted_Params_Data));
      new (data()) LocalFrame_CheckCompleted_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_CheckCompleted_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_CheckCompleted_Params_Data>(index_);
    }
    LocalFrame_CheckCompleted_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrame_CheckCompleted_Params_Data();
  ~LocalFrame_CheckCompleted_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_CheckCompleted_Params_Data) == 8,
              "Bad sizeof(LocalFrame_CheckCompleted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_Collapse_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_Collapse_Params_Data));
      new (data()) LocalFrame_Collapse_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_Collapse_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_Collapse_Params_Data>(index_);
    }
    LocalFrame_Collapse_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t collapsed : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrame_Collapse_Params_Data();
  ~LocalFrame_Collapse_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_Collapse_Params_Data) == 16,
              "Bad sizeof(LocalFrame_Collapse_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_EnableViewSourceMode_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_EnableViewSourceMode_Params_Data));
      new (data()) LocalFrame_EnableViewSourceMode_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_EnableViewSourceMode_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_EnableViewSourceMode_Params_Data>(index_);
    }
    LocalFrame_EnableViewSourceMode_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrame_EnableViewSourceMode_Params_Data();
  ~LocalFrame_EnableViewSourceMode_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_EnableViewSourceMode_Params_Data) == 8,
              "Bad sizeof(LocalFrame_EnableViewSourceMode_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_Focus_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_Focus_Params_Data));
      new (data()) LocalFrame_Focus_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_Focus_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_Focus_Params_Data>(index_);
    }
    LocalFrame_Focus_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrame_Focus_Params_Data();
  ~LocalFrame_Focus_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_Focus_Params_Data) == 8,
              "Bad sizeof(LocalFrame_Focus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_ClearFocusedElement_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_ClearFocusedElement_Params_Data));
      new (data()) LocalFrame_ClearFocusedElement_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_ClearFocusedElement_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_ClearFocusedElement_Params_Data>(index_);
    }
    LocalFrame_ClearFocusedElement_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrame_ClearFocusedElement_Params_Data();
  ~LocalFrame_ClearFocusedElement_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_ClearFocusedElement_Params_Data) == 8,
              "Bad sizeof(LocalFrame_ClearFocusedElement_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_CopyImageAt_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_CopyImageAt_Params_Data));
      new (data()) LocalFrame_CopyImageAt_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_CopyImageAt_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_CopyImageAt_Params_Data>(index_);
    }
    LocalFrame_CopyImageAt_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> window_point;

 private:
  LocalFrame_CopyImageAt_Params_Data();
  ~LocalFrame_CopyImageAt_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_CopyImageAt_Params_Data) == 16,
              "Bad sizeof(LocalFrame_CopyImageAt_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_SaveImageAt_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_SaveImageAt_Params_Data));
      new (data()) LocalFrame_SaveImageAt_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_SaveImageAt_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_SaveImageAt_Params_Data>(index_);
    }
    LocalFrame_SaveImageAt_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> window_point;

 private:
  LocalFrame_SaveImageAt_Params_Data();
  ~LocalFrame_SaveImageAt_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_SaveImageAt_Params_Data) == 16,
              "Bad sizeof(LocalFrame_SaveImageAt_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_ReportBlinkFeatureUsage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_ReportBlinkFeatureUsage_Params_Data));
      new (data()) LocalFrame_ReportBlinkFeatureUsage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_ReportBlinkFeatureUsage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_ReportBlinkFeatureUsage_Params_Data>(index_);
    }
    LocalFrame_ReportBlinkFeatureUsage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> features;

 private:
  LocalFrame_ReportBlinkFeatureUsage_Params_Data();
  ~LocalFrame_ReportBlinkFeatureUsage_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_ReportBlinkFeatureUsage_Params_Data) == 16,
              "Bad sizeof(LocalFrame_ReportBlinkFeatureUsage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_RenderFallbackContent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_RenderFallbackContent_Params_Data));
      new (data()) LocalFrame_RenderFallbackContent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_RenderFallbackContent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_RenderFallbackContent_Params_Data>(index_);
    }
    LocalFrame_RenderFallbackContent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  LocalFrame_RenderFallbackContent_Params_Data();
  ~LocalFrame_RenderFallbackContent_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_RenderFallbackContent_Params_Data) == 8,
              "Bad sizeof(LocalFrame_RenderFallbackContent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_BeforeUnload_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_BeforeUnload_Params_Data));
      new (data()) LocalFrame_BeforeUnload_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_BeforeUnload_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_BeforeUnload_Params_Data>(index_);
    }
    LocalFrame_BeforeUnload_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_reload : 1;
  uint8_t padfinal_[7];

 private:
  LocalFrame_BeforeUnload_Params_Data();
  ~LocalFrame_BeforeUnload_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_BeforeUnload_Params_Data) == 16,
              "Bad sizeof(LocalFrame_BeforeUnload_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_BeforeUnload_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_BeforeUnload_ResponseParams_Data));
      new (data()) LocalFrame_BeforeUnload_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_BeforeUnload_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_BeforeUnload_ResponseParams_Data>(index_);
    }
    LocalFrame_BeforeUnload_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t proceed : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> before_unload_start_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> before_unload_end_time;

 private:
  LocalFrame_BeforeUnload_ResponseParams_Data();
  ~LocalFrame_BeforeUnload_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalFrame_BeforeUnload_ResponseParams_Data) == 32,
              "Bad sizeof(LocalFrame_BeforeUnload_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_MediaPlayerActionAt_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_MediaPlayerActionAt_Params_Data));
      new (data()) LocalFrame_MediaPlayerActionAt_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_MediaPlayerActionAt_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_MediaPlayerActionAt_Params_Data>(index_);
    }
    LocalFrame_MediaPlayerActionAt_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Point_Data> location;
  mojo::internal::Pointer<::blink::mojom::internal::MediaPlayerAction_Data> action;

 private:
  LocalFrame_MediaPlayerActionAt_Params_Data();
  ~LocalFrame_MediaPlayerActionAt_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_MediaPlayerActionAt_Params_Data) == 24,
              "Bad sizeof(LocalFrame_MediaPlayerActionAt_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) LocalFrame_AdvanceFocusInForm_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LocalFrame_AdvanceFocusInForm_Params_Data));
      new (data()) LocalFrame_AdvanceFocusInForm_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LocalFrame_AdvanceFocusInForm_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LocalFrame_AdvanceFocusInForm_Params_Data>(index_);
    }
    LocalFrame_AdvanceFocusInForm_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t focus_type;
  uint8_t padfinal_[4];

 private:
  LocalFrame_AdvanceFocusInForm_Params_Data();
  ~LocalFrame_AdvanceFocusInForm_Params_Data() = delete;
};
static_assert(sizeof(LocalFrame_AdvanceFocusInForm_Params_Data) == 16,
              "Bad sizeof(LocalFrame_AdvanceFocusInForm_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data));
      new (data()) RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data>(index_);
    }
    RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t touch_action;
  uint8_t padfinal_[4];

 private:
  RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data();
  ~RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data) == 16,
              "Bad sizeof(RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_VisibilityChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrameHost_VisibilityChanged_Params_Data));
      new (data()) RemoteFrameHost_VisibilityChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrameHost_VisibilityChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrameHost_VisibilityChanged_Params_Data>(index_);
    }
    RemoteFrameHost_VisibilityChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t visibility;
  uint8_t padfinal_[4];

 private:
  RemoteFrameHost_VisibilityChanged_Params_Data();
  ~RemoteFrameHost_VisibilityChanged_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_VisibilityChanged_Params_Data) == 16,
              "Bad sizeof(RemoteFrameHost_VisibilityChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_DidFocusFrame_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrameHost_DidFocusFrame_Params_Data));
      new (data()) RemoteFrameHost_DidFocusFrame_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrameHost_DidFocusFrame_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrameHost_DidFocusFrame_Params_Data>(index_);
    }
    RemoteFrameHost_DidFocusFrame_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  RemoteFrameHost_DidFocusFrame_Params_Data();
  ~RemoteFrameHost_DidFocusFrame_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_DidFocusFrame_Params_Data) == 8,
              "Bad sizeof(RemoteFrameHost_DidFocusFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_CheckCompleted_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrameHost_CheckCompleted_Params_Data));
      new (data()) RemoteFrameHost_CheckCompleted_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrameHost_CheckCompleted_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrameHost_CheckCompleted_Params_Data>(index_);
    }
    RemoteFrameHost_CheckCompleted_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  RemoteFrameHost_CheckCompleted_Params_Data();
  ~RemoteFrameHost_CheckCompleted_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_CheckCompleted_Params_Data) == 8,
              "Bad sizeof(RemoteFrameHost_CheckCompleted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_WillEnterFullscreen_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_WillEnterFullscreen_Params_Data));
      new (data()) RemoteFrame_WillEnterFullscreen_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_WillEnterFullscreen_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_WillEnterFullscreen_Params_Data>(index_);
    }
    RemoteFrame_WillEnterFullscreen_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  RemoteFrame_WillEnterFullscreen_Params_Data();
  ~RemoteFrame_WillEnterFullscreen_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_WillEnterFullscreen_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_WillEnterFullscreen_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data));
      new (data()) RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data>(index_);
    }
    RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::ContentSecurityPolicyHeader_Data>>> headers;

 private:
  RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data();
  ~RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data));
      new (data()) RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data>(index_);
    }
    RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data();
  ~RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_EnforceInsecureNavigationsSet_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_EnforceInsecureNavigationsSet_Params_Data));
      new (data()) RemoteFrame_EnforceInsecureNavigationsSet_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_EnforceInsecureNavigationsSet_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_EnforceInsecureNavigationsSet_Params_Data>(index_);
    }
    RemoteFrame_EnforceInsecureNavigationsSet_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint32_t>> set;

 private:
  RemoteFrame_EnforceInsecureNavigationsSet_Params_Data();
  ~RemoteFrame_EnforceInsecureNavigationsSet_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_EnforceInsecureNavigationsSet_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_EnforceInsecureNavigationsSet_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetReplicatedOrigin_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_SetReplicatedOrigin_Params_Data));
      new (data()) RemoteFrame_SetReplicatedOrigin_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_SetReplicatedOrigin_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_SetReplicatedOrigin_Params_Data>(index_);
    }
    RemoteFrame_SetReplicatedOrigin_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  uint8_t is_potentially_trustworthy_unique_origin : 1;
  uint8_t padfinal_[7];

 private:
  RemoteFrame_SetReplicatedOrigin_Params_Data();
  ~RemoteFrame_SetReplicatedOrigin_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetReplicatedOrigin_Params_Data) == 24,
              "Bad sizeof(RemoteFrame_SetReplicatedOrigin_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetReplicatedAdFrameType_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_SetReplicatedAdFrameType_Params_Data));
      new (data()) RemoteFrame_SetReplicatedAdFrameType_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_SetReplicatedAdFrameType_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_SetReplicatedAdFrameType_Params_Data>(index_);
    }
    RemoteFrame_SetReplicatedAdFrameType_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t ad_frame_type;
  uint8_t padfinal_[4];

 private:
  RemoteFrame_SetReplicatedAdFrameType_Params_Data();
  ~RemoteFrame_SetReplicatedAdFrameType_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetReplicatedAdFrameType_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetReplicatedAdFrameType_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data));
      new (data()) RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data>(index_);
    }
    RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data();
  ~RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetNeedsOcclusionTracking_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_SetNeedsOcclusionTracking_Params_Data));
      new (data()) RemoteFrame_SetNeedsOcclusionTracking_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_SetNeedsOcclusionTracking_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_SetNeedsOcclusionTracking_Params_Data>(index_);
    }
    RemoteFrame_SetNeedsOcclusionTracking_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t needs_tracking : 1;
  uint8_t padfinal_[7];

 private:
  RemoteFrame_SetNeedsOcclusionTracking_Params_Data();
  ~RemoteFrame_SetNeedsOcclusionTracking_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetNeedsOcclusionTracking_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetNeedsOcclusionTracking_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_Collapse_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_Collapse_Params_Data));
      new (data()) RemoteFrame_Collapse_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_Collapse_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_Collapse_Params_Data>(index_);
    }
    RemoteFrame_Collapse_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t collapsed : 1;
  uint8_t padfinal_[7];

 private:
  RemoteFrame_Collapse_Params_Data();
  ~RemoteFrame_Collapse_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_Collapse_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_Collapse_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_Focus_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_Focus_Params_Data));
      new (data()) RemoteFrame_Focus_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_Focus_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_Focus_Params_Data>(index_);
    }
    RemoteFrame_Focus_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  RemoteFrame_Focus_Params_Data();
  ~RemoteFrame_Focus_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_Focus_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_Focus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data));
      new (data()) RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data>(index_);
    }
    RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t has_gesture : 1;
  uint8_t padfinal_[7];

 private:
  RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data();
  ~RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_BubbleLogicalScroll_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_BubbleLogicalScroll_Params_Data));
      new (data()) RemoteFrame_BubbleLogicalScroll_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_BubbleLogicalScroll_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_BubbleLogicalScroll_Params_Data>(index_);
    }
    RemoteFrame_BubbleLogicalScroll_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t direction;
  int32_t granularity;

 private:
  RemoteFrame_BubbleLogicalScroll_Params_Data();
  ~RemoteFrame_BubbleLogicalScroll_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_BubbleLogicalScroll_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_BubbleLogicalScroll_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_UpdateUserActivationState_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_UpdateUserActivationState_Params_Data));
      new (data()) RemoteFrame_UpdateUserActivationState_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_UpdateUserActivationState_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_UpdateUserActivationState_Params_Data>(index_);
    }
    RemoteFrame_UpdateUserActivationState_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state_update_type;
  uint8_t padfinal_[4];

 private:
  RemoteFrame_UpdateUserActivationState_Params_Data();
  ~RemoteFrame_UpdateUserActivationState_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_UpdateUserActivationState_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_UpdateUserActivationState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetEmbeddingToken_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_SetEmbeddingToken_Params_Data));
      new (data()) RemoteFrame_SetEmbeddingToken_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_SetEmbeddingToken_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_SetEmbeddingToken_Params_Data>(index_);
    }
    RemoteFrame_SetEmbeddingToken_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> embedding_token;

 private:
  RemoteFrame_SetEmbeddingToken_Params_Data();
  ~RemoteFrame_SetEmbeddingToken_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetEmbeddingToken_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetEmbeddingToken_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetPageFocus_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_SetPageFocus_Params_Data));
      new (data()) RemoteFrame_SetPageFocus_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_SetPageFocus_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_SetPageFocus_Params_Data>(index_);
    }
    RemoteFrame_SetPageFocus_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_focused : 1;
  uint8_t padfinal_[7];

 private:
  RemoteFrame_SetPageFocus_Params_Data();
  ~RemoteFrame_SetPageFocus_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetPageFocus_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetPageFocus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_RenderFallbackContent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_RenderFallbackContent_Params_Data));
      new (data()) RemoteFrame_RenderFallbackContent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_RenderFallbackContent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_RenderFallbackContent_Params_Data>(index_);
    }
    RemoteFrame_RenderFallbackContent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  RemoteFrame_RenderFallbackContent_Params_Data();
  ~RemoteFrame_RenderFallbackContent_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_RenderFallbackContent_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_RenderFallbackContent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_AddResourceTimingFromChild_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_AddResourceTimingFromChild_Params_Data));
      new (data()) RemoteFrame_AddResourceTimingFromChild_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_AddResourceTimingFromChild_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_AddResourceTimingFromChild_Params_Data>(index_);
    }
    RemoteFrame_AddResourceTimingFromChild_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ResourceTimingInfo_Data> timing;

 private:
  RemoteFrame_AddResourceTimingFromChild_Params_Data();
  ~RemoteFrame_AddResourceTimingFromChild_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_AddResourceTimingFromChild_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_AddResourceTimingFromChild_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_ScrollRectToVisible_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_ScrollRectToVisible_Params_Data));
      new (data()) RemoteFrame_ScrollRectToVisible_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_ScrollRectToVisible_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_ScrollRectToVisible_Params_Data>(index_);
    }
    RemoteFrame_ScrollRectToVisible_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;
  mojo::internal::Pointer<::blink::mojom::internal::ScrollIntoViewParams_Data> params;

 private:
  RemoteFrame_ScrollRectToVisible_Params_Data();
  ~RemoteFrame_ScrollRectToVisible_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_ScrollRectToVisible_Params_Data) == 24,
              "Bad sizeof(RemoteFrame_ScrollRectToVisible_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DidStartLoading_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_DidStartLoading_Params_Data));
      new (data()) RemoteFrame_DidStartLoading_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_DidStartLoading_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_DidStartLoading_Params_Data>(index_);
    }
    RemoteFrame_DidStartLoading_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  RemoteFrame_DidStartLoading_Params_Data();
  ~RemoteFrame_DidStartLoading_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DidStartLoading_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_DidStartLoading_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DidStopLoading_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_DidStopLoading_Params_Data));
      new (data()) RemoteFrame_DidStopLoading_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_DidStopLoading_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_DidStopLoading_Params_Data>(index_);
    }
    RemoteFrame_DidStopLoading_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  RemoteFrame_DidStopLoading_Params_Data();
  ~RemoteFrame_DidStopLoading_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DidStopLoading_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_DidStopLoading_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data));
      new (data()) RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data>(index_);
    }
    RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::IntrinsicSizingInfo_Data> sizing_info;

 private:
  RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data();
  ~RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data)");

}  // namespace internal
class LocalFrameHost_EnterFullscreen_ParamsDataView {
 public:
  LocalFrameHost_EnterFullscreen_ParamsDataView() {}

  LocalFrameHost_EnterFullscreen_ParamsDataView(
      internal::LocalFrameHost_EnterFullscreen_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOptionsDataView(
      ::blink::mojom::FullscreenOptionsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOptions(UserType* output) {
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::blink::mojom::FullscreenOptionsDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrameHost_EnterFullscreen_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_ExitFullscreen_ParamsDataView {
 public:
  LocalFrameHost_ExitFullscreen_ParamsDataView() {}

  LocalFrameHost_ExitFullscreen_ParamsDataView(
      internal::LocalFrameHost_ExitFullscreen_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_ExitFullscreen_Params_Data* data_ = nullptr;
};

class LocalFrameHost_FullscreenStateChanged_ParamsDataView {
 public:
  LocalFrameHost_FullscreenStateChanged_ParamsDataView() {}

  LocalFrameHost_FullscreenStateChanged_ParamsDataView(
      internal::LocalFrameHost_FullscreenStateChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_fullscreen() const {
    return data_->is_fullscreen;
  }
 private:
  internal::LocalFrameHost_FullscreenStateChanged_Params_Data* data_ = nullptr;
};

class LocalFrameHost_RegisterProtocolHandler_ParamsDataView {
 public:
  LocalFrameHost_RegisterProtocolHandler_ParamsDataView() {}

  LocalFrameHost_RegisterProtocolHandler_ParamsDataView(
      internal::LocalFrameHost_RegisterProtocolHandler_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSchemeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadScheme(UserType* output) {
    auto* pointer = data_->scheme.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetTitleDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTitle(UserType* output) {
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  bool user_gesture() const {
    return data_->user_gesture;
  }
 private:
  internal::LocalFrameHost_RegisterProtocolHandler_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_UnregisterProtocolHandler_ParamsDataView {
 public:
  LocalFrameHost_UnregisterProtocolHandler_ParamsDataView() {}

  LocalFrameHost_UnregisterProtocolHandler_ParamsDataView(
      internal::LocalFrameHost_UnregisterProtocolHandler_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSchemeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadScheme(UserType* output) {
    auto* pointer = data_->scheme.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  bool user_gesture() const {
    return data_->user_gesture;
  }
 private:
  internal::LocalFrameHost_UnregisterProtocolHandler_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_DidDisplayInsecureContent_ParamsDataView {
 public:
  LocalFrameHost_DidDisplayInsecureContent_ParamsDataView() {}

  LocalFrameHost_DidDisplayInsecureContent_ParamsDataView(
      internal::LocalFrameHost_DidDisplayInsecureContent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DidDisplayInsecureContent_Params_Data* data_ = nullptr;
};

class LocalFrameHost_DidContainInsecureFormAction_ParamsDataView {
 public:
  LocalFrameHost_DidContainInsecureFormAction_ParamsDataView() {}

  LocalFrameHost_DidContainInsecureFormAction_ParamsDataView(
      internal::LocalFrameHost_DidContainInsecureFormAction_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DidContainInsecureFormAction_Params_Data* data_ = nullptr;
};

class LocalFrameHost_DocumentAvailableInMainFrame_ParamsDataView {
 public:
  LocalFrameHost_DocumentAvailableInMainFrame_ParamsDataView() {}

  LocalFrameHost_DocumentAvailableInMainFrame_ParamsDataView(
      internal::LocalFrameHost_DocumentAvailableInMainFrame_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool uses_temporary_zoom_level() const {
    return data_->uses_temporary_zoom_level;
  }
 private:
  internal::LocalFrameHost_DocumentAvailableInMainFrame_Params_Data* data_ = nullptr;
};

class LocalFrameHost_SetNeedsOcclusionTracking_ParamsDataView {
 public:
  LocalFrameHost_SetNeedsOcclusionTracking_ParamsDataView() {}

  LocalFrameHost_SetNeedsOcclusionTracking_ParamsDataView(
      internal::LocalFrameHost_SetNeedsOcclusionTracking_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool needs_tracking() const {
    return data_->needs_tracking;
  }
 private:
  internal::LocalFrameHost_SetNeedsOcclusionTracking_Params_Data* data_ = nullptr;
};

class LocalFrameHost_LifecycleStateChanged_ParamsDataView {
 public:
  LocalFrameHost_LifecycleStateChanged_ParamsDataView() {}

  LocalFrameHost_LifecycleStateChanged_ParamsDataView(
      internal::LocalFrameHost_LifecycleStateChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::blink::mojom::FrameLifecycleState>(
        data_value, output);
  }

  ::blink::mojom::FrameLifecycleState state() const {
    return static_cast<::blink::mojom::FrameLifecycleState>(data_->state);
  }
 private:
  internal::LocalFrameHost_LifecycleStateChanged_Params_Data* data_ = nullptr;
};

class LocalFrameHost_EvictFromBackForwardCache_ParamsDataView {
 public:
  LocalFrameHost_EvictFromBackForwardCache_ParamsDataView() {}

  LocalFrameHost_EvictFromBackForwardCache_ParamsDataView(
      internal::LocalFrameHost_EvictFromBackForwardCache_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_EvictFromBackForwardCache_Params_Data* data_ = nullptr;
};

class LocalFrameHost_VisibilityChanged_ParamsDataView {
 public:
  LocalFrameHost_VisibilityChanged_ParamsDataView() {}

  LocalFrameHost_VisibilityChanged_ParamsDataView(
      internal::LocalFrameHost_VisibilityChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVisibility(UserType* output) const {
    auto data_value = data_->visibility;
    return mojo::internal::Deserialize<::blink::mojom::FrameVisibility>(
        data_value, output);
  }

  ::blink::mojom::FrameVisibility visibility() const {
    return static_cast<::blink::mojom::FrameVisibility>(data_->visibility);
  }
 private:
  internal::LocalFrameHost_VisibilityChanged_Params_Data* data_ = nullptr;
};

class LocalFrameHost_DidChangeThemeColor_ParamsDataView {
 public:
  LocalFrameHost_DidChangeThemeColor_ParamsDataView() {}

  LocalFrameHost_DidChangeThemeColor_ParamsDataView(
      internal::LocalFrameHost_DidChangeThemeColor_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetThemeColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadThemeColor(UserType* output) {
    auto* pointer = data_->theme_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrameHost_DidChangeThemeColor_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_DidFocusFrame_ParamsDataView {
 public:
  LocalFrameHost_DidFocusFrame_ParamsDataView() {}

  LocalFrameHost_DidFocusFrame_ParamsDataView(
      internal::LocalFrameHost_DidFocusFrame_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DidFocusFrame_Params_Data* data_ = nullptr;
};

class LocalFrameHost_EnforceInsecureRequestPolicy_ParamsDataView {
 public:
  LocalFrameHost_EnforceInsecureRequestPolicy_ParamsDataView() {}

  LocalFrameHost_EnforceInsecureRequestPolicy_ParamsDataView(
      internal::LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint8_t policy_bitmap() const {
    return data_->policy_bitmap;
  }
 private:
  internal::LocalFrameHost_EnforceInsecureRequestPolicy_Params_Data* data_ = nullptr;
};

class LocalFrameHost_EnforceInsecureNavigationsSet_ParamsDataView {
 public:
  LocalFrameHost_EnforceInsecureNavigationsSet_ParamsDataView() {}

  LocalFrameHost_EnforceInsecureNavigationsSet_ParamsDataView(
      internal::LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSetDataView(
      mojo::ArrayDataView<uint32_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSet(UserType* output) {
    auto* pointer = data_->set.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint32_t>>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrameHost_EnforceInsecureNavigationsSet_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_ParamsDataView {
 public:
  LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_ParamsDataView() {}

  LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_ParamsDataView(
      internal::LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t features_mask() const {
    return data_->features_mask;
  }
 private:
  internal::LocalFrameHost_DidChangeActiveSchedulerTrackedFeatures_Params_Data* data_ = nullptr;
};

class LocalFrameHost_SuddenTerminationDisablerChanged_ParamsDataView {
 public:
  LocalFrameHost_SuddenTerminationDisablerChanged_ParamsDataView() {}

  LocalFrameHost_SuddenTerminationDisablerChanged_ParamsDataView(
      internal::LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool present() const {
    return data_->present;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDisablerType(UserType* output) const {
    auto data_value = data_->disabler_type;
    return mojo::internal::Deserialize<::blink::mojom::SuddenTerminationDisablerType>(
        data_value, output);
  }

  ::blink::mojom::SuddenTerminationDisablerType disabler_type() const {
    return static_cast<::blink::mojom::SuddenTerminationDisablerType>(data_->disabler_type);
  }
 private:
  internal::LocalFrameHost_SuddenTerminationDisablerChanged_Params_Data* data_ = nullptr;
};

class LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_ParamsDataView {
 public:
  LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_ParamsDataView() {}

  LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_ParamsDataView(
      internal::LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool has_gesture() const {
    return data_->has_gesture;
  }
 private:
  internal::LocalFrameHost_HadStickyUserActivationBeforeNavigationChanged_Params_Data* data_ = nullptr;
};

class LocalFrameHost_ScrollRectToVisibleInParentFrame_ParamsDataView {
 public:
  LocalFrameHost_ScrollRectToVisibleInParentFrame_ParamsDataView() {}

  LocalFrameHost_ScrollRectToVisibleInParentFrame_ParamsDataView(
      internal::LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRectToScrollDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRectToScroll(UserType* output) {
    auto* pointer = data_->rect_to_scroll.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, context_);
  }
  inline void GetParamsDataView(
      ::blink::mojom::ScrollIntoViewParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParams(UserType* output) {
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::ScrollIntoViewParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrameHost_ScrollRectToVisibleInParentFrame_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_BubbleLogicalScrollInParentFrame_ParamsDataView {
 public:
  LocalFrameHost_BubbleLogicalScrollInParentFrame_ParamsDataView() {}

  LocalFrameHost_BubbleLogicalScrollInParentFrame_ParamsDataView(
      internal::LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDirection(UserType* output) const {
    auto data_value = data_->direction;
    return mojo::internal::Deserialize<::blink::mojom::ScrollDirection>(
        data_value, output);
  }

  ::blink::mojom::ScrollDirection direction() const {
    return static_cast<::blink::mojom::ScrollDirection>(data_->direction);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadGranularity(UserType* output) const {
    auto data_value = data_->granularity;
    return mojo::internal::Deserialize<::ui::mojom::ScrollGranularity>(
        data_value, output);
  }

  ::ui::mojom::ScrollGranularity granularity() const {
    return static_cast<::ui::mojom::ScrollGranularity>(data_->granularity);
  }
 private:
  internal::LocalFrameHost_BubbleLogicalScrollInParentFrame_Params_Data* data_ = nullptr;
};

class LocalFrameHost_DidAccessInitialDocument_ParamsDataView {
 public:
  LocalFrameHost_DidAccessInitialDocument_ParamsDataView() {}

  LocalFrameHost_DidAccessInitialDocument_ParamsDataView(
      internal::LocalFrameHost_DidAccessInitialDocument_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DidAccessInitialDocument_Params_Data* data_ = nullptr;
};

class LocalFrameHost_DidBlockNavigation_ParamsDataView {
 public:
  LocalFrameHost_DidBlockNavigation_ParamsDataView() {}

  LocalFrameHost_DidBlockNavigation_ParamsDataView(
      internal::LocalFrameHost_DidBlockNavigation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetBlockedUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBlockedUrl(UserType* output) {
    auto* pointer = data_->blocked_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetInitiatorUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInitiatorUrl(UserType* output) {
    auto* pointer = data_->initiator_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::blink::mojom::NavigationBlockedReason>(
        data_value, output);
  }

  ::blink::mojom::NavigationBlockedReason reason() const {
    return static_cast<::blink::mojom::NavigationBlockedReason>(data_->reason);
  }
 private:
  internal::LocalFrameHost_DidBlockNavigation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_DidChangeLoadProgress_ParamsDataView {
 public:
  LocalFrameHost_DidChangeLoadProgress_ParamsDataView() {}

  LocalFrameHost_DidChangeLoadProgress_ParamsDataView(
      internal::LocalFrameHost_DidChangeLoadProgress_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  double load_progress() const {
    return data_->load_progress;
  }
 private:
  internal::LocalFrameHost_DidChangeLoadProgress_Params_Data* data_ = nullptr;
};

class LocalFrameHost_DispatchLoad_ParamsDataView {
 public:
  LocalFrameHost_DispatchLoad_ParamsDataView() {}

  LocalFrameHost_DispatchLoad_ParamsDataView(
      internal::LocalFrameHost_DispatchLoad_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DispatchLoad_Params_Data* data_ = nullptr;
};

class LocalFrameHost_GoToEntryAtOffset_ParamsDataView {
 public:
  LocalFrameHost_GoToEntryAtOffset_ParamsDataView() {}

  LocalFrameHost_GoToEntryAtOffset_ParamsDataView(
      internal::LocalFrameHost_GoToEntryAtOffset_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t offset() const {
    return data_->offset;
  }
  bool has_user_gesture() const {
    return data_->has_user_gesture;
  }
 private:
  internal::LocalFrameHost_GoToEntryAtOffset_Params_Data* data_ = nullptr;
};

class LocalFrameHost_RenderFallbackContentInParentProcess_ParamsDataView {
 public:
  LocalFrameHost_RenderFallbackContentInParentProcess_ParamsDataView() {}

  LocalFrameHost_RenderFallbackContentInParentProcess_ParamsDataView(
      internal::LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_RenderFallbackContentInParentProcess_Params_Data* data_ = nullptr;
};

class LocalFrameHost_HandleAccessibilityFindInPageResult_ParamsDataView {
 public:
  LocalFrameHost_HandleAccessibilityFindInPageResult_ParamsDataView() {}

  LocalFrameHost_HandleAccessibilityFindInPageResult_ParamsDataView(
      internal::LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      FindInPageResultAXParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParams(UserType* output) {
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::FindInPageResultAXParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrameHost_HandleAccessibilityFindInPageResult_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_HandleAccessibilityFindInPageTermination_ParamsDataView {
 public:
  LocalFrameHost_HandleAccessibilityFindInPageTermination_ParamsDataView() {}

  LocalFrameHost_HandleAccessibilityFindInPageTermination_ParamsDataView(
      internal::LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_HandleAccessibilityFindInPageTermination_Params_Data* data_ = nullptr;
};

class LocalFrameHost_DocumentOnLoadCompleted_ParamsDataView {
 public:
  LocalFrameHost_DocumentOnLoadCompleted_ParamsDataView() {}

  LocalFrameHost_DocumentOnLoadCompleted_ParamsDataView(
      internal::LocalFrameHost_DocumentOnLoadCompleted_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DocumentOnLoadCompleted_Params_Data* data_ = nullptr;
};

class LocalFrameHost_ForwardResourceTimingToParent_ParamsDataView {
 public:
  LocalFrameHost_ForwardResourceTimingToParent_ParamsDataView() {}

  LocalFrameHost_ForwardResourceTimingToParent_ParamsDataView(
      internal::LocalFrameHost_ForwardResourceTimingToParent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTimingDataView(
      ::blink::mojom::ResourceTimingInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTiming(UserType* output) {
    auto* pointer = data_->timing.Get();
    return mojo::internal::Deserialize<::blink::mojom::ResourceTimingInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrameHost_ForwardResourceTimingToParent_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_DidFinishDocumentLoad_ParamsDataView {
 public:
  LocalFrameHost_DidFinishDocumentLoad_ParamsDataView() {}

  LocalFrameHost_DidFinishDocumentLoad_ParamsDataView(
      internal::LocalFrameHost_DidFinishDocumentLoad_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_DidFinishDocumentLoad_Params_Data* data_ = nullptr;
};

class LocalFrameHost_RunModalAlertDialog_ParamsDataView {
 public:
  LocalFrameHost_RunModalAlertDialog_ParamsDataView() {}

  LocalFrameHost_RunModalAlertDialog_ParamsDataView(
      internal::LocalFrameHost_RunModalAlertDialog_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAlertMessageDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAlertMessage(UserType* output) {
    auto* pointer = data_->alert_message.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrameHost_RunModalAlertDialog_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_RunModalAlertDialog_ResponseParamsDataView {
 public:
  LocalFrameHost_RunModalAlertDialog_ResponseParamsDataView() {}

  LocalFrameHost_RunModalAlertDialog_ResponseParamsDataView(
      internal::LocalFrameHost_RunModalAlertDialog_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrameHost_RunModalAlertDialog_ResponseParams_Data* data_ = nullptr;
};

class LocalFrameHost_RunModalConfirmDialog_ParamsDataView {
 public:
  LocalFrameHost_RunModalConfirmDialog_ParamsDataView() {}

  LocalFrameHost_RunModalConfirmDialog_ParamsDataView(
      internal::LocalFrameHost_RunModalConfirmDialog_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAlertMessageDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAlertMessage(UserType* output) {
    auto* pointer = data_->alert_message.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrameHost_RunModalConfirmDialog_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_RunModalConfirmDialog_ResponseParamsDataView {
 public:
  LocalFrameHost_RunModalConfirmDialog_ResponseParamsDataView() {}

  LocalFrameHost_RunModalConfirmDialog_ResponseParamsDataView(
      internal::LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::LocalFrameHost_RunModalConfirmDialog_ResponseParams_Data* data_ = nullptr;
};

class LocalFrameHost_RunModalPromptDialog_ParamsDataView {
 public:
  LocalFrameHost_RunModalPromptDialog_ParamsDataView() {}

  LocalFrameHost_RunModalPromptDialog_ParamsDataView(
      internal::LocalFrameHost_RunModalPromptDialog_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAlertMessageDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAlertMessage(UserType* output) {
    auto* pointer = data_->alert_message.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetDefaultValueDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDefaultValue(UserType* output) {
    auto* pointer = data_->default_value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrameHost_RunModalPromptDialog_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_RunModalPromptDialog_ResponseParamsDataView {
 public:
  LocalFrameHost_RunModalPromptDialog_ResponseParamsDataView() {}

  LocalFrameHost_RunModalPromptDialog_ResponseParamsDataView(
      internal::LocalFrameHost_RunModalPromptDialog_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetResultDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) {
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrameHost_RunModalPromptDialog_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrameHost_RunBeforeUnloadConfirm_ParamsDataView {
 public:
  LocalFrameHost_RunBeforeUnloadConfirm_ParamsDataView() {}

  LocalFrameHost_RunBeforeUnloadConfirm_ParamsDataView(
      internal::LocalFrameHost_RunBeforeUnloadConfirm_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_reload() const {
    return data_->is_reload;
  }
 private:
  internal::LocalFrameHost_RunBeforeUnloadConfirm_Params_Data* data_ = nullptr;
};

class LocalFrameHost_RunBeforeUnloadConfirm_ResponseParamsDataView {
 public:
  LocalFrameHost_RunBeforeUnloadConfirm_ResponseParamsDataView() {}

  LocalFrameHost_RunBeforeUnloadConfirm_ResponseParamsDataView(
      internal::LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::LocalFrameHost_RunBeforeUnloadConfirm_ResponseParams_Data* data_ = nullptr;
};

class LocalFrame_GetTextSurroundingSelection_ParamsDataView {
 public:
  LocalFrame_GetTextSurroundingSelection_ParamsDataView() {}

  LocalFrame_GetTextSurroundingSelection_ParamsDataView(
      internal::LocalFrame_GetTextSurroundingSelection_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t max_length() const {
    return data_->max_length;
  }
 private:
  internal::LocalFrame_GetTextSurroundingSelection_Params_Data* data_ = nullptr;
};

class LocalFrame_GetTextSurroundingSelection_ResponseParamsDataView {
 public:
  LocalFrame_GetTextSurroundingSelection_ResponseParamsDataView() {}

  LocalFrame_GetTextSurroundingSelection_ResponseParamsDataView(
      internal::LocalFrame_GetTextSurroundingSelection_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetContentDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadContent(UserType* output) {
    auto* pointer = data_->content.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  uint32_t start_offset() const {
    return data_->start_offset;
  }
  uint32_t end_offset() const {
    return data_->end_offset;
  }
 private:
  internal::LocalFrame_GetTextSurroundingSelection_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrame_SendInterventionReport_ParamsDataView {
 public:
  LocalFrame_SendInterventionReport_ParamsDataView() {}

  LocalFrame_SendInterventionReport_ParamsDataView(
      internal::LocalFrame_SendInterventionReport_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrame_SendInterventionReport_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrame_NotifyUserActivation_ParamsDataView {
 public:
  LocalFrame_NotifyUserActivation_ParamsDataView() {}

  LocalFrame_NotifyUserActivation_ParamsDataView(
      internal::LocalFrame_NotifyUserActivation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_NotifyUserActivation_Params_Data* data_ = nullptr;
};

class LocalFrame_AddMessageToConsole_ParamsDataView {
 public:
  LocalFrame_AddMessageToConsole_ParamsDataView() {}

  LocalFrame_AddMessageToConsole_ParamsDataView(
      internal::LocalFrame_AddMessageToConsole_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLevel(UserType* output) const {
    auto data_value = data_->level;
    return mojo::internal::Deserialize<::blink::mojom::ConsoleMessageLevel>(
        data_value, output);
  }

  ::blink::mojom::ConsoleMessageLevel level() const {
    return static_cast<::blink::mojom::ConsoleMessageLevel>(data_->level);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  bool discard_duplicates() const {
    return data_->discard_duplicates;
  }
 private:
  internal::LocalFrame_AddMessageToConsole_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrame_CheckCompleted_ParamsDataView {
 public:
  LocalFrame_CheckCompleted_ParamsDataView() {}

  LocalFrame_CheckCompleted_ParamsDataView(
      internal::LocalFrame_CheckCompleted_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_CheckCompleted_Params_Data* data_ = nullptr;
};

class LocalFrame_Collapse_ParamsDataView {
 public:
  LocalFrame_Collapse_ParamsDataView() {}

  LocalFrame_Collapse_ParamsDataView(
      internal::LocalFrame_Collapse_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool collapsed() const {
    return data_->collapsed;
  }
 private:
  internal::LocalFrame_Collapse_Params_Data* data_ = nullptr;
};

class LocalFrame_EnableViewSourceMode_ParamsDataView {
 public:
  LocalFrame_EnableViewSourceMode_ParamsDataView() {}

  LocalFrame_EnableViewSourceMode_ParamsDataView(
      internal::LocalFrame_EnableViewSourceMode_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_EnableViewSourceMode_Params_Data* data_ = nullptr;
};

class LocalFrame_Focus_ParamsDataView {
 public:
  LocalFrame_Focus_ParamsDataView() {}

  LocalFrame_Focus_ParamsDataView(
      internal::LocalFrame_Focus_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_Focus_Params_Data* data_ = nullptr;
};

class LocalFrame_ClearFocusedElement_ParamsDataView {
 public:
  LocalFrame_ClearFocusedElement_ParamsDataView() {}

  LocalFrame_ClearFocusedElement_ParamsDataView(
      internal::LocalFrame_ClearFocusedElement_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_ClearFocusedElement_Params_Data* data_ = nullptr;
};

class LocalFrame_CopyImageAt_ParamsDataView {
 public:
  LocalFrame_CopyImageAt_ParamsDataView() {}

  LocalFrame_CopyImageAt_ParamsDataView(
      internal::LocalFrame_CopyImageAt_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetWindowPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWindowPoint(UserType* output) {
    auto* pointer = data_->window_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrame_CopyImageAt_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrame_SaveImageAt_ParamsDataView {
 public:
  LocalFrame_SaveImageAt_ParamsDataView() {}

  LocalFrame_SaveImageAt_ParamsDataView(
      internal::LocalFrame_SaveImageAt_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetWindowPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWindowPoint(UserType* output) {
    auto* pointer = data_->window_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrame_SaveImageAt_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrame_ReportBlinkFeatureUsage_ParamsDataView {
 public:
  LocalFrame_ReportBlinkFeatureUsage_ParamsDataView() {}

  LocalFrame_ReportBlinkFeatureUsage_ParamsDataView(
      internal::LocalFrame_ReportBlinkFeatureUsage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFeaturesDataView(
      mojo::ArrayDataView<::blink::mojom::WebFeature>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFeatures(UserType* output) {
    auto* pointer = data_->features.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::WebFeature>>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrame_ReportBlinkFeatureUsage_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrame_RenderFallbackContent_ParamsDataView {
 public:
  LocalFrame_RenderFallbackContent_ParamsDataView() {}

  LocalFrame_RenderFallbackContent_ParamsDataView(
      internal::LocalFrame_RenderFallbackContent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalFrame_RenderFallbackContent_Params_Data* data_ = nullptr;
};

class LocalFrame_BeforeUnload_ParamsDataView {
 public:
  LocalFrame_BeforeUnload_ParamsDataView() {}

  LocalFrame_BeforeUnload_ParamsDataView(
      internal::LocalFrame_BeforeUnload_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_reload() const {
    return data_->is_reload;
  }
 private:
  internal::LocalFrame_BeforeUnload_Params_Data* data_ = nullptr;
};

class LocalFrame_BeforeUnload_ResponseParamsDataView {
 public:
  LocalFrame_BeforeUnload_ResponseParamsDataView() {}

  LocalFrame_BeforeUnload_ResponseParamsDataView(
      internal::LocalFrame_BeforeUnload_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool proceed() const {
    return data_->proceed;
  }
  inline void GetBeforeUnloadStartTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBeforeUnloadStartTime(UserType* output) {
    auto* pointer = data_->before_unload_start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, context_);
  }
  inline void GetBeforeUnloadEndTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBeforeUnloadEndTime(UserType* output) {
    auto* pointer = data_->before_unload_end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrame_BeforeUnload_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrame_MediaPlayerActionAt_ParamsDataView {
 public:
  LocalFrame_MediaPlayerActionAt_ParamsDataView() {}

  LocalFrame_MediaPlayerActionAt_ParamsDataView(
      internal::LocalFrame_MediaPlayerActionAt_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetLocationDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLocation(UserType* output) {
    auto* pointer = data_->location.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, context_);
  }
  inline void GetActionDataView(
      ::blink::mojom::MediaPlayerActionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAction(UserType* output) {
    auto* pointer = data_->action.Get();
    return mojo::internal::Deserialize<::blink::mojom::MediaPlayerActionDataView>(
        pointer, output, context_);
  }
 private:
  internal::LocalFrame_MediaPlayerActionAt_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LocalFrame_AdvanceFocusInForm_ParamsDataView {
 public:
  LocalFrame_AdvanceFocusInForm_ParamsDataView() {}

  LocalFrame_AdvanceFocusInForm_ParamsDataView(
      internal::LocalFrame_AdvanceFocusInForm_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFocusType(UserType* output) const {
    auto data_value = data_->focus_type;
    return mojo::internal::Deserialize<::blink::mojom::FocusType>(
        data_value, output);
  }

  ::blink::mojom::FocusType focus_type() const {
    return static_cast<::blink::mojom::FocusType>(data_->focus_type);
  }
 private:
  internal::LocalFrame_AdvanceFocusInForm_Params_Data* data_ = nullptr;
};

class RemoteFrameHost_SetInheritedEffectiveTouchAction_ParamsDataView {
 public:
  RemoteFrameHost_SetInheritedEffectiveTouchAction_ParamsDataView() {}

  RemoteFrameHost_SetInheritedEffectiveTouchAction_ParamsDataView(
      internal::RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTouchAction(UserType* output) const {
    auto data_value = data_->touch_action;
    return mojo::internal::Deserialize<::cc::mojom::TouchAction>(
        data_value, output);
  }

  ::cc::mojom::TouchAction touch_action() const {
    return static_cast<::cc::mojom::TouchAction>(data_->touch_action);
  }
 private:
  internal::RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data* data_ = nullptr;
};

class RemoteFrameHost_VisibilityChanged_ParamsDataView {
 public:
  RemoteFrameHost_VisibilityChanged_ParamsDataView() {}

  RemoteFrameHost_VisibilityChanged_ParamsDataView(
      internal::RemoteFrameHost_VisibilityChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVisibility(UserType* output) const {
    auto data_value = data_->visibility;
    return mojo::internal::Deserialize<::blink::mojom::FrameVisibility>(
        data_value, output);
  }

  ::blink::mojom::FrameVisibility visibility() const {
    return static_cast<::blink::mojom::FrameVisibility>(data_->visibility);
  }
 private:
  internal::RemoteFrameHost_VisibilityChanged_Params_Data* data_ = nullptr;
};

class RemoteFrameHost_DidFocusFrame_ParamsDataView {
 public:
  RemoteFrameHost_DidFocusFrame_ParamsDataView() {}

  RemoteFrameHost_DidFocusFrame_ParamsDataView(
      internal::RemoteFrameHost_DidFocusFrame_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrameHost_DidFocusFrame_Params_Data* data_ = nullptr;
};

class RemoteFrameHost_CheckCompleted_ParamsDataView {
 public:
  RemoteFrameHost_CheckCompleted_ParamsDataView() {}

  RemoteFrameHost_CheckCompleted_ParamsDataView(
      internal::RemoteFrameHost_CheckCompleted_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrameHost_CheckCompleted_Params_Data* data_ = nullptr;
};

class RemoteFrame_WillEnterFullscreen_ParamsDataView {
 public:
  RemoteFrame_WillEnterFullscreen_ParamsDataView() {}

  RemoteFrame_WillEnterFullscreen_ParamsDataView(
      internal::RemoteFrame_WillEnterFullscreen_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_WillEnterFullscreen_Params_Data* data_ = nullptr;
};

class RemoteFrame_AddReplicatedContentSecurityPolicies_ParamsDataView {
 public:
  RemoteFrame_AddReplicatedContentSecurityPolicies_ParamsDataView() {}

  RemoteFrame_AddReplicatedContentSecurityPolicies_ParamsDataView(
      internal::RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetHeadersDataView(
      mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyHeaderDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHeaders(UserType* output) {
    auto* pointer = data_->headers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyHeaderDataView>>(
        pointer, output, context_);
  }
 private:
  internal::RemoteFrame_AddReplicatedContentSecurityPolicies_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class RemoteFrame_ResetReplicatedContentSecurityPolicy_ParamsDataView {
 public:
  RemoteFrame_ResetReplicatedContentSecurityPolicy_ParamsDataView() {}

  RemoteFrame_ResetReplicatedContentSecurityPolicy_ParamsDataView(
      internal::RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_ResetReplicatedContentSecurityPolicy_Params_Data* data_ = nullptr;
};

class RemoteFrame_EnforceInsecureNavigationsSet_ParamsDataView {
 public:
  RemoteFrame_EnforceInsecureNavigationsSet_ParamsDataView() {}

  RemoteFrame_EnforceInsecureNavigationsSet_ParamsDataView(
      internal::RemoteFrame_EnforceInsecureNavigationsSet_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSetDataView(
      mojo::ArrayDataView<uint32_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSet(UserType* output) {
    auto* pointer = data_->set.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint32_t>>(
        pointer, output, context_);
  }
 private:
  internal::RemoteFrame_EnforceInsecureNavigationsSet_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class RemoteFrame_SetReplicatedOrigin_ParamsDataView {
 public:
  RemoteFrame_SetReplicatedOrigin_ParamsDataView() {}

  RemoteFrame_SetReplicatedOrigin_ParamsDataView(
      internal::RemoteFrame_SetReplicatedOrigin_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, context_);
  }
  bool is_potentially_trustworthy_unique_origin() const {
    return data_->is_potentially_trustworthy_unique_origin;
  }
 private:
  internal::RemoteFrame_SetReplicatedOrigin_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class RemoteFrame_SetReplicatedAdFrameType_ParamsDataView {
 public:
  RemoteFrame_SetReplicatedAdFrameType_ParamsDataView() {}

  RemoteFrame_SetReplicatedAdFrameType_ParamsDataView(
      internal::RemoteFrame_SetReplicatedAdFrameType_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAdFrameType(UserType* output) const {
    auto data_value = data_->ad_frame_type;
    return mojo::internal::Deserialize<::blink::mojom::AdFrameType>(
        data_value, output);
  }

  ::blink::mojom::AdFrameType ad_frame_type() const {
    return static_cast<::blink::mojom::AdFrameType>(data_->ad_frame_type);
  }
 private:
  internal::RemoteFrame_SetReplicatedAdFrameType_Params_Data* data_ = nullptr;
};

class RemoteFrame_DispatchLoadEventForFrameOwner_ParamsDataView {
 public:
  RemoteFrame_DispatchLoadEventForFrameOwner_ParamsDataView() {}

  RemoteFrame_DispatchLoadEventForFrameOwner_ParamsDataView(
      internal::RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data* data_ = nullptr;
};

class RemoteFrame_SetNeedsOcclusionTracking_ParamsDataView {
 public:
  RemoteFrame_SetNeedsOcclusionTracking_ParamsDataView() {}

  RemoteFrame_SetNeedsOcclusionTracking_ParamsDataView(
      internal::RemoteFrame_SetNeedsOcclusionTracking_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool needs_tracking() const {
    return data_->needs_tracking;
  }
 private:
  internal::RemoteFrame_SetNeedsOcclusionTracking_Params_Data* data_ = nullptr;
};

class RemoteFrame_Collapse_ParamsDataView {
 public:
  RemoteFrame_Collapse_ParamsDataView() {}

  RemoteFrame_Collapse_ParamsDataView(
      internal::RemoteFrame_Collapse_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool collapsed() const {
    return data_->collapsed;
  }
 private:
  internal::RemoteFrame_Collapse_Params_Data* data_ = nullptr;
};

class RemoteFrame_Focus_ParamsDataView {
 public:
  RemoteFrame_Focus_ParamsDataView() {}

  RemoteFrame_Focus_ParamsDataView(
      internal::RemoteFrame_Focus_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_Focus_Params_Data* data_ = nullptr;
};

class RemoteFrame_SetHadStickyUserActivationBeforeNavigation_ParamsDataView {
 public:
  RemoteFrame_SetHadStickyUserActivationBeforeNavigation_ParamsDataView() {}

  RemoteFrame_SetHadStickyUserActivationBeforeNavigation_ParamsDataView(
      internal::RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool has_gesture() const {
    return data_->has_gesture;
  }
 private:
  internal::RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data* data_ = nullptr;
};

class RemoteFrame_BubbleLogicalScroll_ParamsDataView {
 public:
  RemoteFrame_BubbleLogicalScroll_ParamsDataView() {}

  RemoteFrame_BubbleLogicalScroll_ParamsDataView(
      internal::RemoteFrame_BubbleLogicalScroll_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDirection(UserType* output) const {
    auto data_value = data_->direction;
    return mojo::internal::Deserialize<::blink::mojom::ScrollDirection>(
        data_value, output);
  }

  ::blink::mojom::ScrollDirection direction() const {
    return static_cast<::blink::mojom::ScrollDirection>(data_->direction);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadGranularity(UserType* output) const {
    auto data_value = data_->granularity;
    return mojo::internal::Deserialize<::ui::mojom::ScrollGranularity>(
        data_value, output);
  }

  ::ui::mojom::ScrollGranularity granularity() const {
    return static_cast<::ui::mojom::ScrollGranularity>(data_->granularity);
  }
 private:
  internal::RemoteFrame_BubbleLogicalScroll_Params_Data* data_ = nullptr;
};

class RemoteFrame_UpdateUserActivationState_ParamsDataView {
 public:
  RemoteFrame_UpdateUserActivationState_ParamsDataView() {}

  RemoteFrame_UpdateUserActivationState_ParamsDataView(
      internal::RemoteFrame_UpdateUserActivationState_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStateUpdateType(UserType* output) const {
    auto data_value = data_->state_update_type;
    return mojo::internal::Deserialize<::blink::mojom::UserActivationUpdateType>(
        data_value, output);
  }

  ::blink::mojom::UserActivationUpdateType state_update_type() const {
    return static_cast<::blink::mojom::UserActivationUpdateType>(data_->state_update_type);
  }
 private:
  internal::RemoteFrame_UpdateUserActivationState_Params_Data* data_ = nullptr;
};

class RemoteFrame_SetEmbeddingToken_ParamsDataView {
 public:
  RemoteFrame_SetEmbeddingToken_ParamsDataView() {}

  RemoteFrame_SetEmbeddingToken_ParamsDataView(
      internal::RemoteFrame_SetEmbeddingToken_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetEmbeddingTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEmbeddingToken(UserType* output) {
    auto* pointer = data_->embedding_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
 private:
  internal::RemoteFrame_SetEmbeddingToken_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class RemoteFrame_SetPageFocus_ParamsDataView {
 public:
  RemoteFrame_SetPageFocus_ParamsDataView() {}

  RemoteFrame_SetPageFocus_ParamsDataView(
      internal::RemoteFrame_SetPageFocus_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_focused() const {
    return data_->is_focused;
  }
 private:
  internal::RemoteFrame_SetPageFocus_Params_Data* data_ = nullptr;
};

class RemoteFrame_RenderFallbackContent_ParamsDataView {
 public:
  RemoteFrame_RenderFallbackContent_ParamsDataView() {}

  RemoteFrame_RenderFallbackContent_ParamsDataView(
      internal::RemoteFrame_RenderFallbackContent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_RenderFallbackContent_Params_Data* data_ = nullptr;
};

class RemoteFrame_AddResourceTimingFromChild_ParamsDataView {
 public:
  RemoteFrame_AddResourceTimingFromChild_ParamsDataView() {}

  RemoteFrame_AddResourceTimingFromChild_ParamsDataView(
      internal::RemoteFrame_AddResourceTimingFromChild_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTimingDataView(
      ::blink::mojom::ResourceTimingInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTiming(UserType* output) {
    auto* pointer = data_->timing.Get();
    return mojo::internal::Deserialize<::blink::mojom::ResourceTimingInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::RemoteFrame_AddResourceTimingFromChild_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class RemoteFrame_ScrollRectToVisible_ParamsDataView {
 public:
  RemoteFrame_ScrollRectToVisible_ParamsDataView() {}

  RemoteFrame_ScrollRectToVisible_ParamsDataView(
      internal::RemoteFrame_ScrollRectToVisible_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRect(UserType* output) {
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, context_);
  }
  inline void GetParamsDataView(
      ::blink::mojom::ScrollIntoViewParamsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParams(UserType* output) {
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::ScrollIntoViewParamsDataView>(
        pointer, output, context_);
  }
 private:
  internal::RemoteFrame_ScrollRectToVisible_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class RemoteFrame_DidStartLoading_ParamsDataView {
 public:
  RemoteFrame_DidStartLoading_ParamsDataView() {}

  RemoteFrame_DidStartLoading_ParamsDataView(
      internal::RemoteFrame_DidStartLoading_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_DidStartLoading_Params_Data* data_ = nullptr;
};

class RemoteFrame_DidStopLoading_ParamsDataView {
 public:
  RemoteFrame_DidStopLoading_ParamsDataView() {}

  RemoteFrame_DidStopLoading_ParamsDataView(
      internal::RemoteFrame_DidStopLoading_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_DidStopLoading_Params_Data* data_ = nullptr;
};

class RemoteFrame_IntrinsicSizingInfoOfChildChanged_ParamsDataView {
 public:
  RemoteFrame_IntrinsicSizingInfoOfChildChanged_ParamsDataView() {}

  RemoteFrame_IntrinsicSizingInfoOfChildChanged_ParamsDataView(
      internal::RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSizingInfoDataView(
      ::blink::mojom::IntrinsicSizingInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSizingInfo(UserType* output) {
    auto* pointer = data_->sizing_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::IntrinsicSizingInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void LocalFrameHost_EnterFullscreen_ParamsDataView::GetOptionsDataView(
    ::blink::mojom::FullscreenOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = ::blink::mojom::FullscreenOptionsDataView(pointer, context_);
}






inline void LocalFrameHost_RegisterProtocolHandler_ParamsDataView::GetSchemeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->scheme.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void LocalFrameHost_RegisterProtocolHandler_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void LocalFrameHost_RegisterProtocolHandler_ParamsDataView::GetTitleDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->title.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void LocalFrameHost_UnregisterProtocolHandler_ParamsDataView::GetSchemeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->scheme.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void LocalFrameHost_UnregisterProtocolHandler_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
















inline void LocalFrameHost_DidChangeThemeColor_ParamsDataView::GetThemeColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->theme_color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}






inline void LocalFrameHost_EnforceInsecureNavigationsSet_ParamsDataView::GetSetDataView(
    mojo::ArrayDataView<uint32_t>* output) {
  auto pointer = data_->set.Get();
  *output = mojo::ArrayDataView<uint32_t>(pointer, context_);
}








inline void LocalFrameHost_ScrollRectToVisibleInParentFrame_ParamsDataView::GetRectToScrollDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect_to_scroll.Get();
  *output = ::gfx::mojom::RectDataView(pointer, context_);
}
inline void LocalFrameHost_ScrollRectToVisibleInParentFrame_ParamsDataView::GetParamsDataView(
    ::blink::mojom::ScrollIntoViewParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::blink::mojom::ScrollIntoViewParamsDataView(pointer, context_);
}






inline void LocalFrameHost_DidBlockNavigation_ParamsDataView::GetBlockedUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->blocked_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void LocalFrameHost_DidBlockNavigation_ParamsDataView::GetInitiatorUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->initiator_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}










inline void LocalFrameHost_HandleAccessibilityFindInPageResult_ParamsDataView::GetParamsDataView(
    FindInPageResultAXParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = FindInPageResultAXParamsDataView(pointer, context_);
}






inline void LocalFrameHost_ForwardResourceTimingToParent_ParamsDataView::GetTimingDataView(
    ::blink::mojom::ResourceTimingInfoDataView* output) {
  auto pointer = data_->timing.Get();
  *output = ::blink::mojom::ResourceTimingInfoDataView(pointer, context_);
}




inline void LocalFrameHost_RunModalAlertDialog_ParamsDataView::GetAlertMessageDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->alert_message.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}




inline void LocalFrameHost_RunModalConfirmDialog_ParamsDataView::GetAlertMessageDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->alert_message.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}




inline void LocalFrameHost_RunModalPromptDialog_ParamsDataView::GetAlertMessageDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->alert_message.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void LocalFrameHost_RunModalPromptDialog_ParamsDataView::GetDefaultValueDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->default_value.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void LocalFrameHost_RunModalPromptDialog_ResponseParamsDataView::GetResultDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->result.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}








inline void LocalFrame_GetTextSurroundingSelection_ResponseParamsDataView::GetContentDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->content.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void LocalFrame_SendInterventionReport_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void LocalFrame_SendInterventionReport_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void LocalFrame_AddMessageToConsole_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, context_);
}












inline void LocalFrame_CopyImageAt_ParamsDataView::GetWindowPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->window_point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, context_);
}


inline void LocalFrame_SaveImageAt_ParamsDataView::GetWindowPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->window_point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, context_);
}


inline void LocalFrame_ReportBlinkFeatureUsage_ParamsDataView::GetFeaturesDataView(
    mojo::ArrayDataView<::blink::mojom::WebFeature>* output) {
  auto pointer = data_->features.Get();
  *output = mojo::ArrayDataView<::blink::mojom::WebFeature>(pointer, context_);
}






inline void LocalFrame_BeforeUnload_ResponseParamsDataView::GetBeforeUnloadStartTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->before_unload_start_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, context_);
}
inline void LocalFrame_BeforeUnload_ResponseParamsDataView::GetBeforeUnloadEndTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->before_unload_end_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, context_);
}


inline void LocalFrame_MediaPlayerActionAt_ParamsDataView::GetLocationDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->location.Get();
  *output = ::gfx::mojom::PointDataView(pointer, context_);
}
inline void LocalFrame_MediaPlayerActionAt_ParamsDataView::GetActionDataView(
    ::blink::mojom::MediaPlayerActionDataView* output) {
  auto pointer = data_->action.Get();
  *output = ::blink::mojom::MediaPlayerActionDataView(pointer, context_);
}














inline void RemoteFrame_AddReplicatedContentSecurityPolicies_ParamsDataView::GetHeadersDataView(
    mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyHeaderDataView>* output) {
  auto pointer = data_->headers.Get();
  *output = mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyHeaderDataView>(pointer, context_);
}




inline void RemoteFrame_EnforceInsecureNavigationsSet_ParamsDataView::GetSetDataView(
    mojo::ArrayDataView<uint32_t>* output) {
  auto pointer = data_->set.Get();
  *output = mojo::ArrayDataView<uint32_t>(pointer, context_);
}


inline void RemoteFrame_SetReplicatedOrigin_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, context_);
}


















inline void RemoteFrame_SetEmbeddingToken_ParamsDataView::GetEmbeddingTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->embedding_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}






inline void RemoteFrame_AddResourceTimingFromChild_ParamsDataView::GetTimingDataView(
    ::blink::mojom::ResourceTimingInfoDataView* output) {
  auto pointer = data_->timing.Get();
  *output = ::blink::mojom::ResourceTimingInfoDataView(pointer, context_);
}


inline void RemoteFrame_ScrollRectToVisible_ParamsDataView::GetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, context_);
}
inline void RemoteFrame_ScrollRectToVisible_ParamsDataView::GetParamsDataView(
    ::blink::mojom::ScrollIntoViewParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::blink::mojom::ScrollIntoViewParamsDataView(pointer, context_);
}






inline void RemoteFrame_IntrinsicSizingInfoOfChildChanged_ParamsDataView::GetSizingInfoDataView(
    ::blink::mojom::IntrinsicSizingInfoDataView* output) {
  auto pointer = data_->sizing_info.Get();
  *output = ::blink::mojom::IntrinsicSizingInfoDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_PARAMS_DATA_H_