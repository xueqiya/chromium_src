// third_party/blink/public/mojom/frame/frame.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_FORWARD_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_FORWARD_H_



#include "mojo/public/cpp/bindings/struct_forward.h"

#include "mojo/public/cpp/bindings/deprecated_interface_types_forward.h"


#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"




namespace blink {
namespace mojom {
}  // namespace blink
}  // namespace mojom


namespace blink {
namespace mojom {
namespace blink {
class FindInPageResultAXParams;
using FindInPageResultAXParamsPtr = mojo::StructPtr<FindInPageResultAXParams>;

class LocalFrameHost;

using LocalFrameHostPtr = mojo::InterfacePtr<LocalFrameHost>;
using LocalFrameHostPtrInfo = mojo::InterfacePtrInfo<LocalFrameHost>;
using ThreadSafeLocalFrameHostPtr =
    mojo::ThreadSafeInterfacePtr<LocalFrameHost>;

using LocalFrameHostRequest = mojo::InterfaceRequest<LocalFrameHost>;

using LocalFrameHostAssociatedPtr =
    mojo::AssociatedInterfacePtr<LocalFrameHost>;
using ThreadSafeLocalFrameHostAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<LocalFrameHost>;
using LocalFrameHostAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<LocalFrameHost>;

using LocalFrameHostAssociatedRequest =
    mojo::AssociatedInterfaceRequest<LocalFrameHost>;

class LocalFrame;

using LocalFramePtr = mojo::InterfacePtr<LocalFrame>;
using LocalFramePtrInfo = mojo::InterfacePtrInfo<LocalFrame>;
using ThreadSafeLocalFramePtr =
    mojo::ThreadSafeInterfacePtr<LocalFrame>;

using LocalFrameRequest = mojo::InterfaceRequest<LocalFrame>;

using LocalFrameAssociatedPtr =
    mojo::AssociatedInterfacePtr<LocalFrame>;
using ThreadSafeLocalFrameAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<LocalFrame>;
using LocalFrameAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<LocalFrame>;

using LocalFrameAssociatedRequest =
    mojo::AssociatedInterfaceRequest<LocalFrame>;

class RemoteFrameHost;

using RemoteFrameHostPtr = mojo::InterfacePtr<RemoteFrameHost>;
using RemoteFrameHostPtrInfo = mojo::InterfacePtrInfo<RemoteFrameHost>;
using ThreadSafeRemoteFrameHostPtr =
    mojo::ThreadSafeInterfacePtr<RemoteFrameHost>;

using RemoteFrameHostRequest = mojo::InterfaceRequest<RemoteFrameHost>;

using RemoteFrameHostAssociatedPtr =
    mojo::AssociatedInterfacePtr<RemoteFrameHost>;
using ThreadSafeRemoteFrameHostAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<RemoteFrameHost>;
using RemoteFrameHostAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<RemoteFrameHost>;

using RemoteFrameHostAssociatedRequest =
    mojo::AssociatedInterfaceRequest<RemoteFrameHost>;

class RemoteFrame;

using RemoteFramePtr = mojo::InterfacePtr<RemoteFrame>;
using RemoteFramePtrInfo = mojo::InterfacePtrInfo<RemoteFrame>;
using ThreadSafeRemoteFramePtr =
    mojo::ThreadSafeInterfacePtr<RemoteFrame>;

using RemoteFrameRequest = mojo::InterfaceRequest<RemoteFrame>;

using RemoteFrameAssociatedPtr =
    mojo::AssociatedInterfacePtr<RemoteFrame>;
using ThreadSafeRemoteFrameAssociatedPtr =
    mojo::ThreadSafeAssociatedInterfacePtr<RemoteFrame>;
using RemoteFrameAssociatedPtrInfo =
    mojo::AssociatedInterfacePtrInfo<RemoteFrame>;

using RemoteFrameAssociatedRequest =
    mojo::AssociatedInterfaceRequest<RemoteFrame>;




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_FORWARD_H_