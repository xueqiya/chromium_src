// third_party/blink/public/mojom/frame/frame_policy.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "third_party/blink/public/mojom/frame/frame_policy.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "third_party/blink/public/mojom/frame/frame_policy.mojom-params-data.h"
#include "third_party/blink/public/mojom/frame/frame_policy.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/frame/frame_policy.mojom-import-headers.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_POLICY_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_POLICY_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "third_party/blink/common/feature_policy/feature_policy_mojom_traits.h"
#include "third_party/blink/common/feature_policy/policy_value_mojom_traits.h"
#include "url/mojom/origin_mojom_traits.h"
#endif
namespace blink {
namespace mojom {
FramePolicy::FramePolicy()
    : sandbox_flags(),
      container_policy(),
      required_document_policy(),
      allowed_to_download(true) {}

FramePolicy::FramePolicy(
    ::blink::WebSandboxFlags sandbox_flags_in,
    std::vector<::blink::ParsedFeaturePolicyDeclaration> container_policy_in,
    const base::flat_map<::blink::mojom::FeaturePolicyFeature, ::blink::PolicyValue>& required_document_policy_in,
    bool allowed_to_download_in)
    : sandbox_flags(std::move(sandbox_flags_in)),
      container_policy(std::move(container_policy_in)),
      required_document_policy(std::move(required_document_policy_in)),
      allowed_to_download(std::move(allowed_to_download_in)) {}

FramePolicy::~FramePolicy() = default;

bool FramePolicy::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace blink

namespace mojo {


// static
bool StructTraits<::blink::mojom::FramePolicy::DataView, ::blink::mojom::FramePolicyPtr>::Read(
    ::blink::mojom::FramePolicy::DataView input,
    ::blink::mojom::FramePolicyPtr* output) {
  bool success = true;
  ::blink::mojom::FramePolicyPtr result(::blink::mojom::FramePolicy::New());
  
      if (success && !input.ReadSandboxFlags(&result->sandbox_flags))
        success = false;
      if (success && !input.ReadContainerPolicy(&result->container_policy))
        success = false;
      if (success && !input.ReadRequiredDocumentPolicy(&result->required_document_policy))
        success = false;
      if (success)
        result->allowed_to_download = input.allowed_to_download();
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif