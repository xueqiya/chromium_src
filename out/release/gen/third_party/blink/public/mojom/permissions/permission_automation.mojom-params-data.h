// third_party/blink/public/mojom/permissions/permission_automation.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_PERMISSION_AUTOMATION_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_PERMISSION_AUTOMATION_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace blink {
namespace test {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionAutomation_SetPermission_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PermissionAutomation_SetPermission_Params_Data));
      new (data()) PermissionAutomation_SetPermission_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PermissionAutomation_SetPermission_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PermissionAutomation_SetPermission_Params_Data>(index_);
    }
    PermissionAutomation_SetPermission_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::PermissionDescriptor_Data> descriptor;
  int32_t status;
  uint8_t pad1_[4];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> origin;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> embedding_origin;

 private:
  PermissionAutomation_SetPermission_Params_Data();
  ~PermissionAutomation_SetPermission_Params_Data() = delete;
};
static_assert(sizeof(PermissionAutomation_SetPermission_Params_Data) == 40,
              "Bad sizeof(PermissionAutomation_SetPermission_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionAutomation_SetPermission_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PermissionAutomation_SetPermission_ResponseParams_Data));
      new (data()) PermissionAutomation_SetPermission_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PermissionAutomation_SetPermission_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PermissionAutomation_SetPermission_ResponseParams_Data>(index_);
    }
    PermissionAutomation_SetPermission_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  PermissionAutomation_SetPermission_ResponseParams_Data();
  ~PermissionAutomation_SetPermission_ResponseParams_Data() = delete;
};
static_assert(sizeof(PermissionAutomation_SetPermission_ResponseParams_Data) == 16,
              "Bad sizeof(PermissionAutomation_SetPermission_ResponseParams_Data)");

}  // namespace internal
class PermissionAutomation_SetPermission_ParamsDataView {
 public:
  PermissionAutomation_SetPermission_ParamsDataView() {}

  PermissionAutomation_SetPermission_ParamsDataView(
      internal::PermissionAutomation_SetPermission_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDescriptorDataView(
      ::blink::mojom::PermissionDescriptorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDescriptor(UserType* output) {
    auto* pointer = data_->descriptor.Get();
    return mojo::internal::Deserialize<::blink::mojom::PermissionDescriptorDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::PermissionStatus>(
        data_value, output);
  }

  ::blink::mojom::PermissionStatus status() const {
    return static_cast<::blink::mojom::PermissionStatus>(data_->status);
  }
  inline void GetOriginDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetEmbeddingOriginDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEmbeddingOrigin(UserType* output) {
    auto* pointer = data_->embedding_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::PermissionAutomation_SetPermission_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PermissionAutomation_SetPermission_ResponseParamsDataView {
 public:
  PermissionAutomation_SetPermission_ResponseParamsDataView() {}

  PermissionAutomation_SetPermission_ResponseParamsDataView(
      internal::PermissionAutomation_SetPermission_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::PermissionAutomation_SetPermission_ResponseParams_Data* data_ = nullptr;
};


inline void PermissionAutomation_SetPermission_ParamsDataView::GetDescriptorDataView(
    ::blink::mojom::PermissionDescriptorDataView* output) {
  auto pointer = data_->descriptor.Get();
  *output = ::blink::mojom::PermissionDescriptorDataView(pointer, context_);
}
inline void PermissionAutomation_SetPermission_ParamsDataView::GetOriginDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void PermissionAutomation_SetPermission_ParamsDataView::GetEmbeddingOriginDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->embedding_origin.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace test
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_PERMISSION_AUTOMATION_MOJOM_PARAMS_DATA_H_