// third_party/blink/public/mojom/sms/sms_receiver.mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "third_party/blink/public/mojom/sms/sms_receiver.mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SMS_SMS_RECEIVER_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SMS_SMS_RECEIVER_MOJOM_BLINK_JUMBO_H_
#endif


namespace blink {
namespace mojom {
namespace blink {


void SmsReceiverInterceptorForTesting::Receive(ReceiveCallback callback) {
  GetForwardingInterface()->Receive(std::move(callback));
}
void SmsReceiverInterceptorForTesting::Abort() {
  GetForwardingInterface()->Abort();
}
SmsReceiverAsyncWaiter::SmsReceiverAsyncWaiter(
    SmsReceiver* proxy) : proxy_(proxy) {}

SmsReceiverAsyncWaiter::~SmsReceiverAsyncWaiter() = default;

void SmsReceiverAsyncWaiter::Receive(
    SmsStatus* out_status, WTF::String* out_message) {
  base::RunLoop loop;
  proxy_->Receive(
      base::BindOnce(
          [](base::RunLoop* loop,
             SmsStatus* out_status
,
             WTF::String* out_message
,
             SmsStatus status,
             const WTF::String& message) {*out_status = std::move(status);*out_message = std::move(message);
            loop->Quit();
          },
          &loop,
          out_status,
          out_message));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif