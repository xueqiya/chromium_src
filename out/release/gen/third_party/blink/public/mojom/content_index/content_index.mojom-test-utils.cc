// third_party/blink/public/mojom/content_index/content_index.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "third_party/blink/public/mojom/content_index/content_index.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "skia/public/mojom/bitmap.mojom.h"
#include "third_party/blink/public/mojom/manifest/manifest.mojom.h"
#include "url/mojom/url.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTENT_INDEX_CONTENT_INDEX_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTENT_INDEX_CONTENT_INDEX_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/big_buffer_mojom_traits.h"
#include "skia/public/mojom/bitmap_skbitmap_mojom_traits.h"
#include "skia/public/mojom/image_info_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif


namespace blink {
namespace mojom {


void ContentIndexServiceInterceptorForTesting::GetIconSizes(ContentCategory category, GetIconSizesCallback callback) {
  GetForwardingInterface()->GetIconSizes(std::move(category), std::move(callback));
}
void ContentIndexServiceInterceptorForTesting::Add(int64_t service_worker_registration_id, ContentDescriptionPtr description, const std::vector<::SkBitmap>& icon, const ::GURL& launchUrl, AddCallback callback) {
  GetForwardingInterface()->Add(std::move(service_worker_registration_id), std::move(description), std::move(icon), std::move(launchUrl), std::move(callback));
}
void ContentIndexServiceInterceptorForTesting::Delete(int64_t service_worker_registration_id, const std::string& id, DeleteCallback callback) {
  GetForwardingInterface()->Delete(std::move(service_worker_registration_id), std::move(id), std::move(callback));
}
void ContentIndexServiceInterceptorForTesting::GetDescriptions(int64_t service_worker_registration_id, GetDescriptionsCallback callback) {
  GetForwardingInterface()->GetDescriptions(std::move(service_worker_registration_id), std::move(callback));
}
ContentIndexServiceAsyncWaiter::ContentIndexServiceAsyncWaiter(
    ContentIndexService* proxy) : proxy_(proxy) {}

ContentIndexServiceAsyncWaiter::~ContentIndexServiceAsyncWaiter() = default;

void ContentIndexServiceAsyncWaiter::GetIconSizes(
    ContentCategory category, std::vector<::gfx::Size>* out_icon_sizes) {
  base::RunLoop loop;
  proxy_->GetIconSizes(std::move(category),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<::gfx::Size>* out_icon_sizes
,
             const std::vector<::gfx::Size>& icon_sizes) {*out_icon_sizes = std::move(icon_sizes);
            loop->Quit();
          },
          &loop,
          out_icon_sizes));
  loop.Run();
}
void ContentIndexServiceAsyncWaiter::Add(
    int64_t service_worker_registration_id, ContentDescriptionPtr description, const std::vector<::SkBitmap>& icon, const ::GURL& launchUrl, ContentIndexError* out_error) {
  base::RunLoop loop;
  proxy_->Add(std::move(service_worker_registration_id),std::move(description),std::move(icon),std::move(launchUrl),
      base::BindOnce(
          [](base::RunLoop* loop,
             ContentIndexError* out_error
,
             ContentIndexError error) {*out_error = std::move(error);
            loop->Quit();
          },
          &loop,
          out_error));
  loop.Run();
}
void ContentIndexServiceAsyncWaiter::Delete(
    int64_t service_worker_registration_id, const std::string& id, ContentIndexError* out_error) {
  base::RunLoop loop;
  proxy_->Delete(std::move(service_worker_registration_id),std::move(id),
      base::BindOnce(
          [](base::RunLoop* loop,
             ContentIndexError* out_error
,
             ContentIndexError error) {*out_error = std::move(error);
            loop->Quit();
          },
          &loop,
          out_error));
  loop.Run();
}
void ContentIndexServiceAsyncWaiter::GetDescriptions(
    int64_t service_worker_registration_id, ContentIndexError* out_error, std::vector<ContentDescriptionPtr>* out_descriptions) {
  base::RunLoop loop;
  proxy_->GetDescriptions(std::move(service_worker_registration_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             ContentIndexError* out_error
,
             std::vector<ContentDescriptionPtr>* out_descriptions
,
             ContentIndexError error,
             std::vector<ContentDescriptionPtr> descriptions) {*out_error = std::move(error);*out_descriptions = std::move(descriptions);
            loop->Quit();
          },
          &loop,
          out_error,
          out_descriptions));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif