// third_party/blink/public/mojom/webauthn/internal_authenticator.mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "third_party/blink/public/mojom/webauthn/internal_authenticator.mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"
#include "third_party/blink/public/mojom/webauthn/authenticator.mojom-blink.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBAUTHN_INTERNAL_AUTHENTICATOR_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBAUTHN_INTERNAL_AUTHENTICATOR_MOJOM_BLINK_JUMBO_H_
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "third_party/blink/renderer/platform/mojo/kurl_mojom_traits.h"
#endif


namespace blink {
namespace mojom {
namespace blink {


void InternalAuthenticatorInterceptorForTesting::MakeCredential(::blink::mojom::blink::PublicKeyCredentialCreationOptionsPtr options, MakeCredentialCallback callback) {
  GetForwardingInterface()->MakeCredential(std::move(options), std::move(callback));
}
void InternalAuthenticatorInterceptorForTesting::GetAssertion(::blink::mojom::blink::PublicKeyCredentialRequestOptionsPtr options, GetAssertionCallback callback) {
  GetForwardingInterface()->GetAssertion(std::move(options), std::move(callback));
}
void InternalAuthenticatorInterceptorForTesting::IsUserVerifyingPlatformAuthenticatorAvailable(IsUserVerifyingPlatformAuthenticatorAvailableCallback callback) {
  GetForwardingInterface()->IsUserVerifyingPlatformAuthenticatorAvailable(std::move(callback));
}
InternalAuthenticatorAsyncWaiter::InternalAuthenticatorAsyncWaiter(
    InternalAuthenticator* proxy) : proxy_(proxy) {}

InternalAuthenticatorAsyncWaiter::~InternalAuthenticatorAsyncWaiter() = default;

void InternalAuthenticatorAsyncWaiter::MakeCredential(
    ::blink::mojom::blink::PublicKeyCredentialCreationOptionsPtr options, ::blink::mojom::blink::AuthenticatorStatus* out_status, ::blink::mojom::blink::MakeCredentialAuthenticatorResponsePtr* out_credential) {
  base::RunLoop loop;
  proxy_->MakeCredential(std::move(options),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::blink::AuthenticatorStatus* out_status
,
             ::blink::mojom::blink::MakeCredentialAuthenticatorResponsePtr* out_credential
,
             ::blink::mojom::blink::AuthenticatorStatus status,
             ::blink::mojom::blink::MakeCredentialAuthenticatorResponsePtr credential) {*out_status = std::move(status);*out_credential = std::move(credential);
            loop->Quit();
          },
          &loop,
          out_status,
          out_credential));
  loop.Run();
}
void InternalAuthenticatorAsyncWaiter::GetAssertion(
    ::blink::mojom::blink::PublicKeyCredentialRequestOptionsPtr options, ::blink::mojom::blink::AuthenticatorStatus* out_status, ::blink::mojom::blink::GetAssertionAuthenticatorResponsePtr* out_credential) {
  base::RunLoop loop;
  proxy_->GetAssertion(std::move(options),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::blink::AuthenticatorStatus* out_status
,
             ::blink::mojom::blink::GetAssertionAuthenticatorResponsePtr* out_credential
,
             ::blink::mojom::blink::AuthenticatorStatus status,
             ::blink::mojom::blink::GetAssertionAuthenticatorResponsePtr credential) {*out_status = std::move(status);*out_credential = std::move(credential);
            loop->Quit();
          },
          &loop,
          out_status,
          out_credential));
  loop.Run();
}
void InternalAuthenticatorAsyncWaiter::IsUserVerifyingPlatformAuthenticatorAvailable(
    bool* out_available) {
  base::RunLoop loop;
  proxy_->IsUserVerifyingPlatformAuthenticatorAvailable(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_available
,
             bool available) {*out_available = std::move(available);
            loop->Quit();
          },
          &loop,
          out_available));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif