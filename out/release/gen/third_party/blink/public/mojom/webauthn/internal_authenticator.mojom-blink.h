// third_party/blink/public/mojom/webauthn/internal_authenticator.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBAUTHN_INTERNAL_AUTHENTICATOR_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBAUTHN_INTERNAL_AUTHENTICATOR_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/blink/public/mojom/webauthn/internal_authenticator.mojom-shared.h"
#include "third_party/blink/public/mojom/webauthn/internal_authenticator.mojom-blink-forward.h"
#include "third_party/blink/public/mojom/webauthn/authenticator.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace blink {
namespace mojom {
namespace blink {

class InternalAuthenticatorProxy;

template <typename ImplRefTraits>
class InternalAuthenticatorStub;

class InternalAuthenticatorRequestValidator;
class InternalAuthenticatorResponseValidator;


class PLATFORM_EXPORT InternalAuthenticator
    : public InternalAuthenticatorInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = InternalAuthenticatorInterfaceBase;
  using Proxy_ = InternalAuthenticatorProxy;

  template <typename ImplRefTraits>
  using Stub_ = InternalAuthenticatorStub<ImplRefTraits>;

  using RequestValidator_ = InternalAuthenticatorRequestValidator;
  using ResponseValidator_ = InternalAuthenticatorResponseValidator;
  enum MethodMinVersions : uint32_t {
    kMakeCredentialMinVersion = 0,
    kGetAssertionMinVersion = 0,
    kIsUserVerifyingPlatformAuthenticatorAvailableMinVersion = 0,
  };
  virtual ~InternalAuthenticator() {}


  using MakeCredentialCallback = base::OnceCallback<void(::blink::mojom::blink::AuthenticatorStatus, ::blink::mojom::blink::MakeCredentialAuthenticatorResponsePtr)>;
  
  virtual void MakeCredential(::blink::mojom::blink::PublicKeyCredentialCreationOptionsPtr options, MakeCredentialCallback callback) = 0;


  using GetAssertionCallback = base::OnceCallback<void(::blink::mojom::blink::AuthenticatorStatus, ::blink::mojom::blink::GetAssertionAuthenticatorResponsePtr)>;
  
  virtual void GetAssertion(::blink::mojom::blink::PublicKeyCredentialRequestOptionsPtr options, GetAssertionCallback callback) = 0;


  using IsUserVerifyingPlatformAuthenticatorAvailableCallback = base::OnceCallback<void(bool)>;
  
  virtual void IsUserVerifyingPlatformAuthenticatorAvailable(IsUserVerifyingPlatformAuthenticatorAvailableCallback callback) = 0;
};



class PLATFORM_EXPORT InternalAuthenticatorProxy
    : public InternalAuthenticator {
 public:
  using InterfaceType = InternalAuthenticator;

  explicit InternalAuthenticatorProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void MakeCredential(::blink::mojom::blink::PublicKeyCredentialCreationOptionsPtr options, MakeCredentialCallback callback) final;
  
  void GetAssertion(::blink::mojom::blink::PublicKeyCredentialRequestOptionsPtr options, GetAssertionCallback callback) final;
  
  void IsUserVerifyingPlatformAuthenticatorAvailable(IsUserVerifyingPlatformAuthenticatorAvailableCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT InternalAuthenticatorStubDispatch {
 public:
  static bool Accept(InternalAuthenticator* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      InternalAuthenticator* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<InternalAuthenticator>>
class InternalAuthenticatorStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  InternalAuthenticatorStub() {}
  ~InternalAuthenticatorStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return InternalAuthenticatorStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return InternalAuthenticatorStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT InternalAuthenticatorRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT InternalAuthenticatorResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBAUTHN_INTERNAL_AUTHENTICATOR_MOJOM_BLINK_H_