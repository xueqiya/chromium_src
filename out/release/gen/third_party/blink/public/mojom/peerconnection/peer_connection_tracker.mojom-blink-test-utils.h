// third_party/blink/public/mojom/peerconnection/peer_connection_tracker.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/peerconnection/peer_connection_tracker.mojom-blink.h"
#include "third_party/blink/renderer/platform/platform_export.h"


namespace blink {
namespace mojom {
namespace blink {


class PLATFORM_EXPORT PeerConnectionManagerInterceptorForTesting : public PeerConnectionManager {
  virtual PeerConnectionManager* GetForwardingInterface() = 0;
  void OnSuspend() override;
  void StartEventLog(int32_t peer_connection_local_id, int32_t output_period_ms) override;
  void StopEventLog(int32_t peer_connection_local_id) override;
  void GetStandardStats() override;
  void GetLegacyStats() override;
};
class PLATFORM_EXPORT PeerConnectionManagerAsyncWaiter {
 public:
  explicit PeerConnectionManagerAsyncWaiter(PeerConnectionManager* proxy);
  ~PeerConnectionManagerAsyncWaiter();

 private:
  PeerConnectionManager* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PeerConnectionManagerAsyncWaiter);
};


class PLATFORM_EXPORT PeerConnectionTrackerHostInterceptorForTesting : public PeerConnectionTrackerHost {
  virtual PeerConnectionTrackerHost* GetForwardingInterface() = 0;
  void AddPeerConnection(PeerConnectionInfoPtr info) override;
  void RemovePeerConnection(int32_t lid) override;
  void UpdatePeerConnection(int32_t lid, const WTF::String& type, const WTF::String& value) override;
  void OnPeerConnectionSessionIdSet(int32_t lid, const WTF::String& session_id) override;
  void GetUserMedia(const WTF::String& origin, bool audio, bool video, const WTF::String& audio_constraints, const WTF::String& video_constraints) override;
  void WebRtcEventLogWrite(int32_t lid, const WTF::Vector<uint8_t>& output) override;
  void AddStandardStats(int32_t lid, ::base::Value value) override;
  void AddLegacyStats(int32_t lid, ::base::Value value) override;
};
class PLATFORM_EXPORT PeerConnectionTrackerHostAsyncWaiter {
 public:
  explicit PeerConnectionTrackerHostAsyncWaiter(PeerConnectionTrackerHost* proxy);
  ~PeerConnectionTrackerHostAsyncWaiter();

 private:
  PeerConnectionTrackerHost* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PeerConnectionTrackerHostAsyncWaiter);
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_BLINK_TEST_UTILS_H_