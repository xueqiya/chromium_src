// third_party/blink/public/mojom/peerconnection/peer_connection_tracker.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace blink {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionManager_OnSuspend_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionManager_OnSuspend_Params_Data));
      new (data()) PeerConnectionManager_OnSuspend_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionManager_OnSuspend_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionManager_OnSuspend_Params_Data>(index_);
    }
    PeerConnectionManager_OnSuspend_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PeerConnectionManager_OnSuspend_Params_Data();
  ~PeerConnectionManager_OnSuspend_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionManager_OnSuspend_Params_Data) == 8,
              "Bad sizeof(PeerConnectionManager_OnSuspend_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionManager_StartEventLog_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionManager_StartEventLog_Params_Data));
      new (data()) PeerConnectionManager_StartEventLog_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionManager_StartEventLog_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionManager_StartEventLog_Params_Data>(index_);
    }
    PeerConnectionManager_StartEventLog_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t peer_connection_local_id;
  int32_t output_period_ms;

 private:
  PeerConnectionManager_StartEventLog_Params_Data();
  ~PeerConnectionManager_StartEventLog_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionManager_StartEventLog_Params_Data) == 16,
              "Bad sizeof(PeerConnectionManager_StartEventLog_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionManager_StopEventLog_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionManager_StopEventLog_Params_Data));
      new (data()) PeerConnectionManager_StopEventLog_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionManager_StopEventLog_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionManager_StopEventLog_Params_Data>(index_);
    }
    PeerConnectionManager_StopEventLog_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t peer_connection_local_id;
  uint8_t padfinal_[4];

 private:
  PeerConnectionManager_StopEventLog_Params_Data();
  ~PeerConnectionManager_StopEventLog_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionManager_StopEventLog_Params_Data) == 16,
              "Bad sizeof(PeerConnectionManager_StopEventLog_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionManager_GetStandardStats_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionManager_GetStandardStats_Params_Data));
      new (data()) PeerConnectionManager_GetStandardStats_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionManager_GetStandardStats_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionManager_GetStandardStats_Params_Data>(index_);
    }
    PeerConnectionManager_GetStandardStats_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PeerConnectionManager_GetStandardStats_Params_Data();
  ~PeerConnectionManager_GetStandardStats_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionManager_GetStandardStats_Params_Data) == 8,
              "Bad sizeof(PeerConnectionManager_GetStandardStats_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionManager_GetLegacyStats_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionManager_GetLegacyStats_Params_Data));
      new (data()) PeerConnectionManager_GetLegacyStats_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionManager_GetLegacyStats_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionManager_GetLegacyStats_Params_Data>(index_);
    }
    PeerConnectionManager_GetLegacyStats_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PeerConnectionManager_GetLegacyStats_Params_Data();
  ~PeerConnectionManager_GetLegacyStats_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionManager_GetLegacyStats_Params_Data) == 8,
              "Bad sizeof(PeerConnectionManager_GetLegacyStats_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionTrackerHost_AddPeerConnection_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionTrackerHost_AddPeerConnection_Params_Data));
      new (data()) PeerConnectionTrackerHost_AddPeerConnection_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionTrackerHost_AddPeerConnection_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionTrackerHost_AddPeerConnection_Params_Data>(index_);
    }
    PeerConnectionTrackerHost_AddPeerConnection_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PeerConnectionInfo_Data> info;

 private:
  PeerConnectionTrackerHost_AddPeerConnection_Params_Data();
  ~PeerConnectionTrackerHost_AddPeerConnection_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionTrackerHost_AddPeerConnection_Params_Data) == 16,
              "Bad sizeof(PeerConnectionTrackerHost_AddPeerConnection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionTrackerHost_RemovePeerConnection_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionTrackerHost_RemovePeerConnection_Params_Data));
      new (data()) PeerConnectionTrackerHost_RemovePeerConnection_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionTrackerHost_RemovePeerConnection_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionTrackerHost_RemovePeerConnection_Params_Data>(index_);
    }
    PeerConnectionTrackerHost_RemovePeerConnection_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t lid;
  uint8_t padfinal_[4];

 private:
  PeerConnectionTrackerHost_RemovePeerConnection_Params_Data();
  ~PeerConnectionTrackerHost_RemovePeerConnection_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionTrackerHost_RemovePeerConnection_Params_Data) == 16,
              "Bad sizeof(PeerConnectionTrackerHost_RemovePeerConnection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data));
      new (data()) PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data>(index_);
    }
    PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t lid;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> type;
  mojo::internal::Pointer<mojo::internal::String_Data> value;

 private:
  PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data();
  ~PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data) == 32,
              "Bad sizeof(PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data));
      new (data()) PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data>(index_);
    }
    PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t lid;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> session_id;

 private:
  PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data();
  ~PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data) == 24,
              "Bad sizeof(PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionTrackerHost_GetUserMedia_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionTrackerHost_GetUserMedia_Params_Data));
      new (data()) PeerConnectionTrackerHost_GetUserMedia_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionTrackerHost_GetUserMedia_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionTrackerHost_GetUserMedia_Params_Data>(index_);
    }
    PeerConnectionTrackerHost_GetUserMedia_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> origin;
  uint8_t audio : 1;
  uint8_t video : 1;
  uint8_t pad2_[7];
  mojo::internal::Pointer<mojo::internal::String_Data> audio_constraints;
  mojo::internal::Pointer<mojo::internal::String_Data> video_constraints;

 private:
  PeerConnectionTrackerHost_GetUserMedia_Params_Data();
  ~PeerConnectionTrackerHost_GetUserMedia_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionTrackerHost_GetUserMedia_Params_Data) == 40,
              "Bad sizeof(PeerConnectionTrackerHost_GetUserMedia_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data));
      new (data()) PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data>(index_);
    }
    PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t lid;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> output;

 private:
  PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data();
  ~PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data) == 24,
              "Bad sizeof(PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionTrackerHost_AddStandardStats_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionTrackerHost_AddStandardStats_Params_Data));
      new (data()) PeerConnectionTrackerHost_AddStandardStats_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionTrackerHost_AddStandardStats_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionTrackerHost_AddStandardStats_Params_Data>(index_);
    }
    PeerConnectionTrackerHost_AddStandardStats_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t lid;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::ListValue_Data> value;

 private:
  PeerConnectionTrackerHost_AddStandardStats_Params_Data();
  ~PeerConnectionTrackerHost_AddStandardStats_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionTrackerHost_AddStandardStats_Params_Data) == 24,
              "Bad sizeof(PeerConnectionTrackerHost_AddStandardStats_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PeerConnectionTrackerHost_AddLegacyStats_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PeerConnectionTrackerHost_AddLegacyStats_Params_Data));
      new (data()) PeerConnectionTrackerHost_AddLegacyStats_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PeerConnectionTrackerHost_AddLegacyStats_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PeerConnectionTrackerHost_AddLegacyStats_Params_Data>(index_);
    }
    PeerConnectionTrackerHost_AddLegacyStats_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t lid;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::ListValue_Data> value;

 private:
  PeerConnectionTrackerHost_AddLegacyStats_Params_Data();
  ~PeerConnectionTrackerHost_AddLegacyStats_Params_Data() = delete;
};
static_assert(sizeof(PeerConnectionTrackerHost_AddLegacyStats_Params_Data) == 24,
              "Bad sizeof(PeerConnectionTrackerHost_AddLegacyStats_Params_Data)");

}  // namespace internal
class PeerConnectionManager_OnSuspend_ParamsDataView {
 public:
  PeerConnectionManager_OnSuspend_ParamsDataView() {}

  PeerConnectionManager_OnSuspend_ParamsDataView(
      internal::PeerConnectionManager_OnSuspend_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PeerConnectionManager_OnSuspend_Params_Data* data_ = nullptr;
};

class PeerConnectionManager_StartEventLog_ParamsDataView {
 public:
  PeerConnectionManager_StartEventLog_ParamsDataView() {}

  PeerConnectionManager_StartEventLog_ParamsDataView(
      internal::PeerConnectionManager_StartEventLog_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t peer_connection_local_id() const {
    return data_->peer_connection_local_id;
  }
  int32_t output_period_ms() const {
    return data_->output_period_ms;
  }
 private:
  internal::PeerConnectionManager_StartEventLog_Params_Data* data_ = nullptr;
};

class PeerConnectionManager_StopEventLog_ParamsDataView {
 public:
  PeerConnectionManager_StopEventLog_ParamsDataView() {}

  PeerConnectionManager_StopEventLog_ParamsDataView(
      internal::PeerConnectionManager_StopEventLog_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t peer_connection_local_id() const {
    return data_->peer_connection_local_id;
  }
 private:
  internal::PeerConnectionManager_StopEventLog_Params_Data* data_ = nullptr;
};

class PeerConnectionManager_GetStandardStats_ParamsDataView {
 public:
  PeerConnectionManager_GetStandardStats_ParamsDataView() {}

  PeerConnectionManager_GetStandardStats_ParamsDataView(
      internal::PeerConnectionManager_GetStandardStats_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PeerConnectionManager_GetStandardStats_Params_Data* data_ = nullptr;
};

class PeerConnectionManager_GetLegacyStats_ParamsDataView {
 public:
  PeerConnectionManager_GetLegacyStats_ParamsDataView() {}

  PeerConnectionManager_GetLegacyStats_ParamsDataView(
      internal::PeerConnectionManager_GetLegacyStats_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PeerConnectionManager_GetLegacyStats_Params_Data* data_ = nullptr;
};

class PeerConnectionTrackerHost_AddPeerConnection_ParamsDataView {
 public:
  PeerConnectionTrackerHost_AddPeerConnection_ParamsDataView() {}

  PeerConnectionTrackerHost_AddPeerConnection_ParamsDataView(
      internal::PeerConnectionTrackerHost_AddPeerConnection_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      PeerConnectionInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInfo(UserType* output) {
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::blink::mojom::PeerConnectionInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::PeerConnectionTrackerHost_AddPeerConnection_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PeerConnectionTrackerHost_RemovePeerConnection_ParamsDataView {
 public:
  PeerConnectionTrackerHost_RemovePeerConnection_ParamsDataView() {}

  PeerConnectionTrackerHost_RemovePeerConnection_ParamsDataView(
      internal::PeerConnectionTrackerHost_RemovePeerConnection_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t lid() const {
    return data_->lid;
  }
 private:
  internal::PeerConnectionTrackerHost_RemovePeerConnection_Params_Data* data_ = nullptr;
};

class PeerConnectionTrackerHost_UpdatePeerConnection_ParamsDataView {
 public:
  PeerConnectionTrackerHost_UpdatePeerConnection_ParamsDataView() {}

  PeerConnectionTrackerHost_UpdatePeerConnection_ParamsDataView(
      internal::PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t lid() const {
    return data_->lid;
  }
  inline void GetTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) {
    auto* pointer = data_->type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PeerConnectionTrackerHost_UpdatePeerConnection_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_ParamsDataView {
 public:
  PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_ParamsDataView() {}

  PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_ParamsDataView(
      internal::PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t lid() const {
    return data_->lid;
  }
  inline void GetSessionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionId(UserType* output) {
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PeerConnectionTrackerHost_GetUserMedia_ParamsDataView {
 public:
  PeerConnectionTrackerHost_GetUserMedia_ParamsDataView() {}

  PeerConnectionTrackerHost_GetUserMedia_ParamsDataView(
      internal::PeerConnectionTrackerHost_GetUserMedia_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  bool audio() const {
    return data_->audio;
  }
  bool video() const {
    return data_->video;
  }
  inline void GetAudioConstraintsDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAudioConstraints(UserType* output) {
    auto* pointer = data_->audio_constraints.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetVideoConstraintsDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVideoConstraints(UserType* output) {
    auto* pointer = data_->video_constraints.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PeerConnectionTrackerHost_GetUserMedia_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PeerConnectionTrackerHost_WebRtcEventLogWrite_ParamsDataView {
 public:
  PeerConnectionTrackerHost_WebRtcEventLogWrite_ParamsDataView() {}

  PeerConnectionTrackerHost_WebRtcEventLogWrite_ParamsDataView(
      internal::PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t lid() const {
    return data_->lid;
  }
  inline void GetOutputDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOutput(UserType* output) {
    auto* pointer = data_->output.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::PeerConnectionTrackerHost_WebRtcEventLogWrite_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PeerConnectionTrackerHost_AddStandardStats_ParamsDataView {
 public:
  PeerConnectionTrackerHost_AddStandardStats_ParamsDataView() {}

  PeerConnectionTrackerHost_AddStandardStats_ParamsDataView(
      internal::PeerConnectionTrackerHost_AddStandardStats_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t lid() const {
    return data_->lid;
  }
  inline void GetValueDataView(
      ::mojo_base::mojom::ListValueDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ListValueDataView>(
        pointer, output, context_);
  }
 private:
  internal::PeerConnectionTrackerHost_AddStandardStats_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PeerConnectionTrackerHost_AddLegacyStats_ParamsDataView {
 public:
  PeerConnectionTrackerHost_AddLegacyStats_ParamsDataView() {}

  PeerConnectionTrackerHost_AddLegacyStats_ParamsDataView(
      internal::PeerConnectionTrackerHost_AddLegacyStats_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t lid() const {
    return data_->lid;
  }
  inline void GetValueDataView(
      ::mojo_base::mojom::ListValueDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ListValueDataView>(
        pointer, output, context_);
  }
 private:
  internal::PeerConnectionTrackerHost_AddLegacyStats_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};












inline void PeerConnectionTrackerHost_AddPeerConnection_ParamsDataView::GetInfoDataView(
    PeerConnectionInfoDataView* output) {
  auto pointer = data_->info.Get();
  *output = PeerConnectionInfoDataView(pointer, context_);
}




inline void PeerConnectionTrackerHost_UpdatePeerConnection_ParamsDataView::GetTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->type.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void PeerConnectionTrackerHost_UpdatePeerConnection_ParamsDataView::GetValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->value.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PeerConnectionTrackerHost_OnPeerConnectionSessionIdSet_ParamsDataView::GetSessionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PeerConnectionTrackerHost_GetUserMedia_ParamsDataView::GetOriginDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->origin.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void PeerConnectionTrackerHost_GetUserMedia_ParamsDataView::GetAudioConstraintsDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->audio_constraints.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void PeerConnectionTrackerHost_GetUserMedia_ParamsDataView::GetVideoConstraintsDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->video_constraints.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PeerConnectionTrackerHost_WebRtcEventLogWrite_ParamsDataView::GetOutputDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->output.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}


inline void PeerConnectionTrackerHost_AddStandardStats_ParamsDataView::GetValueDataView(
    ::mojo_base::mojom::ListValueDataView* output) {
  auto pointer = data_->value.Get();
  *output = ::mojo_base::mojom::ListValueDataView(pointer, context_);
}


inline void PeerConnectionTrackerHost_AddLegacyStats_ParamsDataView::GetValueDataView(
    ::mojo_base::mojom::ListValueDataView* output) {
  auto pointer = data_->value.Get();
  *output = ::mojo_base::mojom::ListValueDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_PARAMS_DATA_H_