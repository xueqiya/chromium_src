// third_party/blink/public/mojom/peerconnection/peer_connection_tracker.mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "third_party/blink/public/mojom/peerconnection/peer_connection_tracker.mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"
#include "mojo/public/mojom/base/values.mojom-blink.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_BLINK_JUMBO_H_
#include "mojo/public/cpp/base/values_mojom_traits.h"
#endif


namespace blink {
namespace mojom {
namespace blink {


void PeerConnectionManagerInterceptorForTesting::OnSuspend() {
  GetForwardingInterface()->OnSuspend();
}
void PeerConnectionManagerInterceptorForTesting::StartEventLog(int32_t peer_connection_local_id, int32_t output_period_ms) {
  GetForwardingInterface()->StartEventLog(std::move(peer_connection_local_id), std::move(output_period_ms));
}
void PeerConnectionManagerInterceptorForTesting::StopEventLog(int32_t peer_connection_local_id) {
  GetForwardingInterface()->StopEventLog(std::move(peer_connection_local_id));
}
void PeerConnectionManagerInterceptorForTesting::GetStandardStats() {
  GetForwardingInterface()->GetStandardStats();
}
void PeerConnectionManagerInterceptorForTesting::GetLegacyStats() {
  GetForwardingInterface()->GetLegacyStats();
}
PeerConnectionManagerAsyncWaiter::PeerConnectionManagerAsyncWaiter(
    PeerConnectionManager* proxy) : proxy_(proxy) {}

PeerConnectionManagerAsyncWaiter::~PeerConnectionManagerAsyncWaiter() = default;




void PeerConnectionTrackerHostInterceptorForTesting::AddPeerConnection(PeerConnectionInfoPtr info) {
  GetForwardingInterface()->AddPeerConnection(std::move(info));
}
void PeerConnectionTrackerHostInterceptorForTesting::RemovePeerConnection(int32_t lid) {
  GetForwardingInterface()->RemovePeerConnection(std::move(lid));
}
void PeerConnectionTrackerHostInterceptorForTesting::UpdatePeerConnection(int32_t lid, const WTF::String& type, const WTF::String& value) {
  GetForwardingInterface()->UpdatePeerConnection(std::move(lid), std::move(type), std::move(value));
}
void PeerConnectionTrackerHostInterceptorForTesting::OnPeerConnectionSessionIdSet(int32_t lid, const WTF::String& session_id) {
  GetForwardingInterface()->OnPeerConnectionSessionIdSet(std::move(lid), std::move(session_id));
}
void PeerConnectionTrackerHostInterceptorForTesting::GetUserMedia(const WTF::String& origin, bool audio, bool video, const WTF::String& audio_constraints, const WTF::String& video_constraints) {
  GetForwardingInterface()->GetUserMedia(std::move(origin), std::move(audio), std::move(video), std::move(audio_constraints), std::move(video_constraints));
}
void PeerConnectionTrackerHostInterceptorForTesting::WebRtcEventLogWrite(int32_t lid, const WTF::Vector<uint8_t>& output) {
  GetForwardingInterface()->WebRtcEventLogWrite(std::move(lid), std::move(output));
}
void PeerConnectionTrackerHostInterceptorForTesting::AddStandardStats(int32_t lid, ::base::Value value) {
  GetForwardingInterface()->AddStandardStats(std::move(lid), std::move(value));
}
void PeerConnectionTrackerHostInterceptorForTesting::AddLegacyStats(int32_t lid, ::base::Value value) {
  GetForwardingInterface()->AddLegacyStats(std::move(lid), std::move(value));
}
PeerConnectionTrackerHostAsyncWaiter::PeerConnectionTrackerHostAsyncWaiter(
    PeerConnectionTrackerHost* proxy) : proxy_(proxy) {}

PeerConnectionTrackerHostAsyncWaiter::~PeerConnectionTrackerHostAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif