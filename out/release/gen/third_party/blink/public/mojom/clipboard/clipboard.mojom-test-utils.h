// third_party/blink/public/mojom/clipboard/clipboard.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CLIPBOARD_CLIPBOARD_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CLIPBOARD_CLIPBOARD_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/clipboard/clipboard.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT ClipboardHostInterceptorForTesting : public ClipboardHost {
  virtual ClipboardHost* GetForwardingInterface() = 0;
  void GetSequenceNumber(ui::ClipboardBuffer buffer, GetSequenceNumberCallback callback) override;
  void IsFormatAvailable(ClipboardFormat format, ui::ClipboardBuffer buffer, IsFormatAvailableCallback callback) override;
  void ReadAvailableTypes(ui::ClipboardBuffer buffer, ReadAvailableTypesCallback callback) override;
  void ReadAvailablePlatformSpecificFormatNames(ui::ClipboardBuffer buffer, ReadAvailablePlatformSpecificFormatNamesCallback callback) override;
  void ReadText(ui::ClipboardBuffer buffer, ReadTextCallback callback) override;
  void ReadHtml(ui::ClipboardBuffer buffer, ReadHtmlCallback callback) override;
  void ReadRtf(ui::ClipboardBuffer buffer, ReadRtfCallback callback) override;
  void ReadImage(ui::ClipboardBuffer buffer, ReadImageCallback callback) override;
  void ReadCustomData(ui::ClipboardBuffer buffer, const ::base::string16& type, ReadCustomDataCallback callback) override;
  void WriteText(const ::base::string16& text) override;
  void WriteHtml(const ::base::string16& markup, const ::GURL& url) override;
  void WriteSmartPasteMarker() override;
  void WriteCustomData(const base::flat_map<::base::string16, ::base::string16>& data) override;
  void WriteRawData(const ::base::string16& format, ::mojo_base::BigBuffer data) override;
  void WriteBookmark(const std::string& url, const ::base::string16& title) override;
  void WriteImage(const ::SkBitmap& image) override;
  void CommitWrite() override;
};
class BLINK_COMMON_EXPORT ClipboardHostAsyncWaiter {
 public:
  explicit ClipboardHostAsyncWaiter(ClipboardHost* proxy);
  ~ClipboardHostAsyncWaiter();
  void GetSequenceNumber(
      ui::ClipboardBuffer buffer, uint64_t* out_result);
  void IsFormatAvailable(
      ClipboardFormat format, ui::ClipboardBuffer buffer, bool* out_result);
  void ReadAvailableTypes(
      ui::ClipboardBuffer buffer, std::vector<::base::string16>* out_types, bool* out_result);
  void ReadAvailablePlatformSpecificFormatNames(
      ui::ClipboardBuffer buffer, std::vector<::base::string16>* out_raw_types);
  void ReadText(
      ui::ClipboardBuffer buffer, ::base::string16* out_result);
  void ReadHtml(
      ui::ClipboardBuffer buffer, ::base::string16* out_markup, ::GURL* out_url, uint32_t* out_fragment_start, uint32_t* out_fragment_end);
  void ReadRtf(
      ui::ClipboardBuffer buffer, std::string* out_result);
  void ReadImage(
      ui::ClipboardBuffer buffer, ::SkBitmap* out_image);
  void ReadCustomData(
      ui::ClipboardBuffer buffer, const ::base::string16& type, ::base::string16* out_result);

 private:
  ClipboardHost* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(ClipboardHostAsyncWaiter);
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CLIPBOARD_CLIPBOARD_MOJOM_TEST_UTILS_H_