// third_party/blink/public/mojom/screen_enumeration/screen_enumeration.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "third_party/blink/public/mojom/screen_enumeration/screen_enumeration.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "third_party/blink/public/mojom/screen_enumeration/screen_enumeration.mojom-params-data.h"
#include "third_party/blink/public/mojom/screen_enumeration/screen_enumeration.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/screen_enumeration/screen_enumeration.mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SCREEN_ENUMERATION_SCREEN_ENUMERATION_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SCREEN_ENUMERATION_SCREEN_ENUMERATION_MOJOM_BLINK_JUMBO_H_
#include "third_party/blink/renderer/platform/mojo/geometry_mojom_traits.h"
#include "ui/display/mojom/display_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "ui/gfx/mojom/color_space_mojom_traits.h"
#endif
namespace blink {
namespace mojom {
namespace blink {
const char ScreenEnumeration::Name_[] = "blink.mojom.ScreenEnumeration";

class ScreenEnumeration_GetDisplays_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ScreenEnumeration_GetDisplays_ForwardToCallback(
      ScreenEnumeration::GetDisplaysCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ScreenEnumeration::GetDisplaysCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(ScreenEnumeration_GetDisplays_ForwardToCallback);
};

ScreenEnumerationProxy::ScreenEnumerationProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ScreenEnumerationProxy::GetDisplays(
    GetDisplaysCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::ScreenEnumeration::GetDisplays");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kScreenEnumeration_GetDisplays_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::ScreenEnumeration_GetDisplays_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ScreenEnumeration::Name_);
  message.set_method_name("GetDisplays");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ScreenEnumeration_GetDisplays_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class ScreenEnumeration_GetDisplays_ProxyToResponder {
 public:
  static ScreenEnumeration::GetDisplaysCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ScreenEnumeration_GetDisplays_ProxyToResponder> proxy(
        new ScreenEnumeration_GetDisplays_ProxyToResponder(
            request_id, is_sync, std::move(responder)));
    return base::BindOnce(&ScreenEnumeration_GetDisplays_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ScreenEnumeration_GetDisplays_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  ScreenEnumeration_GetDisplays_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ScreenEnumeration::GetDisplaysCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      WTF::Vector<::display::mojom::blink::DisplayPtr> in_displays, int64_t in_internal_id, int64_t in_primary_id, bool in_success);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(ScreenEnumeration_GetDisplays_ProxyToResponder);
};

bool ScreenEnumeration_GetDisplays_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "blink::mojom::ScreenEnumeration::GetDisplaysCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::ScreenEnumeration_GetDisplays_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ScreenEnumeration_GetDisplays_ResponseParams_Data*>(
              message->mutable_payload());
  
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  bool success = true;
  WTF::Vector<::display::mojom::blink::DisplayPtr> p_displays{};
  int64_t p_internal_id{};
  int64_t p_primary_id{};
  bool p_success{};
  ScreenEnumeration_GetDisplays_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadDisplays(&p_displays))
    success = false;
  if (success)
    p_internal_id = input_data_view.internal_id();
  if (success)
    p_primary_id = input_data_view.primary_id();
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ScreenEnumeration::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_displays), 
std::move(p_internal_id), 
std::move(p_primary_id), 
std::move(p_success));
  return true;
}

void ScreenEnumeration_GetDisplays_ProxyToResponder::Run(
    WTF::Vector<::display::mojom::blink::DisplayPtr> in_displays, int64_t in_internal_id, int64_t in_primary_id, bool in_success) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kScreenEnumeration_GetDisplays_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::ScreenEnumeration_GetDisplays_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->displays)::BaseType::BufferWriter
      displays_writer;
  const mojo::internal::ContainerValidateParams displays_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::display::mojom::DisplayDataView>>(
      in_displays, buffer, &displays_writer, &displays_validate_params,
      &serialization_context);
  params->displays.Set(
      displays_writer.is_null() ? nullptr : displays_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->displays.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null displays in ");
  params->internal_id = in_internal_id;
  params->primary_id = in_primary_id;
  params->success = in_success;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)blink::mojom::ScreenEnumeration::GetDisplaysCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ScreenEnumeration::Name_);
  message.set_method_name("GetDisplays");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool ScreenEnumerationStubDispatch::Accept(
    ScreenEnumeration* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kScreenEnumeration_GetDisplays_Name: {
      break;
    }
  }
  return false;
}

// static
bool ScreenEnumerationStubDispatch::AcceptWithResponder(
    ScreenEnumeration* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kScreenEnumeration_GetDisplays_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::ScreenEnumeration::GetDisplays",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::ScreenEnumeration::GetDisplays");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      internal::ScreenEnumeration_GetDisplays_Params_Data* params =
          reinterpret_cast<
              internal::ScreenEnumeration_GetDisplays_Params_Data*>(
                  message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ScreenEnumeration_GetDisplays_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ScreenEnumeration::Name_, 0, false);
        return false;
      }
      ScreenEnumeration::GetDisplaysCallback callback =
          ScreenEnumeration_GetDisplays_ProxyToResponder::CreateCallback(
              message->request_id(),
              message->has_flag(mojo::Message::kFlagIsSync),
              std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetDisplays(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kScreenEnumerationValidationInfo[] = {
    {&internal::ScreenEnumeration_GetDisplays_Params_Data::Validate,
     &internal::ScreenEnumeration_GetDisplays_ResponseParams_Data::Validate},
};

bool ScreenEnumerationRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::ScreenEnumeration::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kScreenEnumerationValidationInfo);
}

bool ScreenEnumerationResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::ScreenEnumeration::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kScreenEnumerationValidationInfo);
}
}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif