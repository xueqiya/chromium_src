// VirtualAuthenticatorManager_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/webauthn/virtual_authenticator.mojom
//

package org.chromium.blink.test.mojom;


class VirtualAuthenticatorManager_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<VirtualAuthenticatorManager, VirtualAuthenticatorManager.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<VirtualAuthenticatorManager, VirtualAuthenticatorManager.Proxy>() {

        @Override
        public String getName() {
            return "blink.test.mojom.VirtualAuthenticatorManager";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, VirtualAuthenticatorManager impl) {
            return new Stub(core, impl);
        }

        @Override
        public VirtualAuthenticatorManager[] buildArray(int size) {
          return new VirtualAuthenticatorManager[size];
        }
    };


    private static final int CREATE_AUTHENTICATOR_ORDINAL = 0;

    private static final int GET_AUTHENTICATORS_ORDINAL = 1;

    private static final int REMOVE_AUTHENTICATOR_ORDINAL = 2;

    private static final int CLEAR_AUTHENTICATORS_ORDINAL = 3;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements VirtualAuthenticatorManager.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createAuthenticator(
VirtualAuthenticatorOptions options, 
CreateAuthenticatorResponse callback) {

            VirtualAuthenticatorManagerCreateAuthenticatorParams _message = new VirtualAuthenticatorManagerCreateAuthenticatorParams();

            _message.options = options;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_AUTHENTICATOR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new VirtualAuthenticatorManagerCreateAuthenticatorResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getAuthenticators(

GetAuthenticatorsResponse callback) {

            VirtualAuthenticatorManagerGetAuthenticatorsParams _message = new VirtualAuthenticatorManagerGetAuthenticatorsParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_AUTHENTICATORS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new VirtualAuthenticatorManagerGetAuthenticatorsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void removeAuthenticator(
String id, 
RemoveAuthenticatorResponse callback) {

            VirtualAuthenticatorManagerRemoveAuthenticatorParams _message = new VirtualAuthenticatorManagerRemoveAuthenticatorParams();

            _message.id = id;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REMOVE_AUTHENTICATOR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new VirtualAuthenticatorManagerRemoveAuthenticatorResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearAuthenticators(

ClearAuthenticatorsResponse callback) {

            VirtualAuthenticatorManagerClearAuthenticatorsParams _message = new VirtualAuthenticatorManagerClearAuthenticatorsParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CLEAR_AUTHENTICATORS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new VirtualAuthenticatorManagerClearAuthenticatorsResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<VirtualAuthenticatorManager> {

        Stub(org.chromium.mojo.system.Core core, VirtualAuthenticatorManager impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                VirtualAuthenticatorManager_Internal.MANAGER, messageWithHeader);










                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), VirtualAuthenticatorManager_Internal.MANAGER, messageWithHeader, receiver);







                    case CREATE_AUTHENTICATOR_ORDINAL: {

                        VirtualAuthenticatorManagerCreateAuthenticatorParams data =
                                VirtualAuthenticatorManagerCreateAuthenticatorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createAuthenticator(data.options, new VirtualAuthenticatorManagerCreateAuthenticatorResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case GET_AUTHENTICATORS_ORDINAL: {

                        VirtualAuthenticatorManagerGetAuthenticatorsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getAuthenticators(new VirtualAuthenticatorManagerGetAuthenticatorsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case REMOVE_AUTHENTICATOR_ORDINAL: {

                        VirtualAuthenticatorManagerRemoveAuthenticatorParams data =
                                VirtualAuthenticatorManagerRemoveAuthenticatorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().removeAuthenticator(data.id, new VirtualAuthenticatorManagerRemoveAuthenticatorResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case CLEAR_AUTHENTICATORS_ORDINAL: {

                        VirtualAuthenticatorManagerClearAuthenticatorsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearAuthenticators(new VirtualAuthenticatorManagerClearAuthenticatorsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class VirtualAuthenticatorManagerCreateAuthenticatorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public VirtualAuthenticatorOptions options;

        private VirtualAuthenticatorManagerCreateAuthenticatorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VirtualAuthenticatorManagerCreateAuthenticatorParams() {
            this(0);
        }

        public static VirtualAuthenticatorManagerCreateAuthenticatorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VirtualAuthenticatorManagerCreateAuthenticatorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VirtualAuthenticatorManagerCreateAuthenticatorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VirtualAuthenticatorManagerCreateAuthenticatorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VirtualAuthenticatorManagerCreateAuthenticatorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.options = VirtualAuthenticatorOptions.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.options, 8, false);
        }
    }



    
    static final class VirtualAuthenticatorManagerCreateAuthenticatorResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public VirtualAuthenticator authenticator;

        private VirtualAuthenticatorManagerCreateAuthenticatorResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VirtualAuthenticatorManagerCreateAuthenticatorResponseParams() {
            this(0);
        }

        public static VirtualAuthenticatorManagerCreateAuthenticatorResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VirtualAuthenticatorManagerCreateAuthenticatorResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VirtualAuthenticatorManagerCreateAuthenticatorResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VirtualAuthenticatorManagerCreateAuthenticatorResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VirtualAuthenticatorManagerCreateAuthenticatorResponseParams(elementsOrVersion);
                    {
                        
                    result.authenticator = decoder0.readServiceInterface(8, false, VirtualAuthenticator.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.authenticator, 8, false, VirtualAuthenticator.MANAGER);
        }
    }

    static class VirtualAuthenticatorManagerCreateAuthenticatorResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final VirtualAuthenticatorManager.CreateAuthenticatorResponse mCallback;

        VirtualAuthenticatorManagerCreateAuthenticatorResponseParamsForwardToCallback(VirtualAuthenticatorManager.CreateAuthenticatorResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_AUTHENTICATOR_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                VirtualAuthenticatorManagerCreateAuthenticatorResponseParams response = VirtualAuthenticatorManagerCreateAuthenticatorResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.authenticator);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class VirtualAuthenticatorManagerCreateAuthenticatorResponseParamsProxyToResponder implements VirtualAuthenticatorManager.CreateAuthenticatorResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        VirtualAuthenticatorManagerCreateAuthenticatorResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(VirtualAuthenticator authenticator) {
            VirtualAuthenticatorManagerCreateAuthenticatorResponseParams _response = new VirtualAuthenticatorManagerCreateAuthenticatorResponseParams();

            _response.authenticator = authenticator;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_AUTHENTICATOR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class VirtualAuthenticatorManagerGetAuthenticatorsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private VirtualAuthenticatorManagerGetAuthenticatorsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VirtualAuthenticatorManagerGetAuthenticatorsParams() {
            this(0);
        }

        public static VirtualAuthenticatorManagerGetAuthenticatorsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VirtualAuthenticatorManagerGetAuthenticatorsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VirtualAuthenticatorManagerGetAuthenticatorsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VirtualAuthenticatorManagerGetAuthenticatorsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VirtualAuthenticatorManagerGetAuthenticatorsParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class VirtualAuthenticatorManagerGetAuthenticatorsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public VirtualAuthenticator[] authenticators;

        private VirtualAuthenticatorManagerGetAuthenticatorsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VirtualAuthenticatorManagerGetAuthenticatorsResponseParams() {
            this(0);
        }

        public static VirtualAuthenticatorManagerGetAuthenticatorsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VirtualAuthenticatorManagerGetAuthenticatorsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VirtualAuthenticatorManagerGetAuthenticatorsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VirtualAuthenticatorManagerGetAuthenticatorsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VirtualAuthenticatorManagerGetAuthenticatorsResponseParams(elementsOrVersion);
                    {
                        
                    result.authenticators = decoder0.readServiceInterfaces(8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH, VirtualAuthenticator.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.authenticators, 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH, VirtualAuthenticator.MANAGER);
        }
    }

    static class VirtualAuthenticatorManagerGetAuthenticatorsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final VirtualAuthenticatorManager.GetAuthenticatorsResponse mCallback;

        VirtualAuthenticatorManagerGetAuthenticatorsResponseParamsForwardToCallback(VirtualAuthenticatorManager.GetAuthenticatorsResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_AUTHENTICATORS_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                VirtualAuthenticatorManagerGetAuthenticatorsResponseParams response = VirtualAuthenticatorManagerGetAuthenticatorsResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.authenticators);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class VirtualAuthenticatorManagerGetAuthenticatorsResponseParamsProxyToResponder implements VirtualAuthenticatorManager.GetAuthenticatorsResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        VirtualAuthenticatorManagerGetAuthenticatorsResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(VirtualAuthenticator[] authenticators) {
            VirtualAuthenticatorManagerGetAuthenticatorsResponseParams _response = new VirtualAuthenticatorManagerGetAuthenticatorsResponseParams();

            _response.authenticators = authenticators;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_AUTHENTICATORS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class VirtualAuthenticatorManagerRemoveAuthenticatorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String id;

        private VirtualAuthenticatorManagerRemoveAuthenticatorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VirtualAuthenticatorManagerRemoveAuthenticatorParams() {
            this(0);
        }

        public static VirtualAuthenticatorManagerRemoveAuthenticatorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VirtualAuthenticatorManagerRemoveAuthenticatorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VirtualAuthenticatorManagerRemoveAuthenticatorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VirtualAuthenticatorManagerRemoveAuthenticatorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VirtualAuthenticatorManagerRemoveAuthenticatorParams(elementsOrVersion);
                    {
                        
                    result.id = decoder0.readString(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.id, 8, false);
        }
    }



    
    static final class VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean removed;

        private VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams() {
            this(0);
        }

        public static VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams(elementsOrVersion);
                    {
                        
                    result.removed = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.removed, 8, 0);
        }
    }

    static class VirtualAuthenticatorManagerRemoveAuthenticatorResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final VirtualAuthenticatorManager.RemoveAuthenticatorResponse mCallback;

        VirtualAuthenticatorManagerRemoveAuthenticatorResponseParamsForwardToCallback(VirtualAuthenticatorManager.RemoveAuthenticatorResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(REMOVE_AUTHENTICATOR_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams response = VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.removed);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class VirtualAuthenticatorManagerRemoveAuthenticatorResponseParamsProxyToResponder implements VirtualAuthenticatorManager.RemoveAuthenticatorResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        VirtualAuthenticatorManagerRemoveAuthenticatorResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean removed) {
            VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams _response = new VirtualAuthenticatorManagerRemoveAuthenticatorResponseParams();

            _response.removed = removed;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REMOVE_AUTHENTICATOR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class VirtualAuthenticatorManagerClearAuthenticatorsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private VirtualAuthenticatorManagerClearAuthenticatorsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VirtualAuthenticatorManagerClearAuthenticatorsParams() {
            this(0);
        }

        public static VirtualAuthenticatorManagerClearAuthenticatorsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VirtualAuthenticatorManagerClearAuthenticatorsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VirtualAuthenticatorManagerClearAuthenticatorsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VirtualAuthenticatorManagerClearAuthenticatorsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VirtualAuthenticatorManagerClearAuthenticatorsParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class VirtualAuthenticatorManagerClearAuthenticatorsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private VirtualAuthenticatorManagerClearAuthenticatorsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VirtualAuthenticatorManagerClearAuthenticatorsResponseParams() {
            this(0);
        }

        public static VirtualAuthenticatorManagerClearAuthenticatorsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VirtualAuthenticatorManagerClearAuthenticatorsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VirtualAuthenticatorManagerClearAuthenticatorsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VirtualAuthenticatorManagerClearAuthenticatorsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VirtualAuthenticatorManagerClearAuthenticatorsResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class VirtualAuthenticatorManagerClearAuthenticatorsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final VirtualAuthenticatorManager.ClearAuthenticatorsResponse mCallback;

        VirtualAuthenticatorManagerClearAuthenticatorsResponseParamsForwardToCallback(VirtualAuthenticatorManager.ClearAuthenticatorsResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_AUTHENTICATORS_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class VirtualAuthenticatorManagerClearAuthenticatorsResponseParamsProxyToResponder implements VirtualAuthenticatorManager.ClearAuthenticatorsResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        VirtualAuthenticatorManagerClearAuthenticatorsResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            VirtualAuthenticatorManagerClearAuthenticatorsResponseParams _response = new VirtualAuthenticatorManagerClearAuthenticatorsResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CLEAR_AUTHENTICATORS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
