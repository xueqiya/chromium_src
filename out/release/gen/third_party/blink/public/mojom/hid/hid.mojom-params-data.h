// third_party/blink/public/mojom/hid/hid.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_HID_HID_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_HID_HID_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace blink {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HidService_GetDevices_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(HidService_GetDevices_Params_Data));
      new (data()) HidService_GetDevices_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    HidService_GetDevices_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<HidService_GetDevices_Params_Data>(index_);
    }
    HidService_GetDevices_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  HidService_GetDevices_Params_Data();
  ~HidService_GetDevices_Params_Data() = delete;
};
static_assert(sizeof(HidService_GetDevices_Params_Data) == 8,
              "Bad sizeof(HidService_GetDevices_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HidService_GetDevices_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(HidService_GetDevices_ResponseParams_Data));
      new (data()) HidService_GetDevices_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    HidService_GetDevices_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<HidService_GetDevices_ResponseParams_Data>(index_);
    }
    HidService_GetDevices_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::device::mojom::internal::HidDeviceInfo_Data>>> devices;

 private:
  HidService_GetDevices_ResponseParams_Data();
  ~HidService_GetDevices_ResponseParams_Data() = delete;
};
static_assert(sizeof(HidService_GetDevices_ResponseParams_Data) == 16,
              "Bad sizeof(HidService_GetDevices_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HidService_RequestDevice_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(HidService_RequestDevice_Params_Data));
      new (data()) HidService_RequestDevice_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    HidService_RequestDevice_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<HidService_RequestDevice_Params_Data>(index_);
    }
    HidService_RequestDevice_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::HidDeviceFilter_Data>>> filters;

 private:
  HidService_RequestDevice_Params_Data();
  ~HidService_RequestDevice_Params_Data() = delete;
};
static_assert(sizeof(HidService_RequestDevice_Params_Data) == 16,
              "Bad sizeof(HidService_RequestDevice_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HidService_RequestDevice_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(HidService_RequestDevice_ResponseParams_Data));
      new (data()) HidService_RequestDevice_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    HidService_RequestDevice_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<HidService_RequestDevice_ResponseParams_Data>(index_);
    }
    HidService_RequestDevice_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::device::mojom::internal::HidDeviceInfo_Data>>> devices;

 private:
  HidService_RequestDevice_ResponseParams_Data();
  ~HidService_RequestDevice_ResponseParams_Data() = delete;
};
static_assert(sizeof(HidService_RequestDevice_ResponseParams_Data) == 16,
              "Bad sizeof(HidService_RequestDevice_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HidService_Connect_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(HidService_Connect_Params_Data));
      new (data()) HidService_Connect_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    HidService_Connect_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<HidService_Connect_Params_Data>(index_);
    }
    HidService_Connect_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> device_guid;
  mojo::internal::Interface_Data client;

 private:
  HidService_Connect_Params_Data();
  ~HidService_Connect_Params_Data() = delete;
};
static_assert(sizeof(HidService_Connect_Params_Data) == 24,
              "Bad sizeof(HidService_Connect_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) HidService_Connect_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(HidService_Connect_ResponseParams_Data));
      new (data()) HidService_Connect_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    HidService_Connect_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<HidService_Connect_ResponseParams_Data>(index_);
    }
    HidService_Connect_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data connection;

 private:
  HidService_Connect_ResponseParams_Data();
  ~HidService_Connect_ResponseParams_Data() = delete;
};
static_assert(sizeof(HidService_Connect_ResponseParams_Data) == 16,
              "Bad sizeof(HidService_Connect_ResponseParams_Data)");

}  // namespace internal
class HidService_GetDevices_ParamsDataView {
 public:
  HidService_GetDevices_ParamsDataView() {}

  HidService_GetDevices_ParamsDataView(
      internal::HidService_GetDevices_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::HidService_GetDevices_Params_Data* data_ = nullptr;
};

class HidService_GetDevices_ResponseParamsDataView {
 public:
  HidService_GetDevices_ResponseParamsDataView() {}

  HidService_GetDevices_ResponseParamsDataView(
      internal::HidService_GetDevices_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDevicesDataView(
      mojo::ArrayDataView<::device::mojom::HidDeviceInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevices(UserType* output) {
    auto* pointer = data_->devices.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::HidDeviceInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::HidService_GetDevices_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class HidService_RequestDevice_ParamsDataView {
 public:
  HidService_RequestDevice_ParamsDataView() {}

  HidService_RequestDevice_ParamsDataView(
      internal::HidService_RequestDevice_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFiltersDataView(
      mojo::ArrayDataView<HidDeviceFilterDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFilters(UserType* output) {
    auto* pointer = data_->filters.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::HidDeviceFilterDataView>>(
        pointer, output, context_);
  }
 private:
  internal::HidService_RequestDevice_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class HidService_RequestDevice_ResponseParamsDataView {
 public:
  HidService_RequestDevice_ResponseParamsDataView() {}

  HidService_RequestDevice_ResponseParamsDataView(
      internal::HidService_RequestDevice_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDevicesDataView(
      mojo::ArrayDataView<::device::mojom::HidDeviceInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevices(UserType* output) {
    auto* pointer = data_->devices.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::device::mojom::HidDeviceInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::HidService_RequestDevice_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class HidService_Connect_ParamsDataView {
 public:
  HidService_Connect_ParamsDataView() {}

  HidService_Connect_ParamsDataView(
      internal::HidService_Connect_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceGuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDeviceGuid(UserType* output) {
    auto* pointer = data_->device_guid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::HidConnectionClientInterfaceBase>>(
            &data_->client, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::HidService_Connect_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class HidService_Connect_ResponseParamsDataView {
 public:
  HidService_Connect_ResponseParamsDataView() {}

  HidService_Connect_ResponseParamsDataView(
      internal::HidService_Connect_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeConnection() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::device::mojom::HidConnectionInterfaceBase>>(
            &data_->connection, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::HidService_Connect_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};




inline void HidService_GetDevices_ResponseParamsDataView::GetDevicesDataView(
    mojo::ArrayDataView<::device::mojom::HidDeviceInfoDataView>* output) {
  auto pointer = data_->devices.Get();
  *output = mojo::ArrayDataView<::device::mojom::HidDeviceInfoDataView>(pointer, context_);
}


inline void HidService_RequestDevice_ParamsDataView::GetFiltersDataView(
    mojo::ArrayDataView<HidDeviceFilterDataView>* output) {
  auto pointer = data_->filters.Get();
  *output = mojo::ArrayDataView<HidDeviceFilterDataView>(pointer, context_);
}


inline void HidService_RequestDevice_ResponseParamsDataView::GetDevicesDataView(
    mojo::ArrayDataView<::device::mojom::HidDeviceInfoDataView>* output) {
  auto pointer = data_->devices.Get();
  *output = mojo::ArrayDataView<::device::mojom::HidDeviceInfoDataView>(pointer, context_);
}


inline void HidService_Connect_ParamsDataView::GetDeviceGuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->device_guid.Get();
  *output = mojo::StringDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_HID_HID_MOJOM_PARAMS_DATA_H_