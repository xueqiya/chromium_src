// third_party/blink/public/mojom/hid/hid.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "third_party/blink/public/mojom/hid/hid.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "services/device/public/mojom/hid.mojom.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_HID_HID_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_HID_HID_MOJOM_JUMBO_H_
#endif


namespace blink {
namespace mojom {


void HidServiceInterceptorForTesting::GetDevices(GetDevicesCallback callback) {
  GetForwardingInterface()->GetDevices(std::move(callback));
}
void HidServiceInterceptorForTesting::RequestDevice(std::vector<HidDeviceFilterPtr> filters, RequestDeviceCallback callback) {
  GetForwardingInterface()->RequestDevice(std::move(filters), std::move(callback));
}
void HidServiceInterceptorForTesting::Connect(const std::string& device_guid, mojo::PendingRemote<::device::mojom::HidConnectionClient> client, ConnectCallback callback) {
  GetForwardingInterface()->Connect(std::move(device_guid), std::move(client), std::move(callback));
}
HidServiceAsyncWaiter::HidServiceAsyncWaiter(
    HidService* proxy) : proxy_(proxy) {}

HidServiceAsyncWaiter::~HidServiceAsyncWaiter() = default;

void HidServiceAsyncWaiter::GetDevices(
    std::vector<::device::mojom::HidDeviceInfoPtr>* out_devices) {
  base::RunLoop loop;
  proxy_->GetDevices(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<::device::mojom::HidDeviceInfoPtr>* out_devices
,
             std::vector<::device::mojom::HidDeviceInfoPtr> devices) {*out_devices = std::move(devices);
            loop->Quit();
          },
          &loop,
          out_devices));
  loop.Run();
}
void HidServiceAsyncWaiter::RequestDevice(
    std::vector<HidDeviceFilterPtr> filters, std::vector<::device::mojom::HidDeviceInfoPtr>* out_devices) {
  base::RunLoop loop;
  proxy_->RequestDevice(std::move(filters),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<::device::mojom::HidDeviceInfoPtr>* out_devices
,
             std::vector<::device::mojom::HidDeviceInfoPtr> devices) {*out_devices = std::move(devices);
            loop->Quit();
          },
          &loop,
          out_devices));
  loop.Run();
}
void HidServiceAsyncWaiter::Connect(
    const std::string& device_guid, mojo::PendingRemote<::device::mojom::HidConnectionClient> client, mojo::PendingRemote<::device::mojom::HidConnection>* out_connection) {
  base::RunLoop loop;
  proxy_->Connect(std::move(device_guid),std::move(client),
      base::BindOnce(
          [](base::RunLoop* loop,
             mojo::PendingRemote<::device::mojom::HidConnection>* out_connection
,
             mojo::PendingRemote<::device::mojom::HidConnection> connection) {*out_connection = std::move(connection);
            loop->Quit();
          },
          &loop,
          out_connection));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif