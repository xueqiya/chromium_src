// third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-params-data.h"
#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-import-headers.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_DEDICATED_WORKER_HOST_FACTORY_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_DEDICATED_WORKER_HOST_FACTORY_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/time_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "services/network/public/cpp/ip_address_mojom_traits.h"
#include "services/network/public/cpp/ip_endpoint_mojom_traits.h"
#include "services/network/public/cpp/load_timing_info_mojom_traits.h"
#include "services/network/public/cpp/net_ipc_param_traits.h"
#include "services/network/public/cpp/network_ipc_param_traits.h"
#include "services/network/public/cpp/network_param_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/mojo_host_mojom_traits.h"
#include "services/proxy_resolver/public/cpp/proxy_resolver_mojom_traits.h"
#include "third_party/blink/public/common/loader/url_loader_factory_bundle_mojom_traits.h"
#include "url/mojom/origin_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif
namespace blink {
namespace mojom {
const char kNavigation_DedicatedWorkerSpec[] = "navigation:dedicated_worker";
const char DedicatedWorkerHostFactoryClient::Name_[] = "blink.mojom.DedicatedWorkerHostFactoryClient";

DedicatedWorkerHostFactoryClientProxy::DedicatedWorkerHostFactoryClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DedicatedWorkerHostFactoryClientProxy::OnWorkerHostCreated(
    mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker> in_browser_interface_broker) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::DedicatedWorkerHostFactoryClient::OnWorkerHostCreated");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::BrowserInterfaceBrokerInterfaceBase>>(
      in_browser_interface_broker, &params->browser_interface_broker, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->browser_interface_broker),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid browser_interface_broker in DedicatedWorkerHostFactoryClient.OnWorkerHostCreated request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactoryClient::Name_);
  message.set_method_name("OnWorkerHostCreated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DedicatedWorkerHostFactoryClientProxy::OnScriptLoadStarted(
    ::blink::mojom::ServiceWorkerProviderInfoForClientPtr in_service_worker_provider_info, ::blink::mojom::WorkerMainScriptLoadParamsPtr in_main_script_load_params, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> in_subresource_loader_factories, mojo::PendingReceiver<::blink::mojom::SubresourceLoaderUpdater> in_subresource_loader_updater, ::blink::mojom::ControllerServiceWorkerInfoPtr in_controller_info) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStarted");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->service_worker_provider_info)::BaseType::BufferWriter
      service_worker_provider_info_writer;
  mojo::internal::Serialize<::blink::mojom::ServiceWorkerProviderInfoForClientDataView>(
      in_service_worker_provider_info, buffer, &service_worker_provider_info_writer, &serialization_context);
  params->service_worker_provider_info.Set(
      service_worker_provider_info_writer.is_null() ? nullptr : service_worker_provider_info_writer.data());
  typename decltype(params->main_script_load_params)::BaseType::BufferWriter
      main_script_load_params_writer;
  mojo::internal::Serialize<::blink::mojom::WorkerMainScriptLoadParamsDataView>(
      in_main_script_load_params, buffer, &main_script_load_params_writer, &serialization_context);
  params->main_script_load_params.Set(
      main_script_load_params_writer.is_null() ? nullptr : main_script_load_params_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->main_script_load_params.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null main_script_load_params in DedicatedWorkerHostFactoryClient.OnScriptLoadStarted request");
  typename decltype(params->subresource_loader_factories)::BaseType::BufferWriter
      subresource_loader_factories_writer;
  mojo::internal::Serialize<::blink::mojom::URLLoaderFactoryBundleDataView>(
      in_subresource_loader_factories, buffer, &subresource_loader_factories_writer, &serialization_context);
  params->subresource_loader_factories.Set(
      subresource_loader_factories_writer.is_null() ? nullptr : subresource_loader_factories_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->subresource_loader_factories.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null subresource_loader_factories in DedicatedWorkerHostFactoryClient.OnScriptLoadStarted request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::SubresourceLoaderUpdaterInterfaceBase>>(
      in_subresource_loader_updater, &params->subresource_loader_updater, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->subresource_loader_updater),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid subresource_loader_updater in DedicatedWorkerHostFactoryClient.OnScriptLoadStarted request");
  typename decltype(params->controller_info)::BaseType::BufferWriter
      controller_info_writer;
  mojo::internal::Serialize<::blink::mojom::ControllerServiceWorkerInfoDataView>(
      in_controller_info, buffer, &controller_info_writer, &serialization_context);
  params->controller_info.Set(
      controller_info_writer.is_null() ? nullptr : controller_info_writer.data());
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactoryClient::Name_);
  message.set_method_name("OnScriptLoadStarted");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DedicatedWorkerHostFactoryClientProxy::OnScriptLoadStartFailed(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStartFailed");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactoryClient::Name_);
  message.set_method_name("OnScriptLoadStartFailed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool DedicatedWorkerHostFactoryClientStubDispatch::Accept(
    DedicatedWorkerHostFactoryClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::DedicatedWorkerHostFactoryClient::OnWorkerHostCreated",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::DedicatedWorkerHostFactoryClient::OnWorkerHostCreated");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data* params =
          reinterpret_cast<internal::DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker> p_browser_interface_broker{};
      DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_browser_interface_broker =
            input_data_view.TakeBrowserInterfaceBroker<decltype(p_browser_interface_broker)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DedicatedWorkerHostFactoryClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnWorkerHostCreated(
std::move(p_browser_interface_broker));
      return true;
    }
    case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStarted",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStarted");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data* params =
          reinterpret_cast<internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::blink::mojom::ServiceWorkerProviderInfoForClientPtr p_service_worker_provider_info{};
      ::blink::mojom::WorkerMainScriptLoadParamsPtr p_main_script_load_params{};
      ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> p_subresource_loader_factories{};
      mojo::PendingReceiver<::blink::mojom::SubresourceLoaderUpdater> p_subresource_loader_updater{};
      ::blink::mojom::ControllerServiceWorkerInfoPtr p_controller_info{};
      DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadServiceWorkerProviderInfo(&p_service_worker_provider_info))
        success = false;
      if (success && !input_data_view.ReadMainScriptLoadParams(&p_main_script_load_params))
        success = false;
      if (success && !input_data_view.ReadSubresourceLoaderFactories(&p_subresource_loader_factories))
        success = false;
      if (success) {
        p_subresource_loader_updater =
            input_data_view.TakeSubresourceLoaderUpdater<decltype(p_subresource_loader_updater)>();
      }
      if (success && !input_data_view.ReadControllerInfo(&p_controller_info))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DedicatedWorkerHostFactoryClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnScriptLoadStarted(
std::move(p_service_worker_provider_info), 
std::move(p_main_script_load_params), 
std::move(p_subresource_loader_factories), 
std::move(p_subresource_loader_updater), 
std::move(p_controller_info));
      return true;
    }
    case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStartFailed",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStartFailed");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data* params =
          reinterpret_cast<internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DedicatedWorkerHostFactoryClient::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnScriptLoadStartFailed();
      return true;
    }
  }
  return false;
}

// static
bool DedicatedWorkerHostFactoryClientStubDispatch::AcceptWithResponder(
    DedicatedWorkerHostFactoryClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kDedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Name: {
      break;
    }
    case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Name: {
      break;
    }
    case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDedicatedWorkerHostFactoryClientValidationInfo[] = {
    {&internal::DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data::Validate,
     nullptr /* no response */},
};

bool DedicatedWorkerHostFactoryClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::DedicatedWorkerHostFactoryClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDedicatedWorkerHostFactoryClientValidationInfo);
}

const char DedicatedWorkerHostFactory::Name_[] = "blink.mojom.DedicatedWorkerHostFactory";

DedicatedWorkerHostFactoryProxy::DedicatedWorkerHostFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DedicatedWorkerHostFactoryProxy::CreateWorkerHost(
    mojo::PendingReceiver<::blink::mojom::BrowserInterfaceBroker> in_browser_interface_broker, mojo::PendingReceiver<::blink::mojom::DedicatedWorkerHost> in_host) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHost");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactory_CreateWorkerHost_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::BrowserInterfaceBrokerInterfaceBase>>(
      in_browser_interface_broker, &params->browser_interface_broker, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->browser_interface_broker),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid browser_interface_broker in DedicatedWorkerHostFactory.CreateWorkerHost request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::DedicatedWorkerHostInterfaceBase>>(
      in_host, &params->host, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->host),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid host in DedicatedWorkerHostFactory.CreateWorkerHost request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactory::Name_);
  message.set_method_name("CreateWorkerHost");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DedicatedWorkerHostFactoryProxy::CreateWorkerHostAndStartScriptLoad(
    const ::GURL& in_script_url, ::network::mojom::CredentialsMode in_credentials_mode, ::blink::mojom::FetchClientSettingsObjectPtr in_outside_fetch_client_settings_object, mojo::PendingRemote<::blink::mojom::BlobURLToken> in_blob_url_token, mojo::PendingRemote<DedicatedWorkerHostFactoryClient> in_client, mojo::PendingReceiver<::blink::mojom::DedicatedWorkerHost> in_host) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHostAndStartScriptLoad");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->script_url)::BaseType::BufferWriter
      script_url_writer;
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_script_url, buffer, &script_url_writer, &serialization_context);
  params->script_url.Set(
      script_url_writer.is_null() ? nullptr : script_url_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->script_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null script_url in DedicatedWorkerHostFactory.CreateWorkerHostAndStartScriptLoad request");
  mojo::internal::Serialize<::network::mojom::CredentialsMode>(
      in_credentials_mode, &params->credentials_mode);
  typename decltype(params->outside_fetch_client_settings_object)::BaseType::BufferWriter
      outside_fetch_client_settings_object_writer;
  mojo::internal::Serialize<::blink::mojom::FetchClientSettingsObjectDataView>(
      in_outside_fetch_client_settings_object, buffer, &outside_fetch_client_settings_object_writer, &serialization_context);
  params->outside_fetch_client_settings_object.Set(
      outside_fetch_client_settings_object_writer.is_null() ? nullptr : outside_fetch_client_settings_object_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->outside_fetch_client_settings_object.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null outside_fetch_client_settings_object in DedicatedWorkerHostFactory.CreateWorkerHostAndStartScriptLoad request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::BlobURLTokenInterfaceBase>>(
      in_blob_url_token, &params->blob_url_token, &serialization_context);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::DedicatedWorkerHostFactoryClientInterfaceBase>>(
      in_client, &params->client, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in DedicatedWorkerHostFactory.CreateWorkerHostAndStartScriptLoad request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::DedicatedWorkerHostInterfaceBase>>(
      in_host, &params->host, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->host),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid host in DedicatedWorkerHostFactory.CreateWorkerHostAndStartScriptLoad request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactory::Name_);
  message.set_method_name("CreateWorkerHostAndStartScriptLoad");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool DedicatedWorkerHostFactoryStubDispatch::Accept(
    DedicatedWorkerHostFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDedicatedWorkerHostFactory_CreateWorkerHost_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHost",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHost");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data* params =
          reinterpret_cast<internal::DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      mojo::PendingReceiver<::blink::mojom::BrowserInterfaceBroker> p_browser_interface_broker{};
      mojo::PendingReceiver<::blink::mojom::DedicatedWorkerHost> p_host{};
      DedicatedWorkerHostFactory_CreateWorkerHost_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_browser_interface_broker =
            input_data_view.TakeBrowserInterfaceBroker<decltype(p_browser_interface_broker)>();
      }
      if (success) {
        p_host =
            input_data_view.TakeHost<decltype(p_host)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DedicatedWorkerHostFactory::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateWorkerHost(
std::move(p_browser_interface_broker), 
std::move(p_host));
      return true;
    }
    case internal::kDedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHostAndStartScriptLoad",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHostAndStartScriptLoad");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data* params =
          reinterpret_cast<internal::DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      ::GURL p_script_url{};
      ::network::mojom::CredentialsMode p_credentials_mode{};
      ::blink::mojom::FetchClientSettingsObjectPtr p_outside_fetch_client_settings_object{};
      mojo::PendingRemote<::blink::mojom::BlobURLToken> p_blob_url_token{};
      mojo::PendingRemote<DedicatedWorkerHostFactoryClient> p_client{};
      mojo::PendingReceiver<::blink::mojom::DedicatedWorkerHost> p_host{};
      DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadScriptUrl(&p_script_url))
        success = false;
      if (success && !input_data_view.ReadCredentialsMode(&p_credentials_mode))
        success = false;
      if (success && !input_data_view.ReadOutsideFetchClientSettingsObject(&p_outside_fetch_client_settings_object))
        success = false;
      if (success) {
        p_blob_url_token =
            input_data_view.TakeBlobUrlToken<decltype(p_blob_url_token)>();
      }
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (success) {
        p_host =
            input_data_view.TakeHost<decltype(p_host)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DedicatedWorkerHostFactory::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateWorkerHostAndStartScriptLoad(
std::move(p_script_url), 
std::move(p_credentials_mode), 
std::move(p_outside_fetch_client_settings_object), 
std::move(p_blob_url_token), 
std::move(p_client), 
std::move(p_host));
      return true;
    }
  }
  return false;
}

// static
bool DedicatedWorkerHostFactoryStubDispatch::AcceptWithResponder(
    DedicatedWorkerHostFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kDedicatedWorkerHostFactory_CreateWorkerHost_Name: {
      break;
    }
    case internal::kDedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDedicatedWorkerHostFactoryValidationInfo[] = {
    {&internal::DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data::Validate,
     nullptr /* no response */},
};

bool DedicatedWorkerHostFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::DedicatedWorkerHostFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDedicatedWorkerHostFactoryValidationInfo);
}

}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif