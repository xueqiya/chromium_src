// third_party/blink/public/mojom/agents/agent_metrics.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_AGENTS_AGENT_METRICS_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_AGENTS_AGENT_METRICS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "third_party/blink/public/mojom/agents/agent_metrics.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class AgentMetricsDataDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::AgentMetricsDataDataView> {
  using Data = ::blink::mojom::internal::AgentMetricsData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {
// Interface base classes. They are used for type safety check.
class AgentMetricsCollectorHostInterfaceBase {};

using AgentMetricsCollectorHostPtrDataView =
    mojo::InterfacePtrDataView<AgentMetricsCollectorHostInterfaceBase>;
using AgentMetricsCollectorHostRequestDataView =
    mojo::InterfaceRequestDataView<AgentMetricsCollectorHostInterfaceBase>;
using AgentMetricsCollectorHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AgentMetricsCollectorHostInterfaceBase>;
using AgentMetricsCollectorHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AgentMetricsCollectorHostInterfaceBase>;
class AgentMetricsDataDataView {
 public:
  AgentMetricsDataDataView() {}

  AgentMetricsDataDataView(
      internal::AgentMetricsData_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAgentsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAgents(UserType* output) {
    auto* pointer = data_->agents.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, context_);
  }
 private:
  internal::AgentMetricsData_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AgentMetricsDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AgentMetricsDataDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::blink::mojom::internal::AgentMetricsData_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::agents(input)) in_agents = Traits::agents(input);
    typename decltype((*output)->agents)::BaseType::BufferWriter
        agents_writer;
    const mojo::internal::ContainerValidateParams agents_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_agents, buffer, &agents_writer, &agents_validate_params,
        context);
    (*output)->agents.Set(
        agents_writer.is_null() ? nullptr : agents_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->agents.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null agents in AgentMetricsData struct");
  }

  static bool Deserialize(::blink::mojom::internal::AgentMetricsData_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AgentMetricsDataDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void AgentMetricsDataDataView::GetAgentsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->agents.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, context_);
}



}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_AGENTS_AGENT_METRICS_MOJOM_SHARED_H_