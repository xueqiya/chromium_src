// third_party/blink/public/mojom/agents/agent_metrics.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_AGENTS_AGENT_METRICS_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_AGENTS_AGENT_METRICS_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "third_party/blink/public/mojom/agents/agent_metrics.mojom-shared.h"
#include "third_party/blink/public/mojom/agents/agent_metrics.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace blink {
namespace mojom {
namespace blink {

class AgentMetricsCollectorHostProxy;

template <typename ImplRefTraits>
class AgentMetricsCollectorHostStub;

class AgentMetricsCollectorHostRequestValidator;


class PLATFORM_EXPORT AgentMetricsCollectorHost
    : public AgentMetricsCollectorHostInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = AgentMetricsCollectorHostInterfaceBase;
  using Proxy_ = AgentMetricsCollectorHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = AgentMetricsCollectorHostStub<ImplRefTraits>;

  using RequestValidator_ = AgentMetricsCollectorHostRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kReportRendererMetricsMinVersion = 0,
  };
  virtual ~AgentMetricsCollectorHost() {}

  
  virtual void ReportRendererMetrics(AgentMetricsDataPtr data) = 0;
};



class PLATFORM_EXPORT AgentMetricsCollectorHostProxy
    : public AgentMetricsCollectorHost {
 public:
  using InterfaceType = AgentMetricsCollectorHost;

  explicit AgentMetricsCollectorHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void ReportRendererMetrics(AgentMetricsDataPtr data) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT AgentMetricsCollectorHostStubDispatch {
 public:
  static bool Accept(AgentMetricsCollectorHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AgentMetricsCollectorHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AgentMetricsCollectorHost>>
class AgentMetricsCollectorHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AgentMetricsCollectorHostStub() {}
  ~AgentMetricsCollectorHostStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AgentMetricsCollectorHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AgentMetricsCollectorHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT AgentMetricsCollectorHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};








class PLATFORM_EXPORT AgentMetricsData {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AgentMetricsData, T>::value>;
  using DataView = AgentMetricsDataDataView;
  using Data_ = internal::AgentMetricsData_Data;

  template <typename... Args>
  static AgentMetricsDataPtr New(Args&&... args) {
    return AgentMetricsDataPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AgentMetricsDataPtr From(const U& u) {
    return mojo::TypeConverter<AgentMetricsDataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AgentMetricsData>::Convert(*this);
  }


  AgentMetricsData();

  explicit AgentMetricsData(
      WTF::Vector<WTF::String> agents);

  ~AgentMetricsData();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AgentMetricsDataPtr>
  AgentMetricsDataPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AgentMetricsData::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AgentMetricsData::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AgentMetricsData::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AgentMetricsData_UnserializedMessageContext<
            UserType, AgentMetricsData::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<AgentMetricsData::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return AgentMetricsData::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AgentMetricsData_UnserializedMessageContext<
            UserType, AgentMetricsData::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AgentMetricsData::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  WTF::Vector<WTF::String> agents;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AgentMetricsData::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AgentMetricsData::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AgentMetricsData::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AgentMetricsData::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
AgentMetricsDataPtr AgentMetricsData::Clone() const {
  return New(
      mojo::Clone(agents)
  );
}

template <typename T, AgentMetricsData::EnableIfSame<T>*>
bool AgentMetricsData::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->agents, other_struct.agents))
    return false;
  return true;
}

template <typename T, AgentMetricsData::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.agents < rhs.agents)
    return true;
  if (rhs.agents < lhs.agents)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::AgentMetricsData::DataView,
                                         ::blink::mojom::blink::AgentMetricsDataPtr> {
  static bool IsNull(const ::blink::mojom::blink::AgentMetricsDataPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::AgentMetricsDataPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::AgentMetricsData::agents)& agents(
      const ::blink::mojom::blink::AgentMetricsDataPtr& input) {
    return input->agents;
  }

  static bool Read(::blink::mojom::blink::AgentMetricsData::DataView input, ::blink::mojom::blink::AgentMetricsDataPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_AGENTS_AGENT_METRICS_MOJOM_BLINK_H_