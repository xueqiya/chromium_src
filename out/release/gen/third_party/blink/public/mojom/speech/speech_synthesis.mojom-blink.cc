// third_party/blink/public/mojom/speech/speech_synthesis.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "third_party/blink/public/mojom/speech/speech_synthesis.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "third_party/blink/public/mojom/speech/speech_synthesis.mojom-params-data.h"
#include "third_party/blink/public/mojom/speech/speech_synthesis.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/speech/speech_synthesis.mojom-blink-import-headers.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SPEECH_SPEECH_SYNTHESIS_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SPEECH_SPEECH_SYNTHESIS_MOJOM_BLINK_JUMBO_H_
#endif
namespace blink {
namespace mojom {
namespace blink {
SpeechSynthesisUtterance::SpeechSynthesisUtterance()
    : text(),
      lang(),
      voice(),
      volume(),
      rate(),
      pitch() {}

SpeechSynthesisUtterance::SpeechSynthesisUtterance(
    const WTF::String& text_in,
    const WTF::String& lang_in,
    const WTF::String& voice_in,
    double volume_in,
    double rate_in,
    double pitch_in)
    : text(std::move(text_in)),
      lang(std::move(lang_in)),
      voice(std::move(voice_in)),
      volume(std::move(volume_in)),
      rate(std::move(rate_in)),
      pitch(std::move(pitch_in)) {}

SpeechSynthesisUtterance::~SpeechSynthesisUtterance() = default;
size_t SpeechSynthesisUtterance::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->text);
  seed = mojo::internal::WTFHash(seed, this->lang);
  seed = mojo::internal::WTFHash(seed, this->voice);
  seed = mojo::internal::WTFHash(seed, this->volume);
  seed = mojo::internal::WTFHash(seed, this->rate);
  seed = mojo::internal::WTFHash(seed, this->pitch);
  return seed;
}

bool SpeechSynthesisUtterance::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SpeechSynthesisVoice::SpeechSynthesisVoice()
    : voice_uri(),
      name(),
      lang(),
      is_local_service(),
      is_default() {}

SpeechSynthesisVoice::SpeechSynthesisVoice(
    const WTF::String& voice_uri_in,
    const WTF::String& name_in,
    const WTF::String& lang_in,
    bool is_local_service_in,
    bool is_default_in)
    : voice_uri(std::move(voice_uri_in)),
      name(std::move(name_in)),
      lang(std::move(lang_in)),
      is_local_service(std::move(is_local_service_in)),
      is_default(std::move(is_default_in)) {}

SpeechSynthesisVoice::~SpeechSynthesisVoice() = default;
size_t SpeechSynthesisVoice::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->voice_uri);
  seed = mojo::internal::WTFHash(seed, this->name);
  seed = mojo::internal::WTFHash(seed, this->lang);
  seed = mojo::internal::WTFHash(seed, this->is_local_service);
  seed = mojo::internal::WTFHash(seed, this->is_default);
  return seed;
}

bool SpeechSynthesisVoice::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char SpeechSynthesisVoiceListObserver::Name_[] = "blink.mojom.SpeechSynthesisVoiceListObserver";

SpeechSynthesisVoiceListObserverProxy::SpeechSynthesisVoiceListObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SpeechSynthesisVoiceListObserverProxy::OnSetVoiceList(
    WTF::Vector<SpeechSynthesisVoicePtr> in_voice_list) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesisVoiceListObserver::OnSetVoiceList");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesisVoiceListObserver_OnSetVoiceList_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->voice_list)::BaseType::BufferWriter
      voice_list_writer;
  const mojo::internal::ContainerValidateParams voice_list_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::SpeechSynthesisVoiceDataView>>(
      in_voice_list, buffer, &voice_list_writer, &voice_list_validate_params,
      &serialization_context);
  params->voice_list.Set(
      voice_list_writer.is_null() ? nullptr : voice_list_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->voice_list.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null voice_list in SpeechSynthesisVoiceListObserver.OnSetVoiceList request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesisVoiceListObserver::Name_);
  message.set_method_name("OnSetVoiceList");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool SpeechSynthesisVoiceListObserverStubDispatch::Accept(
    SpeechSynthesisVoiceListObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSpeechSynthesisVoiceListObserver_OnSetVoiceList_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesisVoiceListObserver::OnSetVoiceList",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesisVoiceListObserver::OnSetVoiceList");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      WTF::Vector<SpeechSynthesisVoicePtr> p_voice_list{};
      SpeechSynthesisVoiceListObserver_OnSetVoiceList_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadVoiceList(&p_voice_list))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesisVoiceListObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnSetVoiceList(
std::move(p_voice_list));
      return true;
    }
  }
  return false;
}

// static
bool SpeechSynthesisVoiceListObserverStubDispatch::AcceptWithResponder(
    SpeechSynthesisVoiceListObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kSpeechSynthesisVoiceListObserver_OnSetVoiceList_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSpeechSynthesisVoiceListObserverValidationInfo[] = {
    {&internal::SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data::Validate,
     nullptr /* no response */},
};

bool SpeechSynthesisVoiceListObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::SpeechSynthesisVoiceListObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSpeechSynthesisVoiceListObserverValidationInfo);
}

const char SpeechSynthesisClient::Name_[] = "blink.mojom.SpeechSynthesisClient";

SpeechSynthesisClientProxy::SpeechSynthesisClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SpeechSynthesisClientProxy::OnStartedSpeaking(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesisClient::OnStartedSpeaking");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesisClient_OnStartedSpeaking_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesisClient_OnStartedSpeaking_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesisClient::Name_);
  message.set_method_name("OnStartedSpeaking");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SpeechSynthesisClientProxy::OnFinishedSpeaking(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesisClient::OnFinishedSpeaking");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesisClient_OnFinishedSpeaking_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesisClient_OnFinishedSpeaking_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesisClient::Name_);
  message.set_method_name("OnFinishedSpeaking");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SpeechSynthesisClientProxy::OnPausedSpeaking(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesisClient::OnPausedSpeaking");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesisClient_OnPausedSpeaking_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesisClient_OnPausedSpeaking_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesisClient::Name_);
  message.set_method_name("OnPausedSpeaking");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SpeechSynthesisClientProxy::OnResumedSpeaking(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesisClient::OnResumedSpeaking");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesisClient_OnResumedSpeaking_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesisClient_OnResumedSpeaking_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesisClient::Name_);
  message.set_method_name("OnResumedSpeaking");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SpeechSynthesisClientProxy::OnEncounteredWordBoundary(
    uint32_t in_char_index, uint32_t in_char_length) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesisClient::OnEncounteredWordBoundary");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesisClient_OnEncounteredWordBoundary_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->char_index = in_char_index;
  params->char_length = in_char_length;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesisClient::Name_);
  message.set_method_name("OnEncounteredWordBoundary");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SpeechSynthesisClientProxy::OnEncounteredSentenceBoundary(
    uint32_t in_char_index, uint32_t in_char_length) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesisClient::OnEncounteredSentenceBoundary");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesisClient_OnEncounteredSentenceBoundary_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->char_index = in_char_index;
  params->char_length = in_char_length;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesisClient::Name_);
  message.set_method_name("OnEncounteredSentenceBoundary");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SpeechSynthesisClientProxy::OnEncounteredSpeakingError(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesisClient::OnEncounteredSpeakingError");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesisClient_OnEncounteredSpeakingError_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesisClient::Name_);
  message.set_method_name("OnEncounteredSpeakingError");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool SpeechSynthesisClientStubDispatch::Accept(
    SpeechSynthesisClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSpeechSynthesisClient_OnStartedSpeaking_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesisClient::OnStartedSpeaking",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesisClient::OnStartedSpeaking");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesisClient_OnStartedSpeaking_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesisClient_OnStartedSpeaking_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SpeechSynthesisClient_OnStartedSpeaking_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesisClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnStartedSpeaking();
      return true;
    }
    case internal::kSpeechSynthesisClient_OnFinishedSpeaking_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesisClient::OnFinishedSpeaking",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesisClient::OnFinishedSpeaking");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesisClient_OnFinishedSpeaking_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesisClient_OnFinishedSpeaking_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SpeechSynthesisClient_OnFinishedSpeaking_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesisClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnFinishedSpeaking();
      return true;
    }
    case internal::kSpeechSynthesisClient_OnPausedSpeaking_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesisClient::OnPausedSpeaking",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesisClient::OnPausedSpeaking");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesisClient_OnPausedSpeaking_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesisClient_OnPausedSpeaking_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SpeechSynthesisClient_OnPausedSpeaking_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesisClient::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnPausedSpeaking();
      return true;
    }
    case internal::kSpeechSynthesisClient_OnResumedSpeaking_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesisClient::OnResumedSpeaking",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesisClient::OnResumedSpeaking");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesisClient_OnResumedSpeaking_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesisClient_OnResumedSpeaking_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SpeechSynthesisClient_OnResumedSpeaking_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesisClient::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnResumedSpeaking();
      return true;
    }
    case internal::kSpeechSynthesisClient_OnEncounteredWordBoundary_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesisClient::OnEncounteredWordBoundary",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesisClient::OnEncounteredWordBoundary");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      uint32_t p_char_index{};
      uint32_t p_char_length{};
      SpeechSynthesisClient_OnEncounteredWordBoundary_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_char_index = input_data_view.char_index();
      if (success)
        p_char_length = input_data_view.char_length();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesisClient::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnEncounteredWordBoundary(
std::move(p_char_index), 
std::move(p_char_length));
      return true;
    }
    case internal::kSpeechSynthesisClient_OnEncounteredSentenceBoundary_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesisClient::OnEncounteredSentenceBoundary",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesisClient::OnEncounteredSentenceBoundary");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      uint32_t p_char_index{};
      uint32_t p_char_length{};
      SpeechSynthesisClient_OnEncounteredSentenceBoundary_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_char_index = input_data_view.char_index();
      if (success)
        p_char_length = input_data_view.char_length();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesisClient::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnEncounteredSentenceBoundary(
std::move(p_char_index), 
std::move(p_char_length));
      return true;
    }
    case internal::kSpeechSynthesisClient_OnEncounteredSpeakingError_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesisClient::OnEncounteredSpeakingError",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesisClient::OnEncounteredSpeakingError");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SpeechSynthesisClient_OnEncounteredSpeakingError_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesisClient::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnEncounteredSpeakingError();
      return true;
    }
  }
  return false;
}

// static
bool SpeechSynthesisClientStubDispatch::AcceptWithResponder(
    SpeechSynthesisClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kSpeechSynthesisClient_OnStartedSpeaking_Name: {
      break;
    }
    case internal::kSpeechSynthesisClient_OnFinishedSpeaking_Name: {
      break;
    }
    case internal::kSpeechSynthesisClient_OnPausedSpeaking_Name: {
      break;
    }
    case internal::kSpeechSynthesisClient_OnResumedSpeaking_Name: {
      break;
    }
    case internal::kSpeechSynthesisClient_OnEncounteredWordBoundary_Name: {
      break;
    }
    case internal::kSpeechSynthesisClient_OnEncounteredSentenceBoundary_Name: {
      break;
    }
    case internal::kSpeechSynthesisClient_OnEncounteredSpeakingError_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSpeechSynthesisClientValidationInfo[] = {
    {&internal::SpeechSynthesisClient_OnStartedSpeaking_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SpeechSynthesisClient_OnFinishedSpeaking_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SpeechSynthesisClient_OnPausedSpeaking_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SpeechSynthesisClient_OnResumedSpeaking_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data::Validate,
     nullptr /* no response */},
};

bool SpeechSynthesisClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::SpeechSynthesisClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSpeechSynthesisClientValidationInfo);
}

const char SpeechSynthesis::Name_[] = "blink.mojom.SpeechSynthesis";

SpeechSynthesisProxy::SpeechSynthesisProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SpeechSynthesisProxy::AddVoiceListObserver(
    mojo::PendingRemote<SpeechSynthesisVoiceListObserver> in_observer) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesis::AddVoiceListObserver");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesis_AddVoiceListObserver_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesis_AddVoiceListObserver_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::SpeechSynthesisVoiceListObserverInterfaceBase>>(
      in_observer, &params->observer, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->observer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid observer in SpeechSynthesis.AddVoiceListObserver request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesis::Name_);
  message.set_method_name("AddVoiceListObserver");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SpeechSynthesisProxy::Speak(
    SpeechSynthesisUtterancePtr in_utterance, mojo::PendingRemote<SpeechSynthesisClient> in_client) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesis::Speak");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesis_Speak_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesis_Speak_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->utterance)::BaseType::BufferWriter
      utterance_writer;
  mojo::internal::Serialize<::blink::mojom::SpeechSynthesisUtteranceDataView>(
      in_utterance, buffer, &utterance_writer, &serialization_context);
  params->utterance.Set(
      utterance_writer.is_null() ? nullptr : utterance_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->utterance.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null utterance in SpeechSynthesis.Speak request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::SpeechSynthesisClientInterfaceBase>>(
      in_client, &params->client, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in SpeechSynthesis.Speak request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesis::Name_);
  message.set_method_name("Speak");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SpeechSynthesisProxy::Pause(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesis::Pause");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesis_Pause_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesis_Pause_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesis::Name_);
  message.set_method_name("Pause");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SpeechSynthesisProxy::Resume(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesis::Resume");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesis_Resume_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesis_Resume_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesis::Name_);
  message.set_method_name("Resume");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void SpeechSynthesisProxy::Cancel(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "blink::mojom::SpeechSynthesis::Cancel");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSpeechSynthesis_Cancel_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::blink::mojom::internal::SpeechSynthesis_Cancel_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SpeechSynthesis::Name_);
  message.set_method_name("Cancel");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool SpeechSynthesisStubDispatch::Accept(
    SpeechSynthesis* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSpeechSynthesis_AddVoiceListObserver_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesis::AddVoiceListObserver",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesis::AddVoiceListObserver");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesis_AddVoiceListObserver_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesis_AddVoiceListObserver_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      mojo::PendingRemote<SpeechSynthesisVoiceListObserver> p_observer{};
      SpeechSynthesis_AddVoiceListObserver_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_observer =
            input_data_view.TakeObserver<decltype(p_observer)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesis::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddVoiceListObserver(
std::move(p_observer));
      return true;
    }
    case internal::kSpeechSynthesis_Speak_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesis::Speak",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesis::Speak");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesis_Speak_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesis_Speak_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SpeechSynthesisUtterancePtr p_utterance{};
      mojo::PendingRemote<SpeechSynthesisClient> p_client{};
      SpeechSynthesis_Speak_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadUtterance(&p_utterance))
        success = false;
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesis::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Speak(
std::move(p_utterance), 
std::move(p_client));
      return true;
    }
    case internal::kSpeechSynthesis_Pause_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesis::Pause",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesis::Pause");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesis_Pause_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesis_Pause_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SpeechSynthesis_Pause_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesis::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Pause();
      return true;
    }
    case internal::kSpeechSynthesis_Resume_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesis::Resume",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesis::Resume");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesis_Resume_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesis_Resume_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SpeechSynthesis_Resume_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesis::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Resume();
      return true;
    }
    case internal::kSpeechSynthesis_Cancel_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)blink::mojom::SpeechSynthesis::Cancel",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)blink::mojom::SpeechSynthesis::Cancel");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);
      mojo::internal::MessageDispatchContext dispatch_context(message);

      DCHECK(message->is_serialized());
      internal::SpeechSynthesis_Cancel_Params_Data* params =
          reinterpret_cast<internal::SpeechSynthesis_Cancel_Params_Data*>(
              message->mutable_payload());
      
      mojo::internal::SerializationContext serialization_context;
      serialization_context.TakeHandlesFromMessage(message);
      bool success = true;
      SpeechSynthesis_Cancel_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SpeechSynthesis::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Cancel();
      return true;
    }
  }
  return false;
}

// static
bool SpeechSynthesisStubDispatch::AcceptWithResponder(
    SpeechSynthesis* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  switch (message->header()->name) {
    case internal::kSpeechSynthesis_AddVoiceListObserver_Name: {
      break;
    }
    case internal::kSpeechSynthesis_Speak_Name: {
      break;
    }
    case internal::kSpeechSynthesis_Pause_Name: {
      break;
    }
    case internal::kSpeechSynthesis_Resume_Name: {
      break;
    }
    case internal::kSpeechSynthesis_Cancel_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSpeechSynthesisValidationInfo[] = {
    {&internal::SpeechSynthesis_AddVoiceListObserver_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SpeechSynthesis_Speak_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SpeechSynthesis_Pause_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SpeechSynthesis_Resume_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SpeechSynthesis_Cancel_Params_Data::Validate,
     nullptr /* no response */},
};

bool SpeechSynthesisRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::SpeechSynthesis::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSpeechSynthesisValidationInfo);
}

}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::SpeechSynthesisUtterance::DataView, ::blink::mojom::blink::SpeechSynthesisUtterancePtr>::Read(
    ::blink::mojom::blink::SpeechSynthesisUtterance::DataView input,
    ::blink::mojom::blink::SpeechSynthesisUtterancePtr* output) {
  bool success = true;
  ::blink::mojom::blink::SpeechSynthesisUtterancePtr result(::blink::mojom::blink::SpeechSynthesisUtterance::New());
  
      if (success && !input.ReadText(&result->text))
        success = false;
      if (success && !input.ReadLang(&result->lang))
        success = false;
      if (success && !input.ReadVoice(&result->voice))
        success = false;
      if (success)
        result->volume = input.volume();
      if (success)
        result->rate = input.rate();
      if (success)
        result->pitch = input.pitch();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::SpeechSynthesisVoice::DataView, ::blink::mojom::blink::SpeechSynthesisVoicePtr>::Read(
    ::blink::mojom::blink::SpeechSynthesisVoice::DataView input,
    ::blink::mojom::blink::SpeechSynthesisVoicePtr* output) {
  bool success = true;
  ::blink::mojom::blink::SpeechSynthesisVoicePtr result(::blink::mojom::blink::SpeechSynthesisVoice::New());
  
      if (success && !input.ReadVoiceUri(&result->voice_uri))
        success = false;
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadLang(&result->lang))
        success = false;
      if (success)
        result->is_local_service = input.is_local_service();
      if (success)
        result->is_default = input.is_default();
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif