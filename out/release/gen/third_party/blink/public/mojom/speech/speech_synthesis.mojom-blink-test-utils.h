// third_party/blink/public/mojom/speech/speech_synthesis.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SPEECH_SPEECH_SYNTHESIS_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SPEECH_SPEECH_SYNTHESIS_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/speech/speech_synthesis.mojom-blink.h"
#include "third_party/blink/renderer/platform/platform_export.h"


namespace blink {
namespace mojom {
namespace blink {


class PLATFORM_EXPORT SpeechSynthesisVoiceListObserverInterceptorForTesting : public SpeechSynthesisVoiceListObserver {
  virtual SpeechSynthesisVoiceListObserver* GetForwardingInterface() = 0;
  void OnSetVoiceList(WTF::Vector<SpeechSynthesisVoicePtr> voice_list) override;
};
class PLATFORM_EXPORT SpeechSynthesisVoiceListObserverAsyncWaiter {
 public:
  explicit SpeechSynthesisVoiceListObserverAsyncWaiter(SpeechSynthesisVoiceListObserver* proxy);
  ~SpeechSynthesisVoiceListObserverAsyncWaiter();

 private:
  SpeechSynthesisVoiceListObserver* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(SpeechSynthesisVoiceListObserverAsyncWaiter);
};


class PLATFORM_EXPORT SpeechSynthesisClientInterceptorForTesting : public SpeechSynthesisClient {
  virtual SpeechSynthesisClient* GetForwardingInterface() = 0;
  void OnStartedSpeaking() override;
  void OnFinishedSpeaking() override;
  void OnPausedSpeaking() override;
  void OnResumedSpeaking() override;
  void OnEncounteredWordBoundary(uint32_t char_index, uint32_t char_length) override;
  void OnEncounteredSentenceBoundary(uint32_t char_index, uint32_t char_length) override;
  void OnEncounteredSpeakingError() override;
};
class PLATFORM_EXPORT SpeechSynthesisClientAsyncWaiter {
 public:
  explicit SpeechSynthesisClientAsyncWaiter(SpeechSynthesisClient* proxy);
  ~SpeechSynthesisClientAsyncWaiter();

 private:
  SpeechSynthesisClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(SpeechSynthesisClientAsyncWaiter);
};


class PLATFORM_EXPORT SpeechSynthesisInterceptorForTesting : public SpeechSynthesis {
  virtual SpeechSynthesis* GetForwardingInterface() = 0;
  void AddVoiceListObserver(mojo::PendingRemote<SpeechSynthesisVoiceListObserver> observer) override;
  void Speak(SpeechSynthesisUtterancePtr utterance, mojo::PendingRemote<SpeechSynthesisClient> client) override;
  void Pause() override;
  void Resume() override;
  void Cancel() override;
};
class PLATFORM_EXPORT SpeechSynthesisAsyncWaiter {
 public:
  explicit SpeechSynthesisAsyncWaiter(SpeechSynthesis* proxy);
  ~SpeechSynthesisAsyncWaiter();

 private:
  SpeechSynthesis* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(SpeechSynthesisAsyncWaiter);
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SPEECH_SPEECH_SYNTHESIS_MOJOM_BLINK_TEST_UTILS_H_