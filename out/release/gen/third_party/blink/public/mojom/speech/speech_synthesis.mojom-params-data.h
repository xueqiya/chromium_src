// third_party/blink/public/mojom/speech/speech_synthesis.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SPEECH_SPEECH_SYNTHESIS_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SPEECH_SPEECH_SYNTHESIS_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif
namespace blink {
namespace mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data));
      new (data()) SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data>(index_);
    }
    SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::SpeechSynthesisVoice_Data>>> voice_list;

 private:
  SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data();
  ~SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data) == 16,
              "Bad sizeof(SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesisClient_OnStartedSpeaking_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesisClient_OnStartedSpeaking_Params_Data));
      new (data()) SpeechSynthesisClient_OnStartedSpeaking_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesisClient_OnStartedSpeaking_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesisClient_OnStartedSpeaking_Params_Data>(index_);
    }
    SpeechSynthesisClient_OnStartedSpeaking_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  SpeechSynthesisClient_OnStartedSpeaking_Params_Data();
  ~SpeechSynthesisClient_OnStartedSpeaking_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesisClient_OnStartedSpeaking_Params_Data) == 8,
              "Bad sizeof(SpeechSynthesisClient_OnStartedSpeaking_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesisClient_OnFinishedSpeaking_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesisClient_OnFinishedSpeaking_Params_Data));
      new (data()) SpeechSynthesisClient_OnFinishedSpeaking_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesisClient_OnFinishedSpeaking_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesisClient_OnFinishedSpeaking_Params_Data>(index_);
    }
    SpeechSynthesisClient_OnFinishedSpeaking_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  SpeechSynthesisClient_OnFinishedSpeaking_Params_Data();
  ~SpeechSynthesisClient_OnFinishedSpeaking_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesisClient_OnFinishedSpeaking_Params_Data) == 8,
              "Bad sizeof(SpeechSynthesisClient_OnFinishedSpeaking_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesisClient_OnPausedSpeaking_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesisClient_OnPausedSpeaking_Params_Data));
      new (data()) SpeechSynthesisClient_OnPausedSpeaking_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesisClient_OnPausedSpeaking_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesisClient_OnPausedSpeaking_Params_Data>(index_);
    }
    SpeechSynthesisClient_OnPausedSpeaking_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  SpeechSynthesisClient_OnPausedSpeaking_Params_Data();
  ~SpeechSynthesisClient_OnPausedSpeaking_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesisClient_OnPausedSpeaking_Params_Data) == 8,
              "Bad sizeof(SpeechSynthesisClient_OnPausedSpeaking_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesisClient_OnResumedSpeaking_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesisClient_OnResumedSpeaking_Params_Data));
      new (data()) SpeechSynthesisClient_OnResumedSpeaking_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesisClient_OnResumedSpeaking_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesisClient_OnResumedSpeaking_Params_Data>(index_);
    }
    SpeechSynthesisClient_OnResumedSpeaking_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  SpeechSynthesisClient_OnResumedSpeaking_Params_Data();
  ~SpeechSynthesisClient_OnResumedSpeaking_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesisClient_OnResumedSpeaking_Params_Data) == 8,
              "Bad sizeof(SpeechSynthesisClient_OnResumedSpeaking_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data));
      new (data()) SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data>(index_);
    }
    SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t char_index;
  uint32_t char_length;

 private:
  SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data();
  ~SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data) == 16,
              "Bad sizeof(SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data));
      new (data()) SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data>(index_);
    }
    SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t char_index;
  uint32_t char_length;

 private:
  SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data();
  ~SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data) == 16,
              "Bad sizeof(SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data));
      new (data()) SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data>(index_);
    }
    SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data();
  ~SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data) == 8,
              "Bad sizeof(SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesis_AddVoiceListObserver_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesis_AddVoiceListObserver_Params_Data));
      new (data()) SpeechSynthesis_AddVoiceListObserver_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesis_AddVoiceListObserver_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesis_AddVoiceListObserver_Params_Data>(index_);
    }
    SpeechSynthesis_AddVoiceListObserver_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;

 private:
  SpeechSynthesis_AddVoiceListObserver_Params_Data();
  ~SpeechSynthesis_AddVoiceListObserver_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesis_AddVoiceListObserver_Params_Data) == 16,
              "Bad sizeof(SpeechSynthesis_AddVoiceListObserver_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesis_Speak_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesis_Speak_Params_Data));
      new (data()) SpeechSynthesis_Speak_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesis_Speak_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesis_Speak_Params_Data>(index_);
    }
    SpeechSynthesis_Speak_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SpeechSynthesisUtterance_Data> utterance;
  mojo::internal::Interface_Data client;

 private:
  SpeechSynthesis_Speak_Params_Data();
  ~SpeechSynthesis_Speak_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesis_Speak_Params_Data) == 24,
              "Bad sizeof(SpeechSynthesis_Speak_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesis_Pause_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesis_Pause_Params_Data));
      new (data()) SpeechSynthesis_Pause_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesis_Pause_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesis_Pause_Params_Data>(index_);
    }
    SpeechSynthesis_Pause_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  SpeechSynthesis_Pause_Params_Data();
  ~SpeechSynthesis_Pause_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesis_Pause_Params_Data) == 8,
              "Bad sizeof(SpeechSynthesis_Pause_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesis_Resume_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesis_Resume_Params_Data));
      new (data()) SpeechSynthesis_Resume_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesis_Resume_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesis_Resume_Params_Data>(index_);
    }
    SpeechSynthesis_Resume_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  SpeechSynthesis_Resume_Params_Data();
  ~SpeechSynthesis_Resume_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesis_Resume_Params_Data) == 8,
              "Bad sizeof(SpeechSynthesis_Resume_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SpeechSynthesis_Cancel_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SpeechSynthesis_Cancel_Params_Data));
      new (data()) SpeechSynthesis_Cancel_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SpeechSynthesis_Cancel_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SpeechSynthesis_Cancel_Params_Data>(index_);
    }
    SpeechSynthesis_Cancel_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  SpeechSynthesis_Cancel_Params_Data();
  ~SpeechSynthesis_Cancel_Params_Data() = delete;
};
static_assert(sizeof(SpeechSynthesis_Cancel_Params_Data) == 8,
              "Bad sizeof(SpeechSynthesis_Cancel_Params_Data)");

}  // namespace internal
class SpeechSynthesisVoiceListObserver_OnSetVoiceList_ParamsDataView {
 public:
  SpeechSynthesisVoiceListObserver_OnSetVoiceList_ParamsDataView() {}

  SpeechSynthesisVoiceListObserver_OnSetVoiceList_ParamsDataView(
      internal::SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetVoiceListDataView(
      mojo::ArrayDataView<SpeechSynthesisVoiceDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVoiceList(UserType* output) {
    auto* pointer = data_->voice_list.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::SpeechSynthesisVoiceDataView>>(
        pointer, output, context_);
  }
 private:
  internal::SpeechSynthesisVoiceListObserver_OnSetVoiceList_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SpeechSynthesisClient_OnStartedSpeaking_ParamsDataView {
 public:
  SpeechSynthesisClient_OnStartedSpeaking_ParamsDataView() {}

  SpeechSynthesisClient_OnStartedSpeaking_ParamsDataView(
      internal::SpeechSynthesisClient_OnStartedSpeaking_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SpeechSynthesisClient_OnStartedSpeaking_Params_Data* data_ = nullptr;
};

class SpeechSynthesisClient_OnFinishedSpeaking_ParamsDataView {
 public:
  SpeechSynthesisClient_OnFinishedSpeaking_ParamsDataView() {}

  SpeechSynthesisClient_OnFinishedSpeaking_ParamsDataView(
      internal::SpeechSynthesisClient_OnFinishedSpeaking_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SpeechSynthesisClient_OnFinishedSpeaking_Params_Data* data_ = nullptr;
};

class SpeechSynthesisClient_OnPausedSpeaking_ParamsDataView {
 public:
  SpeechSynthesisClient_OnPausedSpeaking_ParamsDataView() {}

  SpeechSynthesisClient_OnPausedSpeaking_ParamsDataView(
      internal::SpeechSynthesisClient_OnPausedSpeaking_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SpeechSynthesisClient_OnPausedSpeaking_Params_Data* data_ = nullptr;
};

class SpeechSynthesisClient_OnResumedSpeaking_ParamsDataView {
 public:
  SpeechSynthesisClient_OnResumedSpeaking_ParamsDataView() {}

  SpeechSynthesisClient_OnResumedSpeaking_ParamsDataView(
      internal::SpeechSynthesisClient_OnResumedSpeaking_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SpeechSynthesisClient_OnResumedSpeaking_Params_Data* data_ = nullptr;
};

class SpeechSynthesisClient_OnEncounteredWordBoundary_ParamsDataView {
 public:
  SpeechSynthesisClient_OnEncounteredWordBoundary_ParamsDataView() {}

  SpeechSynthesisClient_OnEncounteredWordBoundary_ParamsDataView(
      internal::SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t char_index() const {
    return data_->char_index;
  }
  uint32_t char_length() const {
    return data_->char_length;
  }
 private:
  internal::SpeechSynthesisClient_OnEncounteredWordBoundary_Params_Data* data_ = nullptr;
};

class SpeechSynthesisClient_OnEncounteredSentenceBoundary_ParamsDataView {
 public:
  SpeechSynthesisClient_OnEncounteredSentenceBoundary_ParamsDataView() {}

  SpeechSynthesisClient_OnEncounteredSentenceBoundary_ParamsDataView(
      internal::SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t char_index() const {
    return data_->char_index;
  }
  uint32_t char_length() const {
    return data_->char_length;
  }
 private:
  internal::SpeechSynthesisClient_OnEncounteredSentenceBoundary_Params_Data* data_ = nullptr;
};

class SpeechSynthesisClient_OnEncounteredSpeakingError_ParamsDataView {
 public:
  SpeechSynthesisClient_OnEncounteredSpeakingError_ParamsDataView() {}

  SpeechSynthesisClient_OnEncounteredSpeakingError_ParamsDataView(
      internal::SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SpeechSynthesisClient_OnEncounteredSpeakingError_Params_Data* data_ = nullptr;
};

class SpeechSynthesis_AddVoiceListObserver_ParamsDataView {
 public:
  SpeechSynthesis_AddVoiceListObserver_ParamsDataView() {}

  SpeechSynthesis_AddVoiceListObserver_ParamsDataView(
      internal::SpeechSynthesis_AddVoiceListObserver_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::SpeechSynthesisVoiceListObserverInterfaceBase>>(
            &data_->observer, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SpeechSynthesis_AddVoiceListObserver_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SpeechSynthesis_Speak_ParamsDataView {
 public:
  SpeechSynthesis_Speak_ParamsDataView() {}

  SpeechSynthesis_Speak_ParamsDataView(
      internal::SpeechSynthesis_Speak_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUtteranceDataView(
      SpeechSynthesisUtteranceDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUtterance(UserType* output) {
    auto* pointer = data_->utterance.Get();
    return mojo::internal::Deserialize<::blink::mojom::SpeechSynthesisUtteranceDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::SpeechSynthesisClientInterfaceBase>>(
            &data_->client, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SpeechSynthesis_Speak_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SpeechSynthesis_Pause_ParamsDataView {
 public:
  SpeechSynthesis_Pause_ParamsDataView() {}

  SpeechSynthesis_Pause_ParamsDataView(
      internal::SpeechSynthesis_Pause_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SpeechSynthesis_Pause_Params_Data* data_ = nullptr;
};

class SpeechSynthesis_Resume_ParamsDataView {
 public:
  SpeechSynthesis_Resume_ParamsDataView() {}

  SpeechSynthesis_Resume_ParamsDataView(
      internal::SpeechSynthesis_Resume_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SpeechSynthesis_Resume_Params_Data* data_ = nullptr;
};

class SpeechSynthesis_Cancel_ParamsDataView {
 public:
  SpeechSynthesis_Cancel_ParamsDataView() {}

  SpeechSynthesis_Cancel_ParamsDataView(
      internal::SpeechSynthesis_Cancel_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SpeechSynthesis_Cancel_Params_Data* data_ = nullptr;
};


inline void SpeechSynthesisVoiceListObserver_OnSetVoiceList_ParamsDataView::GetVoiceListDataView(
    mojo::ArrayDataView<SpeechSynthesisVoiceDataView>* output) {
  auto pointer = data_->voice_list.Get();
  *output = mojo::ArrayDataView<SpeechSynthesisVoiceDataView>(pointer, context_);
}


















inline void SpeechSynthesis_Speak_ParamsDataView::GetUtteranceDataView(
    SpeechSynthesisUtteranceDataView* output) {
  auto pointer = data_->utterance.Get();
  *output = SpeechSynthesisUtteranceDataView(pointer, context_);
}







}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SPEECH_SPEECH_SYNTHESIS_MOJOM_PARAMS_DATA_H_