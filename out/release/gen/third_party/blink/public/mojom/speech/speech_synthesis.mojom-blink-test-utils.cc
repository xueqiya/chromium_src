// third_party/blink/public/mojom/speech/speech_synthesis.mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "third_party/blink/public/mojom/speech/speech_synthesis.mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SPEECH_SPEECH_SYNTHESIS_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SPEECH_SPEECH_SYNTHESIS_MOJOM_BLINK_JUMBO_H_
#endif


namespace blink {
namespace mojom {
namespace blink {


void SpeechSynthesisVoiceListObserverInterceptorForTesting::OnSetVoiceList(WTF::Vector<SpeechSynthesisVoicePtr> voice_list) {
  GetForwardingInterface()->OnSetVoiceList(std::move(voice_list));
}
SpeechSynthesisVoiceListObserverAsyncWaiter::SpeechSynthesisVoiceListObserverAsyncWaiter(
    SpeechSynthesisVoiceListObserver* proxy) : proxy_(proxy) {}

SpeechSynthesisVoiceListObserverAsyncWaiter::~SpeechSynthesisVoiceListObserverAsyncWaiter() = default;




void SpeechSynthesisClientInterceptorForTesting::OnStartedSpeaking() {
  GetForwardingInterface()->OnStartedSpeaking();
}
void SpeechSynthesisClientInterceptorForTesting::OnFinishedSpeaking() {
  GetForwardingInterface()->OnFinishedSpeaking();
}
void SpeechSynthesisClientInterceptorForTesting::OnPausedSpeaking() {
  GetForwardingInterface()->OnPausedSpeaking();
}
void SpeechSynthesisClientInterceptorForTesting::OnResumedSpeaking() {
  GetForwardingInterface()->OnResumedSpeaking();
}
void SpeechSynthesisClientInterceptorForTesting::OnEncounteredWordBoundary(uint32_t char_index, uint32_t char_length) {
  GetForwardingInterface()->OnEncounteredWordBoundary(std::move(char_index), std::move(char_length));
}
void SpeechSynthesisClientInterceptorForTesting::OnEncounteredSentenceBoundary(uint32_t char_index, uint32_t char_length) {
  GetForwardingInterface()->OnEncounteredSentenceBoundary(std::move(char_index), std::move(char_length));
}
void SpeechSynthesisClientInterceptorForTesting::OnEncounteredSpeakingError() {
  GetForwardingInterface()->OnEncounteredSpeakingError();
}
SpeechSynthesisClientAsyncWaiter::SpeechSynthesisClientAsyncWaiter(
    SpeechSynthesisClient* proxy) : proxy_(proxy) {}

SpeechSynthesisClientAsyncWaiter::~SpeechSynthesisClientAsyncWaiter() = default;




void SpeechSynthesisInterceptorForTesting::AddVoiceListObserver(mojo::PendingRemote<SpeechSynthesisVoiceListObserver> observer) {
  GetForwardingInterface()->AddVoiceListObserver(std::move(observer));
}
void SpeechSynthesisInterceptorForTesting::Speak(SpeechSynthesisUtterancePtr utterance, mojo::PendingRemote<SpeechSynthesisClient> client) {
  GetForwardingInterface()->Speak(std::move(utterance), std::move(client));
}
void SpeechSynthesisInterceptorForTesting::Pause() {
  GetForwardingInterface()->Pause();
}
void SpeechSynthesisInterceptorForTesting::Resume() {
  GetForwardingInterface()->Resume();
}
void SpeechSynthesisInterceptorForTesting::Cancel() {
  GetForwardingInterface()->Cancel();
}
SpeechSynthesisAsyncWaiter::SpeechSynthesisAsyncWaiter(
    SpeechSynthesis* proxy) : proxy_(proxy) {}

SpeechSynthesisAsyncWaiter::~SpeechSynthesisAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif