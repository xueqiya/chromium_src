// third_party/blink/public/mojom/messaging/message_port_descriptor.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif

#include "third_party/blink/public/mojom/messaging/message_port_descriptor.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "third_party/blink/public/mojom/messaging/message_port_descriptor.mojom-params-data.h"
#include "third_party/blink/public/mojom/messaging/message_port_descriptor.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/messaging/message_port_descriptor.mojom-import-headers.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_MESSAGING_MESSAGE_PORT_DESCRIPTOR_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_MESSAGING_MESSAGE_PORT_DESCRIPTOR_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#endif
namespace blink {
namespace mojom {
MessagePortDescriptor::MessagePortDescriptor()
    : pipe_handle(),
      id(),
      sequence_number() {}

MessagePortDescriptor::MessagePortDescriptor(
    mojo::ScopedMessagePipeHandle pipe_handle_in,
    const ::base::UnguessableToken& id_in,
    uint64_t sequence_number_in)
    : pipe_handle(std::move(pipe_handle_in)),
      id(std::move(id_in)),
      sequence_number(std::move(sequence_number_in)) {}

MessagePortDescriptor::~MessagePortDescriptor() = default;

bool MessagePortDescriptor::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace blink

namespace mojo {


// static
bool StructTraits<::blink::mojom::MessagePortDescriptor::DataView, ::blink::mojom::MessagePortDescriptorPtr>::Read(
    ::blink::mojom::MessagePortDescriptor::DataView input,
    ::blink::mojom::MessagePortDescriptorPtr* output) {
  bool success = true;
  ::blink::mojom::MessagePortDescriptorPtr result(::blink::mojom::MessagePortDescriptor::New());
  
      if (success)
        result->pipe_handle = input.TakePipeHandle();
      if (success && !input.ReadId(&result->id))
        success = false;
      if (success)
        result->sequence_number = input.sequence_number();
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif