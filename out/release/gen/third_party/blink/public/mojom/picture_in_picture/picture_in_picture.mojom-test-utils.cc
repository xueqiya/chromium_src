// third_party/blink/public/mojom/picture_in_picture/picture_in_picture.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "third_party/blink/public/mojom/picture_in_picture/picture_in_picture.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "services/viz/public/mojom/compositing/surface_id.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PICTURE_IN_PICTURE_PICTURE_IN_PICTURE_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PICTURE_IN_PICTURE_PICTURE_IN_PICTURE_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "services/viz/public/cpp/compositing/frame_sink_id_mojom_traits.h"
#include "services/viz/public/cpp/compositing/local_surface_id_mojom_traits.h"
#include "services/viz/public/cpp/compositing/surface_id_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#endif


namespace blink {
namespace mojom {


void PictureInPictureSessionObserverInterceptorForTesting::OnWindowSizeChanged(const ::gfx::Size& size) {
  GetForwardingInterface()->OnWindowSizeChanged(std::move(size));
}
void PictureInPictureSessionObserverInterceptorForTesting::OnStopped() {
  GetForwardingInterface()->OnStopped();
}
PictureInPictureSessionObserverAsyncWaiter::PictureInPictureSessionObserverAsyncWaiter(
    PictureInPictureSessionObserver* proxy) : proxy_(proxy) {}

PictureInPictureSessionObserverAsyncWaiter::~PictureInPictureSessionObserverAsyncWaiter() = default;




void PictureInPictureSessionInterceptorForTesting::Update(uint32_t player_id, const base::Optional<::viz::SurfaceId>& surface_id, const ::gfx::Size& natural_size, bool show_play_pause_button) {
  GetForwardingInterface()->Update(std::move(player_id), std::move(surface_id), std::move(natural_size), std::move(show_play_pause_button));
}
void PictureInPictureSessionInterceptorForTesting::Stop(StopCallback callback) {
  GetForwardingInterface()->Stop(std::move(callback));
}
PictureInPictureSessionAsyncWaiter::PictureInPictureSessionAsyncWaiter(
    PictureInPictureSession* proxy) : proxy_(proxy) {}

PictureInPictureSessionAsyncWaiter::~PictureInPictureSessionAsyncWaiter() = default;

void PictureInPictureSessionAsyncWaiter::Stop(
    ) {
  base::RunLoop loop;
  proxy_->Stop(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}



void PictureInPictureServiceInterceptorForTesting::StartSession(uint32_t player_id, const base::Optional<::viz::SurfaceId>& surface_id, const ::gfx::Size& natural_size, bool show_play_pause_button, mojo::PendingRemote<PictureInPictureSessionObserver> observer, StartSessionCallback callback) {
  GetForwardingInterface()->StartSession(std::move(player_id), std::move(surface_id), std::move(natural_size), std::move(show_play_pause_button), std::move(observer), std::move(callback));
}
PictureInPictureServiceAsyncWaiter::PictureInPictureServiceAsyncWaiter(
    PictureInPictureService* proxy) : proxy_(proxy) {}

PictureInPictureServiceAsyncWaiter::~PictureInPictureServiceAsyncWaiter() = default;

void PictureInPictureServiceAsyncWaiter::StartSession(
    uint32_t player_id, const base::Optional<::viz::SurfaceId>& surface_id, const ::gfx::Size& natural_size, bool show_play_pause_button, mojo::PendingRemote<PictureInPictureSessionObserver> observer, mojo::PendingRemote<PictureInPictureSession>* out_session, ::gfx::Size* out_size) {
  base::RunLoop loop;
  proxy_->StartSession(std::move(player_id),std::move(surface_id),std::move(natural_size),std::move(show_play_pause_button),std::move(observer),
      base::BindOnce(
          [](base::RunLoop* loop,
             mojo::PendingRemote<PictureInPictureSession>* out_session
,
             ::gfx::Size* out_size
,
             mojo::PendingRemote<PictureInPictureSession> session,
             const ::gfx::Size& size) {*out_session = std::move(session);*out_size = std::move(size);
            loop->Quit();
          },
          &loop,
          out_session,
          out_size));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif