// third_party/blink/public/mojom/native_file_system/native_file_system_file_handle.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_FILE_SYSTEM_NATIVE_FILE_SYSTEM_FILE_HANDLE_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_FILE_SYSTEM_NATIVE_FILE_SYSTEM_FILE_HANDLE_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/native_file_system/native_file_system_file_handle.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT NativeFileSystemFileHandleInterceptorForTesting : public NativeFileSystemFileHandle {
  virtual NativeFileSystemFileHandle* GetForwardingInterface() = 0;
  void GetPermissionStatus(bool writable, GetPermissionStatusCallback callback) override;
  void RequestPermission(bool writable, RequestPermissionCallback callback) override;
  void AsBlob(AsBlobCallback callback) override;
  void CreateFileWriter(bool keep_existing_data, CreateFileWriterCallback callback) override;
  void Transfer(mojo::PendingReceiver<::blink::mojom::NativeFileSystemTransferToken> token) override;
};
class BLINK_COMMON_EXPORT NativeFileSystemFileHandleAsyncWaiter {
 public:
  explicit NativeFileSystemFileHandleAsyncWaiter(NativeFileSystemFileHandle* proxy);
  ~NativeFileSystemFileHandleAsyncWaiter();
  void GetPermissionStatus(
      bool writable, ::blink::mojom::PermissionStatus* out_status);
  void RequestPermission(
      bool writable, ::blink::mojom::NativeFileSystemErrorPtr* out_result, ::blink::mojom::PermissionStatus* out_status);
  void AsBlob(
      ::blink::mojom::NativeFileSystemErrorPtr* out_result, ::base::File::Info* out_info, ::blink::mojom::SerializedBlobPtr* out_blob);
  void CreateFileWriter(
      bool keep_existing_data, ::blink::mojom::NativeFileSystemErrorPtr* out_result, mojo::PendingRemote<::blink::mojom::NativeFileSystemFileWriter>* out_writer);

 private:
  NativeFileSystemFileHandle* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(NativeFileSystemFileHandleAsyncWaiter);
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_FILE_SYSTEM_NATIVE_FILE_SYSTEM_FILE_HANDLE_MOJOM_TEST_UTILS_H_