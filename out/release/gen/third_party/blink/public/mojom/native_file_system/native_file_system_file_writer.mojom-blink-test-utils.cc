// third_party/blink/public/mojom/native_file_system/native_file_system_file_writer.mojom-blink-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "third_party/blink/public/mojom/native_file_system/native_file_system_file_writer.mojom-blink-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"
#include "third_party/blink/public/mojom/blob/blob.mojom-blink.h"
#include "third_party/blink/public/mojom/native_file_system/native_file_system_error.mojom-blink.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_FILE_SYSTEM_NATIVE_FILE_SYSTEM_FILE_WRITER_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_FILE_SYSTEM_NATIVE_FILE_SYSTEM_FILE_WRITER_MOJOM_BLINK_JUMBO_H_
#include "mojo/public/cpp/base/file_error_mojom_traits.h"
#endif


namespace blink {
namespace mojom {
namespace blink {


void NativeFileSystemFileWriterInterceptorForTesting::Write(uint64_t offset, mojo::PendingRemote<::blink::mojom::blink::Blob> data, WriteCallback callback) {
  GetForwardingInterface()->Write(std::move(offset), std::move(data), std::move(callback));
}
void NativeFileSystemFileWriterInterceptorForTesting::WriteStream(uint64_t offset, mojo::ScopedDataPipeConsumerHandle stream, WriteStreamCallback callback) {
  GetForwardingInterface()->WriteStream(std::move(offset), std::move(stream), std::move(callback));
}
void NativeFileSystemFileWriterInterceptorForTesting::Truncate(uint64_t length, TruncateCallback callback) {
  GetForwardingInterface()->Truncate(std::move(length), std::move(callback));
}
void NativeFileSystemFileWriterInterceptorForTesting::Close(CloseCallback callback) {
  GetForwardingInterface()->Close(std::move(callback));
}
NativeFileSystemFileWriterAsyncWaiter::NativeFileSystemFileWriterAsyncWaiter(
    NativeFileSystemFileWriter* proxy) : proxy_(proxy) {}

NativeFileSystemFileWriterAsyncWaiter::~NativeFileSystemFileWriterAsyncWaiter() = default;

void NativeFileSystemFileWriterAsyncWaiter::Write(
    uint64_t offset, mojo::PendingRemote<::blink::mojom::blink::Blob> data, ::blink::mojom::blink::NativeFileSystemErrorPtr* out_result, uint64_t* out_bytes_written) {
  base::RunLoop loop;
  proxy_->Write(std::move(offset),std::move(data),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::blink::NativeFileSystemErrorPtr* out_result
,
             uint64_t* out_bytes_written
,
             ::blink::mojom::blink::NativeFileSystemErrorPtr result,
             uint64_t bytes_written) {*out_result = std::move(result);*out_bytes_written = std::move(bytes_written);
            loop->Quit();
          },
          &loop,
          out_result,
          out_bytes_written));
  loop.Run();
}
void NativeFileSystemFileWriterAsyncWaiter::WriteStream(
    uint64_t offset, mojo::ScopedDataPipeConsumerHandle stream, ::blink::mojom::blink::NativeFileSystemErrorPtr* out_result, uint64_t* out_bytes_written) {
  base::RunLoop loop;
  proxy_->WriteStream(std::move(offset),std::move(stream),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::blink::NativeFileSystemErrorPtr* out_result
,
             uint64_t* out_bytes_written
,
             ::blink::mojom::blink::NativeFileSystemErrorPtr result,
             uint64_t bytes_written) {*out_result = std::move(result);*out_bytes_written = std::move(bytes_written);
            loop->Quit();
          },
          &loop,
          out_result,
          out_bytes_written));
  loop.Run();
}
void NativeFileSystemFileWriterAsyncWaiter::Truncate(
    uint64_t length, ::blink::mojom::blink::NativeFileSystemErrorPtr* out_result) {
  base::RunLoop loop;
  proxy_->Truncate(std::move(length),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::blink::NativeFileSystemErrorPtr* out_result
,
             ::blink::mojom::blink::NativeFileSystemErrorPtr result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void NativeFileSystemFileWriterAsyncWaiter::Close(
    ::blink::mojom::blink::NativeFileSystemErrorPtr* out_result) {
  base::RunLoop loop;
  proxy_->Close(
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::blink::NativeFileSystemErrorPtr* out_result
,
             ::blink::mojom::blink::NativeFileSystemErrorPtr result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif