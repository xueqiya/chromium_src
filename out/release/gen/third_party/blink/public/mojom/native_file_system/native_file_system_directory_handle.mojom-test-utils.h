// third_party/blink/public/mojom/native_file_system/native_file_system_directory_handle.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_FILE_SYSTEM_NATIVE_FILE_SYSTEM_DIRECTORY_HANDLE_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_FILE_SYSTEM_NATIVE_FILE_SYSTEM_DIRECTORY_HANDLE_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/native_file_system/native_file_system_directory_handle.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT NativeFileSystemDirectoryEntriesListenerInterceptorForTesting : public NativeFileSystemDirectoryEntriesListener {
  virtual NativeFileSystemDirectoryEntriesListener* GetForwardingInterface() = 0;
  void DidReadDirectory(::blink::mojom::NativeFileSystemErrorPtr result, std::vector<NativeFileSystemEntryPtr> entries, bool has_more_entries) override;
};
class BLINK_COMMON_EXPORT NativeFileSystemDirectoryEntriesListenerAsyncWaiter {
 public:
  explicit NativeFileSystemDirectoryEntriesListenerAsyncWaiter(NativeFileSystemDirectoryEntriesListener* proxy);
  ~NativeFileSystemDirectoryEntriesListenerAsyncWaiter();

 private:
  NativeFileSystemDirectoryEntriesListener* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(NativeFileSystemDirectoryEntriesListenerAsyncWaiter);
};


class BLINK_COMMON_EXPORT NativeFileSystemDirectoryHandleInterceptorForTesting : public NativeFileSystemDirectoryHandle {
  virtual NativeFileSystemDirectoryHandle* GetForwardingInterface() = 0;
  void GetPermissionStatus(bool writable, GetPermissionStatusCallback callback) override;
  void RequestPermission(bool writable, RequestPermissionCallback callback) override;
  void GetFile(const std::string& basename, bool create, GetFileCallback callback) override;
  void GetDirectory(const std::string& basename, bool create, GetDirectoryCallback callback) override;
  void GetEntries(mojo::PendingRemote<NativeFileSystemDirectoryEntriesListener> listener) override;
  void RemoveEntry(const std::string& basename, bool recurse, RemoveEntryCallback callback) override;
  void Transfer(mojo::PendingReceiver<::blink::mojom::NativeFileSystemTransferToken> token) override;
};
class BLINK_COMMON_EXPORT NativeFileSystemDirectoryHandleAsyncWaiter {
 public:
  explicit NativeFileSystemDirectoryHandleAsyncWaiter(NativeFileSystemDirectoryHandle* proxy);
  ~NativeFileSystemDirectoryHandleAsyncWaiter();
  void GetPermissionStatus(
      bool writable, ::blink::mojom::PermissionStatus* out_status);
  void RequestPermission(
      bool writable, ::blink::mojom::NativeFileSystemErrorPtr* out_result, ::blink::mojom::PermissionStatus* out_status);
  void GetFile(
      const std::string& basename, bool create, ::blink::mojom::NativeFileSystemErrorPtr* out_result, mojo::PendingRemote<::blink::mojom::NativeFileSystemFileHandle>* out_file);
  void GetDirectory(
      const std::string& basename, bool create, ::blink::mojom::NativeFileSystemErrorPtr* out_result, mojo::PendingRemote<NativeFileSystemDirectoryHandle>* out_directory);
  void RemoveEntry(
      const std::string& basename, bool recurse, ::blink::mojom::NativeFileSystemErrorPtr* out_result);

 private:
  NativeFileSystemDirectoryHandle* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(NativeFileSystemDirectoryHandleAsyncWaiter);
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_FILE_SYSTEM_NATIVE_FILE_SYSTEM_DIRECTORY_HANDLE_MOJOM_TEST_UTILS_H_