// third_party/blink/public/mojom/push_messaging/push_messaging.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "third_party/blink/public/mojom/push_messaging/push_messaging.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "third_party/blink/public/mojom/push_messaging/push_messaging_status.mojom.h"
#include "url/mojom/url.mojom.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PUSH_MESSAGING_PUSH_MESSAGING_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PUSH_MESSAGING_PUSH_MESSAGING_MOJOM_JUMBO_H_
#include "url/mojom/url_gurl_mojom_traits.h"
#endif


namespace blink {
namespace mojom {


void PushMessagingInterceptorForTesting::Subscribe(int64_t service_worker_registration_id, PushSubscriptionOptionsPtr options, bool user_gesture, SubscribeCallback callback) {
  GetForwardingInterface()->Subscribe(std::move(service_worker_registration_id), std::move(options), std::move(user_gesture), std::move(callback));
}
void PushMessagingInterceptorForTesting::Unsubscribe(int64_t service_worker_registration_id, UnsubscribeCallback callback) {
  GetForwardingInterface()->Unsubscribe(std::move(service_worker_registration_id), std::move(callback));
}
void PushMessagingInterceptorForTesting::GetSubscription(int64_t service_worker_registration_id, GetSubscriptionCallback callback) {
  GetForwardingInterface()->GetSubscription(std::move(service_worker_registration_id), std::move(callback));
}
PushMessagingAsyncWaiter::PushMessagingAsyncWaiter(
    PushMessaging* proxy) : proxy_(proxy) {}

PushMessagingAsyncWaiter::~PushMessagingAsyncWaiter() = default;

void PushMessagingAsyncWaiter::Subscribe(
    int64_t service_worker_registration_id, PushSubscriptionOptionsPtr options, bool user_gesture, ::blink::mojom::PushRegistrationStatus* out_status, PushSubscriptionPtr* out_subscription) {
  base::RunLoop loop;
  proxy_->Subscribe(std::move(service_worker_registration_id),std::move(options),std::move(user_gesture),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::PushRegistrationStatus* out_status
,
             PushSubscriptionPtr* out_subscription
,
             ::blink::mojom::PushRegistrationStatus status,
             PushSubscriptionPtr subscription) {*out_status = std::move(status);*out_subscription = std::move(subscription);
            loop->Quit();
          },
          &loop,
          out_status,
          out_subscription));
  loop.Run();
}
void PushMessagingAsyncWaiter::Unsubscribe(
    int64_t service_worker_registration_id, PushErrorType* out_error_type, bool* out_did_unsubscribe, base::Optional<std::string>* out_error_message) {
  base::RunLoop loop;
  proxy_->Unsubscribe(std::move(service_worker_registration_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             PushErrorType* out_error_type
,
             bool* out_did_unsubscribe
,
             base::Optional<std::string>* out_error_message
,
             PushErrorType error_type,
             bool did_unsubscribe,
             const base::Optional<std::string>& error_message) {*out_error_type = std::move(error_type);*out_did_unsubscribe = std::move(did_unsubscribe);*out_error_message = std::move(error_message);
            loop->Quit();
          },
          &loop,
          out_error_type,
          out_did_unsubscribe,
          out_error_message));
  loop.Run();
}
void PushMessagingAsyncWaiter::GetSubscription(
    int64_t service_worker_registration_id, ::blink::mojom::PushGetRegistrationStatus* out_status, PushSubscriptionPtr* out_subscription) {
  base::RunLoop loop;
  proxy_->GetSubscription(std::move(service_worker_registration_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::blink::mojom::PushGetRegistrationStatus* out_status
,
             PushSubscriptionPtr* out_subscription
,
             ::blink::mojom::PushGetRegistrationStatus status,
             PushSubscriptionPtr subscription) {*out_status = std::move(status);*out_subscription = std::move(subscription);
            loop->Quit();
          },
          &loop,
          out_status,
          out_subscription));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif