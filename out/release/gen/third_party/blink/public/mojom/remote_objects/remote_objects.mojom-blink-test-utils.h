// third_party/blink/public/mojom/remote_objects/remote_objects.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_REMOTE_OBJECTS_REMOTE_OBJECTS_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_REMOTE_OBJECTS_REMOTE_OBJECTS_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/remote_objects/remote_objects.mojom-blink.h"
#include "third_party/blink/renderer/platform/platform_export.h"


namespace blink {
namespace mojom {
namespace blink {


class PLATFORM_EXPORT RemoteObjectHostInterceptorForTesting : public RemoteObjectHost {
  virtual RemoteObjectHost* GetForwardingInterface() = 0;
  void GetObject(int32_t object_id, mojo::PendingReceiver<RemoteObject> receiver) override;
  void ReleaseObject(int32_t object_id) override;
};
class PLATFORM_EXPORT RemoteObjectHostAsyncWaiter {
 public:
  explicit RemoteObjectHostAsyncWaiter(RemoteObjectHost* proxy);
  ~RemoteObjectHostAsyncWaiter();

 private:
  RemoteObjectHost* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(RemoteObjectHostAsyncWaiter);
};


class PLATFORM_EXPORT RemoteObjectInterceptorForTesting : public RemoteObject {
  virtual RemoteObject* GetForwardingInterface() = 0;
  void HasMethod(const WTF::String& name, HasMethodCallback callback) override;
  void GetMethods(GetMethodsCallback callback) override;
  void InvokeMethod(const WTF::String& name, WTF::Vector<RemoteInvocationArgumentPtr> arguments, InvokeMethodCallback callback) override;
};
class PLATFORM_EXPORT RemoteObjectAsyncWaiter {
 public:
  explicit RemoteObjectAsyncWaiter(RemoteObject* proxy);
  ~RemoteObjectAsyncWaiter();
  void HasMethod(
      const WTF::String& name, bool* out_method_exists);
  void GetMethods(
      WTF::Vector<WTF::String>* out_method_names);
  void InvokeMethod(
      const WTF::String& name, WTF::Vector<RemoteInvocationArgumentPtr> arguments, RemoteInvocationResultPtr* out_result);

 private:
  RemoteObject* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(RemoteObjectAsyncWaiter);
};


class PLATFORM_EXPORT RemoteObjectGatewayFactoryInterceptorForTesting : public RemoteObjectGatewayFactory {
  virtual RemoteObjectGatewayFactory* GetForwardingInterface() = 0;
  void CreateRemoteObjectGateway(mojo::PendingRemote<RemoteObjectHost> host, mojo::PendingReceiver<RemoteObjectGateway> gateway) override;
};
class PLATFORM_EXPORT RemoteObjectGatewayFactoryAsyncWaiter {
 public:
  explicit RemoteObjectGatewayFactoryAsyncWaiter(RemoteObjectGatewayFactory* proxy);
  ~RemoteObjectGatewayFactoryAsyncWaiter();

 private:
  RemoteObjectGatewayFactory* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(RemoteObjectGatewayFactoryAsyncWaiter);
};


class PLATFORM_EXPORT RemoteObjectGatewayInterceptorForTesting : public RemoteObjectGateway {
  virtual RemoteObjectGateway* GetForwardingInterface() = 0;
  void AddNamedObject(const WTF::String& name, int32_t object_id) override;
  void RemoveNamedObject(const WTF::String& name) override;
};
class PLATFORM_EXPORT RemoteObjectGatewayAsyncWaiter {
 public:
  explicit RemoteObjectGatewayAsyncWaiter(RemoteObjectGateway* proxy);
  ~RemoteObjectGatewayAsyncWaiter();

 private:
  RemoteObjectGateway* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(RemoteObjectGatewayAsyncWaiter);
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_REMOTE_OBJECTS_REMOTE_OBJECTS_MOJOM_BLINK_TEST_UTILS_H_