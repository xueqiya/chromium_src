// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: font_unique_name_table.proto

#include "font_unique_name_table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_font_5funique_5fname_5ftable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FontUniqueNameTable_UniqueFont_font_5funique_5fname_5ftable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_font_5funique_5fname_5ftable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FontUniqueNameTable_UniqueNameToFontMapping_font_5funique_5fname_5ftable_2eproto;
namespace blink {
class FontUniqueNameTable_UniqueFontDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FontUniqueNameTable_UniqueFont> _instance;
} _FontUniqueNameTable_UniqueFont_default_instance_;
class FontUniqueNameTable_UniqueNameToFontMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FontUniqueNameTable_UniqueNameToFontMapping> _instance;
} _FontUniqueNameTable_UniqueNameToFontMapping_default_instance_;
class FontUniqueNameTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FontUniqueNameTable> _instance;
} _FontUniqueNameTable_default_instance_;
}  // namespace blink
static void InitDefaultsscc_info_FontUniqueNameTable_font_5funique_5fname_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blink::_FontUniqueNameTable_default_instance_;
    new (ptr) ::blink::FontUniqueNameTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blink::FontUniqueNameTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FontUniqueNameTable_font_5funique_5fname_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FontUniqueNameTable_font_5funique_5fname_5ftable_2eproto}, {
      &scc_info_FontUniqueNameTable_UniqueFont_font_5funique_5fname_5ftable_2eproto.base,
      &scc_info_FontUniqueNameTable_UniqueNameToFontMapping_font_5funique_5fname_5ftable_2eproto.base,}};

static void InitDefaultsscc_info_FontUniqueNameTable_UniqueFont_font_5funique_5fname_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blink::_FontUniqueNameTable_UniqueFont_default_instance_;
    new (ptr) ::blink::FontUniqueNameTable_UniqueFont();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blink::FontUniqueNameTable_UniqueFont::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FontUniqueNameTable_UniqueFont_font_5funique_5fname_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FontUniqueNameTable_UniqueFont_font_5funique_5fname_5ftable_2eproto}, {}};

static void InitDefaultsscc_info_FontUniqueNameTable_UniqueNameToFontMapping_font_5funique_5fname_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::blink::_FontUniqueNameTable_UniqueNameToFontMapping_default_instance_;
    new (ptr) ::blink::FontUniqueNameTable_UniqueNameToFontMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::blink::FontUniqueNameTable_UniqueNameToFontMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FontUniqueNameTable_UniqueNameToFontMapping_font_5funique_5fname_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FontUniqueNameTable_UniqueNameToFontMapping_font_5funique_5fname_5ftable_2eproto}, {}};

namespace blink {

// ===================================================================

void FontUniqueNameTable_UniqueFont::InitAsDefaultInstance() {
}
class FontUniqueNameTable_UniqueFont::_Internal {
 public:
  using HasBits = decltype(std::declval<FontUniqueNameTable_UniqueFont>()._has_bits_);
  static void set_has_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ttc_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FontUniqueNameTable_UniqueFont::FontUniqueNameTable_UniqueFont()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blink.FontUniqueNameTable.UniqueFont)
}
FontUniqueNameTable_UniqueFont::FontUniqueNameTable_UniqueFont(const FontUniqueNameTable_UniqueFont& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_path()) {
    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  ttc_index_ = from.ttc_index_;
  // @@protoc_insertion_point(copy_constructor:blink.FontUniqueNameTable.UniqueFont)
}

void FontUniqueNameTable_UniqueFont::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FontUniqueNameTable_UniqueFont_font_5funique_5fname_5ftable_2eproto.base);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ttc_index_ = 0u;
}

FontUniqueNameTable_UniqueFont::~FontUniqueNameTable_UniqueFont() {
  // @@protoc_insertion_point(destructor:blink.FontUniqueNameTable.UniqueFont)
  SharedDtor();
}

void FontUniqueNameTable_UniqueFont::SharedDtor() {
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FontUniqueNameTable_UniqueFont::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FontUniqueNameTable_UniqueFont& FontUniqueNameTable_UniqueFont::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FontUniqueNameTable_UniqueFont_font_5funique_5fname_5ftable_2eproto.base);
  return *internal_default_instance();
}


void FontUniqueNameTable_UniqueFont::Clear() {
// @@protoc_insertion_point(message_clear_start:blink.FontUniqueNameTable.UniqueFont)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_path_.ClearNonDefaultToEmptyNoArena();
  }
  ttc_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FontUniqueNameTable_UniqueFont::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string file_path = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_file_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 ttc_index = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_ttc_index(&has_bits);
          ttc_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FontUniqueNameTable_UniqueFont::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:blink.FontUniqueNameTable.UniqueFont)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_path = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ttc_index = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_ttc_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttc_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blink.FontUniqueNameTable.UniqueFont)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blink.FontUniqueNameTable.UniqueFont)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FontUniqueNameTable_UniqueFont::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blink.FontUniqueNameTable.UniqueFont)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_path = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->file_path(), output);
  }

  // required uint32 ttc_index = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(20, this->ttc_index(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:blink.FontUniqueNameTable.UniqueFont)
}

size_t FontUniqueNameTable_UniqueFont::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:blink.FontUniqueNameTable.UniqueFont)
  size_t total_size = 0;

  if (has_file_path()) {
    // required string file_path = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  if (has_ttc_index()) {
    // required uint32 ttc_index = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ttc_index());
  }

  return total_size;
}
size_t FontUniqueNameTable_UniqueFont::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blink.FontUniqueNameTable.UniqueFont)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string file_path = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_path());

    // required uint32 ttc_index = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ttc_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FontUniqueNameTable_UniqueFont::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FontUniqueNameTable_UniqueFont*>(
      &from));
}

void FontUniqueNameTable_UniqueFont::MergeFrom(const FontUniqueNameTable_UniqueFont& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blink.FontUniqueNameTable.UniqueFont)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      ttc_index_ = from.ttc_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FontUniqueNameTable_UniqueFont::CopyFrom(const FontUniqueNameTable_UniqueFont& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blink.FontUniqueNameTable.UniqueFont)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontUniqueNameTable_UniqueFont::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FontUniqueNameTable_UniqueFont::InternalSwap(FontUniqueNameTable_UniqueFont* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ttc_index_, other->ttc_index_);
}

std::string FontUniqueNameTable_UniqueFont::GetTypeName() const {
  return "blink.FontUniqueNameTable.UniqueFont";
}


// ===================================================================

void FontUniqueNameTable_UniqueNameToFontMapping::InitAsDefaultInstance() {
}
class FontUniqueNameTable_UniqueNameToFontMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<FontUniqueNameTable_UniqueNameToFontMapping>()._has_bits_);
  static void set_has_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_font_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FontUniqueNameTable_UniqueNameToFontMapping::FontUniqueNameTable_UniqueNameToFontMapping()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blink.FontUniqueNameTable.UniqueNameToFontMapping)
}
FontUniqueNameTable_UniqueNameToFontMapping::FontUniqueNameTable_UniqueNameToFontMapping(const FontUniqueNameTable_UniqueNameToFontMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_font_name()) {
    font_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.font_name_);
  }
  font_index_ = from.font_index_;
  // @@protoc_insertion_point(copy_constructor:blink.FontUniqueNameTable.UniqueNameToFontMapping)
}

void FontUniqueNameTable_UniqueNameToFontMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FontUniqueNameTable_UniqueNameToFontMapping_font_5funique_5fname_5ftable_2eproto.base);
  font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  font_index_ = 0u;
}

FontUniqueNameTable_UniqueNameToFontMapping::~FontUniqueNameTable_UniqueNameToFontMapping() {
  // @@protoc_insertion_point(destructor:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  SharedDtor();
}

void FontUniqueNameTable_UniqueNameToFontMapping::SharedDtor() {
  font_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FontUniqueNameTable_UniqueNameToFontMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FontUniqueNameTable_UniqueNameToFontMapping& FontUniqueNameTable_UniqueNameToFontMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FontUniqueNameTable_UniqueNameToFontMapping_font_5funique_5fname_5ftable_2eproto.base);
  return *internal_default_instance();
}


void FontUniqueNameTable_UniqueNameToFontMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    font_name_.ClearNonDefaultToEmptyNoArena();
  }
  font_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FontUniqueNameTable_UniqueNameToFontMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string font_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_font_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 font_index = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_font_index(&has_bits);
          font_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FontUniqueNameTable_UniqueNameToFontMapping::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string font_name = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 font_index = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_font_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &font_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FontUniqueNameTable_UniqueNameToFontMapping::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string font_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->font_name(), output);
  }

  // required uint32 font_index = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(20, this->font_index(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:blink.FontUniqueNameTable.UniqueNameToFontMapping)
}

size_t FontUniqueNameTable_UniqueNameToFontMapping::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  size_t total_size = 0;

  if (has_font_name()) {
    // required string font_name = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->font_name());
  }

  if (has_font_index()) {
    // required uint32 font_index = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->font_index());
  }

  return total_size;
}
size_t FontUniqueNameTable_UniqueNameToFontMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string font_name = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->font_name());

    // required uint32 font_index = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->font_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FontUniqueNameTable_UniqueNameToFontMapping::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FontUniqueNameTable_UniqueNameToFontMapping*>(
      &from));
}

void FontUniqueNameTable_UniqueNameToFontMapping::MergeFrom(const FontUniqueNameTable_UniqueNameToFontMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      font_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.font_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      font_index_ = from.font_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FontUniqueNameTable_UniqueNameToFontMapping::CopyFrom(const FontUniqueNameTable_UniqueNameToFontMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blink.FontUniqueNameTable.UniqueNameToFontMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontUniqueNameTable_UniqueNameToFontMapping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FontUniqueNameTable_UniqueNameToFontMapping::InternalSwap(FontUniqueNameTable_UniqueNameToFontMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  font_name_.Swap(&other->font_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(font_index_, other->font_index_);
}

std::string FontUniqueNameTable_UniqueNameToFontMapping::GetTypeName() const {
  return "blink.FontUniqueNameTable.UniqueNameToFontMapping";
}


// ===================================================================

void FontUniqueNameTable::InitAsDefaultInstance() {
}
class FontUniqueNameTable::_Internal {
 public:
  using HasBits = decltype(std::declval<FontUniqueNameTable>()._has_bits_);
  static void set_has_stored_for_platform_version_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FontUniqueNameTable::FontUniqueNameTable()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:blink.FontUniqueNameTable)
}
FontUniqueNameTable::FontUniqueNameTable(const FontUniqueNameTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      fonts_(from.fonts_),
      name_map_(from.name_map_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stored_for_platform_version_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_stored_for_platform_version_identifier()) {
    stored_for_platform_version_identifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stored_for_platform_version_identifier_);
  }
  // @@protoc_insertion_point(copy_constructor:blink.FontUniqueNameTable)
}

void FontUniqueNameTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FontUniqueNameTable_font_5funique_5fname_5ftable_2eproto.base);
  stored_for_platform_version_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FontUniqueNameTable::~FontUniqueNameTable() {
  // @@protoc_insertion_point(destructor:blink.FontUniqueNameTable)
  SharedDtor();
}

void FontUniqueNameTable::SharedDtor() {
  stored_for_platform_version_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FontUniqueNameTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FontUniqueNameTable& FontUniqueNameTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FontUniqueNameTable_font_5funique_5fname_5ftable_2eproto.base);
  return *internal_default_instance();
}


void FontUniqueNameTable::Clear() {
// @@protoc_insertion_point(message_clear_start:blink.FontUniqueNameTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fonts_.Clear();
  name_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stored_for_platform_version_identifier_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FontUniqueNameTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string stored_for_platform_version_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_stored_for_platform_version_identifier(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_fonts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_name_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FontUniqueNameTable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:blink.FontUniqueNameTable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stored_for_platform_version_identifier = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_stored_for_platform_version_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_fonts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_name_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:blink.FontUniqueNameTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:blink.FontUniqueNameTable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FontUniqueNameTable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:blink.FontUniqueNameTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string stored_for_platform_version_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stored_for_platform_version_identifier(), output);
  }

  // repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fonts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->fonts(static_cast<int>(i)),
      output);
  }

  // repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->name_map_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20,
      this->name_map(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:blink.FontUniqueNameTable)
}

size_t FontUniqueNameTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blink.FontUniqueNameTable)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string stored_for_platform_version_identifier = 1;
  if (has_stored_for_platform_version_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->stored_for_platform_version_identifier());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->fonts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->fonts(static_cast<int>(i)));
    }
  }

  // repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->name_map_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->name_map(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FontUniqueNameTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FontUniqueNameTable*>(
      &from));
}

void FontUniqueNameTable::MergeFrom(const FontUniqueNameTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blink.FontUniqueNameTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fonts_.MergeFrom(from.fonts_);
  name_map_.MergeFrom(from.name_map_);
  if (from.has_stored_for_platform_version_identifier()) {
    _has_bits_[0] |= 0x00000001u;
    stored_for_platform_version_identifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stored_for_platform_version_identifier_);
  }
}

void FontUniqueNameTable::CopyFrom(const FontUniqueNameTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blink.FontUniqueNameTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontUniqueNameTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->fonts())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->name_map())) return false;
  return true;
}

void FontUniqueNameTable::InternalSwap(FontUniqueNameTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&fonts_)->InternalSwap(CastToBase(&other->fonts_));
  CastToBase(&name_map_)->InternalSwap(CastToBase(&other->name_map_));
  stored_for_platform_version_identifier_.Swap(&other->stored_for_platform_version_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string FontUniqueNameTable::GetTypeName() const {
  return "blink.FontUniqueNameTable";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace blink
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blink::FontUniqueNameTable_UniqueFont* Arena::CreateMaybeMessage< ::blink::FontUniqueNameTable_UniqueFont >(Arena* arena) {
  return Arena::CreateInternal< ::blink::FontUniqueNameTable_UniqueFont >(arena);
}
template<> PROTOBUF_NOINLINE ::blink::FontUniqueNameTable_UniqueNameToFontMapping* Arena::CreateMaybeMessage< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >(Arena* arena) {
  return Arena::CreateInternal< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::blink::FontUniqueNameTable* Arena::CreateMaybeMessage< ::blink::FontUniqueNameTable >(Arena* arena) {
  return Arena::CreateInternal< ::blink::FontUniqueNameTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
