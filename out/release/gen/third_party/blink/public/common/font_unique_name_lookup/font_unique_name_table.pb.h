// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: font_unique_name_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_font_5funique_5fname_5ftable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_font_5funique_5fname_5ftable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_font_5funique_5fname_5ftable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_font_5funique_5fname_5ftable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace blink {
class FontUniqueNameTable;
class FontUniqueNameTableDefaultTypeInternal;
extern FontUniqueNameTableDefaultTypeInternal _FontUniqueNameTable_default_instance_;
class FontUniqueNameTable_UniqueFont;
class FontUniqueNameTable_UniqueFontDefaultTypeInternal;
extern FontUniqueNameTable_UniqueFontDefaultTypeInternal _FontUniqueNameTable_UniqueFont_default_instance_;
class FontUniqueNameTable_UniqueNameToFontMapping;
class FontUniqueNameTable_UniqueNameToFontMappingDefaultTypeInternal;
extern FontUniqueNameTable_UniqueNameToFontMappingDefaultTypeInternal _FontUniqueNameTable_UniqueNameToFontMapping_default_instance_;
}  // namespace blink
PROTOBUF_NAMESPACE_OPEN
template<> ::blink::FontUniqueNameTable* Arena::CreateMaybeMessage<::blink::FontUniqueNameTable>(Arena*);
template<> ::blink::FontUniqueNameTable_UniqueFont* Arena::CreateMaybeMessage<::blink::FontUniqueNameTable_UniqueFont>(Arena*);
template<> ::blink::FontUniqueNameTable_UniqueNameToFontMapping* Arena::CreateMaybeMessage<::blink::FontUniqueNameTable_UniqueNameToFontMapping>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blink {

// ===================================================================

class FontUniqueNameTable_UniqueFont :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:blink.FontUniqueNameTable.UniqueFont) */ {
 public:
  FontUniqueNameTable_UniqueFont();
  virtual ~FontUniqueNameTable_UniqueFont();

  FontUniqueNameTable_UniqueFont(const FontUniqueNameTable_UniqueFont& from);
  FontUniqueNameTable_UniqueFont(FontUniqueNameTable_UniqueFont&& from) noexcept
    : FontUniqueNameTable_UniqueFont() {
    *this = ::std::move(from);
  }

  inline FontUniqueNameTable_UniqueFont& operator=(const FontUniqueNameTable_UniqueFont& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontUniqueNameTable_UniqueFont& operator=(FontUniqueNameTable_UniqueFont&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FontUniqueNameTable_UniqueFont& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FontUniqueNameTable_UniqueFont* internal_default_instance() {
    return reinterpret_cast<const FontUniqueNameTable_UniqueFont*>(
               &_FontUniqueNameTable_UniqueFont_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FontUniqueNameTable_UniqueFont& a, FontUniqueNameTable_UniqueFont& b) {
    a.Swap(&b);
  }
  inline void Swap(FontUniqueNameTable_UniqueFont* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FontUniqueNameTable_UniqueFont* New() const final {
    return CreateMaybeMessage<FontUniqueNameTable_UniqueFont>(nullptr);
  }

  FontUniqueNameTable_UniqueFont* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FontUniqueNameTable_UniqueFont>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FontUniqueNameTable_UniqueFont& from);
  void MergeFrom(const FontUniqueNameTable_UniqueFont& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FontUniqueNameTable_UniqueFont* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blink.FontUniqueNameTable.UniqueFont";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 10,
    kTtcIndexFieldNumber = 20,
  };
  // required string file_path = 10;
  bool has_file_path() const;
  void clear_file_path();
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);

  // required uint32 ttc_index = 20;
  bool has_ttc_index() const;
  void clear_ttc_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 ttc_index() const;
  void set_ttc_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:blink.FontUniqueNameTable.UniqueFont)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ttc_index_;
  friend struct ::TableStruct_font_5funique_5fname_5ftable_2eproto;
};
// -------------------------------------------------------------------

class FontUniqueNameTable_UniqueNameToFontMapping :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:blink.FontUniqueNameTable.UniqueNameToFontMapping) */ {
 public:
  FontUniqueNameTable_UniqueNameToFontMapping();
  virtual ~FontUniqueNameTable_UniqueNameToFontMapping();

  FontUniqueNameTable_UniqueNameToFontMapping(const FontUniqueNameTable_UniqueNameToFontMapping& from);
  FontUniqueNameTable_UniqueNameToFontMapping(FontUniqueNameTable_UniqueNameToFontMapping&& from) noexcept
    : FontUniqueNameTable_UniqueNameToFontMapping() {
    *this = ::std::move(from);
  }

  inline FontUniqueNameTable_UniqueNameToFontMapping& operator=(const FontUniqueNameTable_UniqueNameToFontMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontUniqueNameTable_UniqueNameToFontMapping& operator=(FontUniqueNameTable_UniqueNameToFontMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FontUniqueNameTable_UniqueNameToFontMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FontUniqueNameTable_UniqueNameToFontMapping* internal_default_instance() {
    return reinterpret_cast<const FontUniqueNameTable_UniqueNameToFontMapping*>(
               &_FontUniqueNameTable_UniqueNameToFontMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FontUniqueNameTable_UniqueNameToFontMapping& a, FontUniqueNameTable_UniqueNameToFontMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(FontUniqueNameTable_UniqueNameToFontMapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FontUniqueNameTable_UniqueNameToFontMapping* New() const final {
    return CreateMaybeMessage<FontUniqueNameTable_UniqueNameToFontMapping>(nullptr);
  }

  FontUniqueNameTable_UniqueNameToFontMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FontUniqueNameTable_UniqueNameToFontMapping>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FontUniqueNameTable_UniqueNameToFontMapping& from);
  void MergeFrom(const FontUniqueNameTable_UniqueNameToFontMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FontUniqueNameTable_UniqueNameToFontMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blink.FontUniqueNameTable.UniqueNameToFontMapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFontNameFieldNumber = 10,
    kFontIndexFieldNumber = 20,
  };
  // required string font_name = 10;
  bool has_font_name() const;
  void clear_font_name();
  const std::string& font_name() const;
  void set_font_name(const std::string& value);
  void set_font_name(std::string&& value);
  void set_font_name(const char* value);
  void set_font_name(const char* value, size_t size);
  std::string* mutable_font_name();
  std::string* release_font_name();
  void set_allocated_font_name(std::string* font_name);

  // required uint32 font_index = 20;
  bool has_font_index() const;
  void clear_font_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 font_index() const;
  void set_font_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:blink.FontUniqueNameTable.UniqueNameToFontMapping)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 font_index_;
  friend struct ::TableStruct_font_5funique_5fname_5ftable_2eproto;
};
// -------------------------------------------------------------------

class FontUniqueNameTable :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:blink.FontUniqueNameTable) */ {
 public:
  FontUniqueNameTable();
  virtual ~FontUniqueNameTable();

  FontUniqueNameTable(const FontUniqueNameTable& from);
  FontUniqueNameTable(FontUniqueNameTable&& from) noexcept
    : FontUniqueNameTable() {
    *this = ::std::move(from);
  }

  inline FontUniqueNameTable& operator=(const FontUniqueNameTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontUniqueNameTable& operator=(FontUniqueNameTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FontUniqueNameTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FontUniqueNameTable* internal_default_instance() {
    return reinterpret_cast<const FontUniqueNameTable*>(
               &_FontUniqueNameTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FontUniqueNameTable& a, FontUniqueNameTable& b) {
    a.Swap(&b);
  }
  inline void Swap(FontUniqueNameTable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FontUniqueNameTable* New() const final {
    return CreateMaybeMessage<FontUniqueNameTable>(nullptr);
  }

  FontUniqueNameTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FontUniqueNameTable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FontUniqueNameTable& from);
  void MergeFrom(const FontUniqueNameTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FontUniqueNameTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blink.FontUniqueNameTable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FontUniqueNameTable_UniqueFont UniqueFont;
  typedef FontUniqueNameTable_UniqueNameToFontMapping UniqueNameToFontMapping;

  // accessors -------------------------------------------------------

  enum : int {
    kFontsFieldNumber = 10,
    kNameMapFieldNumber = 20,
    kStoredForPlatformVersionIdentifierFieldNumber = 1,
  };
  // repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
  int fonts_size() const;
  void clear_fonts();
  ::blink::FontUniqueNameTable_UniqueFont* mutable_fonts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueFont >*
      mutable_fonts();
  const ::blink::FontUniqueNameTable_UniqueFont& fonts(int index) const;
  ::blink::FontUniqueNameTable_UniqueFont* add_fonts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueFont >&
      fonts() const;

  // repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
  int name_map_size() const;
  void clear_name_map();
  ::blink::FontUniqueNameTable_UniqueNameToFontMapping* mutable_name_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >*
      mutable_name_map();
  const ::blink::FontUniqueNameTable_UniqueNameToFontMapping& name_map(int index) const;
  ::blink::FontUniqueNameTable_UniqueNameToFontMapping* add_name_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >&
      name_map() const;

  // required string stored_for_platform_version_identifier = 1;
  bool has_stored_for_platform_version_identifier() const;
  void clear_stored_for_platform_version_identifier();
  const std::string& stored_for_platform_version_identifier() const;
  void set_stored_for_platform_version_identifier(const std::string& value);
  void set_stored_for_platform_version_identifier(std::string&& value);
  void set_stored_for_platform_version_identifier(const char* value);
  void set_stored_for_platform_version_identifier(const char* value, size_t size);
  std::string* mutable_stored_for_platform_version_identifier();
  std::string* release_stored_for_platform_version_identifier();
  void set_allocated_stored_for_platform_version_identifier(std::string* stored_for_platform_version_identifier);

  // @@protoc_insertion_point(class_scope:blink.FontUniqueNameTable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueFont > fonts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueNameToFontMapping > name_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stored_for_platform_version_identifier_;
  friend struct ::TableStruct_font_5funique_5fname_5ftable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FontUniqueNameTable_UniqueFont

// required string file_path = 10;
inline bool FontUniqueNameTable_UniqueFont::has_file_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FontUniqueNameTable_UniqueFont::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FontUniqueNameTable_UniqueFont::file_path() const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.UniqueFont.file_path)
  return file_path_.GetNoArena();
}
inline void FontUniqueNameTable_UniqueFont::set_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blink.FontUniqueNameTable.UniqueFont.file_path)
}
inline void FontUniqueNameTable_UniqueFont::set_file_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blink.FontUniqueNameTable.UniqueFont.file_path)
}
inline void FontUniqueNameTable_UniqueFont::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blink.FontUniqueNameTable.UniqueFont.file_path)
}
inline void FontUniqueNameTable_UniqueFont::set_file_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blink.FontUniqueNameTable.UniqueFont.file_path)
}
inline std::string* FontUniqueNameTable_UniqueFont::mutable_file_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:blink.FontUniqueNameTable.UniqueFont.file_path)
  return file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FontUniqueNameTable_UniqueFont::release_file_path() {
  // @@protoc_insertion_point(field_release:blink.FontUniqueNameTable.UniqueFont.file_path)
  if (!has_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FontUniqueNameTable_UniqueFont::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:blink.FontUniqueNameTable.UniqueFont.file_path)
}

// required uint32 ttc_index = 20;
inline bool FontUniqueNameTable_UniqueFont::has_ttc_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FontUniqueNameTable_UniqueFont::clear_ttc_index() {
  ttc_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FontUniqueNameTable_UniqueFont::ttc_index() const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.UniqueFont.ttc_index)
  return ttc_index_;
}
inline void FontUniqueNameTable_UniqueFont::set_ttc_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ttc_index_ = value;
  // @@protoc_insertion_point(field_set:blink.FontUniqueNameTable.UniqueFont.ttc_index)
}

// -------------------------------------------------------------------

// FontUniqueNameTable_UniqueNameToFontMapping

// required string font_name = 10;
inline bool FontUniqueNameTable_UniqueNameToFontMapping::has_font_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::clear_font_name() {
  font_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FontUniqueNameTable_UniqueNameToFontMapping::font_name() const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
  return font_name_.GetNoArena();
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::set_font_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  font_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::set_font_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  font_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::set_font_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  font_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::set_font_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  font_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
}
inline std::string* FontUniqueNameTable_UniqueNameToFontMapping::mutable_font_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
  return font_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FontUniqueNameTable_UniqueNameToFontMapping::release_font_name() {
  // @@protoc_insertion_point(field_release:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
  if (!has_font_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return font_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::set_allocated_font_name(std::string* font_name) {
  if (font_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  font_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), font_name);
  // @@protoc_insertion_point(field_set_allocated:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
}

// required uint32 font_index = 20;
inline bool FontUniqueNameTable_UniqueNameToFontMapping::has_font_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::clear_font_index() {
  font_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FontUniqueNameTable_UniqueNameToFontMapping::font_index() const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_index)
  return font_index_;
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::set_font_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  font_index_ = value;
  // @@protoc_insertion_point(field_set:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_index)
}

// -------------------------------------------------------------------

// FontUniqueNameTable

// required string stored_for_platform_version_identifier = 1;
inline bool FontUniqueNameTable::has_stored_for_platform_version_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FontUniqueNameTable::clear_stored_for_platform_version_identifier() {
  stored_for_platform_version_identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FontUniqueNameTable::stored_for_platform_version_identifier() const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
  return stored_for_platform_version_identifier_.GetNoArena();
}
inline void FontUniqueNameTable::set_stored_for_platform_version_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stored_for_platform_version_identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
}
inline void FontUniqueNameTable::set_stored_for_platform_version_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stored_for_platform_version_identifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
}
inline void FontUniqueNameTable::set_stored_for_platform_version_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stored_for_platform_version_identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
}
inline void FontUniqueNameTable::set_stored_for_platform_version_identifier(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stored_for_platform_version_identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
}
inline std::string* FontUniqueNameTable::mutable_stored_for_platform_version_identifier() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
  return stored_for_platform_version_identifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FontUniqueNameTable::release_stored_for_platform_version_identifier() {
  // @@protoc_insertion_point(field_release:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
  if (!has_stored_for_platform_version_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stored_for_platform_version_identifier_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FontUniqueNameTable::set_allocated_stored_for_platform_version_identifier(std::string* stored_for_platform_version_identifier) {
  if (stored_for_platform_version_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stored_for_platform_version_identifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stored_for_platform_version_identifier);
  // @@protoc_insertion_point(field_set_allocated:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
}

// repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
inline int FontUniqueNameTable::fonts_size() const {
  return fonts_.size();
}
inline void FontUniqueNameTable::clear_fonts() {
  fonts_.Clear();
}
inline ::blink::FontUniqueNameTable_UniqueFont* FontUniqueNameTable::mutable_fonts(int index) {
  // @@protoc_insertion_point(field_mutable:blink.FontUniqueNameTable.fonts)
  return fonts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueFont >*
FontUniqueNameTable::mutable_fonts() {
  // @@protoc_insertion_point(field_mutable_list:blink.FontUniqueNameTable.fonts)
  return &fonts_;
}
inline const ::blink::FontUniqueNameTable_UniqueFont& FontUniqueNameTable::fonts(int index) const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.fonts)
  return fonts_.Get(index);
}
inline ::blink::FontUniqueNameTable_UniqueFont* FontUniqueNameTable::add_fonts() {
  // @@protoc_insertion_point(field_add:blink.FontUniqueNameTable.fonts)
  return fonts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueFont >&
FontUniqueNameTable::fonts() const {
  // @@protoc_insertion_point(field_list:blink.FontUniqueNameTable.fonts)
  return fonts_;
}

// repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
inline int FontUniqueNameTable::name_map_size() const {
  return name_map_.size();
}
inline void FontUniqueNameTable::clear_name_map() {
  name_map_.Clear();
}
inline ::blink::FontUniqueNameTable_UniqueNameToFontMapping* FontUniqueNameTable::mutable_name_map(int index) {
  // @@protoc_insertion_point(field_mutable:blink.FontUniqueNameTable.name_map)
  return name_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >*
FontUniqueNameTable::mutable_name_map() {
  // @@protoc_insertion_point(field_mutable_list:blink.FontUniqueNameTable.name_map)
  return &name_map_;
}
inline const ::blink::FontUniqueNameTable_UniqueNameToFontMapping& FontUniqueNameTable::name_map(int index) const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.name_map)
  return name_map_.Get(index);
}
inline ::blink::FontUniqueNameTable_UniqueNameToFontMapping* FontUniqueNameTable::add_name_map() {
  // @@protoc_insertion_point(field_add:blink.FontUniqueNameTable.name_map)
  return name_map_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >&
FontUniqueNameTable::name_map() const {
  // @@protoc_insertion_point(field_list:blink.FontUniqueNameTable.name_map)
  return name_map_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blink

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_font_5funique_5fname_5ftable_2eproto
