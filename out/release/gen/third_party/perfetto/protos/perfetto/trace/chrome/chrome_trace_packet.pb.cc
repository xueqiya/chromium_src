// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_trace_packet.proto

#include "protos/perfetto/trace/chrome/chrome_trace_packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ChromeEventBundle_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClockSnapshot_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2finterned_5fdata_2finterned_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_InternedData_protos_2fperfetto_2ftrace_2finterned_5fdata_2finterned_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfiledFrameSymbols_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThreadDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_TraceConfig_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_TrackEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
namespace perfetto {
namespace protos {
class ChromeTracePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeTracePacket> _instance;
} _ChromeTracePacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_ChromeTracePacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeTracePacket_default_instance_;
    new (ptr) ::perfetto::protos::ChromeTracePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ChromeTracePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_ChromeTracePacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsscc_info_ChromeTracePacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto}, {
      &scc_info_ChromeEventBundle_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto.base,
      &scc_info_ClockSnapshot_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto.base,
      &scc_info_TrackEvent_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto.base,
      &scc_info_ProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto.base,
      &scc_info_ThreadDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto.base,
      &scc_info_StreamingProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,
      &scc_info_ProfiledFrameSymbols_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto.base,
      &scc_info_TraceConfig_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto.base,
      &scc_info_TraceStats_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto.base,
      &scc_info_InternedData_protos_2fperfetto_2ftrace_2finterned_5fdata_2finterned_5fdata_2eproto.base,}};

namespace perfetto {
namespace protos {

// ===================================================================

void ChromeTracePacket::InitAsDefaultInstance() {
  ::perfetto::protos::_ChromeTracePacket_default_instance_._instance.get_mutable()->chrome_events_ = const_cast< ::perfetto::protos::ChromeEventBundle*>(
      ::perfetto::protos::ChromeEventBundle::internal_default_instance());
  ::perfetto::protos::_ChromeTracePacket_default_instance_._instance.get_mutable()->clock_snapshot_ = const_cast< ::perfetto::protos::ClockSnapshot*>(
      ::perfetto::protos::ClockSnapshot::internal_default_instance());
  ::perfetto::protos::_ChromeTracePacket_default_instance_._instance.get_mutable()->track_event_ = const_cast< ::perfetto::protos::TrackEvent*>(
      ::perfetto::protos::TrackEvent::internal_default_instance());
  ::perfetto::protos::_ChromeTracePacket_default_instance_._instance.get_mutable()->process_descriptor_ = const_cast< ::perfetto::protos::ProcessDescriptor*>(
      ::perfetto::protos::ProcessDescriptor::internal_default_instance());
  ::perfetto::protos::_ChromeTracePacket_default_instance_._instance.get_mutable()->thread_descriptor_ = const_cast< ::perfetto::protos::ThreadDescriptor*>(
      ::perfetto::protos::ThreadDescriptor::internal_default_instance());
  ::perfetto::protos::_ChromeTracePacket_default_instance_._instance.get_mutable()->streaming_profile_packet_ = const_cast< ::perfetto::protos::StreamingProfilePacket*>(
      ::perfetto::protos::StreamingProfilePacket::internal_default_instance());
  ::perfetto::protos::_ChromeTracePacket_default_instance_._instance.get_mutable()->profiled_frame_symbols_ = const_cast< ::perfetto::protos::ProfiledFrameSymbols*>(
      ::perfetto::protos::ProfiledFrameSymbols::internal_default_instance());
  ::perfetto::protos::_ChromeTracePacket_default_instance_._instance.get_mutable()->trace_config_ = const_cast< ::perfetto::protos::TraceConfig*>(
      ::perfetto::protos::TraceConfig::internal_default_instance());
  ::perfetto::protos::_ChromeTracePacket_default_instance_._instance.get_mutable()->trace_stats_ = const_cast< ::perfetto::protos::TraceStats*>(
      ::perfetto::protos::TraceStats::internal_default_instance());
  ::perfetto::protos::_ChromeTracePacket_default_instance_._instance.get_mutable()->interned_data_ = const_cast< ::perfetto::protos::InternedData*>(
      ::perfetto::protos::InternedData::internal_default_instance());
}
class ChromeTracePacket::_Internal {
 public:
  static const ::perfetto::protos::ChromeEventBundle& chrome_events(const ChromeTracePacket* msg);
  static const ::perfetto::protos::ClockSnapshot& clock_snapshot(const ChromeTracePacket* msg);
  static const ::perfetto::protos::TrackEvent& track_event(const ChromeTracePacket* msg);
  static const ::perfetto::protos::ProcessDescriptor& process_descriptor(const ChromeTracePacket* msg);
  static const ::perfetto::protos::ThreadDescriptor& thread_descriptor(const ChromeTracePacket* msg);
  static const ::perfetto::protos::StreamingProfilePacket& streaming_profile_packet(const ChromeTracePacket* msg);
  static const ::perfetto::protos::ProfiledFrameSymbols& profiled_frame_symbols(const ChromeTracePacket* msg);
  static const ::perfetto::protos::TraceConfig& trace_config(const ChromeTracePacket* msg);
  static const ::perfetto::protos::TraceStats& trace_stats(const ChromeTracePacket* msg);
  static const ::perfetto::protos::InternedData& interned_data(const ChromeTracePacket* msg);
};

const ::perfetto::protos::ChromeEventBundle&
ChromeTracePacket::_Internal::chrome_events(const ChromeTracePacket* msg) {
  return *msg->chrome_events_;
}
const ::perfetto::protos::ClockSnapshot&
ChromeTracePacket::_Internal::clock_snapshot(const ChromeTracePacket* msg) {
  return *msg->clock_snapshot_;
}
const ::perfetto::protos::TrackEvent&
ChromeTracePacket::_Internal::track_event(const ChromeTracePacket* msg) {
  return *msg->track_event_;
}
const ::perfetto::protos::ProcessDescriptor&
ChromeTracePacket::_Internal::process_descriptor(const ChromeTracePacket* msg) {
  return *msg->process_descriptor_;
}
const ::perfetto::protos::ThreadDescriptor&
ChromeTracePacket::_Internal::thread_descriptor(const ChromeTracePacket* msg) {
  return *msg->thread_descriptor_;
}
const ::perfetto::protos::StreamingProfilePacket&
ChromeTracePacket::_Internal::streaming_profile_packet(const ChromeTracePacket* msg) {
  return *msg->streaming_profile_packet_;
}
const ::perfetto::protos::ProfiledFrameSymbols&
ChromeTracePacket::_Internal::profiled_frame_symbols(const ChromeTracePacket* msg) {
  return *msg->profiled_frame_symbols_;
}
const ::perfetto::protos::TraceConfig&
ChromeTracePacket::_Internal::trace_config(const ChromeTracePacket* msg) {
  return *msg->trace_config_;
}
const ::perfetto::protos::TraceStats&
ChromeTracePacket::_Internal::trace_stats(const ChromeTracePacket* msg) {
  return *msg->trace_stats_;
}
const ::perfetto::protos::InternedData&
ChromeTracePacket::_Internal::interned_data(const ChromeTracePacket* msg) {
  return *msg->interned_data_;
}
void ChromeTracePacket::clear_chrome_events() {
  if (GetArenaNoVirtual() == nullptr && chrome_events_ != nullptr) {
    delete chrome_events_;
  }
  chrome_events_ = nullptr;
}
void ChromeTracePacket::clear_clock_snapshot() {
  if (GetArenaNoVirtual() == nullptr && clock_snapshot_ != nullptr) {
    delete clock_snapshot_;
  }
  clock_snapshot_ = nullptr;
}
void ChromeTracePacket::clear_track_event() {
  if (GetArenaNoVirtual() == nullptr && track_event_ != nullptr) {
    delete track_event_;
  }
  track_event_ = nullptr;
}
void ChromeTracePacket::clear_process_descriptor() {
  if (GetArenaNoVirtual() == nullptr && process_descriptor_ != nullptr) {
    delete process_descriptor_;
  }
  process_descriptor_ = nullptr;
}
void ChromeTracePacket::clear_thread_descriptor() {
  if (GetArenaNoVirtual() == nullptr && thread_descriptor_ != nullptr) {
    delete thread_descriptor_;
  }
  thread_descriptor_ = nullptr;
}
void ChromeTracePacket::clear_streaming_profile_packet() {
  if (GetArenaNoVirtual() == nullptr && streaming_profile_packet_ != nullptr) {
    delete streaming_profile_packet_;
  }
  streaming_profile_packet_ = nullptr;
}
void ChromeTracePacket::clear_profiled_frame_symbols() {
  if (GetArenaNoVirtual() == nullptr && profiled_frame_symbols_ != nullptr) {
    delete profiled_frame_symbols_;
  }
  profiled_frame_symbols_ = nullptr;
}
void ChromeTracePacket::clear_trace_config() {
  if (GetArenaNoVirtual() == nullptr && trace_config_ != nullptr) {
    delete trace_config_;
  }
  trace_config_ = nullptr;
}
void ChromeTracePacket::clear_trace_stats() {
  if (GetArenaNoVirtual() == nullptr && trace_stats_ != nullptr) {
    delete trace_stats_;
  }
  trace_stats_ = nullptr;
}
void ChromeTracePacket::clear_interned_data() {
  if (GetArenaNoVirtual() == nullptr && interned_data_ != nullptr) {
    delete interned_data_;
  }
  interned_data_ = nullptr;
}
ChromeTracePacket::ChromeTracePacket()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeTracePacket)
}
ChromeTracePacket::ChromeTracePacket(const ChromeTracePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chrome_events()) {
    chrome_events_ = new ::perfetto::protos::ChromeEventBundle(*from.chrome_events_);
  } else {
    chrome_events_ = nullptr;
  }
  if (from.has_clock_snapshot()) {
    clock_snapshot_ = new ::perfetto::protos::ClockSnapshot(*from.clock_snapshot_);
  } else {
    clock_snapshot_ = nullptr;
  }
  if (from.has_track_event()) {
    track_event_ = new ::perfetto::protos::TrackEvent(*from.track_event_);
  } else {
    track_event_ = nullptr;
  }
  if (from.has_interned_data()) {
    interned_data_ = new ::perfetto::protos::InternedData(*from.interned_data_);
  } else {
    interned_data_ = nullptr;
  }
  if (from.has_trace_config()) {
    trace_config_ = new ::perfetto::protos::TraceConfig(*from.trace_config_);
  } else {
    trace_config_ = nullptr;
  }
  if (from.has_trace_stats()) {
    trace_stats_ = new ::perfetto::protos::TraceStats(*from.trace_stats_);
  } else {
    trace_stats_ = nullptr;
  }
  if (from.has_process_descriptor()) {
    process_descriptor_ = new ::perfetto::protos::ProcessDescriptor(*from.process_descriptor_);
  } else {
    process_descriptor_ = nullptr;
  }
  if (from.has_thread_descriptor()) {
    thread_descriptor_ = new ::perfetto::protos::ThreadDescriptor(*from.thread_descriptor_);
  } else {
    thread_descriptor_ = nullptr;
  }
  if (from.has_streaming_profile_packet()) {
    streaming_profile_packet_ = new ::perfetto::protos::StreamingProfilePacket(*from.streaming_profile_packet_);
  } else {
    streaming_profile_packet_ = nullptr;
  }
  if (from.has_profiled_frame_symbols()) {
    profiled_frame_symbols_ = new ::perfetto::protos::ProfiledFrameSymbols(*from.profiled_frame_symbols_);
  } else {
    profiled_frame_symbols_ = nullptr;
  }
  ::memcpy(&trusted_packet_sequence_id_, &from.trusted_packet_sequence_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&previous_packet_dropped_) -
    reinterpret_cast<char*>(&trusted_packet_sequence_id_)) + sizeof(previous_packet_dropped_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeTracePacket)
}

void ChromeTracePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeTracePacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto.base);
  ::memset(&chrome_events_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_packet_dropped_) -
      reinterpret_cast<char*>(&chrome_events_)) + sizeof(previous_packet_dropped_));
}

ChromeTracePacket::~ChromeTracePacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeTracePacket)
  SharedDtor();
}

void ChromeTracePacket::SharedDtor() {
  if (this != internal_default_instance()) delete chrome_events_;
  if (this != internal_default_instance()) delete clock_snapshot_;
  if (this != internal_default_instance()) delete track_event_;
  if (this != internal_default_instance()) delete interned_data_;
  if (this != internal_default_instance()) delete trace_config_;
  if (this != internal_default_instance()) delete trace_stats_;
  if (this != internal_default_instance()) delete process_descriptor_;
  if (this != internal_default_instance()) delete thread_descriptor_;
  if (this != internal_default_instance()) delete streaming_profile_packet_;
  if (this != internal_default_instance()) delete profiled_frame_symbols_;
}

void ChromeTracePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeTracePacket& ChromeTracePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeTracePacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void ChromeTracePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeTracePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && chrome_events_ != nullptr) {
    delete chrome_events_;
  }
  chrome_events_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clock_snapshot_ != nullptr) {
    delete clock_snapshot_;
  }
  clock_snapshot_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && track_event_ != nullptr) {
    delete track_event_;
  }
  track_event_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && interned_data_ != nullptr) {
    delete interned_data_;
  }
  interned_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trace_config_ != nullptr) {
    delete trace_config_;
  }
  trace_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trace_stats_ != nullptr) {
    delete trace_stats_;
  }
  trace_stats_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && process_descriptor_ != nullptr) {
    delete process_descriptor_;
  }
  process_descriptor_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && thread_descriptor_ != nullptr) {
    delete thread_descriptor_;
  }
  thread_descriptor_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && streaming_profile_packet_ != nullptr) {
    delete streaming_profile_packet_;
  }
  streaming_profile_packet_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && profiled_frame_symbols_ != nullptr) {
    delete profiled_frame_symbols_;
  }
  profiled_frame_symbols_ = nullptr;
  ::memset(&trusted_packet_sequence_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_packet_dropped_) -
      reinterpret_cast<char*>(&trusted_packet_sequence_id_)) + sizeof(previous_packet_dropped_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeTracePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perfetto.protos.ChromeEventBundle chrome_events = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_chrome_events(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_clock_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 trusted_packet_sequence_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          trusted_packet_sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.TrackEvent track_event = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_track_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.InternedData interned_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_interned_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.TraceConfig trace_config = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_trace_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.TraceStats trace_stats = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_trace_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool incremental_state_cleared = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          incremental_state_cleared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool previous_packet_dropped = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          previous_packet_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.ProcessDescriptor process_descriptor = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_process_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_thread_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_streaming_profile_packet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_profiled_frame_symbols(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeTracePacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeTracePacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .perfetto.protos.ChromeEventBundle chrome_events = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clock_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 trusted_packet_sequence_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trusted_packet_sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.TrackEvent track_event = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_track_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.InternedData interned_data = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_interned_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.TraceConfig trace_config = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.TraceStats trace_stats = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool incremental_state_cleared = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (328 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incremental_state_cleared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool previous_packet_dropped = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &previous_packet_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.ProcessDescriptor process_descriptor = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_process_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_thread_descriptor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_profile_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (442 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_profiled_frame_symbols()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeTracePacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeTracePacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeTracePacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeTracePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perfetto.protos.ChromeEventBundle chrome_events = 5;
  if (this->has_chrome_events()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::chrome_events(this), output);
  }

  // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
  if (this->has_clock_snapshot()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::clock_snapshot(this), output);
  }

  // uint32 trusted_packet_sequence_id = 10;
  if (this->trusted_packet_sequence_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->trusted_packet_sequence_id(), output);
  }

  // .perfetto.protos.TrackEvent track_event = 11;
  if (this->has_track_event()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::track_event(this), output);
  }

  // .perfetto.protos.InternedData interned_data = 12;
  if (this->has_interned_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::interned_data(this), output);
  }

  // .perfetto.protos.TraceConfig trace_config = 33;
  if (this->has_trace_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::trace_config(this), output);
  }

  // .perfetto.protos.TraceStats trace_stats = 35;
  if (this->has_trace_stats()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      35, _Internal::trace_stats(this), output);
  }

  // bool incremental_state_cleared = 41;
  if (this->incremental_state_cleared() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(41, this->incremental_state_cleared(), output);
  }

  // bool previous_packet_dropped = 42;
  if (this->previous_packet_dropped() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(42, this->previous_packet_dropped(), output);
  }

  // .perfetto.protos.ProcessDescriptor process_descriptor = 43;
  if (this->has_process_descriptor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      43, _Internal::process_descriptor(this), output);
  }

  // .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
  if (this->has_thread_descriptor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      44, _Internal::thread_descriptor(this), output);
  }

  // .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
  if (this->has_streaming_profile_packet()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      54, _Internal::streaming_profile_packet(this), output);
  }

  // .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
  if (this->has_profiled_frame_symbols()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      55, _Internal::profiled_frame_symbols(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeTracePacket)
}

size_t ChromeTracePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeTracePacket)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perfetto.protos.ChromeEventBundle chrome_events = 5;
  if (this->has_chrome_events()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chrome_events_);
  }

  // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
  if (this->has_clock_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clock_snapshot_);
  }

  // .perfetto.protos.TrackEvent track_event = 11;
  if (this->has_track_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *track_event_);
  }

  // .perfetto.protos.InternedData interned_data = 12;
  if (this->has_interned_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interned_data_);
  }

  // .perfetto.protos.TraceConfig trace_config = 33;
  if (this->has_trace_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_config_);
  }

  // .perfetto.protos.TraceStats trace_stats = 35;
  if (this->has_trace_stats()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_stats_);
  }

  // .perfetto.protos.ProcessDescriptor process_descriptor = 43;
  if (this->has_process_descriptor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *process_descriptor_);
  }

  // .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
  if (this->has_thread_descriptor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thread_descriptor_);
  }

  // .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
  if (this->has_streaming_profile_packet()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *streaming_profile_packet_);
  }

  // .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
  if (this->has_profiled_frame_symbols()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profiled_frame_symbols_);
  }

  // uint32 trusted_packet_sequence_id = 10;
  if (this->trusted_packet_sequence_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->trusted_packet_sequence_id());
  }

  // bool incremental_state_cleared = 41;
  if (this->incremental_state_cleared() != 0) {
    total_size += 2 + 1;
  }

  // bool previous_packet_dropped = 42;
  if (this->previous_packet_dropped() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeTracePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeTracePacket*>(
      &from));
}

void ChromeTracePacket::MergeFrom(const ChromeTracePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeTracePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chrome_events()) {
    mutable_chrome_events()->::perfetto::protos::ChromeEventBundle::MergeFrom(from.chrome_events());
  }
  if (from.has_clock_snapshot()) {
    mutable_clock_snapshot()->::perfetto::protos::ClockSnapshot::MergeFrom(from.clock_snapshot());
  }
  if (from.has_track_event()) {
    mutable_track_event()->::perfetto::protos::TrackEvent::MergeFrom(from.track_event());
  }
  if (from.has_interned_data()) {
    mutable_interned_data()->::perfetto::protos::InternedData::MergeFrom(from.interned_data());
  }
  if (from.has_trace_config()) {
    mutable_trace_config()->::perfetto::protos::TraceConfig::MergeFrom(from.trace_config());
  }
  if (from.has_trace_stats()) {
    mutable_trace_stats()->::perfetto::protos::TraceStats::MergeFrom(from.trace_stats());
  }
  if (from.has_process_descriptor()) {
    mutable_process_descriptor()->::perfetto::protos::ProcessDescriptor::MergeFrom(from.process_descriptor());
  }
  if (from.has_thread_descriptor()) {
    mutable_thread_descriptor()->::perfetto::protos::ThreadDescriptor::MergeFrom(from.thread_descriptor());
  }
  if (from.has_streaming_profile_packet()) {
    mutable_streaming_profile_packet()->::perfetto::protos::StreamingProfilePacket::MergeFrom(from.streaming_profile_packet());
  }
  if (from.has_profiled_frame_symbols()) {
    mutable_profiled_frame_symbols()->::perfetto::protos::ProfiledFrameSymbols::MergeFrom(from.profiled_frame_symbols());
  }
  if (from.trusted_packet_sequence_id() != 0) {
    set_trusted_packet_sequence_id(from.trusted_packet_sequence_id());
  }
  if (from.incremental_state_cleared() != 0) {
    set_incremental_state_cleared(from.incremental_state_cleared());
  }
  if (from.previous_packet_dropped() != 0) {
    set_previous_packet_dropped(from.previous_packet_dropped());
  }
}

void ChromeTracePacket::CopyFrom(const ChromeTracePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeTracePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeTracePacket::IsInitialized() const {
  return true;
}

void ChromeTracePacket::InternalSwap(ChromeTracePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chrome_events_, other->chrome_events_);
  swap(clock_snapshot_, other->clock_snapshot_);
  swap(track_event_, other->track_event_);
  swap(interned_data_, other->interned_data_);
  swap(trace_config_, other->trace_config_);
  swap(trace_stats_, other->trace_stats_);
  swap(process_descriptor_, other->process_descriptor_);
  swap(thread_descriptor_, other->thread_descriptor_);
  swap(streaming_profile_packet_, other->streaming_profile_packet_);
  swap(profiled_frame_symbols_, other->profiled_frame_symbols_);
  swap(trusted_packet_sequence_id_, other->trusted_packet_sequence_id_);
  swap(incremental_state_cleared_, other->incremental_state_cleared_);
  swap(previous_packet_dropped_, other->previous_packet_dropped_);
}

std::string ChromeTracePacket::GetTypeName() const {
  return "perfetto.protos.ChromeTracePacket";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeTracePacket* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeTracePacket >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ChromeTracePacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
