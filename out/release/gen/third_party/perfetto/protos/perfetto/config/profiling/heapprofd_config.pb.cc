// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/heapprofd_config.proto

#include "protos/perfetto/config/profiling/heapprofd_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto;
namespace perfetto {
namespace protos {
class HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeapprofdConfig_ContinuousDumpConfig> _instance;
} _HeapprofdConfig_ContinuousDumpConfig_default_instance_;
class HeapprofdConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeapprofdConfig> _instance;
} _HeapprofdConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_HeapprofdConfig_default_instance_;
    new (ptr) ::perfetto::protos::HeapprofdConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::HeapprofdConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto}, {
      &scc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_HeapprofdConfig_ContinuousDumpConfig_default_instance_;
    new (ptr) ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void HeapprofdConfig_ContinuousDumpConfig::InitAsDefaultInstance() {
}
class HeapprofdConfig_ContinuousDumpConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapprofdConfig_ContinuousDumpConfig>()._has_bits_);
  static void set_has_dump_phase_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dump_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HeapprofdConfig_ContinuousDumpConfig::HeapprofdConfig_ContinuousDumpConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
}
HeapprofdConfig_ContinuousDumpConfig::HeapprofdConfig_ContinuousDumpConfig(const HeapprofdConfig_ContinuousDumpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dump_phase_ms_, &from.dump_phase_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&dump_interval_ms_) -
    reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(dump_interval_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
}

void HeapprofdConfig_ContinuousDumpConfig::SharedCtor() {
  ::memset(&dump_phase_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_interval_ms_) -
      reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(dump_interval_ms_));
}

HeapprofdConfig_ContinuousDumpConfig::~HeapprofdConfig_ContinuousDumpConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  SharedDtor();
}

void HeapprofdConfig_ContinuousDumpConfig::SharedDtor() {
}

void HeapprofdConfig_ContinuousDumpConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeapprofdConfig_ContinuousDumpConfig& HeapprofdConfig_ContinuousDumpConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeapprofdConfig_ContinuousDumpConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void HeapprofdConfig_ContinuousDumpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dump_phase_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dump_interval_ms_) -
        reinterpret_cast<char*>(&dump_phase_ms_)) + sizeof(dump_interval_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeapprofdConfig_ContinuousDumpConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dump_phase_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dump_phase_ms(&has_bits);
          dump_phase_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dump_interval_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dump_interval_ms(&has_bits);
          dump_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeapprofdConfig_ContinuousDumpConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dump_phase_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_dump_phase_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dump_phase_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dump_interval_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_dump_interval_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dump_interval_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeapprofdConfig_ContinuousDumpConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dump_phase_ms = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->dump_phase_ms(), output);
  }

  // optional uint32 dump_interval_ms = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->dump_interval_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
}

size_t HeapprofdConfig_ContinuousDumpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dump_phase_ms = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dump_phase_ms());
    }

    // optional uint32 dump_interval_ms = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dump_interval_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeapprofdConfig_ContinuousDumpConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HeapprofdConfig_ContinuousDumpConfig*>(
      &from));
}

void HeapprofdConfig_ContinuousDumpConfig::MergeFrom(const HeapprofdConfig_ContinuousDumpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dump_phase_ms_ = from.dump_phase_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      dump_interval_ms_ = from.dump_interval_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeapprofdConfig_ContinuousDumpConfig::CopyFrom(const HeapprofdConfig_ContinuousDumpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapprofdConfig_ContinuousDumpConfig::IsInitialized() const {
  return true;
}

void HeapprofdConfig_ContinuousDumpConfig::InternalSwap(HeapprofdConfig_ContinuousDumpConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dump_phase_ms_, other->dump_phase_ms_);
  swap(dump_interval_ms_, other->dump_interval_ms_);
}

std::string HeapprofdConfig_ContinuousDumpConfig::GetTypeName() const {
  return "perfetto.protos.HeapprofdConfig.ContinuousDumpConfig";
}


// ===================================================================

void HeapprofdConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_HeapprofdConfig_default_instance_._instance.get_mutable()->continuous_dump_config_ = const_cast< ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig*>(
      ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig::internal_default_instance());
}
class HeapprofdConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapprofdConfig>()._has_bits_);
  static void set_has_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_all(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig& continuous_dump_config(const HeapprofdConfig* msg);
  static void set_has_continuous_dump_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shmem_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_block_client(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_block_client_timeout_us(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_no_startup(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_no_running(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_idle_allocations(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dump_at_max(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig&
HeapprofdConfig::_Internal::continuous_dump_config(const HeapprofdConfig* msg) {
  return *msg->continuous_dump_config_;
}
HeapprofdConfig::HeapprofdConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.HeapprofdConfig)
}
HeapprofdConfig::HeapprofdConfig(const HeapprofdConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      process_cmdline_(from.process_cmdline_),
      pid_(from.pid_),
      skip_symbol_prefix_(from.skip_symbol_prefix_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_continuous_dump_config()) {
    continuous_dump_config_ = new ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig(*from.continuous_dump_config_);
  } else {
    continuous_dump_config_ = nullptr;
  }
  ::memcpy(&sampling_interval_bytes_, &from.sampling_interval_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_client_timeout_us_) -
    reinterpret_cast<char*>(&sampling_interval_bytes_)) + sizeof(block_client_timeout_us_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapprofdConfig)
}

void HeapprofdConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto.base);
  ::memset(&continuous_dump_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_client_timeout_us_) -
      reinterpret_cast<char*>(&continuous_dump_config_)) + sizeof(block_client_timeout_us_));
}

HeapprofdConfig::~HeapprofdConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapprofdConfig)
  SharedDtor();
}

void HeapprofdConfig::SharedDtor() {
  if (this != internal_default_instance()) delete continuous_dump_config_;
}

void HeapprofdConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeapprofdConfig& HeapprofdConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeapprofdConfig_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void HeapprofdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapprofdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_cmdline_.Clear();
  pid_.Clear();
  skip_symbol_prefix_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(continuous_dump_config_ != nullptr);
    continuous_dump_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&sampling_interval_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idle_allocations_) -
        reinterpret_cast<char*>(&sampling_interval_bytes_)) + sizeof(idle_allocations_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&dump_at_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_client_timeout_us_) -
        reinterpret_cast<char*>(&dump_at_max_)) + sizeof(block_client_timeout_us_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeapprofdConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sampling_interval_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sampling_interval_bytes(&has_bits);
          sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string process_cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_process_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated uint64 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool all = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_all(&has_bits);
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_continuous_dump_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string skip_symbol_prefix = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_skip_symbol_prefix(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional uint64 shmem_size_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_shmem_size_bytes(&has_bits);
          shmem_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool block_client = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_block_client(&has_bits);
          block_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_startup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_no_startup(&has_bits);
          no_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_running = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_no_running(&has_bits);
          no_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool idle_allocations = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_idle_allocations(&has_bits);
          idle_allocations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dump_at_max = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_dump_at_max(&has_bits);
          dump_at_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 block_client_timeout_us = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_block_client_timeout_us(&has_bits);
          block_client_timeout_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeapprofdConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.HeapprofdConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sampling_interval_bytes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_sampling_interval_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sampling_interval_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string process_cmdline = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_process_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 pid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool all = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_all(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_continuous_dump_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string skip_symbol_prefix = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_skip_symbol_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 shmem_size_bytes = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_shmem_size_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shmem_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool block_client = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_block_client(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &block_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_startup = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_no_startup(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_startup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_running = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_no_running(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool idle_allocations = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_idle_allocations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &idle_allocations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dump_at_max = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_dump_at_max(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_at_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 block_client_timeout_us = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_block_client_timeout_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_client_timeout_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.HeapprofdConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.HeapprofdConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeapprofdConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.HeapprofdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sampling_interval_bytes = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sampling_interval_bytes(), output);
  }

  // repeated string process_cmdline = 2;
  for (int i = 0, n = this->process_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->process_cmdline(i), output);
  }

  // repeated uint64 pid = 4;
  for (int i = 0, n = this->pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      4, this->pid(i), output);
  }

  // optional bool all = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->all(), output);
  }

  // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::continuous_dump_config(this), output);
  }

  // repeated string skip_symbol_prefix = 7;
  for (int i = 0, n = this->skip_symbol_prefix_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->skip_symbol_prefix(i), output);
  }

  // optional uint64 shmem_size_bytes = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->shmem_size_bytes(), output);
  }

  // optional bool block_client = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->block_client(), output);
  }

  // optional bool no_startup = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->no_startup(), output);
  }

  // optional bool no_running = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->no_running(), output);
  }

  // optional bool idle_allocations = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->idle_allocations(), output);
  }

  // optional bool dump_at_max = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->dump_at_max(), output);
  }

  // optional uint32 block_client_timeout_us = 14;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->block_client_timeout_us(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.HeapprofdConfig)
}

size_t HeapprofdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapprofdConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string process_cmdline = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->process_cmdline_size());
  for (int i = 0, n = this->process_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->process_cmdline(i));
  }

  // repeated uint64 pid = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->pid_size());
    total_size += data_size;
  }

  // repeated string skip_symbol_prefix = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->skip_symbol_prefix_size());
  for (int i = 0, n = this->skip_symbol_prefix_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->skip_symbol_prefix(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *continuous_dump_config_);
    }

    // optional uint64 sampling_interval_bytes = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->sampling_interval_bytes());
    }

    // optional uint64 shmem_size_bytes = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->shmem_size_bytes());
    }

    // optional bool all = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool block_client = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool no_startup = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool no_running = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool idle_allocations = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool dump_at_max = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 block_client_timeout_us = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->block_client_timeout_us());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeapprofdConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HeapprofdConfig*>(
      &from));
}

void HeapprofdConfig::MergeFrom(const HeapprofdConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapprofdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  process_cmdline_.MergeFrom(from.process_cmdline_);
  pid_.MergeFrom(from.pid_);
  skip_symbol_prefix_.MergeFrom(from.skip_symbol_prefix_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_continuous_dump_config()->::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig::MergeFrom(from.continuous_dump_config());
    }
    if (cached_has_bits & 0x00000002u) {
      sampling_interval_bytes_ = from.sampling_interval_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      shmem_size_bytes_ = from.shmem_size_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      all_ = from.all_;
    }
    if (cached_has_bits & 0x00000010u) {
      block_client_ = from.block_client_;
    }
    if (cached_has_bits & 0x00000020u) {
      no_startup_ = from.no_startup_;
    }
    if (cached_has_bits & 0x00000040u) {
      no_running_ = from.no_running_;
    }
    if (cached_has_bits & 0x00000080u) {
      idle_allocations_ = from.idle_allocations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      dump_at_max_ = from.dump_at_max_;
    }
    if (cached_has_bits & 0x00000200u) {
      block_client_timeout_us_ = from.block_client_timeout_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeapprofdConfig::CopyFrom(const HeapprofdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapprofdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapprofdConfig::IsInitialized() const {
  return true;
}

void HeapprofdConfig::InternalSwap(HeapprofdConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  process_cmdline_.InternalSwap(CastToBase(&other->process_cmdline_));
  pid_.InternalSwap(&other->pid_);
  skip_symbol_prefix_.InternalSwap(CastToBase(&other->skip_symbol_prefix_));
  swap(continuous_dump_config_, other->continuous_dump_config_);
  swap(sampling_interval_bytes_, other->sampling_interval_bytes_);
  swap(shmem_size_bytes_, other->shmem_size_bytes_);
  swap(all_, other->all_);
  swap(block_client_, other->block_client_);
  swap(no_startup_, other->no_startup_);
  swap(no_running_, other->no_running_);
  swap(idle_allocations_, other->idle_allocations_);
  swap(dump_at_max_, other->dump_at_max_);
  swap(block_client_timeout_us_, other->block_client_timeout_us_);
}

std::string HeapprofdConfig::GetTypeName() const {
  return "perfetto.protos.HeapprofdConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* Arena::CreateMaybeMessage< ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapprofdConfig* Arena::CreateMaybeMessage< ::perfetto::protos::HeapprofdConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::HeapprofdConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
