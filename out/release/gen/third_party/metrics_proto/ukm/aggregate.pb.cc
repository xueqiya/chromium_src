// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/aggregate.proto

#include "ukm/aggregate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ukm_2faggregate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Aggregate_Metric_ukm_2faggregate_2eproto;
namespace ukm {
class Aggregate_MetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Aggregate_Metric> _instance;
} _Aggregate_Metric_default_instance_;
class AggregateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Aggregate> _instance;
} _Aggregate_default_instance_;
}  // namespace ukm
static void InitDefaultsscc_info_Aggregate_ukm_2faggregate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukm::_Aggregate_default_instance_;
    new (ptr) ::ukm::Aggregate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukm::Aggregate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Aggregate_ukm_2faggregate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Aggregate_ukm_2faggregate_2eproto}, {
      &scc_info_Aggregate_Metric_ukm_2faggregate_2eproto.base,}};

static void InitDefaultsscc_info_Aggregate_Metric_ukm_2faggregate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukm::_Aggregate_Metric_default_instance_;
    new (ptr) ::ukm::Aggregate_Metric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukm::Aggregate_Metric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Aggregate_Metric_ukm_2faggregate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Aggregate_Metric_ukm_2faggregate_2eproto}, {}};

namespace ukm {

// ===================================================================

void Aggregate_Metric::InitAsDefaultInstance() {
}
class Aggregate_Metric::_Internal {
 public:
  using HasBits = decltype(std::declval<Aggregate_Metric>()._has_bits_);
  static void set_has_metric_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_square_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dropped_due_to_limits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dropped_due_to_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dropped_due_to_whitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Aggregate_Metric::Aggregate_Metric()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Aggregate.Metric)
}
Aggregate_Metric::Aggregate_Metric(const Aggregate_Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&metric_hash_, &from.metric_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
    reinterpret_cast<char*>(&metric_hash_)) + sizeof(dropped_due_to_whitelist_));
  // @@protoc_insertion_point(copy_constructor:ukm.Aggregate.Metric)
}

void Aggregate_Metric::SharedCtor() {
  ::memset(&metric_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
      reinterpret_cast<char*>(&metric_hash_)) + sizeof(dropped_due_to_whitelist_));
}

Aggregate_Metric::~Aggregate_Metric() {
  // @@protoc_insertion_point(destructor:ukm.Aggregate.Metric)
  SharedDtor();
}

void Aggregate_Metric::SharedDtor() {
}

void Aggregate_Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Aggregate_Metric& Aggregate_Metric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Aggregate_Metric_ukm_2faggregate_2eproto.base);
  return *internal_default_instance();
}


void Aggregate_Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Aggregate.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&metric_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
        reinterpret_cast<char*>(&metric_hash_)) + sizeof(dropped_due_to_whitelist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Aggregate_Metric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 metric_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_metric_hash(&has_bits);
          metric_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional double value_sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_value_sum(&has_bits);
          value_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double value_square_sum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_value_square_sum(&has_bits);
          value_square_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 total_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_total_count(&has_bits);
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dropped_due_to_limits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dropped_due_to_limits(&has_bits);
          dropped_due_to_limits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dropped_due_to_sampling = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dropped_due_to_sampling(&has_bits);
          dropped_due_to_sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dropped_due_to_whitelist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_dropped_due_to_whitelist(&has_bits);
          dropped_due_to_whitelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Aggregate_Metric::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ukm.Aggregate.Metric)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 metric_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_metric_hash(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &metric_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double value_sum = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_value_sum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_sum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double value_square_sum = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_value_square_sum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_square_sum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_total_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_limits = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_dropped_due_to_limits(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_limits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_sampling = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_dropped_due_to_sampling(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_sampling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_whitelist = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_dropped_due_to_whitelist(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_whitelist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Aggregate.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Aggregate.Metric)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Aggregate_Metric::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Aggregate.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 metric_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->metric_hash(), output);
  }

  // optional double value_sum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->value_sum(), output);
  }

  // optional double value_square_sum = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->value_square_sum(), output);
  }

  // optional uint64 total_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->total_count(), output);
  }

  // optional uint64 dropped_due_to_limits = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->dropped_due_to_limits(), output);
  }

  // optional uint64 dropped_due_to_sampling = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->dropped_due_to_sampling(), output);
  }

  // optional uint64 dropped_due_to_whitelist = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->dropped_due_to_whitelist(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Aggregate.Metric)
}

size_t Aggregate_Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Aggregate.Metric)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional fixed64 metric_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double value_sum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double value_square_sum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 total_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->total_count());
    }

    // optional uint64 dropped_due_to_limits = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_limits());
    }

    // optional uint64 dropped_due_to_sampling = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_sampling());
    }

    // optional uint64 dropped_due_to_whitelist = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_whitelist());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Aggregate_Metric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Aggregate_Metric*>(
      &from));
}

void Aggregate_Metric::MergeFrom(const Aggregate_Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Aggregate.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      metric_hash_ = from.metric_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_sum_ = from.value_sum_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_square_sum_ = from.value_square_sum_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_count_ = from.total_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      dropped_due_to_limits_ = from.dropped_due_to_limits_;
    }
    if (cached_has_bits & 0x00000020u) {
      dropped_due_to_sampling_ = from.dropped_due_to_sampling_;
    }
    if (cached_has_bits & 0x00000040u) {
      dropped_due_to_whitelist_ = from.dropped_due_to_whitelist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Aggregate_Metric::CopyFrom(const Aggregate_Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Aggregate.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregate_Metric::IsInitialized() const {
  return true;
}

void Aggregate_Metric::InternalSwap(Aggregate_Metric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(metric_hash_, other->metric_hash_);
  swap(value_sum_, other->value_sum_);
  swap(value_square_sum_, other->value_square_sum_);
  swap(total_count_, other->total_count_);
  swap(dropped_due_to_limits_, other->dropped_due_to_limits_);
  swap(dropped_due_to_sampling_, other->dropped_due_to_sampling_);
  swap(dropped_due_to_whitelist_, other->dropped_due_to_whitelist_);
}

std::string Aggregate_Metric::GetTypeName() const {
  return "ukm.Aggregate.Metric";
}


// ===================================================================

void Aggregate::InitAsDefaultInstance() {
}
class Aggregate::_Internal {
 public:
  using HasBits = decltype(std::declval<Aggregate>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dropped_due_to_limits(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dropped_due_to_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dropped_due_to_whitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Aggregate::Aggregate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Aggregate)
}
Aggregate::Aggregate(const Aggregate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(dropped_due_to_whitelist_));
  // @@protoc_insertion_point(copy_constructor:ukm.Aggregate)
}

void Aggregate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Aggregate_ukm_2faggregate_2eproto.base);
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(dropped_due_to_whitelist_));
}

Aggregate::~Aggregate() {
  // @@protoc_insertion_point(destructor:ukm.Aggregate)
  SharedDtor();
}

void Aggregate::SharedDtor() {
}

void Aggregate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Aggregate& Aggregate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Aggregate_ukm_2faggregate_2eproto.base);
  return *internal_default_instance();
}


void Aggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Aggregate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dropped_due_to_whitelist_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(dropped_due_to_whitelist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Aggregate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_id(&has_bits);
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 event_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_event_hash(&has_bits);
          event_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 total_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_count(&has_bits);
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dropped_due_to_limits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dropped_due_to_limits(&has_bits);
          dropped_due_to_limits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dropped_due_to_sampling = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dropped_due_to_sampling(&has_bits);
          dropped_due_to_sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ukm.Aggregate.Metric metrics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional uint64 dropped_due_to_whitelist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_dropped_due_to_whitelist(&has_bits);
          dropped_due_to_whitelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Aggregate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ukm.Aggregate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 source_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_source_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 event_hash = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_event_hash(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &event_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_total_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_limits = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_dropped_due_to_limits(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_limits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_sampling = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_dropped_due_to_sampling(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_sampling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Aggregate.Metric metrics = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dropped_due_to_whitelist = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_dropped_due_to_whitelist(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dropped_due_to_whitelist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Aggregate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Aggregate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Aggregate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Aggregate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // optional fixed64 event_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(2, this->event_hash(), output);
  }

  // optional uint64 total_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->total_count(), output);
  }

  // optional uint64 dropped_due_to_limits = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->dropped_due_to_limits(), output);
  }

  // optional uint64 dropped_due_to_sampling = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->dropped_due_to_sampling(), output);
  }

  // repeated .ukm.Aggregate.Metric metrics = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->metrics(static_cast<int>(i)),
      output);
  }

  // optional uint64 dropped_due_to_whitelist = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->dropped_due_to_whitelist(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Aggregate)
}

size_t Aggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Aggregate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ukm.Aggregate.Metric metrics = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metrics(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->source_id());
    }

    // optional fixed64 event_hash = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 total_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->total_count());
    }

    // optional uint64 dropped_due_to_limits = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_limits());
    }

    // optional uint64 dropped_due_to_sampling = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_sampling());
    }

    // optional uint64 dropped_due_to_whitelist = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->dropped_due_to_whitelist());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Aggregate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Aggregate*>(
      &from));
}

void Aggregate::MergeFrom(const Aggregate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Aggregate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_hash_ = from.event_hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_count_ = from.total_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      dropped_due_to_limits_ = from.dropped_due_to_limits_;
    }
    if (cached_has_bits & 0x00000010u) {
      dropped_due_to_sampling_ = from.dropped_due_to_sampling_;
    }
    if (cached_has_bits & 0x00000020u) {
      dropped_due_to_whitelist_ = from.dropped_due_to_whitelist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Aggregate::CopyFrom(const Aggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregate::IsInitialized() const {
  return true;
}

void Aggregate::InternalSwap(Aggregate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&metrics_)->InternalSwap(CastToBase(&other->metrics_));
  swap(source_id_, other->source_id_);
  swap(event_hash_, other->event_hash_);
  swap(total_count_, other->total_count_);
  swap(dropped_due_to_limits_, other->dropped_due_to_limits_);
  swap(dropped_due_to_sampling_, other->dropped_due_to_sampling_);
  swap(dropped_due_to_whitelist_, other->dropped_due_to_whitelist_);
}

std::string Aggregate::GetTypeName() const {
  return "ukm.Aggregate";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ukm::Aggregate_Metric* Arena::CreateMaybeMessage< ::ukm::Aggregate_Metric >(Arena* arena) {
  return Arena::CreateInternal< ::ukm::Aggregate_Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::ukm::Aggregate* Arena::CreateMaybeMessage< ::ukm::Aggregate >(Arena* arena) {
  return Arena::CreateInternal< ::ukm::Aggregate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
