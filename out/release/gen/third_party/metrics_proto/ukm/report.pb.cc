// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/report.proto

#include "ukm/report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_system_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_SystemProfileProto_system_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fdemographics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserDemographicsProto_user_5fdemographics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ukm_2faggregate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Aggregate_ukm_2faggregate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ukm_2fentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Entry_ukm_2fentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ukm_2freport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Report_SourceCounts_ukm_2freport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ukm_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Source_ukm_2fsource_2eproto;
namespace ukm {
class Report_SourceCountsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Report_SourceCounts> _instance;
} _Report_SourceCounts_default_instance_;
class ReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Report> _instance;
} _Report_default_instance_;
}  // namespace ukm
static void InitDefaultsscc_info_Report_ukm_2freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukm::_Report_default_instance_;
    new (ptr) ::ukm::Report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukm::Report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Report_ukm_2freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_Report_ukm_2freport_2eproto}, {
      &scc_info_SystemProfileProto_system_5fprofile_2eproto.base,
      &scc_info_UserDemographicsProto_user_5fdemographics_2eproto.base,
      &scc_info_Source_ukm_2fsource_2eproto.base,
      &scc_info_Report_SourceCounts_ukm_2freport_2eproto.base,
      &scc_info_Entry_ukm_2fentry_2eproto.base,
      &scc_info_Aggregate_ukm_2faggregate_2eproto.base,}};

static void InitDefaultsscc_info_Report_SourceCounts_ukm_2freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukm::_Report_SourceCounts_default_instance_;
    new (ptr) ::ukm::Report_SourceCounts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukm::Report_SourceCounts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Report_SourceCounts_ukm_2freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Report_SourceCounts_ukm_2freport_2eproto}, {}};

namespace ukm {
bool Report_LogRotationReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Report_LogRotationReason_strings[4] = {};

static const char Report_LogRotationReason_names[] =
  "BACKGROUNDED"
  "SCHEDULED_ROTATION"
  "SHUTDOWN"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Report_LogRotationReason_entries[] = {
  { {Report_LogRotationReason_names + 0, 12}, 2 },
  { {Report_LogRotationReason_names + 12, 18}, 1 },
  { {Report_LogRotationReason_names + 30, 8}, 3 },
  { {Report_LogRotationReason_names + 38, 7}, 0 },
};

static const int Report_LogRotationReason_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  1, // 1 -> SCHEDULED_ROTATION
  0, // 2 -> BACKGROUNDED
  2, // 3 -> SHUTDOWN
};

const std::string& Report_LogRotationReason_Name(
    Report_LogRotationReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Report_LogRotationReason_entries,
          Report_LogRotationReason_entries_by_number,
          4, Report_LogRotationReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Report_LogRotationReason_entries,
      Report_LogRotationReason_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Report_LogRotationReason_strings[idx].get();
}
bool Report_LogRotationReason_Parse(
    const std::string& name, Report_LogRotationReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Report_LogRotationReason_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Report_LogRotationReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Report_LogRotationReason Report::UNKNOWN;
constexpr Report_LogRotationReason Report::SCHEDULED_ROTATION;
constexpr Report_LogRotationReason Report::BACKGROUNDED;
constexpr Report_LogRotationReason Report::SHUTDOWN;
constexpr Report_LogRotationReason Report::LogRotationReason_MIN;
constexpr Report_LogRotationReason Report::LogRotationReason_MAX;
constexpr int Report::LogRotationReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Report_SourceCounts::InitAsDefaultInstance() {
}
class Report_SourceCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<Report_SourceCounts>()._has_bits_);
  static void set_has_observed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_navigation_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unmatched_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_carryover_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deferred_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_entryless_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pruned_sources_age_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Report_SourceCounts::Report_SourceCounts()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Report.SourceCounts)
}
Report_SourceCounts::Report_SourceCounts(const Report_SourceCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&observed_, &from.observed_,
    static_cast<size_t>(reinterpret_cast<char*>(&pruned_sources_age_seconds_) -
    reinterpret_cast<char*>(&observed_)) + sizeof(pruned_sources_age_seconds_));
  // @@protoc_insertion_point(copy_constructor:ukm.Report.SourceCounts)
}

void Report_SourceCounts::SharedCtor() {
  ::memset(&observed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pruned_sources_age_seconds_) -
      reinterpret_cast<char*>(&observed_)) + sizeof(pruned_sources_age_seconds_));
}

Report_SourceCounts::~Report_SourceCounts() {
  // @@protoc_insertion_point(destructor:ukm.Report.SourceCounts)
  SharedDtor();
}

void Report_SourceCounts::SharedDtor() {
}

void Report_SourceCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Report_SourceCounts& Report_SourceCounts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Report_SourceCounts_ukm_2freport_2eproto.base);
  return *internal_default_instance();
}


void Report_SourceCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Report.SourceCounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&observed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pruned_sources_age_seconds_) -
        reinterpret_cast<char*>(&observed_)) + sizeof(pruned_sources_age_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Report_SourceCounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 observed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_observed(&has_bits);
          observed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 navigation_sources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_navigation_sources(&has_bits);
          navigation_sources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 unmatched_sources = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_unmatched_sources(&has_bits);
          unmatched_sources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 carryover_sources = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_carryover_sources(&has_bits);
          carryover_sources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deferred_sources = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_deferred_sources(&has_bits);
          deferred_sources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entryless_sources = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_entryless_sources(&has_bits);
          entryless_sources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pruned_sources_age_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pruned_sources_age_seconds(&has_bits);
          pruned_sources_age_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Report_SourceCounts::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ukm.Report.SourceCounts)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 observed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_observed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &observed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 navigation_sources = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_navigation_sources(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &navigation_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unmatched_sources = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_unmatched_sources(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &unmatched_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 carryover_sources = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_carryover_sources(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &carryover_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 deferred_sources = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_deferred_sources(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &deferred_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entryless_sources = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_entryless_sources(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &entryless_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pruned_sources_age_seconds = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_pruned_sources_age_seconds(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pruned_sources_age_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Report.SourceCounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Report.SourceCounts)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Report_SourceCounts::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Report.SourceCounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 observed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->observed(), output);
  }

  // optional int32 navigation_sources = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->navigation_sources(), output);
  }

  // optional int32 unmatched_sources = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->unmatched_sources(), output);
  }

  // optional int32 carryover_sources = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->carryover_sources(), output);
  }

  // optional int32 deferred_sources = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->deferred_sources(), output);
  }

  // optional int32 entryless_sources = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->entryless_sources(), output);
  }

  // optional int32 pruned_sources_age_seconds = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->pruned_sources_age_seconds(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Report.SourceCounts)
}

size_t Report_SourceCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Report.SourceCounts)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 observed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->observed());
    }

    // optional int32 navigation_sources = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->navigation_sources());
    }

    // optional int32 unmatched_sources = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->unmatched_sources());
    }

    // optional int32 carryover_sources = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->carryover_sources());
    }

    // optional int32 deferred_sources = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->deferred_sources());
    }

    // optional int32 entryless_sources = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->entryless_sources());
    }

    // optional int32 pruned_sources_age_seconds = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pruned_sources_age_seconds());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Report_SourceCounts::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Report_SourceCounts*>(
      &from));
}

void Report_SourceCounts::MergeFrom(const Report_SourceCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Report.SourceCounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      observed_ = from.observed_;
    }
    if (cached_has_bits & 0x00000002u) {
      navigation_sources_ = from.navigation_sources_;
    }
    if (cached_has_bits & 0x00000004u) {
      unmatched_sources_ = from.unmatched_sources_;
    }
    if (cached_has_bits & 0x00000008u) {
      carryover_sources_ = from.carryover_sources_;
    }
    if (cached_has_bits & 0x00000010u) {
      deferred_sources_ = from.deferred_sources_;
    }
    if (cached_has_bits & 0x00000020u) {
      entryless_sources_ = from.entryless_sources_;
    }
    if (cached_has_bits & 0x00000040u) {
      pruned_sources_age_seconds_ = from.pruned_sources_age_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Report_SourceCounts::CopyFrom(const Report_SourceCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Report.SourceCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report_SourceCounts::IsInitialized() const {
  return true;
}

void Report_SourceCounts::InternalSwap(Report_SourceCounts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(observed_, other->observed_);
  swap(navigation_sources_, other->navigation_sources_);
  swap(unmatched_sources_, other->unmatched_sources_);
  swap(carryover_sources_, other->carryover_sources_);
  swap(deferred_sources_, other->deferred_sources_);
  swap(entryless_sources_, other->entryless_sources_);
  swap(pruned_sources_age_seconds_, other->pruned_sources_age_seconds_);
}

std::string Report_SourceCounts::GetTypeName() const {
  return "ukm.Report.SourceCounts";
}


// ===================================================================

void Report::InitAsDefaultInstance() {
  ::ukm::_Report_default_instance_._instance.get_mutable()->system_profile_ = const_cast< ::metrics::SystemProfileProto*>(
      ::metrics::SystemProfileProto::internal_default_instance());
  ::ukm::_Report_default_instance_._instance.get_mutable()->user_demographics_ = const_cast< ::metrics::UserDemographicsProto*>(
      ::metrics::UserDemographicsProto::internal_default_instance());
  ::ukm::_Report_default_instance_._instance.get_mutable()->source_counts_ = const_cast< ::ukm::Report_SourceCounts*>(
      ::ukm::Report_SourceCounts::internal_default_instance());
}
class Report::_Internal {
 public:
  using HasBits = decltype(std::declval<Report>()._has_bits_);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_report_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_continuous(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_log_rotation_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::metrics::SystemProfileProto& system_profile(const Report* msg);
  static void set_has_system_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::metrics::UserDemographicsProto& user_demographics(const Report* msg);
  static void set_has_user_demographics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ukm::Report_SourceCounts& source_counts(const Report* msg);
  static void set_has_source_counts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::metrics::SystemProfileProto&
Report::_Internal::system_profile(const Report* msg) {
  return *msg->system_profile_;
}
const ::metrics::UserDemographicsProto&
Report::_Internal::user_demographics(const Report* msg) {
  return *msg->user_demographics_;
}
const ::ukm::Report_SourceCounts&
Report::_Internal::source_counts(const Report* msg) {
  return *msg->source_counts_;
}
void Report::clear_system_profile() {
  if (system_profile_ != nullptr) system_profile_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Report::clear_user_demographics() {
  if (user_demographics_ != nullptr) user_demographics_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Report::clear_sources() {
  sources_.Clear();
}
void Report::clear_entries() {
  entries_.Clear();
}
void Report::clear_aggregates() {
  aggregates_.Clear();
}
Report::Report()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Report)
}
Report::Report(const Report& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sources_(from.sources_),
      entries_(from.entries_),
      aggregates_(from.aggregates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_system_profile()) {
    system_profile_ = new ::metrics::SystemProfileProto(*from.system_profile_);
  } else {
    system_profile_ = nullptr;
  }
  if (from.has_source_counts()) {
    source_counts_ = new ::ukm::Report_SourceCounts(*from.source_counts_);
  } else {
    source_counts_ = nullptr;
  }
  if (from.has_user_demographics()) {
    user_demographics_ = new ::metrics::UserDemographicsProto(*from.user_demographics_);
  } else {
    user_demographics_ = nullptr;
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&log_rotation_reason_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(log_rotation_reason_));
  // @@protoc_insertion_point(copy_constructor:ukm.Report)
}

void Report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Report_ukm_2freport_2eproto.base);
  ::memset(&system_profile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_rotation_reason_) -
      reinterpret_cast<char*>(&system_profile_)) + sizeof(log_rotation_reason_));
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:ukm.Report)
  SharedDtor();
}

void Report::SharedDtor() {
  if (this != internal_default_instance()) delete system_profile_;
  if (this != internal_default_instance()) delete source_counts_;
  if (this != internal_default_instance()) delete user_demographics_;
}

void Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Report& Report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Report_ukm_2freport_2eproto.base);
  return *internal_default_instance();
}


void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  entries_.Clear();
  aggregates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(system_profile_ != nullptr);
      system_profile_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_counts_ != nullptr);
      source_counts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(user_demographics_ != nullptr);
      user_demographics_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&log_rotation_reason_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(log_rotation_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .metrics.SystemProfileProto system_profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_system_profile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ukm.Source sources = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .ukm.Entry entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional int32 session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 report_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_report_id(&has_bits);
          report_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ukm.Aggregate aggregates = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_aggregates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional bool is_continuous = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_continuous(&has_bits);
          is_continuous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ukm::Report_LogRotationReason_IsValid(val))) {
            set_log_rotation_reason(static_cast<::ukm::Report_LogRotationReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ukm.Report.SourceCounts source_counts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_source_counts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.UserDemographicsProto user_demographics = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_user_demographics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Report::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ukm.Report)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 client_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_client_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto system_profile = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_system_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Source sources = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Entry entries = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_session_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 report_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_report_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Aggregate aggregates = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_aggregates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_continuous = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_is_continuous(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_continuous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ukm::Report_LogRotationReason_IsValid(value)) {
            set_log_rotation_reason(static_cast< ::ukm::Report_LogRotationReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ukm.Report.SourceCounts source_counts = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.UserDemographicsProto user_demographics = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_demographics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Report)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Report::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->client_id(), output);
  }

  // optional .metrics.SystemProfileProto system_profile = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::system_profile(this), output);
  }

  // repeated .ukm.Source sources = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->sources(static_cast<int>(i)),
      output);
  }

  // repeated .ukm.Entry entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->entries(static_cast<int>(i)),
      output);
  }

  // optional int32 session_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->session_id(), output);
  }

  // optional int32 report_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->report_id(), output);
  }

  // repeated .ukm.Aggregate aggregates = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aggregates_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->aggregates(static_cast<int>(i)),
      output);
  }

  // optional bool is_continuous = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->is_continuous(), output);
  }

  // optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->log_rotation_reason(), output);
  }

  // optional .ukm.Report.SourceCounts source_counts = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::source_counts(this), output);
  }

  // optional .metrics.UserDemographicsProto user_demographics = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::user_demographics(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Report)
}

size_t Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Report)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ukm.Source sources = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sources(static_cast<int>(i)));
    }
  }

  // repeated .ukm.Entry entries = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // repeated .ukm.Aggregate aggregates = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->aggregates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->aggregates(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .metrics.SystemProfileProto system_profile = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_profile_);
    }

    // optional .ukm.Report.SourceCounts source_counts = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_counts_);
    }

    // optional .metrics.UserDemographicsProto user_demographics = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_demographics_);
    }

    // optional fixed64 client_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 session_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 report_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->report_id());
    }

    // optional bool is_continuous = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->log_rotation_reason());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Report::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Report*>(
      &from));
}

void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  entries_.MergeFrom(from.entries_);
  aggregates_.MergeFrom(from.aggregates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_system_profile()->::metrics::SystemProfileProto::MergeFrom(from.system_profile());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_source_counts()->::ukm::Report_SourceCounts::MergeFrom(from.source_counts());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_user_demographics()->::metrics::UserDemographicsProto::MergeFrom(from.user_demographics());
    }
    if (cached_has_bits & 0x00000008u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      report_id_ = from.report_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_continuous_ = from.is_continuous_;
    }
    if (cached_has_bits & 0x00000080u) {
      log_rotation_reason_ = from.log_rotation_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  return true;
}

void Report::InternalSwap(Report* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sources_)->InternalSwap(CastToBase(&other->sources_));
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  CastToBase(&aggregates_)->InternalSwap(CastToBase(&other->aggregates_));
  swap(system_profile_, other->system_profile_);
  swap(source_counts_, other->source_counts_);
  swap(user_demographics_, other->user_demographics_);
  swap(client_id_, other->client_id_);
  swap(session_id_, other->session_id_);
  swap(report_id_, other->report_id_);
  swap(is_continuous_, other->is_continuous_);
  swap(log_rotation_reason_, other->log_rotation_reason_);
}

std::string Report::GetTypeName() const {
  return "ukm.Report";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ukm::Report_SourceCounts* Arena::CreateMaybeMessage< ::ukm::Report_SourceCounts >(Arena* arena) {
  return Arena::CreateInternal< ::ukm::Report_SourceCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::ukm::Report* Arena::CreateMaybeMessage< ::ukm::Report >(Arena* arena) {
  return Arena::CreateInternal< ::ukm::Report >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
