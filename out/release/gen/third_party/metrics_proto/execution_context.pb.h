// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution_context.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_execution_5fcontext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_execution_5fcontext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_execution_5fcontext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_execution_5fcontext_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum Process : int {
  UNKNOWN_PROCESS = 0,
  BROWSER_PROCESS = 1,
  RENDERER_PROCESS = 2,
  GPU_PROCESS = 3,
  UTILITY_PROCESS = 4,
  ZYGOTE_PROCESS = 5,
  SANDBOX_HELPER_PROCESS = 6,
  PPAPI_PLUGIN_PROCESS = 7,
  PPAPI_BROKER_PROCESS = 8,
  OTHER_PROCESS = 9
};
bool Process_IsValid(int value);
constexpr Process Process_MIN = UNKNOWN_PROCESS;
constexpr Process Process_MAX = OTHER_PROCESS;
constexpr int Process_ARRAYSIZE = Process_MAX + 1;

const std::string& Process_Name(Process value);
template<typename T>
inline const std::string& Process_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Process>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Process_Name.");
  return Process_Name(static_cast<Process>(enum_t_value));
}
bool Process_Parse(
    const std::string& name, Process* value);
enum Thread : int {
  UNKNOWN_THREAD = 0,
  MAIN_THREAD = 1,
  FILE_THREAD = 2,
  FILE_USER_BLOCKING_THREAD = 3,
  PROCESS_LAUNCHER_THREAD = 4,
  CACHE_THREAD = 5,
  IO_THREAD = 6,
  DB_THREAD = 7,
  GPU_MAIN_THREAD = 8,
  RENDER_THREAD = 9,
  UTILITY_THREAD = 10,
  COMPOSITOR_THREAD = 11,
  SCHEDULER_WORKER_THREAD = 13,
  COMPOSITOR_TILE_WORKER_THREAD = 14,
  SERVICE_WORKER_THREAD = 15,
  THREAD_POOL_THREAD = 16,
  GPU_MEMORY_THREAD = 17,
  OTHER_THREAD = 12
};
bool Thread_IsValid(int value);
constexpr Thread Thread_MIN = UNKNOWN_THREAD;
constexpr Thread Thread_MAX = GPU_MEMORY_THREAD;
constexpr int Thread_ARRAYSIZE = Thread_MAX + 1;

const std::string& Thread_Name(Thread value);
template<typename T>
inline const std::string& Thread_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Thread>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Thread_Name.");
  return Thread_Name(static_cast<Thread>(enum_t_value));
}
bool Thread_Parse(
    const std::string& name, Thread* value);
enum ProcessPhase : int {
  MAIN_LOOP_START = 0,
  MAIN_NAVIGATION_START = 1,
  MAIN_NAVIGATION_FINISHED = 2,
  FIRST_NONEMPTY_PAINT = 3,
  SHUTDOWN_START = 4
};
bool ProcessPhase_IsValid(int value);
constexpr ProcessPhase ProcessPhase_MIN = MAIN_LOOP_START;
constexpr ProcessPhase ProcessPhase_MAX = SHUTDOWN_START;
constexpr int ProcessPhase_ARRAYSIZE = ProcessPhase_MAX + 1;

const std::string& ProcessPhase_Name(ProcessPhase value);
template<typename T>
inline const std::string& ProcessPhase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessPhase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessPhase_Name.");
  return ProcessPhase_Name(static_cast<ProcessPhase>(enum_t_value));
}
bool ProcessPhase_Parse(
    const std::string& name, ProcessPhase* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::Process> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::Thread> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::ProcessPhase> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_execution_5fcontext_2eproto
