// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_os_app_list_launch_event.proto

#include "chrome_os_app_list_launch_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace metrics {
class ChromeOSAppListLaunchEventProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeOSAppListLaunchEventProto> _instance;
} _ChromeOSAppListLaunchEventProto_default_instance_;
}  // namespace metrics
static void InitDefaultsscc_info_ChromeOSAppListLaunchEventProto_chrome_5fos_5fapp_5flist_5flaunch_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_ChromeOSAppListLaunchEventProto_default_instance_;
    new (ptr) ::metrics::ChromeOSAppListLaunchEventProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::ChromeOSAppListLaunchEventProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeOSAppListLaunchEventProto_chrome_5fos_5fapp_5flist_5flaunch_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeOSAppListLaunchEventProto_chrome_5fos_5fapp_5flist_5flaunch_5fevent_2eproto}, {}};

namespace metrics {
bool ChromeOSAppListLaunchEventProto_LaunchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeOSAppListLaunchEventProto_LaunchType_strings[3] = {};

static const char ChromeOSAppListLaunchEventProto_LaunchType_names[] =
  "APP_TILES"
  "LAUNCH_TYPE_UNSPECIFIED"
  "RESULTS_LIST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeOSAppListLaunchEventProto_LaunchType_entries[] = {
  { {ChromeOSAppListLaunchEventProto_LaunchType_names + 0, 9}, 1 },
  { {ChromeOSAppListLaunchEventProto_LaunchType_names + 9, 23}, 0 },
  { {ChromeOSAppListLaunchEventProto_LaunchType_names + 32, 12}, 2 },
};

static const int ChromeOSAppListLaunchEventProto_LaunchType_entries_by_number[] = {
  1, // 0 -> LAUNCH_TYPE_UNSPECIFIED
  0, // 1 -> APP_TILES
  2, // 2 -> RESULTS_LIST
};

const std::string& ChromeOSAppListLaunchEventProto_LaunchType_Name(
    ChromeOSAppListLaunchEventProto_LaunchType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeOSAppListLaunchEventProto_LaunchType_entries,
          ChromeOSAppListLaunchEventProto_LaunchType_entries_by_number,
          3, ChromeOSAppListLaunchEventProto_LaunchType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeOSAppListLaunchEventProto_LaunchType_entries,
      ChromeOSAppListLaunchEventProto_LaunchType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeOSAppListLaunchEventProto_LaunchType_strings[idx].get();
}
bool ChromeOSAppListLaunchEventProto_LaunchType_Parse(
    const std::string& name, ChromeOSAppListLaunchEventProto_LaunchType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeOSAppListLaunchEventProto_LaunchType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ChromeOSAppListLaunchEventProto_LaunchType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeOSAppListLaunchEventProto_LaunchType ChromeOSAppListLaunchEventProto::LAUNCH_TYPE_UNSPECIFIED;
constexpr ChromeOSAppListLaunchEventProto_LaunchType ChromeOSAppListLaunchEventProto::APP_TILES;
constexpr ChromeOSAppListLaunchEventProto_LaunchType ChromeOSAppListLaunchEventProto::RESULTS_LIST;
constexpr ChromeOSAppListLaunchEventProto_LaunchType ChromeOSAppListLaunchEventProto::LaunchType_MIN;
constexpr ChromeOSAppListLaunchEventProto_LaunchType ChromeOSAppListLaunchEventProto::LaunchType_MAX;
constexpr int ChromeOSAppListLaunchEventProto::LaunchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeOSAppListLaunchEventProto_SearchProviderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeOSAppListLaunchEventProto_SearchProviderType_strings[4] = {};

static const char ChromeOSAppListLaunchEventProto_SearchProviderType_names[] =
  "DRIVE_QUICK_ACCESS"
  "OMNIBOX"
  "PROVIDER_UNSPECIFIED"
  "ZERO_STATE_FILE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeOSAppListLaunchEventProto_SearchProviderType_entries[] = {
  { {ChromeOSAppListLaunchEventProto_SearchProviderType_names + 0, 18}, 3 },
  { {ChromeOSAppListLaunchEventProto_SearchProviderType_names + 18, 7}, 1 },
  { {ChromeOSAppListLaunchEventProto_SearchProviderType_names + 25, 20}, 0 },
  { {ChromeOSAppListLaunchEventProto_SearchProviderType_names + 45, 15}, 2 },
};

static const int ChromeOSAppListLaunchEventProto_SearchProviderType_entries_by_number[] = {
  2, // 0 -> PROVIDER_UNSPECIFIED
  1, // 1 -> OMNIBOX
  3, // 2 -> ZERO_STATE_FILE
  0, // 3 -> DRIVE_QUICK_ACCESS
};

const std::string& ChromeOSAppListLaunchEventProto_SearchProviderType_Name(
    ChromeOSAppListLaunchEventProto_SearchProviderType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeOSAppListLaunchEventProto_SearchProviderType_entries,
          ChromeOSAppListLaunchEventProto_SearchProviderType_entries_by_number,
          4, ChromeOSAppListLaunchEventProto_SearchProviderType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeOSAppListLaunchEventProto_SearchProviderType_entries,
      ChromeOSAppListLaunchEventProto_SearchProviderType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeOSAppListLaunchEventProto_SearchProviderType_strings[idx].get();
}
bool ChromeOSAppListLaunchEventProto_SearchProviderType_Parse(
    const std::string& name, ChromeOSAppListLaunchEventProto_SearchProviderType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeOSAppListLaunchEventProto_SearchProviderType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeOSAppListLaunchEventProto_SearchProviderType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::PROVIDER_UNSPECIFIED;
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::OMNIBOX;
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::ZERO_STATE_FILE;
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::DRIVE_QUICK_ACCESS;
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::SearchProviderType_MIN;
constexpr ChromeOSAppListLaunchEventProto_SearchProviderType ChromeOSAppListLaunchEventProto::SearchProviderType_MAX;
constexpr int ChromeOSAppListLaunchEventProto::SearchProviderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ChromeOSAppListLaunchEventProto::InitAsDefaultInstance() {
}
class ChromeOSAppListLaunchEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeOSAppListLaunchEventProto>()._has_bits_);
  static void set_has_recurrence_ranker_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_launch_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_search_query_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hashed_target(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hashed_query(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hashed_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hashed_app(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_search_provider_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ChromeOSAppListLaunchEventProto::ChromeOSAppListLaunchEventProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.ChromeOSAppListLaunchEventProto)
}
ChromeOSAppListLaunchEventProto::ChromeOSAppListLaunchEventProto(const ChromeOSAppListLaunchEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&recurrence_ranker_user_id_, &from.recurrence_ranker_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hashed_app_) -
    reinterpret_cast<char*>(&recurrence_ranker_user_id_)) + sizeof(hashed_app_));
  // @@protoc_insertion_point(copy_constructor:metrics.ChromeOSAppListLaunchEventProto)
}

void ChromeOSAppListLaunchEventProto::SharedCtor() {
  ::memset(&recurrence_ranker_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hashed_app_) -
      reinterpret_cast<char*>(&recurrence_ranker_user_id_)) + sizeof(hashed_app_));
}

ChromeOSAppListLaunchEventProto::~ChromeOSAppListLaunchEventProto() {
  // @@protoc_insertion_point(destructor:metrics.ChromeOSAppListLaunchEventProto)
  SharedDtor();
}

void ChromeOSAppListLaunchEventProto::SharedDtor() {
}

void ChromeOSAppListLaunchEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeOSAppListLaunchEventProto& ChromeOSAppListLaunchEventProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeOSAppListLaunchEventProto_chrome_5fos_5fapp_5flist_5flaunch_5fevent_2eproto.base);
  return *internal_default_instance();
}


void ChromeOSAppListLaunchEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ChromeOSAppListLaunchEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&recurrence_ranker_user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hashed_domain_) -
        reinterpret_cast<char*>(&recurrence_ranker_user_id_)) + sizeof(hashed_domain_));
  }
  hashed_app_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeOSAppListLaunchEventProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 recurrence_ranker_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_recurrence_ranker_user_id(&has_bits);
          recurrence_ranker_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .metrics.ChromeOSAppListLaunchEventProto.LaunchType launch_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::ChromeOSAppListLaunchEventProto_LaunchType_IsValid(val))) {
            set_launch_type(static_cast<::metrics::ChromeOSAppListLaunchEventProto_LaunchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 hour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hour(&has_bits);
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 search_query_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_search_query_length(&has_bits);
          search_query_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 hashed_target = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_hashed_target(&has_bits);
          hashed_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 hashed_query = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_hashed_query(&has_bits);
          hashed_query_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 hashed_domain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_hashed_domain(&has_bits);
          hashed_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 hashed_app = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_hashed_app(&has_bits);
          hashed_app_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .metrics.ChromeOSAppListLaunchEventProto.SearchProviderType search_provider_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::ChromeOSAppListLaunchEventProto_SearchProviderType_IsValid(val))) {
            set_search_provider_type(static_cast<::metrics::ChromeOSAppListLaunchEventProto_SearchProviderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeOSAppListLaunchEventProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.ChromeOSAppListLaunchEventProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 recurrence_ranker_user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_recurrence_ranker_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &recurrence_ranker_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.ChromeOSAppListLaunchEventProto.LaunchType launch_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::ChromeOSAppListLaunchEventProto_LaunchType_IsValid(value)) {
            set_launch_type(static_cast< ::metrics::ChromeOSAppListLaunchEventProto_LaunchType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hour = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_hour(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 search_query_length = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_search_query_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_query_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hashed_target = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_hashed_target(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hashed_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hashed_query = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          _Internal::set_has_hashed_query(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hashed_query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hashed_domain = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          _Internal::set_has_hashed_domain(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hashed_domain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hashed_app = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {
          _Internal::set_has_hashed_app(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hashed_app_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.ChromeOSAppListLaunchEventProto.SearchProviderType search_provider_type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::ChromeOSAppListLaunchEventProto_SearchProviderType_IsValid(value)) {
            set_search_provider_type(static_cast< ::metrics::ChromeOSAppListLaunchEventProto_SearchProviderType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.ChromeOSAppListLaunchEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.ChromeOSAppListLaunchEventProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeOSAppListLaunchEventProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.ChromeOSAppListLaunchEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 recurrence_ranker_user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->recurrence_ranker_user_id(), output);
  }

  // optional .metrics.ChromeOSAppListLaunchEventProto.LaunchType launch_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->launch_type(), output);
  }

  // optional int32 hour = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->hour(), output);
  }

  // optional int32 search_query_length = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->search_query_length(), output);
  }

  // optional fixed64 hashed_target = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(5, this->hashed_target(), output);
  }

  // optional fixed64 hashed_query = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(6, this->hashed_query(), output);
  }

  // optional fixed64 hashed_domain = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(7, this->hashed_domain(), output);
  }

  // optional fixed64 hashed_app = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(8, this->hashed_app(), output);
  }

  // optional .metrics.ChromeOSAppListLaunchEventProto.SearchProviderType search_provider_type = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->search_provider_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.ChromeOSAppListLaunchEventProto)
}

size_t ChromeOSAppListLaunchEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ChromeOSAppListLaunchEventProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 recurrence_ranker_user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .metrics.ChromeOSAppListLaunchEventProto.LaunchType launch_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->launch_type());
    }

    // optional int32 hour = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->hour());
    }

    // optional fixed64 hashed_target = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 hashed_query = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 search_query_length = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->search_query_length());
    }

    // optional .metrics.ChromeOSAppListLaunchEventProto.SearchProviderType search_provider_type = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->search_provider_type());
    }

    // optional fixed64 hashed_domain = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional fixed64 hashed_app = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeOSAppListLaunchEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeOSAppListLaunchEventProto*>(
      &from));
}

void ChromeOSAppListLaunchEventProto::MergeFrom(const ChromeOSAppListLaunchEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.ChromeOSAppListLaunchEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      recurrence_ranker_user_id_ = from.recurrence_ranker_user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      launch_type_ = from.launch_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000008u) {
      hashed_target_ = from.hashed_target_;
    }
    if (cached_has_bits & 0x00000010u) {
      hashed_query_ = from.hashed_query_;
    }
    if (cached_has_bits & 0x00000020u) {
      search_query_length_ = from.search_query_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      search_provider_type_ = from.search_provider_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      hashed_domain_ = from.hashed_domain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_hashed_app(from.hashed_app());
  }
}

void ChromeOSAppListLaunchEventProto::CopyFrom(const ChromeOSAppListLaunchEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ChromeOSAppListLaunchEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeOSAppListLaunchEventProto::IsInitialized() const {
  return true;
}

void ChromeOSAppListLaunchEventProto::InternalSwap(ChromeOSAppListLaunchEventProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recurrence_ranker_user_id_, other->recurrence_ranker_user_id_);
  swap(launch_type_, other->launch_type_);
  swap(hour_, other->hour_);
  swap(hashed_target_, other->hashed_target_);
  swap(hashed_query_, other->hashed_query_);
  swap(search_query_length_, other->search_query_length_);
  swap(search_provider_type_, other->search_provider_type_);
  swap(hashed_domain_, other->hashed_domain_);
  swap(hashed_app_, other->hashed_app_);
}

std::string ChromeOSAppListLaunchEventProto::GetTypeName() const {
  return "metrics.ChromeOSAppListLaunchEventProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::ChromeOSAppListLaunchEventProto* Arena::CreateMaybeMessage< ::metrics::ChromeOSAppListLaunchEventProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::ChromeOSAppListLaunchEventProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
