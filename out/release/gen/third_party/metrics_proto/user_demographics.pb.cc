// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_demographics.proto

#include "user_demographics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace metrics {
class UserDemographicsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDemographicsProto> _instance;
} _UserDemographicsProto_default_instance_;
}  // namespace metrics
static void InitDefaultsscc_info_UserDemographicsProto_user_5fdemographics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_UserDemographicsProto_default_instance_;
    new (ptr) ::metrics::UserDemographicsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::UserDemographicsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserDemographicsProto_user_5fdemographics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserDemographicsProto_user_5fdemographics_2eproto}, {}};

namespace metrics {
bool UserDemographicsProto_Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UserDemographicsProto_Gender_strings[4] = {};

static const char UserDemographicsProto_Gender_names[] =
  "GENDER_CUSTOM_OR_OTHER"
  "GENDER_FEMALE"
  "GENDER_MALE"
  "GENDER_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UserDemographicsProto_Gender_entries[] = {
  { {UserDemographicsProto_Gender_names + 0, 22}, 3 },
  { {UserDemographicsProto_Gender_names + 22, 13}, 2 },
  { {UserDemographicsProto_Gender_names + 35, 11}, 1 },
  { {UserDemographicsProto_Gender_names + 46, 14}, 0 },
};

static const int UserDemographicsProto_Gender_entries_by_number[] = {
  3, // 0 -> GENDER_UNKNOWN
  2, // 1 -> GENDER_MALE
  1, // 2 -> GENDER_FEMALE
  0, // 3 -> GENDER_CUSTOM_OR_OTHER
};

const std::string& UserDemographicsProto_Gender_Name(
    UserDemographicsProto_Gender value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UserDemographicsProto_Gender_entries,
          UserDemographicsProto_Gender_entries_by_number,
          4, UserDemographicsProto_Gender_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UserDemographicsProto_Gender_entries,
      UserDemographicsProto_Gender_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UserDemographicsProto_Gender_strings[idx].get();
}
bool UserDemographicsProto_Gender_Parse(
    const std::string& name, UserDemographicsProto_Gender* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UserDemographicsProto_Gender_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<UserDemographicsProto_Gender>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserDemographicsProto_Gender UserDemographicsProto::GENDER_UNKNOWN;
constexpr UserDemographicsProto_Gender UserDemographicsProto::GENDER_MALE;
constexpr UserDemographicsProto_Gender UserDemographicsProto::GENDER_FEMALE;
constexpr UserDemographicsProto_Gender UserDemographicsProto::GENDER_CUSTOM_OR_OTHER;
constexpr UserDemographicsProto_Gender UserDemographicsProto::Gender_MIN;
constexpr UserDemographicsProto_Gender UserDemographicsProto::Gender_MAX;
constexpr int UserDemographicsProto::Gender_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void UserDemographicsProto::InitAsDefaultInstance() {
}
class UserDemographicsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDemographicsProto>()._has_bits_);
  static void set_has_birth_year(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gender(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserDemographicsProto::UserDemographicsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.UserDemographicsProto)
}
UserDemographicsProto::UserDemographicsProto(const UserDemographicsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&birth_year_, &from.birth_year_,
    static_cast<size_t>(reinterpret_cast<char*>(&gender_) -
    reinterpret_cast<char*>(&birth_year_)) + sizeof(gender_));
  // @@protoc_insertion_point(copy_constructor:metrics.UserDemographicsProto)
}

void UserDemographicsProto::SharedCtor() {
  ::memset(&birth_year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gender_) -
      reinterpret_cast<char*>(&birth_year_)) + sizeof(gender_));
}

UserDemographicsProto::~UserDemographicsProto() {
  // @@protoc_insertion_point(destructor:metrics.UserDemographicsProto)
  SharedDtor();
}

void UserDemographicsProto::SharedDtor() {
}

void UserDemographicsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDemographicsProto& UserDemographicsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDemographicsProto_user_5fdemographics_2eproto.base);
  return *internal_default_instance();
}


void UserDemographicsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.UserDemographicsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&birth_year_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gender_) -
        reinterpret_cast<char*>(&birth_year_)) + sizeof(gender_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserDemographicsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 birth_year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_birth_year(&has_bits);
          birth_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.UserDemographicsProto.Gender gender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::UserDemographicsProto_Gender_IsValid(val))) {
            set_gender(static_cast<::metrics::UserDemographicsProto_Gender>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserDemographicsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.UserDemographicsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 birth_year = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_birth_year(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &birth_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.UserDemographicsProto.Gender gender = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::UserDemographicsProto_Gender_IsValid(value)) {
            set_gender(static_cast< ::metrics::UserDemographicsProto_Gender >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.UserDemographicsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.UserDemographicsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserDemographicsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.UserDemographicsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 birth_year = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->birth_year(), output);
  }

  // optional .metrics.UserDemographicsProto.Gender gender = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->gender(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.UserDemographicsProto)
}

size_t UserDemographicsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.UserDemographicsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 birth_year = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->birth_year());
    }

    // optional .metrics.UserDemographicsProto.Gender gender = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gender());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDemographicsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserDemographicsProto*>(
      &from));
}

void UserDemographicsProto::MergeFrom(const UserDemographicsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.UserDemographicsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      birth_year_ = from.birth_year_;
    }
    if (cached_has_bits & 0x00000002u) {
      gender_ = from.gender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDemographicsProto::CopyFrom(const UserDemographicsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.UserDemographicsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDemographicsProto::IsInitialized() const {
  return true;
}

void UserDemographicsProto::InternalSwap(UserDemographicsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(birth_year_, other->birth_year_);
  swap(gender_, other->gender_);
}

std::string UserDemographicsProto::GetTypeName() const {
  return "metrics.UserDemographicsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::UserDemographicsProto* Arena::CreateMaybeMessage< ::metrics::UserDemographicsProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::UserDemographicsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
