// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_profile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_5fprofile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_5fprofile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "extension_install.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_5fprofile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_5fprofile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace metrics {
class SystemProfileProto;
class SystemProfileProtoDefaultTypeInternal;
extern SystemProfileProtoDefaultTypeInternal _SystemProfileProto_default_instance_;
class SystemProfileProto_AntiVirusProduct;
class SystemProfileProto_AntiVirusProductDefaultTypeInternal;
extern SystemProfileProto_AntiVirusProductDefaultTypeInternal _SystemProfileProto_AntiVirusProduct_default_instance_;
class SystemProfileProto_ChromeComponent;
class SystemProfileProto_ChromeComponentDefaultTypeInternal;
extern SystemProfileProto_ChromeComponentDefaultTypeInternal _SystemProfileProto_ChromeComponent_default_instance_;
class SystemProfileProto_ExternalAccessPoint;
class SystemProfileProto_ExternalAccessPointDefaultTypeInternal;
extern SystemProfileProto_ExternalAccessPointDefaultTypeInternal _SystemProfileProto_ExternalAccessPoint_default_instance_;
class SystemProfileProto_ExternalAudioVideoDevice;
class SystemProfileProto_ExternalAudioVideoDeviceDefaultTypeInternal;
extern SystemProfileProto_ExternalAudioVideoDeviceDefaultTypeInternal _SystemProfileProto_ExternalAudioVideoDevice_default_instance_;
class SystemProfileProto_ExternalAudioVideoDevice_AudioDescription;
class SystemProfileProto_ExternalAudioVideoDevice_AudioDescriptionDefaultTypeInternal;
extern SystemProfileProto_ExternalAudioVideoDevice_AudioDescriptionDefaultTypeInternal _SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_default_instance_;
class SystemProfileProto_ExternalAudioVideoDevice_CECCommand;
class SystemProfileProto_ExternalAudioVideoDevice_CECCommandDefaultTypeInternal;
extern SystemProfileProto_ExternalAudioVideoDevice_CECCommandDefaultTypeInternal _SystemProfileProto_ExternalAudioVideoDevice_CECCommand_default_instance_;
class SystemProfileProto_FieldTrial;
class SystemProfileProto_FieldTrialDefaultTypeInternal;
extern SystemProfileProto_FieldTrialDefaultTypeInternal _SystemProfileProto_FieldTrial_default_instance_;
class SystemProfileProto_GoogleUpdate;
class SystemProfileProto_GoogleUpdateDefaultTypeInternal;
extern SystemProfileProto_GoogleUpdateDefaultTypeInternal _SystemProfileProto_GoogleUpdate_default_instance_;
class SystemProfileProto_GoogleUpdate_ProductInfo;
class SystemProfileProto_GoogleUpdate_ProductInfoDefaultTypeInternal;
extern SystemProfileProto_GoogleUpdate_ProductInfoDefaultTypeInternal _SystemProfileProto_GoogleUpdate_ProductInfo_default_instance_;
class SystemProfileProto_Hardware;
class SystemProfileProto_HardwareDefaultTypeInternal;
extern SystemProfileProto_HardwareDefaultTypeInternal _SystemProfileProto_Hardware_default_instance_;
class SystemProfileProto_Hardware_Bluetooth;
class SystemProfileProto_Hardware_BluetoothDefaultTypeInternal;
extern SystemProfileProto_Hardware_BluetoothDefaultTypeInternal _SystemProfileProto_Hardware_Bluetooth_default_instance_;
class SystemProfileProto_Hardware_Bluetooth_PairedDevice;
class SystemProfileProto_Hardware_Bluetooth_PairedDeviceDefaultTypeInternal;
extern SystemProfileProto_Hardware_Bluetooth_PairedDeviceDefaultTypeInternal _SystemProfileProto_Hardware_Bluetooth_PairedDevice_default_instance_;
class SystemProfileProto_Hardware_CPU;
class SystemProfileProto_Hardware_CPUDefaultTypeInternal;
extern SystemProfileProto_Hardware_CPUDefaultTypeInternal _SystemProfileProto_Hardware_CPU_default_instance_;
class SystemProfileProto_Hardware_DeprecatedTouchScreen;
class SystemProfileProto_Hardware_DeprecatedTouchScreenDefaultTypeInternal;
extern SystemProfileProto_Hardware_DeprecatedTouchScreenDefaultTypeInternal _SystemProfileProto_Hardware_DeprecatedTouchScreen_default_instance_;
class SystemProfileProto_Hardware_Drive;
class SystemProfileProto_Hardware_DriveDefaultTypeInternal;
extern SystemProfileProto_Hardware_DriveDefaultTypeInternal _SystemProfileProto_Hardware_Drive_default_instance_;
class SystemProfileProto_Hardware_Graphics;
class SystemProfileProto_Hardware_GraphicsDefaultTypeInternal;
extern SystemProfileProto_Hardware_GraphicsDefaultTypeInternal _SystemProfileProto_Hardware_Graphics_default_instance_;
class SystemProfileProto_Hardware_USB;
class SystemProfileProto_Hardware_USBDefaultTypeInternal;
extern SystemProfileProto_Hardware_USBDefaultTypeInternal _SystemProfileProto_Hardware_USB_default_instance_;
class SystemProfileProto_Hardware_USB_USBDevice;
class SystemProfileProto_Hardware_USB_USBDeviceDefaultTypeInternal;
extern SystemProfileProto_Hardware_USB_USBDeviceDefaultTypeInternal _SystemProfileProto_Hardware_USB_USBDevice_default_instance_;
class SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor;
class SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptorDefaultTypeInternal;
extern SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptorDefaultTypeInternal _SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor_default_instance_;
class SystemProfileProto_LinkedAndroidPhoneData;
class SystemProfileProto_LinkedAndroidPhoneDataDefaultTypeInternal;
extern SystemProfileProto_LinkedAndroidPhoneDataDefaultTypeInternal _SystemProfileProto_LinkedAndroidPhoneData_default_instance_;
class SystemProfileProto_Network;
class SystemProfileProto_NetworkDefaultTypeInternal;
extern SystemProfileProto_NetworkDefaultTypeInternal _SystemProfileProto_Network_default_instance_;
class SystemProfileProto_Network_WifiAccessPoint;
class SystemProfileProto_Network_WifiAccessPointDefaultTypeInternal;
extern SystemProfileProto_Network_WifiAccessPointDefaultTypeInternal _SystemProfileProto_Network_WifiAccessPoint_default_instance_;
class SystemProfileProto_Network_WifiAccessPoint_VendorInformation;
class SystemProfileProto_Network_WifiAccessPoint_VendorInformationDefaultTypeInternal;
extern SystemProfileProto_Network_WifiAccessPoint_VendorInformationDefaultTypeInternal _SystemProfileProto_Network_WifiAccessPoint_VendorInformation_default_instance_;
class SystemProfileProto_OS;
class SystemProfileProto_OSDefaultTypeInternal;
extern SystemProfileProto_OSDefaultTypeInternal _SystemProfileProto_OS_default_instance_;
class SystemProfileProto_OS_Arc;
class SystemProfileProto_OS_ArcDefaultTypeInternal;
extern SystemProfileProto_OS_ArcDefaultTypeInternal _SystemProfileProto_OS_Arc_default_instance_;
class SystemProfileProto_Plugin;
class SystemProfileProto_PluginDefaultTypeInternal;
extern SystemProfileProto_PluginDefaultTypeInternal _SystemProfileProto_Plugin_default_instance_;
class SystemProfileProto_Stability;
class SystemProfileProto_StabilityDefaultTypeInternal;
extern SystemProfileProto_StabilityDefaultTypeInternal _SystemProfileProto_Stability_default_instance_;
class SystemProfileProto_Stability_PluginStability;
class SystemProfileProto_Stability_PluginStabilityDefaultTypeInternal;
extern SystemProfileProto_Stability_PluginStabilityDefaultTypeInternal _SystemProfileProto_Stability_PluginStability_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::SystemProfileProto* Arena::CreateMaybeMessage<::metrics::SystemProfileProto>(Arena*);
template<> ::metrics::SystemProfileProto_AntiVirusProduct* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_AntiVirusProduct>(Arena*);
template<> ::metrics::SystemProfileProto_ChromeComponent* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_ChromeComponent>(Arena*);
template<> ::metrics::SystemProfileProto_ExternalAccessPoint* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_ExternalAccessPoint>(Arena*);
template<> ::metrics::SystemProfileProto_ExternalAudioVideoDevice* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_ExternalAudioVideoDevice>(Arena*);
template<> ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription>(Arena*);
template<> ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand>(Arena*);
template<> ::metrics::SystemProfileProto_FieldTrial* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_FieldTrial>(Arena*);
template<> ::metrics::SystemProfileProto_GoogleUpdate* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_GoogleUpdate>(Arena*);
template<> ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_GoogleUpdate_ProductInfo>(Arena*);
template<> ::metrics::SystemProfileProto_Hardware* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Hardware>(Arena*);
template<> ::metrics::SystemProfileProto_Hardware_Bluetooth* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_Bluetooth>(Arena*);
template<> ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice>(Arena*);
template<> ::metrics::SystemProfileProto_Hardware_CPU* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_CPU>(Arena*);
template<> ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen>(Arena*);
template<> ::metrics::SystemProfileProto_Hardware_Drive* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_Drive>(Arena*);
template<> ::metrics::SystemProfileProto_Hardware_Graphics* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_Graphics>(Arena*);
template<> ::metrics::SystemProfileProto_Hardware_USB* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_USB>(Arena*);
template<> ::metrics::SystemProfileProto_Hardware_USB_USBDevice* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_USB_USBDevice>(Arena*);
template<> ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor>(Arena*);
template<> ::metrics::SystemProfileProto_LinkedAndroidPhoneData* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_LinkedAndroidPhoneData>(Arena*);
template<> ::metrics::SystemProfileProto_Network* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Network>(Arena*);
template<> ::metrics::SystemProfileProto_Network_WifiAccessPoint* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Network_WifiAccessPoint>(Arena*);
template<> ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation>(Arena*);
template<> ::metrics::SystemProfileProto_OS* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_OS>(Arena*);
template<> ::metrics::SystemProfileProto_OS_Arc* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_OS_Arc>(Arena*);
template<> ::metrics::SystemProfileProto_Plugin* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Plugin>(Arena*);
template<> ::metrics::SystemProfileProto_Stability* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Stability>(Arena*);
template<> ::metrics::SystemProfileProto_Stability_PluginStability* Arena::CreateMaybeMessage<::metrics::SystemProfileProto_Stability_PluginStability>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type : int {
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_UNKNOWN = 0,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_COMPUTER = 1,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_PHONE = 2,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_MODEM = 3,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_AUDIO = 4,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_CAR_AUDIO = 5,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_VIDEO = 6,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_PERIPHERAL = 7,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_JOYSTICK = 8,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_GAMEPAD = 9,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_KEYBOARD = 10,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_MOUSE = 11,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_TABLET = 12,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_KEYBOARD_MOUSE_COMBO = 13
};
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_IsValid(int value);
constexpr SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Type_MIN = SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_UNKNOWN;
constexpr SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Type_MAX = SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_KEYBOARD_MOUSE_COMBO;
constexpr int SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Type_ARRAYSIZE = SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Type_MAX + 1;

const std::string& SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Name(SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type value);
template<typename T>
inline const std::string& SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Name.");
  return SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Name(static_cast<SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type>(enum_t_value));
}
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Parse(
    const std::string& name, SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type* value);
enum SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource : int {
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VENDOR_ID_UNKNOWN = 0,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VENDOR_ID_BLUETOOTH = 1,
  SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VENDOR_ID_USB = 2
};
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_IsValid(int value);
constexpr SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VendorIDSource_MIN = SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VENDOR_ID_UNKNOWN;
constexpr SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VendorIDSource_MAX = SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VENDOR_ID_USB;
constexpr int SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VendorIDSource_ARRAYSIZE = SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VendorIDSource_MAX + 1;

const std::string& SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_Name(SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource value);
template<typename T>
inline const std::string& SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_Name.");
  return SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_Name(static_cast<SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource>(enum_t_value));
}
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_Parse(
    const std::string& name, SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource* value);
enum SystemProfileProto_Hardware_FormFactor : int {
  SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_UNKNOWN = 0,
  SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_DESKTOP = 1,
  SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_PHONE = 2,
  SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_TABLET = 3,
  SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_KIOSK = 4
};
bool SystemProfileProto_Hardware_FormFactor_IsValid(int value);
constexpr SystemProfileProto_Hardware_FormFactor SystemProfileProto_Hardware_FormFactor_FormFactor_MIN = SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_UNKNOWN;
constexpr SystemProfileProto_Hardware_FormFactor SystemProfileProto_Hardware_FormFactor_FormFactor_MAX = SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_KIOSK;
constexpr int SystemProfileProto_Hardware_FormFactor_FormFactor_ARRAYSIZE = SystemProfileProto_Hardware_FormFactor_FormFactor_MAX + 1;

const std::string& SystemProfileProto_Hardware_FormFactor_Name(SystemProfileProto_Hardware_FormFactor value);
template<typename T>
inline const std::string& SystemProfileProto_Hardware_FormFactor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_Hardware_FormFactor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_Hardware_FormFactor_Name.");
  return SystemProfileProto_Hardware_FormFactor_Name(static_cast<SystemProfileProto_Hardware_FormFactor>(enum_t_value));
}
bool SystemProfileProto_Hardware_FormFactor_Parse(
    const std::string& name, SystemProfileProto_Hardware_FormFactor* value);
enum SystemProfileProto_Network_WifiAccessPoint_SecurityMode : int {
  SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_UNKNOWN = 0,
  SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_WPA = 1,
  SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_WEP = 2,
  SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_RSN = 3,
  SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_802_1X = 4,
  SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_PSK = 5,
  SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_NONE = 6
};
bool SystemProfileProto_Network_WifiAccessPoint_SecurityMode_IsValid(int value);
constexpr SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SecurityMode_MIN = SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_UNKNOWN;
constexpr SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SecurityMode_MAX = SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_NONE;
constexpr int SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SecurityMode_ARRAYSIZE = SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SecurityMode_MAX + 1;

const std::string& SystemProfileProto_Network_WifiAccessPoint_SecurityMode_Name(SystemProfileProto_Network_WifiAccessPoint_SecurityMode value);
template<typename T>
inline const std::string& SystemProfileProto_Network_WifiAccessPoint_SecurityMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_Network_WifiAccessPoint_SecurityMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_Network_WifiAccessPoint_SecurityMode_Name.");
  return SystemProfileProto_Network_WifiAccessPoint_SecurityMode_Name(static_cast<SystemProfileProto_Network_WifiAccessPoint_SecurityMode>(enum_t_value));
}
bool SystemProfileProto_Network_WifiAccessPoint_SecurityMode_Parse(
    const std::string& name, SystemProfileProto_Network_WifiAccessPoint_SecurityMode* value);
enum SystemProfileProto_Network_ConnectionType : int {
  SystemProfileProto_Network_ConnectionType_CONNECTION_UNKNOWN = 0,
  SystemProfileProto_Network_ConnectionType_CONNECTION_ETHERNET = 1,
  SystemProfileProto_Network_ConnectionType_CONNECTION_WIFI = 2,
  SystemProfileProto_Network_ConnectionType_CONNECTION_2G = 3,
  SystemProfileProto_Network_ConnectionType_CONNECTION_3G = 4,
  SystemProfileProto_Network_ConnectionType_CONNECTION_4G = 5,
  SystemProfileProto_Network_ConnectionType_CONNECTION_BLUETOOTH = 6,
  SystemProfileProto_Network_ConnectionType_CONNECTION_NONE = 7,
  SystemProfileProto_Network_ConnectionType_CONNECTION_AMBIGUOUS = 8
};
bool SystemProfileProto_Network_ConnectionType_IsValid(int value);
constexpr SystemProfileProto_Network_ConnectionType SystemProfileProto_Network_ConnectionType_ConnectionType_MIN = SystemProfileProto_Network_ConnectionType_CONNECTION_UNKNOWN;
constexpr SystemProfileProto_Network_ConnectionType SystemProfileProto_Network_ConnectionType_ConnectionType_MAX = SystemProfileProto_Network_ConnectionType_CONNECTION_AMBIGUOUS;
constexpr int SystemProfileProto_Network_ConnectionType_ConnectionType_ARRAYSIZE = SystemProfileProto_Network_ConnectionType_ConnectionType_MAX + 1;

const std::string& SystemProfileProto_Network_ConnectionType_Name(SystemProfileProto_Network_ConnectionType value);
template<typename T>
inline const std::string& SystemProfileProto_Network_ConnectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_Network_ConnectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_Network_ConnectionType_Name.");
  return SystemProfileProto_Network_ConnectionType_Name(static_cast<SystemProfileProto_Network_ConnectionType>(enum_t_value));
}
bool SystemProfileProto_Network_ConnectionType_Parse(
    const std::string& name, SystemProfileProto_Network_ConnectionType* value);
enum SystemProfileProto_Network_WifiPHYLayerProtocol : int {
  SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_NONE = 0,
  SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_ANCIENT = 1,
  SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_A = 2,
  SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_B = 3,
  SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_G = 4,
  SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_N = 5,
  SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_UNKNOWN = 6
};
bool SystemProfileProto_Network_WifiPHYLayerProtocol_IsValid(int value);
constexpr SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network_WifiPHYLayerProtocol_WifiPHYLayerProtocol_MIN = SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_NONE;
constexpr SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network_WifiPHYLayerProtocol_WifiPHYLayerProtocol_MAX = SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_UNKNOWN;
constexpr int SystemProfileProto_Network_WifiPHYLayerProtocol_WifiPHYLayerProtocol_ARRAYSIZE = SystemProfileProto_Network_WifiPHYLayerProtocol_WifiPHYLayerProtocol_MAX + 1;

const std::string& SystemProfileProto_Network_WifiPHYLayerProtocol_Name(SystemProfileProto_Network_WifiPHYLayerProtocol value);
template<typename T>
inline const std::string& SystemProfileProto_Network_WifiPHYLayerProtocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_Network_WifiPHYLayerProtocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_Network_WifiPHYLayerProtocol_Name.");
  return SystemProfileProto_Network_WifiPHYLayerProtocol_Name(static_cast<SystemProfileProto_Network_WifiPHYLayerProtocol>(enum_t_value));
}
bool SystemProfileProto_Network_WifiPHYLayerProtocol_Parse(
    const std::string& name, SystemProfileProto_Network_WifiPHYLayerProtocol* value);
enum SystemProfileProto_Network_EffectiveConnectionType : int {
  SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_UNKNOWN = 0,
  SystemProfileProto_Network_EffectiveConnectionType_DEPRECATED_EFFECTIVE_CONNECTION_TYPE_AMBIGUOUS PROTOBUF_DEPRECATED = 1,
  SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_OFFLINE = 2,
  SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_SLOW_2G = 3,
  SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_2G = 4,
  SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_3G = 5,
  SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_4G = 6
};
bool SystemProfileProto_Network_EffectiveConnectionType_IsValid(int value);
constexpr SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network_EffectiveConnectionType_EffectiveConnectionType_MIN = SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
constexpr SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network_EffectiveConnectionType_EffectiveConnectionType_MAX = SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_4G;
constexpr int SystemProfileProto_Network_EffectiveConnectionType_EffectiveConnectionType_ARRAYSIZE = SystemProfileProto_Network_EffectiveConnectionType_EffectiveConnectionType_MAX + 1;

const std::string& SystemProfileProto_Network_EffectiveConnectionType_Name(SystemProfileProto_Network_EffectiveConnectionType value);
template<typename T>
inline const std::string& SystemProfileProto_Network_EffectiveConnectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_Network_EffectiveConnectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_Network_EffectiveConnectionType_Name.");
  return SystemProfileProto_Network_EffectiveConnectionType_Name(static_cast<SystemProfileProto_Network_EffectiveConnectionType>(enum_t_value));
}
bool SystemProfileProto_Network_EffectiveConnectionType_Parse(
    const std::string& name, SystemProfileProto_Network_EffectiveConnectionType* value);
enum SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult : int {
  SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_SUCCESS = 0,
  SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_FAILED_CUSTOM_ERROR = 1,
  SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_FAILED_MSI_ERROR = 2,
  SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_FAILED_SYSTEM_ERROR = 3,
  SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_EXIT_CODE = 4
};
bool SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_IsValid(int value);
constexpr SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_InstallResult_MIN = SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_SUCCESS;
constexpr SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_InstallResult_MAX = SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_EXIT_CODE;
constexpr int SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_InstallResult_ARRAYSIZE = SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_InstallResult_MAX + 1;

const std::string& SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_Name(SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult value);
template<typename T>
inline const std::string& SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_Name.");
  return SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_Name(static_cast<SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult>(enum_t_value));
}
bool SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_Parse(
    const std::string& name, SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult* value);
enum SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat : int {
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_UNKNOWN = 0,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_LPCM = 1,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_AC_3 = 2,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MPEG1 = 3,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MP3 = 4,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MPEG2 = 5,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_AAC = 6,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_DTS = 7,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_ATRAC = 8,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_ONE_BIT = 9,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_DD_PLUS = 10,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_DTS_HD = 11,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MLP_DOLBY_TRUEHD = 12,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_DST_AUDIO = 13,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MICROSOFT_WMA_PRO = 14
};
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_IsValid(int value);
constexpr SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AudioFormat_MIN = SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_UNKNOWN;
constexpr SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AudioFormat_MAX = SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MICROSOFT_WMA_PRO;
constexpr int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AudioFormat_ARRAYSIZE = SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AudioFormat_MAX + 1;

const std::string& SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_Name(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat value);
template<typename T>
inline const std::string& SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_Name.");
  return SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_Name(static_cast<SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat>(enum_t_value));
}
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_Parse(
    const std::string& name, SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat* value);
enum SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode : int {
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_ANALOG = 0,
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_DIGITAL = 1
};
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_IsValid(int value);
constexpr SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_OutputMode_MIN = SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_ANALOG;
constexpr SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_OutputMode_MAX = SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_DIGITAL;
constexpr int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_OutputMode_ARRAYSIZE = SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_OutputMode_MAX + 1;

const std::string& SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_Name(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode value);
template<typename T>
inline const std::string& SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_Name.");
  return SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_Name(static_cast<SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode>(enum_t_value));
}
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_Parse(
    const std::string& name, SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode* value);
enum SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType : int {
  SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_UNKNOWN = 0,
  SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_TV = 1,
  SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_RECORDER = 2,
  SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_TUNER = 3,
  SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_PLAYER = 4,
  SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_AUDIO_SYSTEM = 5
};
bool SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid(int value);
constexpr SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AVDeviceType_MIN = SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_UNKNOWN;
constexpr SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AVDeviceType_MAX = SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_AUDIO_SYSTEM;
constexpr int SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AVDeviceType_ARRAYSIZE = SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AVDeviceType_MAX + 1;

const std::string& SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_Name(SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType value);
template<typename T>
inline const std::string& SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_Name.");
  return SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_Name(static_cast<SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType>(enum_t_value));
}
bool SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_Parse(
    const std::string& name, SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType* value);
enum SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding : int {
  SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_UNKNOWN = 0,
  SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_RGB = 1,
  SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_YUV444 = 2,
  SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_YUV422 = 3,
  SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_YUV420 = 4
};
bool SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_IsValid(int value);
constexpr SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_ColorEncoding_MIN = SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_UNKNOWN;
constexpr SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_ColorEncoding_MAX = SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_YUV420;
constexpr int SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_ColorEncoding_ARRAYSIZE = SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_ColorEncoding_MAX + 1;

const std::string& SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_Name(SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding value);
template<typename T>
inline const std::string& SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_Name.");
  return SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_Name(static_cast<SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding>(enum_t_value));
}
bool SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_Parse(
    const std::string& name, SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding* value);
enum SystemProfileProto_Channel : int {
  SystemProfileProto_Channel_CHANNEL_UNKNOWN = 0,
  SystemProfileProto_Channel_CHANNEL_CANARY = 1,
  SystemProfileProto_Channel_CHANNEL_DEV = 2,
  SystemProfileProto_Channel_CHANNEL_BETA = 3,
  SystemProfileProto_Channel_CHANNEL_STABLE = 4
};
bool SystemProfileProto_Channel_IsValid(int value);
constexpr SystemProfileProto_Channel SystemProfileProto_Channel_Channel_MIN = SystemProfileProto_Channel_CHANNEL_UNKNOWN;
constexpr SystemProfileProto_Channel SystemProfileProto_Channel_Channel_MAX = SystemProfileProto_Channel_CHANNEL_STABLE;
constexpr int SystemProfileProto_Channel_Channel_ARRAYSIZE = SystemProfileProto_Channel_Channel_MAX + 1;

const std::string& SystemProfileProto_Channel_Name(SystemProfileProto_Channel value);
template<typename T>
inline const std::string& SystemProfileProto_Channel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_Channel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_Channel_Name.");
  return SystemProfileProto_Channel_Name(static_cast<SystemProfileProto_Channel>(enum_t_value));
}
bool SystemProfileProto_Channel_Parse(
    const std::string& name, SystemProfileProto_Channel* value);
enum SystemProfileProto_ExtensionsState : int {
  SystemProfileProto_ExtensionsState_NO_EXTENSIONS = 0,
  SystemProfileProto_ExtensionsState_NO_OFFSTORE_VERIFIED = 1,
  SystemProfileProto_ExtensionsState_NO_OFFSTORE_UNVERIFIED = 2,
  SystemProfileProto_ExtensionsState_HAS_OFFSTORE = 3
};
bool SystemProfileProto_ExtensionsState_IsValid(int value);
constexpr SystemProfileProto_ExtensionsState SystemProfileProto_ExtensionsState_ExtensionsState_MIN = SystemProfileProto_ExtensionsState_NO_EXTENSIONS;
constexpr SystemProfileProto_ExtensionsState SystemProfileProto_ExtensionsState_ExtensionsState_MAX = SystemProfileProto_ExtensionsState_HAS_OFFSTORE;
constexpr int SystemProfileProto_ExtensionsState_ExtensionsState_ARRAYSIZE = SystemProfileProto_ExtensionsState_ExtensionsState_MAX + 1;

const std::string& SystemProfileProto_ExtensionsState_Name(SystemProfileProto_ExtensionsState value);
template<typename T>
inline const std::string& SystemProfileProto_ExtensionsState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_ExtensionsState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_ExtensionsState_Name.");
  return SystemProfileProto_ExtensionsState_Name(static_cast<SystemProfileProto_ExtensionsState>(enum_t_value));
}
bool SystemProfileProto_ExtensionsState_Parse(
    const std::string& name, SystemProfileProto_ExtensionsState* value);
enum SystemProfileProto_UmaDefaultState : int {
  SystemProfileProto_UmaDefaultState_OPT_IN = 0,
  SystemProfileProto_UmaDefaultState_OPT_OUT = 1,
  SystemProfileProto_UmaDefaultState_POLICY_FORCED_ENABLED = 2,
  SystemProfileProto_UmaDefaultState_OPT_UNKNOWN = 3
};
bool SystemProfileProto_UmaDefaultState_IsValid(int value);
constexpr SystemProfileProto_UmaDefaultState SystemProfileProto_UmaDefaultState_UmaDefaultState_MIN = SystemProfileProto_UmaDefaultState_OPT_IN;
constexpr SystemProfileProto_UmaDefaultState SystemProfileProto_UmaDefaultState_UmaDefaultState_MAX = SystemProfileProto_UmaDefaultState_OPT_UNKNOWN;
constexpr int SystemProfileProto_UmaDefaultState_UmaDefaultState_ARRAYSIZE = SystemProfileProto_UmaDefaultState_UmaDefaultState_MAX + 1;

const std::string& SystemProfileProto_UmaDefaultState_Name(SystemProfileProto_UmaDefaultState value);
template<typename T>
inline const std::string& SystemProfileProto_UmaDefaultState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_UmaDefaultState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_UmaDefaultState_Name.");
  return SystemProfileProto_UmaDefaultState_Name(static_cast<SystemProfileProto_UmaDefaultState>(enum_t_value));
}
bool SystemProfileProto_UmaDefaultState_Parse(
    const std::string& name, SystemProfileProto_UmaDefaultState* value);
enum SystemProfileProto_AntiVirusState : int {
  SystemProfileProto_AntiVirusState_STATE_ON = 0,
  SystemProfileProto_AntiVirusState_STATE_OFF = 1,
  SystemProfileProto_AntiVirusState_STATE_SNOOZED = 2,
  SystemProfileProto_AntiVirusState_STATE_EXPIRED = 3
};
bool SystemProfileProto_AntiVirusState_IsValid(int value);
constexpr SystemProfileProto_AntiVirusState SystemProfileProto_AntiVirusState_AntiVirusState_MIN = SystemProfileProto_AntiVirusState_STATE_ON;
constexpr SystemProfileProto_AntiVirusState SystemProfileProto_AntiVirusState_AntiVirusState_MAX = SystemProfileProto_AntiVirusState_STATE_EXPIRED;
constexpr int SystemProfileProto_AntiVirusState_AntiVirusState_ARRAYSIZE = SystemProfileProto_AntiVirusState_AntiVirusState_MAX + 1;

const std::string& SystemProfileProto_AntiVirusState_Name(SystemProfileProto_AntiVirusState value);
template<typename T>
inline const std::string& SystemProfileProto_AntiVirusState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_AntiVirusState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_AntiVirusState_Name.");
  return SystemProfileProto_AntiVirusState_Name(static_cast<SystemProfileProto_AntiVirusState>(enum_t_value));
}
bool SystemProfileProto_AntiVirusState_Parse(
    const std::string& name, SystemProfileProto_AntiVirusState* value);
enum SystemProfileProto_ComponentId : int {
  SystemProfileProto_ComponentId_UNKNOWN = 1,
  SystemProfileProto_ComponentId_FILE_TYPE_POLICIES = 2,
  SystemProfileProto_ComponentId_ORIGIN_TRIALS = 3,
  SystemProfileProto_ComponentId_PEPPER_FLASH = 4,
  SystemProfileProto_ComponentId_PEPPER_FLASH_CHROMEOS = 5,
  SystemProfileProto_ComponentId_PNACL = 6,
  SystemProfileProto_ComponentId_RECOVERY = 7,
  SystemProfileProto_ComponentId_SSL_ERROR_ASSISTANT = 8,
  SystemProfileProto_ComponentId_STH_SET = 9,
  SystemProfileProto_ComponentId_CRL_SET = 10,
  SystemProfileProto_ComponentId_SUBRESOURCE_FILTER = 11,
  SystemProfileProto_ComponentId_SW_REPORTER = 12,
  SystemProfileProto_ComponentId_WIDEVINE_CDM = 13,
  SystemProfileProto_ComponentId_EPSON_INKJET_PRINTER_ESCPR = 14,
  SystemProfileProto_ComponentId_CROS_TERMINA = 15,
  SystemProfileProto_ComponentId_STAR_CUPS_DRIVER = 16,
  SystemProfileProto_ComponentId_SPEECH_SYNTHESIS_SV_SE = 17,
  SystemProfileProto_ComponentId_OPTIMIZATION_HINTS = 18,
  SystemProfileProto_ComponentId_DOWNLOADABLE_STRINGS = 19,
  SystemProfileProto_ComponentId_VR_ASSETS = 20,
  SystemProfileProto_ComponentId_RTANALYTICS_LIGHT = 21,
  SystemProfileProto_ComponentId_RTANALYTICS_FULL = 22,
  SystemProfileProto_ComponentId_CELLULAR = 23,
  SystemProfileProto_ComponentId_DEMO_MODE_RESOURCES = 24,
  SystemProfileProto_ComponentId_ON_DEVICE_HEAD_SUGGEST = 25,
  SystemProfileProto_ComponentId_CROS_SMART_DIM = 26
};
bool SystemProfileProto_ComponentId_IsValid(int value);
constexpr SystemProfileProto_ComponentId SystemProfileProto_ComponentId_ComponentId_MIN = SystemProfileProto_ComponentId_UNKNOWN;
constexpr SystemProfileProto_ComponentId SystemProfileProto_ComponentId_ComponentId_MAX = SystemProfileProto_ComponentId_CROS_SMART_DIM;
constexpr int SystemProfileProto_ComponentId_ComponentId_ARRAYSIZE = SystemProfileProto_ComponentId_ComponentId_MAX + 1;

const std::string& SystemProfileProto_ComponentId_Name(SystemProfileProto_ComponentId value);
template<typename T>
inline const std::string& SystemProfileProto_ComponentId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProfileProto_ComponentId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProfileProto_ComponentId_Name.");
  return SystemProfileProto_ComponentId_Name(static_cast<SystemProfileProto_ComponentId>(enum_t_value));
}
bool SystemProfileProto_ComponentId_Parse(
    const std::string& name, SystemProfileProto_ComponentId* value);
// ===================================================================

class SystemProfileProto_OS_Arc :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.OS.Arc) */ {
 public:
  SystemProfileProto_OS_Arc();
  virtual ~SystemProfileProto_OS_Arc();

  SystemProfileProto_OS_Arc(const SystemProfileProto_OS_Arc& from);
  SystemProfileProto_OS_Arc(SystemProfileProto_OS_Arc&& from) noexcept
    : SystemProfileProto_OS_Arc() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_OS_Arc& operator=(const SystemProfileProto_OS_Arc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_OS_Arc& operator=(SystemProfileProto_OS_Arc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_OS_Arc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_OS_Arc* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_OS_Arc*>(
               &_SystemProfileProto_OS_Arc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SystemProfileProto_OS_Arc& a, SystemProfileProto_OS_Arc& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_OS_Arc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_OS_Arc* New() const final {
    return CreateMaybeMessage<SystemProfileProto_OS_Arc>(nullptr);
  }

  SystemProfileProto_OS_Arc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_OS_Arc>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_OS_Arc& from);
  void MergeFrom(const SystemProfileProto_OS_Arc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_OS_Arc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.OS.Arc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReleaseFieldNumber = 1,
  };
  // optional string release = 1;
  bool has_release() const;
  void clear_release();
  const std::string& release() const;
  void set_release(const std::string& value);
  void set_release(std::string&& value);
  void set_release(const char* value);
  void set_release(const char* value, size_t size);
  std::string* mutable_release();
  std::string* release_release();
  void set_allocated_release(std::string* release);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.OS.Arc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr release_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_OS :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.OS) */ {
 public:
  SystemProfileProto_OS();
  virtual ~SystemProfileProto_OS();

  SystemProfileProto_OS(const SystemProfileProto_OS& from);
  SystemProfileProto_OS(SystemProfileProto_OS&& from) noexcept
    : SystemProfileProto_OS() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_OS& operator=(const SystemProfileProto_OS& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_OS& operator=(SystemProfileProto_OS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_OS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_OS* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_OS*>(
               &_SystemProfileProto_OS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemProfileProto_OS& a, SystemProfileProto_OS& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_OS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_OS* New() const final {
    return CreateMaybeMessage<SystemProfileProto_OS>(nullptr);
  }

  SystemProfileProto_OS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_OS>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_OS& from);
  void MergeFrom(const SystemProfileProto_OS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_OS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.OS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_OS_Arc Arc;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kBuildFingerprintFieldNumber = 3,
    kBuildNumberFieldNumber = 5,
    kKernelVersionFieldNumber = 6,
    kArcFieldNumber = 7,
    kIsJailbrokenFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string version = 2;
  bool has_version() const;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // optional string build_fingerprint = 3;
  bool has_build_fingerprint() const;
  void clear_build_fingerprint();
  const std::string& build_fingerprint() const;
  void set_build_fingerprint(const std::string& value);
  void set_build_fingerprint(std::string&& value);
  void set_build_fingerprint(const char* value);
  void set_build_fingerprint(const char* value, size_t size);
  std::string* mutable_build_fingerprint();
  std::string* release_build_fingerprint();
  void set_allocated_build_fingerprint(std::string* build_fingerprint);

  // optional string build_number = 5;
  bool has_build_number() const;
  void clear_build_number();
  const std::string& build_number() const;
  void set_build_number(const std::string& value);
  void set_build_number(std::string&& value);
  void set_build_number(const char* value);
  void set_build_number(const char* value, size_t size);
  std::string* mutable_build_number();
  std::string* release_build_number();
  void set_allocated_build_number(std::string* build_number);

  // optional string kernel_version = 6;
  bool has_kernel_version() const;
  void clear_kernel_version();
  const std::string& kernel_version() const;
  void set_kernel_version(const std::string& value);
  void set_kernel_version(std::string&& value);
  void set_kernel_version(const char* value);
  void set_kernel_version(const char* value, size_t size);
  std::string* mutable_kernel_version();
  std::string* release_kernel_version();
  void set_allocated_kernel_version(std::string* kernel_version);

  // optional .metrics.SystemProfileProto.OS.Arc arc = 7;
  bool has_arc() const;
  void clear_arc();
  const ::metrics::SystemProfileProto_OS_Arc& arc() const;
  ::metrics::SystemProfileProto_OS_Arc* release_arc();
  ::metrics::SystemProfileProto_OS_Arc* mutable_arc();
  void set_allocated_arc(::metrics::SystemProfileProto_OS_Arc* arc);

  // optional bool is_jailbroken = 4;
  bool has_is_jailbroken() const;
  void clear_is_jailbroken();
  bool is_jailbroken() const;
  void set_is_jailbroken(bool value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.OS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_fingerprint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernel_version_;
  ::metrics::SystemProfileProto_OS_Arc* arc_;
  bool is_jailbroken_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Hardware_CPU :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Hardware.CPU) */ {
 public:
  SystemProfileProto_Hardware_CPU();
  virtual ~SystemProfileProto_Hardware_CPU();

  SystemProfileProto_Hardware_CPU(const SystemProfileProto_Hardware_CPU& from);
  SystemProfileProto_Hardware_CPU(SystemProfileProto_Hardware_CPU&& from) noexcept
    : SystemProfileProto_Hardware_CPU() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Hardware_CPU& operator=(const SystemProfileProto_Hardware_CPU& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Hardware_CPU& operator=(SystemProfileProto_Hardware_CPU&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Hardware_CPU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Hardware_CPU* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Hardware_CPU*>(
               &_SystemProfileProto_Hardware_CPU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SystemProfileProto_Hardware_CPU& a, SystemProfileProto_Hardware_CPU& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Hardware_CPU* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Hardware_CPU* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_CPU>(nullptr);
  }

  SystemProfileProto_Hardware_CPU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_CPU>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Hardware_CPU& from);
  void MergeFrom(const SystemProfileProto_Hardware_CPU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Hardware_CPU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Hardware.CPU";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorNameFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kNumCoresFieldNumber = 3,
    kIsHypervisorFieldNumber = 4,
  };
  // optional string vendor_name = 1;
  bool has_vendor_name() const;
  void clear_vendor_name();
  const std::string& vendor_name() const;
  void set_vendor_name(const std::string& value);
  void set_vendor_name(std::string&& value);
  void set_vendor_name(const char* value);
  void set_vendor_name(const char* value, size_t size);
  std::string* mutable_vendor_name();
  std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* vendor_name);

  // optional uint32 signature = 2;
  bool has_signature() const;
  void clear_signature();
  ::PROTOBUF_NAMESPACE_ID::uint32 signature() const;
  void set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_cores = 3;
  bool has_num_cores() const;
  void clear_num_cores();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_cores() const;
  void set_num_cores(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool is_hypervisor = 4;
  bool has_is_hypervisor() const;
  void clear_is_hypervisor();
  bool is_hypervisor() const;
  void set_is_hypervisor(bool value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Hardware.CPU)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_cores_;
  bool is_hypervisor_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Hardware_Graphics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Hardware.Graphics) */ {
 public:
  SystemProfileProto_Hardware_Graphics();
  virtual ~SystemProfileProto_Hardware_Graphics();

  SystemProfileProto_Hardware_Graphics(const SystemProfileProto_Hardware_Graphics& from);
  SystemProfileProto_Hardware_Graphics(SystemProfileProto_Hardware_Graphics&& from) noexcept
    : SystemProfileProto_Hardware_Graphics() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Hardware_Graphics& operator=(const SystemProfileProto_Hardware_Graphics& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Hardware_Graphics& operator=(SystemProfileProto_Hardware_Graphics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Hardware_Graphics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Hardware_Graphics* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Hardware_Graphics*>(
               &_SystemProfileProto_Hardware_Graphics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SystemProfileProto_Hardware_Graphics& a, SystemProfileProto_Hardware_Graphics& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Hardware_Graphics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Hardware_Graphics* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_Graphics>(nullptr);
  }

  SystemProfileProto_Hardware_Graphics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_Graphics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Hardware_Graphics& from);
  void MergeFrom(const SystemProfileProto_Hardware_Graphics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Hardware_Graphics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Hardware.Graphics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverVersionFieldNumber = 3,
    kDriverDateFieldNumber = 4,
    kGlVendorFieldNumber = 6,
    kGlRendererFieldNumber = 7,
    kVendorIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
  };
  // optional string driver_version = 3;
  bool has_driver_version() const;
  void clear_driver_version();
  const std::string& driver_version() const;
  void set_driver_version(const std::string& value);
  void set_driver_version(std::string&& value);
  void set_driver_version(const char* value);
  void set_driver_version(const char* value, size_t size);
  std::string* mutable_driver_version();
  std::string* release_driver_version();
  void set_allocated_driver_version(std::string* driver_version);

  // optional string driver_date = 4;
  bool has_driver_date() const;
  void clear_driver_date();
  const std::string& driver_date() const;
  void set_driver_date(const std::string& value);
  void set_driver_date(std::string&& value);
  void set_driver_date(const char* value);
  void set_driver_date(const char* value, size_t size);
  std::string* mutable_driver_date();
  std::string* release_driver_date();
  void set_allocated_driver_date(std::string* driver_date);

  // optional string gl_vendor = 6;
  bool has_gl_vendor() const;
  void clear_gl_vendor();
  const std::string& gl_vendor() const;
  void set_gl_vendor(const std::string& value);
  void set_gl_vendor(std::string&& value);
  void set_gl_vendor(const char* value);
  void set_gl_vendor(const char* value, size_t size);
  std::string* mutable_gl_vendor();
  std::string* release_gl_vendor();
  void set_allocated_gl_vendor(std::string* gl_vendor);

  // optional string gl_renderer = 7;
  bool has_gl_renderer() const;
  void clear_gl_renderer();
  const std::string& gl_renderer() const;
  void set_gl_renderer(const std::string& value);
  void set_gl_renderer(std::string&& value);
  void set_gl_renderer(const char* value);
  void set_gl_renderer(const char* value, size_t size);
  std::string* mutable_gl_renderer();
  std::string* release_gl_renderer();
  void set_allocated_gl_renderer(std::string* gl_renderer);

  // optional uint32 vendor_id = 1;
  bool has_vendor_id() const;
  void clear_vendor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_id() const;
  void set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 device_id = 2;
  bool has_device_id() const;
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Hardware.Graphics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gl_vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gl_renderer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_id_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Hardware_Bluetooth_PairedDevice :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice) */ {
 public:
  SystemProfileProto_Hardware_Bluetooth_PairedDevice();
  virtual ~SystemProfileProto_Hardware_Bluetooth_PairedDevice();

  SystemProfileProto_Hardware_Bluetooth_PairedDevice(const SystemProfileProto_Hardware_Bluetooth_PairedDevice& from);
  SystemProfileProto_Hardware_Bluetooth_PairedDevice(SystemProfileProto_Hardware_Bluetooth_PairedDevice&& from) noexcept
    : SystemProfileProto_Hardware_Bluetooth_PairedDevice() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Hardware_Bluetooth_PairedDevice& operator=(const SystemProfileProto_Hardware_Bluetooth_PairedDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Hardware_Bluetooth_PairedDevice& operator=(SystemProfileProto_Hardware_Bluetooth_PairedDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Hardware_Bluetooth_PairedDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Hardware_Bluetooth_PairedDevice* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Hardware_Bluetooth_PairedDevice*>(
               &_SystemProfileProto_Hardware_Bluetooth_PairedDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SystemProfileProto_Hardware_Bluetooth_PairedDevice& a, SystemProfileProto_Hardware_Bluetooth_PairedDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Hardware_Bluetooth_PairedDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Hardware_Bluetooth_PairedDevice* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_Bluetooth_PairedDevice>(nullptr);
  }

  SystemProfileProto_Hardware_Bluetooth_PairedDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_Bluetooth_PairedDevice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Hardware_Bluetooth_PairedDevice& from);
  void MergeFrom(const SystemProfileProto_Hardware_Bluetooth_PairedDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Hardware_Bluetooth_PairedDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type Type;
  static constexpr Type DEVICE_UNKNOWN =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_UNKNOWN;
  static constexpr Type DEVICE_COMPUTER =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_COMPUTER;
  static constexpr Type DEVICE_PHONE =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_PHONE;
  static constexpr Type DEVICE_MODEM =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_MODEM;
  static constexpr Type DEVICE_AUDIO =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_AUDIO;
  static constexpr Type DEVICE_CAR_AUDIO =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_CAR_AUDIO;
  static constexpr Type DEVICE_VIDEO =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_VIDEO;
  static constexpr Type DEVICE_PERIPHERAL =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_PERIPHERAL;
  static constexpr Type DEVICE_JOYSTICK =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_JOYSTICK;
  static constexpr Type DEVICE_GAMEPAD =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_GAMEPAD;
  static constexpr Type DEVICE_KEYBOARD =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_KEYBOARD;
  static constexpr Type DEVICE_MOUSE =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_MOUSE;
  static constexpr Type DEVICE_TABLET =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_TABLET;
  static constexpr Type DEVICE_KEYBOARD_MOUSE_COMBO =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_DEVICE_KEYBOARD_MOUSE_COMBO;
  static inline bool Type_IsValid(int value) {
    return SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_Parse(name, value);
  }

  typedef SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource VendorIDSource;
  static constexpr VendorIDSource VENDOR_ID_UNKNOWN =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VENDOR_ID_UNKNOWN;
  static constexpr VendorIDSource VENDOR_ID_BLUETOOTH =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VENDOR_ID_BLUETOOTH;
  static constexpr VendorIDSource VENDOR_ID_USB =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VENDOR_ID_USB;
  static inline bool VendorIDSource_IsValid(int value) {
    return SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_IsValid(value);
  }
  static constexpr VendorIDSource VendorIDSource_MIN =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VendorIDSource_MIN;
  static constexpr VendorIDSource VendorIDSource_MAX =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VendorIDSource_MAX;
  static constexpr int VendorIDSource_ARRAYSIZE =
    SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_VendorIDSource_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VendorIDSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VendorIDSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VendorIDSource_Name.");
    return SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_Name(enum_t_value);
  }
  static inline bool VendorIDSource_Parse(const std::string& name,
      VendorIDSource* value) {
    return SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBluetoothClassFieldNumber = 1,
    kTypeFieldNumber = 2,
    kVendorPrefixFieldNumber = 4,
    kVendorIdFieldNumber = 5,
    kProductIdFieldNumber = 6,
    kDeviceIdFieldNumber = 7,
    kVendorIdSourceFieldNumber = 8,
  };
  // optional uint32 bluetooth_class = 1;
  bool has_bluetooth_class() const;
  void clear_bluetooth_class();
  ::PROTOBUF_NAMESPACE_ID::uint32 bluetooth_class() const;
  void set_bluetooth_class(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.Type type = 2;
  bool has_type() const;
  void clear_type();
  ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type type() const;
  void set_type(::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type value);

  // optional uint32 vendor_prefix = 4;
  bool has_vendor_prefix() const;
  void clear_vendor_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_prefix() const;
  void set_vendor_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 vendor_id = 5;
  bool has_vendor_id() const;
  void clear_vendor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_id() const;
  void set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 product_id = 6;
  bool has_product_id() const;
  void clear_product_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id() const;
  void set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 device_id = 7;
  bool has_device_id() const;
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.VendorIDSource vendor_id_source = 8;
  bool has_vendor_id_source() const;
  void clear_vendor_id_source();
  ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource vendor_id_source() const;
  void set_vendor_id_source(::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bluetooth_class_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_id_;
  int vendor_id_source_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Hardware_Bluetooth :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Hardware.Bluetooth) */ {
 public:
  SystemProfileProto_Hardware_Bluetooth();
  virtual ~SystemProfileProto_Hardware_Bluetooth();

  SystemProfileProto_Hardware_Bluetooth(const SystemProfileProto_Hardware_Bluetooth& from);
  SystemProfileProto_Hardware_Bluetooth(SystemProfileProto_Hardware_Bluetooth&& from) noexcept
    : SystemProfileProto_Hardware_Bluetooth() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Hardware_Bluetooth& operator=(const SystemProfileProto_Hardware_Bluetooth& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Hardware_Bluetooth& operator=(SystemProfileProto_Hardware_Bluetooth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Hardware_Bluetooth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Hardware_Bluetooth* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Hardware_Bluetooth*>(
               &_SystemProfileProto_Hardware_Bluetooth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SystemProfileProto_Hardware_Bluetooth& a, SystemProfileProto_Hardware_Bluetooth& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Hardware_Bluetooth* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Hardware_Bluetooth* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_Bluetooth>(nullptr);
  }

  SystemProfileProto_Hardware_Bluetooth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_Bluetooth>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Hardware_Bluetooth& from);
  void MergeFrom(const SystemProfileProto_Hardware_Bluetooth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Hardware_Bluetooth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Hardware.Bluetooth";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_Hardware_Bluetooth_PairedDevice PairedDevice;

  // accessors -------------------------------------------------------

  enum : int {
    kPairedDeviceFieldNumber = 3,
    kIsPresentFieldNumber = 1,
    kIsEnabledFieldNumber = 2,
  };
  // repeated .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice paired_device = 3;
  int paired_device_size() const;
  void clear_paired_device();
  ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice* mutable_paired_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice >*
      mutable_paired_device();
  const ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice& paired_device(int index) const;
  ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice* add_paired_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice >&
      paired_device() const;

  // optional bool is_present = 1;
  bool has_is_present() const;
  void clear_is_present();
  bool is_present() const;
  void set_is_present(bool value);

  // optional bool is_enabled = 2;
  bool has_is_enabled() const;
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Hardware.Bluetooth)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice > paired_device_;
  bool is_present_;
  bool is_enabled_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor) */ {
 public:
  SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor();
  virtual ~SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor();

  SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor(const SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& from);
  SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor(SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor&& from) noexcept
    : SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& operator=(const SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& operator=(SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor*>(
               &_SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& a, SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor>(nullptr);
  }

  SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& from);
  void MergeFrom(const SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceClassFieldNumber = 1,
    kInterfaceSubclassFieldNumber = 2,
    kConfigurationValueFieldNumber = 3,
  };
  // optional uint32 interface_class = 1;
  bool has_interface_class() const;
  void clear_interface_class();
  ::PROTOBUF_NAMESPACE_ID::uint32 interface_class() const;
  void set_interface_class(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 interface_subclass = 2;
  bool has_interface_subclass() const;
  void clear_interface_subclass();
  ::PROTOBUF_NAMESPACE_ID::uint32 interface_subclass() const;
  void set_interface_subclass(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 configuration_value = 3;
  bool has_configuration_value() const;
  void clear_configuration_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 configuration_value() const;
  void set_configuration_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interface_class_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interface_subclass_;
  ::PROTOBUF_NAMESPACE_ID::uint32 configuration_value_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Hardware_USB_USBDevice :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Hardware.USB.USBDevice) */ {
 public:
  SystemProfileProto_Hardware_USB_USBDevice();
  virtual ~SystemProfileProto_Hardware_USB_USBDevice();

  SystemProfileProto_Hardware_USB_USBDevice(const SystemProfileProto_Hardware_USB_USBDevice& from);
  SystemProfileProto_Hardware_USB_USBDevice(SystemProfileProto_Hardware_USB_USBDevice&& from) noexcept
    : SystemProfileProto_Hardware_USB_USBDevice() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Hardware_USB_USBDevice& operator=(const SystemProfileProto_Hardware_USB_USBDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Hardware_USB_USBDevice& operator=(SystemProfileProto_Hardware_USB_USBDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Hardware_USB_USBDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Hardware_USB_USBDevice* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Hardware_USB_USBDevice*>(
               &_SystemProfileProto_Hardware_USB_USBDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SystemProfileProto_Hardware_USB_USBDevice& a, SystemProfileProto_Hardware_USB_USBDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Hardware_USB_USBDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Hardware_USB_USBDevice* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_USB_USBDevice>(nullptr);
  }

  SystemProfileProto_Hardware_USB_USBDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_USB_USBDevice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Hardware_USB_USBDevice& from);
  void MergeFrom(const SystemProfileProto_Hardware_USB_USBDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Hardware_USB_USBDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Hardware.USB.USBDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor InterfaceDescriptor;

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceDescriptorsFieldNumber = 6,
    kVendorIdFieldNumber = 1,
    kProductIdFieldNumber = 2,
    kDeviceClassFieldNumber = 3,
    kDeviceSubclassFieldNumber = 4,
    kDeviceReleaseNumberFieldNumber = 5,
    kHopsFromRootFieldNumber = 7,
    kParentVendorIdFieldNumber = 8,
    kParentProductIdFieldNumber = 9,
    kPortCountFieldNumber = 10,
  };
  // repeated .metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor interface_descriptors = 6;
  int interface_descriptors_size() const;
  void clear_interface_descriptors();
  ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor* mutable_interface_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor >*
      mutable_interface_descriptors();
  const ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& interface_descriptors(int index) const;
  ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor* add_interface_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor >&
      interface_descriptors() const;

  // optional fixed32 vendor_id = 1;
  bool has_vendor_id() const;
  void clear_vendor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_id() const;
  void set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed32 product_id = 2;
  bool has_product_id() const;
  void clear_product_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id() const;
  void set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 device_class = 3;
  bool has_device_class() const;
  void clear_device_class();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_class() const;
  void set_device_class(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 device_subclass = 4;
  bool has_device_subclass() const;
  void clear_device_subclass();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_subclass() const;
  void set_device_subclass(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 device_release_number = 5;
  bool has_device_release_number() const;
  void clear_device_release_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_release_number() const;
  void set_device_release_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 hops_from_root = 7;
  bool has_hops_from_root() const;
  void clear_hops_from_root();
  ::PROTOBUF_NAMESPACE_ID::uint32 hops_from_root() const;
  void set_hops_from_root(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed32 parent_vendor_id = 8;
  bool has_parent_vendor_id() const;
  void clear_parent_vendor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_vendor_id() const;
  void set_parent_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed32 parent_product_id = 9;
  bool has_parent_product_id() const;
  void clear_parent_product_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_product_id() const;
  void set_parent_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 port_count = 10;
  bool has_port_count() const;
  void clear_port_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_count() const;
  void set_port_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Hardware.USB.USBDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor > interface_descriptors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_class_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_subclass_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_release_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hops_from_root_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_vendor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_product_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_count_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Hardware_USB :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Hardware.USB) */ {
 public:
  SystemProfileProto_Hardware_USB();
  virtual ~SystemProfileProto_Hardware_USB();

  SystemProfileProto_Hardware_USB(const SystemProfileProto_Hardware_USB& from);
  SystemProfileProto_Hardware_USB(SystemProfileProto_Hardware_USB&& from) noexcept
    : SystemProfileProto_Hardware_USB() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Hardware_USB& operator=(const SystemProfileProto_Hardware_USB& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Hardware_USB& operator=(SystemProfileProto_Hardware_USB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Hardware_USB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Hardware_USB* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Hardware_USB*>(
               &_SystemProfileProto_Hardware_USB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SystemProfileProto_Hardware_USB& a, SystemProfileProto_Hardware_USB& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Hardware_USB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Hardware_USB* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_USB>(nullptr);
  }

  SystemProfileProto_Hardware_USB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_USB>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Hardware_USB& from);
  void MergeFrom(const SystemProfileProto_Hardware_USB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Hardware_USB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Hardware.USB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_Hardware_USB_USBDevice USBDevice;

  // accessors -------------------------------------------------------

  enum : int {
    kUsbDevicesFieldNumber = 2,
    kBusCountFieldNumber = 1,
  };
  // repeated .metrics.SystemProfileProto.Hardware.USB.USBDevice usb_devices = 2;
  int usb_devices_size() const;
  void clear_usb_devices();
  ::metrics::SystemProfileProto_Hardware_USB_USBDevice* mutable_usb_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_USB_USBDevice >*
      mutable_usb_devices();
  const ::metrics::SystemProfileProto_Hardware_USB_USBDevice& usb_devices(int index) const;
  ::metrics::SystemProfileProto_Hardware_USB_USBDevice* add_usb_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_USB_USBDevice >&
      usb_devices() const;

  // optional uint32 bus_count = 1;
  bool has_bus_count() const;
  void clear_bus_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 bus_count() const;
  void set_bus_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Hardware.USB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_USB_USBDevice > usb_devices_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bus_count_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Hardware_DeprecatedTouchScreen :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen) */ {
 public:
  SystemProfileProto_Hardware_DeprecatedTouchScreen();
  virtual ~SystemProfileProto_Hardware_DeprecatedTouchScreen();

  SystemProfileProto_Hardware_DeprecatedTouchScreen(const SystemProfileProto_Hardware_DeprecatedTouchScreen& from);
  SystemProfileProto_Hardware_DeprecatedTouchScreen(SystemProfileProto_Hardware_DeprecatedTouchScreen&& from) noexcept
    : SystemProfileProto_Hardware_DeprecatedTouchScreen() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Hardware_DeprecatedTouchScreen& operator=(const SystemProfileProto_Hardware_DeprecatedTouchScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Hardware_DeprecatedTouchScreen& operator=(SystemProfileProto_Hardware_DeprecatedTouchScreen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Hardware_DeprecatedTouchScreen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Hardware_DeprecatedTouchScreen* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Hardware_DeprecatedTouchScreen*>(
               &_SystemProfileProto_Hardware_DeprecatedTouchScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SystemProfileProto_Hardware_DeprecatedTouchScreen& a, SystemProfileProto_Hardware_DeprecatedTouchScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Hardware_DeprecatedTouchScreen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Hardware_DeprecatedTouchScreen* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_DeprecatedTouchScreen>(nullptr);
  }

  SystemProfileProto_Hardware_DeprecatedTouchScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_DeprecatedTouchScreen>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Hardware_DeprecatedTouchScreen& from);
  void MergeFrom(const SystemProfileProto_Hardware_DeprecatedTouchScreen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Hardware_DeprecatedTouchScreen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorIdFieldNumber = 1,
    kProductIdFieldNumber = 2,
  };
  // optional uint32 vendor_id = 1;
  bool has_vendor_id() const;
  void clear_vendor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_id() const;
  void set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 product_id = 2;
  bool has_product_id() const;
  void clear_product_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id() const;
  void set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 product_id_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Hardware_Drive :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Hardware.Drive) */ {
 public:
  SystemProfileProto_Hardware_Drive();
  virtual ~SystemProfileProto_Hardware_Drive();

  SystemProfileProto_Hardware_Drive(const SystemProfileProto_Hardware_Drive& from);
  SystemProfileProto_Hardware_Drive(SystemProfileProto_Hardware_Drive&& from) noexcept
    : SystemProfileProto_Hardware_Drive() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Hardware_Drive& operator=(const SystemProfileProto_Hardware_Drive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Hardware_Drive& operator=(SystemProfileProto_Hardware_Drive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Hardware_Drive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Hardware_Drive* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Hardware_Drive*>(
               &_SystemProfileProto_Hardware_Drive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SystemProfileProto_Hardware_Drive& a, SystemProfileProto_Hardware_Drive& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Hardware_Drive* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Hardware_Drive* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_Drive>(nullptr);
  }

  SystemProfileProto_Hardware_Drive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware_Drive>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Hardware_Drive& from);
  void MergeFrom(const SystemProfileProto_Hardware_Drive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Hardware_Drive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Hardware.Drive";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasSeekPenaltyFieldNumber = 1,
  };
  // optional bool has_seek_penalty = 1;
  bool has_has_seek_penalty() const;
  void clear_has_seek_penalty();
  bool has_seek_penalty() const;
  void set_has_seek_penalty(bool value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Hardware.Drive)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool has_seek_penalty_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Hardware :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Hardware) */ {
 public:
  SystemProfileProto_Hardware();
  virtual ~SystemProfileProto_Hardware();

  SystemProfileProto_Hardware(const SystemProfileProto_Hardware& from);
  SystemProfileProto_Hardware(SystemProfileProto_Hardware&& from) noexcept
    : SystemProfileProto_Hardware() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Hardware& operator=(const SystemProfileProto_Hardware& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Hardware& operator=(SystemProfileProto_Hardware&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Hardware& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Hardware* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Hardware*>(
               &_SystemProfileProto_Hardware_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SystemProfileProto_Hardware& a, SystemProfileProto_Hardware& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Hardware* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Hardware* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware>(nullptr);
  }

  SystemProfileProto_Hardware* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Hardware>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Hardware& from);
  void MergeFrom(const SystemProfileProto_Hardware& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Hardware* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Hardware";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_Hardware_CPU CPU;
  typedef SystemProfileProto_Hardware_Graphics Graphics;
  typedef SystemProfileProto_Hardware_Bluetooth Bluetooth;
  typedef SystemProfileProto_Hardware_USB USB;
  typedef SystemProfileProto_Hardware_DeprecatedTouchScreen DeprecatedTouchScreen;
  typedef SystemProfileProto_Hardware_Drive Drive;

  typedef SystemProfileProto_Hardware_FormFactor FormFactor;
  static constexpr FormFactor FORM_FACTOR_UNKNOWN =
    SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_UNKNOWN;
  static constexpr FormFactor FORM_FACTOR_DESKTOP =
    SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_DESKTOP;
  static constexpr FormFactor FORM_FACTOR_PHONE =
    SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_PHONE;
  static constexpr FormFactor FORM_FACTOR_TABLET =
    SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_TABLET;
  static constexpr FormFactor FORM_FACTOR_KIOSK =
    SystemProfileProto_Hardware_FormFactor_FORM_FACTOR_KIOSK;
  static inline bool FormFactor_IsValid(int value) {
    return SystemProfileProto_Hardware_FormFactor_IsValid(value);
  }
  static constexpr FormFactor FormFactor_MIN =
    SystemProfileProto_Hardware_FormFactor_FormFactor_MIN;
  static constexpr FormFactor FormFactor_MAX =
    SystemProfileProto_Hardware_FormFactor_FormFactor_MAX;
  static constexpr int FormFactor_ARRAYSIZE =
    SystemProfileProto_Hardware_FormFactor_FormFactor_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FormFactor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FormFactor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FormFactor_Name.");
    return SystemProfileProto_Hardware_FormFactor_Name(enum_t_value);
  }
  static inline bool FormFactor_Parse(const std::string& name,
      FormFactor* value) {
    return SystemProfileProto_Hardware_FormFactor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedExternalTouchscreenFieldNumber = 15,
    kCpuArchitectureFieldNumber = 1,
    kHardwareClassFieldNumber = 4,
    kFullHardwareClassFieldNumber = 18,
    kGpuFieldNumber = 8,
    kBluetoothFieldNumber = 11,
    kCpuFieldNumber = 13,
    kAppDriveFieldNumber = 16,
    kUserDataDriveFieldNumber = 17,
    kUsbFieldNumber = 30,
    kSystemRamMbFieldNumber = 2,
    kDllBaseFieldNumber = 3,
    kScreenCountFieldNumber = 5,
    kPrimaryScreenWidthFieldNumber = 6,
    kPrimaryScreenHeightFieldNumber = 7,
    kMaxDpiXFieldNumber = 9,
    kMaxDpiYFieldNumber = 10,
    kPrimaryScreenScaleFactorFieldNumber = 12,
    kInternalDisplaySupportsTouchFieldNumber = 14,
    kFormFactorFieldNumber = 19,
  };
  // repeated .metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen deprecated_external_touchscreen = 15 [deprecated = true];
  PROTOBUF_DEPRECATED int deprecated_external_touchscreen_size() const;
  PROTOBUF_DEPRECATED void clear_deprecated_external_touchscreen();
  PROTOBUF_DEPRECATED ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen* mutable_deprecated_external_touchscreen(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen >*
      mutable_deprecated_external_touchscreen();
  PROTOBUF_DEPRECATED const ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen& deprecated_external_touchscreen(int index) const;
  PROTOBUF_DEPRECATED ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen* add_deprecated_external_touchscreen();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen >&
      deprecated_external_touchscreen() const;

  // optional string cpu_architecture = 1;
  bool has_cpu_architecture() const;
  void clear_cpu_architecture();
  const std::string& cpu_architecture() const;
  void set_cpu_architecture(const std::string& value);
  void set_cpu_architecture(std::string&& value);
  void set_cpu_architecture(const char* value);
  void set_cpu_architecture(const char* value, size_t size);
  std::string* mutable_cpu_architecture();
  std::string* release_cpu_architecture();
  void set_allocated_cpu_architecture(std::string* cpu_architecture);

  // optional string hardware_class = 4;
  bool has_hardware_class() const;
  void clear_hardware_class();
  const std::string& hardware_class() const;
  void set_hardware_class(const std::string& value);
  void set_hardware_class(std::string&& value);
  void set_hardware_class(const char* value);
  void set_hardware_class(const char* value, size_t size);
  std::string* mutable_hardware_class();
  std::string* release_hardware_class();
  void set_allocated_hardware_class(std::string* hardware_class);

  // optional string full_hardware_class = 18;
  bool has_full_hardware_class() const;
  void clear_full_hardware_class();
  const std::string& full_hardware_class() const;
  void set_full_hardware_class(const std::string& value);
  void set_full_hardware_class(std::string&& value);
  void set_full_hardware_class(const char* value);
  void set_full_hardware_class(const char* value, size_t size);
  std::string* mutable_full_hardware_class();
  std::string* release_full_hardware_class();
  void set_allocated_full_hardware_class(std::string* full_hardware_class);

  // optional .metrics.SystemProfileProto.Hardware.Graphics gpu = 8;
  bool has_gpu() const;
  void clear_gpu();
  const ::metrics::SystemProfileProto_Hardware_Graphics& gpu() const;
  ::metrics::SystemProfileProto_Hardware_Graphics* release_gpu();
  ::metrics::SystemProfileProto_Hardware_Graphics* mutable_gpu();
  void set_allocated_gpu(::metrics::SystemProfileProto_Hardware_Graphics* gpu);

  // optional .metrics.SystemProfileProto.Hardware.Bluetooth bluetooth = 11;
  bool has_bluetooth() const;
  void clear_bluetooth();
  const ::metrics::SystemProfileProto_Hardware_Bluetooth& bluetooth() const;
  ::metrics::SystemProfileProto_Hardware_Bluetooth* release_bluetooth();
  ::metrics::SystemProfileProto_Hardware_Bluetooth* mutable_bluetooth();
  void set_allocated_bluetooth(::metrics::SystemProfileProto_Hardware_Bluetooth* bluetooth);

  // optional .metrics.SystemProfileProto.Hardware.CPU cpu = 13;
  bool has_cpu() const;
  void clear_cpu();
  const ::metrics::SystemProfileProto_Hardware_CPU& cpu() const;
  ::metrics::SystemProfileProto_Hardware_CPU* release_cpu();
  ::metrics::SystemProfileProto_Hardware_CPU* mutable_cpu();
  void set_allocated_cpu(::metrics::SystemProfileProto_Hardware_CPU* cpu);

  // optional .metrics.SystemProfileProto.Hardware.Drive app_drive = 16;
  bool has_app_drive() const;
  void clear_app_drive();
  const ::metrics::SystemProfileProto_Hardware_Drive& app_drive() const;
  ::metrics::SystemProfileProto_Hardware_Drive* release_app_drive();
  ::metrics::SystemProfileProto_Hardware_Drive* mutable_app_drive();
  void set_allocated_app_drive(::metrics::SystemProfileProto_Hardware_Drive* app_drive);

  // optional .metrics.SystemProfileProto.Hardware.Drive user_data_drive = 17;
  bool has_user_data_drive() const;
  void clear_user_data_drive();
  const ::metrics::SystemProfileProto_Hardware_Drive& user_data_drive() const;
  ::metrics::SystemProfileProto_Hardware_Drive* release_user_data_drive();
  ::metrics::SystemProfileProto_Hardware_Drive* mutable_user_data_drive();
  void set_allocated_user_data_drive(::metrics::SystemProfileProto_Hardware_Drive* user_data_drive);

  // optional .metrics.SystemProfileProto.Hardware.USB usb = 30;
  bool has_usb() const;
  void clear_usb();
  const ::metrics::SystemProfileProto_Hardware_USB& usb() const;
  ::metrics::SystemProfileProto_Hardware_USB* release_usb();
  ::metrics::SystemProfileProto_Hardware_USB* mutable_usb();
  void set_allocated_usb(::metrics::SystemProfileProto_Hardware_USB* usb);

  // optional int64 system_ram_mb = 2;
  bool has_system_ram_mb() const;
  void clear_system_ram_mb();
  ::PROTOBUF_NAMESPACE_ID::int64 system_ram_mb() const;
  void set_system_ram_mb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 dll_base = 3;
  bool has_dll_base() const;
  void clear_dll_base();
  ::PROTOBUF_NAMESPACE_ID::int64 dll_base() const;
  void set_dll_base(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 screen_count = 5;
  bool has_screen_count() const;
  void clear_screen_count();
  ::PROTOBUF_NAMESPACE_ID::int32 screen_count() const;
  void set_screen_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 primary_screen_width = 6;
  bool has_primary_screen_width() const;
  void clear_primary_screen_width();
  ::PROTOBUF_NAMESPACE_ID::int32 primary_screen_width() const;
  void set_primary_screen_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 primary_screen_height = 7;
  bool has_primary_screen_height() const;
  void clear_primary_screen_height();
  ::PROTOBUF_NAMESPACE_ID::int32 primary_screen_height() const;
  void set_primary_screen_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float max_dpi_x = 9;
  bool has_max_dpi_x() const;
  void clear_max_dpi_x();
  float max_dpi_x() const;
  void set_max_dpi_x(float value);

  // optional float max_dpi_y = 10;
  bool has_max_dpi_y() const;
  void clear_max_dpi_y();
  float max_dpi_y() const;
  void set_max_dpi_y(float value);

  // optional float primary_screen_scale_factor = 12;
  bool has_primary_screen_scale_factor() const;
  void clear_primary_screen_scale_factor();
  float primary_screen_scale_factor() const;
  void set_primary_screen_scale_factor(float value);

  // optional bool internal_display_supports_touch = 14;
  bool has_internal_display_supports_touch() const;
  void clear_internal_display_supports_touch();
  bool internal_display_supports_touch() const;
  void set_internal_display_supports_touch(bool value);

  // optional .metrics.SystemProfileProto.Hardware.FormFactor form_factor = 19;
  bool has_form_factor() const;
  void clear_form_factor();
  ::metrics::SystemProfileProto_Hardware_FormFactor form_factor() const;
  void set_form_factor(::metrics::SystemProfileProto_Hardware_FormFactor value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Hardware)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen > deprecated_external_touchscreen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_architecture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hardware_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_hardware_class_;
  ::metrics::SystemProfileProto_Hardware_Graphics* gpu_;
  ::metrics::SystemProfileProto_Hardware_Bluetooth* bluetooth_;
  ::metrics::SystemProfileProto_Hardware_CPU* cpu_;
  ::metrics::SystemProfileProto_Hardware_Drive* app_drive_;
  ::metrics::SystemProfileProto_Hardware_Drive* user_data_drive_;
  ::metrics::SystemProfileProto_Hardware_USB* usb_;
  ::PROTOBUF_NAMESPACE_ID::int64 system_ram_mb_;
  ::PROTOBUF_NAMESPACE_ID::int64 dll_base_;
  ::PROTOBUF_NAMESPACE_ID::int32 screen_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 primary_screen_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 primary_screen_height_;
  float max_dpi_x_;
  float max_dpi_y_;
  float primary_screen_scale_factor_;
  bool internal_display_supports_touch_;
  int form_factor_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Network_WifiAccessPoint_VendorInformation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation) */ {
 public:
  SystemProfileProto_Network_WifiAccessPoint_VendorInformation();
  virtual ~SystemProfileProto_Network_WifiAccessPoint_VendorInformation();

  SystemProfileProto_Network_WifiAccessPoint_VendorInformation(const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& from);
  SystemProfileProto_Network_WifiAccessPoint_VendorInformation(SystemProfileProto_Network_WifiAccessPoint_VendorInformation&& from) noexcept
    : SystemProfileProto_Network_WifiAccessPoint_VendorInformation() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Network_WifiAccessPoint_VendorInformation& operator=(const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Network_WifiAccessPoint_VendorInformation& operator=(SystemProfileProto_Network_WifiAccessPoint_VendorInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Network_WifiAccessPoint_VendorInformation* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Network_WifiAccessPoint_VendorInformation*>(
               &_SystemProfileProto_Network_WifiAccessPoint_VendorInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SystemProfileProto_Network_WifiAccessPoint_VendorInformation& a, SystemProfileProto_Network_WifiAccessPoint_VendorInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Network_WifiAccessPoint_VendorInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Network_WifiAccessPoint_VendorInformation* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Network_WifiAccessPoint_VendorInformation>(nullptr);
  }

  SystemProfileProto_Network_WifiAccessPoint_VendorInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Network_WifiAccessPoint_VendorInformation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& from);
  void MergeFrom(const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Network_WifiAccessPoint_VendorInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementIdentifierFieldNumber = 4,
    kModelNumberFieldNumber = 1,
    kModelNameFieldNumber = 2,
    kDeviceNameFieldNumber = 3,
  };
  // repeated uint32 element_identifier = 4;
  int element_identifier_size() const;
  void clear_element_identifier();
  ::PROTOBUF_NAMESPACE_ID::uint32 element_identifier(int index) const;
  void set_element_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_element_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      element_identifier() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_element_identifier();

  // optional string model_number = 1;
  bool has_model_number() const;
  void clear_model_number();
  const std::string& model_number() const;
  void set_model_number(const std::string& value);
  void set_model_number(std::string&& value);
  void set_model_number(const char* value);
  void set_model_number(const char* value, size_t size);
  std::string* mutable_model_number();
  std::string* release_model_number();
  void set_allocated_model_number(std::string* model_number);

  // optional string model_name = 2;
  bool has_model_name() const;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);

  // optional string device_name = 3;
  bool has_device_name() const;
  void clear_device_name();
  const std::string& device_name() const;
  void set_device_name(const std::string& value);
  void set_device_name(std::string&& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  std::string* mutable_device_name();
  std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > element_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Network_WifiAccessPoint :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Network.WifiAccessPoint) */ {
 public:
  SystemProfileProto_Network_WifiAccessPoint();
  virtual ~SystemProfileProto_Network_WifiAccessPoint();

  SystemProfileProto_Network_WifiAccessPoint(const SystemProfileProto_Network_WifiAccessPoint& from);
  SystemProfileProto_Network_WifiAccessPoint(SystemProfileProto_Network_WifiAccessPoint&& from) noexcept
    : SystemProfileProto_Network_WifiAccessPoint() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Network_WifiAccessPoint& operator=(const SystemProfileProto_Network_WifiAccessPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Network_WifiAccessPoint& operator=(SystemProfileProto_Network_WifiAccessPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Network_WifiAccessPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Network_WifiAccessPoint* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Network_WifiAccessPoint*>(
               &_SystemProfileProto_Network_WifiAccessPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SystemProfileProto_Network_WifiAccessPoint& a, SystemProfileProto_Network_WifiAccessPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Network_WifiAccessPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Network_WifiAccessPoint* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Network_WifiAccessPoint>(nullptr);
  }

  SystemProfileProto_Network_WifiAccessPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Network_WifiAccessPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Network_WifiAccessPoint& from);
  void MergeFrom(const SystemProfileProto_Network_WifiAccessPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Network_WifiAccessPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Network.WifiAccessPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_Network_WifiAccessPoint_VendorInformation VendorInformation;

  typedef SystemProfileProto_Network_WifiAccessPoint_SecurityMode SecurityMode;
  static constexpr SecurityMode SECURITY_UNKNOWN =
    SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_UNKNOWN;
  static constexpr SecurityMode SECURITY_WPA =
    SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_WPA;
  static constexpr SecurityMode SECURITY_WEP =
    SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_WEP;
  static constexpr SecurityMode SECURITY_RSN =
    SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_RSN;
  static constexpr SecurityMode SECURITY_802_1X =
    SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_802_1X;
  static constexpr SecurityMode SECURITY_PSK =
    SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_PSK;
  static constexpr SecurityMode SECURITY_NONE =
    SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SECURITY_NONE;
  static inline bool SecurityMode_IsValid(int value) {
    return SystemProfileProto_Network_WifiAccessPoint_SecurityMode_IsValid(value);
  }
  static constexpr SecurityMode SecurityMode_MIN =
    SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SecurityMode_MIN;
  static constexpr SecurityMode SecurityMode_MAX =
    SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SecurityMode_MAX;
  static constexpr int SecurityMode_ARRAYSIZE =
    SystemProfileProto_Network_WifiAccessPoint_SecurityMode_SecurityMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SecurityMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SecurityMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SecurityMode_Name.");
    return SystemProfileProto_Network_WifiAccessPoint_SecurityMode_Name(enum_t_value);
  }
  static inline bool SecurityMode_Parse(const std::string& name,
      SecurityMode* value) {
    return SystemProfileProto_Network_WifiAccessPoint_SecurityMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVendorInfoFieldNumber = 3,
    kVendorPrefixFieldNumber = 1,
    kSecurityModeFieldNumber = 2,
  };
  // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation vendor_info = 3;
  bool has_vendor_info() const;
  void clear_vendor_info();
  const ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation& vendor_info() const;
  ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* release_vendor_info();
  ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* mutable_vendor_info();
  void set_allocated_vendor_info(::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* vendor_info);

  // optional uint32 vendor_prefix = 1;
  bool has_vendor_prefix() const;
  void clear_vendor_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_prefix() const;
  void set_vendor_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.SecurityMode security_mode = 2;
  bool has_security_mode() const;
  void clear_security_mode();
  ::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode security_mode() const;
  void set_security_mode(::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Network.WifiAccessPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* vendor_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_prefix_;
  int security_mode_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Network :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Network) */ {
 public:
  SystemProfileProto_Network();
  virtual ~SystemProfileProto_Network();

  SystemProfileProto_Network(const SystemProfileProto_Network& from);
  SystemProfileProto_Network(SystemProfileProto_Network&& from) noexcept
    : SystemProfileProto_Network() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Network& operator=(const SystemProfileProto_Network& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Network& operator=(SystemProfileProto_Network&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Network& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Network* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Network*>(
               &_SystemProfileProto_Network_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SystemProfileProto_Network& a, SystemProfileProto_Network& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Network* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Network* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Network>(nullptr);
  }

  SystemProfileProto_Network* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Network>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Network& from);
  void MergeFrom(const SystemProfileProto_Network& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Network* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Network";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_Network_WifiAccessPoint WifiAccessPoint;

  typedef SystemProfileProto_Network_ConnectionType ConnectionType;
  static constexpr ConnectionType CONNECTION_UNKNOWN =
    SystemProfileProto_Network_ConnectionType_CONNECTION_UNKNOWN;
  static constexpr ConnectionType CONNECTION_ETHERNET =
    SystemProfileProto_Network_ConnectionType_CONNECTION_ETHERNET;
  static constexpr ConnectionType CONNECTION_WIFI =
    SystemProfileProto_Network_ConnectionType_CONNECTION_WIFI;
  static constexpr ConnectionType CONNECTION_2G =
    SystemProfileProto_Network_ConnectionType_CONNECTION_2G;
  static constexpr ConnectionType CONNECTION_3G =
    SystemProfileProto_Network_ConnectionType_CONNECTION_3G;
  static constexpr ConnectionType CONNECTION_4G =
    SystemProfileProto_Network_ConnectionType_CONNECTION_4G;
  static constexpr ConnectionType CONNECTION_BLUETOOTH =
    SystemProfileProto_Network_ConnectionType_CONNECTION_BLUETOOTH;
  static constexpr ConnectionType CONNECTION_NONE =
    SystemProfileProto_Network_ConnectionType_CONNECTION_NONE;
  static constexpr ConnectionType CONNECTION_AMBIGUOUS =
    SystemProfileProto_Network_ConnectionType_CONNECTION_AMBIGUOUS;
  static inline bool ConnectionType_IsValid(int value) {
    return SystemProfileProto_Network_ConnectionType_IsValid(value);
  }
  static constexpr ConnectionType ConnectionType_MIN =
    SystemProfileProto_Network_ConnectionType_ConnectionType_MIN;
  static constexpr ConnectionType ConnectionType_MAX =
    SystemProfileProto_Network_ConnectionType_ConnectionType_MAX;
  static constexpr int ConnectionType_ARRAYSIZE =
    SystemProfileProto_Network_ConnectionType_ConnectionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ConnectionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConnectionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConnectionType_Name.");
    return SystemProfileProto_Network_ConnectionType_Name(enum_t_value);
  }
  static inline bool ConnectionType_Parse(const std::string& name,
      ConnectionType* value) {
    return SystemProfileProto_Network_ConnectionType_Parse(name, value);
  }

  typedef SystemProfileProto_Network_WifiPHYLayerProtocol WifiPHYLayerProtocol;
  static constexpr WifiPHYLayerProtocol WIFI_PHY_LAYER_PROTOCOL_NONE =
    SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_NONE;
  static constexpr WifiPHYLayerProtocol WIFI_PHY_LAYER_PROTOCOL_ANCIENT =
    SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_ANCIENT;
  static constexpr WifiPHYLayerProtocol WIFI_PHY_LAYER_PROTOCOL_A =
    SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_A;
  static constexpr WifiPHYLayerProtocol WIFI_PHY_LAYER_PROTOCOL_B =
    SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_B;
  static constexpr WifiPHYLayerProtocol WIFI_PHY_LAYER_PROTOCOL_G =
    SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_G;
  static constexpr WifiPHYLayerProtocol WIFI_PHY_LAYER_PROTOCOL_N =
    SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_N;
  static constexpr WifiPHYLayerProtocol WIFI_PHY_LAYER_PROTOCOL_UNKNOWN =
    SystemProfileProto_Network_WifiPHYLayerProtocol_WIFI_PHY_LAYER_PROTOCOL_UNKNOWN;
  static inline bool WifiPHYLayerProtocol_IsValid(int value) {
    return SystemProfileProto_Network_WifiPHYLayerProtocol_IsValid(value);
  }
  static constexpr WifiPHYLayerProtocol WifiPHYLayerProtocol_MIN =
    SystemProfileProto_Network_WifiPHYLayerProtocol_WifiPHYLayerProtocol_MIN;
  static constexpr WifiPHYLayerProtocol WifiPHYLayerProtocol_MAX =
    SystemProfileProto_Network_WifiPHYLayerProtocol_WifiPHYLayerProtocol_MAX;
  static constexpr int WifiPHYLayerProtocol_ARRAYSIZE =
    SystemProfileProto_Network_WifiPHYLayerProtocol_WifiPHYLayerProtocol_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WifiPHYLayerProtocol_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WifiPHYLayerProtocol>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WifiPHYLayerProtocol_Name.");
    return SystemProfileProto_Network_WifiPHYLayerProtocol_Name(enum_t_value);
  }
  static inline bool WifiPHYLayerProtocol_Parse(const std::string& name,
      WifiPHYLayerProtocol* value) {
    return SystemProfileProto_Network_WifiPHYLayerProtocol_Parse(name, value);
  }

  typedef SystemProfileProto_Network_EffectiveConnectionType EffectiveConnectionType;
  static constexpr EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_UNKNOWN =
    SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
  PROTOBUF_DEPRECATED static constexpr EffectiveConnectionType DEPRECATED_EFFECTIVE_CONNECTION_TYPE_AMBIGUOUS =
    SystemProfileProto_Network_EffectiveConnectionType_DEPRECATED_EFFECTIVE_CONNECTION_TYPE_AMBIGUOUS;
  static constexpr EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_OFFLINE =
    SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_OFFLINE;
  static constexpr EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_SLOW_2G =
    SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_SLOW_2G;
  static constexpr EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_2G =
    SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_2G;
  static constexpr EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_3G =
    SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_3G;
  static constexpr EffectiveConnectionType EFFECTIVE_CONNECTION_TYPE_4G =
    SystemProfileProto_Network_EffectiveConnectionType_EFFECTIVE_CONNECTION_TYPE_4G;
  static inline bool EffectiveConnectionType_IsValid(int value) {
    return SystemProfileProto_Network_EffectiveConnectionType_IsValid(value);
  }
  static constexpr EffectiveConnectionType EffectiveConnectionType_MIN =
    SystemProfileProto_Network_EffectiveConnectionType_EffectiveConnectionType_MIN;
  static constexpr EffectiveConnectionType EffectiveConnectionType_MAX =
    SystemProfileProto_Network_EffectiveConnectionType_EffectiveConnectionType_MAX;
  static constexpr int EffectiveConnectionType_ARRAYSIZE =
    SystemProfileProto_Network_EffectiveConnectionType_EffectiveConnectionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EffectiveConnectionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EffectiveConnectionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EffectiveConnectionType_Name.");
    return SystemProfileProto_Network_EffectiveConnectionType_Name(enum_t_value);
  }
  static inline bool EffectiveConnectionType_Parse(const std::string& name,
      EffectiveConnectionType* value) {
    return SystemProfileProto_Network_EffectiveConnectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccessPointInfoFieldNumber = 5,
    kConnectionTypeFieldNumber = 2,
    kConnectionTypeIsAmbiguousFieldNumber = 1,
    kWifiPhyLayerProtocolIsAmbiguousFieldNumber = 3,
    kWifiPhyLayerProtocolFieldNumber = 4,
    kDeprecatedEffectiveConnectionTypeFieldNumber = 6,
    kMinEffectiveConnectionTypeFieldNumber = 7,
    kMaxEffectiveConnectionTypeFieldNumber = 8,
  };
  // optional .metrics.SystemProfileProto.Network.WifiAccessPoint access_point_info = 5;
  bool has_access_point_info() const;
  void clear_access_point_info();
  const ::metrics::SystemProfileProto_Network_WifiAccessPoint& access_point_info() const;
  ::metrics::SystemProfileProto_Network_WifiAccessPoint* release_access_point_info();
  ::metrics::SystemProfileProto_Network_WifiAccessPoint* mutable_access_point_info();
  void set_allocated_access_point_info(::metrics::SystemProfileProto_Network_WifiAccessPoint* access_point_info);

  // optional .metrics.SystemProfileProto.Network.ConnectionType connection_type = 2;
  bool has_connection_type() const;
  void clear_connection_type();
  ::metrics::SystemProfileProto_Network_ConnectionType connection_type() const;
  void set_connection_type(::metrics::SystemProfileProto_Network_ConnectionType value);

  // optional bool connection_type_is_ambiguous = 1;
  bool has_connection_type_is_ambiguous() const;
  void clear_connection_type_is_ambiguous();
  bool connection_type_is_ambiguous() const;
  void set_connection_type_is_ambiguous(bool value);

  // optional bool wifi_phy_layer_protocol_is_ambiguous = 3;
  bool has_wifi_phy_layer_protocol_is_ambiguous() const;
  void clear_wifi_phy_layer_protocol_is_ambiguous();
  bool wifi_phy_layer_protocol_is_ambiguous() const;
  void set_wifi_phy_layer_protocol_is_ambiguous(bool value);

  // optional .metrics.SystemProfileProto.Network.WifiPHYLayerProtocol wifi_phy_layer_protocol = 4;
  bool has_wifi_phy_layer_protocol() const;
  void clear_wifi_phy_layer_protocol();
  ::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol wifi_phy_layer_protocol() const;
  void set_wifi_phy_layer_protocol(::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol value);

  // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType deprecated_effective_connection_type = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_effective_connection_type() const;
  PROTOBUF_DEPRECATED void clear_deprecated_effective_connection_type();
  PROTOBUF_DEPRECATED ::metrics::SystemProfileProto_Network_EffectiveConnectionType deprecated_effective_connection_type() const;
  PROTOBUF_DEPRECATED void set_deprecated_effective_connection_type(::metrics::SystemProfileProto_Network_EffectiveConnectionType value);

  // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType min_effective_connection_type = 7;
  bool has_min_effective_connection_type() const;
  void clear_min_effective_connection_type();
  ::metrics::SystemProfileProto_Network_EffectiveConnectionType min_effective_connection_type() const;
  void set_min_effective_connection_type(::metrics::SystemProfileProto_Network_EffectiveConnectionType value);

  // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType max_effective_connection_type = 8;
  bool has_max_effective_connection_type() const;
  void clear_max_effective_connection_type();
  ::metrics::SystemProfileProto_Network_EffectiveConnectionType max_effective_connection_type() const;
  void set_max_effective_connection_type(::metrics::SystemProfileProto_Network_EffectiveConnectionType value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Network)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::SystemProfileProto_Network_WifiAccessPoint* access_point_info_;
  int connection_type_;
  bool connection_type_is_ambiguous_;
  bool wifi_phy_layer_protocol_is_ambiguous_;
  int wifi_phy_layer_protocol_;
  int deprecated_effective_connection_type_;
  int min_effective_connection_type_;
  int max_effective_connection_type_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_GoogleUpdate_ProductInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.GoogleUpdate.ProductInfo) */ {
 public:
  SystemProfileProto_GoogleUpdate_ProductInfo();
  virtual ~SystemProfileProto_GoogleUpdate_ProductInfo();

  SystemProfileProto_GoogleUpdate_ProductInfo(const SystemProfileProto_GoogleUpdate_ProductInfo& from);
  SystemProfileProto_GoogleUpdate_ProductInfo(SystemProfileProto_GoogleUpdate_ProductInfo&& from) noexcept
    : SystemProfileProto_GoogleUpdate_ProductInfo() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_GoogleUpdate_ProductInfo& operator=(const SystemProfileProto_GoogleUpdate_ProductInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_GoogleUpdate_ProductInfo& operator=(SystemProfileProto_GoogleUpdate_ProductInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_GoogleUpdate_ProductInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_GoogleUpdate_ProductInfo* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_GoogleUpdate_ProductInfo*>(
               &_SystemProfileProto_GoogleUpdate_ProductInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SystemProfileProto_GoogleUpdate_ProductInfo& a, SystemProfileProto_GoogleUpdate_ProductInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_GoogleUpdate_ProductInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_GoogleUpdate_ProductInfo* New() const final {
    return CreateMaybeMessage<SystemProfileProto_GoogleUpdate_ProductInfo>(nullptr);
  }

  SystemProfileProto_GoogleUpdate_ProductInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_GoogleUpdate_ProductInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_GoogleUpdate_ProductInfo& from);
  void MergeFrom(const SystemProfileProto_GoogleUpdate_ProductInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_GoogleUpdate_ProductInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.GoogleUpdate.ProductInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult InstallResult;
  static constexpr InstallResult INSTALL_RESULT_SUCCESS =
    SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_SUCCESS;
  static constexpr InstallResult INSTALL_RESULT_FAILED_CUSTOM_ERROR =
    SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_FAILED_CUSTOM_ERROR;
  static constexpr InstallResult INSTALL_RESULT_FAILED_MSI_ERROR =
    SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_FAILED_MSI_ERROR;
  static constexpr InstallResult INSTALL_RESULT_FAILED_SYSTEM_ERROR =
    SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_FAILED_SYSTEM_ERROR;
  static constexpr InstallResult INSTALL_RESULT_EXIT_CODE =
    SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_INSTALL_RESULT_EXIT_CODE;
  static inline bool InstallResult_IsValid(int value) {
    return SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_IsValid(value);
  }
  static constexpr InstallResult InstallResult_MIN =
    SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_InstallResult_MIN;
  static constexpr InstallResult InstallResult_MAX =
    SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_InstallResult_MAX;
  static constexpr int InstallResult_ARRAYSIZE =
    SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_InstallResult_ARRAYSIZE;
  template<typename T>
  static inline const std::string& InstallResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InstallResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InstallResult_Name.");
    return SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_Name(enum_t_value);
  }
  static inline bool InstallResult_Parse(const std::string& name,
      InstallResult* value) {
    return SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kLastUpdateSuccessTimestampFieldNumber = 2,
    kLastResultFieldNumber = 3,
    kLastErrorFieldNumber = 4,
    kLastExtraErrorFieldNumber = 5,
  };
  // optional string version = 1;
  bool has_version() const;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // optional int64 last_update_success_timestamp = 2;
  bool has_last_update_success_timestamp() const;
  void clear_last_update_success_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_update_success_timestamp() const;
  void set_last_update_success_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo.InstallResult last_result = 3;
  bool has_last_result() const;
  void clear_last_result();
  ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult last_result() const;
  void set_last_result(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult value);

  // optional int32 last_error = 4;
  bool has_last_error() const;
  void clear_last_error();
  ::PROTOBUF_NAMESPACE_ID::int32 last_error() const;
  void set_last_error(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 last_extra_error = 5;
  bool has_last_extra_error() const;
  void clear_last_extra_error();
  ::PROTOBUF_NAMESPACE_ID::int32 last_extra_error() const;
  void set_last_extra_error(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_update_success_timestamp_;
  int last_result_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_error_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_extra_error_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_GoogleUpdate :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.GoogleUpdate) */ {
 public:
  SystemProfileProto_GoogleUpdate();
  virtual ~SystemProfileProto_GoogleUpdate();

  SystemProfileProto_GoogleUpdate(const SystemProfileProto_GoogleUpdate& from);
  SystemProfileProto_GoogleUpdate(SystemProfileProto_GoogleUpdate&& from) noexcept
    : SystemProfileProto_GoogleUpdate() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_GoogleUpdate& operator=(const SystemProfileProto_GoogleUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_GoogleUpdate& operator=(SystemProfileProto_GoogleUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_GoogleUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_GoogleUpdate* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_GoogleUpdate*>(
               &_SystemProfileProto_GoogleUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SystemProfileProto_GoogleUpdate& a, SystemProfileProto_GoogleUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_GoogleUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_GoogleUpdate* New() const final {
    return CreateMaybeMessage<SystemProfileProto_GoogleUpdate>(nullptr);
  }

  SystemProfileProto_GoogleUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_GoogleUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_GoogleUpdate& from);
  void MergeFrom(const SystemProfileProto_GoogleUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_GoogleUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.GoogleUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_GoogleUpdate_ProductInfo ProductInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kGoogleUpdateStatusFieldNumber = 4,
    kClientStatusFieldNumber = 5,
    kLastAutomaticStartTimestampFieldNumber = 2,
    kLastUpdateCheckTimestampFieldNumber = 3,
    kIsSystemInstallFieldNumber = 1,
  };
  // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo google_update_status = 4;
  bool has_google_update_status() const;
  void clear_google_update_status();
  const ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo& google_update_status() const;
  ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* release_google_update_status();
  ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* mutable_google_update_status();
  void set_allocated_google_update_status(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* google_update_status);

  // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo client_status = 5;
  bool has_client_status() const;
  void clear_client_status();
  const ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo& client_status() const;
  ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* release_client_status();
  ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* mutable_client_status();
  void set_allocated_client_status(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* client_status);

  // optional int64 last_automatic_start_timestamp = 2;
  bool has_last_automatic_start_timestamp() const;
  void clear_last_automatic_start_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_automatic_start_timestamp() const;
  void set_last_automatic_start_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_update_check_timestamp = 3;
  bool has_last_update_check_timestamp() const;
  void clear_last_update_check_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_update_check_timestamp() const;
  void set_last_update_check_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool is_system_install = 1;
  bool has_is_system_install() const;
  void clear_is_system_install();
  bool is_system_install() const;
  void set_is_system_install(bool value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.GoogleUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* google_update_status_;
  ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* client_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_automatic_start_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_update_check_timestamp_;
  bool is_system_install_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Plugin :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Plugin) */ {
 public:
  SystemProfileProto_Plugin();
  virtual ~SystemProfileProto_Plugin();

  SystemProfileProto_Plugin(const SystemProfileProto_Plugin& from);
  SystemProfileProto_Plugin(SystemProfileProto_Plugin&& from) noexcept
    : SystemProfileProto_Plugin() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Plugin& operator=(const SystemProfileProto_Plugin& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Plugin& operator=(SystemProfileProto_Plugin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Plugin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Plugin* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Plugin*>(
               &_SystemProfileProto_Plugin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SystemProfileProto_Plugin& a, SystemProfileProto_Plugin& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Plugin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Plugin* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Plugin>(nullptr);
  }

  SystemProfileProto_Plugin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Plugin>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Plugin& from);
  void MergeFrom(const SystemProfileProto_Plugin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Plugin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Plugin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFilenameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kIsDisabledFieldNumber = 4,
    kIsPepperFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string filename = 2;
  bool has_filename() const;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);

  // optional string version = 3;
  bool has_version() const;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // optional bool is_disabled = 4;
  bool has_is_disabled() const;
  void clear_is_disabled();
  bool is_disabled() const;
  void set_is_disabled(bool value);

  // optional bool is_pepper = 5;
  bool has_is_pepper() const;
  void clear_is_pepper();
  bool is_pepper() const;
  void set_is_pepper(bool value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Plugin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  bool is_disabled_;
  bool is_pepper_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Stability_PluginStability :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Stability.PluginStability) */ {
 public:
  SystemProfileProto_Stability_PluginStability();
  virtual ~SystemProfileProto_Stability_PluginStability();

  SystemProfileProto_Stability_PluginStability(const SystemProfileProto_Stability_PluginStability& from);
  SystemProfileProto_Stability_PluginStability(SystemProfileProto_Stability_PluginStability&& from) noexcept
    : SystemProfileProto_Stability_PluginStability() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Stability_PluginStability& operator=(const SystemProfileProto_Stability_PluginStability& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Stability_PluginStability& operator=(SystemProfileProto_Stability_PluginStability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Stability_PluginStability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Stability_PluginStability* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Stability_PluginStability*>(
               &_SystemProfileProto_Stability_PluginStability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SystemProfileProto_Stability_PluginStability& a, SystemProfileProto_Stability_PluginStability& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Stability_PluginStability* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Stability_PluginStability* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Stability_PluginStability>(nullptr);
  }

  SystemProfileProto_Stability_PluginStability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Stability_PluginStability>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Stability_PluginStability& from);
  void MergeFrom(const SystemProfileProto_Stability_PluginStability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Stability_PluginStability* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Stability.PluginStability";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginFieldNumber = 1,
    kLaunchCountFieldNumber = 2,
    kInstanceCountFieldNumber = 3,
    kCrashCountFieldNumber = 4,
    kLoadingErrorCountFieldNumber = 5,
  };
  // optional .metrics.SystemProfileProto.Plugin plugin = 1;
  bool has_plugin() const;
  void clear_plugin();
  const ::metrics::SystemProfileProto_Plugin& plugin() const;
  ::metrics::SystemProfileProto_Plugin* release_plugin();
  ::metrics::SystemProfileProto_Plugin* mutable_plugin();
  void set_allocated_plugin(::metrics::SystemProfileProto_Plugin* plugin);

  // optional int32 launch_count = 2;
  bool has_launch_count() const;
  void clear_launch_count();
  ::PROTOBUF_NAMESPACE_ID::int32 launch_count() const;
  void set_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 instance_count = 3;
  bool has_instance_count() const;
  void clear_instance_count();
  ::PROTOBUF_NAMESPACE_ID::int32 instance_count() const;
  void set_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 crash_count = 4;
  bool has_crash_count() const;
  void clear_crash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count() const;
  void set_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 loading_error_count = 5;
  bool has_loading_error_count() const;
  void clear_loading_error_count();
  ::PROTOBUF_NAMESPACE_ID::int32 loading_error_count() const;
  void set_loading_error_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Stability.PluginStability)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::SystemProfileProto_Plugin* plugin_;
  ::PROTOBUF_NAMESPACE_ID::int32 launch_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 instance_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 loading_error_count_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_Stability :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.Stability) */ {
 public:
  SystemProfileProto_Stability();
  virtual ~SystemProfileProto_Stability();

  SystemProfileProto_Stability(const SystemProfileProto_Stability& from);
  SystemProfileProto_Stability(SystemProfileProto_Stability&& from) noexcept
    : SystemProfileProto_Stability() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_Stability& operator=(const SystemProfileProto_Stability& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_Stability& operator=(SystemProfileProto_Stability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_Stability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_Stability* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_Stability*>(
               &_SystemProfileProto_Stability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SystemProfileProto_Stability& a, SystemProfileProto_Stability& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_Stability* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_Stability* New() const final {
    return CreateMaybeMessage<SystemProfileProto_Stability>(nullptr);
  }

  SystemProfileProto_Stability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_Stability>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_Stability& from);
  void MergeFrom(const SystemProfileProto_Stability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_Stability* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.Stability";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_Stability_PluginStability PluginStability;

  // accessors -------------------------------------------------------

  enum : int {
    kPluginStabilityFieldNumber = 22,
    kIncrementalUptimeSecFieldNumber = 1,
    kPageLoadCountFieldNumber = 2,
    kRendererCrashCountFieldNumber = 3,
    kRendererHangCountFieldNumber = 4,
    kExtensionRendererCrashCountFieldNumber = 5,
    kChildProcessCrashCountFieldNumber = 6,
    kOtherUserCrashCountFieldNumber = 7,
    kKernelCrashCountFieldNumber = 8,
    kUncleanSystemShutdownCountFieldNumber = 9,
    kLaunchCountFieldNumber = 15,
    kCrashCountFieldNumber = 16,
    kIncompleteShutdownCountFieldNumber = 17,
    kBreakpadRegistrationSuccessCountFieldNumber = 18,
    kBreakpadRegistrationFailureCountFieldNumber = 19,
    kDebuggerPresentCountFieldNumber = 20,
    kDebuggerNotPresentCountFieldNumber = 21,
    kRendererFailedLaunchCountFieldNumber = 24,
    kUptimeSecFieldNumber = 23,
    kExtensionRendererFailedLaunchCountFieldNumber = 25,
    kRendererLaunchCountFieldNumber = 26,
    kGpuCrashCountFieldNumber = 31,
    kExtensionRendererLaunchCountFieldNumber = 27,
    kCrashCountWithoutGmsCoreUpdateFieldNumber = 28,
    kFromPreviousRunFieldNumber = 29,
    kCrashCountDueToGmsCoreUpdateFieldNumber = 30,
  };
  // repeated .metrics.SystemProfileProto.Stability.PluginStability plugin_stability = 22;
  int plugin_stability_size() const;
  void clear_plugin_stability();
  ::metrics::SystemProfileProto_Stability_PluginStability* mutable_plugin_stability(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Stability_PluginStability >*
      mutable_plugin_stability();
  const ::metrics::SystemProfileProto_Stability_PluginStability& plugin_stability(int index) const;
  ::metrics::SystemProfileProto_Stability_PluginStability* add_plugin_stability();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Stability_PluginStability >&
      plugin_stability() const;

  // optional int64 incremental_uptime_sec = 1;
  bool has_incremental_uptime_sec() const;
  void clear_incremental_uptime_sec();
  ::PROTOBUF_NAMESPACE_ID::int64 incremental_uptime_sec() const;
  void set_incremental_uptime_sec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 page_load_count = 2;
  bool has_page_load_count() const;
  void clear_page_load_count();
  ::PROTOBUF_NAMESPACE_ID::int32 page_load_count() const;
  void set_page_load_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 renderer_crash_count = 3;
  bool has_renderer_crash_count() const;
  void clear_renderer_crash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 renderer_crash_count() const;
  void set_renderer_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 renderer_hang_count = 4;
  bool has_renderer_hang_count() const;
  void clear_renderer_hang_count();
  ::PROTOBUF_NAMESPACE_ID::int32 renderer_hang_count() const;
  void set_renderer_hang_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 extension_renderer_crash_count = 5;
  bool has_extension_renderer_crash_count() const;
  void clear_extension_renderer_crash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 extension_renderer_crash_count() const;
  void set_extension_renderer_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 child_process_crash_count = 6;
  bool has_child_process_crash_count() const;
  void clear_child_process_crash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 child_process_crash_count() const;
  void set_child_process_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 other_user_crash_count = 7;
  bool has_other_user_crash_count() const;
  void clear_other_user_crash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 other_user_crash_count() const;
  void set_other_user_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 kernel_crash_count = 8;
  bool has_kernel_crash_count() const;
  void clear_kernel_crash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_crash_count() const;
  void set_kernel_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 unclean_system_shutdown_count = 9;
  bool has_unclean_system_shutdown_count() const;
  void clear_unclean_system_shutdown_count();
  ::PROTOBUF_NAMESPACE_ID::int32 unclean_system_shutdown_count() const;
  void set_unclean_system_shutdown_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 launch_count = 15;
  bool has_launch_count() const;
  void clear_launch_count();
  ::PROTOBUF_NAMESPACE_ID::int32 launch_count() const;
  void set_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 crash_count = 16;
  bool has_crash_count() const;
  void clear_crash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count() const;
  void set_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 incomplete_shutdown_count = 17;
  bool has_incomplete_shutdown_count() const;
  void clear_incomplete_shutdown_count();
  ::PROTOBUF_NAMESPACE_ID::int32 incomplete_shutdown_count() const;
  void set_incomplete_shutdown_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 breakpad_registration_success_count = 18;
  bool has_breakpad_registration_success_count() const;
  void clear_breakpad_registration_success_count();
  ::PROTOBUF_NAMESPACE_ID::int32 breakpad_registration_success_count() const;
  void set_breakpad_registration_success_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 breakpad_registration_failure_count = 19;
  bool has_breakpad_registration_failure_count() const;
  void clear_breakpad_registration_failure_count();
  ::PROTOBUF_NAMESPACE_ID::int32 breakpad_registration_failure_count() const;
  void set_breakpad_registration_failure_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 debugger_present_count = 20;
  bool has_debugger_present_count() const;
  void clear_debugger_present_count();
  ::PROTOBUF_NAMESPACE_ID::int32 debugger_present_count() const;
  void set_debugger_present_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 debugger_not_present_count = 21;
  bool has_debugger_not_present_count() const;
  void clear_debugger_not_present_count();
  ::PROTOBUF_NAMESPACE_ID::int32 debugger_not_present_count() const;
  void set_debugger_not_present_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 renderer_failed_launch_count = 24;
  bool has_renderer_failed_launch_count() const;
  void clear_renderer_failed_launch_count();
  ::PROTOBUF_NAMESPACE_ID::int32 renderer_failed_launch_count() const;
  void set_renderer_failed_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 uptime_sec = 23;
  bool has_uptime_sec() const;
  void clear_uptime_sec();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_sec() const;
  void set_uptime_sec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 extension_renderer_failed_launch_count = 25;
  bool has_extension_renderer_failed_launch_count() const;
  void clear_extension_renderer_failed_launch_count();
  ::PROTOBUF_NAMESPACE_ID::int32 extension_renderer_failed_launch_count() const;
  void set_extension_renderer_failed_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 renderer_launch_count = 26;
  bool has_renderer_launch_count() const;
  void clear_renderer_launch_count();
  ::PROTOBUF_NAMESPACE_ID::int32 renderer_launch_count() const;
  void set_renderer_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 gpu_crash_count = 31;
  bool has_gpu_crash_count() const;
  void clear_gpu_crash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_crash_count() const;
  void set_gpu_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 extension_renderer_launch_count = 27;
  bool has_extension_renderer_launch_count() const;
  void clear_extension_renderer_launch_count();
  ::PROTOBUF_NAMESPACE_ID::int32 extension_renderer_launch_count() const;
  void set_extension_renderer_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 crash_count_without_gms_core_update = 28 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_crash_count_without_gms_core_update() const;
  PROTOBUF_DEPRECATED void clear_crash_count_without_gms_core_update();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 crash_count_without_gms_core_update() const;
  PROTOBUF_DEPRECATED void set_crash_count_without_gms_core_update(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool from_previous_run = 29;
  bool has_from_previous_run() const;
  void clear_from_previous_run();
  bool from_previous_run() const;
  void set_from_previous_run(bool value);

  // optional int32 crash_count_due_to_gms_core_update = 30;
  bool has_crash_count_due_to_gms_core_update() const;
  void clear_crash_count_due_to_gms_core_update();
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count_due_to_gms_core_update() const;
  void set_crash_count_due_to_gms_core_update(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.Stability)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Stability_PluginStability > plugin_stability_;
  ::PROTOBUF_NAMESPACE_ID::int64 incremental_uptime_sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_load_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 renderer_crash_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 renderer_hang_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 extension_renderer_crash_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 child_process_crash_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 other_user_crash_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_crash_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 unclean_system_shutdown_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 launch_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 incomplete_shutdown_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 breakpad_registration_success_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 breakpad_registration_failure_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 debugger_present_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 debugger_not_present_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 renderer_failed_launch_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 extension_renderer_failed_launch_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 renderer_launch_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_crash_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 extension_renderer_launch_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count_without_gms_core_update_;
  bool from_previous_run_;
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count_due_to_gms_core_update_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_FieldTrial :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.FieldTrial) */ {
 public:
  SystemProfileProto_FieldTrial();
  virtual ~SystemProfileProto_FieldTrial();

  SystemProfileProto_FieldTrial(const SystemProfileProto_FieldTrial& from);
  SystemProfileProto_FieldTrial(SystemProfileProto_FieldTrial&& from) noexcept
    : SystemProfileProto_FieldTrial() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_FieldTrial& operator=(const SystemProfileProto_FieldTrial& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_FieldTrial& operator=(SystemProfileProto_FieldTrial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_FieldTrial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_FieldTrial* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_FieldTrial*>(
               &_SystemProfileProto_FieldTrial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SystemProfileProto_FieldTrial& a, SystemProfileProto_FieldTrial& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_FieldTrial* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_FieldTrial* New() const final {
    return CreateMaybeMessage<SystemProfileProto_FieldTrial>(nullptr);
  }

  SystemProfileProto_FieldTrial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_FieldTrial>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_FieldTrial& from);
  void MergeFrom(const SystemProfileProto_FieldTrial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_FieldTrial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.FieldTrial";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // optional fixed32 name_id = 1;
  bool has_name_id() const;
  void clear_name_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 name_id() const;
  void set_name_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed32 group_id = 2;
  bool has_group_id() const;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.FieldTrial)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 name_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_id_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_ExternalAudioVideoDevice_AudioDescription :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription) */ {
 public:
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription();
  virtual ~SystemProfileProto_ExternalAudioVideoDevice_AudioDescription();

  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription(const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& from);
  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription&& from) noexcept
    : SystemProfileProto_ExternalAudioVideoDevice_AudioDescription() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& operator=(const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& operator=(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription*>(
               &_SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& a, SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* New() const final {
    return CreateMaybeMessage<SystemProfileProto_ExternalAudioVideoDevice_AudioDescription>(nullptr);
  }

  SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_ExternalAudioVideoDevice_AudioDescription>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& from);
  void MergeFrom(const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat AudioFormat;
  static constexpr AudioFormat AUDIO_FORMAT_UNKNOWN =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_UNKNOWN;
  static constexpr AudioFormat AUDIO_FORMAT_LPCM =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_LPCM;
  static constexpr AudioFormat AUDIO_FORMAT_AC_3 =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_AC_3;
  static constexpr AudioFormat AUDIO_FORMAT_MPEG1 =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MPEG1;
  static constexpr AudioFormat AUDIO_FORMAT_MP3 =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MP3;
  static constexpr AudioFormat AUDIO_FORMAT_MPEG2 =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MPEG2;
  static constexpr AudioFormat AUDIO_FORMAT_AAC =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_AAC;
  static constexpr AudioFormat AUDIO_FORMAT_DTS =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_DTS;
  static constexpr AudioFormat AUDIO_FORMAT_ATRAC =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_ATRAC;
  static constexpr AudioFormat AUDIO_FORMAT_ONE_BIT =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_ONE_BIT;
  static constexpr AudioFormat AUDIO_FORMAT_DD_PLUS =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_DD_PLUS;
  static constexpr AudioFormat AUDIO_FORMAT_DTS_HD =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_DTS_HD;
  static constexpr AudioFormat AUDIO_FORMAT_MLP_DOLBY_TRUEHD =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MLP_DOLBY_TRUEHD;
  static constexpr AudioFormat AUDIO_FORMAT_DST_AUDIO =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_DST_AUDIO;
  static constexpr AudioFormat AUDIO_FORMAT_MICROSOFT_WMA_PRO =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AUDIO_FORMAT_MICROSOFT_WMA_PRO;
  static inline bool AudioFormat_IsValid(int value) {
    return SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_IsValid(value);
  }
  static constexpr AudioFormat AudioFormat_MIN =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AudioFormat_MIN;
  static constexpr AudioFormat AudioFormat_MAX =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AudioFormat_MAX;
  static constexpr int AudioFormat_ARRAYSIZE =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_AudioFormat_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AudioFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AudioFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AudioFormat_Name.");
    return SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_Name(enum_t_value);
  }
  static inline bool AudioFormat_Parse(const std::string& name,
      AudioFormat* value) {
    return SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_Parse(name, value);
  }

  typedef SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode OutputMode;
  static constexpr OutputMode ANALOG =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_ANALOG;
  static constexpr OutputMode DIGITAL =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_DIGITAL;
  static inline bool OutputMode_IsValid(int value) {
    return SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_IsValid(value);
  }
  static constexpr OutputMode OutputMode_MIN =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_OutputMode_MIN;
  static constexpr OutputMode OutputMode_MAX =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_OutputMode_MAX;
  static constexpr int OutputMode_ARRAYSIZE =
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_OutputMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& OutputMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OutputMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OutputMode_Name.");
    return SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_Name(enum_t_value);
  }
  static inline bool OutputMode_Parse(const std::string& name,
      OutputMode* value) {
    return SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSampleFrequencyHzFieldNumber = 3,
    kAudioFormatFieldNumber = 1,
    kNumChannelsFieldNumber = 2,
    kMaxBitRatePerSecondFieldNumber = 4,
    kBitDepthFieldNumber = 5,
    kOutputModeFieldNumber = 6,
  };
  // repeated int32 sample_frequency_hz = 3;
  int sample_frequency_hz_size() const;
  void clear_sample_frequency_hz();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_frequency_hz(int index) const;
  void set_sample_frequency_hz(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sample_frequency_hz(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sample_frequency_hz() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sample_frequency_hz();

  // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.AudioFormat audio_format = 1;
  bool has_audio_format() const;
  void clear_audio_format();
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat audio_format() const;
  void set_audio_format(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat value);

  // optional int32 num_channels = 2;
  bool has_num_channels() const;
  void clear_num_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 num_channels() const;
  void set_num_channels(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_bit_rate_per_second = 4;
  bool has_max_bit_rate_per_second() const;
  void clear_max_bit_rate_per_second();
  ::PROTOBUF_NAMESPACE_ID::int32 max_bit_rate_per_second() const;
  void set_max_bit_rate_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 bit_depth = 5;
  bool has_bit_depth() const;
  void clear_bit_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 bit_depth() const;
  void set_bit_depth(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.OutputMode output_mode = 6;
  bool has_output_mode() const;
  void clear_output_mode();
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode output_mode() const;
  void set_output_mode(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sample_frequency_hz_;
  int audio_format_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_bit_rate_per_second_;
  ::PROTOBUF_NAMESPACE_ID::int32 bit_depth_;
  int output_mode_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_ExternalAudioVideoDevice_CECCommand :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand) */ {
 public:
  SystemProfileProto_ExternalAudioVideoDevice_CECCommand();
  virtual ~SystemProfileProto_ExternalAudioVideoDevice_CECCommand();

  SystemProfileProto_ExternalAudioVideoDevice_CECCommand(const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& from);
  SystemProfileProto_ExternalAudioVideoDevice_CECCommand(SystemProfileProto_ExternalAudioVideoDevice_CECCommand&& from) noexcept
    : SystemProfileProto_ExternalAudioVideoDevice_CECCommand() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_ExternalAudioVideoDevice_CECCommand& operator=(const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_ExternalAudioVideoDevice_CECCommand& operator=(SystemProfileProto_ExternalAudioVideoDevice_CECCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_ExternalAudioVideoDevice_CECCommand* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_ExternalAudioVideoDevice_CECCommand*>(
               &_SystemProfileProto_ExternalAudioVideoDevice_CECCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SystemProfileProto_ExternalAudioVideoDevice_CECCommand& a, SystemProfileProto_ExternalAudioVideoDevice_CECCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_ExternalAudioVideoDevice_CECCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_ExternalAudioVideoDevice_CECCommand* New() const final {
    return CreateMaybeMessage<SystemProfileProto_ExternalAudioVideoDevice_CECCommand>(nullptr);
  }

  SystemProfileProto_ExternalAudioVideoDevice_CECCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_ExternalAudioVideoDevice_CECCommand>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& from);
  void MergeFrom(const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_ExternalAudioVideoDevice_CECCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpcodeFieldNumber = 1,
    kNumReceivedDirectFieldNumber = 2,
    kNumReceivedBroadcastFieldNumber = 3,
    kNumSentDirectFieldNumber = 4,
    kNumSentBroadcastFieldNumber = 5,
    kNumAbortedUnknownReasonFieldNumber = 6,
    kNumAbortedUnrecognizedFieldNumber = 7,
  };
  // optional int32 opcode = 1;
  bool has_opcode() const;
  void clear_opcode();
  ::PROTOBUF_NAMESPACE_ID::int32 opcode() const;
  void set_opcode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_received_direct = 2;
  bool has_num_received_direct() const;
  void clear_num_received_direct();
  ::PROTOBUF_NAMESPACE_ID::int32 num_received_direct() const;
  void set_num_received_direct(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_received_broadcast = 3;
  bool has_num_received_broadcast() const;
  void clear_num_received_broadcast();
  ::PROTOBUF_NAMESPACE_ID::int32 num_received_broadcast() const;
  void set_num_received_broadcast(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_sent_direct = 4;
  bool has_num_sent_direct() const;
  void clear_num_sent_direct();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sent_direct() const;
  void set_num_sent_direct(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_sent_broadcast = 5;
  bool has_num_sent_broadcast() const;
  void clear_num_sent_broadcast();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sent_broadcast() const;
  void set_num_sent_broadcast(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_aborted_unknown_reason = 6;
  bool has_num_aborted_unknown_reason() const;
  void clear_num_aborted_unknown_reason();
  ::PROTOBUF_NAMESPACE_ID::int32 num_aborted_unknown_reason() const;
  void set_num_aborted_unknown_reason(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_aborted_unrecognized = 7;
  bool has_num_aborted_unrecognized() const;
  void clear_num_aborted_unrecognized();
  ::PROTOBUF_NAMESPACE_ID::int32 num_aborted_unrecognized() const;
  void set_num_aborted_unrecognized(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 opcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_received_direct_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_received_broadcast_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sent_direct_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sent_broadcast_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_aborted_unknown_reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_aborted_unrecognized_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_ExternalAudioVideoDevice :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.ExternalAudioVideoDevice) */ {
 public:
  SystemProfileProto_ExternalAudioVideoDevice();
  virtual ~SystemProfileProto_ExternalAudioVideoDevice();

  SystemProfileProto_ExternalAudioVideoDevice(const SystemProfileProto_ExternalAudioVideoDevice& from);
  SystemProfileProto_ExternalAudioVideoDevice(SystemProfileProto_ExternalAudioVideoDevice&& from) noexcept
    : SystemProfileProto_ExternalAudioVideoDevice() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_ExternalAudioVideoDevice& operator=(const SystemProfileProto_ExternalAudioVideoDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_ExternalAudioVideoDevice& operator=(SystemProfileProto_ExternalAudioVideoDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_ExternalAudioVideoDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_ExternalAudioVideoDevice* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_ExternalAudioVideoDevice*>(
               &_SystemProfileProto_ExternalAudioVideoDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SystemProfileProto_ExternalAudioVideoDevice& a, SystemProfileProto_ExternalAudioVideoDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_ExternalAudioVideoDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_ExternalAudioVideoDevice* New() const final {
    return CreateMaybeMessage<SystemProfileProto_ExternalAudioVideoDevice>(nullptr);
  }

  SystemProfileProto_ExternalAudioVideoDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_ExternalAudioVideoDevice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_ExternalAudioVideoDevice& from);
  void MergeFrom(const SystemProfileProto_ExternalAudioVideoDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_ExternalAudioVideoDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.ExternalAudioVideoDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_ExternalAudioVideoDevice_AudioDescription AudioDescription;
  typedef SystemProfileProto_ExternalAudioVideoDevice_CECCommand CECCommand;

  typedef SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType AVDeviceType;
  static constexpr AVDeviceType AV_DEVICE_TYPE_UNKNOWN =
    SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_UNKNOWN;
  static constexpr AVDeviceType AV_DEVICE_TYPE_TV =
    SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_TV;
  static constexpr AVDeviceType AV_DEVICE_TYPE_RECORDER =
    SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_RECORDER;
  static constexpr AVDeviceType AV_DEVICE_TYPE_TUNER =
    SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_TUNER;
  static constexpr AVDeviceType AV_DEVICE_TYPE_PLAYER =
    SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_PLAYER;
  static constexpr AVDeviceType AV_DEVICE_TYPE_AUDIO_SYSTEM =
    SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AV_DEVICE_TYPE_AUDIO_SYSTEM;
  static inline bool AVDeviceType_IsValid(int value) {
    return SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid(value);
  }
  static constexpr AVDeviceType AVDeviceType_MIN =
    SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AVDeviceType_MIN;
  static constexpr AVDeviceType AVDeviceType_MAX =
    SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AVDeviceType_MAX;
  static constexpr int AVDeviceType_ARRAYSIZE =
    SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_AVDeviceType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AVDeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AVDeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AVDeviceType_Name.");
    return SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_Name(enum_t_value);
  }
  static inline bool AVDeviceType_Parse(const std::string& name,
      AVDeviceType* value) {
    return SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_Parse(name, value);
  }

  typedef SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding ColorEncoding;
  static constexpr ColorEncoding COLOR_ENCODING_UNKNOWN =
    SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_UNKNOWN;
  static constexpr ColorEncoding COLOR_ENCODING_RGB =
    SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_RGB;
  static constexpr ColorEncoding COLOR_ENCODING_YUV444 =
    SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_YUV444;
  static constexpr ColorEncoding COLOR_ENCODING_YUV422 =
    SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_YUV422;
  static constexpr ColorEncoding COLOR_ENCODING_YUV420 =
    SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_COLOR_ENCODING_YUV420;
  static inline bool ColorEncoding_IsValid(int value) {
    return SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_IsValid(value);
  }
  static constexpr ColorEncoding ColorEncoding_MIN =
    SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_ColorEncoding_MIN;
  static constexpr ColorEncoding ColorEncoding_MAX =
    SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_ColorEncoding_MAX;
  static constexpr int ColorEncoding_ARRAYSIZE =
    SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_ColorEncoding_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ColorEncoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ColorEncoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ColorEncoding_Name.");
    return SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_Name(enum_t_value);
  }
  static inline bool ColorEncoding_Parse(const std::string& name,
      ColorEncoding* value) {
    return SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAvDeviceTypeFieldNumber = 4,
    kAudioDescriptionFieldNumber = 9,
    kCecCommandFieldNumber = 13,
    kManufacturerNameFieldNumber = 1,
    kModelNameFieldNumber = 2,
    kProductCodeFieldNumber = 3,
    kManufactureYearFieldNumber = 5,
    kManufactureWeekFieldNumber = 6,
    kHorizontalResolutionFieldNumber = 7,
    kVerticalResolutionFieldNumber = 8,
    kPositionInSetupFieldNumber = 10,
    kCecVersionFieldNumber = 12,
    kFrameRateFieldNumber = 14,
    kColorEncodingFieldNumber = 15,
    kBitDepthFieldNumber = 16,
    kTmdsFieldNumber = 17,
    kIsInPathToTvFieldNumber = 11,
    kHdr10SupportFieldNumber = 18,
    kDolbyVisionSupportFieldNumber = 19,
    kYuvSupportFieldNumber = 21,
    kEotfSupportFieldNumber = 20,
    kYuv420SupportFieldNumber = 22,
    kMaximumSupportedHdcpVersionFieldNumber = 23,
    kCurrentHdcpVersionFieldNumber = 24,
  };
  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AVDeviceType av_device_type = 4;
  int av_device_type_size() const;
  void clear_av_device_type();
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType av_device_type(int index) const;
  void set_av_device_type(int index, ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType value);
  void add_av_device_type(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& av_device_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_av_device_type();

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription audio_description = 9;
  int audio_description_size() const;
  void clear_audio_description();
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* mutable_audio_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription >*
      mutable_audio_description();
  const ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& audio_description(int index) const;
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* add_audio_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription >&
      audio_description() const;

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand cec_command = 13;
  int cec_command_size() const;
  void clear_cec_command();
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand* mutable_cec_command(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand >*
      mutable_cec_command();
  const ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand& cec_command(int index) const;
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand* add_cec_command();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand >&
      cec_command() const;

  // optional string manufacturer_name = 1;
  bool has_manufacturer_name() const;
  void clear_manufacturer_name();
  const std::string& manufacturer_name() const;
  void set_manufacturer_name(const std::string& value);
  void set_manufacturer_name(std::string&& value);
  void set_manufacturer_name(const char* value);
  void set_manufacturer_name(const char* value, size_t size);
  std::string* mutable_manufacturer_name();
  std::string* release_manufacturer_name();
  void set_allocated_manufacturer_name(std::string* manufacturer_name);

  // optional string model_name = 2;
  bool has_model_name() const;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);

  // optional string product_code = 3;
  bool has_product_code() const;
  void clear_product_code();
  const std::string& product_code() const;
  void set_product_code(const std::string& value);
  void set_product_code(std::string&& value);
  void set_product_code(const char* value);
  void set_product_code(const char* value, size_t size);
  std::string* mutable_product_code();
  std::string* release_product_code();
  void set_allocated_product_code(std::string* product_code);

  // optional int32 manufacture_year = 5;
  bool has_manufacture_year() const;
  void clear_manufacture_year();
  ::PROTOBUF_NAMESPACE_ID::int32 manufacture_year() const;
  void set_manufacture_year(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 manufacture_week = 6;
  bool has_manufacture_week() const;
  void clear_manufacture_week();
  ::PROTOBUF_NAMESPACE_ID::int32 manufacture_week() const;
  void set_manufacture_week(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 horizontal_resolution = 7;
  bool has_horizontal_resolution() const;
  void clear_horizontal_resolution();
  ::PROTOBUF_NAMESPACE_ID::int32 horizontal_resolution() const;
  void set_horizontal_resolution(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 vertical_resolution = 8;
  bool has_vertical_resolution() const;
  void clear_vertical_resolution();
  ::PROTOBUF_NAMESPACE_ID::int32 vertical_resolution() const;
  void set_vertical_resolution(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 position_in_setup = 10;
  bool has_position_in_setup() const;
  void clear_position_in_setup();
  ::PROTOBUF_NAMESPACE_ID::int32 position_in_setup() const;
  void set_position_in_setup(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cec_version = 12;
  bool has_cec_version() const;
  void clear_cec_version();
  ::PROTOBUF_NAMESPACE_ID::int32 cec_version() const;
  void set_cec_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 frame_rate = 14;
  bool has_frame_rate() const;
  void clear_frame_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_rate() const;
  void set_frame_rate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.ColorEncoding color_encoding = 15;
  bool has_color_encoding() const;
  void clear_color_encoding();
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding color_encoding() const;
  void set_color_encoding(::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding value);

  // optional int32 bit_depth = 16;
  bool has_bit_depth() const;
  void clear_bit_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 bit_depth() const;
  void set_bit_depth(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tmds = 17;
  bool has_tmds() const;
  void clear_tmds();
  ::PROTOBUF_NAMESPACE_ID::int32 tmds() const;
  void set_tmds(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_in_path_to_tv = 11;
  bool has_is_in_path_to_tv() const;
  void clear_is_in_path_to_tv();
  bool is_in_path_to_tv() const;
  void set_is_in_path_to_tv(bool value);

  // optional bool hdr10_support = 18;
  bool has_hdr10_support() const;
  void clear_hdr10_support();
  bool hdr10_support() const;
  void set_hdr10_support(bool value);

  // optional bool dolby_vision_support = 19;
  bool has_dolby_vision_support() const;
  void clear_dolby_vision_support();
  bool dolby_vision_support() const;
  void set_dolby_vision_support(bool value);

  // optional bool yuv_support = 21;
  bool has_yuv_support() const;
  void clear_yuv_support();
  bool yuv_support() const;
  void set_yuv_support(bool value);

  // optional int32 eotf_support = 20;
  bool has_eotf_support() const;
  void clear_eotf_support();
  ::PROTOBUF_NAMESPACE_ID::int32 eotf_support() const;
  void set_eotf_support(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool yuv_420_support = 22;
  bool has_yuv_420_support() const;
  void clear_yuv_420_support();
  bool yuv_420_support() const;
  void set_yuv_420_support(bool value);

  // optional int32 maximum_supported_hdcp_version = 23;
  bool has_maximum_supported_hdcp_version() const;
  void clear_maximum_supported_hdcp_version();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_supported_hdcp_version() const;
  void set_maximum_supported_hdcp_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 current_hdcp_version = 24;
  bool has_current_hdcp_version() const;
  void clear_current_hdcp_version();
  ::PROTOBUF_NAMESPACE_ID::int32 current_hdcp_version() const;
  void set_current_hdcp_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.ExternalAudioVideoDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> av_device_type_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription > audio_description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand > cec_command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 manufacture_year_;
  ::PROTOBUF_NAMESPACE_ID::int32 manufacture_week_;
  ::PROTOBUF_NAMESPACE_ID::int32 horizontal_resolution_;
  ::PROTOBUF_NAMESPACE_ID::int32 vertical_resolution_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_in_setup_;
  ::PROTOBUF_NAMESPACE_ID::int32 cec_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_rate_;
  int color_encoding_;
  ::PROTOBUF_NAMESPACE_ID::int32 bit_depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 tmds_;
  bool is_in_path_to_tv_;
  bool hdr10_support_;
  bool dolby_vision_support_;
  bool yuv_support_;
  ::PROTOBUF_NAMESPACE_ID::int32 eotf_support_;
  bool yuv_420_support_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_supported_hdcp_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_hdcp_version_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_ExternalAccessPoint :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.ExternalAccessPoint) */ {
 public:
  SystemProfileProto_ExternalAccessPoint();
  virtual ~SystemProfileProto_ExternalAccessPoint();

  SystemProfileProto_ExternalAccessPoint(const SystemProfileProto_ExternalAccessPoint& from);
  SystemProfileProto_ExternalAccessPoint(SystemProfileProto_ExternalAccessPoint&& from) noexcept
    : SystemProfileProto_ExternalAccessPoint() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_ExternalAccessPoint& operator=(const SystemProfileProto_ExternalAccessPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_ExternalAccessPoint& operator=(SystemProfileProto_ExternalAccessPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_ExternalAccessPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_ExternalAccessPoint* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_ExternalAccessPoint*>(
               &_SystemProfileProto_ExternalAccessPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SystemProfileProto_ExternalAccessPoint& a, SystemProfileProto_ExternalAccessPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_ExternalAccessPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_ExternalAccessPoint* New() const final {
    return CreateMaybeMessage<SystemProfileProto_ExternalAccessPoint>(nullptr);
  }

  SystemProfileProto_ExternalAccessPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_ExternalAccessPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_ExternalAccessPoint& from);
  void MergeFrom(const SystemProfileProto_ExternalAccessPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_ExternalAccessPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.ExternalAccessPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManufacturerFieldNumber = 1,
    kModelNameFieldNumber = 2,
    kModelNumberFieldNumber = 3,
    kDeviceNameFieldNumber = 4,
  };
  // optional string manufacturer = 1;
  bool has_manufacturer() const;
  void clear_manufacturer();
  const std::string& manufacturer() const;
  void set_manufacturer(const std::string& value);
  void set_manufacturer(std::string&& value);
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  std::string* mutable_manufacturer();
  std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);

  // optional string model_name = 2;
  bool has_model_name() const;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);

  // optional string model_number = 3;
  bool has_model_number() const;
  void clear_model_number();
  const std::string& model_number() const;
  void set_model_number(const std::string& value);
  void set_model_number(std::string&& value);
  void set_model_number(const char* value);
  void set_model_number(const char* value, size_t size);
  std::string* mutable_model_number();
  std::string* release_model_number();
  void set_allocated_model_number(std::string* model_number);

  // optional string device_name = 4;
  bool has_device_name() const;
  void clear_device_name();
  const std::string& device_name() const;
  void set_device_name(const std::string& value);
  void set_device_name(std::string&& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  std::string* mutable_device_name();
  std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.ExternalAccessPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_AntiVirusProduct :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.AntiVirusProduct) */ {
 public:
  SystemProfileProto_AntiVirusProduct();
  virtual ~SystemProfileProto_AntiVirusProduct();

  SystemProfileProto_AntiVirusProduct(const SystemProfileProto_AntiVirusProduct& from);
  SystemProfileProto_AntiVirusProduct(SystemProfileProto_AntiVirusProduct&& from) noexcept
    : SystemProfileProto_AntiVirusProduct() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_AntiVirusProduct& operator=(const SystemProfileProto_AntiVirusProduct& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_AntiVirusProduct& operator=(SystemProfileProto_AntiVirusProduct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_AntiVirusProduct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_AntiVirusProduct* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_AntiVirusProduct*>(
               &_SystemProfileProto_AntiVirusProduct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SystemProfileProto_AntiVirusProduct& a, SystemProfileProto_AntiVirusProduct& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_AntiVirusProduct* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_AntiVirusProduct* New() const final {
    return CreateMaybeMessage<SystemProfileProto_AntiVirusProduct>(nullptr);
  }

  SystemProfileProto_AntiVirusProduct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_AntiVirusProduct>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_AntiVirusProduct& from);
  void MergeFrom(const SystemProfileProto_AntiVirusProduct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_AntiVirusProduct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.AntiVirusProduct";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductNameFieldNumber = 1,
    kProductVersionFieldNumber = 3,
    kProductNameHashFieldNumber = 2,
    kProductVersionHashFieldNumber = 4,
    kProductStateFieldNumber = 5,
  };
  // optional string product_name = 1;
  bool has_product_name() const;
  void clear_product_name();
  const std::string& product_name() const;
  void set_product_name(const std::string& value);
  void set_product_name(std::string&& value);
  void set_product_name(const char* value);
  void set_product_name(const char* value, size_t size);
  std::string* mutable_product_name();
  std::string* release_product_name();
  void set_allocated_product_name(std::string* product_name);

  // optional string product_version = 3;
  bool has_product_version() const;
  void clear_product_version();
  const std::string& product_version() const;
  void set_product_version(const std::string& value);
  void set_product_version(std::string&& value);
  void set_product_version(const char* value);
  void set_product_version(const char* value, size_t size);
  std::string* mutable_product_version();
  std::string* release_product_version();
  void set_allocated_product_version(std::string* product_version);

  // optional fixed32 product_name_hash = 2;
  bool has_product_name_hash() const;
  void clear_product_name_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 product_name_hash() const;
  void set_product_name_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed32 product_version_hash = 4;
  bool has_product_version_hash() const;
  void clear_product_version_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 product_version_hash() const;
  void set_product_version_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .metrics.SystemProfileProto.AntiVirusState product_state = 5;
  bool has_product_state() const;
  void clear_product_state();
  ::metrics::SystemProfileProto_AntiVirusState product_state() const;
  void set_product_state(::metrics::SystemProfileProto_AntiVirusState value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.AntiVirusProduct)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 product_name_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 product_version_hash_;
  int product_state_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_ChromeComponent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.ChromeComponent) */ {
 public:
  SystemProfileProto_ChromeComponent();
  virtual ~SystemProfileProto_ChromeComponent();

  SystemProfileProto_ChromeComponent(const SystemProfileProto_ChromeComponent& from);
  SystemProfileProto_ChromeComponent(SystemProfileProto_ChromeComponent&& from) noexcept
    : SystemProfileProto_ChromeComponent() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_ChromeComponent& operator=(const SystemProfileProto_ChromeComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_ChromeComponent& operator=(SystemProfileProto_ChromeComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_ChromeComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_ChromeComponent* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_ChromeComponent*>(
               &_SystemProfileProto_ChromeComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SystemProfileProto_ChromeComponent& a, SystemProfileProto_ChromeComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_ChromeComponent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_ChromeComponent* New() const final {
    return CreateMaybeMessage<SystemProfileProto_ChromeComponent>(nullptr);
  }

  SystemProfileProto_ChromeComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_ChromeComponent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_ChromeComponent& from);
  void MergeFrom(const SystemProfileProto_ChromeComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_ChromeComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.ChromeComponent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kOmahaFingerprintFieldNumber = 3,
    kComponentIdFieldNumber = 1,
  };
  // optional string version = 2;
  bool has_version() const;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // optional fixed32 omaha_fingerprint = 3;
  bool has_omaha_fingerprint() const;
  void clear_omaha_fingerprint();
  ::PROTOBUF_NAMESPACE_ID::uint32 omaha_fingerprint() const;
  void set_omaha_fingerprint(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .metrics.SystemProfileProto.ComponentId component_id = 1 [default = UNKNOWN];
  bool has_component_id() const;
  void clear_component_id();
  ::metrics::SystemProfileProto_ComponentId component_id() const;
  void set_component_id(::metrics::SystemProfileProto_ComponentId value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.ChromeComponent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 omaha_fingerprint_;
  int component_id_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto_LinkedAndroidPhoneData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto.LinkedAndroidPhoneData) */ {
 public:
  SystemProfileProto_LinkedAndroidPhoneData();
  virtual ~SystemProfileProto_LinkedAndroidPhoneData();

  SystemProfileProto_LinkedAndroidPhoneData(const SystemProfileProto_LinkedAndroidPhoneData& from);
  SystemProfileProto_LinkedAndroidPhoneData(SystemProfileProto_LinkedAndroidPhoneData&& from) noexcept
    : SystemProfileProto_LinkedAndroidPhoneData() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto_LinkedAndroidPhoneData& operator=(const SystemProfileProto_LinkedAndroidPhoneData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto_LinkedAndroidPhoneData& operator=(SystemProfileProto_LinkedAndroidPhoneData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto_LinkedAndroidPhoneData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto_LinkedAndroidPhoneData* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto_LinkedAndroidPhoneData*>(
               &_SystemProfileProto_LinkedAndroidPhoneData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SystemProfileProto_LinkedAndroidPhoneData& a, SystemProfileProto_LinkedAndroidPhoneData& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto_LinkedAndroidPhoneData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto_LinkedAndroidPhoneData* New() const final {
    return CreateMaybeMessage<SystemProfileProto_LinkedAndroidPhoneData>(nullptr);
  }

  SystemProfileProto_LinkedAndroidPhoneData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto_LinkedAndroidPhoneData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto_LinkedAndroidPhoneData& from);
  void MergeFrom(const SystemProfileProto_LinkedAndroidPhoneData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto_LinkedAndroidPhoneData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto.LinkedAndroidPhoneData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneModelNameHashFieldNumber = 1,
    kIsSmartlockEnabledFieldNumber = 2,
    kIsInstantTetheringEnabledFieldNumber = 3,
    kIsMessagesEnabledFieldNumber = 4,
  };
  // optional fixed32 phone_model_name_hash = 1;
  bool has_phone_model_name_hash() const;
  void clear_phone_model_name_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 phone_model_name_hash() const;
  void set_phone_model_name_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool is_smartlock_enabled = 2;
  bool has_is_smartlock_enabled() const;
  void clear_is_smartlock_enabled();
  bool is_smartlock_enabled() const;
  void set_is_smartlock_enabled(bool value);

  // optional bool is_instant_tethering_enabled = 3;
  bool has_is_instant_tethering_enabled() const;
  void clear_is_instant_tethering_enabled();
  bool is_instant_tethering_enabled() const;
  void set_is_instant_tethering_enabled(bool value);

  // optional bool is_messages_enabled = 4;
  bool has_is_messages_enabled() const;
  void clear_is_messages_enabled();
  bool is_messages_enabled() const;
  void set_is_messages_enabled(bool value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto.LinkedAndroidPhoneData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phone_model_name_hash_;
  bool is_smartlock_enabled_;
  bool is_instant_tethering_enabled_;
  bool is_messages_enabled_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class SystemProfileProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.SystemProfileProto) */ {
 public:
  SystemProfileProto();
  virtual ~SystemProfileProto();

  SystemProfileProto(const SystemProfileProto& from);
  SystemProfileProto(SystemProfileProto&& from) noexcept
    : SystemProfileProto() {
    *this = ::std::move(from);
  }

  inline SystemProfileProto& operator=(const SystemProfileProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProfileProto& operator=(SystemProfileProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProfileProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProfileProto* internal_default_instance() {
    return reinterpret_cast<const SystemProfileProto*>(
               &_SystemProfileProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SystemProfileProto& a, SystemProfileProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProfileProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProfileProto* New() const final {
    return CreateMaybeMessage<SystemProfileProto>(nullptr);
  }

  SystemProfileProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProfileProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProfileProto& from);
  void MergeFrom(const SystemProfileProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProfileProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.SystemProfileProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProfileProto_OS OS;
  typedef SystemProfileProto_Hardware Hardware;
  typedef SystemProfileProto_Network Network;
  typedef SystemProfileProto_GoogleUpdate GoogleUpdate;
  typedef SystemProfileProto_Plugin Plugin;
  typedef SystemProfileProto_Stability Stability;
  typedef SystemProfileProto_FieldTrial FieldTrial;
  typedef SystemProfileProto_ExternalAudioVideoDevice ExternalAudioVideoDevice;
  typedef SystemProfileProto_ExternalAccessPoint ExternalAccessPoint;
  typedef SystemProfileProto_AntiVirusProduct AntiVirusProduct;
  typedef SystemProfileProto_ChromeComponent ChromeComponent;
  typedef SystemProfileProto_LinkedAndroidPhoneData LinkedAndroidPhoneData;

  typedef SystemProfileProto_Channel Channel;
  static constexpr Channel CHANNEL_UNKNOWN =
    SystemProfileProto_Channel_CHANNEL_UNKNOWN;
  static constexpr Channel CHANNEL_CANARY =
    SystemProfileProto_Channel_CHANNEL_CANARY;
  static constexpr Channel CHANNEL_DEV =
    SystemProfileProto_Channel_CHANNEL_DEV;
  static constexpr Channel CHANNEL_BETA =
    SystemProfileProto_Channel_CHANNEL_BETA;
  static constexpr Channel CHANNEL_STABLE =
    SystemProfileProto_Channel_CHANNEL_STABLE;
  static inline bool Channel_IsValid(int value) {
    return SystemProfileProto_Channel_IsValid(value);
  }
  static constexpr Channel Channel_MIN =
    SystemProfileProto_Channel_Channel_MIN;
  static constexpr Channel Channel_MAX =
    SystemProfileProto_Channel_Channel_MAX;
  static constexpr int Channel_ARRAYSIZE =
    SystemProfileProto_Channel_Channel_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Channel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Channel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Channel_Name.");
    return SystemProfileProto_Channel_Name(enum_t_value);
  }
  static inline bool Channel_Parse(const std::string& name,
      Channel* value) {
    return SystemProfileProto_Channel_Parse(name, value);
  }

  typedef SystemProfileProto_ExtensionsState ExtensionsState;
  static constexpr ExtensionsState NO_EXTENSIONS =
    SystemProfileProto_ExtensionsState_NO_EXTENSIONS;
  static constexpr ExtensionsState NO_OFFSTORE_VERIFIED =
    SystemProfileProto_ExtensionsState_NO_OFFSTORE_VERIFIED;
  static constexpr ExtensionsState NO_OFFSTORE_UNVERIFIED =
    SystemProfileProto_ExtensionsState_NO_OFFSTORE_UNVERIFIED;
  static constexpr ExtensionsState HAS_OFFSTORE =
    SystemProfileProto_ExtensionsState_HAS_OFFSTORE;
  static inline bool ExtensionsState_IsValid(int value) {
    return SystemProfileProto_ExtensionsState_IsValid(value);
  }
  static constexpr ExtensionsState ExtensionsState_MIN =
    SystemProfileProto_ExtensionsState_ExtensionsState_MIN;
  static constexpr ExtensionsState ExtensionsState_MAX =
    SystemProfileProto_ExtensionsState_ExtensionsState_MAX;
  static constexpr int ExtensionsState_ARRAYSIZE =
    SystemProfileProto_ExtensionsState_ExtensionsState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ExtensionsState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExtensionsState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExtensionsState_Name.");
    return SystemProfileProto_ExtensionsState_Name(enum_t_value);
  }
  static inline bool ExtensionsState_Parse(const std::string& name,
      ExtensionsState* value) {
    return SystemProfileProto_ExtensionsState_Parse(name, value);
  }

  typedef SystemProfileProto_UmaDefaultState UmaDefaultState;
  static constexpr UmaDefaultState OPT_IN =
    SystemProfileProto_UmaDefaultState_OPT_IN;
  static constexpr UmaDefaultState OPT_OUT =
    SystemProfileProto_UmaDefaultState_OPT_OUT;
  static constexpr UmaDefaultState POLICY_FORCED_ENABLED =
    SystemProfileProto_UmaDefaultState_POLICY_FORCED_ENABLED;
  static constexpr UmaDefaultState OPT_UNKNOWN =
    SystemProfileProto_UmaDefaultState_OPT_UNKNOWN;
  static inline bool UmaDefaultState_IsValid(int value) {
    return SystemProfileProto_UmaDefaultState_IsValid(value);
  }
  static constexpr UmaDefaultState UmaDefaultState_MIN =
    SystemProfileProto_UmaDefaultState_UmaDefaultState_MIN;
  static constexpr UmaDefaultState UmaDefaultState_MAX =
    SystemProfileProto_UmaDefaultState_UmaDefaultState_MAX;
  static constexpr int UmaDefaultState_ARRAYSIZE =
    SystemProfileProto_UmaDefaultState_UmaDefaultState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UmaDefaultState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UmaDefaultState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UmaDefaultState_Name.");
    return SystemProfileProto_UmaDefaultState_Name(enum_t_value);
  }
  static inline bool UmaDefaultState_Parse(const std::string& name,
      UmaDefaultState* value) {
    return SystemProfileProto_UmaDefaultState_Parse(name, value);
  }

  typedef SystemProfileProto_AntiVirusState AntiVirusState;
  static constexpr AntiVirusState STATE_ON =
    SystemProfileProto_AntiVirusState_STATE_ON;
  static constexpr AntiVirusState STATE_OFF =
    SystemProfileProto_AntiVirusState_STATE_OFF;
  static constexpr AntiVirusState STATE_SNOOZED =
    SystemProfileProto_AntiVirusState_STATE_SNOOZED;
  static constexpr AntiVirusState STATE_EXPIRED =
    SystemProfileProto_AntiVirusState_STATE_EXPIRED;
  static inline bool AntiVirusState_IsValid(int value) {
    return SystemProfileProto_AntiVirusState_IsValid(value);
  }
  static constexpr AntiVirusState AntiVirusState_MIN =
    SystemProfileProto_AntiVirusState_AntiVirusState_MIN;
  static constexpr AntiVirusState AntiVirusState_MAX =
    SystemProfileProto_AntiVirusState_AntiVirusState_MAX;
  static constexpr int AntiVirusState_ARRAYSIZE =
    SystemProfileProto_AntiVirusState_AntiVirusState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AntiVirusState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AntiVirusState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AntiVirusState_Name.");
    return SystemProfileProto_AntiVirusState_Name(enum_t_value);
  }
  static inline bool AntiVirusState_Parse(const std::string& name,
      AntiVirusState* value) {
    return SystemProfileProto_AntiVirusState_Parse(name, value);
  }

  typedef SystemProfileProto_ComponentId ComponentId;
  static constexpr ComponentId UNKNOWN =
    SystemProfileProto_ComponentId_UNKNOWN;
  static constexpr ComponentId FILE_TYPE_POLICIES =
    SystemProfileProto_ComponentId_FILE_TYPE_POLICIES;
  static constexpr ComponentId ORIGIN_TRIALS =
    SystemProfileProto_ComponentId_ORIGIN_TRIALS;
  static constexpr ComponentId PEPPER_FLASH =
    SystemProfileProto_ComponentId_PEPPER_FLASH;
  static constexpr ComponentId PEPPER_FLASH_CHROMEOS =
    SystemProfileProto_ComponentId_PEPPER_FLASH_CHROMEOS;
  static constexpr ComponentId PNACL =
    SystemProfileProto_ComponentId_PNACL;
  static constexpr ComponentId RECOVERY =
    SystemProfileProto_ComponentId_RECOVERY;
  static constexpr ComponentId SSL_ERROR_ASSISTANT =
    SystemProfileProto_ComponentId_SSL_ERROR_ASSISTANT;
  static constexpr ComponentId STH_SET =
    SystemProfileProto_ComponentId_STH_SET;
  static constexpr ComponentId CRL_SET =
    SystemProfileProto_ComponentId_CRL_SET;
  static constexpr ComponentId SUBRESOURCE_FILTER =
    SystemProfileProto_ComponentId_SUBRESOURCE_FILTER;
  static constexpr ComponentId SW_REPORTER =
    SystemProfileProto_ComponentId_SW_REPORTER;
  static constexpr ComponentId WIDEVINE_CDM =
    SystemProfileProto_ComponentId_WIDEVINE_CDM;
  static constexpr ComponentId EPSON_INKJET_PRINTER_ESCPR =
    SystemProfileProto_ComponentId_EPSON_INKJET_PRINTER_ESCPR;
  static constexpr ComponentId CROS_TERMINA =
    SystemProfileProto_ComponentId_CROS_TERMINA;
  static constexpr ComponentId STAR_CUPS_DRIVER =
    SystemProfileProto_ComponentId_STAR_CUPS_DRIVER;
  static constexpr ComponentId SPEECH_SYNTHESIS_SV_SE =
    SystemProfileProto_ComponentId_SPEECH_SYNTHESIS_SV_SE;
  static constexpr ComponentId OPTIMIZATION_HINTS =
    SystemProfileProto_ComponentId_OPTIMIZATION_HINTS;
  static constexpr ComponentId DOWNLOADABLE_STRINGS =
    SystemProfileProto_ComponentId_DOWNLOADABLE_STRINGS;
  static constexpr ComponentId VR_ASSETS =
    SystemProfileProto_ComponentId_VR_ASSETS;
  static constexpr ComponentId RTANALYTICS_LIGHT =
    SystemProfileProto_ComponentId_RTANALYTICS_LIGHT;
  static constexpr ComponentId RTANALYTICS_FULL =
    SystemProfileProto_ComponentId_RTANALYTICS_FULL;
  static constexpr ComponentId CELLULAR =
    SystemProfileProto_ComponentId_CELLULAR;
  static constexpr ComponentId DEMO_MODE_RESOURCES =
    SystemProfileProto_ComponentId_DEMO_MODE_RESOURCES;
  static constexpr ComponentId ON_DEVICE_HEAD_SUGGEST =
    SystemProfileProto_ComponentId_ON_DEVICE_HEAD_SUGGEST;
  static constexpr ComponentId CROS_SMART_DIM =
    SystemProfileProto_ComponentId_CROS_SMART_DIM;
  static inline bool ComponentId_IsValid(int value) {
    return SystemProfileProto_ComponentId_IsValid(value);
  }
  static constexpr ComponentId ComponentId_MIN =
    SystemProfileProto_ComponentId_ComponentId_MIN;
  static constexpr ComponentId ComponentId_MAX =
    SystemProfileProto_ComponentId_ComponentId_MAX;
  static constexpr int ComponentId_ARRAYSIZE =
    SystemProfileProto_ComponentId_ComponentId_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ComponentId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ComponentId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ComponentId_Name.");
    return SystemProfileProto_ComponentId_Name(enum_t_value);
  }
  static inline bool ComponentId_Parse(const std::string& name,
      ComponentId* value) {
    return SystemProfileProto_ComponentId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPluginFieldNumber = 7,
    kFieldTrialFieldNumber = 9,
    kExternalAudioVideoDeviceFieldNumber = 14,
    kOccupiedExtensionBucketFieldNumber = 18,
    kAntivirusProductFieldNumber = 23,
    kChromeComponentFieldNumber = 24,
    kExtensionInstallFieldNumber = 25,
    kAppVersionFieldNumber = 2,
    kApplicationLocaleFieldNumber = 4,
    kBrandCodeFieldNumber = 12,
    kAppPackageNameFieldNumber = 26,
    kVariationsSeedVersionFieldNumber = 28,
    kOsFieldNumber = 5,
    kHardwareFieldNumber = 6,
    kStabilityFieldNumber = 8,
    kGoogleUpdateFieldNumber = 11,
    kNetworkFieldNumber = 13,
    kExternalAccessPointFieldNumber = 15,
    kLinkedAndroidPhoneDataFieldNumber = 29,
    kBuildTimestampFieldNumber = 1,
    kUmaEnabledDateFieldNumber = 3,
    kChannelFieldNumber = 10,
    kMultiProfileUserCountFieldNumber = 17,
    kInstallDateFieldNumber = 16,
    kOffstoreExtensionsStateFieldNumber = 19,
    kIsInstrumentedBuildFieldNumber = 20,
    kUmaDefaultStateFieldNumber = 22,
    kLowEntropySourceFieldNumber = 31,
    kOldLowEntropySourceFieldNumber = 32,
  };
  // repeated .metrics.SystemProfileProto.Plugin plugin = 7;
  int plugin_size() const;
  void clear_plugin();
  ::metrics::SystemProfileProto_Plugin* mutable_plugin(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Plugin >*
      mutable_plugin();
  const ::metrics::SystemProfileProto_Plugin& plugin(int index) const;
  ::metrics::SystemProfileProto_Plugin* add_plugin();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Plugin >&
      plugin() const;

  // repeated .metrics.SystemProfileProto.FieldTrial field_trial = 9;
  int field_trial_size() const;
  void clear_field_trial();
  ::metrics::SystemProfileProto_FieldTrial* mutable_field_trial(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_FieldTrial >*
      mutable_field_trial();
  const ::metrics::SystemProfileProto_FieldTrial& field_trial(int index) const;
  ::metrics::SystemProfileProto_FieldTrial* add_field_trial();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_FieldTrial >&
      field_trial() const;

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice external_audio_video_device = 14;
  int external_audio_video_device_size() const;
  void clear_external_audio_video_device();
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice* mutable_external_audio_video_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice >*
      mutable_external_audio_video_device();
  const ::metrics::SystemProfileProto_ExternalAudioVideoDevice& external_audio_video_device(int index) const;
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice* add_external_audio_video_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice >&
      external_audio_video_device() const;

  // repeated int32 occupied_extension_bucket = 18;
  int occupied_extension_bucket_size() const;
  void clear_occupied_extension_bucket();
  ::PROTOBUF_NAMESPACE_ID::int32 occupied_extension_bucket(int index) const;
  void set_occupied_extension_bucket(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_occupied_extension_bucket(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      occupied_extension_bucket() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_occupied_extension_bucket();

  // repeated .metrics.SystemProfileProto.AntiVirusProduct antivirus_product = 23;
  int antivirus_product_size() const;
  void clear_antivirus_product();
  ::metrics::SystemProfileProto_AntiVirusProduct* mutable_antivirus_product(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_AntiVirusProduct >*
      mutable_antivirus_product();
  const ::metrics::SystemProfileProto_AntiVirusProduct& antivirus_product(int index) const;
  ::metrics::SystemProfileProto_AntiVirusProduct* add_antivirus_product();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_AntiVirusProduct >&
      antivirus_product() const;

  // repeated .metrics.SystemProfileProto.ChromeComponent chrome_component = 24;
  int chrome_component_size() const;
  void clear_chrome_component();
  ::metrics::SystemProfileProto_ChromeComponent* mutable_chrome_component(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ChromeComponent >*
      mutable_chrome_component();
  const ::metrics::SystemProfileProto_ChromeComponent& chrome_component(int index) const;
  ::metrics::SystemProfileProto_ChromeComponent* add_chrome_component();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ChromeComponent >&
      chrome_component() const;

  // repeated .metrics.ExtensionInstallProto extension_install = 25;
  int extension_install_size() const;
  void clear_extension_install();
  ::metrics::ExtensionInstallProto* mutable_extension_install(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ExtensionInstallProto >*
      mutable_extension_install();
  const ::metrics::ExtensionInstallProto& extension_install(int index) const;
  ::metrics::ExtensionInstallProto* add_extension_install();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ExtensionInstallProto >&
      extension_install() const;

  // optional string app_version = 2;
  bool has_app_version() const;
  void clear_app_version();
  const std::string& app_version() const;
  void set_app_version(const std::string& value);
  void set_app_version(std::string&& value);
  void set_app_version(const char* value);
  void set_app_version(const char* value, size_t size);
  std::string* mutable_app_version();
  std::string* release_app_version();
  void set_allocated_app_version(std::string* app_version);

  // optional string application_locale = 4;
  bool has_application_locale() const;
  void clear_application_locale();
  const std::string& application_locale() const;
  void set_application_locale(const std::string& value);
  void set_application_locale(std::string&& value);
  void set_application_locale(const char* value);
  void set_application_locale(const char* value, size_t size);
  std::string* mutable_application_locale();
  std::string* release_application_locale();
  void set_allocated_application_locale(std::string* application_locale);

  // optional string brand_code = 12;
  bool has_brand_code() const;
  void clear_brand_code();
  const std::string& brand_code() const;
  void set_brand_code(const std::string& value);
  void set_brand_code(std::string&& value);
  void set_brand_code(const char* value);
  void set_brand_code(const char* value, size_t size);
  std::string* mutable_brand_code();
  std::string* release_brand_code();
  void set_allocated_brand_code(std::string* brand_code);

  // optional string app_package_name = 26;
  bool has_app_package_name() const;
  void clear_app_package_name();
  const std::string& app_package_name() const;
  void set_app_package_name(const std::string& value);
  void set_app_package_name(std::string&& value);
  void set_app_package_name(const char* value);
  void set_app_package_name(const char* value, size_t size);
  std::string* mutable_app_package_name();
  std::string* release_app_package_name();
  void set_allocated_app_package_name(std::string* app_package_name);

  // optional string variations_seed_version = 28;
  bool has_variations_seed_version() const;
  void clear_variations_seed_version();
  const std::string& variations_seed_version() const;
  void set_variations_seed_version(const std::string& value);
  void set_variations_seed_version(std::string&& value);
  void set_variations_seed_version(const char* value);
  void set_variations_seed_version(const char* value, size_t size);
  std::string* mutable_variations_seed_version();
  std::string* release_variations_seed_version();
  void set_allocated_variations_seed_version(std::string* variations_seed_version);

  // optional .metrics.SystemProfileProto.OS os = 5;
  bool has_os() const;
  void clear_os();
  const ::metrics::SystemProfileProto_OS& os() const;
  ::metrics::SystemProfileProto_OS* release_os();
  ::metrics::SystemProfileProto_OS* mutable_os();
  void set_allocated_os(::metrics::SystemProfileProto_OS* os);

  // optional .metrics.SystemProfileProto.Hardware hardware = 6;
  bool has_hardware() const;
  void clear_hardware();
  const ::metrics::SystemProfileProto_Hardware& hardware() const;
  ::metrics::SystemProfileProto_Hardware* release_hardware();
  ::metrics::SystemProfileProto_Hardware* mutable_hardware();
  void set_allocated_hardware(::metrics::SystemProfileProto_Hardware* hardware);

  // optional .metrics.SystemProfileProto.Stability stability = 8;
  bool has_stability() const;
  void clear_stability();
  const ::metrics::SystemProfileProto_Stability& stability() const;
  ::metrics::SystemProfileProto_Stability* release_stability();
  ::metrics::SystemProfileProto_Stability* mutable_stability();
  void set_allocated_stability(::metrics::SystemProfileProto_Stability* stability);

  // optional .metrics.SystemProfileProto.GoogleUpdate google_update = 11;
  bool has_google_update() const;
  void clear_google_update();
  const ::metrics::SystemProfileProto_GoogleUpdate& google_update() const;
  ::metrics::SystemProfileProto_GoogleUpdate* release_google_update();
  ::metrics::SystemProfileProto_GoogleUpdate* mutable_google_update();
  void set_allocated_google_update(::metrics::SystemProfileProto_GoogleUpdate* google_update);

  // optional .metrics.SystemProfileProto.Network network = 13;
  bool has_network() const;
  void clear_network();
  const ::metrics::SystemProfileProto_Network& network() const;
  ::metrics::SystemProfileProto_Network* release_network();
  ::metrics::SystemProfileProto_Network* mutable_network();
  void set_allocated_network(::metrics::SystemProfileProto_Network* network);

  // optional .metrics.SystemProfileProto.ExternalAccessPoint external_access_point = 15;
  bool has_external_access_point() const;
  void clear_external_access_point();
  const ::metrics::SystemProfileProto_ExternalAccessPoint& external_access_point() const;
  ::metrics::SystemProfileProto_ExternalAccessPoint* release_external_access_point();
  ::metrics::SystemProfileProto_ExternalAccessPoint* mutable_external_access_point();
  void set_allocated_external_access_point(::metrics::SystemProfileProto_ExternalAccessPoint* external_access_point);

  // optional .metrics.SystemProfileProto.LinkedAndroidPhoneData linked_android_phone_data = 29;
  bool has_linked_android_phone_data() const;
  void clear_linked_android_phone_data();
  const ::metrics::SystemProfileProto_LinkedAndroidPhoneData& linked_android_phone_data() const;
  ::metrics::SystemProfileProto_LinkedAndroidPhoneData* release_linked_android_phone_data();
  ::metrics::SystemProfileProto_LinkedAndroidPhoneData* mutable_linked_android_phone_data();
  void set_allocated_linked_android_phone_data(::metrics::SystemProfileProto_LinkedAndroidPhoneData* linked_android_phone_data);

  // optional int64 build_timestamp = 1;
  bool has_build_timestamp() const;
  void clear_build_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 build_timestamp() const;
  void set_build_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 uma_enabled_date = 3;
  bool has_uma_enabled_date() const;
  void clear_uma_enabled_date();
  ::PROTOBUF_NAMESPACE_ID::int64 uma_enabled_date() const;
  void set_uma_enabled_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .metrics.SystemProfileProto.Channel channel = 10;
  bool has_channel() const;
  void clear_channel();
  ::metrics::SystemProfileProto_Channel channel() const;
  void set_channel(::metrics::SystemProfileProto_Channel value);

  // optional uint32 multi_profile_user_count = 17;
  bool has_multi_profile_user_count() const;
  void clear_multi_profile_user_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_profile_user_count() const;
  void set_multi_profile_user_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int64 install_date = 16;
  bool has_install_date() const;
  void clear_install_date();
  ::PROTOBUF_NAMESPACE_ID::int64 install_date() const;
  void set_install_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .metrics.SystemProfileProto.ExtensionsState offstore_extensions_state = 19;
  bool has_offstore_extensions_state() const;
  void clear_offstore_extensions_state();
  ::metrics::SystemProfileProto_ExtensionsState offstore_extensions_state() const;
  void set_offstore_extensions_state(::metrics::SystemProfileProto_ExtensionsState value);

  // optional bool is_instrumented_build = 20 [default = false];
  bool has_is_instrumented_build() const;
  void clear_is_instrumented_build();
  bool is_instrumented_build() const;
  void set_is_instrumented_build(bool value);

  // optional .metrics.SystemProfileProto.UmaDefaultState uma_default_state = 22;
  bool has_uma_default_state() const;
  void clear_uma_default_state();
  ::metrics::SystemProfileProto_UmaDefaultState uma_default_state() const;
  void set_uma_default_state(::metrics::SystemProfileProto_UmaDefaultState value);

  // optional int32 low_entropy_source = 31;
  bool has_low_entropy_source() const;
  void clear_low_entropy_source();
  ::PROTOBUF_NAMESPACE_ID::int32 low_entropy_source() const;
  void set_low_entropy_source(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 old_low_entropy_source = 32;
  bool has_old_low_entropy_source() const;
  void clear_old_low_entropy_source();
  ::PROTOBUF_NAMESPACE_ID::int32 old_low_entropy_source() const;
  void set_old_low_entropy_source(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.SystemProfileProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Plugin > plugin_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_FieldTrial > field_trial_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice > external_audio_video_device_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > occupied_extension_bucket_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_AntiVirusProduct > antivirus_product_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ChromeComponent > chrome_component_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ExtensionInstallProto > extension_install_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_locale_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variations_seed_version_;
  ::metrics::SystemProfileProto_OS* os_;
  ::metrics::SystemProfileProto_Hardware* hardware_;
  ::metrics::SystemProfileProto_Stability* stability_;
  ::metrics::SystemProfileProto_GoogleUpdate* google_update_;
  ::metrics::SystemProfileProto_Network* network_;
  ::metrics::SystemProfileProto_ExternalAccessPoint* external_access_point_;
  ::metrics::SystemProfileProto_LinkedAndroidPhoneData* linked_android_phone_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 build_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 uma_enabled_date_;
  int channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_profile_user_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 install_date_;
  int offstore_extensions_state_;
  bool is_instrumented_build_;
  int uma_default_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 low_entropy_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 old_low_entropy_source_;
  friend struct ::TableStruct_system_5fprofile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemProfileProto_OS_Arc

// optional string release = 1;
inline bool SystemProfileProto_OS_Arc::has_release() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_OS_Arc::clear_release() {
  release_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_OS_Arc::release() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.Arc.release)
  return release_.GetNoArena();
}
inline void SystemProfileProto_OS_Arc::set_release(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  release_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.Arc.release)
}
inline void SystemProfileProto_OS_Arc::set_release(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  release_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.OS.Arc.release)
}
inline void SystemProfileProto_OS_Arc::set_release(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  release_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.OS.Arc.release)
}
inline void SystemProfileProto_OS_Arc::set_release(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  release_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.OS.Arc.release)
}
inline std::string* SystemProfileProto_OS_Arc::mutable_release() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.OS.Arc.release)
  return release_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_OS_Arc::release_release() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.OS.Arc.release)
  if (!has_release()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return release_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_OS_Arc::set_allocated_release(std::string* release) {
  if (release != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  release_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), release);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.OS.Arc.release)
}

// -------------------------------------------------------------------

// SystemProfileProto_OS

// optional string name = 1;
inline bool SystemProfileProto_OS::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_OS::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_OS::name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.name)
  return name_.GetNoArena();
}
inline void SystemProfileProto_OS::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.name)
}
inline void SystemProfileProto_OS::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.OS.name)
}
inline void SystemProfileProto_OS::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.OS.name)
}
inline void SystemProfileProto_OS::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.OS.name)
}
inline std::string* SystemProfileProto_OS::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.OS.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_OS::release_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.OS.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_OS::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.OS.name)
}

// optional string version = 2;
inline bool SystemProfileProto_OS::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_OS::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemProfileProto_OS::version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.version)
  return version_.GetNoArena();
}
inline void SystemProfileProto_OS::set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.version)
}
inline void SystemProfileProto_OS::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.OS.version)
}
inline void SystemProfileProto_OS::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.OS.version)
}
inline void SystemProfileProto_OS::set_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.OS.version)
}
inline std::string* SystemProfileProto_OS::mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.OS.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_OS::release_version() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.OS.version)
  if (!has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_OS::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.OS.version)
}

// optional string build_fingerprint = 3;
inline bool SystemProfileProto_OS::has_build_fingerprint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_OS::clear_build_fingerprint() {
  build_fingerprint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SystemProfileProto_OS::build_fingerprint() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.build_fingerprint)
  return build_fingerprint_.GetNoArena();
}
inline void SystemProfileProto_OS::set_build_fingerprint(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.build_fingerprint)
}
inline void SystemProfileProto_OS::set_build_fingerprint(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  build_fingerprint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.OS.build_fingerprint)
}
inline void SystemProfileProto_OS::set_build_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.OS.build_fingerprint)
}
inline void SystemProfileProto_OS::set_build_fingerprint(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.OS.build_fingerprint)
}
inline std::string* SystemProfileProto_OS::mutable_build_fingerprint() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.OS.build_fingerprint)
  return build_fingerprint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_OS::release_build_fingerprint() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.OS.build_fingerprint)
  if (!has_build_fingerprint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return build_fingerprint_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_OS::set_allocated_build_fingerprint(std::string* build_fingerprint) {
  if (build_fingerprint != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  build_fingerprint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.OS.build_fingerprint)
}

// optional bool is_jailbroken = 4;
inline bool SystemProfileProto_OS::has_is_jailbroken() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProfileProto_OS::clear_is_jailbroken() {
  is_jailbroken_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SystemProfileProto_OS::is_jailbroken() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.is_jailbroken)
  return is_jailbroken_;
}
inline void SystemProfileProto_OS::set_is_jailbroken(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_jailbroken_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.is_jailbroken)
}

// optional string build_number = 5;
inline bool SystemProfileProto_OS::has_build_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_OS::clear_build_number() {
  build_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SystemProfileProto_OS::build_number() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.build_number)
  return build_number_.GetNoArena();
}
inline void SystemProfileProto_OS::set_build_number(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  build_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.build_number)
}
inline void SystemProfileProto_OS::set_build_number(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  build_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.OS.build_number)
}
inline void SystemProfileProto_OS::set_build_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  build_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.OS.build_number)
}
inline void SystemProfileProto_OS::set_build_number(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  build_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.OS.build_number)
}
inline std::string* SystemProfileProto_OS::mutable_build_number() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.OS.build_number)
  return build_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_OS::release_build_number() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.OS.build_number)
  if (!has_build_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return build_number_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_OS::set_allocated_build_number(std::string* build_number) {
  if (build_number != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  build_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_number);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.OS.build_number)
}

// optional string kernel_version = 6;
inline bool SystemProfileProto_OS::has_kernel_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_OS::clear_kernel_version() {
  kernel_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SystemProfileProto_OS::kernel_version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.kernel_version)
  return kernel_version_.GetNoArena();
}
inline void SystemProfileProto_OS::set_kernel_version(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  kernel_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.kernel_version)
}
inline void SystemProfileProto_OS::set_kernel_version(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  kernel_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.OS.kernel_version)
}
inline void SystemProfileProto_OS::set_kernel_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  kernel_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.OS.kernel_version)
}
inline void SystemProfileProto_OS::set_kernel_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  kernel_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.OS.kernel_version)
}
inline std::string* SystemProfileProto_OS::mutable_kernel_version() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.OS.kernel_version)
  return kernel_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_OS::release_kernel_version() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.OS.kernel_version)
  if (!has_kernel_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return kernel_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_OS::set_allocated_kernel_version(std::string* kernel_version) {
  if (kernel_version != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  kernel_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernel_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.OS.kernel_version)
}

// optional .metrics.SystemProfileProto.OS.Arc arc = 7;
inline bool SystemProfileProto_OS::has_arc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProfileProto_OS::clear_arc() {
  if (arc_ != nullptr) arc_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::metrics::SystemProfileProto_OS_Arc& SystemProfileProto_OS::arc() const {
  const ::metrics::SystemProfileProto_OS_Arc* p = arc_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.arc)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_OS_Arc*>(
      &::metrics::_SystemProfileProto_OS_Arc_default_instance_);
}
inline ::metrics::SystemProfileProto_OS_Arc* SystemProfileProto_OS::release_arc() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.OS.arc)
  _has_bits_[0] &= ~0x00000020u;
  ::metrics::SystemProfileProto_OS_Arc* temp = arc_;
  arc_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_OS_Arc* SystemProfileProto_OS::mutable_arc() {
  _has_bits_[0] |= 0x00000020u;
  if (arc_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_OS_Arc>(GetArenaNoVirtual());
    arc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.OS.arc)
  return arc_;
}
inline void SystemProfileProto_OS::set_allocated_arc(::metrics::SystemProfileProto_OS_Arc* arc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete arc_;
  }
  if (arc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  arc_ = arc;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.OS.arc)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_CPU

// optional string vendor_name = 1;
inline bool SystemProfileProto_Hardware_CPU::has_vendor_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Hardware_CPU::clear_vendor_name() {
  vendor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_Hardware_CPU::vendor_name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
  return vendor_name_.GetNoArena();
}
inline void SystemProfileProto_Hardware_CPU::set_vendor_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vendor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
}
inline void SystemProfileProto_Hardware_CPU::set_vendor_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  vendor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
}
inline void SystemProfileProto_Hardware_CPU::set_vendor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  vendor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
}
inline void SystemProfileProto_Hardware_CPU::set_vendor_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  vendor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
}
inline std::string* SystemProfileProto_Hardware_CPU::mutable_vendor_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
  return vendor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Hardware_CPU::release_vendor_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
  if (!has_vendor_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return vendor_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Hardware_CPU::set_allocated_vendor_name(std::string* vendor_name) {
  if (vendor_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vendor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
}

// optional uint32 signature = 2;
inline bool SystemProfileProto_Hardware_CPU::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Hardware_CPU::clear_signature() {
  signature_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_CPU::signature() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.CPU.signature)
  return signature_;
}
inline void SystemProfileProto_Hardware_CPU::set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  signature_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.CPU.signature)
}

// optional uint32 num_cores = 3;
inline bool SystemProfileProto_Hardware_CPU::has_num_cores() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Hardware_CPU::clear_num_cores() {
  num_cores_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_CPU::num_cores() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.CPU.num_cores)
  return num_cores_;
}
inline void SystemProfileProto_Hardware_CPU::set_num_cores(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_cores_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.CPU.num_cores)
}

// optional bool is_hypervisor = 4;
inline bool SystemProfileProto_Hardware_CPU::has_is_hypervisor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_Hardware_CPU::clear_is_hypervisor() {
  is_hypervisor_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SystemProfileProto_Hardware_CPU::is_hypervisor() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.CPU.is_hypervisor)
  return is_hypervisor_;
}
inline void SystemProfileProto_Hardware_CPU::set_is_hypervisor(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_hypervisor_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.CPU.is_hypervisor)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_Graphics

// optional uint32 vendor_id = 1;
inline bool SystemProfileProto_Hardware_Graphics::has_vendor_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_Hardware_Graphics::clear_vendor_id() {
  vendor_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_Graphics::vendor_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.vendor_id)
  return vendor_id_;
}
inline void SystemProfileProto_Hardware_Graphics::set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  vendor_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.vendor_id)
}

// optional uint32 device_id = 2;
inline bool SystemProfileProto_Hardware_Graphics::has_device_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProfileProto_Hardware_Graphics::clear_device_id() {
  device_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_Graphics::device_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.device_id)
  return device_id_;
}
inline void SystemProfileProto_Hardware_Graphics::set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  device_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.device_id)
}

// optional string driver_version = 3;
inline bool SystemProfileProto_Hardware_Graphics::has_driver_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Hardware_Graphics::clear_driver_version() {
  driver_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_Hardware_Graphics::driver_version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
  return driver_version_.GetNoArena();
}
inline void SystemProfileProto_Hardware_Graphics::set_driver_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  driver_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
}
inline void SystemProfileProto_Hardware_Graphics::set_driver_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  driver_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
}
inline void SystemProfileProto_Hardware_Graphics::set_driver_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  driver_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
}
inline void SystemProfileProto_Hardware_Graphics::set_driver_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  driver_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
}
inline std::string* SystemProfileProto_Hardware_Graphics::mutable_driver_version() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
  return driver_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Hardware_Graphics::release_driver_version() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
  if (!has_driver_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return driver_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Hardware_Graphics::set_allocated_driver_version(std::string* driver_version) {
  if (driver_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  driver_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
}

// optional string driver_date = 4;
inline bool SystemProfileProto_Hardware_Graphics::has_driver_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Hardware_Graphics::clear_driver_date() {
  driver_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemProfileProto_Hardware_Graphics::driver_date() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
  return driver_date_.GetNoArena();
}
inline void SystemProfileProto_Hardware_Graphics::set_driver_date(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  driver_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
}
inline void SystemProfileProto_Hardware_Graphics::set_driver_date(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  driver_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
}
inline void SystemProfileProto_Hardware_Graphics::set_driver_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  driver_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
}
inline void SystemProfileProto_Hardware_Graphics::set_driver_date(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  driver_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
}
inline std::string* SystemProfileProto_Hardware_Graphics::mutable_driver_date() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
  return driver_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Hardware_Graphics::release_driver_date() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
  if (!has_driver_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return driver_date_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Hardware_Graphics::set_allocated_driver_date(std::string* driver_date) {
  if (driver_date != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  driver_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_date);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
}

// optional string gl_vendor = 6;
inline bool SystemProfileProto_Hardware_Graphics::has_gl_vendor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Hardware_Graphics::clear_gl_vendor() {
  gl_vendor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SystemProfileProto_Hardware_Graphics::gl_vendor() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
  return gl_vendor_.GetNoArena();
}
inline void SystemProfileProto_Hardware_Graphics::set_gl_vendor(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  gl_vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
}
inline void SystemProfileProto_Hardware_Graphics::set_gl_vendor(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  gl_vendor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
}
inline void SystemProfileProto_Hardware_Graphics::set_gl_vendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  gl_vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
}
inline void SystemProfileProto_Hardware_Graphics::set_gl_vendor(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  gl_vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
}
inline std::string* SystemProfileProto_Hardware_Graphics::mutable_gl_vendor() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
  return gl_vendor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Hardware_Graphics::release_gl_vendor() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
  if (!has_gl_vendor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return gl_vendor_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Hardware_Graphics::set_allocated_gl_vendor(std::string* gl_vendor) {
  if (gl_vendor != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gl_vendor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gl_vendor);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
}

// optional string gl_renderer = 7;
inline bool SystemProfileProto_Hardware_Graphics::has_gl_renderer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_Hardware_Graphics::clear_gl_renderer() {
  gl_renderer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SystemProfileProto_Hardware_Graphics::gl_renderer() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
  return gl_renderer_.GetNoArena();
}
inline void SystemProfileProto_Hardware_Graphics::set_gl_renderer(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  gl_renderer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
}
inline void SystemProfileProto_Hardware_Graphics::set_gl_renderer(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  gl_renderer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
}
inline void SystemProfileProto_Hardware_Graphics::set_gl_renderer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  gl_renderer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
}
inline void SystemProfileProto_Hardware_Graphics::set_gl_renderer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  gl_renderer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
}
inline std::string* SystemProfileProto_Hardware_Graphics::mutable_gl_renderer() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
  return gl_renderer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Hardware_Graphics::release_gl_renderer() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
  if (!has_gl_renderer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return gl_renderer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Hardware_Graphics::set_allocated_gl_renderer(std::string* gl_renderer) {
  if (gl_renderer != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gl_renderer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gl_renderer);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_Bluetooth_PairedDevice

// optional uint32 bluetooth_class = 1;
inline bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_bluetooth_class() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_bluetooth_class() {
  bluetooth_class_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_Bluetooth_PairedDevice::bluetooth_class() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.bluetooth_class)
  return bluetooth_class_;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_bluetooth_class(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  bluetooth_class_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.bluetooth_class)
}

// optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.Type type = 2;
inline bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::type() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.type)
  return static_cast< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type >(type_);
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_type(::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type value) {
  assert(::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.type)
}

// optional uint32 vendor_prefix = 4;
inline bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_vendor_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_vendor_prefix() {
  vendor_prefix_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_Bluetooth_PairedDevice::vendor_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_prefix)
  return vendor_prefix_;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_vendor_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  vendor_prefix_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_prefix)
}

// optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.VendorIDSource vendor_id_source = 8;
inline bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_vendor_id_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_vendor_id_source() {
  vendor_id_source_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::vendor_id_source() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_id_source)
  return static_cast< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource >(vendor_id_source_);
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_vendor_id_source(::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource value) {
  assert(::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  vendor_id_source_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_id_source)
}

// optional uint32 vendor_id = 5;
inline bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_vendor_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_vendor_id() {
  vendor_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_Bluetooth_PairedDevice::vendor_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_id)
  return vendor_id_;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  vendor_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_id)
}

// optional uint32 product_id = 6;
inline bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_product_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_product_id() {
  product_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_Bluetooth_PairedDevice::product_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.product_id)
  return product_id_;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  product_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.product_id)
}

// optional uint32 device_id = 7;
inline bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_device_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_device_id() {
  device_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_Bluetooth_PairedDevice::device_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.device_id)
  return device_id_;
}
inline void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_device_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  device_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.device_id)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_Bluetooth

// optional bool is_present = 1;
inline bool SystemProfileProto_Hardware_Bluetooth::has_is_present() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Hardware_Bluetooth::clear_is_present() {
  is_present_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SystemProfileProto_Hardware_Bluetooth::is_present() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.is_present)
  return is_present_;
}
inline void SystemProfileProto_Hardware_Bluetooth::set_is_present(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_present_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.is_present)
}

// optional bool is_enabled = 2;
inline bool SystemProfileProto_Hardware_Bluetooth::has_is_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Hardware_Bluetooth::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SystemProfileProto_Hardware_Bluetooth::is_enabled() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.is_enabled)
  return is_enabled_;
}
inline void SystemProfileProto_Hardware_Bluetooth::set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_enabled_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.is_enabled)
}

// repeated .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice paired_device = 3;
inline int SystemProfileProto_Hardware_Bluetooth::paired_device_size() const {
  return paired_device_.size();
}
inline void SystemProfileProto_Hardware_Bluetooth::clear_paired_device() {
  paired_device_.Clear();
}
inline ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice* SystemProfileProto_Hardware_Bluetooth::mutable_paired_device(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.Bluetooth.paired_device)
  return paired_device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice >*
SystemProfileProto_Hardware_Bluetooth::mutable_paired_device() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.Hardware.Bluetooth.paired_device)
  return &paired_device_;
}
inline const ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice& SystemProfileProto_Hardware_Bluetooth::paired_device(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.paired_device)
  return paired_device_.Get(index);
}
inline ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice* SystemProfileProto_Hardware_Bluetooth::add_paired_device() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.Hardware.Bluetooth.paired_device)
  return paired_device_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice >&
SystemProfileProto_Hardware_Bluetooth::paired_device() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.Hardware.Bluetooth.paired_device)
  return paired_device_;
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor

// optional uint32 interface_class = 1;
inline bool SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::has_interface_class() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::clear_interface_class() {
  interface_class_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::interface_class() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor.interface_class)
  return interface_class_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::set_interface_class(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  interface_class_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor.interface_class)
}

// optional uint32 interface_subclass = 2;
inline bool SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::has_interface_subclass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::clear_interface_subclass() {
  interface_subclass_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::interface_subclass() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor.interface_subclass)
  return interface_subclass_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::set_interface_subclass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  interface_subclass_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor.interface_subclass)
}

// optional uint32 configuration_value = 3;
inline bool SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::has_configuration_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::clear_configuration_value() {
  configuration_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::configuration_value() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor.configuration_value)
  return configuration_value_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor::set_configuration_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  configuration_value_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor.configuration_value)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_USB_USBDevice

// optional fixed32 vendor_id = 1;
inline bool SystemProfileProto_Hardware_USB_USBDevice::has_vendor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::clear_vendor_id() {
  vendor_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice::vendor_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.vendor_id)
  return vendor_id_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  vendor_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.vendor_id)
}

// optional fixed32 product_id = 2;
inline bool SystemProfileProto_Hardware_USB_USBDevice::has_product_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::clear_product_id() {
  product_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice::product_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.product_id)
  return product_id_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  product_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.product_id)
}

// optional uint32 device_class = 3;
inline bool SystemProfileProto_Hardware_USB_USBDevice::has_device_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::clear_device_class() {
  device_class_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice::device_class() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.device_class)
  return device_class_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::set_device_class(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  device_class_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.device_class)
}

// optional uint32 device_subclass = 4;
inline bool SystemProfileProto_Hardware_USB_USBDevice::has_device_subclass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::clear_device_subclass() {
  device_subclass_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice::device_subclass() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.device_subclass)
  return device_subclass_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::set_device_subclass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  device_subclass_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.device_subclass)
}

// optional uint32 device_release_number = 5;
inline bool SystemProfileProto_Hardware_USB_USBDevice::has_device_release_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::clear_device_release_number() {
  device_release_number_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice::device_release_number() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.device_release_number)
  return device_release_number_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::set_device_release_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  device_release_number_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.device_release_number)
}

// repeated .metrics.SystemProfileProto.Hardware.USB.USBDevice.InterfaceDescriptor interface_descriptors = 6;
inline int SystemProfileProto_Hardware_USB_USBDevice::interface_descriptors_size() const {
  return interface_descriptors_.size();
}
inline void SystemProfileProto_Hardware_USB_USBDevice::clear_interface_descriptors() {
  interface_descriptors_.Clear();
}
inline ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor* SystemProfileProto_Hardware_USB_USBDevice::mutable_interface_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.USB.USBDevice.interface_descriptors)
  return interface_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor >*
SystemProfileProto_Hardware_USB_USBDevice::mutable_interface_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.Hardware.USB.USBDevice.interface_descriptors)
  return &interface_descriptors_;
}
inline const ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor& SystemProfileProto_Hardware_USB_USBDevice::interface_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.interface_descriptors)
  return interface_descriptors_.Get(index);
}
inline ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor* SystemProfileProto_Hardware_USB_USBDevice::add_interface_descriptors() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.Hardware.USB.USBDevice.interface_descriptors)
  return interface_descriptors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_USB_USBDevice_InterfaceDescriptor >&
SystemProfileProto_Hardware_USB_USBDevice::interface_descriptors() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.Hardware.USB.USBDevice.interface_descriptors)
  return interface_descriptors_;
}

// optional uint32 hops_from_root = 7;
inline bool SystemProfileProto_Hardware_USB_USBDevice::has_hops_from_root() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::clear_hops_from_root() {
  hops_from_root_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice::hops_from_root() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.hops_from_root)
  return hops_from_root_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::set_hops_from_root(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  hops_from_root_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.hops_from_root)
}

// optional fixed32 parent_vendor_id = 8;
inline bool SystemProfileProto_Hardware_USB_USBDevice::has_parent_vendor_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::clear_parent_vendor_id() {
  parent_vendor_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice::parent_vendor_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.parent_vendor_id)
  return parent_vendor_id_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::set_parent_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  parent_vendor_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.parent_vendor_id)
}

// optional fixed32 parent_product_id = 9;
inline bool SystemProfileProto_Hardware_USB_USBDevice::has_parent_product_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::clear_parent_product_id() {
  parent_product_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice::parent_product_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.parent_product_id)
  return parent_product_id_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::set_parent_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  parent_product_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.parent_product_id)
}

// optional uint32 port_count = 10;
inline bool SystemProfileProto_Hardware_USB_USBDevice::has_port_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::clear_port_count() {
  port_count_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB_USBDevice::port_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.USBDevice.port_count)
  return port_count_;
}
inline void SystemProfileProto_Hardware_USB_USBDevice::set_port_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  port_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.USBDevice.port_count)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_USB

// optional uint32 bus_count = 1;
inline bool SystemProfileProto_Hardware_USB::has_bus_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Hardware_USB::clear_bus_count() {
  bus_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_USB::bus_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.bus_count)
  return bus_count_;
}
inline void SystemProfileProto_Hardware_USB::set_bus_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  bus_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.USB.bus_count)
}

// repeated .metrics.SystemProfileProto.Hardware.USB.USBDevice usb_devices = 2;
inline int SystemProfileProto_Hardware_USB::usb_devices_size() const {
  return usb_devices_.size();
}
inline void SystemProfileProto_Hardware_USB::clear_usb_devices() {
  usb_devices_.Clear();
}
inline ::metrics::SystemProfileProto_Hardware_USB_USBDevice* SystemProfileProto_Hardware_USB::mutable_usb_devices(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.USB.usb_devices)
  return usb_devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_USB_USBDevice >*
SystemProfileProto_Hardware_USB::mutable_usb_devices() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.Hardware.USB.usb_devices)
  return &usb_devices_;
}
inline const ::metrics::SystemProfileProto_Hardware_USB_USBDevice& SystemProfileProto_Hardware_USB::usb_devices(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.USB.usb_devices)
  return usb_devices_.Get(index);
}
inline ::metrics::SystemProfileProto_Hardware_USB_USBDevice* SystemProfileProto_Hardware_USB::add_usb_devices() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.Hardware.USB.usb_devices)
  return usb_devices_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_USB_USBDevice >&
SystemProfileProto_Hardware_USB::usb_devices() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.Hardware.USB.usb_devices)
  return usb_devices_;
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_DeprecatedTouchScreen

// optional uint32 vendor_id = 1;
inline bool SystemProfileProto_Hardware_DeprecatedTouchScreen::has_vendor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Hardware_DeprecatedTouchScreen::clear_vendor_id() {
  vendor_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_DeprecatedTouchScreen::vendor_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen.vendor_id)
  return vendor_id_;
}
inline void SystemProfileProto_Hardware_DeprecatedTouchScreen::set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  vendor_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen.vendor_id)
}

// optional uint32 product_id = 2;
inline bool SystemProfileProto_Hardware_DeprecatedTouchScreen::has_product_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Hardware_DeprecatedTouchScreen::clear_product_id() {
  product_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Hardware_DeprecatedTouchScreen::product_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen.product_id)
  return product_id_;
}
inline void SystemProfileProto_Hardware_DeprecatedTouchScreen::set_product_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  product_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen.product_id)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_Drive

// optional bool has_seek_penalty = 1;
inline bool SystemProfileProto_Hardware_Drive::has_has_seek_penalty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Hardware_Drive::clear_has_seek_penalty() {
  has_seek_penalty_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SystemProfileProto_Hardware_Drive::has_seek_penalty() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Drive.has_seek_penalty)
  return has_seek_penalty_;
}
inline void SystemProfileProto_Hardware_Drive::set_has_seek_penalty(bool value) {
  _has_bits_[0] |= 0x00000001u;
  has_seek_penalty_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Drive.has_seek_penalty)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware

// optional string cpu_architecture = 1;
inline bool SystemProfileProto_Hardware::has_cpu_architecture() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Hardware::clear_cpu_architecture() {
  cpu_architecture_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_Hardware::cpu_architecture() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.cpu_architecture)
  return cpu_architecture_.GetNoArena();
}
inline void SystemProfileProto_Hardware::set_cpu_architecture(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_architecture_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.cpu_architecture)
}
inline void SystemProfileProto_Hardware::set_cpu_architecture(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_architecture_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Hardware.cpu_architecture)
}
inline void SystemProfileProto_Hardware::set_cpu_architecture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cpu_architecture_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.cpu_architecture)
}
inline void SystemProfileProto_Hardware::set_cpu_architecture(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cpu_architecture_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.cpu_architecture)
}
inline std::string* SystemProfileProto_Hardware::mutable_cpu_architecture() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.cpu_architecture)
  return cpu_architecture_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Hardware::release_cpu_architecture() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.cpu_architecture)
  if (!has_cpu_architecture()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cpu_architecture_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Hardware::set_allocated_cpu_architecture(std::string* cpu_architecture) {
  if (cpu_architecture != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cpu_architecture_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpu_architecture);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.cpu_architecture)
}

// optional int64 system_ram_mb = 2;
inline bool SystemProfileProto_Hardware::has_system_ram_mb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemProfileProto_Hardware::clear_system_ram_mb() {
  system_ram_mb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProfileProto_Hardware::system_ram_mb() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.system_ram_mb)
  return system_ram_mb_;
}
inline void SystemProfileProto_Hardware::set_system_ram_mb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  system_ram_mb_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.system_ram_mb)
}

// optional int64 dll_base = 3;
inline bool SystemProfileProto_Hardware::has_dll_base() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SystemProfileProto_Hardware::clear_dll_base() {
  dll_base_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProfileProto_Hardware::dll_base() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.dll_base)
  return dll_base_;
}
inline void SystemProfileProto_Hardware::set_dll_base(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  dll_base_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.dll_base)
}

// optional string hardware_class = 4;
inline bool SystemProfileProto_Hardware::has_hardware_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Hardware::clear_hardware_class() {
  hardware_class_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemProfileProto_Hardware::hardware_class() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.hardware_class)
  return hardware_class_.GetNoArena();
}
inline void SystemProfileProto_Hardware::set_hardware_class(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hardware_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.hardware_class)
}
inline void SystemProfileProto_Hardware::set_hardware_class(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hardware_class_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Hardware.hardware_class)
}
inline void SystemProfileProto_Hardware::set_hardware_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hardware_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.hardware_class)
}
inline void SystemProfileProto_Hardware::set_hardware_class(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hardware_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.hardware_class)
}
inline std::string* SystemProfileProto_Hardware::mutable_hardware_class() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.hardware_class)
  return hardware_class_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Hardware::release_hardware_class() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.hardware_class)
  if (!has_hardware_class()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hardware_class_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Hardware::set_allocated_hardware_class(std::string* hardware_class) {
  if (hardware_class != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hardware_class_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hardware_class);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.hardware_class)
}

// optional string full_hardware_class = 18;
inline bool SystemProfileProto_Hardware::has_full_hardware_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Hardware::clear_full_hardware_class() {
  full_hardware_class_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SystemProfileProto_Hardware::full_hardware_class() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.full_hardware_class)
  return full_hardware_class_.GetNoArena();
}
inline void SystemProfileProto_Hardware::set_full_hardware_class(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  full_hardware_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.full_hardware_class)
}
inline void SystemProfileProto_Hardware::set_full_hardware_class(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  full_hardware_class_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Hardware.full_hardware_class)
}
inline void SystemProfileProto_Hardware::set_full_hardware_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  full_hardware_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.full_hardware_class)
}
inline void SystemProfileProto_Hardware::set_full_hardware_class(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  full_hardware_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.full_hardware_class)
}
inline std::string* SystemProfileProto_Hardware::mutable_full_hardware_class() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.full_hardware_class)
  return full_hardware_class_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Hardware::release_full_hardware_class() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.full_hardware_class)
  if (!has_full_hardware_class()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return full_hardware_class_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Hardware::set_allocated_full_hardware_class(std::string* full_hardware_class) {
  if (full_hardware_class != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  full_hardware_class_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_hardware_class);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.full_hardware_class)
}

// optional int32 screen_count = 5;
inline bool SystemProfileProto_Hardware::has_screen_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SystemProfileProto_Hardware::clear_screen_count() {
  screen_count_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Hardware::screen_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.screen_count)
  return screen_count_;
}
inline void SystemProfileProto_Hardware::set_screen_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  screen_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.screen_count)
}

// optional int32 primary_screen_width = 6;
inline bool SystemProfileProto_Hardware::has_primary_screen_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SystemProfileProto_Hardware::clear_primary_screen_width() {
  primary_screen_width_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Hardware::primary_screen_width() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.primary_screen_width)
  return primary_screen_width_;
}
inline void SystemProfileProto_Hardware::set_primary_screen_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  primary_screen_width_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.primary_screen_width)
}

// optional int32 primary_screen_height = 7;
inline bool SystemProfileProto_Hardware::has_primary_screen_height() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SystemProfileProto_Hardware::clear_primary_screen_height() {
  primary_screen_height_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Hardware::primary_screen_height() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.primary_screen_height)
  return primary_screen_height_;
}
inline void SystemProfileProto_Hardware::set_primary_screen_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  primary_screen_height_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.primary_screen_height)
}

// optional float primary_screen_scale_factor = 12;
inline bool SystemProfileProto_Hardware::has_primary_screen_scale_factor() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SystemProfileProto_Hardware::clear_primary_screen_scale_factor() {
  primary_screen_scale_factor_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float SystemProfileProto_Hardware::primary_screen_scale_factor() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.primary_screen_scale_factor)
  return primary_screen_scale_factor_;
}
inline void SystemProfileProto_Hardware::set_primary_screen_scale_factor(float value) {
  _has_bits_[0] |= 0x00010000u;
  primary_screen_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.primary_screen_scale_factor)
}

// optional float max_dpi_x = 9;
inline bool SystemProfileProto_Hardware::has_max_dpi_x() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SystemProfileProto_Hardware::clear_max_dpi_x() {
  max_dpi_x_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float SystemProfileProto_Hardware::max_dpi_x() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.max_dpi_x)
  return max_dpi_x_;
}
inline void SystemProfileProto_Hardware::set_max_dpi_x(float value) {
  _has_bits_[0] |= 0x00004000u;
  max_dpi_x_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.max_dpi_x)
}

// optional float max_dpi_y = 10;
inline bool SystemProfileProto_Hardware::has_max_dpi_y() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SystemProfileProto_Hardware::clear_max_dpi_y() {
  max_dpi_y_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float SystemProfileProto_Hardware::max_dpi_y() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.max_dpi_y)
  return max_dpi_y_;
}
inline void SystemProfileProto_Hardware::set_max_dpi_y(float value) {
  _has_bits_[0] |= 0x00008000u;
  max_dpi_y_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.max_dpi_y)
}

// optional .metrics.SystemProfileProto.Hardware.FormFactor form_factor = 19;
inline bool SystemProfileProto_Hardware::has_form_factor() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SystemProfileProto_Hardware::clear_form_factor() {
  form_factor_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::metrics::SystemProfileProto_Hardware_FormFactor SystemProfileProto_Hardware::form_factor() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.form_factor)
  return static_cast< ::metrics::SystemProfileProto_Hardware_FormFactor >(form_factor_);
}
inline void SystemProfileProto_Hardware::set_form_factor(::metrics::SystemProfileProto_Hardware_FormFactor value) {
  assert(::metrics::SystemProfileProto_Hardware_FormFactor_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  form_factor_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.form_factor)
}

// optional .metrics.SystemProfileProto.Hardware.CPU cpu = 13;
inline bool SystemProfileProto_Hardware::has_cpu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProfileProto_Hardware::clear_cpu() {
  if (cpu_ != nullptr) cpu_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::metrics::SystemProfileProto_Hardware_CPU& SystemProfileProto_Hardware::cpu() const {
  const ::metrics::SystemProfileProto_Hardware_CPU* p = cpu_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.cpu)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Hardware_CPU*>(
      &::metrics::_SystemProfileProto_Hardware_CPU_default_instance_);
}
inline ::metrics::SystemProfileProto_Hardware_CPU* SystemProfileProto_Hardware::release_cpu() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.cpu)
  _has_bits_[0] &= ~0x00000020u;
  ::metrics::SystemProfileProto_Hardware_CPU* temp = cpu_;
  cpu_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Hardware_CPU* SystemProfileProto_Hardware::mutable_cpu() {
  _has_bits_[0] |= 0x00000020u;
  if (cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_CPU>(GetArenaNoVirtual());
    cpu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.cpu)
  return cpu_;
}
inline void SystemProfileProto_Hardware::set_allocated_cpu(::metrics::SystemProfileProto_Hardware_CPU* cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cpu_;
  }
  if (cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  cpu_ = cpu;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.cpu)
}

// optional .metrics.SystemProfileProto.Hardware.Graphics gpu = 8;
inline bool SystemProfileProto_Hardware::has_gpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_Hardware::clear_gpu() {
  if (gpu_ != nullptr) gpu_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::metrics::SystemProfileProto_Hardware_Graphics& SystemProfileProto_Hardware::gpu() const {
  const ::metrics::SystemProfileProto_Hardware_Graphics* p = gpu_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.gpu)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Hardware_Graphics*>(
      &::metrics::_SystemProfileProto_Hardware_Graphics_default_instance_);
}
inline ::metrics::SystemProfileProto_Hardware_Graphics* SystemProfileProto_Hardware::release_gpu() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.gpu)
  _has_bits_[0] &= ~0x00000008u;
  ::metrics::SystemProfileProto_Hardware_Graphics* temp = gpu_;
  gpu_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Hardware_Graphics* SystemProfileProto_Hardware::mutable_gpu() {
  _has_bits_[0] |= 0x00000008u;
  if (gpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_Graphics>(GetArenaNoVirtual());
    gpu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.gpu)
  return gpu_;
}
inline void SystemProfileProto_Hardware::set_allocated_gpu(::metrics::SystemProfileProto_Hardware_Graphics* gpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gpu_;
  }
  if (gpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gpu_ = gpu;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.gpu)
}

// optional .metrics.SystemProfileProto.Hardware.Bluetooth bluetooth = 11;
inline bool SystemProfileProto_Hardware::has_bluetooth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_Hardware::clear_bluetooth() {
  if (bluetooth_ != nullptr) bluetooth_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::metrics::SystemProfileProto_Hardware_Bluetooth& SystemProfileProto_Hardware::bluetooth() const {
  const ::metrics::SystemProfileProto_Hardware_Bluetooth* p = bluetooth_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.bluetooth)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Hardware_Bluetooth*>(
      &::metrics::_SystemProfileProto_Hardware_Bluetooth_default_instance_);
}
inline ::metrics::SystemProfileProto_Hardware_Bluetooth* SystemProfileProto_Hardware::release_bluetooth() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.bluetooth)
  _has_bits_[0] &= ~0x00000010u;
  ::metrics::SystemProfileProto_Hardware_Bluetooth* temp = bluetooth_;
  bluetooth_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Hardware_Bluetooth* SystemProfileProto_Hardware::mutable_bluetooth() {
  _has_bits_[0] |= 0x00000010u;
  if (bluetooth_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_Bluetooth>(GetArenaNoVirtual());
    bluetooth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.bluetooth)
  return bluetooth_;
}
inline void SystemProfileProto_Hardware::set_allocated_bluetooth(::metrics::SystemProfileProto_Hardware_Bluetooth* bluetooth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bluetooth_;
  }
  if (bluetooth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bluetooth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bluetooth, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bluetooth_ = bluetooth;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.bluetooth)
}

// optional .metrics.SystemProfileProto.Hardware.USB usb = 30;
inline bool SystemProfileProto_Hardware::has_usb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemProfileProto_Hardware::clear_usb() {
  if (usb_ != nullptr) usb_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::metrics::SystemProfileProto_Hardware_USB& SystemProfileProto_Hardware::usb() const {
  const ::metrics::SystemProfileProto_Hardware_USB* p = usb_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.usb)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Hardware_USB*>(
      &::metrics::_SystemProfileProto_Hardware_USB_default_instance_);
}
inline ::metrics::SystemProfileProto_Hardware_USB* SystemProfileProto_Hardware::release_usb() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.usb)
  _has_bits_[0] &= ~0x00000100u;
  ::metrics::SystemProfileProto_Hardware_USB* temp = usb_;
  usb_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Hardware_USB* SystemProfileProto_Hardware::mutable_usb() {
  _has_bits_[0] |= 0x00000100u;
  if (usb_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_USB>(GetArenaNoVirtual());
    usb_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.usb)
  return usb_;
}
inline void SystemProfileProto_Hardware::set_allocated_usb(::metrics::SystemProfileProto_Hardware_USB* usb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete usb_;
  }
  if (usb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      usb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  usb_ = usb;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.usb)
}

// optional bool internal_display_supports_touch = 14;
inline bool SystemProfileProto_Hardware::has_internal_display_supports_touch() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SystemProfileProto_Hardware::clear_internal_display_supports_touch() {
  internal_display_supports_touch_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool SystemProfileProto_Hardware::internal_display_supports_touch() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.internal_display_supports_touch)
  return internal_display_supports_touch_;
}
inline void SystemProfileProto_Hardware::set_internal_display_supports_touch(bool value) {
  _has_bits_[0] |= 0x00020000u;
  internal_display_supports_touch_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.internal_display_supports_touch)
}

// repeated .metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen deprecated_external_touchscreen = 15 [deprecated = true];
inline int SystemProfileProto_Hardware::deprecated_external_touchscreen_size() const {
  return deprecated_external_touchscreen_.size();
}
inline void SystemProfileProto_Hardware::clear_deprecated_external_touchscreen() {
  deprecated_external_touchscreen_.Clear();
}
inline ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen* SystemProfileProto_Hardware::mutable_deprecated_external_touchscreen(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.deprecated_external_touchscreen)
  return deprecated_external_touchscreen_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen >*
SystemProfileProto_Hardware::mutable_deprecated_external_touchscreen() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.Hardware.deprecated_external_touchscreen)
  return &deprecated_external_touchscreen_;
}
inline const ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen& SystemProfileProto_Hardware::deprecated_external_touchscreen(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.deprecated_external_touchscreen)
  return deprecated_external_touchscreen_.Get(index);
}
inline ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen* SystemProfileProto_Hardware::add_deprecated_external_touchscreen() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.Hardware.deprecated_external_touchscreen)
  return deprecated_external_touchscreen_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen >&
SystemProfileProto_Hardware::deprecated_external_touchscreen() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.Hardware.deprecated_external_touchscreen)
  return deprecated_external_touchscreen_;
}

// optional .metrics.SystemProfileProto.Hardware.Drive app_drive = 16;
inline bool SystemProfileProto_Hardware::has_app_drive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProfileProto_Hardware::clear_app_drive() {
  if (app_drive_ != nullptr) app_drive_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::metrics::SystemProfileProto_Hardware_Drive& SystemProfileProto_Hardware::app_drive() const {
  const ::metrics::SystemProfileProto_Hardware_Drive* p = app_drive_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.app_drive)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Hardware_Drive*>(
      &::metrics::_SystemProfileProto_Hardware_Drive_default_instance_);
}
inline ::metrics::SystemProfileProto_Hardware_Drive* SystemProfileProto_Hardware::release_app_drive() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.app_drive)
  _has_bits_[0] &= ~0x00000040u;
  ::metrics::SystemProfileProto_Hardware_Drive* temp = app_drive_;
  app_drive_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Hardware_Drive* SystemProfileProto_Hardware::mutable_app_drive() {
  _has_bits_[0] |= 0x00000040u;
  if (app_drive_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_Drive>(GetArenaNoVirtual());
    app_drive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.app_drive)
  return app_drive_;
}
inline void SystemProfileProto_Hardware::set_allocated_app_drive(::metrics::SystemProfileProto_Hardware_Drive* app_drive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_drive_;
  }
  if (app_drive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_drive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_drive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  app_drive_ = app_drive;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.app_drive)
}

// optional .metrics.SystemProfileProto.Hardware.Drive user_data_drive = 17;
inline bool SystemProfileProto_Hardware::has_user_data_drive() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProfileProto_Hardware::clear_user_data_drive() {
  if (user_data_drive_ != nullptr) user_data_drive_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::metrics::SystemProfileProto_Hardware_Drive& SystemProfileProto_Hardware::user_data_drive() const {
  const ::metrics::SystemProfileProto_Hardware_Drive* p = user_data_drive_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.user_data_drive)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Hardware_Drive*>(
      &::metrics::_SystemProfileProto_Hardware_Drive_default_instance_);
}
inline ::metrics::SystemProfileProto_Hardware_Drive* SystemProfileProto_Hardware::release_user_data_drive() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.user_data_drive)
  _has_bits_[0] &= ~0x00000080u;
  ::metrics::SystemProfileProto_Hardware_Drive* temp = user_data_drive_;
  user_data_drive_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Hardware_Drive* SystemProfileProto_Hardware::mutable_user_data_drive() {
  _has_bits_[0] |= 0x00000080u;
  if (user_data_drive_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Hardware_Drive>(GetArenaNoVirtual());
    user_data_drive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.user_data_drive)
  return user_data_drive_;
}
inline void SystemProfileProto_Hardware::set_allocated_user_data_drive(::metrics::SystemProfileProto_Hardware_Drive* user_data_drive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_data_drive_;
  }
  if (user_data_drive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_data_drive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_data_drive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  user_data_drive_ = user_data_drive;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.user_data_drive)
}

// -------------------------------------------------------------------

// SystemProfileProto_Network_WifiAccessPoint_VendorInformation

// optional string model_number = 1;
inline bool SystemProfileProto_Network_WifiAccessPoint_VendorInformation::has_model_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_model_number() {
  model_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_Network_WifiAccessPoint_VendorInformation::model_number() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
  return model_number_.GetNoArena();
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_number(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  model_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  model_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_number(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  model_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
}
inline std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::mutable_model_number() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
  return model_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::release_model_number() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
  if (!has_model_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_number_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_allocated_model_number(std::string* model_number) {
  if (model_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_number);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
}

// optional string model_name = 2;
inline bool SystemProfileProto_Network_WifiAccessPoint_VendorInformation::has_model_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemProfileProto_Network_WifiAccessPoint_VendorInformation::model_name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
  return model_name_.GetNoArena();
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
}
inline std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::mutable_model_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
  return model_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::release_model_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
  if (!has_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return model_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
}

// optional string device_name = 3;
inline bool SystemProfileProto_Network_WifiAccessPoint_VendorInformation::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SystemProfileProto_Network_WifiAccessPoint_VendorInformation::device_name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
  return device_name_.GetNoArena();
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_device_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_device_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
}
inline std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::mutable_device_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
  return device_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::release_device_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
  if (!has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return device_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  device_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
}

// repeated uint32 element_identifier = 4;
inline int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::element_identifier_size() const {
  return element_identifier_.size();
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_element_identifier() {
  element_identifier_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Network_WifiAccessPoint_VendorInformation::element_identifier(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.element_identifier)
  return element_identifier_.Get(index);
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_element_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  element_identifier_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.element_identifier)
}
inline void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::add_element_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  element_identifier_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.element_identifier)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SystemProfileProto_Network_WifiAccessPoint_VendorInformation::element_identifier() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.element_identifier)
  return element_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SystemProfileProto_Network_WifiAccessPoint_VendorInformation::mutable_element_identifier() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.element_identifier)
  return &element_identifier_;
}

// -------------------------------------------------------------------

// SystemProfileProto_Network_WifiAccessPoint

// optional uint32 vendor_prefix = 1;
inline bool SystemProfileProto_Network_WifiAccessPoint::has_vendor_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Network_WifiAccessPoint::clear_vendor_prefix() {
  vendor_prefix_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_Network_WifiAccessPoint::vendor_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_prefix)
  return vendor_prefix_;
}
inline void SystemProfileProto_Network_WifiAccessPoint::set_vendor_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  vendor_prefix_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_prefix)
}

// optional .metrics.SystemProfileProto.Network.WifiAccessPoint.SecurityMode security_mode = 2;
inline bool SystemProfileProto_Network_WifiAccessPoint::has_security_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Network_WifiAccessPoint::clear_security_mode() {
  security_mode_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::security_mode() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.security_mode)
  return static_cast< ::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode >(security_mode_);
}
inline void SystemProfileProto_Network_WifiAccessPoint::set_security_mode(::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode value) {
  assert(::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  security_mode_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.security_mode)
}

// optional .metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation vendor_info = 3;
inline bool SystemProfileProto_Network_WifiAccessPoint::has_vendor_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Network_WifiAccessPoint::clear_vendor_info() {
  if (vendor_info_ != nullptr) vendor_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation& SystemProfileProto_Network_WifiAccessPoint::vendor_info() const {
  const ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* p = vendor_info_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation*>(
      &::metrics::_SystemProfileProto_Network_WifiAccessPoint_VendorInformation_default_instance_);
}
inline ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* SystemProfileProto_Network_WifiAccessPoint::release_vendor_info() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_info)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* temp = vendor_info_;
  vendor_info_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* SystemProfileProto_Network_WifiAccessPoint::mutable_vendor_info() {
  _has_bits_[0] |= 0x00000001u;
  if (vendor_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation>(GetArenaNoVirtual());
    vendor_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_info)
  return vendor_info_;
}
inline void SystemProfileProto_Network_WifiAccessPoint::set_allocated_vendor_info(::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* vendor_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vendor_info_;
  }
  if (vendor_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vendor_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vendor_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vendor_info_ = vendor_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_info)
}

// -------------------------------------------------------------------

// SystemProfileProto_Network

// optional bool connection_type_is_ambiguous = 1;
inline bool SystemProfileProto_Network::has_connection_type_is_ambiguous() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Network::clear_connection_type_is_ambiguous() {
  connection_type_is_ambiguous_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SystemProfileProto_Network::connection_type_is_ambiguous() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.connection_type_is_ambiguous)
  return connection_type_is_ambiguous_;
}
inline void SystemProfileProto_Network::set_connection_type_is_ambiguous(bool value) {
  _has_bits_[0] |= 0x00000004u;
  connection_type_is_ambiguous_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.connection_type_is_ambiguous)
}

// optional .metrics.SystemProfileProto.Network.ConnectionType connection_type = 2;
inline bool SystemProfileProto_Network::has_connection_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Network::clear_connection_type() {
  connection_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::metrics::SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::connection_type() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.connection_type)
  return static_cast< ::metrics::SystemProfileProto_Network_ConnectionType >(connection_type_);
}
inline void SystemProfileProto_Network::set_connection_type(::metrics::SystemProfileProto_Network_ConnectionType value) {
  assert(::metrics::SystemProfileProto_Network_ConnectionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  connection_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.connection_type)
}

// optional bool wifi_phy_layer_protocol_is_ambiguous = 3;
inline bool SystemProfileProto_Network::has_wifi_phy_layer_protocol_is_ambiguous() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_Network::clear_wifi_phy_layer_protocol_is_ambiguous() {
  wifi_phy_layer_protocol_is_ambiguous_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SystemProfileProto_Network::wifi_phy_layer_protocol_is_ambiguous() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.wifi_phy_layer_protocol_is_ambiguous)
  return wifi_phy_layer_protocol_is_ambiguous_;
}
inline void SystemProfileProto_Network::set_wifi_phy_layer_protocol_is_ambiguous(bool value) {
  _has_bits_[0] |= 0x00000008u;
  wifi_phy_layer_protocol_is_ambiguous_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.wifi_phy_layer_protocol_is_ambiguous)
}

// optional .metrics.SystemProfileProto.Network.WifiPHYLayerProtocol wifi_phy_layer_protocol = 4;
inline bool SystemProfileProto_Network::has_wifi_phy_layer_protocol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_Network::clear_wifi_phy_layer_protocol() {
  wifi_phy_layer_protocol_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::wifi_phy_layer_protocol() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.wifi_phy_layer_protocol)
  return static_cast< ::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol >(wifi_phy_layer_protocol_);
}
inline void SystemProfileProto_Network::set_wifi_phy_layer_protocol(::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol value) {
  assert(::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  wifi_phy_layer_protocol_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.wifi_phy_layer_protocol)
}

// optional .metrics.SystemProfileProto.Network.WifiAccessPoint access_point_info = 5;
inline bool SystemProfileProto_Network::has_access_point_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Network::clear_access_point_info() {
  if (access_point_info_ != nullptr) access_point_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::SystemProfileProto_Network_WifiAccessPoint& SystemProfileProto_Network::access_point_info() const {
  const ::metrics::SystemProfileProto_Network_WifiAccessPoint* p = access_point_info_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.access_point_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Network_WifiAccessPoint*>(
      &::metrics::_SystemProfileProto_Network_WifiAccessPoint_default_instance_);
}
inline ::metrics::SystemProfileProto_Network_WifiAccessPoint* SystemProfileProto_Network::release_access_point_info() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Network.access_point_info)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::SystemProfileProto_Network_WifiAccessPoint* temp = access_point_info_;
  access_point_info_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Network_WifiAccessPoint* SystemProfileProto_Network::mutable_access_point_info() {
  _has_bits_[0] |= 0x00000001u;
  if (access_point_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Network_WifiAccessPoint>(GetArenaNoVirtual());
    access_point_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Network.access_point_info)
  return access_point_info_;
}
inline void SystemProfileProto_Network::set_allocated_access_point_info(::metrics::SystemProfileProto_Network_WifiAccessPoint* access_point_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete access_point_info_;
  }
  if (access_point_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      access_point_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_point_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  access_point_info_ = access_point_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Network.access_point_info)
}

// optional .metrics.SystemProfileProto.Network.EffectiveConnectionType deprecated_effective_connection_type = 6 [deprecated = true];
inline bool SystemProfileProto_Network::has_deprecated_effective_connection_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProfileProto_Network::clear_deprecated_effective_connection_type() {
  deprecated_effective_connection_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::metrics::SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::deprecated_effective_connection_type() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.deprecated_effective_connection_type)
  return static_cast< ::metrics::SystemProfileProto_Network_EffectiveConnectionType >(deprecated_effective_connection_type_);
}
inline void SystemProfileProto_Network::set_deprecated_effective_connection_type(::metrics::SystemProfileProto_Network_EffectiveConnectionType value) {
  assert(::metrics::SystemProfileProto_Network_EffectiveConnectionType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  deprecated_effective_connection_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.deprecated_effective_connection_type)
}

// optional .metrics.SystemProfileProto.Network.EffectiveConnectionType min_effective_connection_type = 7;
inline bool SystemProfileProto_Network::has_min_effective_connection_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProfileProto_Network::clear_min_effective_connection_type() {
  min_effective_connection_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::metrics::SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::min_effective_connection_type() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.min_effective_connection_type)
  return static_cast< ::metrics::SystemProfileProto_Network_EffectiveConnectionType >(min_effective_connection_type_);
}
inline void SystemProfileProto_Network::set_min_effective_connection_type(::metrics::SystemProfileProto_Network_EffectiveConnectionType value) {
  assert(::metrics::SystemProfileProto_Network_EffectiveConnectionType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  min_effective_connection_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.min_effective_connection_type)
}

// optional .metrics.SystemProfileProto.Network.EffectiveConnectionType max_effective_connection_type = 8;
inline bool SystemProfileProto_Network::has_max_effective_connection_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProfileProto_Network::clear_max_effective_connection_type() {
  max_effective_connection_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::metrics::SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::max_effective_connection_type() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.max_effective_connection_type)
  return static_cast< ::metrics::SystemProfileProto_Network_EffectiveConnectionType >(max_effective_connection_type_);
}
inline void SystemProfileProto_Network::set_max_effective_connection_type(::metrics::SystemProfileProto_Network_EffectiveConnectionType value) {
  assert(::metrics::SystemProfileProto_Network_EffectiveConnectionType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  max_effective_connection_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.max_effective_connection_type)
}

// -------------------------------------------------------------------

// SystemProfileProto_GoogleUpdate_ProductInfo

// optional string version = 1;
inline bool SystemProfileProto_GoogleUpdate_ProductInfo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_GoogleUpdate_ProductInfo::version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
  return version_.GetNoArena();
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::set_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
}
inline std::string* SystemProfileProto_GoogleUpdate_ProductInfo::mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_GoogleUpdate_ProductInfo::release_version() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
  if (!has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
}

// optional int64 last_update_success_timestamp = 2;
inline bool SystemProfileProto_GoogleUpdate_ProductInfo::has_last_update_success_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::clear_last_update_success_timestamp() {
  last_update_success_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProfileProto_GoogleUpdate_ProductInfo::last_update_success_timestamp() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_update_success_timestamp)
  return last_update_success_timestamp_;
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::set_last_update_success_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  last_update_success_timestamp_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_update_success_timestamp)
}

// optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo.InstallResult last_result = 3;
inline bool SystemProfileProto_GoogleUpdate_ProductInfo::has_last_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::clear_last_result() {
  last_result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::last_result() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_result)
  return static_cast< ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult >(last_result_);
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::set_last_result(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult value) {
  assert(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  last_result_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_result)
}

// optional int32 last_error = 4;
inline bool SystemProfileProto_GoogleUpdate_ProductInfo::has_last_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::clear_last_error() {
  last_error_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_GoogleUpdate_ProductInfo::last_error() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_error)
  return last_error_;
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::set_last_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  last_error_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_error)
}

// optional int32 last_extra_error = 5;
inline bool SystemProfileProto_GoogleUpdate_ProductInfo::has_last_extra_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::clear_last_extra_error() {
  last_extra_error_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_GoogleUpdate_ProductInfo::last_extra_error() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_extra_error)
  return last_extra_error_;
}
inline void SystemProfileProto_GoogleUpdate_ProductInfo::set_last_extra_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  last_extra_error_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_extra_error)
}

// -------------------------------------------------------------------

// SystemProfileProto_GoogleUpdate

// optional bool is_system_install = 1;
inline bool SystemProfileProto_GoogleUpdate::has_is_system_install() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_GoogleUpdate::clear_is_system_install() {
  is_system_install_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SystemProfileProto_GoogleUpdate::is_system_install() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.is_system_install)
  return is_system_install_;
}
inline void SystemProfileProto_GoogleUpdate::set_is_system_install(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_system_install_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.is_system_install)
}

// optional int64 last_automatic_start_timestamp = 2;
inline bool SystemProfileProto_GoogleUpdate::has_last_automatic_start_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_GoogleUpdate::clear_last_automatic_start_timestamp() {
  last_automatic_start_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProfileProto_GoogleUpdate::last_automatic_start_timestamp() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.last_automatic_start_timestamp)
  return last_automatic_start_timestamp_;
}
inline void SystemProfileProto_GoogleUpdate::set_last_automatic_start_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_automatic_start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.last_automatic_start_timestamp)
}

// optional int64 last_update_check_timestamp = 3;
inline bool SystemProfileProto_GoogleUpdate::has_last_update_check_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_GoogleUpdate::clear_last_update_check_timestamp() {
  last_update_check_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProfileProto_GoogleUpdate::last_update_check_timestamp() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.last_update_check_timestamp)
  return last_update_check_timestamp_;
}
inline void SystemProfileProto_GoogleUpdate::set_last_update_check_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_update_check_timestamp_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.last_update_check_timestamp)
}

// optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo google_update_status = 4;
inline bool SystemProfileProto_GoogleUpdate::has_google_update_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_GoogleUpdate::clear_google_update_status() {
  if (google_update_status_ != nullptr) google_update_status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo& SystemProfileProto_GoogleUpdate::google_update_status() const {
  const ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* p = google_update_status_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.google_update_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo*>(
      &::metrics::_SystemProfileProto_GoogleUpdate_ProductInfo_default_instance_);
}
inline ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* SystemProfileProto_GoogleUpdate::release_google_update_status() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.GoogleUpdate.google_update_status)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* temp = google_update_status_;
  google_update_status_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* SystemProfileProto_GoogleUpdate::mutable_google_update_status() {
  _has_bits_[0] |= 0x00000001u;
  if (google_update_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_GoogleUpdate_ProductInfo>(GetArenaNoVirtual());
    google_update_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.GoogleUpdate.google_update_status)
  return google_update_status_;
}
inline void SystemProfileProto_GoogleUpdate::set_allocated_google_update_status(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* google_update_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete google_update_status_;
  }
  if (google_update_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      google_update_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, google_update_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  google_update_status_ = google_update_status;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.GoogleUpdate.google_update_status)
}

// optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo client_status = 5;
inline bool SystemProfileProto_GoogleUpdate::has_client_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_GoogleUpdate::clear_client_status() {
  if (client_status_ != nullptr) client_status_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo& SystemProfileProto_GoogleUpdate::client_status() const {
  const ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* p = client_status_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.client_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo*>(
      &::metrics::_SystemProfileProto_GoogleUpdate_ProductInfo_default_instance_);
}
inline ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* SystemProfileProto_GoogleUpdate::release_client_status() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.GoogleUpdate.client_status)
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* temp = client_status_;
  client_status_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* SystemProfileProto_GoogleUpdate::mutable_client_status() {
  _has_bits_[0] |= 0x00000002u;
  if (client_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_GoogleUpdate_ProductInfo>(GetArenaNoVirtual());
    client_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.GoogleUpdate.client_status)
  return client_status_;
}
inline void SystemProfileProto_GoogleUpdate::set_allocated_client_status(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* client_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_status_;
  }
  if (client_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_status_ = client_status;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.GoogleUpdate.client_status)
}

// -------------------------------------------------------------------

// SystemProfileProto_Plugin

// optional string name = 1;
inline bool SystemProfileProto_Plugin::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Plugin::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_Plugin::name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Plugin.name)
  return name_.GetNoArena();
}
inline void SystemProfileProto_Plugin::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Plugin.name)
}
inline void SystemProfileProto_Plugin::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Plugin.name)
}
inline void SystemProfileProto_Plugin::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Plugin.name)
}
inline void SystemProfileProto_Plugin::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Plugin.name)
}
inline std::string* SystemProfileProto_Plugin::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Plugin.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Plugin::release_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Plugin.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Plugin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Plugin.name)
}

// optional string filename = 2;
inline bool SystemProfileProto_Plugin::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Plugin::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemProfileProto_Plugin::filename() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Plugin.filename)
  return filename_.GetNoArena();
}
inline void SystemProfileProto_Plugin::set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Plugin.filename)
}
inline void SystemProfileProto_Plugin::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Plugin.filename)
}
inline void SystemProfileProto_Plugin::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Plugin.filename)
}
inline void SystemProfileProto_Plugin::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Plugin.filename)
}
inline std::string* SystemProfileProto_Plugin::mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Plugin.filename)
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Plugin::release_filename() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Plugin.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Plugin::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Plugin.filename)
}

// optional string version = 3;
inline bool SystemProfileProto_Plugin::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Plugin::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SystemProfileProto_Plugin::version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Plugin.version)
  return version_.GetNoArena();
}
inline void SystemProfileProto_Plugin::set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Plugin.version)
}
inline void SystemProfileProto_Plugin::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.Plugin.version)
}
inline void SystemProfileProto_Plugin::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Plugin.version)
}
inline void SystemProfileProto_Plugin::set_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Plugin.version)
}
inline std::string* SystemProfileProto_Plugin::mutable_version() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Plugin.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_Plugin::release_version() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Plugin.version)
  if (!has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_Plugin::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Plugin.version)
}

// optional bool is_disabled = 4;
inline bool SystemProfileProto_Plugin::has_is_disabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_Plugin::clear_is_disabled() {
  is_disabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SystemProfileProto_Plugin::is_disabled() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Plugin.is_disabled)
  return is_disabled_;
}
inline void SystemProfileProto_Plugin::set_is_disabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_disabled_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Plugin.is_disabled)
}

// optional bool is_pepper = 5;
inline bool SystemProfileProto_Plugin::has_is_pepper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_Plugin::clear_is_pepper() {
  is_pepper_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SystemProfileProto_Plugin::is_pepper() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Plugin.is_pepper)
  return is_pepper_;
}
inline void SystemProfileProto_Plugin::set_is_pepper(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_pepper_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Plugin.is_pepper)
}

// -------------------------------------------------------------------

// SystemProfileProto_Stability_PluginStability

// optional .metrics.SystemProfileProto.Plugin plugin = 1;
inline bool SystemProfileProto_Stability_PluginStability::has_plugin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Stability_PluginStability::clear_plugin() {
  if (plugin_ != nullptr) plugin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::SystemProfileProto_Plugin& SystemProfileProto_Stability_PluginStability::plugin() const {
  const ::metrics::SystemProfileProto_Plugin* p = plugin_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.PluginStability.plugin)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Plugin*>(
      &::metrics::_SystemProfileProto_Plugin_default_instance_);
}
inline ::metrics::SystemProfileProto_Plugin* SystemProfileProto_Stability_PluginStability::release_plugin() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Stability.PluginStability.plugin)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::SystemProfileProto_Plugin* temp = plugin_;
  plugin_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Plugin* SystemProfileProto_Stability_PluginStability::mutable_plugin() {
  _has_bits_[0] |= 0x00000001u;
  if (plugin_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Plugin>(GetArenaNoVirtual());
    plugin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Stability.PluginStability.plugin)
  return plugin_;
}
inline void SystemProfileProto_Stability_PluginStability::set_allocated_plugin(::metrics::SystemProfileProto_Plugin* plugin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete plugin_;
  }
  if (plugin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plugin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plugin_ = plugin;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Stability.PluginStability.plugin)
}

// optional int32 launch_count = 2;
inline bool SystemProfileProto_Stability_PluginStability::has_launch_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Stability_PluginStability::clear_launch_count() {
  launch_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability_PluginStability::launch_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.PluginStability.launch_count)
  return launch_count_;
}
inline void SystemProfileProto_Stability_PluginStability::set_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  launch_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.PluginStability.launch_count)
}

// optional int32 instance_count = 3;
inline bool SystemProfileProto_Stability_PluginStability::has_instance_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Stability_PluginStability::clear_instance_count() {
  instance_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability_PluginStability::instance_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.PluginStability.instance_count)
  return instance_count_;
}
inline void SystemProfileProto_Stability_PluginStability::set_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  instance_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.PluginStability.instance_count)
}

// optional int32 crash_count = 4;
inline bool SystemProfileProto_Stability_PluginStability::has_crash_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_Stability_PluginStability::clear_crash_count() {
  crash_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability_PluginStability::crash_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.PluginStability.crash_count)
  return crash_count_;
}
inline void SystemProfileProto_Stability_PluginStability::set_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  crash_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.PluginStability.crash_count)
}

// optional int32 loading_error_count = 5;
inline bool SystemProfileProto_Stability_PluginStability::has_loading_error_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_Stability_PluginStability::clear_loading_error_count() {
  loading_error_count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability_PluginStability::loading_error_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.PluginStability.loading_error_count)
  return loading_error_count_;
}
inline void SystemProfileProto_Stability_PluginStability::set_loading_error_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  loading_error_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.PluginStability.loading_error_count)
}

// -------------------------------------------------------------------

// SystemProfileProto_Stability

// optional int64 incremental_uptime_sec = 1;
inline bool SystemProfileProto_Stability::has_incremental_uptime_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_Stability::clear_incremental_uptime_sec() {
  incremental_uptime_sec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProfileProto_Stability::incremental_uptime_sec() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.incremental_uptime_sec)
  return incremental_uptime_sec_;
}
inline void SystemProfileProto_Stability::set_incremental_uptime_sec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  incremental_uptime_sec_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.incremental_uptime_sec)
}

// optional int64 uptime_sec = 23;
inline bool SystemProfileProto_Stability::has_uptime_sec() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SystemProfileProto_Stability::clear_uptime_sec() {
  uptime_sec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProfileProto_Stability::uptime_sec() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.uptime_sec)
  return uptime_sec_;
}
inline void SystemProfileProto_Stability::set_uptime_sec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  uptime_sec_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.uptime_sec)
}

// optional int32 page_load_count = 2;
inline bool SystemProfileProto_Stability::has_page_load_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_Stability::clear_page_load_count() {
  page_load_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::page_load_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.page_load_count)
  return page_load_count_;
}
inline void SystemProfileProto_Stability::set_page_load_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_load_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.page_load_count)
}

// optional int32 renderer_crash_count = 3;
inline bool SystemProfileProto_Stability::has_renderer_crash_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_Stability::clear_renderer_crash_count() {
  renderer_crash_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::renderer_crash_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.renderer_crash_count)
  return renderer_crash_count_;
}
inline void SystemProfileProto_Stability::set_renderer_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  renderer_crash_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.renderer_crash_count)
}

// optional int32 renderer_hang_count = 4;
inline bool SystemProfileProto_Stability::has_renderer_hang_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_Stability::clear_renderer_hang_count() {
  renderer_hang_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::renderer_hang_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.renderer_hang_count)
  return renderer_hang_count_;
}
inline void SystemProfileProto_Stability::set_renderer_hang_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  renderer_hang_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.renderer_hang_count)
}

// optional int32 renderer_failed_launch_count = 24;
inline bool SystemProfileProto_Stability::has_renderer_failed_launch_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SystemProfileProto_Stability::clear_renderer_failed_launch_count() {
  renderer_failed_launch_count_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::renderer_failed_launch_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.renderer_failed_launch_count)
  return renderer_failed_launch_count_;
}
inline void SystemProfileProto_Stability::set_renderer_failed_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  renderer_failed_launch_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.renderer_failed_launch_count)
}

// optional int32 renderer_launch_count = 26;
inline bool SystemProfileProto_Stability::has_renderer_launch_count() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SystemProfileProto_Stability::clear_renderer_launch_count() {
  renderer_launch_count_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::renderer_launch_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.renderer_launch_count)
  return renderer_launch_count_;
}
inline void SystemProfileProto_Stability::set_renderer_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  renderer_launch_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.renderer_launch_count)
}

// optional int32 extension_renderer_crash_count = 5;
inline bool SystemProfileProto_Stability::has_extension_renderer_crash_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_Stability::clear_extension_renderer_crash_count() {
  extension_renderer_crash_count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::extension_renderer_crash_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.extension_renderer_crash_count)
  return extension_renderer_crash_count_;
}
inline void SystemProfileProto_Stability::set_extension_renderer_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  extension_renderer_crash_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.extension_renderer_crash_count)
}

// optional int32 extension_renderer_failed_launch_count = 25;
inline bool SystemProfileProto_Stability::has_extension_renderer_failed_launch_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SystemProfileProto_Stability::clear_extension_renderer_failed_launch_count() {
  extension_renderer_failed_launch_count_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::extension_renderer_failed_launch_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.extension_renderer_failed_launch_count)
  return extension_renderer_failed_launch_count_;
}
inline void SystemProfileProto_Stability::set_extension_renderer_failed_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  extension_renderer_failed_launch_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.extension_renderer_failed_launch_count)
}

// optional int32 extension_renderer_launch_count = 27;
inline bool SystemProfileProto_Stability::has_extension_renderer_launch_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SystemProfileProto_Stability::clear_extension_renderer_launch_count() {
  extension_renderer_launch_count_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::extension_renderer_launch_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.extension_renderer_launch_count)
  return extension_renderer_launch_count_;
}
inline void SystemProfileProto_Stability::set_extension_renderer_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  extension_renderer_launch_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.extension_renderer_launch_count)
}

// optional int32 child_process_crash_count = 6;
inline bool SystemProfileProto_Stability::has_child_process_crash_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProfileProto_Stability::clear_child_process_crash_count() {
  child_process_crash_count_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::child_process_crash_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.child_process_crash_count)
  return child_process_crash_count_;
}
inline void SystemProfileProto_Stability::set_child_process_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  child_process_crash_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.child_process_crash_count)
}

// optional int32 gpu_crash_count = 31;
inline bool SystemProfileProto_Stability::has_gpu_crash_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SystemProfileProto_Stability::clear_gpu_crash_count() {
  gpu_crash_count_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::gpu_crash_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.gpu_crash_count)
  return gpu_crash_count_;
}
inline void SystemProfileProto_Stability::set_gpu_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  gpu_crash_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.gpu_crash_count)
}

// optional int32 other_user_crash_count = 7;
inline bool SystemProfileProto_Stability::has_other_user_crash_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProfileProto_Stability::clear_other_user_crash_count() {
  other_user_crash_count_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::other_user_crash_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.other_user_crash_count)
  return other_user_crash_count_;
}
inline void SystemProfileProto_Stability::set_other_user_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  other_user_crash_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.other_user_crash_count)
}

// optional int32 kernel_crash_count = 8;
inline bool SystemProfileProto_Stability::has_kernel_crash_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProfileProto_Stability::clear_kernel_crash_count() {
  kernel_crash_count_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::kernel_crash_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.kernel_crash_count)
  return kernel_crash_count_;
}
inline void SystemProfileProto_Stability::set_kernel_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  kernel_crash_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.kernel_crash_count)
}

// optional int32 unclean_system_shutdown_count = 9;
inline bool SystemProfileProto_Stability::has_unclean_system_shutdown_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemProfileProto_Stability::clear_unclean_system_shutdown_count() {
  unclean_system_shutdown_count_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::unclean_system_shutdown_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.unclean_system_shutdown_count)
  return unclean_system_shutdown_count_;
}
inline void SystemProfileProto_Stability::set_unclean_system_shutdown_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  unclean_system_shutdown_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.unclean_system_shutdown_count)
}

// optional int32 launch_count = 15;
inline bool SystemProfileProto_Stability::has_launch_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemProfileProto_Stability::clear_launch_count() {
  launch_count_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::launch_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.launch_count)
  return launch_count_;
}
inline void SystemProfileProto_Stability::set_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  launch_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.launch_count)
}

// optional int32 crash_count = 16;
inline bool SystemProfileProto_Stability::has_crash_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SystemProfileProto_Stability::clear_crash_count() {
  crash_count_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::crash_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.crash_count)
  return crash_count_;
}
inline void SystemProfileProto_Stability::set_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  crash_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.crash_count)
}

// optional int32 crash_count_due_to_gms_core_update = 30;
inline bool SystemProfileProto_Stability::has_crash_count_due_to_gms_core_update() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SystemProfileProto_Stability::clear_crash_count_due_to_gms_core_update() {
  crash_count_due_to_gms_core_update_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::crash_count_due_to_gms_core_update() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.crash_count_due_to_gms_core_update)
  return crash_count_due_to_gms_core_update_;
}
inline void SystemProfileProto_Stability::set_crash_count_due_to_gms_core_update(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  crash_count_due_to_gms_core_update_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.crash_count_due_to_gms_core_update)
}

// optional int32 crash_count_without_gms_core_update = 28 [deprecated = true];
inline bool SystemProfileProto_Stability::has_crash_count_without_gms_core_update() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SystemProfileProto_Stability::clear_crash_count_without_gms_core_update() {
  crash_count_without_gms_core_update_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::crash_count_without_gms_core_update() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.crash_count_without_gms_core_update)
  return crash_count_without_gms_core_update_;
}
inline void SystemProfileProto_Stability::set_crash_count_without_gms_core_update(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  crash_count_without_gms_core_update_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.crash_count_without_gms_core_update)
}

// optional int32 incomplete_shutdown_count = 17;
inline bool SystemProfileProto_Stability::has_incomplete_shutdown_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SystemProfileProto_Stability::clear_incomplete_shutdown_count() {
  incomplete_shutdown_count_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::incomplete_shutdown_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.incomplete_shutdown_count)
  return incomplete_shutdown_count_;
}
inline void SystemProfileProto_Stability::set_incomplete_shutdown_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  incomplete_shutdown_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.incomplete_shutdown_count)
}

// optional int32 breakpad_registration_success_count = 18;
inline bool SystemProfileProto_Stability::has_breakpad_registration_success_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SystemProfileProto_Stability::clear_breakpad_registration_success_count() {
  breakpad_registration_success_count_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::breakpad_registration_success_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.breakpad_registration_success_count)
  return breakpad_registration_success_count_;
}
inline void SystemProfileProto_Stability::set_breakpad_registration_success_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  breakpad_registration_success_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.breakpad_registration_success_count)
}

// optional int32 breakpad_registration_failure_count = 19;
inline bool SystemProfileProto_Stability::has_breakpad_registration_failure_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SystemProfileProto_Stability::clear_breakpad_registration_failure_count() {
  breakpad_registration_failure_count_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::breakpad_registration_failure_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.breakpad_registration_failure_count)
  return breakpad_registration_failure_count_;
}
inline void SystemProfileProto_Stability::set_breakpad_registration_failure_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  breakpad_registration_failure_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.breakpad_registration_failure_count)
}

// optional int32 debugger_present_count = 20;
inline bool SystemProfileProto_Stability::has_debugger_present_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SystemProfileProto_Stability::clear_debugger_present_count() {
  debugger_present_count_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::debugger_present_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.debugger_present_count)
  return debugger_present_count_;
}
inline void SystemProfileProto_Stability::set_debugger_present_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  debugger_present_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.debugger_present_count)
}

// optional int32 debugger_not_present_count = 21;
inline bool SystemProfileProto_Stability::has_debugger_not_present_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SystemProfileProto_Stability::clear_debugger_not_present_count() {
  debugger_not_present_count_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_Stability::debugger_not_present_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.debugger_not_present_count)
  return debugger_not_present_count_;
}
inline void SystemProfileProto_Stability::set_debugger_not_present_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  debugger_not_present_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.debugger_not_present_count)
}

// optional bool from_previous_run = 29;
inline bool SystemProfileProto_Stability::has_from_previous_run() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SystemProfileProto_Stability::clear_from_previous_run() {
  from_previous_run_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool SystemProfileProto_Stability::from_previous_run() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.from_previous_run)
  return from_previous_run_;
}
inline void SystemProfileProto_Stability::set_from_previous_run(bool value) {
  _has_bits_[0] |= 0x00800000u;
  from_previous_run_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.from_previous_run)
}

// repeated .metrics.SystemProfileProto.Stability.PluginStability plugin_stability = 22;
inline int SystemProfileProto_Stability::plugin_stability_size() const {
  return plugin_stability_.size();
}
inline void SystemProfileProto_Stability::clear_plugin_stability() {
  plugin_stability_.Clear();
}
inline ::metrics::SystemProfileProto_Stability_PluginStability* SystemProfileProto_Stability::mutable_plugin_stability(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Stability.plugin_stability)
  return plugin_stability_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Stability_PluginStability >*
SystemProfileProto_Stability::mutable_plugin_stability() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.Stability.plugin_stability)
  return &plugin_stability_;
}
inline const ::metrics::SystemProfileProto_Stability_PluginStability& SystemProfileProto_Stability::plugin_stability(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.plugin_stability)
  return plugin_stability_.Get(index);
}
inline ::metrics::SystemProfileProto_Stability_PluginStability* SystemProfileProto_Stability::add_plugin_stability() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.Stability.plugin_stability)
  return plugin_stability_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Stability_PluginStability >&
SystemProfileProto_Stability::plugin_stability() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.Stability.plugin_stability)
  return plugin_stability_;
}

// -------------------------------------------------------------------

// SystemProfileProto_FieldTrial

// optional fixed32 name_id = 1;
inline bool SystemProfileProto_FieldTrial::has_name_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_FieldTrial::clear_name_id() {
  name_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_FieldTrial::name_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.FieldTrial.name_id)
  return name_id_;
}
inline void SystemProfileProto_FieldTrial::set_name_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  name_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.FieldTrial.name_id)
}

// optional fixed32 group_id = 2;
inline bool SystemProfileProto_FieldTrial::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_FieldTrial::clear_group_id() {
  group_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_FieldTrial::group_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.FieldTrial.group_id)
  return group_id_;
}
inline void SystemProfileProto_FieldTrial::set_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  group_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.FieldTrial.group_id)
}

// -------------------------------------------------------------------

// SystemProfileProto_ExternalAudioVideoDevice_AudioDescription

// optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.AudioFormat audio_format = 1;
inline bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::has_audio_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_audio_format() {
  audio_format_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::audio_format() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.audio_format)
  return static_cast< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat >(audio_format_);
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_audio_format(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat value) {
  assert(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  audio_format_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.audio_format)
}

// optional int32 num_channels = 2;
inline bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::has_num_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_num_channels() {
  num_channels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::num_channels() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.num_channels)
  return num_channels_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_num_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.num_channels)
}

// repeated int32 sample_frequency_hz = 3;
inline int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::sample_frequency_hz_size() const {
  return sample_frequency_hz_.size();
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_sample_frequency_hz() {
  sample_frequency_hz_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::sample_frequency_hz(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.sample_frequency_hz)
  return sample_frequency_hz_.Get(index);
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_sample_frequency_hz(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sample_frequency_hz_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.sample_frequency_hz)
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::add_sample_frequency_hz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sample_frequency_hz_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.sample_frequency_hz)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::sample_frequency_hz() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.sample_frequency_hz)
  return sample_frequency_hz_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::mutable_sample_frequency_hz() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.sample_frequency_hz)
  return &sample_frequency_hz_;
}

// optional int32 max_bit_rate_per_second = 4;
inline bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::has_max_bit_rate_per_second() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_max_bit_rate_per_second() {
  max_bit_rate_per_second_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::max_bit_rate_per_second() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.max_bit_rate_per_second)
  return max_bit_rate_per_second_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_max_bit_rate_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_bit_rate_per_second_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.max_bit_rate_per_second)
}

// optional int32 bit_depth = 5;
inline bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::has_bit_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_bit_depth() {
  bit_depth_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::bit_depth() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.bit_depth)
  return bit_depth_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_bit_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  bit_depth_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.bit_depth)
}

// optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.OutputMode output_mode = 6;
inline bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::has_output_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_output_mode() {
  output_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::output_mode() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.output_mode)
  return static_cast< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode >(output_mode_);
}
inline void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_output_mode(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode value) {
  assert(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  output_mode_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.output_mode)
}

// -------------------------------------------------------------------

// SystemProfileProto_ExternalAudioVideoDevice_CECCommand

// optional int32 opcode = 1;
inline bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_opcode() {
  opcode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::opcode() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.opcode)
  return opcode_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_opcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  opcode_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.opcode)
}

// optional int32 num_received_direct = 2;
inline bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_received_direct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_received_direct() {
  num_received_direct_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_received_direct() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_received_direct)
  return num_received_direct_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_received_direct(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_received_direct_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_received_direct)
}

// optional int32 num_received_broadcast = 3;
inline bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_received_broadcast() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_received_broadcast() {
  num_received_broadcast_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_received_broadcast() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_received_broadcast)
  return num_received_broadcast_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_received_broadcast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_received_broadcast_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_received_broadcast)
}

// optional int32 num_sent_direct = 4;
inline bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_sent_direct() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_sent_direct() {
  num_sent_direct_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_sent_direct() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_sent_direct)
  return num_sent_direct_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_sent_direct(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_sent_direct_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_sent_direct)
}

// optional int32 num_sent_broadcast = 5;
inline bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_sent_broadcast() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_sent_broadcast() {
  num_sent_broadcast_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_sent_broadcast() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_sent_broadcast)
  return num_sent_broadcast_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_sent_broadcast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_sent_broadcast_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_sent_broadcast)
}

// optional int32 num_aborted_unknown_reason = 6;
inline bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_aborted_unknown_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_aborted_unknown_reason() {
  num_aborted_unknown_reason_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_aborted_unknown_reason() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_aborted_unknown_reason)
  return num_aborted_unknown_reason_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_aborted_unknown_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_aborted_unknown_reason_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_aborted_unknown_reason)
}

// optional int32 num_aborted_unrecognized = 7;
inline bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_aborted_unrecognized() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_aborted_unrecognized() {
  num_aborted_unrecognized_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_aborted_unrecognized() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_aborted_unrecognized)
  return num_aborted_unrecognized_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_aborted_unrecognized(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_aborted_unrecognized_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_aborted_unrecognized)
}

// -------------------------------------------------------------------

// SystemProfileProto_ExternalAudioVideoDevice

// optional string manufacturer_name = 1;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_manufacturer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_manufacturer_name() {
  manufacturer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_ExternalAudioVideoDevice::manufacturer_name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
  return manufacturer_name_.GetNoArena();
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_manufacturer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  manufacturer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_manufacturer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  manufacturer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_manufacturer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  manufacturer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_manufacturer_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  manufacturer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
}
inline std::string* SystemProfileProto_ExternalAudioVideoDevice::mutable_manufacturer_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
  return manufacturer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_ExternalAudioVideoDevice::release_manufacturer_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
  if (!has_manufacturer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return manufacturer_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_allocated_manufacturer_name(std::string* manufacturer_name) {
  if (manufacturer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  manufacturer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
}

// optional string model_name = 2;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_model_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemProfileProto_ExternalAudioVideoDevice::model_name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
  return model_name_.GetNoArena();
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_model_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_model_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
}
inline std::string* SystemProfileProto_ExternalAudioVideoDevice::mutable_model_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
  return model_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_ExternalAudioVideoDevice::release_model_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
  if (!has_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return model_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
}

// optional string product_code = 3;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_product_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_product_code() {
  product_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SystemProfileProto_ExternalAudioVideoDevice::product_code() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
  return product_code_.GetNoArena();
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_product_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  product_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_product_code(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  product_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_product_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  product_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_product_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  product_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
}
inline std::string* SystemProfileProto_ExternalAudioVideoDevice::mutable_product_code() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
  return product_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_ExternalAudioVideoDevice::release_product_code() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
  if (!has_product_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return product_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_allocated_product_code(std::string* product_code) {
  if (product_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  product_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_code);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
}

// repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AVDeviceType av_device_type = 4;
inline int SystemProfileProto_ExternalAudioVideoDevice::av_device_type_size() const {
  return av_device_type_.size();
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_av_device_type() {
  av_device_type_.Clear();
}
inline ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::av_device_type(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.av_device_type)
  return static_cast< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType >(av_device_type_.Get(index));
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_av_device_type(int index, ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType value) {
  assert(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid(value));
  av_device_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.av_device_type)
}
inline void SystemProfileProto_ExternalAudioVideoDevice::add_av_device_type(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType value) {
  assert(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid(value));
  av_device_type_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.ExternalAudioVideoDevice.av_device_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SystemProfileProto_ExternalAudioVideoDevice::av_device_type() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.av_device_type)
  return av_device_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SystemProfileProto_ExternalAudioVideoDevice::mutable_av_device_type() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.av_device_type)
  return &av_device_type_;
}

// optional int32 manufacture_year = 5;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_manufacture_year() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_manufacture_year() {
  manufacture_year_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::manufacture_year() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacture_year)
  return manufacture_year_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_manufacture_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  manufacture_year_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacture_year)
}

// optional int32 manufacture_week = 6;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_manufacture_week() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_manufacture_week() {
  manufacture_week_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::manufacture_week() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacture_week)
  return manufacture_week_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_manufacture_week(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  manufacture_week_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacture_week)
}

// optional int32 horizontal_resolution = 7;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_horizontal_resolution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_horizontal_resolution() {
  horizontal_resolution_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::horizontal_resolution() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.horizontal_resolution)
  return horizontal_resolution_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_horizontal_resolution(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  horizontal_resolution_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.horizontal_resolution)
}

// optional int32 vertical_resolution = 8;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_vertical_resolution() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_vertical_resolution() {
  vertical_resolution_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::vertical_resolution() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.vertical_resolution)
  return vertical_resolution_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_vertical_resolution(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  vertical_resolution_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.vertical_resolution)
}

// repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription audio_description = 9;
inline int SystemProfileProto_ExternalAudioVideoDevice::audio_description_size() const {
  return audio_description_.size();
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_audio_description() {
  audio_description_.Clear();
}
inline ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* SystemProfileProto_ExternalAudioVideoDevice::mutable_audio_description(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAudioVideoDevice.audio_description)
  return audio_description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription >*
SystemProfileProto_ExternalAudioVideoDevice::mutable_audio_description() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.audio_description)
  return &audio_description_;
}
inline const ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& SystemProfileProto_ExternalAudioVideoDevice::audio_description(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.audio_description)
  return audio_description_.Get(index);
}
inline ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* SystemProfileProto_ExternalAudioVideoDevice::add_audio_description() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.ExternalAudioVideoDevice.audio_description)
  return audio_description_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription >&
SystemProfileProto_ExternalAudioVideoDevice::audio_description() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.audio_description)
  return audio_description_;
}

// optional int32 position_in_setup = 10;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_position_in_setup() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_position_in_setup() {
  position_in_setup_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::position_in_setup() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.position_in_setup)
  return position_in_setup_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_position_in_setup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  position_in_setup_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.position_in_setup)
}

// optional bool is_in_path_to_tv = 11;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_is_in_path_to_tv() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_is_in_path_to_tv() {
  is_in_path_to_tv_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool SystemProfileProto_ExternalAudioVideoDevice::is_in_path_to_tv() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.is_in_path_to_tv)
  return is_in_path_to_tv_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_is_in_path_to_tv(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_in_path_to_tv_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.is_in_path_to_tv)
}

// optional int32 cec_version = 12;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_cec_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_cec_version() {
  cec_version_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::cec_version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_version)
  return cec_version_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_cec_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  cec_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_version)
}

// repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand cec_command = 13;
inline int SystemProfileProto_ExternalAudioVideoDevice::cec_command_size() const {
  return cec_command_.size();
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_cec_command() {
  cec_command_.Clear();
}
inline ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand* SystemProfileProto_ExternalAudioVideoDevice::mutable_cec_command(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_command)
  return cec_command_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand >*
SystemProfileProto_ExternalAudioVideoDevice::mutable_cec_command() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_command)
  return &cec_command_;
}
inline const ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand& SystemProfileProto_ExternalAudioVideoDevice::cec_command(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_command)
  return cec_command_.Get(index);
}
inline ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand* SystemProfileProto_ExternalAudioVideoDevice::add_cec_command() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_command)
  return cec_command_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand >&
SystemProfileProto_ExternalAudioVideoDevice::cec_command() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_command)
  return cec_command_;
}

// optional int32 frame_rate = 14;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_frame_rate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_frame_rate() {
  frame_rate_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::frame_rate() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.frame_rate)
  return frame_rate_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_frame_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  frame_rate_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.frame_rate)
}

// optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.ColorEncoding color_encoding = 15;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_color_encoding() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_color_encoding() {
  color_encoding_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::color_encoding() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.color_encoding)
  return static_cast< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding >(color_encoding_);
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_color_encoding(::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding value) {
  assert(::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  color_encoding_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.color_encoding)
}

// optional int32 bit_depth = 16;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_bit_depth() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_bit_depth() {
  bit_depth_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::bit_depth() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.bit_depth)
  return bit_depth_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_bit_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  bit_depth_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.bit_depth)
}

// optional int32 tmds = 17;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_tmds() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_tmds() {
  tmds_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::tmds() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.tmds)
  return tmds_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_tmds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  tmds_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.tmds)
}

// optional bool hdr10_support = 18;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_hdr10_support() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_hdr10_support() {
  hdr10_support_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool SystemProfileProto_ExternalAudioVideoDevice::hdr10_support() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.hdr10_support)
  return hdr10_support_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_hdr10_support(bool value) {
  _has_bits_[0] |= 0x00004000u;
  hdr10_support_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.hdr10_support)
}

// optional bool dolby_vision_support = 19;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_dolby_vision_support() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_dolby_vision_support() {
  dolby_vision_support_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool SystemProfileProto_ExternalAudioVideoDevice::dolby_vision_support() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.dolby_vision_support)
  return dolby_vision_support_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_dolby_vision_support(bool value) {
  _has_bits_[0] |= 0x00008000u;
  dolby_vision_support_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.dolby_vision_support)
}

// optional int32 eotf_support = 20;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_eotf_support() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_eotf_support() {
  eotf_support_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::eotf_support() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.eotf_support)
  return eotf_support_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_eotf_support(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  eotf_support_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.eotf_support)
}

// optional bool yuv_support = 21;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_yuv_support() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_yuv_support() {
  yuv_support_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool SystemProfileProto_ExternalAudioVideoDevice::yuv_support() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.yuv_support)
  return yuv_support_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_yuv_support(bool value) {
  _has_bits_[0] |= 0x00010000u;
  yuv_support_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.yuv_support)
}

// optional bool yuv_420_support = 22;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_yuv_420_support() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_yuv_420_support() {
  yuv_420_support_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool SystemProfileProto_ExternalAudioVideoDevice::yuv_420_support() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.yuv_420_support)
  return yuv_420_support_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_yuv_420_support(bool value) {
  _has_bits_[0] |= 0x00040000u;
  yuv_420_support_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.yuv_420_support)
}

// optional int32 maximum_supported_hdcp_version = 23;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_maximum_supported_hdcp_version() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_maximum_supported_hdcp_version() {
  maximum_supported_hdcp_version_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::maximum_supported_hdcp_version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.maximum_supported_hdcp_version)
  return maximum_supported_hdcp_version_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_maximum_supported_hdcp_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  maximum_supported_hdcp_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.maximum_supported_hdcp_version)
}

// optional int32 current_hdcp_version = 24;
inline bool SystemProfileProto_ExternalAudioVideoDevice::has_current_hdcp_version() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::clear_current_hdcp_version() {
  current_hdcp_version_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto_ExternalAudioVideoDevice::current_hdcp_version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.current_hdcp_version)
  return current_hdcp_version_;
}
inline void SystemProfileProto_ExternalAudioVideoDevice::set_current_hdcp_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  current_hdcp_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.current_hdcp_version)
}

// -------------------------------------------------------------------

// SystemProfileProto_ExternalAccessPoint

// optional string manufacturer = 1;
inline bool SystemProfileProto_ExternalAccessPoint::has_manufacturer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_ExternalAccessPoint::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_ExternalAccessPoint::manufacturer() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void SystemProfileProto_ExternalAccessPoint::set_manufacturer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
}
inline void SystemProfileProto_ExternalAccessPoint::set_manufacturer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  manufacturer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
}
inline void SystemProfileProto_ExternalAccessPoint::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
}
inline void SystemProfileProto_ExternalAccessPoint::set_manufacturer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
}
inline std::string* SystemProfileProto_ExternalAccessPoint::mutable_manufacturer() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
  return manufacturer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_ExternalAccessPoint::release_manufacturer() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
  if (!has_manufacturer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return manufacturer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_ExternalAccessPoint::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  manufacturer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
}

// optional string model_name = 2;
inline bool SystemProfileProto_ExternalAccessPoint::has_model_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_ExternalAccessPoint::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemProfileProto_ExternalAccessPoint::model_name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
  return model_name_.GetNoArena();
}
inline void SystemProfileProto_ExternalAccessPoint::set_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
}
inline void SystemProfileProto_ExternalAccessPoint::set_model_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
}
inline void SystemProfileProto_ExternalAccessPoint::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
}
inline void SystemProfileProto_ExternalAccessPoint::set_model_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
}
inline std::string* SystemProfileProto_ExternalAccessPoint::mutable_model_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
  return model_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_ExternalAccessPoint::release_model_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
  if (!has_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return model_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_ExternalAccessPoint::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
}

// optional string model_number = 3;
inline bool SystemProfileProto_ExternalAccessPoint::has_model_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_ExternalAccessPoint::clear_model_number() {
  model_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SystemProfileProto_ExternalAccessPoint::model_number() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
  return model_number_.GetNoArena();
}
inline void SystemProfileProto_ExternalAccessPoint::set_model_number(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  model_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
}
inline void SystemProfileProto_ExternalAccessPoint::set_model_number(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  model_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
}
inline void SystemProfileProto_ExternalAccessPoint::set_model_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  model_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
}
inline void SystemProfileProto_ExternalAccessPoint::set_model_number(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  model_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
}
inline std::string* SystemProfileProto_ExternalAccessPoint::mutable_model_number() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
  return model_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_ExternalAccessPoint::release_model_number() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
  if (!has_model_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return model_number_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_ExternalAccessPoint::set_allocated_model_number(std::string* model_number) {
  if (model_number != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  model_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_number);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
}

// optional string device_name = 4;
inline bool SystemProfileProto_ExternalAccessPoint::has_device_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_ExternalAccessPoint::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SystemProfileProto_ExternalAccessPoint::device_name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
  return device_name_.GetNoArena();
}
inline void SystemProfileProto_ExternalAccessPoint::set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
}
inline void SystemProfileProto_ExternalAccessPoint::set_device_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  device_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
}
inline void SystemProfileProto_ExternalAccessPoint::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
}
inline void SystemProfileProto_ExternalAccessPoint::set_device_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
}
inline std::string* SystemProfileProto_ExternalAccessPoint::mutable_device_name() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
  return device_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_ExternalAccessPoint::release_device_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
  if (!has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return device_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_ExternalAccessPoint::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  device_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
}

// -------------------------------------------------------------------

// SystemProfileProto_AntiVirusProduct

// optional string product_name = 1;
inline bool SystemProfileProto_AntiVirusProduct::has_product_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_AntiVirusProduct::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_AntiVirusProduct::product_name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.AntiVirusProduct.product_name)
  return product_name_.GetNoArena();
}
inline void SystemProfileProto_AntiVirusProduct::set_product_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  product_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.AntiVirusProduct.product_name)
}
inline void SystemProfileProto_AntiVirusProduct::set_product_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  product_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.AntiVirusProduct.product_name)
}
inline void SystemProfileProto_AntiVirusProduct::set_product_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  product_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.AntiVirusProduct.product_name)
}
inline void SystemProfileProto_AntiVirusProduct::set_product_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  product_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.AntiVirusProduct.product_name)
}
inline std::string* SystemProfileProto_AntiVirusProduct::mutable_product_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.AntiVirusProduct.product_name)
  return product_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_AntiVirusProduct::release_product_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.AntiVirusProduct.product_name)
  if (!has_product_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return product_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_AntiVirusProduct::set_allocated_product_name(std::string* product_name) {
  if (product_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  product_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.AntiVirusProduct.product_name)
}

// optional fixed32 product_name_hash = 2;
inline bool SystemProfileProto_AntiVirusProduct::has_product_name_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_AntiVirusProduct::clear_product_name_hash() {
  product_name_hash_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_AntiVirusProduct::product_name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.AntiVirusProduct.product_name_hash)
  return product_name_hash_;
}
inline void SystemProfileProto_AntiVirusProduct::set_product_name_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  product_name_hash_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.AntiVirusProduct.product_name_hash)
}

// optional string product_version = 3;
inline bool SystemProfileProto_AntiVirusProduct::has_product_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_AntiVirusProduct::clear_product_version() {
  product_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemProfileProto_AntiVirusProduct::product_version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.AntiVirusProduct.product_version)
  return product_version_.GetNoArena();
}
inline void SystemProfileProto_AntiVirusProduct::set_product_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  product_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.AntiVirusProduct.product_version)
}
inline void SystemProfileProto_AntiVirusProduct::set_product_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  product_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.AntiVirusProduct.product_version)
}
inline void SystemProfileProto_AntiVirusProduct::set_product_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  product_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.AntiVirusProduct.product_version)
}
inline void SystemProfileProto_AntiVirusProduct::set_product_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  product_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.AntiVirusProduct.product_version)
}
inline std::string* SystemProfileProto_AntiVirusProduct::mutable_product_version() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.AntiVirusProduct.product_version)
  return product_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_AntiVirusProduct::release_product_version() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.AntiVirusProduct.product_version)
  if (!has_product_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return product_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_AntiVirusProduct::set_allocated_product_version(std::string* product_version) {
  if (product_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  product_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.AntiVirusProduct.product_version)
}

// optional fixed32 product_version_hash = 4;
inline bool SystemProfileProto_AntiVirusProduct::has_product_version_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_AntiVirusProduct::clear_product_version_hash() {
  product_version_hash_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_AntiVirusProduct::product_version_hash() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.AntiVirusProduct.product_version_hash)
  return product_version_hash_;
}
inline void SystemProfileProto_AntiVirusProduct::set_product_version_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  product_version_hash_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.AntiVirusProduct.product_version_hash)
}

// optional .metrics.SystemProfileProto.AntiVirusState product_state = 5;
inline bool SystemProfileProto_AntiVirusProduct::has_product_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto_AntiVirusProduct::clear_product_state() {
  product_state_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::metrics::SystemProfileProto_AntiVirusState SystemProfileProto_AntiVirusProduct::product_state() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.AntiVirusProduct.product_state)
  return static_cast< ::metrics::SystemProfileProto_AntiVirusState >(product_state_);
}
inline void SystemProfileProto_AntiVirusProduct::set_product_state(::metrics::SystemProfileProto_AntiVirusState value) {
  assert(::metrics::SystemProfileProto_AntiVirusState_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  product_state_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.AntiVirusProduct.product_state)
}

// -------------------------------------------------------------------

// SystemProfileProto_ChromeComponent

// optional .metrics.SystemProfileProto.ComponentId component_id = 1 [default = UNKNOWN];
inline bool SystemProfileProto_ChromeComponent::has_component_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_ChromeComponent::clear_component_id() {
  component_id_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::metrics::SystemProfileProto_ComponentId SystemProfileProto_ChromeComponent::component_id() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ChromeComponent.component_id)
  return static_cast< ::metrics::SystemProfileProto_ComponentId >(component_id_);
}
inline void SystemProfileProto_ChromeComponent::set_component_id(::metrics::SystemProfileProto_ComponentId value) {
  assert(::metrics::SystemProfileProto_ComponentId_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  component_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ChromeComponent.component_id)
}

// optional string version = 2;
inline bool SystemProfileProto_ChromeComponent::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_ChromeComponent::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto_ChromeComponent::version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ChromeComponent.version)
  return version_.GetNoArena();
}
inline void SystemProfileProto_ChromeComponent::set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ChromeComponent.version)
}
inline void SystemProfileProto_ChromeComponent::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.ChromeComponent.version)
}
inline void SystemProfileProto_ChromeComponent::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ChromeComponent.version)
}
inline void SystemProfileProto_ChromeComponent::set_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ChromeComponent.version)
}
inline std::string* SystemProfileProto_ChromeComponent::mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ChromeComponent.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto_ChromeComponent::release_version() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ChromeComponent.version)
  if (!has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto_ChromeComponent::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ChromeComponent.version)
}

// optional fixed32 omaha_fingerprint = 3;
inline bool SystemProfileProto_ChromeComponent::has_omaha_fingerprint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_ChromeComponent::clear_omaha_fingerprint() {
  omaha_fingerprint_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_ChromeComponent::omaha_fingerprint() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ChromeComponent.omaha_fingerprint)
  return omaha_fingerprint_;
}
inline void SystemProfileProto_ChromeComponent::set_omaha_fingerprint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  omaha_fingerprint_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ChromeComponent.omaha_fingerprint)
}

// -------------------------------------------------------------------

// SystemProfileProto_LinkedAndroidPhoneData

// optional fixed32 phone_model_name_hash = 1;
inline bool SystemProfileProto_LinkedAndroidPhoneData::has_phone_model_name_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto_LinkedAndroidPhoneData::clear_phone_model_name_hash() {
  phone_model_name_hash_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto_LinkedAndroidPhoneData::phone_model_name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.LinkedAndroidPhoneData.phone_model_name_hash)
  return phone_model_name_hash_;
}
inline void SystemProfileProto_LinkedAndroidPhoneData::set_phone_model_name_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  phone_model_name_hash_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.LinkedAndroidPhoneData.phone_model_name_hash)
}

// optional bool is_smartlock_enabled = 2;
inline bool SystemProfileProto_LinkedAndroidPhoneData::has_is_smartlock_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto_LinkedAndroidPhoneData::clear_is_smartlock_enabled() {
  is_smartlock_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SystemProfileProto_LinkedAndroidPhoneData::is_smartlock_enabled() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.LinkedAndroidPhoneData.is_smartlock_enabled)
  return is_smartlock_enabled_;
}
inline void SystemProfileProto_LinkedAndroidPhoneData::set_is_smartlock_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_smartlock_enabled_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.LinkedAndroidPhoneData.is_smartlock_enabled)
}

// optional bool is_instant_tethering_enabled = 3;
inline bool SystemProfileProto_LinkedAndroidPhoneData::has_is_instant_tethering_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto_LinkedAndroidPhoneData::clear_is_instant_tethering_enabled() {
  is_instant_tethering_enabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SystemProfileProto_LinkedAndroidPhoneData::is_instant_tethering_enabled() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.LinkedAndroidPhoneData.is_instant_tethering_enabled)
  return is_instant_tethering_enabled_;
}
inline void SystemProfileProto_LinkedAndroidPhoneData::set_is_instant_tethering_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_instant_tethering_enabled_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.LinkedAndroidPhoneData.is_instant_tethering_enabled)
}

// optional bool is_messages_enabled = 4;
inline bool SystemProfileProto_LinkedAndroidPhoneData::has_is_messages_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto_LinkedAndroidPhoneData::clear_is_messages_enabled() {
  is_messages_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SystemProfileProto_LinkedAndroidPhoneData::is_messages_enabled() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.LinkedAndroidPhoneData.is_messages_enabled)
  return is_messages_enabled_;
}
inline void SystemProfileProto_LinkedAndroidPhoneData::set_is_messages_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_messages_enabled_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.LinkedAndroidPhoneData.is_messages_enabled)
}

// -------------------------------------------------------------------

// SystemProfileProto

// optional int64 build_timestamp = 1;
inline bool SystemProfileProto::has_build_timestamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SystemProfileProto::clear_build_timestamp() {
  build_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProfileProto::build_timestamp() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.build_timestamp)
  return build_timestamp_;
}
inline void SystemProfileProto::set_build_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  build_timestamp_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.build_timestamp)
}

// optional string app_version = 2;
inline bool SystemProfileProto::has_app_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProfileProto::clear_app_version() {
  app_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProfileProto::app_version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.app_version)
  return app_version_.GetNoArena();
}
inline void SystemProfileProto::set_app_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.app_version)
}
inline void SystemProfileProto::set_app_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  app_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.app_version)
}
inline void SystemProfileProto::set_app_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  app_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.app_version)
}
inline void SystemProfileProto::set_app_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  app_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.app_version)
}
inline std::string* SystemProfileProto::mutable_app_version() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.app_version)
  return app_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto::release_app_version() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.app_version)
  if (!has_app_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return app_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto::set_allocated_app_version(std::string* app_version) {
  if (app_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.app_version)
}

// optional string brand_code = 12;
inline bool SystemProfileProto::has_brand_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProfileProto::clear_brand_code() {
  brand_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SystemProfileProto::brand_code() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.brand_code)
  return brand_code_.GetNoArena();
}
inline void SystemProfileProto::set_brand_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  brand_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.brand_code)
}
inline void SystemProfileProto::set_brand_code(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  brand_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.brand_code)
}
inline void SystemProfileProto::set_brand_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  brand_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.brand_code)
}
inline void SystemProfileProto::set_brand_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  brand_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.brand_code)
}
inline std::string* SystemProfileProto::mutable_brand_code() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.brand_code)
  return brand_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto::release_brand_code() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.brand_code)
  if (!has_brand_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return brand_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto::set_allocated_brand_code(std::string* brand_code) {
  if (brand_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  brand_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand_code);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.brand_code)
}

// optional .metrics.SystemProfileProto.Channel channel = 10;
inline bool SystemProfileProto::has_channel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SystemProfileProto::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::metrics::SystemProfileProto_Channel SystemProfileProto::channel() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.channel)
  return static_cast< ::metrics::SystemProfileProto_Channel >(channel_);
}
inline void SystemProfileProto::set_channel(::metrics::SystemProfileProto_Channel value) {
  assert(::metrics::SystemProfileProto_Channel_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  channel_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.channel)
}

// optional bool is_instrumented_build = 20 [default = false];
inline bool SystemProfileProto::has_is_instrumented_build() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SystemProfileProto::clear_is_instrumented_build() {
  is_instrumented_build_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool SystemProfileProto::is_instrumented_build() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.is_instrumented_build)
  return is_instrumented_build_;
}
inline void SystemProfileProto::set_is_instrumented_build(bool value) {
  _has_bits_[0] |= 0x00040000u;
  is_instrumented_build_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.is_instrumented_build)
}

// optional int64 uma_enabled_date = 3;
inline bool SystemProfileProto::has_uma_enabled_date() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SystemProfileProto::clear_uma_enabled_date() {
  uma_enabled_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProfileProto::uma_enabled_date() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.uma_enabled_date)
  return uma_enabled_date_;
}
inline void SystemProfileProto::set_uma_enabled_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  uma_enabled_date_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.uma_enabled_date)
}

// optional int64 install_date = 16;
inline bool SystemProfileProto::has_install_date() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SystemProfileProto::clear_install_date() {
  install_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProfileProto::install_date() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.install_date)
  return install_date_;
}
inline void SystemProfileProto::set_install_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  install_date_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.install_date)
}

// optional int32 low_entropy_source = 31;
inline bool SystemProfileProto::has_low_entropy_source() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SystemProfileProto::clear_low_entropy_source() {
  low_entropy_source_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto::low_entropy_source() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.low_entropy_source)
  return low_entropy_source_;
}
inline void SystemProfileProto::set_low_entropy_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  low_entropy_source_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.low_entropy_source)
}

// optional int32 old_low_entropy_source = 32;
inline bool SystemProfileProto::has_old_low_entropy_source() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SystemProfileProto::clear_old_low_entropy_source() {
  old_low_entropy_source_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto::old_low_entropy_source() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.old_low_entropy_source)
  return old_low_entropy_source_;
}
inline void SystemProfileProto::set_old_low_entropy_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  old_low_entropy_source_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.old_low_entropy_source)
}

// optional string application_locale = 4;
inline bool SystemProfileProto::has_application_locale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProfileProto::clear_application_locale() {
  application_locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemProfileProto::application_locale() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.application_locale)
  return application_locale_.GetNoArena();
}
inline void SystemProfileProto::set_application_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  application_locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.application_locale)
}
inline void SystemProfileProto::set_application_locale(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  application_locale_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.application_locale)
}
inline void SystemProfileProto::set_application_locale(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  application_locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.application_locale)
}
inline void SystemProfileProto::set_application_locale(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  application_locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.application_locale)
}
inline std::string* SystemProfileProto::mutable_application_locale() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.application_locale)
  return application_locale_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto::release_application_locale() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.application_locale)
  if (!has_application_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return application_locale_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto::set_allocated_application_locale(std::string* application_locale) {
  if (application_locale != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  application_locale_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_locale);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.application_locale)
}

// optional .metrics.SystemProfileProto.OS os = 5;
inline bool SystemProfileProto::has_os() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProfileProto::clear_os() {
  if (os_ != nullptr) os_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::metrics::SystemProfileProto_OS& SystemProfileProto::os() const {
  const ::metrics::SystemProfileProto_OS* p = os_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.os)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_OS*>(
      &::metrics::_SystemProfileProto_OS_default_instance_);
}
inline ::metrics::SystemProfileProto_OS* SystemProfileProto::release_os() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.os)
  _has_bits_[0] &= ~0x00000020u;
  ::metrics::SystemProfileProto_OS* temp = os_;
  os_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_OS* SystemProfileProto::mutable_os() {
  _has_bits_[0] |= 0x00000020u;
  if (os_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_OS>(GetArenaNoVirtual());
    os_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.os)
  return os_;
}
inline void SystemProfileProto::set_allocated_os(::metrics::SystemProfileProto_OS* os) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete os_;
  }
  if (os) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      os = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, os, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  os_ = os;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.os)
}

// optional .metrics.SystemProfileProto.Hardware hardware = 6;
inline bool SystemProfileProto::has_hardware() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProfileProto::clear_hardware() {
  if (hardware_ != nullptr) hardware_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::metrics::SystemProfileProto_Hardware& SystemProfileProto::hardware() const {
  const ::metrics::SystemProfileProto_Hardware* p = hardware_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.hardware)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Hardware*>(
      &::metrics::_SystemProfileProto_Hardware_default_instance_);
}
inline ::metrics::SystemProfileProto_Hardware* SystemProfileProto::release_hardware() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.hardware)
  _has_bits_[0] &= ~0x00000040u;
  ::metrics::SystemProfileProto_Hardware* temp = hardware_;
  hardware_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Hardware* SystemProfileProto::mutable_hardware() {
  _has_bits_[0] |= 0x00000040u;
  if (hardware_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Hardware>(GetArenaNoVirtual());
    hardware_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.hardware)
  return hardware_;
}
inline void SystemProfileProto::set_allocated_hardware(::metrics::SystemProfileProto_Hardware* hardware) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hardware_;
  }
  if (hardware) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hardware = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hardware, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  hardware_ = hardware;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.hardware)
}

// optional .metrics.SystemProfileProto.Network network = 13;
inline bool SystemProfileProto::has_network() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemProfileProto::clear_network() {
  if (network_ != nullptr) network_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::metrics::SystemProfileProto_Network& SystemProfileProto::network() const {
  const ::metrics::SystemProfileProto_Network* p = network_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.network)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Network*>(
      &::metrics::_SystemProfileProto_Network_default_instance_);
}
inline ::metrics::SystemProfileProto_Network* SystemProfileProto::release_network() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.network)
  _has_bits_[0] &= ~0x00000200u;
  ::metrics::SystemProfileProto_Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Network* SystemProfileProto::mutable_network() {
  _has_bits_[0] |= 0x00000200u;
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Network>(GetArenaNoVirtual());
    network_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.network)
  return network_;
}
inline void SystemProfileProto::set_allocated_network(::metrics::SystemProfileProto_Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_;
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.network)
}

// optional .metrics.SystemProfileProto.GoogleUpdate google_update = 11;
inline bool SystemProfileProto::has_google_update() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemProfileProto::clear_google_update() {
  if (google_update_ != nullptr) google_update_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::metrics::SystemProfileProto_GoogleUpdate& SystemProfileProto::google_update() const {
  const ::metrics::SystemProfileProto_GoogleUpdate* p = google_update_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.google_update)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_GoogleUpdate*>(
      &::metrics::_SystemProfileProto_GoogleUpdate_default_instance_);
}
inline ::metrics::SystemProfileProto_GoogleUpdate* SystemProfileProto::release_google_update() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.google_update)
  _has_bits_[0] &= ~0x00000100u;
  ::metrics::SystemProfileProto_GoogleUpdate* temp = google_update_;
  google_update_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_GoogleUpdate* SystemProfileProto::mutable_google_update() {
  _has_bits_[0] |= 0x00000100u;
  if (google_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_GoogleUpdate>(GetArenaNoVirtual());
    google_update_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.google_update)
  return google_update_;
}
inline void SystemProfileProto::set_allocated_google_update(::metrics::SystemProfileProto_GoogleUpdate* google_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete google_update_;
  }
  if (google_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      google_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, google_update, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  google_update_ = google_update;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.google_update)
}

// repeated .metrics.SystemProfileProto.Plugin plugin = 7;
inline int SystemProfileProto::plugin_size() const {
  return plugin_.size();
}
inline void SystemProfileProto::clear_plugin() {
  plugin_.Clear();
}
inline ::metrics::SystemProfileProto_Plugin* SystemProfileProto::mutable_plugin(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.plugin)
  return plugin_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Plugin >*
SystemProfileProto::mutable_plugin() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.plugin)
  return &plugin_;
}
inline const ::metrics::SystemProfileProto_Plugin& SystemProfileProto::plugin(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.plugin)
  return plugin_.Get(index);
}
inline ::metrics::SystemProfileProto_Plugin* SystemProfileProto::add_plugin() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.plugin)
  return plugin_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_Plugin >&
SystemProfileProto::plugin() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.plugin)
  return plugin_;
}

// optional .metrics.SystemProfileProto.Stability stability = 8;
inline bool SystemProfileProto::has_stability() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProfileProto::clear_stability() {
  if (stability_ != nullptr) stability_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::metrics::SystemProfileProto_Stability& SystemProfileProto::stability() const {
  const ::metrics::SystemProfileProto_Stability* p = stability_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.stability)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_Stability*>(
      &::metrics::_SystemProfileProto_Stability_default_instance_);
}
inline ::metrics::SystemProfileProto_Stability* SystemProfileProto::release_stability() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.stability)
  _has_bits_[0] &= ~0x00000080u;
  ::metrics::SystemProfileProto_Stability* temp = stability_;
  stability_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_Stability* SystemProfileProto::mutable_stability() {
  _has_bits_[0] |= 0x00000080u;
  if (stability_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_Stability>(GetArenaNoVirtual());
    stability_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.stability)
  return stability_;
}
inline void SystemProfileProto::set_allocated_stability(::metrics::SystemProfileProto_Stability* stability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stability_;
  }
  if (stability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stability, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  stability_ = stability;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.stability)
}

// repeated .metrics.SystemProfileProto.FieldTrial field_trial = 9;
inline int SystemProfileProto::field_trial_size() const {
  return field_trial_.size();
}
inline void SystemProfileProto::clear_field_trial() {
  field_trial_.Clear();
}
inline ::metrics::SystemProfileProto_FieldTrial* SystemProfileProto::mutable_field_trial(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.field_trial)
  return field_trial_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_FieldTrial >*
SystemProfileProto::mutable_field_trial() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.field_trial)
  return &field_trial_;
}
inline const ::metrics::SystemProfileProto_FieldTrial& SystemProfileProto::field_trial(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.field_trial)
  return field_trial_.Get(index);
}
inline ::metrics::SystemProfileProto_FieldTrial* SystemProfileProto::add_field_trial() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.field_trial)
  return field_trial_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_FieldTrial >&
SystemProfileProto::field_trial() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.field_trial)
  return field_trial_;
}

// optional string variations_seed_version = 28;
inline bool SystemProfileProto::has_variations_seed_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProfileProto::clear_variations_seed_version() {
  variations_seed_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SystemProfileProto::variations_seed_version() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.variations_seed_version)
  return variations_seed_version_.GetNoArena();
}
inline void SystemProfileProto::set_variations_seed_version(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  variations_seed_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.variations_seed_version)
}
inline void SystemProfileProto::set_variations_seed_version(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  variations_seed_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.variations_seed_version)
}
inline void SystemProfileProto::set_variations_seed_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  variations_seed_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.variations_seed_version)
}
inline void SystemProfileProto::set_variations_seed_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  variations_seed_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.variations_seed_version)
}
inline std::string* SystemProfileProto::mutable_variations_seed_version() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.variations_seed_version)
  return variations_seed_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto::release_variations_seed_version() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.variations_seed_version)
  if (!has_variations_seed_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return variations_seed_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto::set_allocated_variations_seed_version(std::string* variations_seed_version) {
  if (variations_seed_version != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  variations_seed_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variations_seed_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.variations_seed_version)
}

// repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice external_audio_video_device = 14;
inline int SystemProfileProto::external_audio_video_device_size() const {
  return external_audio_video_device_.size();
}
inline void SystemProfileProto::clear_external_audio_video_device() {
  external_audio_video_device_.Clear();
}
inline ::metrics::SystemProfileProto_ExternalAudioVideoDevice* SystemProfileProto::mutable_external_audio_video_device(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.external_audio_video_device)
  return external_audio_video_device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice >*
SystemProfileProto::mutable_external_audio_video_device() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.external_audio_video_device)
  return &external_audio_video_device_;
}
inline const ::metrics::SystemProfileProto_ExternalAudioVideoDevice& SystemProfileProto::external_audio_video_device(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.external_audio_video_device)
  return external_audio_video_device_.Get(index);
}
inline ::metrics::SystemProfileProto_ExternalAudioVideoDevice* SystemProfileProto::add_external_audio_video_device() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.external_audio_video_device)
  return external_audio_video_device_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ExternalAudioVideoDevice >&
SystemProfileProto::external_audio_video_device() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.external_audio_video_device)
  return external_audio_video_device_;
}

// optional .metrics.SystemProfileProto.ExternalAccessPoint external_access_point = 15;
inline bool SystemProfileProto::has_external_access_point() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SystemProfileProto::clear_external_access_point() {
  if (external_access_point_ != nullptr) external_access_point_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::metrics::SystemProfileProto_ExternalAccessPoint& SystemProfileProto::external_access_point() const {
  const ::metrics::SystemProfileProto_ExternalAccessPoint* p = external_access_point_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.external_access_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_ExternalAccessPoint*>(
      &::metrics::_SystemProfileProto_ExternalAccessPoint_default_instance_);
}
inline ::metrics::SystemProfileProto_ExternalAccessPoint* SystemProfileProto::release_external_access_point() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.external_access_point)
  _has_bits_[0] &= ~0x00000400u;
  ::metrics::SystemProfileProto_ExternalAccessPoint* temp = external_access_point_;
  external_access_point_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_ExternalAccessPoint* SystemProfileProto::mutable_external_access_point() {
  _has_bits_[0] |= 0x00000400u;
  if (external_access_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_ExternalAccessPoint>(GetArenaNoVirtual());
    external_access_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.external_access_point)
  return external_access_point_;
}
inline void SystemProfileProto::set_allocated_external_access_point(::metrics::SystemProfileProto_ExternalAccessPoint* external_access_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete external_access_point_;
  }
  if (external_access_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      external_access_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_access_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  external_access_point_ = external_access_point;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.external_access_point)
}

// optional uint32 multi_profile_user_count = 17;
inline bool SystemProfileProto::has_multi_profile_user_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SystemProfileProto::clear_multi_profile_user_count() {
  multi_profile_user_count_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemProfileProto::multi_profile_user_count() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.multi_profile_user_count)
  return multi_profile_user_count_;
}
inline void SystemProfileProto::set_multi_profile_user_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  multi_profile_user_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.multi_profile_user_count)
}

// repeated int32 occupied_extension_bucket = 18;
inline int SystemProfileProto::occupied_extension_bucket_size() const {
  return occupied_extension_bucket_.size();
}
inline void SystemProfileProto::clear_occupied_extension_bucket() {
  occupied_extension_bucket_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProfileProto::occupied_extension_bucket(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.occupied_extension_bucket)
  return occupied_extension_bucket_.Get(index);
}
inline void SystemProfileProto::set_occupied_extension_bucket(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  occupied_extension_bucket_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.occupied_extension_bucket)
}
inline void SystemProfileProto::add_occupied_extension_bucket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  occupied_extension_bucket_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.occupied_extension_bucket)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SystemProfileProto::occupied_extension_bucket() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.occupied_extension_bucket)
  return occupied_extension_bucket_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SystemProfileProto::mutable_occupied_extension_bucket() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.occupied_extension_bucket)
  return &occupied_extension_bucket_;
}

// optional .metrics.SystemProfileProto.ExtensionsState offstore_extensions_state = 19;
inline bool SystemProfileProto::has_offstore_extensions_state() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SystemProfileProto::clear_offstore_extensions_state() {
  offstore_extensions_state_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::metrics::SystemProfileProto_ExtensionsState SystemProfileProto::offstore_extensions_state() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.offstore_extensions_state)
  return static_cast< ::metrics::SystemProfileProto_ExtensionsState >(offstore_extensions_state_);
}
inline void SystemProfileProto::set_offstore_extensions_state(::metrics::SystemProfileProto_ExtensionsState value) {
  assert(::metrics::SystemProfileProto_ExtensionsState_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  offstore_extensions_state_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.offstore_extensions_state)
}

// optional .metrics.SystemProfileProto.UmaDefaultState uma_default_state = 22;
inline bool SystemProfileProto::has_uma_default_state() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SystemProfileProto::clear_uma_default_state() {
  uma_default_state_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::metrics::SystemProfileProto_UmaDefaultState SystemProfileProto::uma_default_state() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.uma_default_state)
  return static_cast< ::metrics::SystemProfileProto_UmaDefaultState >(uma_default_state_);
}
inline void SystemProfileProto::set_uma_default_state(::metrics::SystemProfileProto_UmaDefaultState value) {
  assert(::metrics::SystemProfileProto_UmaDefaultState_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  uma_default_state_ = value;
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.uma_default_state)
}

// repeated .metrics.SystemProfileProto.AntiVirusProduct antivirus_product = 23;
inline int SystemProfileProto::antivirus_product_size() const {
  return antivirus_product_.size();
}
inline void SystemProfileProto::clear_antivirus_product() {
  antivirus_product_.Clear();
}
inline ::metrics::SystemProfileProto_AntiVirusProduct* SystemProfileProto::mutable_antivirus_product(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.antivirus_product)
  return antivirus_product_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_AntiVirusProduct >*
SystemProfileProto::mutable_antivirus_product() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.antivirus_product)
  return &antivirus_product_;
}
inline const ::metrics::SystemProfileProto_AntiVirusProduct& SystemProfileProto::antivirus_product(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.antivirus_product)
  return antivirus_product_.Get(index);
}
inline ::metrics::SystemProfileProto_AntiVirusProduct* SystemProfileProto::add_antivirus_product() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.antivirus_product)
  return antivirus_product_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_AntiVirusProduct >&
SystemProfileProto::antivirus_product() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.antivirus_product)
  return antivirus_product_;
}

// repeated .metrics.SystemProfileProto.ChromeComponent chrome_component = 24;
inline int SystemProfileProto::chrome_component_size() const {
  return chrome_component_.size();
}
inline void SystemProfileProto::clear_chrome_component() {
  chrome_component_.Clear();
}
inline ::metrics::SystemProfileProto_ChromeComponent* SystemProfileProto::mutable_chrome_component(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.chrome_component)
  return chrome_component_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ChromeComponent >*
SystemProfileProto::mutable_chrome_component() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.chrome_component)
  return &chrome_component_;
}
inline const ::metrics::SystemProfileProto_ChromeComponent& SystemProfileProto::chrome_component(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.chrome_component)
  return chrome_component_.Get(index);
}
inline ::metrics::SystemProfileProto_ChromeComponent* SystemProfileProto::add_chrome_component() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.chrome_component)
  return chrome_component_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SystemProfileProto_ChromeComponent >&
SystemProfileProto::chrome_component() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.chrome_component)
  return chrome_component_;
}

// repeated .metrics.ExtensionInstallProto extension_install = 25;
inline int SystemProfileProto::extension_install_size() const {
  return extension_install_.size();
}
inline ::metrics::ExtensionInstallProto* SystemProfileProto::mutable_extension_install(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.extension_install)
  return extension_install_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ExtensionInstallProto >*
SystemProfileProto::mutable_extension_install() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.extension_install)
  return &extension_install_;
}
inline const ::metrics::ExtensionInstallProto& SystemProfileProto::extension_install(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.extension_install)
  return extension_install_.Get(index);
}
inline ::metrics::ExtensionInstallProto* SystemProfileProto::add_extension_install() {
  // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.extension_install)
  return extension_install_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ExtensionInstallProto >&
SystemProfileProto::extension_install() const {
  // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.extension_install)
  return extension_install_;
}

// optional string app_package_name = 26;
inline bool SystemProfileProto::has_app_package_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProfileProto::clear_app_package_name() {
  app_package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SystemProfileProto::app_package_name() const {
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.app_package_name)
  return app_package_name_.GetNoArena();
}
inline void SystemProfileProto::set_app_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  app_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.app_package_name)
}
inline void SystemProfileProto::set_app_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  app_package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SystemProfileProto.app_package_name)
}
inline void SystemProfileProto::set_app_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  app_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.app_package_name)
}
inline void SystemProfileProto::set_app_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  app_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.app_package_name)
}
inline std::string* SystemProfileProto::mutable_app_package_name() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.app_package_name)
  return app_package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProfileProto::release_app_package_name() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.app_package_name)
  if (!has_app_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return app_package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProfileProto::set_allocated_app_package_name(std::string* app_package_name) {
  if (app_package_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  app_package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_package_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.app_package_name)
}

// optional .metrics.SystemProfileProto.LinkedAndroidPhoneData linked_android_phone_data = 29;
inline bool SystemProfileProto::has_linked_android_phone_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SystemProfileProto::clear_linked_android_phone_data() {
  if (linked_android_phone_data_ != nullptr) linked_android_phone_data_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::metrics::SystemProfileProto_LinkedAndroidPhoneData& SystemProfileProto::linked_android_phone_data() const {
  const ::metrics::SystemProfileProto_LinkedAndroidPhoneData* p = linked_android_phone_data_;
  // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.linked_android_phone_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto_LinkedAndroidPhoneData*>(
      &::metrics::_SystemProfileProto_LinkedAndroidPhoneData_default_instance_);
}
inline ::metrics::SystemProfileProto_LinkedAndroidPhoneData* SystemProfileProto::release_linked_android_phone_data() {
  // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.linked_android_phone_data)
  _has_bits_[0] &= ~0x00000800u;
  ::metrics::SystemProfileProto_LinkedAndroidPhoneData* temp = linked_android_phone_data_;
  linked_android_phone_data_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto_LinkedAndroidPhoneData* SystemProfileProto::mutable_linked_android_phone_data() {
  _has_bits_[0] |= 0x00000800u;
  if (linked_android_phone_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto_LinkedAndroidPhoneData>(GetArenaNoVirtual());
    linked_android_phone_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.linked_android_phone_data)
  return linked_android_phone_data_;
}
inline void SystemProfileProto::set_allocated_linked_android_phone_data(::metrics::SystemProfileProto_LinkedAndroidPhoneData* linked_android_phone_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linked_android_phone_data_;
  }
  if (linked_android_phone_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linked_android_phone_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linked_android_phone_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  linked_android_phone_data_ = linked_android_phone_data;
  // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.linked_android_phone_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_Hardware_FormFactor> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_Network_ConnectionType> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_Network_EffectiveConnectionType> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_Channel> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_ExtensionsState> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_UmaDefaultState> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_AntiVirusState> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::SystemProfileProto_ComponentId> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_5fprofile_2eproto
