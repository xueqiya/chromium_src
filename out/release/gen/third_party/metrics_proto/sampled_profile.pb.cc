// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sampled_profile.proto

#include "sampled_profile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_call_5fstack_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CallStackProfile_call_5fstack_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perf_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PerfDataProto_perf_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perf_5fstat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfStatProto_perf_5fstat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sampled_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SampledProfile_ProcessTypesEntry_DoNotUse_sampled_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sampled_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SampledProfile_ThreadTypesEntry_DoNotUse_sampled_5fprofile_2eproto;
namespace metrics {
class SampledProfile_ProcessTypesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SampledProfile_ProcessTypesEntry_DoNotUse> _instance;
} _SampledProfile_ProcessTypesEntry_DoNotUse_default_instance_;
class SampledProfile_ThreadTypesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SampledProfile_ThreadTypesEntry_DoNotUse> _instance;
} _SampledProfile_ThreadTypesEntry_DoNotUse_default_instance_;
class SampledProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SampledProfile> _instance;
} _SampledProfile_default_instance_;
}  // namespace metrics
static void InitDefaultsscc_info_SampledProfile_sampled_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SampledProfile_default_instance_;
    new (ptr) ::metrics::SampledProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SampledProfile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SampledProfile_sampled_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_SampledProfile_sampled_5fprofile_2eproto}, {
      &scc_info_SampledProfile_ProcessTypesEntry_DoNotUse_sampled_5fprofile_2eproto.base,
      &scc_info_SampledProfile_ThreadTypesEntry_DoNotUse_sampled_5fprofile_2eproto.base,
      &scc_info_PerfDataProto_perf_5fdata_2eproto.base,
      &scc_info_CallStackProfile_call_5fstack_5fprofile_2eproto.base,
      &scc_info_PerfStatProto_perf_5fstat_2eproto.base,}};

static void InitDefaultsscc_info_SampledProfile_ProcessTypesEntry_DoNotUse_sampled_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SampledProfile_ProcessTypesEntry_DoNotUse_default_instance_;
    new (ptr) ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse();
  }
  ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SampledProfile_ProcessTypesEntry_DoNotUse_sampled_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SampledProfile_ProcessTypesEntry_DoNotUse_sampled_5fprofile_2eproto}, {}};

static void InitDefaultsscc_info_SampledProfile_ThreadTypesEntry_DoNotUse_sampled_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SampledProfile_ThreadTypesEntry_DoNotUse_default_instance_;
    new (ptr) ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse();
  }
  ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SampledProfile_ThreadTypesEntry_DoNotUse_sampled_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SampledProfile_ThreadTypesEntry_DoNotUse_sampled_5fprofile_2eproto}, {}};

namespace metrics {
bool SampledProfile_TriggerEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SampledProfile_TriggerEvent_strings[8] = {};

static const char SampledProfile_TriggerEvent_names[] =
  "JANKY_TASK"
  "PERIODIC_COLLECTION"
  "PERIODIC_HEAP_COLLECTION"
  "PROCESS_STARTUP"
  "RESTORE_SESSION"
  "RESUME_FROM_SUSPEND"
  "THREAD_HUNG"
  "UNKNOWN_TRIGGER_EVENT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SampledProfile_TriggerEvent_entries[] = {
  { {SampledProfile_TriggerEvent_names + 0, 10}, 5 },
  { {SampledProfile_TriggerEvent_names + 10, 19}, 1 },
  { {SampledProfile_TriggerEvent_names + 29, 24}, 7 },
  { {SampledProfile_TriggerEvent_names + 53, 15}, 4 },
  { {SampledProfile_TriggerEvent_names + 68, 15}, 3 },
  { {SampledProfile_TriggerEvent_names + 83, 19}, 2 },
  { {SampledProfile_TriggerEvent_names + 102, 11}, 6 },
  { {SampledProfile_TriggerEvent_names + 113, 21}, 0 },
};

static const int SampledProfile_TriggerEvent_entries_by_number[] = {
  7, // 0 -> UNKNOWN_TRIGGER_EVENT
  1, // 1 -> PERIODIC_COLLECTION
  5, // 2 -> RESUME_FROM_SUSPEND
  4, // 3 -> RESTORE_SESSION
  3, // 4 -> PROCESS_STARTUP
  0, // 5 -> JANKY_TASK
  6, // 6 -> THREAD_HUNG
  2, // 7 -> PERIODIC_HEAP_COLLECTION
};

const std::string& SampledProfile_TriggerEvent_Name(
    SampledProfile_TriggerEvent value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SampledProfile_TriggerEvent_entries,
          SampledProfile_TriggerEvent_entries_by_number,
          8, SampledProfile_TriggerEvent_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SampledProfile_TriggerEvent_entries,
      SampledProfile_TriggerEvent_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SampledProfile_TriggerEvent_strings[idx].get();
}
bool SampledProfile_TriggerEvent_Parse(
    const std::string& name, SampledProfile_TriggerEvent* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SampledProfile_TriggerEvent_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<SampledProfile_TriggerEvent>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SampledProfile_TriggerEvent SampledProfile::UNKNOWN_TRIGGER_EVENT;
constexpr SampledProfile_TriggerEvent SampledProfile::PERIODIC_COLLECTION;
constexpr SampledProfile_TriggerEvent SampledProfile::RESUME_FROM_SUSPEND;
constexpr SampledProfile_TriggerEvent SampledProfile::RESTORE_SESSION;
constexpr SampledProfile_TriggerEvent SampledProfile::PROCESS_STARTUP;
constexpr SampledProfile_TriggerEvent SampledProfile::JANKY_TASK;
constexpr SampledProfile_TriggerEvent SampledProfile::THREAD_HUNG;
constexpr SampledProfile_TriggerEvent SampledProfile::PERIODIC_HEAP_COLLECTION;
constexpr SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MIN;
constexpr SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MAX;
constexpr int SampledProfile::TriggerEvent_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

SampledProfile_ProcessTypesEntry_DoNotUse::SampledProfile_ProcessTypesEntry_DoNotUse() {}
SampledProfile_ProcessTypesEntry_DoNotUse::SampledProfile_ProcessTypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SampledProfile_ProcessTypesEntry_DoNotUse::MergeFrom(const SampledProfile_ProcessTypesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

SampledProfile_ThreadTypesEntry_DoNotUse::SampledProfile_ThreadTypesEntry_DoNotUse() {}
SampledProfile_ThreadTypesEntry_DoNotUse::SampledProfile_ThreadTypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SampledProfile_ThreadTypesEntry_DoNotUse::MergeFrom(const SampledProfile_ThreadTypesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void SampledProfile::InitAsDefaultInstance() {
  ::metrics::_SampledProfile_default_instance_._instance.get_mutable()->perf_data_ = const_cast< ::metrics::PerfDataProto*>(
      ::metrics::PerfDataProto::internal_default_instance());
  ::metrics::_SampledProfile_default_instance_._instance.get_mutable()->call_stack_profile_ = const_cast< ::metrics::CallStackProfile*>(
      ::metrics::CallStackProfile::internal_default_instance());
  ::metrics::_SampledProfile_default_instance_._instance.get_mutable()->perf_stat_ = const_cast< ::metrics::PerfStatProto*>(
      ::metrics::PerfStatProto::internal_default_instance());
}
class SampledProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<SampledProfile>()._has_bits_);
  static void set_has_trigger_event(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ms_after_boot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ms_after_login(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_suspend_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ms_after_resume(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_tabs_restored(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ms_after_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::metrics::PerfDataProto& perf_data(const SampledProfile* msg);
  static void set_has_perf_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::metrics::CallStackProfile& call_stack_profile(const SampledProfile* msg);
  static void set_has_call_stack_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::metrics::PerfStatProto& perf_stat(const SampledProfile* msg);
  static void set_has_perf_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::metrics::PerfDataProto&
SampledProfile::_Internal::perf_data(const SampledProfile* msg) {
  return *msg->perf_data_;
}
const ::metrics::CallStackProfile&
SampledProfile::_Internal::call_stack_profile(const SampledProfile* msg) {
  return *msg->call_stack_profile_;
}
const ::metrics::PerfStatProto&
SampledProfile::_Internal::perf_stat(const SampledProfile* msg) {
  return *msg->perf_stat_;
}
void SampledProfile::clear_perf_data() {
  if (perf_data_ != nullptr) perf_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SampledProfile::clear_call_stack_profile() {
  if (call_stack_profile_ != nullptr) call_stack_profile_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SampledProfile::clear_perf_stat() {
  if (perf_stat_ != nullptr) perf_stat_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SampledProfile::SampledProfile()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SampledProfile)
}
SampledProfile::SampledProfile(const SampledProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cpu_max_frequency_mhz_(from.cpu_max_frequency_mhz_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_types_.MergeFrom(from.process_types_);
  thread_types_.MergeFrom(from.thread_types_);
  if (from.has_perf_data()) {
    perf_data_ = new ::metrics::PerfDataProto(*from.perf_data_);
  } else {
    perf_data_ = nullptr;
  }
  if (from.has_call_stack_profile()) {
    call_stack_profile_ = new ::metrics::CallStackProfile(*from.call_stack_profile_);
  } else {
    call_stack_profile_ = nullptr;
  }
  if (from.has_perf_stat()) {
    perf_stat_ = new ::metrics::PerfStatProto(*from.perf_stat_);
  } else {
    perf_stat_ = nullptr;
  }
  ::memcpy(&ms_after_boot_, &from.ms_after_boot_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_) -
    reinterpret_cast<char*>(&ms_after_boot_)) + sizeof(thread_));
  // @@protoc_insertion_point(copy_constructor:metrics.SampledProfile)
}

void SampledProfile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SampledProfile_sampled_5fprofile_2eproto.base);
  ::memset(&perf_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_) -
      reinterpret_cast<char*>(&perf_data_)) + sizeof(thread_));
}

SampledProfile::~SampledProfile() {
  // @@protoc_insertion_point(destructor:metrics.SampledProfile)
  SharedDtor();
}

void SampledProfile::SharedDtor() {
  if (this != internal_default_instance()) delete perf_data_;
  if (this != internal_default_instance()) delete call_stack_profile_;
  if (this != internal_default_instance()) delete perf_stat_;
}

void SampledProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SampledProfile& SampledProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SampledProfile_sampled_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void SampledProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SampledProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_types_.Clear();
  thread_types_.Clear();
  cpu_max_frequency_mhz_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(perf_data_ != nullptr);
      perf_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(call_stack_profile_ != nullptr);
      call_stack_profile_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(perf_stat_ != nullptr);
      perf_stat_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&ms_after_boot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suspend_duration_ms_) -
        reinterpret_cast<char*>(&ms_after_boot_)) + sizeof(suspend_duration_ms_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&ms_after_resume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thread_) -
        reinterpret_cast<char*>(&ms_after_resume_)) + sizeof(thread_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SampledProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::SampledProfile_TriggerEvent_IsValid(val))) {
            set_trigger_event(static_cast<::metrics::SampledProfile_TriggerEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 ms_after_boot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ms_after_boot(&has_bits);
          ms_after_boot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ms_after_login = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ms_after_login(&has_bits);
          ms_after_login_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.PerfDataProto perf_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_perf_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 suspend_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_suspend_duration_ms(&has_bits);
          suspend_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ms_after_resume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ms_after_resume(&has_bits);
          ms_after_resume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_tabs_restored = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_tabs_restored(&has_bits);
          num_tabs_restored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ms_after_restore = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ms_after_restore(&has_bits);
          ms_after_restore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.CallStackProfile call_stack_profile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_call_stack_profile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.PerfStatProto perf_stat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_perf_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.Process process = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::Process_IsValid(val))) {
            set_process(static_cast<::metrics::Process>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .metrics.Thread thread = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::Thread_IsValid(val))) {
            set_thread(static_cast<::metrics::Thread>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // map<uint32, .metrics.Process> process_types = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper(&process_types_, ::metrics::Process_IsValid, 13, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // map<uint32, .metrics.Thread> thread_types = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper(&thread_types_, ::metrics::Thread_IsValid, 14, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // repeated uint32 cpu_max_frequency_mhz = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_cpu_max_frequency_mhz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 120);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_cpu_max_frequency_mhz(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SampledProfile::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SampledProfile)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SampledProfile_TriggerEvent_IsValid(value)) {
            set_trigger_event(static_cast< ::metrics::SampledProfile_TriggerEvent >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_boot = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ms_after_boot(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_boot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_login = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ms_after_login(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_login_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto perf_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_perf_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 suspend_duration_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_suspend_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &suspend_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_resume = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_ms_after_resume(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_resume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_tabs_restored = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_num_tabs_restored(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tabs_restored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_restore = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_ms_after_restore(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_restore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CallStackProfile call_stack_profile = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_call_stack_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfStatProto perf_stat = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_perf_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.Process process = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::Process_IsValid(value)) {
            set_process(static_cast< ::metrics::Process >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.Thread thread = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::Thread_IsValid(value)) {
            set_thread(static_cast< ::metrics::Thread >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .metrics.Process> process_types = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          SampledProfile_ProcessTypesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              SampledProfile_ProcessTypesEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Process,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Process > > parser(&process_types_);
          auto entry = parser.NewEntry();
          std::string data;
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(input, &data));
          DO_(entry->ParseFromString(data));
          if (::metrics::Process_IsValid(*entry->mutable_value())) {
            (*mutable_process_types())[entry->key()] =
                static_cast< ::metrics::Process >(*entry->mutable_value());
          } else {
            unknown_fields_stream.WriteVarint32(106u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(data.size()));
            unknown_fields_stream.WriteString(data);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .metrics.Thread> thread_types = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          SampledProfile_ThreadTypesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              SampledProfile_ThreadTypesEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Thread,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Thread > > parser(&thread_types_);
          auto entry = parser.NewEntry();
          std::string data;
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(input, &data));
          DO_(entry->ParseFromString(data));
          if (::metrics::Thread_IsValid(*entry->mutable_value())) {
            (*mutable_thread_types())[entry->key()] =
                static_cast< ::metrics::Thread >(*entry->mutable_value());
          } else {
            unknown_fields_stream.WriteVarint32(114u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(data.size()));
            unknown_fields_stream.WriteString(data);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cpu_max_frequency_mhz = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120u, input, this->mutable_cpu_max_frequency_mhz())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cpu_max_frequency_mhz())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SampledProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SampledProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SampledProfile::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SampledProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->trigger_event(), output);
  }

  // optional int64 ms_after_boot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->ms_after_boot(), output);
  }

  // optional int64 ms_after_login = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->ms_after_login(), output);
  }

  // optional .metrics.PerfDataProto perf_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::perf_data(this), output);
  }

  // optional int64 suspend_duration_ms = 5;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->suspend_duration_ms(), output);
  }

  // optional int64 ms_after_resume = 6;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->ms_after_resume(), output);
  }

  // optional int32 num_tabs_restored = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->num_tabs_restored(), output);
  }

  // optional int64 ms_after_restore = 8;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->ms_after_restore(), output);
  }

  // optional .metrics.CallStackProfile call_stack_profile = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::call_stack_profile(this), output);
  }

  // optional .metrics.PerfStatProto perf_stat = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::perf_stat(this), output);
  }

  // optional .metrics.Process process = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->process(), output);
  }

  // optional .metrics.Thread thread = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->thread(), output);
  }

  // map<uint32, .metrics.Process> process_types = 13;
  if (!this->process_types().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Process >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->process_types().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->process_types().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Process >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Process >::const_iterator
          it = this->process_types().begin();
          it != this->process_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SampledProfile_ProcessTypesEntry_DoNotUse::Funcs::SerializeToCodedStream(13, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Process >::const_iterator
          it = this->process_types().begin();
          it != this->process_types().end(); ++it) {
        SampledProfile_ProcessTypesEntry_DoNotUse::Funcs::SerializeToCodedStream(13, it->first, it->second, output);
      }
    }
  }

  // map<uint32, .metrics.Thread> thread_types = 14;
  if (!this->thread_types().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Thread >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->thread_types().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->thread_types().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Thread >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Thread >::const_iterator
          it = this->thread_types().begin();
          it != this->thread_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SampledProfile_ThreadTypesEntry_DoNotUse::Funcs::SerializeToCodedStream(14, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Thread >::const_iterator
          it = this->thread_types().begin();
          it != this->thread_types().end(); ++it) {
        SampledProfile_ThreadTypesEntry_DoNotUse::Funcs::SerializeToCodedStream(14, it->first, it->second, output);
      }
    }
  }

  // repeated uint32 cpu_max_frequency_mhz = 15;
  for (int i = 0, n = this->cpu_max_frequency_mhz_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      15, this->cpu_max_frequency_mhz(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SampledProfile)
}

size_t SampledProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SampledProfile)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .metrics.Process> process_types = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->process_types_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Process >::const_iterator
      it = this->process_types().begin();
      it != this->process_types().end(); ++it) {
    total_size += SampledProfile_ProcessTypesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .metrics.Thread> thread_types = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->thread_types_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::metrics::Thread >::const_iterator
      it = this->thread_types().begin();
      it != this->thread_types().end(); ++it) {
    total_size += SampledProfile_ThreadTypesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint32 cpu_max_frequency_mhz = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cpu_max_frequency_mhz_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->cpu_max_frequency_mhz_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .metrics.PerfDataProto perf_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perf_data_);
    }

    // optional .metrics.CallStackProfile call_stack_profile = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *call_stack_profile_);
    }

    // optional .metrics.PerfStatProto perf_stat = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perf_stat_);
    }

    // optional int64 ms_after_boot = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ms_after_boot());
    }

    // optional int64 ms_after_login = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ms_after_login());
    }

    // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trigger_event());
    }

    // optional int32 num_tabs_restored = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_tabs_restored());
    }

    // optional int64 suspend_duration_ms = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->suspend_duration_ms());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int64 ms_after_resume = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ms_after_resume());
    }

    // optional int64 ms_after_restore = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ms_after_restore());
    }

    // optional .metrics.Process process = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->process());
    }

    // optional .metrics.Thread thread = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->thread());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SampledProfile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SampledProfile*>(
      &from));
}

void SampledProfile::MergeFrom(const SampledProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SampledProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  process_types_.MergeFrom(from.process_types_);
  thread_types_.MergeFrom(from.thread_types_);
  cpu_max_frequency_mhz_.MergeFrom(from.cpu_max_frequency_mhz_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_perf_data()->::metrics::PerfDataProto::MergeFrom(from.perf_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_call_stack_profile()->::metrics::CallStackProfile::MergeFrom(from.call_stack_profile());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_perf_stat()->::metrics::PerfStatProto::MergeFrom(from.perf_stat());
    }
    if (cached_has_bits & 0x00000008u) {
      ms_after_boot_ = from.ms_after_boot_;
    }
    if (cached_has_bits & 0x00000010u) {
      ms_after_login_ = from.ms_after_login_;
    }
    if (cached_has_bits & 0x00000020u) {
      trigger_event_ = from.trigger_event_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_tabs_restored_ = from.num_tabs_restored_;
    }
    if (cached_has_bits & 0x00000080u) {
      suspend_duration_ms_ = from.suspend_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ms_after_resume_ = from.ms_after_resume_;
    }
    if (cached_has_bits & 0x00000200u) {
      ms_after_restore_ = from.ms_after_restore_;
    }
    if (cached_has_bits & 0x00000400u) {
      process_ = from.process_;
    }
    if (cached_has_bits & 0x00000800u) {
      thread_ = from.thread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SampledProfile::CopyFrom(const SampledProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SampledProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampledProfile::IsInitialized() const {
  return true;
}

void SampledProfile::InternalSwap(SampledProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  process_types_.Swap(&other->process_types_);
  thread_types_.Swap(&other->thread_types_);
  cpu_max_frequency_mhz_.InternalSwap(&other->cpu_max_frequency_mhz_);
  swap(perf_data_, other->perf_data_);
  swap(call_stack_profile_, other->call_stack_profile_);
  swap(perf_stat_, other->perf_stat_);
  swap(ms_after_boot_, other->ms_after_boot_);
  swap(ms_after_login_, other->ms_after_login_);
  swap(trigger_event_, other->trigger_event_);
  swap(num_tabs_restored_, other->num_tabs_restored_);
  swap(suspend_duration_ms_, other->suspend_duration_ms_);
  swap(ms_after_resume_, other->ms_after_resume_);
  swap(ms_after_restore_, other->ms_after_restore_);
  swap(process_, other->process_);
  swap(thread_, other->thread_);
}

std::string SampledProfile::GetTypeName() const {
  return "metrics.SampledProfile";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::SampledProfile* Arena::CreateMaybeMessage< ::metrics::SampledProfile >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SampledProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
