// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: omnibox_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_omnibox_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_omnibox_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "omnibox_input_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_omnibox_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_omnibox_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace metrics {
class OmniboxEventProto;
class OmniboxEventProtoDefaultTypeInternal;
extern OmniboxEventProtoDefaultTypeInternal _OmniboxEventProto_default_instance_;
class OmniboxEventProto_ProviderInfo;
class OmniboxEventProto_ProviderInfoDefaultTypeInternal;
extern OmniboxEventProto_ProviderInfoDefaultTypeInternal _OmniboxEventProto_ProviderInfo_default_instance_;
class OmniboxEventProto_Suggestion;
class OmniboxEventProto_SuggestionDefaultTypeInternal;
extern OmniboxEventProto_SuggestionDefaultTypeInternal _OmniboxEventProto_Suggestion_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::OmniboxEventProto* Arena::CreateMaybeMessage<::metrics::OmniboxEventProto>(Arena*);
template<> ::metrics::OmniboxEventProto_ProviderInfo* Arena::CreateMaybeMessage<::metrics::OmniboxEventProto_ProviderInfo>(Arena*);
template<> ::metrics::OmniboxEventProto_Suggestion* Arena::CreateMaybeMessage<::metrics::OmniboxEventProto_Suggestion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum OmniboxEventProto_Suggestion_ResultType : int {
  OmniboxEventProto_Suggestion_ResultType_UNKNOWN_RESULT_TYPE = 0,
  OmniboxEventProto_Suggestion_ResultType_URL_WHAT_YOU_TYPED = 1,
  OmniboxEventProto_Suggestion_ResultType_HISTORY_URL = 2,
  OmniboxEventProto_Suggestion_ResultType_HISTORY_TITLE = 3,
  OmniboxEventProto_Suggestion_ResultType_HISTORY_BODY = 4,
  OmniboxEventProto_Suggestion_ResultType_HISTORY_KEYWORD = 5,
  OmniboxEventProto_Suggestion_ResultType_NAVSUGGEST = 6,
  OmniboxEventProto_Suggestion_ResultType_SEARCH_WHAT_YOU_TYPED = 7,
  OmniboxEventProto_Suggestion_ResultType_SEARCH_HISTORY = 8,
  OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST = 9,
  OmniboxEventProto_Suggestion_ResultType_SEARCH_OTHER_ENGINE = 10,
  OmniboxEventProto_Suggestion_ResultType_EXTENSION_APP = 11,
  OmniboxEventProto_Suggestion_ResultType_CONTACT = 12,
  OmniboxEventProto_Suggestion_ResultType_BOOKMARK_TITLE = 13,
  OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST_ENTITY = 14,
  OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST_TAIL = 15,
  OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST_PERSONALIZED = 16,
  OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST_PROFILE = 17,
  OmniboxEventProto_Suggestion_ResultType_APP_RESULT = 18,
  OmniboxEventProto_Suggestion_ResultType_APP = 19,
  OmniboxEventProto_Suggestion_ResultType_LEGACY_ON_DEVICE = 20,
  OmniboxEventProto_Suggestion_ResultType_NAVSUGGEST_PERSONALIZED = 21,
  OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST_ANSWER = 22,
  OmniboxEventProto_Suggestion_ResultType_CALCULATOR = 23,
  OmniboxEventProto_Suggestion_ResultType_CLIPBOARD_URL = 24,
  OmniboxEventProto_Suggestion_ResultType_PHYSICAL_WEB = 25,
  OmniboxEventProto_Suggestion_ResultType_PHYSICAL_WEB_OVERFLOW = 26,
  OmniboxEventProto_Suggestion_ResultType_DOCUMENT = 27,
  OmniboxEventProto_Suggestion_ResultType_CLIPBOARD_TEXT = 28,
  OmniboxEventProto_Suggestion_ResultType_CLIPBOARD_IMAGE = 29
};
bool OmniboxEventProto_Suggestion_ResultType_IsValid(int value);
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion_ResultType_ResultType_MIN = OmniboxEventProto_Suggestion_ResultType_UNKNOWN_RESULT_TYPE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion_ResultType_ResultType_MAX = OmniboxEventProto_Suggestion_ResultType_CLIPBOARD_IMAGE;
constexpr int OmniboxEventProto_Suggestion_ResultType_ResultType_ARRAYSIZE = OmniboxEventProto_Suggestion_ResultType_ResultType_MAX + 1;

const std::string& OmniboxEventProto_Suggestion_ResultType_Name(OmniboxEventProto_Suggestion_ResultType value);
template<typename T>
inline const std::string& OmniboxEventProto_Suggestion_ResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OmniboxEventProto_Suggestion_ResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OmniboxEventProto_Suggestion_ResultType_Name.");
  return OmniboxEventProto_Suggestion_ResultType_Name(static_cast<OmniboxEventProto_Suggestion_ResultType>(enum_t_value));
}
bool OmniboxEventProto_Suggestion_ResultType_Parse(
    const std::string& name, OmniboxEventProto_Suggestion_ResultType* value);
enum OmniboxEventProto_PageClassification : int {
  OmniboxEventProto_PageClassification_INVALID_SPEC = 0,
  OmniboxEventProto_PageClassification_NTP = 1,
  OmniboxEventProto_PageClassification_BLANK = 2,
  OmniboxEventProto_PageClassification_HOME_PAGE = 3,
  OmniboxEventProto_PageClassification_OTHER = 4,
  OmniboxEventProto_PageClassification_OBSOLETE_INSTANT_NTP = 5,
  OmniboxEventProto_PageClassification_SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT = 6,
  OmniboxEventProto_PageClassification_INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS = 7,
  OmniboxEventProto_PageClassification_INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS = 8,
  OmniboxEventProto_PageClassification_SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT = 9,
  OmniboxEventProto_PageClassification_APP_HOME = 10,
  OmniboxEventProto_PageClassification_APP_SEARCH = 11,
  OmniboxEventProto_PageClassification_APP_MAPS = 12,
  OmniboxEventProto_PageClassification_SEARCH_BUTTON_AS_STARTING_FOCUS = 13,
  OmniboxEventProto_PageClassification_CHROMEOS_APP_LIST = 14,
  OmniboxEventProto_PageClassification_NTP_REALBOX = 15
};
bool OmniboxEventProto_PageClassification_IsValid(int value);
constexpr OmniboxEventProto_PageClassification OmniboxEventProto_PageClassification_PageClassification_MIN = OmniboxEventProto_PageClassification_INVALID_SPEC;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto_PageClassification_PageClassification_MAX = OmniboxEventProto_PageClassification_NTP_REALBOX;
constexpr int OmniboxEventProto_PageClassification_PageClassification_ARRAYSIZE = OmniboxEventProto_PageClassification_PageClassification_MAX + 1;

const std::string& OmniboxEventProto_PageClassification_Name(OmniboxEventProto_PageClassification value);
template<typename T>
inline const std::string& OmniboxEventProto_PageClassification_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OmniboxEventProto_PageClassification>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OmniboxEventProto_PageClassification_Name.");
  return OmniboxEventProto_PageClassification_Name(static_cast<OmniboxEventProto_PageClassification>(enum_t_value));
}
bool OmniboxEventProto_PageClassification_Parse(
    const std::string& name, OmniboxEventProto_PageClassification* value);
enum OmniboxEventProto_ModeType : int {
  OmniboxEventProto_ModeType_UNKNOWN_MODE = 0,
  OmniboxEventProto_ModeType_WEB_MODE = 1,
  OmniboxEventProto_ModeType_IMAGE_MODE = 2
};
bool OmniboxEventProto_ModeType_IsValid(int value);
constexpr OmniboxEventProto_ModeType OmniboxEventProto_ModeType_ModeType_MIN = OmniboxEventProto_ModeType_UNKNOWN_MODE;
constexpr OmniboxEventProto_ModeType OmniboxEventProto_ModeType_ModeType_MAX = OmniboxEventProto_ModeType_IMAGE_MODE;
constexpr int OmniboxEventProto_ModeType_ModeType_ARRAYSIZE = OmniboxEventProto_ModeType_ModeType_MAX + 1;

const std::string& OmniboxEventProto_ModeType_Name(OmniboxEventProto_ModeType value);
template<typename T>
inline const std::string& OmniboxEventProto_ModeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OmniboxEventProto_ModeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OmniboxEventProto_ModeType_Name.");
  return OmniboxEventProto_ModeType_Name(static_cast<OmniboxEventProto_ModeType>(enum_t_value));
}
bool OmniboxEventProto_ModeType_Parse(
    const std::string& name, OmniboxEventProto_ModeType* value);
enum OmniboxEventProto_ProviderType : int {
  OmniboxEventProto_ProviderType_UNKNOWN_PROVIDER = 0,
  OmniboxEventProto_ProviderType_HISTORY_URL = 1,
  OmniboxEventProto_ProviderType_HISTORY_CONTENTS = 2,
  OmniboxEventProto_ProviderType_HISTORY_QUICK = 3,
  OmniboxEventProto_ProviderType_SEARCH = 4,
  OmniboxEventProto_ProviderType_KEYWORD = 5,
  OmniboxEventProto_ProviderType_BUILTIN = 6,
  OmniboxEventProto_ProviderType_SHORTCUTS = 7,
  OmniboxEventProto_ProviderType_EXTENSION_APPS = 8,
  OmniboxEventProto_ProviderType_CONTACT = 9,
  OmniboxEventProto_ProviderType_BOOKMARK = 10,
  OmniboxEventProto_ProviderType_ZERO_SUGGEST = 11,
  OmniboxEventProto_ProviderType_ON_DEVICE = 12,
  OmniboxEventProto_ProviderType_ON_DEVICE_CHROME = 13,
  OmniboxEventProto_ProviderType_CLIPBOARD = 14,
  OmniboxEventProto_ProviderType_PHYSICAL_WEB = 15,
  OmniboxEventProto_ProviderType_DOCUMENT = 16,
  OmniboxEventProto_ProviderType_ON_DEVICE_HEAD = 17,
  OmniboxEventProto_ProviderType_ZERO_SUGGEST_LOCAL_HISTORY = 18
};
bool OmniboxEventProto_ProviderType_IsValid(int value);
constexpr OmniboxEventProto_ProviderType OmniboxEventProto_ProviderType_ProviderType_MIN = OmniboxEventProto_ProviderType_UNKNOWN_PROVIDER;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto_ProviderType_ProviderType_MAX = OmniboxEventProto_ProviderType_ZERO_SUGGEST_LOCAL_HISTORY;
constexpr int OmniboxEventProto_ProviderType_ProviderType_ARRAYSIZE = OmniboxEventProto_ProviderType_ProviderType_MAX + 1;

const std::string& OmniboxEventProto_ProviderType_Name(OmniboxEventProto_ProviderType value);
template<typename T>
inline const std::string& OmniboxEventProto_ProviderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OmniboxEventProto_ProviderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OmniboxEventProto_ProviderType_Name.");
  return OmniboxEventProto_ProviderType_Name(static_cast<OmniboxEventProto_ProviderType>(enum_t_value));
}
bool OmniboxEventProto_ProviderType_Parse(
    const std::string& name, OmniboxEventProto_ProviderType* value);
enum OmniboxEventProto_KeywordModeEntryMethod : int {
  OmniboxEventProto_KeywordModeEntryMethod_INVALID = 0,
  OmniboxEventProto_KeywordModeEntryMethod_TAB = 1,
  OmniboxEventProto_KeywordModeEntryMethod_SPACE_AT_END = 2,
  OmniboxEventProto_KeywordModeEntryMethod_SPACE_IN_MIDDLE = 3,
  OmniboxEventProto_KeywordModeEntryMethod_KEYBOARD_SHORTCUT = 4,
  OmniboxEventProto_KeywordModeEntryMethod_QUESTION_MARK = 5,
  OmniboxEventProto_KeywordModeEntryMethod_CLICK_HINT_VIEW = 6,
  OmniboxEventProto_KeywordModeEntryMethod_TAP_HINT_VIEW = 7,
  OmniboxEventProto_KeywordModeEntryMethod_SELECT_SUGGESTION = 8
};
bool OmniboxEventProto_KeywordModeEntryMethod_IsValid(int value);
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto_KeywordModeEntryMethod_KeywordModeEntryMethod_MIN = OmniboxEventProto_KeywordModeEntryMethod_INVALID;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto_KeywordModeEntryMethod_KeywordModeEntryMethod_MAX = OmniboxEventProto_KeywordModeEntryMethod_SELECT_SUGGESTION;
constexpr int OmniboxEventProto_KeywordModeEntryMethod_KeywordModeEntryMethod_ARRAYSIZE = OmniboxEventProto_KeywordModeEntryMethod_KeywordModeEntryMethod_MAX + 1;

const std::string& OmniboxEventProto_KeywordModeEntryMethod_Name(OmniboxEventProto_KeywordModeEntryMethod value);
template<typename T>
inline const std::string& OmniboxEventProto_KeywordModeEntryMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OmniboxEventProto_KeywordModeEntryMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OmniboxEventProto_KeywordModeEntryMethod_Name.");
  return OmniboxEventProto_KeywordModeEntryMethod_Name(static_cast<OmniboxEventProto_KeywordModeEntryMethod>(enum_t_value));
}
bool OmniboxEventProto_KeywordModeEntryMethod_Parse(
    const std::string& name, OmniboxEventProto_KeywordModeEntryMethod* value);
// ===================================================================

class OmniboxEventProto_Suggestion :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.OmniboxEventProto.Suggestion) */ {
 public:
  OmniboxEventProto_Suggestion();
  virtual ~OmniboxEventProto_Suggestion();

  OmniboxEventProto_Suggestion(const OmniboxEventProto_Suggestion& from);
  OmniboxEventProto_Suggestion(OmniboxEventProto_Suggestion&& from) noexcept
    : OmniboxEventProto_Suggestion() {
    *this = ::std::move(from);
  }

  inline OmniboxEventProto_Suggestion& operator=(const OmniboxEventProto_Suggestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline OmniboxEventProto_Suggestion& operator=(OmniboxEventProto_Suggestion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OmniboxEventProto_Suggestion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OmniboxEventProto_Suggestion* internal_default_instance() {
    return reinterpret_cast<const OmniboxEventProto_Suggestion*>(
               &_OmniboxEventProto_Suggestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OmniboxEventProto_Suggestion& a, OmniboxEventProto_Suggestion& b) {
    a.Swap(&b);
  }
  inline void Swap(OmniboxEventProto_Suggestion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OmniboxEventProto_Suggestion* New() const final {
    return CreateMaybeMessage<OmniboxEventProto_Suggestion>(nullptr);
  }

  OmniboxEventProto_Suggestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OmniboxEventProto_Suggestion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OmniboxEventProto_Suggestion& from);
  void MergeFrom(const OmniboxEventProto_Suggestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OmniboxEventProto_Suggestion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.OmniboxEventProto.Suggestion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef OmniboxEventProto_Suggestion_ResultType ResultType;
  static constexpr ResultType UNKNOWN_RESULT_TYPE =
    OmniboxEventProto_Suggestion_ResultType_UNKNOWN_RESULT_TYPE;
  static constexpr ResultType URL_WHAT_YOU_TYPED =
    OmniboxEventProto_Suggestion_ResultType_URL_WHAT_YOU_TYPED;
  static constexpr ResultType HISTORY_URL =
    OmniboxEventProto_Suggestion_ResultType_HISTORY_URL;
  static constexpr ResultType HISTORY_TITLE =
    OmniboxEventProto_Suggestion_ResultType_HISTORY_TITLE;
  static constexpr ResultType HISTORY_BODY =
    OmniboxEventProto_Suggestion_ResultType_HISTORY_BODY;
  static constexpr ResultType HISTORY_KEYWORD =
    OmniboxEventProto_Suggestion_ResultType_HISTORY_KEYWORD;
  static constexpr ResultType NAVSUGGEST =
    OmniboxEventProto_Suggestion_ResultType_NAVSUGGEST;
  static constexpr ResultType SEARCH_WHAT_YOU_TYPED =
    OmniboxEventProto_Suggestion_ResultType_SEARCH_WHAT_YOU_TYPED;
  static constexpr ResultType SEARCH_HISTORY =
    OmniboxEventProto_Suggestion_ResultType_SEARCH_HISTORY;
  static constexpr ResultType SEARCH_SUGGEST =
    OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST;
  static constexpr ResultType SEARCH_OTHER_ENGINE =
    OmniboxEventProto_Suggestion_ResultType_SEARCH_OTHER_ENGINE;
  static constexpr ResultType EXTENSION_APP =
    OmniboxEventProto_Suggestion_ResultType_EXTENSION_APP;
  static constexpr ResultType CONTACT =
    OmniboxEventProto_Suggestion_ResultType_CONTACT;
  static constexpr ResultType BOOKMARK_TITLE =
    OmniboxEventProto_Suggestion_ResultType_BOOKMARK_TITLE;
  static constexpr ResultType SEARCH_SUGGEST_ENTITY =
    OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST_ENTITY;
  static constexpr ResultType SEARCH_SUGGEST_TAIL =
    OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST_TAIL;
  static constexpr ResultType SEARCH_SUGGEST_PERSONALIZED =
    OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST_PERSONALIZED;
  static constexpr ResultType SEARCH_SUGGEST_PROFILE =
    OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST_PROFILE;
  static constexpr ResultType APP_RESULT =
    OmniboxEventProto_Suggestion_ResultType_APP_RESULT;
  static constexpr ResultType APP =
    OmniboxEventProto_Suggestion_ResultType_APP;
  static constexpr ResultType LEGACY_ON_DEVICE =
    OmniboxEventProto_Suggestion_ResultType_LEGACY_ON_DEVICE;
  static constexpr ResultType NAVSUGGEST_PERSONALIZED =
    OmniboxEventProto_Suggestion_ResultType_NAVSUGGEST_PERSONALIZED;
  static constexpr ResultType SEARCH_SUGGEST_ANSWER =
    OmniboxEventProto_Suggestion_ResultType_SEARCH_SUGGEST_ANSWER;
  static constexpr ResultType CALCULATOR =
    OmniboxEventProto_Suggestion_ResultType_CALCULATOR;
  static constexpr ResultType CLIPBOARD_URL =
    OmniboxEventProto_Suggestion_ResultType_CLIPBOARD_URL;
  static constexpr ResultType PHYSICAL_WEB =
    OmniboxEventProto_Suggestion_ResultType_PHYSICAL_WEB;
  static constexpr ResultType PHYSICAL_WEB_OVERFLOW =
    OmniboxEventProto_Suggestion_ResultType_PHYSICAL_WEB_OVERFLOW;
  static constexpr ResultType DOCUMENT =
    OmniboxEventProto_Suggestion_ResultType_DOCUMENT;
  static constexpr ResultType CLIPBOARD_TEXT =
    OmniboxEventProto_Suggestion_ResultType_CLIPBOARD_TEXT;
  static constexpr ResultType CLIPBOARD_IMAGE =
    OmniboxEventProto_Suggestion_ResultType_CLIPBOARD_IMAGE;
  static inline bool ResultType_IsValid(int value) {
    return OmniboxEventProto_Suggestion_ResultType_IsValid(value);
  }
  static constexpr ResultType ResultType_MIN =
    OmniboxEventProto_Suggestion_ResultType_ResultType_MIN;
  static constexpr ResultType ResultType_MAX =
    OmniboxEventProto_Suggestion_ResultType_ResultType_MAX;
  static constexpr int ResultType_ARRAYSIZE =
    OmniboxEventProto_Suggestion_ResultType_ResultType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ResultType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResultType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResultType_Name.");
    return OmniboxEventProto_Suggestion_ResultType_Name(enum_t_value);
  }
  static inline bool ResultType_Parse(const std::string& name,
      ResultType* value) {
    return OmniboxEventProto_Suggestion_ResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProviderFieldNumber = 1,
    kResultTypeFieldNumber = 2,
    kRelevanceFieldNumber = 3,
    kTypedCountFieldNumber = 5,
    kIsStarredFieldNumber = 4,
    kIsDisabledFieldNumber = 6,
    kHasTabMatchFieldNumber = 8,
    kIsKeywordSuggestionFieldNumber = 9,
    kResultSubtypeIdentifierFieldNumber = 7,
  };
  // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
  bool has_provider() const;
  void clear_provider();
  ::metrics::OmniboxEventProto_ProviderType provider() const;
  void set_provider(::metrics::OmniboxEventProto_ProviderType value);

  // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
  bool has_result_type() const;
  void clear_result_type();
  ::metrics::OmniboxEventProto_Suggestion_ResultType result_type() const;
  void set_result_type(::metrics::OmniboxEventProto_Suggestion_ResultType value);

  // optional int32 relevance = 3;
  bool has_relevance() const;
  void clear_relevance();
  ::PROTOBUF_NAMESPACE_ID::int32 relevance() const;
  void set_relevance(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 typed_count = 5;
  bool has_typed_count() const;
  void clear_typed_count();
  ::PROTOBUF_NAMESPACE_ID::int32 typed_count() const;
  void set_typed_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_starred = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_is_starred() const;
  PROTOBUF_DEPRECATED void clear_is_starred();
  PROTOBUF_DEPRECATED bool is_starred() const;
  PROTOBUF_DEPRECATED void set_is_starred(bool value);

  // optional bool is_disabled = 6;
  bool has_is_disabled() const;
  void clear_is_disabled();
  bool is_disabled() const;
  void set_is_disabled(bool value);

  // optional bool has_tab_match = 8;
  bool has_has_tab_match() const;
  void clear_has_tab_match();
  bool has_tab_match() const;
  void set_has_tab_match(bool value);

  // optional bool is_keyword_suggestion = 9;
  bool has_is_keyword_suggestion() const;
  void clear_is_keyword_suggestion();
  bool is_keyword_suggestion() const;
  void set_is_keyword_suggestion(bool value);

  // optional int32 result_subtype_identifier = 7;
  bool has_result_subtype_identifier() const;
  void clear_result_subtype_identifier();
  ::PROTOBUF_NAMESPACE_ID::int32 result_subtype_identifier() const;
  void set_result_subtype_identifier(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.OmniboxEventProto.Suggestion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int provider_;
  int result_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 relevance_;
  ::PROTOBUF_NAMESPACE_ID::int32 typed_count_;
  bool is_starred_;
  bool is_disabled_;
  bool has_tab_match_;
  bool is_keyword_suggestion_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_subtype_identifier_;
  friend struct ::TableStruct_omnibox_5fevent_2eproto;
};
// -------------------------------------------------------------------

class OmniboxEventProto_ProviderInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.OmniboxEventProto.ProviderInfo) */ {
 public:
  OmniboxEventProto_ProviderInfo();
  virtual ~OmniboxEventProto_ProviderInfo();

  OmniboxEventProto_ProviderInfo(const OmniboxEventProto_ProviderInfo& from);
  OmniboxEventProto_ProviderInfo(OmniboxEventProto_ProviderInfo&& from) noexcept
    : OmniboxEventProto_ProviderInfo() {
    *this = ::std::move(from);
  }

  inline OmniboxEventProto_ProviderInfo& operator=(const OmniboxEventProto_ProviderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OmniboxEventProto_ProviderInfo& operator=(OmniboxEventProto_ProviderInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OmniboxEventProto_ProviderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OmniboxEventProto_ProviderInfo* internal_default_instance() {
    return reinterpret_cast<const OmniboxEventProto_ProviderInfo*>(
               &_OmniboxEventProto_ProviderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OmniboxEventProto_ProviderInfo& a, OmniboxEventProto_ProviderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OmniboxEventProto_ProviderInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OmniboxEventProto_ProviderInfo* New() const final {
    return CreateMaybeMessage<OmniboxEventProto_ProviderInfo>(nullptr);
  }

  OmniboxEventProto_ProviderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OmniboxEventProto_ProviderInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OmniboxEventProto_ProviderInfo& from);
  void MergeFrom(const OmniboxEventProto_ProviderInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OmniboxEventProto_ProviderInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.OmniboxEventProto.ProviderInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldTrialTriggeredFieldNumber = 3,
    kFieldTrialTriggeredInSessionFieldNumber = 4,
    kProviderFieldNumber = 1,
    kProviderDoneFieldNumber = 2,
    kTimesReturnedResultsInSessionFieldNumber = 5,
  };
  // repeated fixed32 field_trial_triggered = 3;
  int field_trial_triggered_size() const;
  void clear_field_trial_triggered();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_trial_triggered(int index) const;
  void set_field_trial_triggered(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_field_trial_triggered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      field_trial_triggered() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_field_trial_triggered();

  // repeated fixed32 field_trial_triggered_in_session = 4;
  int field_trial_triggered_in_session_size() const;
  void clear_field_trial_triggered_in_session();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_trial_triggered_in_session(int index) const;
  void set_field_trial_triggered_in_session(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_field_trial_triggered_in_session(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      field_trial_triggered_in_session() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_field_trial_triggered_in_session();

  // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
  bool has_provider() const;
  void clear_provider();
  ::metrics::OmniboxEventProto_ProviderType provider() const;
  void set_provider(::metrics::OmniboxEventProto_ProviderType value);

  // optional bool provider_done = 2;
  bool has_provider_done() const;
  void clear_provider_done();
  bool provider_done() const;
  void set_provider_done(bool value);

  // optional int32 times_returned_results_in_session = 5;
  bool has_times_returned_results_in_session() const;
  void clear_times_returned_results_in_session();
  ::PROTOBUF_NAMESPACE_ID::int32 times_returned_results_in_session() const;
  void set_times_returned_results_in_session(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.OmniboxEventProto.ProviderInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > field_trial_triggered_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > field_trial_triggered_in_session_;
  int provider_;
  bool provider_done_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_returned_results_in_session_;
  friend struct ::TableStruct_omnibox_5fevent_2eproto;
};
// -------------------------------------------------------------------

class OmniboxEventProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.OmniboxEventProto) */ {
 public:
  OmniboxEventProto();
  virtual ~OmniboxEventProto();

  OmniboxEventProto(const OmniboxEventProto& from);
  OmniboxEventProto(OmniboxEventProto&& from) noexcept
    : OmniboxEventProto() {
    *this = ::std::move(from);
  }

  inline OmniboxEventProto& operator=(const OmniboxEventProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OmniboxEventProto& operator=(OmniboxEventProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OmniboxEventProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OmniboxEventProto* internal_default_instance() {
    return reinterpret_cast<const OmniboxEventProto*>(
               &_OmniboxEventProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OmniboxEventProto& a, OmniboxEventProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OmniboxEventProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OmniboxEventProto* New() const final {
    return CreateMaybeMessage<OmniboxEventProto>(nullptr);
  }

  OmniboxEventProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OmniboxEventProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OmniboxEventProto& from);
  void MergeFrom(const OmniboxEventProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OmniboxEventProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.OmniboxEventProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef OmniboxEventProto_Suggestion Suggestion;
  typedef OmniboxEventProto_ProviderInfo ProviderInfo;

  typedef OmniboxEventProto_PageClassification PageClassification;
  static constexpr PageClassification INVALID_SPEC =
    OmniboxEventProto_PageClassification_INVALID_SPEC;
  static constexpr PageClassification NTP =
    OmniboxEventProto_PageClassification_NTP;
  static constexpr PageClassification BLANK =
    OmniboxEventProto_PageClassification_BLANK;
  static constexpr PageClassification HOME_PAGE =
    OmniboxEventProto_PageClassification_HOME_PAGE;
  static constexpr PageClassification OTHER =
    OmniboxEventProto_PageClassification_OTHER;
  static constexpr PageClassification OBSOLETE_INSTANT_NTP =
    OmniboxEventProto_PageClassification_OBSOLETE_INSTANT_NTP;
  static constexpr PageClassification SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT =
    OmniboxEventProto_PageClassification_SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT;
  static constexpr PageClassification INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS =
    OmniboxEventProto_PageClassification_INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS;
  static constexpr PageClassification INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS =
    OmniboxEventProto_PageClassification_INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS;
  static constexpr PageClassification SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT =
    OmniboxEventProto_PageClassification_SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT;
  static constexpr PageClassification APP_HOME =
    OmniboxEventProto_PageClassification_APP_HOME;
  static constexpr PageClassification APP_SEARCH =
    OmniboxEventProto_PageClassification_APP_SEARCH;
  static constexpr PageClassification APP_MAPS =
    OmniboxEventProto_PageClassification_APP_MAPS;
  static constexpr PageClassification SEARCH_BUTTON_AS_STARTING_FOCUS =
    OmniboxEventProto_PageClassification_SEARCH_BUTTON_AS_STARTING_FOCUS;
  static constexpr PageClassification CHROMEOS_APP_LIST =
    OmniboxEventProto_PageClassification_CHROMEOS_APP_LIST;
  static constexpr PageClassification NTP_REALBOX =
    OmniboxEventProto_PageClassification_NTP_REALBOX;
  static inline bool PageClassification_IsValid(int value) {
    return OmniboxEventProto_PageClassification_IsValid(value);
  }
  static constexpr PageClassification PageClassification_MIN =
    OmniboxEventProto_PageClassification_PageClassification_MIN;
  static constexpr PageClassification PageClassification_MAX =
    OmniboxEventProto_PageClassification_PageClassification_MAX;
  static constexpr int PageClassification_ARRAYSIZE =
    OmniboxEventProto_PageClassification_PageClassification_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PageClassification_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PageClassification>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PageClassification_Name.");
    return OmniboxEventProto_PageClassification_Name(enum_t_value);
  }
  static inline bool PageClassification_Parse(const std::string& name,
      PageClassification* value) {
    return OmniboxEventProto_PageClassification_Parse(name, value);
  }

  typedef OmniboxEventProto_ModeType ModeType;
  static constexpr ModeType UNKNOWN_MODE =
    OmniboxEventProto_ModeType_UNKNOWN_MODE;
  static constexpr ModeType WEB_MODE =
    OmniboxEventProto_ModeType_WEB_MODE;
  static constexpr ModeType IMAGE_MODE =
    OmniboxEventProto_ModeType_IMAGE_MODE;
  static inline bool ModeType_IsValid(int value) {
    return OmniboxEventProto_ModeType_IsValid(value);
  }
  static constexpr ModeType ModeType_MIN =
    OmniboxEventProto_ModeType_ModeType_MIN;
  static constexpr ModeType ModeType_MAX =
    OmniboxEventProto_ModeType_ModeType_MAX;
  static constexpr int ModeType_ARRAYSIZE =
    OmniboxEventProto_ModeType_ModeType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ModeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModeType_Name.");
    return OmniboxEventProto_ModeType_Name(enum_t_value);
  }
  static inline bool ModeType_Parse(const std::string& name,
      ModeType* value) {
    return OmniboxEventProto_ModeType_Parse(name, value);
  }

  typedef OmniboxEventProto_ProviderType ProviderType;
  static constexpr ProviderType UNKNOWN_PROVIDER =
    OmniboxEventProto_ProviderType_UNKNOWN_PROVIDER;
  static constexpr ProviderType HISTORY_URL =
    OmniboxEventProto_ProviderType_HISTORY_URL;
  static constexpr ProviderType HISTORY_CONTENTS =
    OmniboxEventProto_ProviderType_HISTORY_CONTENTS;
  static constexpr ProviderType HISTORY_QUICK =
    OmniboxEventProto_ProviderType_HISTORY_QUICK;
  static constexpr ProviderType SEARCH =
    OmniboxEventProto_ProviderType_SEARCH;
  static constexpr ProviderType KEYWORD =
    OmniboxEventProto_ProviderType_KEYWORD;
  static constexpr ProviderType BUILTIN =
    OmniboxEventProto_ProviderType_BUILTIN;
  static constexpr ProviderType SHORTCUTS =
    OmniboxEventProto_ProviderType_SHORTCUTS;
  static constexpr ProviderType EXTENSION_APPS =
    OmniboxEventProto_ProviderType_EXTENSION_APPS;
  static constexpr ProviderType CONTACT =
    OmniboxEventProto_ProviderType_CONTACT;
  static constexpr ProviderType BOOKMARK =
    OmniboxEventProto_ProviderType_BOOKMARK;
  static constexpr ProviderType ZERO_SUGGEST =
    OmniboxEventProto_ProviderType_ZERO_SUGGEST;
  static constexpr ProviderType ON_DEVICE =
    OmniboxEventProto_ProviderType_ON_DEVICE;
  static constexpr ProviderType ON_DEVICE_CHROME =
    OmniboxEventProto_ProviderType_ON_DEVICE_CHROME;
  static constexpr ProviderType CLIPBOARD =
    OmniboxEventProto_ProviderType_CLIPBOARD;
  static constexpr ProviderType PHYSICAL_WEB =
    OmniboxEventProto_ProviderType_PHYSICAL_WEB;
  static constexpr ProviderType DOCUMENT =
    OmniboxEventProto_ProviderType_DOCUMENT;
  static constexpr ProviderType ON_DEVICE_HEAD =
    OmniboxEventProto_ProviderType_ON_DEVICE_HEAD;
  static constexpr ProviderType ZERO_SUGGEST_LOCAL_HISTORY =
    OmniboxEventProto_ProviderType_ZERO_SUGGEST_LOCAL_HISTORY;
  static inline bool ProviderType_IsValid(int value) {
    return OmniboxEventProto_ProviderType_IsValid(value);
  }
  static constexpr ProviderType ProviderType_MIN =
    OmniboxEventProto_ProviderType_ProviderType_MIN;
  static constexpr ProviderType ProviderType_MAX =
    OmniboxEventProto_ProviderType_ProviderType_MAX;
  static constexpr int ProviderType_ARRAYSIZE =
    OmniboxEventProto_ProviderType_ProviderType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ProviderType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProviderType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProviderType_Name.");
    return OmniboxEventProto_ProviderType_Name(enum_t_value);
  }
  static inline bool ProviderType_Parse(const std::string& name,
      ProviderType* value) {
    return OmniboxEventProto_ProviderType_Parse(name, value);
  }

  typedef OmniboxEventProto_KeywordModeEntryMethod KeywordModeEntryMethod;
  static constexpr KeywordModeEntryMethod INVALID =
    OmniboxEventProto_KeywordModeEntryMethod_INVALID;
  static constexpr KeywordModeEntryMethod TAB =
    OmniboxEventProto_KeywordModeEntryMethod_TAB;
  static constexpr KeywordModeEntryMethod SPACE_AT_END =
    OmniboxEventProto_KeywordModeEntryMethod_SPACE_AT_END;
  static constexpr KeywordModeEntryMethod SPACE_IN_MIDDLE =
    OmniboxEventProto_KeywordModeEntryMethod_SPACE_IN_MIDDLE;
  static constexpr KeywordModeEntryMethod KEYBOARD_SHORTCUT =
    OmniboxEventProto_KeywordModeEntryMethod_KEYBOARD_SHORTCUT;
  static constexpr KeywordModeEntryMethod QUESTION_MARK =
    OmniboxEventProto_KeywordModeEntryMethod_QUESTION_MARK;
  static constexpr KeywordModeEntryMethod CLICK_HINT_VIEW =
    OmniboxEventProto_KeywordModeEntryMethod_CLICK_HINT_VIEW;
  static constexpr KeywordModeEntryMethod TAP_HINT_VIEW =
    OmniboxEventProto_KeywordModeEntryMethod_TAP_HINT_VIEW;
  static constexpr KeywordModeEntryMethod SELECT_SUGGESTION =
    OmniboxEventProto_KeywordModeEntryMethod_SELECT_SUGGESTION;
  static inline bool KeywordModeEntryMethod_IsValid(int value) {
    return OmniboxEventProto_KeywordModeEntryMethod_IsValid(value);
  }
  static constexpr KeywordModeEntryMethod KeywordModeEntryMethod_MIN =
    OmniboxEventProto_KeywordModeEntryMethod_KeywordModeEntryMethod_MIN;
  static constexpr KeywordModeEntryMethod KeywordModeEntryMethod_MAX =
    OmniboxEventProto_KeywordModeEntryMethod_KeywordModeEntryMethod_MAX;
  static constexpr int KeywordModeEntryMethod_ARRAYSIZE =
    OmniboxEventProto_KeywordModeEntryMethod_KeywordModeEntryMethod_ARRAYSIZE;
  template<typename T>
  static inline const std::string& KeywordModeEntryMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KeywordModeEntryMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KeywordModeEntryMethod_Name.");
    return OmniboxEventProto_KeywordModeEntryMethod_Name(enum_t_value);
  }
  static inline bool KeywordModeEntryMethod_Parse(const std::string& name,
      KeywordModeEntryMethod* value) {
    return OmniboxEventProto_KeywordModeEntryMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuggestionFieldNumber = 9,
    kProviderInfoFieldNumber = 12,
    kTimeSecFieldNumber = 1,
    kTabIdFieldNumber = 2,
    kTypedLengthFieldNumber = 3,
    kNumTypedTermsFieldNumber = 4,
    kSelectedIndexFieldNumber = 5,
    kTypingDurationMsFieldNumber = 7,
    kCompletedLengthFieldNumber = 6,
    kInputTypeFieldNumber = 8,
    kDurationSinceLastDefaultMatchUpdateMsFieldNumber = 13,
    kCurrentPageClassificationFieldNumber = 10,
    kJustDeletedTextFieldNumber = 11,
    kSelectedTabMatchFieldNumber = 17,
    kDEPRECATEDIsTopResultHiddenInDropdownFieldNumber = 14,
    kIsPopupOpenFieldNumber = 15,
    kIsPasteAndGoFieldNumber = 16,
    kInKeywordModeFieldNumber = 19,
    kModeTypeFieldNumber = 18,
    kKeywordModeEntryMethodFieldNumber = 20,
  };
  // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
  int suggestion_size() const;
  void clear_suggestion();
  ::metrics::OmniboxEventProto_Suggestion* mutable_suggestion(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto_Suggestion >*
      mutable_suggestion();
  const ::metrics::OmniboxEventProto_Suggestion& suggestion(int index) const;
  ::metrics::OmniboxEventProto_Suggestion* add_suggestion();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto_Suggestion >&
      suggestion() const;

  // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
  int provider_info_size() const;
  void clear_provider_info();
  ::metrics::OmniboxEventProto_ProviderInfo* mutable_provider_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto_ProviderInfo >*
      mutable_provider_info();
  const ::metrics::OmniboxEventProto_ProviderInfo& provider_info(int index) const;
  ::metrics::OmniboxEventProto_ProviderInfo* add_provider_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto_ProviderInfo >&
      provider_info() const;

  // optional int64 time_sec = 1;
  bool has_time_sec() const;
  void clear_time_sec();
  ::PROTOBUF_NAMESPACE_ID::int64 time_sec() const;
  void set_time_sec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 tab_id = 2;
  bool has_tab_id() const;
  void clear_tab_id();
  ::PROTOBUF_NAMESPACE_ID::int32 tab_id() const;
  void set_tab_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 typed_length = 3;
  bool has_typed_length() const;
  void clear_typed_length();
  ::PROTOBUF_NAMESPACE_ID::int32 typed_length() const;
  void set_typed_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_typed_terms = 4;
  bool has_num_typed_terms() const;
  void clear_num_typed_terms();
  ::PROTOBUF_NAMESPACE_ID::int32 num_typed_terms() const;
  void set_num_typed_terms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 selected_index = 5;
  bool has_selected_index() const;
  void clear_selected_index();
  ::PROTOBUF_NAMESPACE_ID::int32 selected_index() const;
  void set_selected_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 typing_duration_ms = 7;
  bool has_typing_duration_ms() const;
  void clear_typing_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 typing_duration_ms() const;
  void set_typing_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 completed_length = 6;
  bool has_completed_length() const;
  void clear_completed_length();
  ::PROTOBUF_NAMESPACE_ID::int32 completed_length() const;
  void set_completed_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .metrics.OmniboxInputType input_type = 8;
  bool has_input_type() const;
  void clear_input_type();
  ::metrics::OmniboxInputType input_type() const;
  void set_input_type(::metrics::OmniboxInputType value);

  // optional int64 duration_since_last_default_match_update_ms = 13;
  bool has_duration_since_last_default_match_update_ms() const;
  void clear_duration_since_last_default_match_update_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_since_last_default_match_update_ms() const;
  void set_duration_since_last_default_match_update_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
  bool has_current_page_classification() const;
  void clear_current_page_classification();
  ::metrics::OmniboxEventProto_PageClassification current_page_classification() const;
  void set_current_page_classification(::metrics::OmniboxEventProto_PageClassification value);

  // optional bool just_deleted_text = 11;
  bool has_just_deleted_text() const;
  void clear_just_deleted_text();
  bool just_deleted_text() const;
  void set_just_deleted_text(bool value);

  // optional bool selected_tab_match = 17;
  bool has_selected_tab_match() const;
  void clear_selected_tab_match();
  bool selected_tab_match() const;
  void set_selected_tab_match(bool value);

  // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_is_top_result_hidden_in_dropdown() const;
  PROTOBUF_DEPRECATED void clear_deprecated_is_top_result_hidden_in_dropdown();
  PROTOBUF_DEPRECATED bool deprecated_is_top_result_hidden_in_dropdown() const;
  PROTOBUF_DEPRECATED void set_deprecated_is_top_result_hidden_in_dropdown(bool value);

  // optional bool is_popup_open = 15;
  bool has_is_popup_open() const;
  void clear_is_popup_open();
  bool is_popup_open() const;
  void set_is_popup_open(bool value);

  // optional bool is_paste_and_go = 16;
  bool has_is_paste_and_go() const;
  void clear_is_paste_and_go();
  bool is_paste_and_go() const;
  void set_is_paste_and_go(bool value);

  // optional bool in_keyword_mode = 19;
  bool has_in_keyword_mode() const;
  void clear_in_keyword_mode();
  bool in_keyword_mode() const;
  void set_in_keyword_mode(bool value);

  // optional .metrics.OmniboxEventProto.ModeType mode_type = 18;
  bool has_mode_type() const;
  void clear_mode_type();
  ::metrics::OmniboxEventProto_ModeType mode_type() const;
  void set_mode_type(::metrics::OmniboxEventProto_ModeType value);

  // optional .metrics.OmniboxEventProto.KeywordModeEntryMethod keyword_mode_entry_method = 20;
  bool has_keyword_mode_entry_method() const;
  void clear_keyword_mode_entry_method();
  ::metrics::OmniboxEventProto_KeywordModeEntryMethod keyword_mode_entry_method() const;
  void set_keyword_mode_entry_method(::metrics::OmniboxEventProto_KeywordModeEntryMethod value);

  // @@protoc_insertion_point(class_scope:metrics.OmniboxEventProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto_Suggestion > suggestion_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto_ProviderInfo > provider_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 tab_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 typed_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_typed_terms_;
  ::PROTOBUF_NAMESPACE_ID::int32 selected_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 typing_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 completed_length_;
  int input_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_since_last_default_match_update_ms_;
  int current_page_classification_;
  bool just_deleted_text_;
  bool selected_tab_match_;
  bool deprecated_is_top_result_hidden_in_dropdown_;
  bool is_popup_open_;
  bool is_paste_and_go_;
  bool in_keyword_mode_;
  int mode_type_;
  int keyword_mode_entry_method_;
  friend struct ::TableStruct_omnibox_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OmniboxEventProto_Suggestion

// optional .metrics.OmniboxEventProto.ProviderType provider = 1;
inline bool OmniboxEventProto_Suggestion::has_provider() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OmniboxEventProto_Suggestion::clear_provider() {
  provider_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::metrics::OmniboxEventProto_ProviderType OmniboxEventProto_Suggestion::provider() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.provider)
  return static_cast< ::metrics::OmniboxEventProto_ProviderType >(provider_);
}
inline void OmniboxEventProto_Suggestion::set_provider(::metrics::OmniboxEventProto_ProviderType value) {
  assert(::metrics::OmniboxEventProto_ProviderType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  provider_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.provider)
}

// optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
inline bool OmniboxEventProto_Suggestion::has_result_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OmniboxEventProto_Suggestion::clear_result_type() {
  result_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::metrics::OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::result_type() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.result_type)
  return static_cast< ::metrics::OmniboxEventProto_Suggestion_ResultType >(result_type_);
}
inline void OmniboxEventProto_Suggestion::set_result_type(::metrics::OmniboxEventProto_Suggestion_ResultType value) {
  assert(::metrics::OmniboxEventProto_Suggestion_ResultType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  result_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.result_type)
}

// optional int32 relevance = 3;
inline bool OmniboxEventProto_Suggestion::has_relevance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OmniboxEventProto_Suggestion::clear_relevance() {
  relevance_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OmniboxEventProto_Suggestion::relevance() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.relevance)
  return relevance_;
}
inline void OmniboxEventProto_Suggestion::set_relevance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  relevance_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.relevance)
}

// optional int32 typed_count = 5;
inline bool OmniboxEventProto_Suggestion::has_typed_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OmniboxEventProto_Suggestion::clear_typed_count() {
  typed_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OmniboxEventProto_Suggestion::typed_count() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.typed_count)
  return typed_count_;
}
inline void OmniboxEventProto_Suggestion::set_typed_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  typed_count_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.typed_count)
}

// optional bool is_starred = 4 [deprecated = true];
inline bool OmniboxEventProto_Suggestion::has_is_starred() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OmniboxEventProto_Suggestion::clear_is_starred() {
  is_starred_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool OmniboxEventProto_Suggestion::is_starred() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.is_starred)
  return is_starred_;
}
inline void OmniboxEventProto_Suggestion::set_is_starred(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_starred_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.is_starred)
}

// optional bool is_disabled = 6;
inline bool OmniboxEventProto_Suggestion::has_is_disabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OmniboxEventProto_Suggestion::clear_is_disabled() {
  is_disabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool OmniboxEventProto_Suggestion::is_disabled() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.is_disabled)
  return is_disabled_;
}
inline void OmniboxEventProto_Suggestion::set_is_disabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_disabled_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.is_disabled)
}

// optional int32 result_subtype_identifier = 7;
inline bool OmniboxEventProto_Suggestion::has_result_subtype_identifier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OmniboxEventProto_Suggestion::clear_result_subtype_identifier() {
  result_subtype_identifier_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OmniboxEventProto_Suggestion::result_subtype_identifier() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.result_subtype_identifier)
  return result_subtype_identifier_;
}
inline void OmniboxEventProto_Suggestion::set_result_subtype_identifier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  result_subtype_identifier_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.result_subtype_identifier)
}

// optional bool has_tab_match = 8;
inline bool OmniboxEventProto_Suggestion::has_has_tab_match() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OmniboxEventProto_Suggestion::clear_has_tab_match() {
  has_tab_match_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool OmniboxEventProto_Suggestion::has_tab_match() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.has_tab_match)
  return has_tab_match_;
}
inline void OmniboxEventProto_Suggestion::set_has_tab_match(bool value) {
  _has_bits_[0] |= 0x00000040u;
  has_tab_match_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.has_tab_match)
}

// optional bool is_keyword_suggestion = 9;
inline bool OmniboxEventProto_Suggestion::has_is_keyword_suggestion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OmniboxEventProto_Suggestion::clear_is_keyword_suggestion() {
  is_keyword_suggestion_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool OmniboxEventProto_Suggestion::is_keyword_suggestion() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.is_keyword_suggestion)
  return is_keyword_suggestion_;
}
inline void OmniboxEventProto_Suggestion::set_is_keyword_suggestion(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_keyword_suggestion_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.is_keyword_suggestion)
}

// -------------------------------------------------------------------

// OmniboxEventProto_ProviderInfo

// optional .metrics.OmniboxEventProto.ProviderType provider = 1;
inline bool OmniboxEventProto_ProviderInfo::has_provider() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OmniboxEventProto_ProviderInfo::clear_provider() {
  provider_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::metrics::OmniboxEventProto_ProviderType OmniboxEventProto_ProviderInfo::provider() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.provider)
  return static_cast< ::metrics::OmniboxEventProto_ProviderType >(provider_);
}
inline void OmniboxEventProto_ProviderInfo::set_provider(::metrics::OmniboxEventProto_ProviderType value) {
  assert(::metrics::OmniboxEventProto_ProviderType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  provider_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.provider)
}

// optional bool provider_done = 2;
inline bool OmniboxEventProto_ProviderInfo::has_provider_done() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OmniboxEventProto_ProviderInfo::clear_provider_done() {
  provider_done_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool OmniboxEventProto_ProviderInfo::provider_done() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.provider_done)
  return provider_done_;
}
inline void OmniboxEventProto_ProviderInfo::set_provider_done(bool value) {
  _has_bits_[0] |= 0x00000002u;
  provider_done_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.provider_done)
}

// repeated fixed32 field_trial_triggered = 3;
inline int OmniboxEventProto_ProviderInfo::field_trial_triggered_size() const {
  return field_trial_triggered_.size();
}
inline void OmniboxEventProto_ProviderInfo::clear_field_trial_triggered() {
  field_trial_triggered_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OmniboxEventProto_ProviderInfo::field_trial_triggered(int index) const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
  return field_trial_triggered_.Get(index);
}
inline void OmniboxEventProto_ProviderInfo::set_field_trial_triggered(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  field_trial_triggered_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
}
inline void OmniboxEventProto_ProviderInfo::add_field_trial_triggered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  field_trial_triggered_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OmniboxEventProto_ProviderInfo::field_trial_triggered() const {
  // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
  return field_trial_triggered_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OmniboxEventProto_ProviderInfo::mutable_field_trial_triggered() {
  // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
  return &field_trial_triggered_;
}

// repeated fixed32 field_trial_triggered_in_session = 4;
inline int OmniboxEventProto_ProviderInfo::field_trial_triggered_in_session_size() const {
  return field_trial_triggered_in_session_.size();
}
inline void OmniboxEventProto_ProviderInfo::clear_field_trial_triggered_in_session() {
  field_trial_triggered_in_session_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OmniboxEventProto_ProviderInfo::field_trial_triggered_in_session(int index) const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
  return field_trial_triggered_in_session_.Get(index);
}
inline void OmniboxEventProto_ProviderInfo::set_field_trial_triggered_in_session(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  field_trial_triggered_in_session_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
}
inline void OmniboxEventProto_ProviderInfo::add_field_trial_triggered_in_session(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  field_trial_triggered_in_session_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OmniboxEventProto_ProviderInfo::field_trial_triggered_in_session() const {
  // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
  return field_trial_triggered_in_session_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OmniboxEventProto_ProviderInfo::mutable_field_trial_triggered_in_session() {
  // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
  return &field_trial_triggered_in_session_;
}

// optional int32 times_returned_results_in_session = 5;
inline bool OmniboxEventProto_ProviderInfo::has_times_returned_results_in_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OmniboxEventProto_ProviderInfo::clear_times_returned_results_in_session() {
  times_returned_results_in_session_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OmniboxEventProto_ProviderInfo::times_returned_results_in_session() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.times_returned_results_in_session)
  return times_returned_results_in_session_;
}
inline void OmniboxEventProto_ProviderInfo::set_times_returned_results_in_session(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  times_returned_results_in_session_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.times_returned_results_in_session)
}

// -------------------------------------------------------------------

// OmniboxEventProto

// optional int64 time_sec = 1;
inline bool OmniboxEventProto::has_time_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OmniboxEventProto::clear_time_sec() {
  time_sec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OmniboxEventProto::time_sec() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.time_sec)
  return time_sec_;
}
inline void OmniboxEventProto::set_time_sec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_sec_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.time_sec)
}

// optional int32 tab_id = 2;
inline bool OmniboxEventProto::has_tab_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OmniboxEventProto::clear_tab_id() {
  tab_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OmniboxEventProto::tab_id() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.tab_id)
  return tab_id_;
}
inline void OmniboxEventProto::set_tab_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tab_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.tab_id)
}

// optional int32 typed_length = 3;
inline bool OmniboxEventProto::has_typed_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OmniboxEventProto::clear_typed_length() {
  typed_length_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OmniboxEventProto::typed_length() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.typed_length)
  return typed_length_;
}
inline void OmniboxEventProto::set_typed_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  typed_length_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.typed_length)
}

// optional bool just_deleted_text = 11;
inline bool OmniboxEventProto::has_just_deleted_text() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OmniboxEventProto::clear_just_deleted_text() {
  just_deleted_text_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool OmniboxEventProto::just_deleted_text() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.just_deleted_text)
  return just_deleted_text_;
}
inline void OmniboxEventProto::set_just_deleted_text(bool value) {
  _has_bits_[0] |= 0x00000400u;
  just_deleted_text_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.just_deleted_text)
}

// optional int32 num_typed_terms = 4;
inline bool OmniboxEventProto::has_num_typed_terms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OmniboxEventProto::clear_num_typed_terms() {
  num_typed_terms_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OmniboxEventProto::num_typed_terms() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.num_typed_terms)
  return num_typed_terms_;
}
inline void OmniboxEventProto::set_num_typed_terms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_typed_terms_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.num_typed_terms)
}

// optional int32 selected_index = 5;
inline bool OmniboxEventProto::has_selected_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OmniboxEventProto::clear_selected_index() {
  selected_index_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OmniboxEventProto::selected_index() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.selected_index)
  return selected_index_;
}
inline void OmniboxEventProto::set_selected_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  selected_index_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.selected_index)
}

// optional bool selected_tab_match = 17;
inline bool OmniboxEventProto::has_selected_tab_match() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OmniboxEventProto::clear_selected_tab_match() {
  selected_tab_match_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool OmniboxEventProto::selected_tab_match() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.selected_tab_match)
  return selected_tab_match_;
}
inline void OmniboxEventProto::set_selected_tab_match(bool value) {
  _has_bits_[0] |= 0x00000800u;
  selected_tab_match_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.selected_tab_match)
}

// optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
inline bool OmniboxEventProto::has_deprecated_is_top_result_hidden_in_dropdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OmniboxEventProto::clear_deprecated_is_top_result_hidden_in_dropdown() {
  deprecated_is_top_result_hidden_in_dropdown_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool OmniboxEventProto::deprecated_is_top_result_hidden_in_dropdown() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.DEPRECATED_is_top_result_hidden_in_dropdown)
  return deprecated_is_top_result_hidden_in_dropdown_;
}
inline void OmniboxEventProto::set_deprecated_is_top_result_hidden_in_dropdown(bool value) {
  _has_bits_[0] |= 0x00001000u;
  deprecated_is_top_result_hidden_in_dropdown_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.DEPRECATED_is_top_result_hidden_in_dropdown)
}

// optional bool is_popup_open = 15;
inline bool OmniboxEventProto::has_is_popup_open() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OmniboxEventProto::clear_is_popup_open() {
  is_popup_open_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool OmniboxEventProto::is_popup_open() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.is_popup_open)
  return is_popup_open_;
}
inline void OmniboxEventProto::set_is_popup_open(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_popup_open_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.is_popup_open)
}

// optional bool is_paste_and_go = 16;
inline bool OmniboxEventProto::has_is_paste_and_go() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OmniboxEventProto::clear_is_paste_and_go() {
  is_paste_and_go_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool OmniboxEventProto::is_paste_and_go() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.is_paste_and_go)
  return is_paste_and_go_;
}
inline void OmniboxEventProto::set_is_paste_and_go(bool value) {
  _has_bits_[0] |= 0x00004000u;
  is_paste_and_go_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.is_paste_and_go)
}

// optional int32 completed_length = 6;
inline bool OmniboxEventProto::has_completed_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OmniboxEventProto::clear_completed_length() {
  completed_length_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OmniboxEventProto::completed_length() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.completed_length)
  return completed_length_;
}
inline void OmniboxEventProto::set_completed_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  completed_length_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.completed_length)
}

// optional int64 typing_duration_ms = 7;
inline bool OmniboxEventProto::has_typing_duration_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OmniboxEventProto::clear_typing_duration_ms() {
  typing_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OmniboxEventProto::typing_duration_ms() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.typing_duration_ms)
  return typing_duration_ms_;
}
inline void OmniboxEventProto::set_typing_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  typing_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.typing_duration_ms)
}

// optional int64 duration_since_last_default_match_update_ms = 13;
inline bool OmniboxEventProto::has_duration_since_last_default_match_update_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OmniboxEventProto::clear_duration_since_last_default_match_update_ms() {
  duration_since_last_default_match_update_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OmniboxEventProto::duration_since_last_default_match_update_ms() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.duration_since_last_default_match_update_ms)
  return duration_since_last_default_match_update_ms_;
}
inline void OmniboxEventProto::set_duration_since_last_default_match_update_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  duration_since_last_default_match_update_ms_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.duration_since_last_default_match_update_ms)
}

// optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
inline bool OmniboxEventProto::has_current_page_classification() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OmniboxEventProto::clear_current_page_classification() {
  current_page_classification_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::metrics::OmniboxEventProto_PageClassification OmniboxEventProto::current_page_classification() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.current_page_classification)
  return static_cast< ::metrics::OmniboxEventProto_PageClassification >(current_page_classification_);
}
inline void OmniboxEventProto::set_current_page_classification(::metrics::OmniboxEventProto_PageClassification value) {
  assert(::metrics::OmniboxEventProto_PageClassification_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  current_page_classification_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.current_page_classification)
}

// optional .metrics.OmniboxEventProto.ModeType mode_type = 18;
inline bool OmniboxEventProto::has_mode_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OmniboxEventProto::clear_mode_type() {
  mode_type_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::metrics::OmniboxEventProto_ModeType OmniboxEventProto::mode_type() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.mode_type)
  return static_cast< ::metrics::OmniboxEventProto_ModeType >(mode_type_);
}
inline void OmniboxEventProto::set_mode_type(::metrics::OmniboxEventProto_ModeType value) {
  assert(::metrics::OmniboxEventProto_ModeType_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  mode_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.mode_type)
}

// optional .metrics.OmniboxInputType input_type = 8;
inline bool OmniboxEventProto::has_input_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OmniboxEventProto::clear_input_type() {
  input_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::metrics::OmniboxInputType OmniboxEventProto::input_type() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.input_type)
  return static_cast< ::metrics::OmniboxInputType >(input_type_);
}
inline void OmniboxEventProto::set_input_type(::metrics::OmniboxInputType value) {
  assert(::metrics::OmniboxInputType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  input_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.input_type)
}

// repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
inline int OmniboxEventProto::suggestion_size() const {
  return suggestion_.size();
}
inline void OmniboxEventProto::clear_suggestion() {
  suggestion_.Clear();
}
inline ::metrics::OmniboxEventProto_Suggestion* OmniboxEventProto::mutable_suggestion(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.OmniboxEventProto.suggestion)
  return suggestion_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto_Suggestion >*
OmniboxEventProto::mutable_suggestion() {
  // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.suggestion)
  return &suggestion_;
}
inline const ::metrics::OmniboxEventProto_Suggestion& OmniboxEventProto::suggestion(int index) const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.suggestion)
  return suggestion_.Get(index);
}
inline ::metrics::OmniboxEventProto_Suggestion* OmniboxEventProto::add_suggestion() {
  // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.suggestion)
  return suggestion_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto_Suggestion >&
OmniboxEventProto::suggestion() const {
  // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.suggestion)
  return suggestion_;
}

// repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
inline int OmniboxEventProto::provider_info_size() const {
  return provider_info_.size();
}
inline void OmniboxEventProto::clear_provider_info() {
  provider_info_.Clear();
}
inline ::metrics::OmniboxEventProto_ProviderInfo* OmniboxEventProto::mutable_provider_info(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.OmniboxEventProto.provider_info)
  return provider_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto_ProviderInfo >*
OmniboxEventProto::mutable_provider_info() {
  // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.provider_info)
  return &provider_info_;
}
inline const ::metrics::OmniboxEventProto_ProviderInfo& OmniboxEventProto::provider_info(int index) const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.provider_info)
  return provider_info_.Get(index);
}
inline ::metrics::OmniboxEventProto_ProviderInfo* OmniboxEventProto::add_provider_info() {
  // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.provider_info)
  return provider_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto_ProviderInfo >&
OmniboxEventProto::provider_info() const {
  // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.provider_info)
  return provider_info_;
}

// optional bool in_keyword_mode = 19;
inline bool OmniboxEventProto::has_in_keyword_mode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OmniboxEventProto::clear_in_keyword_mode() {
  in_keyword_mode_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool OmniboxEventProto::in_keyword_mode() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.in_keyword_mode)
  return in_keyword_mode_;
}
inline void OmniboxEventProto::set_in_keyword_mode(bool value) {
  _has_bits_[0] |= 0x00008000u;
  in_keyword_mode_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.in_keyword_mode)
}

// optional .metrics.OmniboxEventProto.KeywordModeEntryMethod keyword_mode_entry_method = 20;
inline bool OmniboxEventProto::has_keyword_mode_entry_method() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OmniboxEventProto::clear_keyword_mode_entry_method() {
  keyword_mode_entry_method_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::metrics::OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::keyword_mode_entry_method() const {
  // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.keyword_mode_entry_method)
  return static_cast< ::metrics::OmniboxEventProto_KeywordModeEntryMethod >(keyword_mode_entry_method_);
}
inline void OmniboxEventProto::set_keyword_mode_entry_method(::metrics::OmniboxEventProto_KeywordModeEntryMethod value) {
  assert(::metrics::OmniboxEventProto_KeywordModeEntryMethod_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  keyword_mode_entry_method_ = value;
  // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.keyword_mode_entry_method)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::OmniboxEventProto_Suggestion_ResultType> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::OmniboxEventProto_PageClassification> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::OmniboxEventProto_ModeType> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::OmniboxEventProto_ProviderType> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::OmniboxEventProto_KeywordModeEntryMethod> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_omnibox_5fevent_2eproto
