// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memory_leak_report.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_memory_5fleak_5freport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_memory_5fleak_5freport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_memory_5fleak_5freport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_memory_5fleak_5freport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace metrics {
class MemoryLeakReportProto;
class MemoryLeakReportProtoDefaultTypeInternal;
extern MemoryLeakReportProtoDefaultTypeInternal _MemoryLeakReportProto_default_instance_;
class MemoryLeakReportProto_AllocationBreakdown;
class MemoryLeakReportProto_AllocationBreakdownDefaultTypeInternal;
extern MemoryLeakReportProto_AllocationBreakdownDefaultTypeInternal _MemoryLeakReportProto_AllocationBreakdown_default_instance_;
class MemoryLeakReportProto_MemoryUsageInfo;
class MemoryLeakReportProto_MemoryUsageInfoDefaultTypeInternal;
extern MemoryLeakReportProto_MemoryUsageInfoDefaultTypeInternal _MemoryLeakReportProto_MemoryUsageInfo_default_instance_;
class MemoryLeakReportProto_Params;
class MemoryLeakReportProto_ParamsDefaultTypeInternal;
extern MemoryLeakReportProto_ParamsDefaultTypeInternal _MemoryLeakReportProto_Params_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::MemoryLeakReportProto* Arena::CreateMaybeMessage<::metrics::MemoryLeakReportProto>(Arena*);
template<> ::metrics::MemoryLeakReportProto_AllocationBreakdown* Arena::CreateMaybeMessage<::metrics::MemoryLeakReportProto_AllocationBreakdown>(Arena*);
template<> ::metrics::MemoryLeakReportProto_MemoryUsageInfo* Arena::CreateMaybeMessage<::metrics::MemoryLeakReportProto_MemoryUsageInfo>(Arena*);
template<> ::metrics::MemoryLeakReportProto_Params* Arena::CreateMaybeMessage<::metrics::MemoryLeakReportProto_Params>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum MemoryLeakReportProto_ProcessType : int {
  MemoryLeakReportProto_ProcessType_UNKNOWN_PROCESS = 0,
  MemoryLeakReportProto_ProcessType_BROWSER_PROCESS = 1,
  MemoryLeakReportProto_ProcessType_RENDERER_PROCESS = 2
};
bool MemoryLeakReportProto_ProcessType_IsValid(int value);
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto_ProcessType_ProcessType_MIN = MemoryLeakReportProto_ProcessType_UNKNOWN_PROCESS;
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto_ProcessType_ProcessType_MAX = MemoryLeakReportProto_ProcessType_RENDERER_PROCESS;
constexpr int MemoryLeakReportProto_ProcessType_ProcessType_ARRAYSIZE = MemoryLeakReportProto_ProcessType_ProcessType_MAX + 1;

const std::string& MemoryLeakReportProto_ProcessType_Name(MemoryLeakReportProto_ProcessType value);
template<typename T>
inline const std::string& MemoryLeakReportProto_ProcessType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemoryLeakReportProto_ProcessType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemoryLeakReportProto_ProcessType_Name.");
  return MemoryLeakReportProto_ProcessType_Name(static_cast<MemoryLeakReportProto_ProcessType>(enum_t_value));
}
bool MemoryLeakReportProto_ProcessType_Parse(
    const std::string& name, MemoryLeakReportProto_ProcessType* value);
// ===================================================================

class MemoryLeakReportProto_Params :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.MemoryLeakReportProto.Params) */ {
 public:
  MemoryLeakReportProto_Params();
  virtual ~MemoryLeakReportProto_Params();

  MemoryLeakReportProto_Params(const MemoryLeakReportProto_Params& from);
  MemoryLeakReportProto_Params(MemoryLeakReportProto_Params&& from) noexcept
    : MemoryLeakReportProto_Params() {
    *this = ::std::move(from);
  }

  inline MemoryLeakReportProto_Params& operator=(const MemoryLeakReportProto_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryLeakReportProto_Params& operator=(MemoryLeakReportProto_Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemoryLeakReportProto_Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryLeakReportProto_Params* internal_default_instance() {
    return reinterpret_cast<const MemoryLeakReportProto_Params*>(
               &_MemoryLeakReportProto_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemoryLeakReportProto_Params& a, MemoryLeakReportProto_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryLeakReportProto_Params* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryLeakReportProto_Params* New() const final {
    return CreateMaybeMessage<MemoryLeakReportProto_Params>(nullptr);
  }

  MemoryLeakReportProto_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryLeakReportProto_Params>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemoryLeakReportProto_Params& from);
  void MergeFrom(const MemoryLeakReportProto_Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryLeakReportProto_Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.MemoryLeakReportProto.Params";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplingRateFieldNumber = 1,
    kMaxStackDepthFieldNumber = 2,
    kAnalysisIntervalBytesFieldNumber = 3,
    kSizeSuspicionThresholdFieldNumber = 4,
    kCallStackSuspicionThresholdFieldNumber = 5,
  };
  // optional float sampling_rate = 1;
  bool has_sampling_rate() const;
  void clear_sampling_rate();
  float sampling_rate() const;
  void set_sampling_rate(float value);

  // optional uint32 max_stack_depth = 2;
  bool has_max_stack_depth() const;
  void clear_max_stack_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_stack_depth() const;
  void set_max_stack_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 analysis_interval_bytes = 3;
  bool has_analysis_interval_bytes() const;
  void clear_analysis_interval_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 analysis_interval_bytes() const;
  void set_analysis_interval_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 size_suspicion_threshold = 4;
  bool has_size_suspicion_threshold() const;
  void clear_size_suspicion_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 size_suspicion_threshold() const;
  void set_size_suspicion_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 call_stack_suspicion_threshold = 5;
  bool has_call_stack_suspicion_threshold() const;
  void clear_call_stack_suspicion_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 call_stack_suspicion_threshold() const;
  void set_call_stack_suspicion_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.MemoryLeakReportProto.Params)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float sampling_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_stack_depth_;
  ::PROTOBUF_NAMESPACE_ID::uint64 analysis_interval_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_suspicion_threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 call_stack_suspicion_threshold_;
  friend struct ::TableStruct_memory_5fleak_5freport_2eproto;
};
// -------------------------------------------------------------------

class MemoryLeakReportProto_AllocationBreakdown :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.MemoryLeakReportProto.AllocationBreakdown) */ {
 public:
  MemoryLeakReportProto_AllocationBreakdown();
  virtual ~MemoryLeakReportProto_AllocationBreakdown();

  MemoryLeakReportProto_AllocationBreakdown(const MemoryLeakReportProto_AllocationBreakdown& from);
  MemoryLeakReportProto_AllocationBreakdown(MemoryLeakReportProto_AllocationBreakdown&& from) noexcept
    : MemoryLeakReportProto_AllocationBreakdown() {
    *this = ::std::move(from);
  }

  inline MemoryLeakReportProto_AllocationBreakdown& operator=(const MemoryLeakReportProto_AllocationBreakdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryLeakReportProto_AllocationBreakdown& operator=(MemoryLeakReportProto_AllocationBreakdown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemoryLeakReportProto_AllocationBreakdown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryLeakReportProto_AllocationBreakdown* internal_default_instance() {
    return reinterpret_cast<const MemoryLeakReportProto_AllocationBreakdown*>(
               &_MemoryLeakReportProto_AllocationBreakdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemoryLeakReportProto_AllocationBreakdown& a, MemoryLeakReportProto_AllocationBreakdown& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryLeakReportProto_AllocationBreakdown* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryLeakReportProto_AllocationBreakdown* New() const final {
    return CreateMaybeMessage<MemoryLeakReportProto_AllocationBreakdown>(nullptr);
  }

  MemoryLeakReportProto_AllocationBreakdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryLeakReportProto_AllocationBreakdown>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemoryLeakReportProto_AllocationBreakdown& from);
  void MergeFrom(const MemoryLeakReportProto_AllocationBreakdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryLeakReportProto_AllocationBreakdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.MemoryLeakReportProto.AllocationBreakdown";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountsBySizeFieldNumber = 1,
    kCountForCallStackFieldNumber = 2,
  };
  // repeated uint32 counts_by_size = 1;
  int counts_by_size_size() const;
  void clear_counts_by_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 counts_by_size(int index) const;
  void set_counts_by_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_counts_by_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      counts_by_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_counts_by_size();

  // optional uint32 count_for_call_stack = 2;
  bool has_count_for_call_stack() const;
  void clear_count_for_call_stack();
  ::PROTOBUF_NAMESPACE_ID::uint32 count_for_call_stack() const;
  void set_count_for_call_stack(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.MemoryLeakReportProto.AllocationBreakdown)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > counts_by_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_for_call_stack_;
  friend struct ::TableStruct_memory_5fleak_5freport_2eproto;
};
// -------------------------------------------------------------------

class MemoryLeakReportProto_MemoryUsageInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.MemoryLeakReportProto.MemoryUsageInfo) */ {
 public:
  MemoryLeakReportProto_MemoryUsageInfo();
  virtual ~MemoryLeakReportProto_MemoryUsageInfo();

  MemoryLeakReportProto_MemoryUsageInfo(const MemoryLeakReportProto_MemoryUsageInfo& from);
  MemoryLeakReportProto_MemoryUsageInfo(MemoryLeakReportProto_MemoryUsageInfo&& from) noexcept
    : MemoryLeakReportProto_MemoryUsageInfo() {
    *this = ::std::move(from);
  }

  inline MemoryLeakReportProto_MemoryUsageInfo& operator=(const MemoryLeakReportProto_MemoryUsageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryLeakReportProto_MemoryUsageInfo& operator=(MemoryLeakReportProto_MemoryUsageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemoryLeakReportProto_MemoryUsageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryLeakReportProto_MemoryUsageInfo* internal_default_instance() {
    return reinterpret_cast<const MemoryLeakReportProto_MemoryUsageInfo*>(
               &_MemoryLeakReportProto_MemoryUsageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MemoryLeakReportProto_MemoryUsageInfo& a, MemoryLeakReportProto_MemoryUsageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryLeakReportProto_MemoryUsageInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryLeakReportProto_MemoryUsageInfo* New() const final {
    return CreateMaybeMessage<MemoryLeakReportProto_MemoryUsageInfo>(nullptr);
  }

  MemoryLeakReportProto_MemoryUsageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryLeakReportProto_MemoryUsageInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemoryLeakReportProto_MemoryUsageInfo& from);
  void MergeFrom(const MemoryLeakReportProto_MemoryUsageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryLeakReportProto_MemoryUsageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.MemoryLeakReportProto.MemoryUsageInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableRamMbFieldNumber = 1,
    kChromeRamUsageMbFieldNumber = 2,
  };
  // optional uint64 available_ram_mb = 1;
  bool has_available_ram_mb() const;
  void clear_available_ram_mb();
  ::PROTOBUF_NAMESPACE_ID::uint64 available_ram_mb() const;
  void set_available_ram_mb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 chrome_ram_usage_mb = 2;
  bool has_chrome_ram_usage_mb() const;
  void clear_chrome_ram_usage_mb();
  ::PROTOBUF_NAMESPACE_ID::uint64 chrome_ram_usage_mb() const;
  void set_chrome_ram_usage_mb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.MemoryLeakReportProto.MemoryUsageInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 available_ram_mb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chrome_ram_usage_mb_;
  friend struct ::TableStruct_memory_5fleak_5freport_2eproto;
};
// -------------------------------------------------------------------

class MemoryLeakReportProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.MemoryLeakReportProto) */ {
 public:
  MemoryLeakReportProto();
  virtual ~MemoryLeakReportProto();

  MemoryLeakReportProto(const MemoryLeakReportProto& from);
  MemoryLeakReportProto(MemoryLeakReportProto&& from) noexcept
    : MemoryLeakReportProto() {
    *this = ::std::move(from);
  }

  inline MemoryLeakReportProto& operator=(const MemoryLeakReportProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryLeakReportProto& operator=(MemoryLeakReportProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemoryLeakReportProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryLeakReportProto* internal_default_instance() {
    return reinterpret_cast<const MemoryLeakReportProto*>(
               &_MemoryLeakReportProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MemoryLeakReportProto& a, MemoryLeakReportProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryLeakReportProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryLeakReportProto* New() const final {
    return CreateMaybeMessage<MemoryLeakReportProto>(nullptr);
  }

  MemoryLeakReportProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryLeakReportProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemoryLeakReportProto& from);
  void MergeFrom(const MemoryLeakReportProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryLeakReportProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.MemoryLeakReportProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemoryLeakReportProto_Params Params;
  typedef MemoryLeakReportProto_AllocationBreakdown AllocationBreakdown;
  typedef MemoryLeakReportProto_MemoryUsageInfo MemoryUsageInfo;

  typedef MemoryLeakReportProto_ProcessType ProcessType;
  static constexpr ProcessType UNKNOWN_PROCESS =
    MemoryLeakReportProto_ProcessType_UNKNOWN_PROCESS;
  static constexpr ProcessType BROWSER_PROCESS =
    MemoryLeakReportProto_ProcessType_BROWSER_PROCESS;
  static constexpr ProcessType RENDERER_PROCESS =
    MemoryLeakReportProto_ProcessType_RENDERER_PROCESS;
  static inline bool ProcessType_IsValid(int value) {
    return MemoryLeakReportProto_ProcessType_IsValid(value);
  }
  static constexpr ProcessType ProcessType_MIN =
    MemoryLeakReportProto_ProcessType_ProcessType_MIN;
  static constexpr ProcessType ProcessType_MAX =
    MemoryLeakReportProto_ProcessType_ProcessType_MAX;
  static constexpr int ProcessType_ARRAYSIZE =
    MemoryLeakReportProto_ProcessType_ProcessType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ProcessType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcessType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcessType_Name.");
    return MemoryLeakReportProto_ProcessType_Name(enum_t_value);
  }
  static inline bool ProcessType_Parse(const std::string& name,
      ProcessType* value) {
    return MemoryLeakReportProto_ProcessType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCallStackFieldNumber = 1,
    kAllocBreakdownHistoryFieldNumber = 4,
    kBuildIdFieldNumber = 6,
    kParamsFieldNumber = 3,
    kMemoryUsageInfoFieldNumber = 9,
    kSizeBytesFieldNumber = 2,
    kSourceProcessFieldNumber = 5,
    kNumRisingIntervalsFieldNumber = 7,
    kNumAllocsIncreaseFieldNumber = 8,
  };
  // repeated uint64 call_stack = 1;
  int call_stack_size() const;
  void clear_call_stack();
  ::PROTOBUF_NAMESPACE_ID::uint64 call_stack(int index) const;
  void set_call_stack(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_call_stack(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      call_stack() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_call_stack();

  // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
  int alloc_breakdown_history_size() const;
  void clear_alloc_breakdown_history();
  ::metrics::MemoryLeakReportProto_AllocationBreakdown* mutable_alloc_breakdown_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::MemoryLeakReportProto_AllocationBreakdown >*
      mutable_alloc_breakdown_history();
  const ::metrics::MemoryLeakReportProto_AllocationBreakdown& alloc_breakdown_history(int index) const;
  ::metrics::MemoryLeakReportProto_AllocationBreakdown* add_alloc_breakdown_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::MemoryLeakReportProto_AllocationBreakdown >&
      alloc_breakdown_history() const;

  // optional bytes build_id = 6;
  bool has_build_id() const;
  void clear_build_id();
  const std::string& build_id() const;
  void set_build_id(const std::string& value);
  void set_build_id(std::string&& value);
  void set_build_id(const char* value);
  void set_build_id(const void* value, size_t size);
  std::string* mutable_build_id();
  std::string* release_build_id();
  void set_allocated_build_id(std::string* build_id);

  // optional .metrics.MemoryLeakReportProto.Params params = 3;
  bool has_params() const;
  void clear_params();
  const ::metrics::MemoryLeakReportProto_Params& params() const;
  ::metrics::MemoryLeakReportProto_Params* release_params();
  ::metrics::MemoryLeakReportProto_Params* mutable_params();
  void set_allocated_params(::metrics::MemoryLeakReportProto_Params* params);

  // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
  bool has_memory_usage_info() const;
  void clear_memory_usage_info();
  const ::metrics::MemoryLeakReportProto_MemoryUsageInfo& memory_usage_info() const;
  ::metrics::MemoryLeakReportProto_MemoryUsageInfo* release_memory_usage_info();
  ::metrics::MemoryLeakReportProto_MemoryUsageInfo* mutable_memory_usage_info();
  void set_allocated_memory_usage_info(::metrics::MemoryLeakReportProto_MemoryUsageInfo* memory_usage_info);

  // optional uint32 size_bytes = 2;
  bool has_size_bytes() const;
  void clear_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 size_bytes() const;
  void set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
  bool has_source_process() const;
  void clear_source_process();
  ::metrics::MemoryLeakReportProto_ProcessType source_process() const;
  void set_source_process(::metrics::MemoryLeakReportProto_ProcessType value);

  // optional uint32 num_rising_intervals = 7;
  bool has_num_rising_intervals() const;
  void clear_num_rising_intervals();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rising_intervals() const;
  void set_num_rising_intervals(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_allocs_increase = 8;
  bool has_num_allocs_increase() const;
  void clear_num_allocs_increase();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_allocs_increase() const;
  void set_num_allocs_increase(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.MemoryLeakReportProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > call_stack_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::MemoryLeakReportProto_AllocationBreakdown > alloc_breakdown_history_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_id_;
  ::metrics::MemoryLeakReportProto_Params* params_;
  ::metrics::MemoryLeakReportProto_MemoryUsageInfo* memory_usage_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_bytes_;
  int source_process_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rising_intervals_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_allocs_increase_;
  friend struct ::TableStruct_memory_5fleak_5freport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemoryLeakReportProto_Params

// optional float sampling_rate = 1;
inline bool MemoryLeakReportProto_Params::has_sampling_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryLeakReportProto_Params::clear_sampling_rate() {
  sampling_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float MemoryLeakReportProto_Params::sampling_rate() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.sampling_rate)
  return sampling_rate_;
}
inline void MemoryLeakReportProto_Params::set_sampling_rate(float value) {
  _has_bits_[0] |= 0x00000001u;
  sampling_rate_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.sampling_rate)
}

// optional uint32 max_stack_depth = 2;
inline bool MemoryLeakReportProto_Params::has_max_stack_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryLeakReportProto_Params::clear_max_stack_depth() {
  max_stack_depth_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryLeakReportProto_Params::max_stack_depth() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.max_stack_depth)
  return max_stack_depth_;
}
inline void MemoryLeakReportProto_Params::set_max_stack_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_stack_depth_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.max_stack_depth)
}

// optional uint64 analysis_interval_bytes = 3;
inline bool MemoryLeakReportProto_Params::has_analysis_interval_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryLeakReportProto_Params::clear_analysis_interval_bytes() {
  analysis_interval_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryLeakReportProto_Params::analysis_interval_bytes() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.analysis_interval_bytes)
  return analysis_interval_bytes_;
}
inline void MemoryLeakReportProto_Params::set_analysis_interval_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  analysis_interval_bytes_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.analysis_interval_bytes)
}

// optional uint32 size_suspicion_threshold = 4;
inline bool MemoryLeakReportProto_Params::has_size_suspicion_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryLeakReportProto_Params::clear_size_suspicion_threshold() {
  size_suspicion_threshold_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryLeakReportProto_Params::size_suspicion_threshold() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.size_suspicion_threshold)
  return size_suspicion_threshold_;
}
inline void MemoryLeakReportProto_Params::set_size_suspicion_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  size_suspicion_threshold_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.size_suspicion_threshold)
}

// optional uint32 call_stack_suspicion_threshold = 5;
inline bool MemoryLeakReportProto_Params::has_call_stack_suspicion_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemoryLeakReportProto_Params::clear_call_stack_suspicion_threshold() {
  call_stack_suspicion_threshold_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryLeakReportProto_Params::call_stack_suspicion_threshold() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.call_stack_suspicion_threshold)
  return call_stack_suspicion_threshold_;
}
inline void MemoryLeakReportProto_Params::set_call_stack_suspicion_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  call_stack_suspicion_threshold_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.call_stack_suspicion_threshold)
}

// -------------------------------------------------------------------

// MemoryLeakReportProto_AllocationBreakdown

// repeated uint32 counts_by_size = 1;
inline int MemoryLeakReportProto_AllocationBreakdown::counts_by_size_size() const {
  return counts_by_size_.size();
}
inline void MemoryLeakReportProto_AllocationBreakdown::clear_counts_by_size() {
  counts_by_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryLeakReportProto_AllocationBreakdown::counts_by_size(int index) const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
  return counts_by_size_.Get(index);
}
inline void MemoryLeakReportProto_AllocationBreakdown::set_counts_by_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  counts_by_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
}
inline void MemoryLeakReportProto_AllocationBreakdown::add_counts_by_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  counts_by_size_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MemoryLeakReportProto_AllocationBreakdown::counts_by_size() const {
  // @@protoc_insertion_point(field_list:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
  return counts_by_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MemoryLeakReportProto_AllocationBreakdown::mutable_counts_by_size() {
  // @@protoc_insertion_point(field_mutable_list:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
  return &counts_by_size_;
}

// optional uint32 count_for_call_stack = 2;
inline bool MemoryLeakReportProto_AllocationBreakdown::has_count_for_call_stack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryLeakReportProto_AllocationBreakdown::clear_count_for_call_stack() {
  count_for_call_stack_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryLeakReportProto_AllocationBreakdown::count_for_call_stack() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.AllocationBreakdown.count_for_call_stack)
  return count_for_call_stack_;
}
inline void MemoryLeakReportProto_AllocationBreakdown::set_count_for_call_stack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_for_call_stack_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.AllocationBreakdown.count_for_call_stack)
}

// -------------------------------------------------------------------

// MemoryLeakReportProto_MemoryUsageInfo

// optional uint64 available_ram_mb = 1;
inline bool MemoryLeakReportProto_MemoryUsageInfo::has_available_ram_mb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryLeakReportProto_MemoryUsageInfo::clear_available_ram_mb() {
  available_ram_mb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryLeakReportProto_MemoryUsageInfo::available_ram_mb() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.MemoryUsageInfo.available_ram_mb)
  return available_ram_mb_;
}
inline void MemoryLeakReportProto_MemoryUsageInfo::set_available_ram_mb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  available_ram_mb_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.MemoryUsageInfo.available_ram_mb)
}

// optional uint64 chrome_ram_usage_mb = 2;
inline bool MemoryLeakReportProto_MemoryUsageInfo::has_chrome_ram_usage_mb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryLeakReportProto_MemoryUsageInfo::clear_chrome_ram_usage_mb() {
  chrome_ram_usage_mb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryLeakReportProto_MemoryUsageInfo::chrome_ram_usage_mb() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.MemoryUsageInfo.chrome_ram_usage_mb)
  return chrome_ram_usage_mb_;
}
inline void MemoryLeakReportProto_MemoryUsageInfo::set_chrome_ram_usage_mb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  chrome_ram_usage_mb_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.MemoryUsageInfo.chrome_ram_usage_mb)
}

// -------------------------------------------------------------------

// MemoryLeakReportProto

// repeated uint64 call_stack = 1;
inline int MemoryLeakReportProto::call_stack_size() const {
  return call_stack_.size();
}
inline void MemoryLeakReportProto::clear_call_stack() {
  call_stack_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryLeakReportProto::call_stack(int index) const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.call_stack)
  return call_stack_.Get(index);
}
inline void MemoryLeakReportProto::set_call_stack(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  call_stack_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.call_stack)
}
inline void MemoryLeakReportProto::add_call_stack(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  call_stack_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.MemoryLeakReportProto.call_stack)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
MemoryLeakReportProto::call_stack() const {
  // @@protoc_insertion_point(field_list:metrics.MemoryLeakReportProto.call_stack)
  return call_stack_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
MemoryLeakReportProto::mutable_call_stack() {
  // @@protoc_insertion_point(field_mutable_list:metrics.MemoryLeakReportProto.call_stack)
  return &call_stack_;
}

// optional uint32 size_bytes = 2;
inline bool MemoryLeakReportProto::has_size_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryLeakReportProto::clear_size_bytes() {
  size_bytes_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryLeakReportProto::size_bytes() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.size_bytes)
  return size_bytes_;
}
inline void MemoryLeakReportProto::set_size_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  size_bytes_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.size_bytes)
}

// optional .metrics.MemoryLeakReportProto.Params params = 3;
inline bool MemoryLeakReportProto::has_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryLeakReportProto::clear_params() {
  if (params_ != nullptr) params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::metrics::MemoryLeakReportProto_Params& MemoryLeakReportProto::params() const {
  const ::metrics::MemoryLeakReportProto_Params* p = params_;
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.params)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::MemoryLeakReportProto_Params*>(
      &::metrics::_MemoryLeakReportProto_Params_default_instance_);
}
inline ::metrics::MemoryLeakReportProto_Params* MemoryLeakReportProto::release_params() {
  // @@protoc_insertion_point(field_release:metrics.MemoryLeakReportProto.params)
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::MemoryLeakReportProto_Params* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::metrics::MemoryLeakReportProto_Params* MemoryLeakReportProto::mutable_params() {
  _has_bits_[0] |= 0x00000002u;
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::MemoryLeakReportProto_Params>(GetArenaNoVirtual());
    params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.params)
  return params_;
}
inline void MemoryLeakReportProto::set_allocated_params(::metrics::MemoryLeakReportProto_Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:metrics.MemoryLeakReportProto.params)
}

// optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
inline bool MemoryLeakReportProto::has_source_process() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemoryLeakReportProto::clear_source_process() {
  source_process_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::metrics::MemoryLeakReportProto_ProcessType MemoryLeakReportProto::source_process() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.source_process)
  return static_cast< ::metrics::MemoryLeakReportProto_ProcessType >(source_process_);
}
inline void MemoryLeakReportProto::set_source_process(::metrics::MemoryLeakReportProto_ProcessType value) {
  assert(::metrics::MemoryLeakReportProto_ProcessType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  source_process_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.source_process)
}

// optional bytes build_id = 6;
inline bool MemoryLeakReportProto::has_build_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryLeakReportProto::clear_build_id() {
  build_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemoryLeakReportProto::build_id() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.build_id)
  return build_id_.GetNoArena();
}
inline void MemoryLeakReportProto::set_build_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  build_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.build_id)
}
inline void MemoryLeakReportProto::set_build_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  build_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.MemoryLeakReportProto.build_id)
}
inline void MemoryLeakReportProto::set_build_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  build_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.MemoryLeakReportProto.build_id)
}
inline void MemoryLeakReportProto::set_build_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  build_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.MemoryLeakReportProto.build_id)
}
inline std::string* MemoryLeakReportProto::mutable_build_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.build_id)
  return build_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemoryLeakReportProto::release_build_id() {
  // @@protoc_insertion_point(field_release:metrics.MemoryLeakReportProto.build_id)
  if (!has_build_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return build_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemoryLeakReportProto::set_allocated_build_id(std::string* build_id) {
  if (build_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  build_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.MemoryLeakReportProto.build_id)
}

// repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
inline int MemoryLeakReportProto::alloc_breakdown_history_size() const {
  return alloc_breakdown_history_.size();
}
inline void MemoryLeakReportProto::clear_alloc_breakdown_history() {
  alloc_breakdown_history_.Clear();
}
inline ::metrics::MemoryLeakReportProto_AllocationBreakdown* MemoryLeakReportProto::mutable_alloc_breakdown_history(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.alloc_breakdown_history)
  return alloc_breakdown_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::MemoryLeakReportProto_AllocationBreakdown >*
MemoryLeakReportProto::mutable_alloc_breakdown_history() {
  // @@protoc_insertion_point(field_mutable_list:metrics.MemoryLeakReportProto.alloc_breakdown_history)
  return &alloc_breakdown_history_;
}
inline const ::metrics::MemoryLeakReportProto_AllocationBreakdown& MemoryLeakReportProto::alloc_breakdown_history(int index) const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.alloc_breakdown_history)
  return alloc_breakdown_history_.Get(index);
}
inline ::metrics::MemoryLeakReportProto_AllocationBreakdown* MemoryLeakReportProto::add_alloc_breakdown_history() {
  // @@protoc_insertion_point(field_add:metrics.MemoryLeakReportProto.alloc_breakdown_history)
  return alloc_breakdown_history_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::MemoryLeakReportProto_AllocationBreakdown >&
MemoryLeakReportProto::alloc_breakdown_history() const {
  // @@protoc_insertion_point(field_list:metrics.MemoryLeakReportProto.alloc_breakdown_history)
  return alloc_breakdown_history_;
}

// optional uint32 num_rising_intervals = 7;
inline bool MemoryLeakReportProto::has_num_rising_intervals() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemoryLeakReportProto::clear_num_rising_intervals() {
  num_rising_intervals_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryLeakReportProto::num_rising_intervals() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.num_rising_intervals)
  return num_rising_intervals_;
}
inline void MemoryLeakReportProto::set_num_rising_intervals(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_rising_intervals_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.num_rising_intervals)
}

// optional uint32 num_allocs_increase = 8;
inline bool MemoryLeakReportProto::has_num_allocs_increase() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemoryLeakReportProto::clear_num_allocs_increase() {
  num_allocs_increase_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryLeakReportProto::num_allocs_increase() const {
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.num_allocs_increase)
  return num_allocs_increase_;
}
inline void MemoryLeakReportProto::set_num_allocs_increase(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_allocs_increase_ = value;
  // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.num_allocs_increase)
}

// optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
inline bool MemoryLeakReportProto::has_memory_usage_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryLeakReportProto::clear_memory_usage_info() {
  if (memory_usage_info_ != nullptr) memory_usage_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::metrics::MemoryLeakReportProto_MemoryUsageInfo& MemoryLeakReportProto::memory_usage_info() const {
  const ::metrics::MemoryLeakReportProto_MemoryUsageInfo* p = memory_usage_info_;
  // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.memory_usage_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::MemoryLeakReportProto_MemoryUsageInfo*>(
      &::metrics::_MemoryLeakReportProto_MemoryUsageInfo_default_instance_);
}
inline ::metrics::MemoryLeakReportProto_MemoryUsageInfo* MemoryLeakReportProto::release_memory_usage_info() {
  // @@protoc_insertion_point(field_release:metrics.MemoryLeakReportProto.memory_usage_info)
  _has_bits_[0] &= ~0x00000004u;
  ::metrics::MemoryLeakReportProto_MemoryUsageInfo* temp = memory_usage_info_;
  memory_usage_info_ = nullptr;
  return temp;
}
inline ::metrics::MemoryLeakReportProto_MemoryUsageInfo* MemoryLeakReportProto::mutable_memory_usage_info() {
  _has_bits_[0] |= 0x00000004u;
  if (memory_usage_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::MemoryLeakReportProto_MemoryUsageInfo>(GetArenaNoVirtual());
    memory_usage_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.memory_usage_info)
  return memory_usage_info_;
}
inline void MemoryLeakReportProto::set_allocated_memory_usage_info(::metrics::MemoryLeakReportProto_MemoryUsageInfo* memory_usage_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete memory_usage_info_;
  }
  if (memory_usage_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memory_usage_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_usage_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  memory_usage_info_ = memory_usage_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.MemoryLeakReportProto.memory_usage_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::MemoryLeakReportProto_ProcessType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_memory_5fleak_5freport_2eproto
