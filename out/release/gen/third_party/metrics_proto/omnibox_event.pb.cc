// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: omnibox_event.proto

#include "omnibox_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_omnibox_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OmniboxEventProto_ProviderInfo_omnibox_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_omnibox_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OmniboxEventProto_Suggestion_omnibox_5fevent_2eproto;
namespace metrics {
class OmniboxEventProto_SuggestionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OmniboxEventProto_Suggestion> _instance;
} _OmniboxEventProto_Suggestion_default_instance_;
class OmniboxEventProto_ProviderInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OmniboxEventProto_ProviderInfo> _instance;
} _OmniboxEventProto_ProviderInfo_default_instance_;
class OmniboxEventProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OmniboxEventProto> _instance;
} _OmniboxEventProto_default_instance_;
}  // namespace metrics
static void InitDefaultsscc_info_OmniboxEventProto_omnibox_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_OmniboxEventProto_default_instance_;
    new (ptr) ::metrics::OmniboxEventProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::OmniboxEventProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OmniboxEventProto_omnibox_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_OmniboxEventProto_omnibox_5fevent_2eproto}, {
      &scc_info_OmniboxEventProto_Suggestion_omnibox_5fevent_2eproto.base,
      &scc_info_OmniboxEventProto_ProviderInfo_omnibox_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_OmniboxEventProto_ProviderInfo_omnibox_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_OmniboxEventProto_ProviderInfo_default_instance_;
    new (ptr) ::metrics::OmniboxEventProto_ProviderInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::OmniboxEventProto_ProviderInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OmniboxEventProto_ProviderInfo_omnibox_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OmniboxEventProto_ProviderInfo_omnibox_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_OmniboxEventProto_Suggestion_omnibox_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_OmniboxEventProto_Suggestion_default_instance_;
    new (ptr) ::metrics::OmniboxEventProto_Suggestion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::OmniboxEventProto_Suggestion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OmniboxEventProto_Suggestion_omnibox_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OmniboxEventProto_Suggestion_omnibox_5fevent_2eproto}, {}};

namespace metrics {
bool OmniboxEventProto_Suggestion_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_Suggestion_ResultType_strings[30] = {};

static const char OmniboxEventProto_Suggestion_ResultType_names[] =
  "APP"
  "APP_RESULT"
  "BOOKMARK_TITLE"
  "CALCULATOR"
  "CLIPBOARD_IMAGE"
  "CLIPBOARD_TEXT"
  "CLIPBOARD_URL"
  "CONTACT"
  "DOCUMENT"
  "EXTENSION_APP"
  "HISTORY_BODY"
  "HISTORY_KEYWORD"
  "HISTORY_TITLE"
  "HISTORY_URL"
  "LEGACY_ON_DEVICE"
  "NAVSUGGEST"
  "NAVSUGGEST_PERSONALIZED"
  "PHYSICAL_WEB"
  "PHYSICAL_WEB_OVERFLOW"
  "SEARCH_HISTORY"
  "SEARCH_OTHER_ENGINE"
  "SEARCH_SUGGEST"
  "SEARCH_SUGGEST_ANSWER"
  "SEARCH_SUGGEST_ENTITY"
  "SEARCH_SUGGEST_PERSONALIZED"
  "SEARCH_SUGGEST_PROFILE"
  "SEARCH_SUGGEST_TAIL"
  "SEARCH_WHAT_YOU_TYPED"
  "UNKNOWN_RESULT_TYPE"
  "URL_WHAT_YOU_TYPED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_Suggestion_ResultType_entries[] = {
  { {OmniboxEventProto_Suggestion_ResultType_names + 0, 3}, 19 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 3, 10}, 18 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 13, 14}, 13 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 27, 10}, 23 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 37, 15}, 29 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 52, 14}, 28 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 66, 13}, 24 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 79, 7}, 12 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 86, 8}, 27 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 94, 13}, 11 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 107, 12}, 4 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 119, 15}, 5 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 134, 13}, 3 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 147, 11}, 2 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 158, 16}, 20 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 174, 10}, 6 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 184, 23}, 21 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 207, 12}, 25 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 219, 21}, 26 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 240, 14}, 8 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 254, 19}, 10 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 273, 14}, 9 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 287, 21}, 22 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 308, 21}, 14 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 329, 27}, 16 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 356, 22}, 17 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 378, 19}, 15 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 397, 21}, 7 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 418, 19}, 0 },
  { {OmniboxEventProto_Suggestion_ResultType_names + 437, 18}, 1 },
};

static const int OmniboxEventProto_Suggestion_ResultType_entries_by_number[] = {
  28, // 0 -> UNKNOWN_RESULT_TYPE
  29, // 1 -> URL_WHAT_YOU_TYPED
  13, // 2 -> HISTORY_URL
  12, // 3 -> HISTORY_TITLE
  10, // 4 -> HISTORY_BODY
  11, // 5 -> HISTORY_KEYWORD
  15, // 6 -> NAVSUGGEST
  27, // 7 -> SEARCH_WHAT_YOU_TYPED
  19, // 8 -> SEARCH_HISTORY
  21, // 9 -> SEARCH_SUGGEST
  20, // 10 -> SEARCH_OTHER_ENGINE
  9, // 11 -> EXTENSION_APP
  7, // 12 -> CONTACT
  2, // 13 -> BOOKMARK_TITLE
  23, // 14 -> SEARCH_SUGGEST_ENTITY
  26, // 15 -> SEARCH_SUGGEST_TAIL
  24, // 16 -> SEARCH_SUGGEST_PERSONALIZED
  25, // 17 -> SEARCH_SUGGEST_PROFILE
  1, // 18 -> APP_RESULT
  0, // 19 -> APP
  14, // 20 -> LEGACY_ON_DEVICE
  16, // 21 -> NAVSUGGEST_PERSONALIZED
  22, // 22 -> SEARCH_SUGGEST_ANSWER
  3, // 23 -> CALCULATOR
  6, // 24 -> CLIPBOARD_URL
  17, // 25 -> PHYSICAL_WEB
  18, // 26 -> PHYSICAL_WEB_OVERFLOW
  8, // 27 -> DOCUMENT
  5, // 28 -> CLIPBOARD_TEXT
  4, // 29 -> CLIPBOARD_IMAGE
};

const std::string& OmniboxEventProto_Suggestion_ResultType_Name(
    OmniboxEventProto_Suggestion_ResultType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_Suggestion_ResultType_entries,
          OmniboxEventProto_Suggestion_ResultType_entries_by_number,
          30, OmniboxEventProto_Suggestion_ResultType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_Suggestion_ResultType_entries,
      OmniboxEventProto_Suggestion_ResultType_entries_by_number,
      30, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_Suggestion_ResultType_strings[idx].get();
}
bool OmniboxEventProto_Suggestion_ResultType_Parse(
    const std::string& name, OmniboxEventProto_Suggestion_ResultType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_Suggestion_ResultType_entries, 30, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_Suggestion_ResultType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::UNKNOWN_RESULT_TYPE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::URL_WHAT_YOU_TYPED;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_URL;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_TITLE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_BODY;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_KEYWORD;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::NAVSUGGEST;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_WHAT_YOU_TYPED;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_HISTORY;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_OTHER_ENGINE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::EXTENSION_APP;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CONTACT;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::BOOKMARK_TITLE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_ENTITY;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_TAIL;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_PERSONALIZED;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_PROFILE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::APP_RESULT;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::APP;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::LEGACY_ON_DEVICE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::NAVSUGGEST_PERSONALIZED;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_ANSWER;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CALCULATOR;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CLIPBOARD_URL;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::PHYSICAL_WEB;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::PHYSICAL_WEB_OVERFLOW;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::DOCUMENT;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CLIPBOARD_TEXT;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CLIPBOARD_IMAGE;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::ResultType_MIN;
constexpr OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::ResultType_MAX;
constexpr int OmniboxEventProto_Suggestion::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool OmniboxEventProto_PageClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_PageClassification_strings[16] = {};

static const char OmniboxEventProto_PageClassification_names[] =
  "APP_HOME"
  "APP_MAPS"
  "APP_SEARCH"
  "BLANK"
  "CHROMEOS_APP_LIST"
  "HOME_PAGE"
  "INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS"
  "INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS"
  "INVALID_SPEC"
  "NTP"
  "NTP_REALBOX"
  "OBSOLETE_INSTANT_NTP"
  "OTHER"
  "SEARCH_BUTTON_AS_STARTING_FOCUS"
  "SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT"
  "SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_PageClassification_entries[] = {
  { {OmniboxEventProto_PageClassification_names + 0, 8}, 10 },
  { {OmniboxEventProto_PageClassification_names + 8, 8}, 12 },
  { {OmniboxEventProto_PageClassification_names + 16, 10}, 11 },
  { {OmniboxEventProto_PageClassification_names + 26, 5}, 2 },
  { {OmniboxEventProto_PageClassification_names + 31, 17}, 14 },
  { {OmniboxEventProto_PageClassification_names + 48, 9}, 3 },
  { {OmniboxEventProto_PageClassification_names + 57, 42}, 8 },
  { {OmniboxEventProto_PageClassification_names + 99, 42}, 7 },
  { {OmniboxEventProto_PageClassification_names + 141, 12}, 0 },
  { {OmniboxEventProto_PageClassification_names + 153, 3}, 1 },
  { {OmniboxEventProto_PageClassification_names + 156, 11}, 15 },
  { {OmniboxEventProto_PageClassification_names + 167, 20}, 5 },
  { {OmniboxEventProto_PageClassification_names + 187, 5}, 4 },
  { {OmniboxEventProto_PageClassification_names + 192, 31}, 13 },
  { {OmniboxEventProto_PageClassification_names + 223, 48}, 6 },
  { {OmniboxEventProto_PageClassification_names + 271, 45}, 9 },
};

static const int OmniboxEventProto_PageClassification_entries_by_number[] = {
  8, // 0 -> INVALID_SPEC
  9, // 1 -> NTP
  3, // 2 -> BLANK
  5, // 3 -> HOME_PAGE
  12, // 4 -> OTHER
  11, // 5 -> OBSOLETE_INSTANT_NTP
  14, // 6 -> SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT
  7, // 7 -> INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS
  6, // 8 -> INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS
  15, // 9 -> SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT
  0, // 10 -> APP_HOME
  2, // 11 -> APP_SEARCH
  1, // 12 -> APP_MAPS
  13, // 13 -> SEARCH_BUTTON_AS_STARTING_FOCUS
  4, // 14 -> CHROMEOS_APP_LIST
  10, // 15 -> NTP_REALBOX
};

const std::string& OmniboxEventProto_PageClassification_Name(
    OmniboxEventProto_PageClassification value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_PageClassification_entries,
          OmniboxEventProto_PageClassification_entries_by_number,
          16, OmniboxEventProto_PageClassification_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_PageClassification_entries,
      OmniboxEventProto_PageClassification_entries_by_number,
      16, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_PageClassification_strings[idx].get();
}
bool OmniboxEventProto_PageClassification_Parse(
    const std::string& name, OmniboxEventProto_PageClassification* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_PageClassification_entries, 16, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_PageClassification>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::INVALID_SPEC;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::NTP;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::BLANK;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::HOME_PAGE;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::OTHER;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::OBSOLETE_INSTANT_NTP;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::APP_HOME;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::APP_SEARCH;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::APP_MAPS;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::SEARCH_BUTTON_AS_STARTING_FOCUS;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::CHROMEOS_APP_LIST;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::NTP_REALBOX;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::PageClassification_MIN;
constexpr OmniboxEventProto_PageClassification OmniboxEventProto::PageClassification_MAX;
constexpr int OmniboxEventProto::PageClassification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool OmniboxEventProto_ModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_ModeType_strings[3] = {};

static const char OmniboxEventProto_ModeType_names[] =
  "IMAGE_MODE"
  "UNKNOWN_MODE"
  "WEB_MODE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_ModeType_entries[] = {
  { {OmniboxEventProto_ModeType_names + 0, 10}, 2 },
  { {OmniboxEventProto_ModeType_names + 10, 12}, 0 },
  { {OmniboxEventProto_ModeType_names + 22, 8}, 1 },
};

static const int OmniboxEventProto_ModeType_entries_by_number[] = {
  1, // 0 -> UNKNOWN_MODE
  2, // 1 -> WEB_MODE
  0, // 2 -> IMAGE_MODE
};

const std::string& OmniboxEventProto_ModeType_Name(
    OmniboxEventProto_ModeType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_ModeType_entries,
          OmniboxEventProto_ModeType_entries_by_number,
          3, OmniboxEventProto_ModeType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_ModeType_entries,
      OmniboxEventProto_ModeType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_ModeType_strings[idx].get();
}
bool OmniboxEventProto_ModeType_Parse(
    const std::string& name, OmniboxEventProto_ModeType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_ModeType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_ModeType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OmniboxEventProto_ModeType OmniboxEventProto::UNKNOWN_MODE;
constexpr OmniboxEventProto_ModeType OmniboxEventProto::WEB_MODE;
constexpr OmniboxEventProto_ModeType OmniboxEventProto::IMAGE_MODE;
constexpr OmniboxEventProto_ModeType OmniboxEventProto::ModeType_MIN;
constexpr OmniboxEventProto_ModeType OmniboxEventProto::ModeType_MAX;
constexpr int OmniboxEventProto::ModeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool OmniboxEventProto_ProviderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_ProviderType_strings[19] = {};

static const char OmniboxEventProto_ProviderType_names[] =
  "BOOKMARK"
  "BUILTIN"
  "CLIPBOARD"
  "CONTACT"
  "DOCUMENT"
  "EXTENSION_APPS"
  "HISTORY_CONTENTS"
  "HISTORY_QUICK"
  "HISTORY_URL"
  "KEYWORD"
  "ON_DEVICE"
  "ON_DEVICE_CHROME"
  "ON_DEVICE_HEAD"
  "PHYSICAL_WEB"
  "SEARCH"
  "SHORTCUTS"
  "UNKNOWN_PROVIDER"
  "ZERO_SUGGEST"
  "ZERO_SUGGEST_LOCAL_HISTORY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_ProviderType_entries[] = {
  { {OmniboxEventProto_ProviderType_names + 0, 8}, 10 },
  { {OmniboxEventProto_ProviderType_names + 8, 7}, 6 },
  { {OmniboxEventProto_ProviderType_names + 15, 9}, 14 },
  { {OmniboxEventProto_ProviderType_names + 24, 7}, 9 },
  { {OmniboxEventProto_ProviderType_names + 31, 8}, 16 },
  { {OmniboxEventProto_ProviderType_names + 39, 14}, 8 },
  { {OmniboxEventProto_ProviderType_names + 53, 16}, 2 },
  { {OmniboxEventProto_ProviderType_names + 69, 13}, 3 },
  { {OmniboxEventProto_ProviderType_names + 82, 11}, 1 },
  { {OmniboxEventProto_ProviderType_names + 93, 7}, 5 },
  { {OmniboxEventProto_ProviderType_names + 100, 9}, 12 },
  { {OmniboxEventProto_ProviderType_names + 109, 16}, 13 },
  { {OmniboxEventProto_ProviderType_names + 125, 14}, 17 },
  { {OmniboxEventProto_ProviderType_names + 139, 12}, 15 },
  { {OmniboxEventProto_ProviderType_names + 151, 6}, 4 },
  { {OmniboxEventProto_ProviderType_names + 157, 9}, 7 },
  { {OmniboxEventProto_ProviderType_names + 166, 16}, 0 },
  { {OmniboxEventProto_ProviderType_names + 182, 12}, 11 },
  { {OmniboxEventProto_ProviderType_names + 194, 26}, 18 },
};

static const int OmniboxEventProto_ProviderType_entries_by_number[] = {
  16, // 0 -> UNKNOWN_PROVIDER
  8, // 1 -> HISTORY_URL
  6, // 2 -> HISTORY_CONTENTS
  7, // 3 -> HISTORY_QUICK
  14, // 4 -> SEARCH
  9, // 5 -> KEYWORD
  1, // 6 -> BUILTIN
  15, // 7 -> SHORTCUTS
  5, // 8 -> EXTENSION_APPS
  3, // 9 -> CONTACT
  0, // 10 -> BOOKMARK
  17, // 11 -> ZERO_SUGGEST
  10, // 12 -> ON_DEVICE
  11, // 13 -> ON_DEVICE_CHROME
  2, // 14 -> CLIPBOARD
  13, // 15 -> PHYSICAL_WEB
  4, // 16 -> DOCUMENT
  12, // 17 -> ON_DEVICE_HEAD
  18, // 18 -> ZERO_SUGGEST_LOCAL_HISTORY
};

const std::string& OmniboxEventProto_ProviderType_Name(
    OmniboxEventProto_ProviderType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_ProviderType_entries,
          OmniboxEventProto_ProviderType_entries_by_number,
          19, OmniboxEventProto_ProviderType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_ProviderType_entries,
      OmniboxEventProto_ProviderType_entries_by_number,
      19, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_ProviderType_strings[idx].get();
}
bool OmniboxEventProto_ProviderType_Parse(
    const std::string& name, OmniboxEventProto_ProviderType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_ProviderType_entries, 19, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_ProviderType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::UNKNOWN_PROVIDER;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_URL;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_CONTENTS;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_QUICK;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::SEARCH;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::KEYWORD;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::BUILTIN;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::SHORTCUTS;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::EXTENSION_APPS;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::CONTACT;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::BOOKMARK;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ZERO_SUGGEST;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ON_DEVICE;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ON_DEVICE_CHROME;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::CLIPBOARD;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::PHYSICAL_WEB;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::DOCUMENT;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ON_DEVICE_HEAD;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ZERO_SUGGEST_LOCAL_HISTORY;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ProviderType_MIN;
constexpr OmniboxEventProto_ProviderType OmniboxEventProto::ProviderType_MAX;
constexpr int OmniboxEventProto::ProviderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool OmniboxEventProto_KeywordModeEntryMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OmniboxEventProto_KeywordModeEntryMethod_strings[9] = {};

static const char OmniboxEventProto_KeywordModeEntryMethod_names[] =
  "CLICK_HINT_VIEW"
  "INVALID"
  "KEYBOARD_SHORTCUT"
  "QUESTION_MARK"
  "SELECT_SUGGESTION"
  "SPACE_AT_END"
  "SPACE_IN_MIDDLE"
  "TAB"
  "TAP_HINT_VIEW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OmniboxEventProto_KeywordModeEntryMethod_entries[] = {
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 0, 15}, 6 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 15, 7}, 0 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 22, 17}, 4 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 39, 13}, 5 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 52, 17}, 8 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 69, 12}, 2 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 81, 15}, 3 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 96, 3}, 1 },
  { {OmniboxEventProto_KeywordModeEntryMethod_names + 99, 13}, 7 },
};

static const int OmniboxEventProto_KeywordModeEntryMethod_entries_by_number[] = {
  1, // 0 -> INVALID
  7, // 1 -> TAB
  5, // 2 -> SPACE_AT_END
  6, // 3 -> SPACE_IN_MIDDLE
  2, // 4 -> KEYBOARD_SHORTCUT
  3, // 5 -> QUESTION_MARK
  0, // 6 -> CLICK_HINT_VIEW
  8, // 7 -> TAP_HINT_VIEW
  4, // 8 -> SELECT_SUGGESTION
};

const std::string& OmniboxEventProto_KeywordModeEntryMethod_Name(
    OmniboxEventProto_KeywordModeEntryMethod value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OmniboxEventProto_KeywordModeEntryMethod_entries,
          OmniboxEventProto_KeywordModeEntryMethod_entries_by_number,
          9, OmniboxEventProto_KeywordModeEntryMethod_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OmniboxEventProto_KeywordModeEntryMethod_entries,
      OmniboxEventProto_KeywordModeEntryMethod_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OmniboxEventProto_KeywordModeEntryMethod_strings[idx].get();
}
bool OmniboxEventProto_KeywordModeEntryMethod_Parse(
    const std::string& name, OmniboxEventProto_KeywordModeEntryMethod* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OmniboxEventProto_KeywordModeEntryMethod_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<OmniboxEventProto_KeywordModeEntryMethod>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::INVALID;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::TAB;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::SPACE_AT_END;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::SPACE_IN_MIDDLE;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::KEYBOARD_SHORTCUT;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::QUESTION_MARK;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::CLICK_HINT_VIEW;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::TAP_HINT_VIEW;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::SELECT_SUGGESTION;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::KeywordModeEntryMethod_MIN;
constexpr OmniboxEventProto_KeywordModeEntryMethod OmniboxEventProto::KeywordModeEntryMethod_MAX;
constexpr int OmniboxEventProto::KeywordModeEntryMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void OmniboxEventProto_Suggestion::InitAsDefaultInstance() {
}
class OmniboxEventProto_Suggestion::_Internal {
 public:
  using HasBits = decltype(std::declval<OmniboxEventProto_Suggestion>()._has_bits_);
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relevance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_typed_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_starred(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result_subtype_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_has_tab_match(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_keyword_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

OmniboxEventProto_Suggestion::OmniboxEventProto_Suggestion()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.OmniboxEventProto.Suggestion)
}
OmniboxEventProto_Suggestion::OmniboxEventProto_Suggestion(const OmniboxEventProto_Suggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&provider_, &from.provider_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_subtype_identifier_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(result_subtype_identifier_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto.Suggestion)
}

void OmniboxEventProto_Suggestion::SharedCtor() {
  ::memset(&provider_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_subtype_identifier_) -
      reinterpret_cast<char*>(&provider_)) + sizeof(result_subtype_identifier_));
}

OmniboxEventProto_Suggestion::~OmniboxEventProto_Suggestion() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto.Suggestion)
  SharedDtor();
}

void OmniboxEventProto_Suggestion::SharedDtor() {
}

void OmniboxEventProto_Suggestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OmniboxEventProto_Suggestion& OmniboxEventProto_Suggestion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OmniboxEventProto_Suggestion_omnibox_5fevent_2eproto.base);
  return *internal_default_instance();
}


void OmniboxEventProto_Suggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto.Suggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&provider_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_keyword_suggestion_) -
        reinterpret_cast<char*>(&provider_)) + sizeof(is_keyword_suggestion_));
  }
  result_subtype_identifier_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OmniboxEventProto_Suggestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_ProviderType_IsValid(val))) {
            set_provider(static_cast<::metrics::OmniboxEventProto_ProviderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_Suggestion_ResultType_IsValid(val))) {
            set_result_type(static_cast<::metrics::OmniboxEventProto_Suggestion_ResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 relevance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_relevance(&has_bits);
          relevance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_starred = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_starred(&has_bits);
          is_starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 typed_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_typed_count(&has_bits);
          typed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_disabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_disabled(&has_bits);
          is_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 result_subtype_identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_result_subtype_identifier(&has_bits);
          result_subtype_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_tab_match = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_has_tab_match(&has_bits);
          has_tab_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_keyword_suggestion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_keyword_suggestion(&has_bits);
          is_keyword_suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OmniboxEventProto_Suggestion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.OmniboxEventProto.Suggestion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxEventProto_ProviderType_IsValid(value)) {
            set_provider(static_cast< ::metrics::OmniboxEventProto_ProviderType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxEventProto_Suggestion_ResultType_IsValid(value)) {
            set_result_type(static_cast< ::metrics::OmniboxEventProto_Suggestion_ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 relevance = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_relevance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &relevance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_starred = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_starred(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_starred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 typed_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_typed_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &typed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_disabled = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_is_disabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result_subtype_identifier = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_result_subtype_identifier(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_subtype_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_tab_match = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_has_tab_match(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_tab_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_keyword_suggestion = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_is_keyword_suggestion(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_keyword_suggestion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.OmniboxEventProto.Suggestion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.OmniboxEventProto.Suggestion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OmniboxEventProto_Suggestion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.OmniboxEventProto.Suggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->provider(), output);
  }

  // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->result_type(), output);
  }

  // optional int32 relevance = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->relevance(), output);
  }

  // optional bool is_starred = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_starred(), output);
  }

  // optional int32 typed_count = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->typed_count(), output);
  }

  // optional bool is_disabled = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_disabled(), output);
  }

  // optional int32 result_subtype_identifier = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->result_subtype_identifier(), output);
  }

  // optional bool has_tab_match = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->has_tab_match(), output);
  }

  // optional bool is_keyword_suggestion = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->is_keyword_suggestion(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.OmniboxEventProto.Suggestion)
}

size_t OmniboxEventProto_Suggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto.Suggestion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->provider());
    }

    // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result_type());
    }

    // optional int32 relevance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->relevance());
    }

    // optional int32 typed_count = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->typed_count());
    }

    // optional bool is_starred = 4 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_disabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool has_tab_match = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_keyword_suggestion = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional int32 result_subtype_identifier = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->result_subtype_identifier());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OmniboxEventProto_Suggestion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OmniboxEventProto_Suggestion*>(
      &from));
}

void OmniboxEventProto_Suggestion::MergeFrom(const OmniboxEventProto_Suggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto.Suggestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      provider_ = from.provider_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_type_ = from.result_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      relevance_ = from.relevance_;
    }
    if (cached_has_bits & 0x00000008u) {
      typed_count_ = from.typed_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_starred_ = from.is_starred_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_disabled_ = from.is_disabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      has_tab_match_ = from.has_tab_match_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_keyword_suggestion_ = from.is_keyword_suggestion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_result_subtype_identifier(from.result_subtype_identifier());
  }
}

void OmniboxEventProto_Suggestion::CopyFrom(const OmniboxEventProto_Suggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto.Suggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto_Suggestion::IsInitialized() const {
  return true;
}

void OmniboxEventProto_Suggestion::InternalSwap(OmniboxEventProto_Suggestion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(provider_, other->provider_);
  swap(result_type_, other->result_type_);
  swap(relevance_, other->relevance_);
  swap(typed_count_, other->typed_count_);
  swap(is_starred_, other->is_starred_);
  swap(is_disabled_, other->is_disabled_);
  swap(has_tab_match_, other->has_tab_match_);
  swap(is_keyword_suggestion_, other->is_keyword_suggestion_);
  swap(result_subtype_identifier_, other->result_subtype_identifier_);
}

std::string OmniboxEventProto_Suggestion::GetTypeName() const {
  return "metrics.OmniboxEventProto.Suggestion";
}


// ===================================================================

void OmniboxEventProto_ProviderInfo::InitAsDefaultInstance() {
}
class OmniboxEventProto_ProviderInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<OmniboxEventProto_ProviderInfo>()._has_bits_);
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_provider_done(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_times_returned_results_in_session(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

OmniboxEventProto_ProviderInfo::OmniboxEventProto_ProviderInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.OmniboxEventProto.ProviderInfo)
}
OmniboxEventProto_ProviderInfo::OmniboxEventProto_ProviderInfo(const OmniboxEventProto_ProviderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_trial_triggered_(from.field_trial_triggered_),
      field_trial_triggered_in_session_(from.field_trial_triggered_in_session_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&provider_, &from.provider_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_returned_results_in_session_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(times_returned_results_in_session_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto.ProviderInfo)
}

void OmniboxEventProto_ProviderInfo::SharedCtor() {
  ::memset(&provider_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_returned_results_in_session_) -
      reinterpret_cast<char*>(&provider_)) + sizeof(times_returned_results_in_session_));
}

OmniboxEventProto_ProviderInfo::~OmniboxEventProto_ProviderInfo() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto.ProviderInfo)
  SharedDtor();
}

void OmniboxEventProto_ProviderInfo::SharedDtor() {
}

void OmniboxEventProto_ProviderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OmniboxEventProto_ProviderInfo& OmniboxEventProto_ProviderInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OmniboxEventProto_ProviderInfo_omnibox_5fevent_2eproto.base);
  return *internal_default_instance();
}


void OmniboxEventProto_ProviderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto.ProviderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_trial_triggered_.Clear();
  field_trial_triggered_in_session_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&provider_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_returned_results_in_session_) -
        reinterpret_cast<char*>(&provider_)) + sizeof(times_returned_results_in_session_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OmniboxEventProto_ProviderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_ProviderType_IsValid(val))) {
            set_provider(static_cast<::metrics::OmniboxEventProto_ProviderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool provider_done = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_provider_done(&has_bits);
          provider_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 field_trial_triggered = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_field_trial_triggered(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 29);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(mutable_field_trial_triggered(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 field_trial_triggered_in_session = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_field_trial_triggered_in_session(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 37);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(mutable_field_trial_triggered_in_session(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 times_returned_results_in_session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_times_returned_results_in_session(&has_bits);
          times_returned_results_in_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OmniboxEventProto_ProviderInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.OmniboxEventProto.ProviderInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxEventProto_ProviderType_IsValid(value)) {
            set_provider(static_cast< ::metrics::OmniboxEventProto_ProviderType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool provider_done = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_provider_done(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provider_done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 field_trial_triggered = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29u, input, this->mutable_field_trial_triggered())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_field_trial_triggered())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 field_trial_triggered_in_session = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37u, input, this->mutable_field_trial_triggered_in_session())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_field_trial_triggered_in_session())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 times_returned_results_in_session = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_times_returned_results_in_session(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_returned_results_in_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.OmniboxEventProto.ProviderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.OmniboxEventProto.ProviderInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OmniboxEventProto_ProviderInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.OmniboxEventProto.ProviderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->provider(), output);
  }

  // optional bool provider_done = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->provider_done(), output);
  }

  // repeated fixed32 field_trial_triggered = 3;
  for (int i = 0, n = this->field_trial_triggered_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(
      3, this->field_trial_triggered(i), output);
  }

  // repeated fixed32 field_trial_triggered_in_session = 4;
  for (int i = 0, n = this->field_trial_triggered_in_session_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(
      4, this->field_trial_triggered_in_session(i), output);
  }

  // optional int32 times_returned_results_in_session = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->times_returned_results_in_session(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.OmniboxEventProto.ProviderInfo)
}

size_t OmniboxEventProto_ProviderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto.ProviderInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 field_trial_triggered = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->field_trial_triggered_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->field_trial_triggered_size());
    total_size += data_size;
  }

  // repeated fixed32 field_trial_triggered_in_session = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->field_trial_triggered_in_session_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->field_trial_triggered_in_session_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->provider());
    }

    // optional bool provider_done = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 times_returned_results_in_session = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->times_returned_results_in_session());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OmniboxEventProto_ProviderInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OmniboxEventProto_ProviderInfo*>(
      &from));
}

void OmniboxEventProto_ProviderInfo::MergeFrom(const OmniboxEventProto_ProviderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto.ProviderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_trial_triggered_.MergeFrom(from.field_trial_triggered_);
  field_trial_triggered_in_session_.MergeFrom(from.field_trial_triggered_in_session_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      provider_ = from.provider_;
    }
    if (cached_has_bits & 0x00000002u) {
      provider_done_ = from.provider_done_;
    }
    if (cached_has_bits & 0x00000004u) {
      times_returned_results_in_session_ = from.times_returned_results_in_session_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OmniboxEventProto_ProviderInfo::CopyFrom(const OmniboxEventProto_ProviderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto.ProviderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto_ProviderInfo::IsInitialized() const {
  return true;
}

void OmniboxEventProto_ProviderInfo::InternalSwap(OmniboxEventProto_ProviderInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_trial_triggered_.InternalSwap(&other->field_trial_triggered_);
  field_trial_triggered_in_session_.InternalSwap(&other->field_trial_triggered_in_session_);
  swap(provider_, other->provider_);
  swap(provider_done_, other->provider_done_);
  swap(times_returned_results_in_session_, other->times_returned_results_in_session_);
}

std::string OmniboxEventProto_ProviderInfo::GetTypeName() const {
  return "metrics.OmniboxEventProto.ProviderInfo";
}


// ===================================================================

void OmniboxEventProto::InitAsDefaultInstance() {
}
class OmniboxEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OmniboxEventProto>()._has_bits_);
  static void set_has_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tab_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_typed_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_just_deleted_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_num_typed_terms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_selected_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_selected_tab_match(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_deprecated_is_top_result_hidden_in_dropdown(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_popup_open(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_paste_and_go(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_completed_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_typing_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration_since_last_default_match_update_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_current_page_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_input_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_in_keyword_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_keyword_mode_entry_method(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

OmniboxEventProto::OmniboxEventProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.OmniboxEventProto)
}
OmniboxEventProto::OmniboxEventProto(const OmniboxEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      suggestion_(from.suggestion_),
      provider_info_(from.provider_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_sec_, &from.time_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&keyword_mode_entry_method_) -
    reinterpret_cast<char*>(&time_sec_)) + sizeof(keyword_mode_entry_method_));
  // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto)
}

void OmniboxEventProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OmniboxEventProto_omnibox_5fevent_2eproto.base);
  ::memset(&time_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyword_mode_entry_method_) -
      reinterpret_cast<char*>(&time_sec_)) + sizeof(keyword_mode_entry_method_));
}

OmniboxEventProto::~OmniboxEventProto() {
  // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto)
  SharedDtor();
}

void OmniboxEventProto::SharedDtor() {
}

void OmniboxEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OmniboxEventProto& OmniboxEventProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OmniboxEventProto_omnibox_5fevent_2eproto.base);
  return *internal_default_instance();
}


void OmniboxEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suggestion_.Clear();
  provider_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_type_) -
        reinterpret_cast<char*>(&time_sec_)) + sizeof(input_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&duration_since_last_default_match_update_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_keyword_mode_) -
        reinterpret_cast<char*>(&duration_since_last_default_match_update_ms_)) + sizeof(in_keyword_mode_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&mode_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keyword_mode_entry_method_) -
        reinterpret_cast<char*>(&mode_type_)) + sizeof(keyword_mode_entry_method_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OmniboxEventProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 time_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_sec(&has_bits);
          time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tab_id(&has_bits);
          tab_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 typed_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_typed_length(&has_bits);
          typed_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_typed_terms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_typed_terms(&has_bits);
          num_typed_terms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 selected_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_selected_index(&has_bits);
          selected_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 completed_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_completed_length(&has_bits);
          completed_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 typing_duration_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_typing_duration_ms(&has_bits);
          typing_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.OmniboxInputType input_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxInputType_IsValid(val))) {
            set_input_type(static_cast<::metrics::OmniboxInputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_suggestion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_PageClassification_IsValid(val))) {
            set_current_page_classification(static_cast<::metrics::OmniboxEventProto_PageClassification>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool just_deleted_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_just_deleted_text(&has_bits);
          just_deleted_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_provider_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_since_last_default_match_update_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_duration_since_last_default_match_update_ms(&has_bits);
          duration_since_last_default_match_update_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_deprecated_is_top_result_hidden_in_dropdown(&has_bits);
          deprecated_is_top_result_hidden_in_dropdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_popup_open = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_popup_open(&has_bits);
          is_popup_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_paste_and_go = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_paste_and_go(&has_bits);
          is_paste_and_go_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool selected_tab_match = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_selected_tab_match(&has_bits);
          selected_tab_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.ModeType mode_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_ModeType_IsValid(val))) {
            set_mode_type(static_cast<::metrics::OmniboxEventProto_ModeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool in_keyword_mode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_in_keyword_mode(&has_bits);
          in_keyword_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.OmniboxEventProto.KeywordModeEntryMethod keyword_mode_entry_method = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::OmniboxEventProto_KeywordModeEntryMethod_IsValid(val))) {
            set_keyword_mode_entry_method(static_cast<::metrics::OmniboxEventProto_KeywordModeEntryMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OmniboxEventProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.OmniboxEventProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time_sec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_time_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tab_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_tab_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 typed_length = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_typed_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &typed_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_typed_terms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_typed_terms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_typed_terms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 selected_index = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_selected_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &selected_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 completed_length = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_completed_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &completed_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 typing_duration_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_typing_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &typing_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.OmniboxInputType input_type = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxInputType_IsValid(value)) {
            set_input_type(static_cast< ::metrics::OmniboxInputType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_suggestion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxEventProto_PageClassification_IsValid(value)) {
            set_current_page_classification(static_cast< ::metrics::OmniboxEventProto_PageClassification >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool just_deleted_text = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_just_deleted_text(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &just_deleted_text_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_provider_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_since_last_default_match_update_ms = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_duration_since_last_default_match_update_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_since_last_default_match_update_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_deprecated_is_top_result_hidden_in_dropdown(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_is_top_result_hidden_in_dropdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_popup_open = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_is_popup_open(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_popup_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_paste_and_go = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_is_paste_and_go(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_paste_and_go_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool selected_tab_match = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_selected_tab_match(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_tab_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.OmniboxEventProto.ModeType mode_type = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxEventProto_ModeType_IsValid(value)) {
            set_mode_type(static_cast< ::metrics::OmniboxEventProto_ModeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(144u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_keyword_mode = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_in_keyword_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_keyword_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.OmniboxEventProto.KeywordModeEntryMethod keyword_mode_entry_method = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::OmniboxEventProto_KeywordModeEntryMethod_IsValid(value)) {
            set_keyword_mode_entry_method(static_cast< ::metrics::OmniboxEventProto_KeywordModeEntryMethod >(value));
          } else {
            unknown_fields_stream.WriteVarint32(160u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.OmniboxEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.OmniboxEventProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OmniboxEventProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.OmniboxEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->time_sec(), output);
  }

  // optional int32 tab_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->tab_id(), output);
  }

  // optional int32 typed_length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->typed_length(), output);
  }

  // optional int32 num_typed_terms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_typed_terms(), output);
  }

  // optional int32 selected_index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->selected_index(), output);
  }

  // optional int32 completed_length = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->completed_length(), output);
  }

  // optional int64 typing_duration_ms = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->typing_duration_ms(), output);
  }

  // optional .metrics.OmniboxInputType input_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->input_type(), output);
  }

  // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->suggestion_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->suggestion(static_cast<int>(i)),
      output);
  }

  // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->current_page_classification(), output);
  }

  // optional bool just_deleted_text = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->just_deleted_text(), output);
  }

  // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->provider_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12,
      this->provider_info(static_cast<int>(i)),
      output);
  }

  // optional int64 duration_since_last_default_match_update_ms = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(13, this->duration_since_last_default_match_update_ms(), output);
  }

  // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->deprecated_is_top_result_hidden_in_dropdown(), output);
  }

  // optional bool is_popup_open = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->is_popup_open(), output);
  }

  // optional bool is_paste_and_go = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->is_paste_and_go(), output);
  }

  // optional bool selected_tab_match = 17;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->selected_tab_match(), output);
  }

  // optional .metrics.OmniboxEventProto.ModeType mode_type = 18;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      18, this->mode_type(), output);
  }

  // optional bool in_keyword_mode = 19;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->in_keyword_mode(), output);
  }

  // optional .metrics.OmniboxEventProto.KeywordModeEntryMethod keyword_mode_entry_method = 20;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      20, this->keyword_mode_entry_method(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.OmniboxEventProto)
}

size_t OmniboxEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->suggestion_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->suggestion(static_cast<int>(i)));
    }
  }

  // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->provider_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->provider_info(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 time_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_sec());
    }

    // optional int32 tab_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tab_id());
    }

    // optional int32 typed_length = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->typed_length());
    }

    // optional int32 num_typed_terms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_typed_terms());
    }

    // optional int32 selected_index = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->selected_index());
    }

    // optional int64 typing_duration_ms = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->typing_duration_ms());
    }

    // optional int32 completed_length = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->completed_length());
    }

    // optional .metrics.OmniboxInputType input_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->input_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 duration_since_last_default_match_update_ms = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_since_last_default_match_update_ms());
    }

    // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->current_page_classification());
    }

    // optional bool just_deleted_text = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool selected_tab_match = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_popup_open = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_paste_and_go = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool in_keyword_mode = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .metrics.OmniboxEventProto.ModeType mode_type = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode_type());
    }

    // optional .metrics.OmniboxEventProto.KeywordModeEntryMethod keyword_mode_entry_method = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->keyword_mode_entry_method());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OmniboxEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OmniboxEventProto*>(
      &from));
}

void OmniboxEventProto::MergeFrom(const OmniboxEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  suggestion_.MergeFrom(from.suggestion_);
  provider_info_.MergeFrom(from.provider_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_sec_ = from.time_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      tab_id_ = from.tab_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      typed_length_ = from.typed_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_typed_terms_ = from.num_typed_terms_;
    }
    if (cached_has_bits & 0x00000010u) {
      selected_index_ = from.selected_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      typing_duration_ms_ = from.typing_duration_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      completed_length_ = from.completed_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      input_type_ = from.input_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      duration_since_last_default_match_update_ms_ = from.duration_since_last_default_match_update_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      current_page_classification_ = from.current_page_classification_;
    }
    if (cached_has_bits & 0x00000400u) {
      just_deleted_text_ = from.just_deleted_text_;
    }
    if (cached_has_bits & 0x00000800u) {
      selected_tab_match_ = from.selected_tab_match_;
    }
    if (cached_has_bits & 0x00001000u) {
      deprecated_is_top_result_hidden_in_dropdown_ = from.deprecated_is_top_result_hidden_in_dropdown_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_popup_open_ = from.is_popup_open_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_paste_and_go_ = from.is_paste_and_go_;
    }
    if (cached_has_bits & 0x00008000u) {
      in_keyword_mode_ = from.in_keyword_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      mode_type_ = from.mode_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      keyword_mode_entry_method_ = from.keyword_mode_entry_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OmniboxEventProto::CopyFrom(const OmniboxEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmniboxEventProto::IsInitialized() const {
  return true;
}

void OmniboxEventProto::InternalSwap(OmniboxEventProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&suggestion_)->InternalSwap(CastToBase(&other->suggestion_));
  CastToBase(&provider_info_)->InternalSwap(CastToBase(&other->provider_info_));
  swap(time_sec_, other->time_sec_);
  swap(tab_id_, other->tab_id_);
  swap(typed_length_, other->typed_length_);
  swap(num_typed_terms_, other->num_typed_terms_);
  swap(selected_index_, other->selected_index_);
  swap(typing_duration_ms_, other->typing_duration_ms_);
  swap(completed_length_, other->completed_length_);
  swap(input_type_, other->input_type_);
  swap(duration_since_last_default_match_update_ms_, other->duration_since_last_default_match_update_ms_);
  swap(current_page_classification_, other->current_page_classification_);
  swap(just_deleted_text_, other->just_deleted_text_);
  swap(selected_tab_match_, other->selected_tab_match_);
  swap(deprecated_is_top_result_hidden_in_dropdown_, other->deprecated_is_top_result_hidden_in_dropdown_);
  swap(is_popup_open_, other->is_popup_open_);
  swap(is_paste_and_go_, other->is_paste_and_go_);
  swap(in_keyword_mode_, other->in_keyword_mode_);
  swap(mode_type_, other->mode_type_);
  swap(keyword_mode_entry_method_, other->keyword_mode_entry_method_);
}

std::string OmniboxEventProto::GetTypeName() const {
  return "metrics.OmniboxEventProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::OmniboxEventProto_Suggestion* Arena::CreateMaybeMessage< ::metrics::OmniboxEventProto_Suggestion >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::OmniboxEventProto_Suggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::OmniboxEventProto_ProviderInfo* Arena::CreateMaybeMessage< ::metrics::OmniboxEventProto_ProviderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::OmniboxEventProto_ProviderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::OmniboxEventProto* Arena::CreateMaybeMessage< ::metrics::OmniboxEventProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::OmniboxEventProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
