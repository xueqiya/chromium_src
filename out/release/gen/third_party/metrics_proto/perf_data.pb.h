// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_perf_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_perf_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_perf_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_perf_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace metrics {
class PerfDataProto;
class PerfDataProtoDefaultTypeInternal;
extern PerfDataProtoDefaultTypeInternal _PerfDataProto_default_instance_;
class PerfDataProto_BranchStackEntry;
class PerfDataProto_BranchStackEntryDefaultTypeInternal;
extern PerfDataProto_BranchStackEntryDefaultTypeInternal _PerfDataProto_BranchStackEntry_default_instance_;
class PerfDataProto_CommEvent;
class PerfDataProto_CommEventDefaultTypeInternal;
extern PerfDataProto_CommEventDefaultTypeInternal _PerfDataProto_CommEvent_default_instance_;
class PerfDataProto_EventHeader;
class PerfDataProto_EventHeaderDefaultTypeInternal;
extern PerfDataProto_EventHeaderDefaultTypeInternal _PerfDataProto_EventHeader_default_instance_;
class PerfDataProto_ForkEvent;
class PerfDataProto_ForkEventDefaultTypeInternal;
extern PerfDataProto_ForkEventDefaultTypeInternal _PerfDataProto_ForkEvent_default_instance_;
class PerfDataProto_MMapEvent;
class PerfDataProto_MMapEventDefaultTypeInternal;
extern PerfDataProto_MMapEventDefaultTypeInternal _PerfDataProto_MMapEvent_default_instance_;
class PerfDataProto_PerfBuildID;
class PerfDataProto_PerfBuildIDDefaultTypeInternal;
extern PerfDataProto_PerfBuildIDDefaultTypeInternal _PerfDataProto_PerfBuildID_default_instance_;
class PerfDataProto_PerfEvent;
class PerfDataProto_PerfEventDefaultTypeInternal;
extern PerfDataProto_PerfEventDefaultTypeInternal _PerfDataProto_PerfEvent_default_instance_;
class PerfDataProto_PerfEventAttr;
class PerfDataProto_PerfEventAttrDefaultTypeInternal;
extern PerfDataProto_PerfEventAttrDefaultTypeInternal _PerfDataProto_PerfEventAttr_default_instance_;
class PerfDataProto_PerfEventStats;
class PerfDataProto_PerfEventStatsDefaultTypeInternal;
extern PerfDataProto_PerfEventStatsDefaultTypeInternal _PerfDataProto_PerfEventStats_default_instance_;
class PerfDataProto_PerfEventType;
class PerfDataProto_PerfEventTypeDefaultTypeInternal;
extern PerfDataProto_PerfEventTypeDefaultTypeInternal _PerfDataProto_PerfEventType_default_instance_;
class PerfDataProto_PerfFileAttr;
class PerfDataProto_PerfFileAttrDefaultTypeInternal;
extern PerfDataProto_PerfFileAttrDefaultTypeInternal _PerfDataProto_PerfFileAttr_default_instance_;
class PerfDataProto_SampleEvent;
class PerfDataProto_SampleEventDefaultTypeInternal;
extern PerfDataProto_SampleEventDefaultTypeInternal _PerfDataProto_SampleEvent_default_instance_;
class PerfDataProto_SampleInfo;
class PerfDataProto_SampleInfoDefaultTypeInternal;
extern PerfDataProto_SampleInfoDefaultTypeInternal _PerfDataProto_SampleInfo_default_instance_;
class PerfDataProto_StringMetadata;
class PerfDataProto_StringMetadataDefaultTypeInternal;
extern PerfDataProto_StringMetadataDefaultTypeInternal _PerfDataProto_StringMetadata_default_instance_;
class PerfDataProto_StringMetadata_StringAndMd5sumPrefix;
class PerfDataProto_StringMetadata_StringAndMd5sumPrefixDefaultTypeInternal;
extern PerfDataProto_StringMetadata_StringAndMd5sumPrefixDefaultTypeInternal _PerfDataProto_StringMetadata_StringAndMd5sumPrefix_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::PerfDataProto* Arena::CreateMaybeMessage<::metrics::PerfDataProto>(Arena*);
template<> ::metrics::PerfDataProto_BranchStackEntry* Arena::CreateMaybeMessage<::metrics::PerfDataProto_BranchStackEntry>(Arena*);
template<> ::metrics::PerfDataProto_CommEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_CommEvent>(Arena*);
template<> ::metrics::PerfDataProto_EventHeader* Arena::CreateMaybeMessage<::metrics::PerfDataProto_EventHeader>(Arena*);
template<> ::metrics::PerfDataProto_ForkEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_ForkEvent>(Arena*);
template<> ::metrics::PerfDataProto_MMapEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_MMapEvent>(Arena*);
template<> ::metrics::PerfDataProto_PerfBuildID* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfBuildID>(Arena*);
template<> ::metrics::PerfDataProto_PerfEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfEvent>(Arena*);
template<> ::metrics::PerfDataProto_PerfEventAttr* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfEventAttr>(Arena*);
template<> ::metrics::PerfDataProto_PerfEventStats* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfEventStats>(Arena*);
template<> ::metrics::PerfDataProto_PerfEventType* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfEventType>(Arena*);
template<> ::metrics::PerfDataProto_PerfFileAttr* Arena::CreateMaybeMessage<::metrics::PerfDataProto_PerfFileAttr>(Arena*);
template<> ::metrics::PerfDataProto_SampleEvent* Arena::CreateMaybeMessage<::metrics::PerfDataProto_SampleEvent>(Arena*);
template<> ::metrics::PerfDataProto_SampleInfo* Arena::CreateMaybeMessage<::metrics::PerfDataProto_SampleInfo>(Arena*);
template<> ::metrics::PerfDataProto_StringMetadata* Arena::CreateMaybeMessage<::metrics::PerfDataProto_StringMetadata>(Arena*);
template<> ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* Arena::CreateMaybeMessage<::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

// ===================================================================

class PerfDataProto_PerfEventAttr :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfEventAttr) */ {
 public:
  PerfDataProto_PerfEventAttr();
  virtual ~PerfDataProto_PerfEventAttr();

  PerfDataProto_PerfEventAttr(const PerfDataProto_PerfEventAttr& from);
  PerfDataProto_PerfEventAttr(PerfDataProto_PerfEventAttr&& from) noexcept
    : PerfDataProto_PerfEventAttr() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfEventAttr& operator=(const PerfDataProto_PerfEventAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfEventAttr& operator=(PerfDataProto_PerfEventAttr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_PerfEventAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_PerfEventAttr* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfEventAttr*>(
               &_PerfDataProto_PerfEventAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfDataProto_PerfEventAttr& a, PerfDataProto_PerfEventAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_PerfEventAttr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_PerfEventAttr* New() const final {
    return CreateMaybeMessage<PerfDataProto_PerfEventAttr>(nullptr);
  }

  PerfDataProto_PerfEventAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_PerfEventAttr>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_PerfEventAttr& from);
  void MergeFrom(const PerfDataProto_PerfEventAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfEventAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfEventAttr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 2,
    kConfigFieldNumber = 3,
    kSamplePeriodFieldNumber = 4,
    kSampleFreqFieldNumber = 5,
    kSampleTypeFieldNumber = 6,
    kReadFormatFieldNumber = 7,
    kDisabledFieldNumber = 8,
    kInheritFieldNumber = 9,
    kPinnedFieldNumber = 10,
    kExclusiveFieldNumber = 11,
    kExcludeUserFieldNumber = 12,
    kExcludeKernelFieldNumber = 13,
    kExcludeHvFieldNumber = 14,
    kExcludeIdleFieldNumber = 15,
    kMmapFieldNumber = 16,
    kCommFieldNumber = 17,
    kFreqFieldNumber = 18,
    kInheritStatFieldNumber = 19,
    kEnableOnExecFieldNumber = 20,
    kTaskFieldNumber = 21,
    kWatermarkFieldNumber = 22,
    kMmapDataFieldNumber = 24,
    kPreciseIpFieldNumber = 23,
    kSampleIdAllFieldNumber = 25,
    kExcludeHostFieldNumber = 26,
    kExcludeGuestFieldNumber = 27,
    kWakeupEventsFieldNumber = 28,
    kWakeupWatermarkFieldNumber = 29,
    kBpAddrFieldNumber = 31,
    kConfig1FieldNumber = 32,
    kBpLenFieldNumber = 33,
    kConfig2FieldNumber = 34,
    kBranchSampleTypeFieldNumber = 35,
    kBpTypeFieldNumber = 30,
  };
  // optional uint32 type = 1;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 size = 2;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 config = 3;
  bool has_config() const;
  void clear_config();
  ::PROTOBUF_NAMESPACE_ID::uint64 config() const;
  void set_config(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sample_period = 4;
  bool has_sample_period() const;
  void clear_sample_period();
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_period() const;
  void set_sample_period(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sample_freq = 5;
  bool has_sample_freq() const;
  void clear_sample_freq();
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_freq() const;
  void set_sample_freq(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sample_type = 6;
  bool has_sample_type() const;
  void clear_sample_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_type() const;
  void set_sample_type(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 read_format = 7;
  bool has_read_format() const;
  void clear_read_format();
  ::PROTOBUF_NAMESPACE_ID::uint64 read_format() const;
  void set_read_format(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool disabled = 8;
  bool has_disabled() const;
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);

  // optional bool inherit = 9;
  bool has_inherit() const;
  void clear_inherit();
  bool inherit() const;
  void set_inherit(bool value);

  // optional bool pinned = 10;
  bool has_pinned() const;
  void clear_pinned();
  bool pinned() const;
  void set_pinned(bool value);

  // optional bool exclusive = 11;
  bool has_exclusive() const;
  void clear_exclusive();
  bool exclusive() const;
  void set_exclusive(bool value);

  // optional bool exclude_user = 12;
  bool has_exclude_user() const;
  void clear_exclude_user();
  bool exclude_user() const;
  void set_exclude_user(bool value);

  // optional bool exclude_kernel = 13;
  bool has_exclude_kernel() const;
  void clear_exclude_kernel();
  bool exclude_kernel() const;
  void set_exclude_kernel(bool value);

  // optional bool exclude_hv = 14;
  bool has_exclude_hv() const;
  void clear_exclude_hv();
  bool exclude_hv() const;
  void set_exclude_hv(bool value);

  // optional bool exclude_idle = 15;
  bool has_exclude_idle() const;
  void clear_exclude_idle();
  bool exclude_idle() const;
  void set_exclude_idle(bool value);

  // optional bool mmap = 16;
  bool has_mmap() const;
  void clear_mmap();
  bool mmap() const;
  void set_mmap(bool value);

  // optional bool comm = 17;
  bool has_comm() const;
  void clear_comm();
  bool comm() const;
  void set_comm(bool value);

  // optional bool freq = 18;
  bool has_freq() const;
  void clear_freq();
  bool freq() const;
  void set_freq(bool value);

  // optional bool inherit_stat = 19;
  bool has_inherit_stat() const;
  void clear_inherit_stat();
  bool inherit_stat() const;
  void set_inherit_stat(bool value);

  // optional bool enable_on_exec = 20;
  bool has_enable_on_exec() const;
  void clear_enable_on_exec();
  bool enable_on_exec() const;
  void set_enable_on_exec(bool value);

  // optional bool task = 21;
  bool has_task() const;
  void clear_task();
  bool task() const;
  void set_task(bool value);

  // optional bool watermark = 22;
  bool has_watermark() const;
  void clear_watermark();
  bool watermark() const;
  void set_watermark(bool value);

  // optional bool mmap_data = 24;
  bool has_mmap_data() const;
  void clear_mmap_data();
  bool mmap_data() const;
  void set_mmap_data(bool value);

  // optional uint32 precise_ip = 23;
  bool has_precise_ip() const;
  void clear_precise_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 precise_ip() const;
  void set_precise_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool sample_id_all = 25;
  bool has_sample_id_all() const;
  void clear_sample_id_all();
  bool sample_id_all() const;
  void set_sample_id_all(bool value);

  // optional bool exclude_host = 26;
  bool has_exclude_host() const;
  void clear_exclude_host();
  bool exclude_host() const;
  void set_exclude_host(bool value);

  // optional bool exclude_guest = 27;
  bool has_exclude_guest() const;
  void clear_exclude_guest();
  bool exclude_guest() const;
  void set_exclude_guest(bool value);

  // optional uint32 wakeup_events = 28;
  bool has_wakeup_events() const;
  void clear_wakeup_events();
  ::PROTOBUF_NAMESPACE_ID::uint32 wakeup_events() const;
  void set_wakeup_events(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 wakeup_watermark = 29;
  bool has_wakeup_watermark() const;
  void clear_wakeup_watermark();
  ::PROTOBUF_NAMESPACE_ID::uint32 wakeup_watermark() const;
  void set_wakeup_watermark(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 bp_addr = 31;
  bool has_bp_addr() const;
  void clear_bp_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 bp_addr() const;
  void set_bp_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 config1 = 32;
  bool has_config1() const;
  void clear_config1();
  ::PROTOBUF_NAMESPACE_ID::uint64 config1() const;
  void set_config1(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 bp_len = 33;
  bool has_bp_len() const;
  void clear_bp_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 bp_len() const;
  void set_bp_len(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 config2 = 34;
  bool has_config2() const;
  void clear_config2();
  ::PROTOBUF_NAMESPACE_ID::uint64 config2() const;
  void set_config2(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 branch_sample_type = 35;
  bool has_branch_sample_type() const;
  void clear_branch_sample_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 branch_sample_type() const;
  void set_branch_sample_type(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 bp_type = 30;
  bool has_bp_type() const;
  void clear_bp_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 bp_type() const;
  void set_bp_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEventAttr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 config_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_period_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_freq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 read_format_;
  bool disabled_;
  bool inherit_;
  bool pinned_;
  bool exclusive_;
  bool exclude_user_;
  bool exclude_kernel_;
  bool exclude_hv_;
  bool exclude_idle_;
  bool mmap_;
  bool comm_;
  bool freq_;
  bool inherit_stat_;
  bool enable_on_exec_;
  bool task_;
  bool watermark_;
  bool mmap_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 precise_ip_;
  bool sample_id_all_;
  bool exclude_host_;
  bool exclude_guest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wakeup_events_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wakeup_watermark_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bp_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 config1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bp_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 config2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 branch_sample_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bp_type_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfFileAttr :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfFileAttr) */ {
 public:
  PerfDataProto_PerfFileAttr();
  virtual ~PerfDataProto_PerfFileAttr();

  PerfDataProto_PerfFileAttr(const PerfDataProto_PerfFileAttr& from);
  PerfDataProto_PerfFileAttr(PerfDataProto_PerfFileAttr&& from) noexcept
    : PerfDataProto_PerfFileAttr() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfFileAttr& operator=(const PerfDataProto_PerfFileAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfFileAttr& operator=(PerfDataProto_PerfFileAttr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_PerfFileAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_PerfFileAttr* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfFileAttr*>(
               &_PerfDataProto_PerfFileAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerfDataProto_PerfFileAttr& a, PerfDataProto_PerfFileAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_PerfFileAttr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_PerfFileAttr* New() const final {
    return CreateMaybeMessage<PerfDataProto_PerfFileAttr>(nullptr);
  }

  PerfDataProto_PerfFileAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_PerfFileAttr>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_PerfFileAttr& from);
  void MergeFrom(const PerfDataProto_PerfFileAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfFileAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfFileAttr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kAttrFieldNumber = 1,
  };
  // repeated uint64 ids = 2;
  int ids_size() const;
  void clear_ids();
  ::PROTOBUF_NAMESPACE_ID::uint64 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_ids();

  // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
  bool has_attr() const;
  void clear_attr();
  const ::metrics::PerfDataProto_PerfEventAttr& attr() const;
  ::metrics::PerfDataProto_PerfEventAttr* release_attr();
  ::metrics::PerfDataProto_PerfEventAttr* mutable_attr();
  void set_allocated_attr(::metrics::PerfDataProto_PerfEventAttr* attr);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfFileAttr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > ids_;
  ::metrics::PerfDataProto_PerfEventAttr* attr_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfEventType :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfEventType) */ {
 public:
  PerfDataProto_PerfEventType();
  virtual ~PerfDataProto_PerfEventType();

  PerfDataProto_PerfEventType(const PerfDataProto_PerfEventType& from);
  PerfDataProto_PerfEventType(PerfDataProto_PerfEventType&& from) noexcept
    : PerfDataProto_PerfEventType() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfEventType& operator=(const PerfDataProto_PerfEventType& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfEventType& operator=(PerfDataProto_PerfEventType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_PerfEventType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_PerfEventType* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfEventType*>(
               &_PerfDataProto_PerfEventType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PerfDataProto_PerfEventType& a, PerfDataProto_PerfEventType& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_PerfEventType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_PerfEventType* New() const final {
    return CreateMaybeMessage<PerfDataProto_PerfEventType>(nullptr);
  }

  PerfDataProto_PerfEventType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_PerfEventType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_PerfEventType& from);
  void MergeFrom(const PerfDataProto_PerfEventType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfEventType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfEventType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameMd5PrefixFieldNumber = 3,
  };
  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 name_md5_prefix = 3;
  bool has_name_md5_prefix() const;
  void clear_name_md5_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint64 name_md5_prefix() const;
  void set_name_md5_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEventType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 name_md5_prefix_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_SampleInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.SampleInfo) */ {
 public:
  PerfDataProto_SampleInfo();
  virtual ~PerfDataProto_SampleInfo();

  PerfDataProto_SampleInfo(const PerfDataProto_SampleInfo& from);
  PerfDataProto_SampleInfo(PerfDataProto_SampleInfo&& from) noexcept
    : PerfDataProto_SampleInfo() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_SampleInfo& operator=(const PerfDataProto_SampleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_SampleInfo& operator=(PerfDataProto_SampleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_SampleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_SampleInfo* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_SampleInfo*>(
               &_PerfDataProto_SampleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PerfDataProto_SampleInfo& a, PerfDataProto_SampleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_SampleInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_SampleInfo* New() const final {
    return CreateMaybeMessage<PerfDataProto_SampleInfo>(nullptr);
  }

  PerfDataProto_SampleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_SampleInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_SampleInfo& from);
  void MergeFrom(const PerfDataProto_SampleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_SampleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.SampleInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
    kSampleTimeNsFieldNumber = 3,
    kIdFieldNumber = 4,
    kCpuFieldNumber = 5,
  };
  // optional uint32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 tid = 2;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 sample_time_ns = 3;
  bool has_sample_time_ns() const;
  void clear_sample_time_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_time_ns() const;
  void set_sample_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 id = 4;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 cpu = 5;
  bool has_cpu() const;
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.SampleInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_time_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_CommEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.CommEvent) */ {
 public:
  PerfDataProto_CommEvent();
  virtual ~PerfDataProto_CommEvent();

  PerfDataProto_CommEvent(const PerfDataProto_CommEvent& from);
  PerfDataProto_CommEvent(PerfDataProto_CommEvent&& from) noexcept
    : PerfDataProto_CommEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_CommEvent& operator=(const PerfDataProto_CommEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_CommEvent& operator=(PerfDataProto_CommEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_CommEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_CommEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_CommEvent*>(
               &_PerfDataProto_CommEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PerfDataProto_CommEvent& a, PerfDataProto_CommEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_CommEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_CommEvent* New() const final {
    return CreateMaybeMessage<PerfDataProto_CommEvent>(nullptr);
  }

  PerfDataProto_CommEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_CommEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_CommEvent& from);
  void MergeFrom(const PerfDataProto_CommEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_CommEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.CommEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleInfoFieldNumber = 6,
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
    kCommMd5PrefixFieldNumber = 4,
    kSampleTimeFieldNumber = 5,
  };
  // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
  bool has_sample_info() const;
  void clear_sample_info();
  const ::metrics::PerfDataProto_SampleInfo& sample_info() const;
  ::metrics::PerfDataProto_SampleInfo* release_sample_info();
  ::metrics::PerfDataProto_SampleInfo* mutable_sample_info();
  void set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info);

  // optional uint32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 tid = 2;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 comm_md5_prefix = 4;
  bool has_comm_md5_prefix() const;
  void clear_comm_md5_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint64 comm_md5_prefix() const;
  void set_comm_md5_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 sample_time = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_sample_time() const;
  PROTOBUF_DEPRECATED void clear_sample_time();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 sample_time() const;
  PROTOBUF_DEPRECATED void set_sample_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.CommEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_SampleInfo* sample_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 comm_md5_prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_time_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_MMapEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.MMapEvent) */ {
 public:
  PerfDataProto_MMapEvent();
  virtual ~PerfDataProto_MMapEvent();

  PerfDataProto_MMapEvent(const PerfDataProto_MMapEvent& from);
  PerfDataProto_MMapEvent(PerfDataProto_MMapEvent&& from) noexcept
    : PerfDataProto_MMapEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_MMapEvent& operator=(const PerfDataProto_MMapEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_MMapEvent& operator=(PerfDataProto_MMapEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_MMapEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_MMapEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_MMapEvent*>(
               &_PerfDataProto_MMapEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PerfDataProto_MMapEvent& a, PerfDataProto_MMapEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_MMapEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_MMapEvent* New() const final {
    return CreateMaybeMessage<PerfDataProto_MMapEvent>(nullptr);
  }

  PerfDataProto_MMapEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_MMapEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_MMapEvent& from);
  void MergeFrom(const PerfDataProto_MMapEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_MMapEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.MMapEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleInfoFieldNumber = 8,
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
    kStartFieldNumber = 3,
    kLenFieldNumber = 4,
    kPgoffFieldNumber = 5,
    kFilenameMd5PrefixFieldNumber = 7,
  };
  // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
  bool has_sample_info() const;
  void clear_sample_info();
  const ::metrics::PerfDataProto_SampleInfo& sample_info() const;
  ::metrics::PerfDataProto_SampleInfo* release_sample_info();
  ::metrics::PerfDataProto_SampleInfo* mutable_sample_info();
  void set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info);

  // optional uint32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 tid = 2;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 start = 3;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 len = 4;
  bool has_len() const;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 pgoff = 5;
  bool has_pgoff() const;
  void clear_pgoff();
  ::PROTOBUF_NAMESPACE_ID::uint64 pgoff() const;
  void set_pgoff(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 filename_md5_prefix = 7;
  bool has_filename_md5_prefix() const;
  void clear_filename_md5_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint64 filename_md5_prefix() const;
  void set_filename_md5_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.MMapEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_SampleInfo* sample_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pgoff_;
  ::PROTOBUF_NAMESPACE_ID::uint64 filename_md5_prefix_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_BranchStackEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.BranchStackEntry) */ {
 public:
  PerfDataProto_BranchStackEntry();
  virtual ~PerfDataProto_BranchStackEntry();

  PerfDataProto_BranchStackEntry(const PerfDataProto_BranchStackEntry& from);
  PerfDataProto_BranchStackEntry(PerfDataProto_BranchStackEntry&& from) noexcept
    : PerfDataProto_BranchStackEntry() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_BranchStackEntry& operator=(const PerfDataProto_BranchStackEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_BranchStackEntry& operator=(PerfDataProto_BranchStackEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_BranchStackEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_BranchStackEntry* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_BranchStackEntry*>(
               &_PerfDataProto_BranchStackEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PerfDataProto_BranchStackEntry& a, PerfDataProto_BranchStackEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_BranchStackEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_BranchStackEntry* New() const final {
    return CreateMaybeMessage<PerfDataProto_BranchStackEntry>(nullptr);
  }

  PerfDataProto_BranchStackEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_BranchStackEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_BranchStackEntry& from);
  void MergeFrom(const PerfDataProto_BranchStackEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_BranchStackEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.BranchStackEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIpFieldNumber = 1,
    kToIpFieldNumber = 2,
    kMispredictedFieldNumber = 3,
  };
  // optional uint64 from_ip = 1;
  bool has_from_ip() const;
  void clear_from_ip();
  ::PROTOBUF_NAMESPACE_ID::uint64 from_ip() const;
  void set_from_ip(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 to_ip = 2;
  bool has_to_ip() const;
  void clear_to_ip();
  ::PROTOBUF_NAMESPACE_ID::uint64 to_ip() const;
  void set_to_ip(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool mispredicted = 3;
  bool has_mispredicted() const;
  void clear_mispredicted();
  bool mispredicted() const;
  void set_mispredicted(bool value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.BranchStackEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_ip_;
  bool mispredicted_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_SampleEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.SampleEvent) */ {
 public:
  PerfDataProto_SampleEvent();
  virtual ~PerfDataProto_SampleEvent();

  PerfDataProto_SampleEvent(const PerfDataProto_SampleEvent& from);
  PerfDataProto_SampleEvent(PerfDataProto_SampleEvent&& from) noexcept
    : PerfDataProto_SampleEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_SampleEvent& operator=(const PerfDataProto_SampleEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_SampleEvent& operator=(PerfDataProto_SampleEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_SampleEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_SampleEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_SampleEvent*>(
               &_PerfDataProto_SampleEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PerfDataProto_SampleEvent& a, PerfDataProto_SampleEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_SampleEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_SampleEvent* New() const final {
    return CreateMaybeMessage<PerfDataProto_SampleEvent>(nullptr);
  }

  PerfDataProto_SampleEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_SampleEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_SampleEvent& from);
  void MergeFrom(const PerfDataProto_SampleEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_SampleEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.SampleEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallchainFieldNumber = 11,
    kBranchStackFieldNumber = 12,
    kIpFieldNumber = 1,
    kPidFieldNumber = 2,
    kTidFieldNumber = 3,
    kSampleTimeNsFieldNumber = 4,
    kAddrFieldNumber = 5,
    kIdFieldNumber = 6,
    kStreamIdFieldNumber = 7,
    kPeriodFieldNumber = 8,
    kCpuFieldNumber = 9,
    kRawSizeFieldNumber = 10,
    kWeightFieldNumber = 15,
    kDataSrcFieldNumber = 16,
    kTransactionFieldNumber = 17,
  };
  // repeated uint64 callchain = 11;
  int callchain_size() const;
  void clear_callchain();
  ::PROTOBUF_NAMESPACE_ID::uint64 callchain(int index) const;
  void set_callchain(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_callchain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      callchain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_callchain();

  // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
  int branch_stack_size() const;
  void clear_branch_stack();
  ::metrics::PerfDataProto_BranchStackEntry* mutable_branch_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_BranchStackEntry >*
      mutable_branch_stack();
  const ::metrics::PerfDataProto_BranchStackEntry& branch_stack(int index) const;
  ::metrics::PerfDataProto_BranchStackEntry* add_branch_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_BranchStackEntry >&
      branch_stack() const;

  // optional uint64 ip = 1;
  bool has_ip() const;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint64 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 tid = 3;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 sample_time_ns = 4;
  bool has_sample_time_ns() const;
  void clear_sample_time_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_time_ns() const;
  void set_sample_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 addr = 5;
  bool has_addr() const;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 id = 6;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 stream_id = 7;
  bool has_stream_id() const;
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 period = 8;
  bool has_period() const;
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint64 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 cpu = 9;
  bool has_cpu() const;
  void clear_cpu();
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu() const;
  void set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 raw_size = 10;
  bool has_raw_size() const;
  void clear_raw_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 raw_size() const;
  void set_raw_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 weight = 15;
  bool has_weight() const;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::uint64 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 data_src = 16;
  bool has_data_src() const;
  void clear_data_src();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_src() const;
  void set_data_src(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 transaction = 17;
  bool has_transaction() const;
  void clear_transaction();
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction() const;
  void set_transaction(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.SampleEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > callchain_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_BranchStackEntry > branch_stack_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sample_time_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cpu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 raw_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 weight_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_src_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_ForkEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.ForkEvent) */ {
 public:
  PerfDataProto_ForkEvent();
  virtual ~PerfDataProto_ForkEvent();

  PerfDataProto_ForkEvent(const PerfDataProto_ForkEvent& from);
  PerfDataProto_ForkEvent(PerfDataProto_ForkEvent&& from) noexcept
    : PerfDataProto_ForkEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_ForkEvent& operator=(const PerfDataProto_ForkEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_ForkEvent& operator=(PerfDataProto_ForkEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_ForkEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_ForkEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_ForkEvent*>(
               &_PerfDataProto_ForkEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PerfDataProto_ForkEvent& a, PerfDataProto_ForkEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_ForkEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_ForkEvent* New() const final {
    return CreateMaybeMessage<PerfDataProto_ForkEvent>(nullptr);
  }

  PerfDataProto_ForkEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_ForkEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_ForkEvent& from);
  void MergeFrom(const PerfDataProto_ForkEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_ForkEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.ForkEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleInfoFieldNumber = 11,
    kPidFieldNumber = 1,
    kPpidFieldNumber = 2,
    kTidFieldNumber = 3,
    kPtidFieldNumber = 4,
    kForkTimeNsFieldNumber = 5,
  };
  // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
  bool has_sample_info() const;
  void clear_sample_info();
  const ::metrics::PerfDataProto_SampleInfo& sample_info() const;
  ::metrics::PerfDataProto_SampleInfo* release_sample_info();
  ::metrics::PerfDataProto_SampleInfo* mutable_sample_info();
  void set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info);

  // optional uint32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ppid = 2;
  bool has_ppid() const;
  void clear_ppid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ppid() const;
  void set_ppid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 tid = 3;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ptid = 4;
  bool has_ptid() const;
  void clear_ptid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ptid() const;
  void set_ptid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 fork_time_ns = 5;
  bool has_fork_time_ns() const;
  void clear_fork_time_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 fork_time_ns() const;
  void set_fork_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.ForkEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_SampleInfo* sample_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ppid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ptid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fork_time_ns_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_EventHeader :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.EventHeader) */ {
 public:
  PerfDataProto_EventHeader();
  virtual ~PerfDataProto_EventHeader();

  PerfDataProto_EventHeader(const PerfDataProto_EventHeader& from);
  PerfDataProto_EventHeader(PerfDataProto_EventHeader&& from) noexcept
    : PerfDataProto_EventHeader() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_EventHeader& operator=(const PerfDataProto_EventHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_EventHeader& operator=(PerfDataProto_EventHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_EventHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_EventHeader* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_EventHeader*>(
               &_PerfDataProto_EventHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PerfDataProto_EventHeader& a, PerfDataProto_EventHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_EventHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_EventHeader* New() const final {
    return CreateMaybeMessage<PerfDataProto_EventHeader>(nullptr);
  }

  PerfDataProto_EventHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_EventHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_EventHeader& from);
  void MergeFrom(const PerfDataProto_EventHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_EventHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.EventHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMiscFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // optional uint32 type = 1;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 misc = 2;
  bool has_misc() const;
  void clear_misc();
  ::PROTOBUF_NAMESPACE_ID::uint32 misc() const;
  void set_misc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 size = 3;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.EventHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 misc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfEvent) */ {
 public:
  PerfDataProto_PerfEvent();
  virtual ~PerfDataProto_PerfEvent();

  PerfDataProto_PerfEvent(const PerfDataProto_PerfEvent& from);
  PerfDataProto_PerfEvent(PerfDataProto_PerfEvent&& from) noexcept
    : PerfDataProto_PerfEvent() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfEvent& operator=(const PerfDataProto_PerfEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfEvent& operator=(PerfDataProto_PerfEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_PerfEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_PerfEvent* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfEvent*>(
               &_PerfDataProto_PerfEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PerfDataProto_PerfEvent& a, PerfDataProto_PerfEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_PerfEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_PerfEvent* New() const final {
    return CreateMaybeMessage<PerfDataProto_PerfEvent>(nullptr);
  }

  PerfDataProto_PerfEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_PerfEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_PerfEvent& from);
  void MergeFrom(const PerfDataProto_PerfEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMmapEventFieldNumber = 2,
    kSampleEventFieldNumber = 3,
    kCommEventFieldNumber = 4,
    kForkEventFieldNumber = 5,
    kExitEventFieldNumber = 9,
  };
  // optional .metrics.PerfDataProto.EventHeader header = 1;
  bool has_header() const;
  void clear_header();
  const ::metrics::PerfDataProto_EventHeader& header() const;
  ::metrics::PerfDataProto_EventHeader* release_header();
  ::metrics::PerfDataProto_EventHeader* mutable_header();
  void set_allocated_header(::metrics::PerfDataProto_EventHeader* header);

  // optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;
  bool has_mmap_event() const;
  void clear_mmap_event();
  const ::metrics::PerfDataProto_MMapEvent& mmap_event() const;
  ::metrics::PerfDataProto_MMapEvent* release_mmap_event();
  ::metrics::PerfDataProto_MMapEvent* mutable_mmap_event();
  void set_allocated_mmap_event(::metrics::PerfDataProto_MMapEvent* mmap_event);

  // optional .metrics.PerfDataProto.SampleEvent sample_event = 3;
  bool has_sample_event() const;
  void clear_sample_event();
  const ::metrics::PerfDataProto_SampleEvent& sample_event() const;
  ::metrics::PerfDataProto_SampleEvent* release_sample_event();
  ::metrics::PerfDataProto_SampleEvent* mutable_sample_event();
  void set_allocated_sample_event(::metrics::PerfDataProto_SampleEvent* sample_event);

  // optional .metrics.PerfDataProto.CommEvent comm_event = 4;
  bool has_comm_event() const;
  void clear_comm_event();
  const ::metrics::PerfDataProto_CommEvent& comm_event() const;
  ::metrics::PerfDataProto_CommEvent* release_comm_event();
  ::metrics::PerfDataProto_CommEvent* mutable_comm_event();
  void set_allocated_comm_event(::metrics::PerfDataProto_CommEvent* comm_event);

  // optional .metrics.PerfDataProto.ForkEvent fork_event = 5;
  bool has_fork_event() const;
  void clear_fork_event();
  const ::metrics::PerfDataProto_ForkEvent& fork_event() const;
  ::metrics::PerfDataProto_ForkEvent* release_fork_event();
  ::metrics::PerfDataProto_ForkEvent* mutable_fork_event();
  void set_allocated_fork_event(::metrics::PerfDataProto_ForkEvent* fork_event);

  // optional .metrics.PerfDataProto.ForkEvent exit_event = 9;
  bool has_exit_event() const;
  void clear_exit_event();
  const ::metrics::PerfDataProto_ForkEvent& exit_event() const;
  ::metrics::PerfDataProto_ForkEvent* release_exit_event();
  ::metrics::PerfDataProto_ForkEvent* mutable_exit_event();
  void set_allocated_exit_event(::metrics::PerfDataProto_ForkEvent* exit_event);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_EventHeader* header_;
  ::metrics::PerfDataProto_MMapEvent* mmap_event_;
  ::metrics::PerfDataProto_SampleEvent* sample_event_;
  ::metrics::PerfDataProto_CommEvent* comm_event_;
  ::metrics::PerfDataProto_ForkEvent* fork_event_;
  ::metrics::PerfDataProto_ForkEvent* exit_event_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfEventStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfEventStats) */ {
 public:
  PerfDataProto_PerfEventStats();
  virtual ~PerfDataProto_PerfEventStats();

  PerfDataProto_PerfEventStats(const PerfDataProto_PerfEventStats& from);
  PerfDataProto_PerfEventStats(PerfDataProto_PerfEventStats&& from) noexcept
    : PerfDataProto_PerfEventStats() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfEventStats& operator=(const PerfDataProto_PerfEventStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfEventStats& operator=(PerfDataProto_PerfEventStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_PerfEventStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_PerfEventStats* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfEventStats*>(
               &_PerfDataProto_PerfEventStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PerfDataProto_PerfEventStats& a, PerfDataProto_PerfEventStats& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_PerfEventStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_PerfEventStats* New() const final {
    return CreateMaybeMessage<PerfDataProto_PerfEventStats>(nullptr);
  }

  PerfDataProto_PerfEventStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_PerfEventStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_PerfEventStats& from);
  void MergeFrom(const PerfDataProto_PerfEventStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfEventStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfEventStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumEventsReadFieldNumber = 1,
    kNumSampleEventsFieldNumber = 2,
    kNumMmapEventsFieldNumber = 3,
    kNumForkEventsFieldNumber = 4,
    kNumExitEventsFieldNumber = 5,
    kNumSampleEventsMappedFieldNumber = 6,
    kDidRemapFieldNumber = 7,
  };
  // optional uint32 num_events_read = 1;
  bool has_num_events_read() const;
  void clear_num_events_read();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_events_read() const;
  void set_num_events_read(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_sample_events = 2;
  bool has_num_sample_events() const;
  void clear_num_sample_events();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sample_events() const;
  void set_num_sample_events(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_mmap_events = 3;
  bool has_num_mmap_events() const;
  void clear_num_mmap_events();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_mmap_events() const;
  void set_num_mmap_events(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_fork_events = 4;
  bool has_num_fork_events() const;
  void clear_num_fork_events();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_fork_events() const;
  void set_num_fork_events(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_exit_events = 5;
  bool has_num_exit_events() const;
  void clear_num_exit_events();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_exit_events() const;
  void set_num_exit_events(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_sample_events_mapped = 6;
  bool has_num_sample_events_mapped() const;
  void clear_num_sample_events_mapped();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sample_events_mapped() const;
  void set_num_sample_events_mapped(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool did_remap = 7;
  bool has_did_remap() const;
  void clear_did_remap();
  bool did_remap() const;
  void set_did_remap(bool value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEventStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_events_read_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sample_events_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_mmap_events_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_fork_events_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_exit_events_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sample_events_mapped_;
  bool did_remap_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_PerfBuildID :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.PerfBuildID) */ {
 public:
  PerfDataProto_PerfBuildID();
  virtual ~PerfDataProto_PerfBuildID();

  PerfDataProto_PerfBuildID(const PerfDataProto_PerfBuildID& from);
  PerfDataProto_PerfBuildID(PerfDataProto_PerfBuildID&& from) noexcept
    : PerfDataProto_PerfBuildID() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_PerfBuildID& operator=(const PerfDataProto_PerfBuildID& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_PerfBuildID& operator=(PerfDataProto_PerfBuildID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_PerfBuildID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_PerfBuildID* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_PerfBuildID*>(
               &_PerfDataProto_PerfBuildID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PerfDataProto_PerfBuildID& a, PerfDataProto_PerfBuildID& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_PerfBuildID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_PerfBuildID* New() const final {
    return CreateMaybeMessage<PerfDataProto_PerfBuildID>(nullptr);
  }

  PerfDataProto_PerfBuildID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_PerfBuildID>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_PerfBuildID& from);
  void MergeFrom(const PerfDataProto_PerfBuildID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_PerfBuildID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.PerfBuildID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildIdHashFieldNumber = 3,
    kMiscFieldNumber = 1,
    kPidFieldNumber = 2,
    kFilenameMd5PrefixFieldNumber = 5,
  };
  // optional bytes build_id_hash = 3;
  bool has_build_id_hash() const;
  void clear_build_id_hash();
  const std::string& build_id_hash() const;
  void set_build_id_hash(const std::string& value);
  void set_build_id_hash(std::string&& value);
  void set_build_id_hash(const char* value);
  void set_build_id_hash(const void* value, size_t size);
  std::string* mutable_build_id_hash();
  std::string* release_build_id_hash();
  void set_allocated_build_id_hash(std::string* build_id_hash);

  // optional uint32 misc = 1;
  bool has_misc() const;
  void clear_misc();
  ::PROTOBUF_NAMESPACE_ID::uint32 misc() const;
  void set_misc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 filename_md5_prefix = 5;
  bool has_filename_md5_prefix() const;
  void clear_filename_md5_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint64 filename_md5_prefix() const;
  void set_filename_md5_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfBuildID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_id_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 misc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 filename_md5_prefix_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_StringMetadata_StringAndMd5sumPrefix :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix) */ {
 public:
  PerfDataProto_StringMetadata_StringAndMd5sumPrefix();
  virtual ~PerfDataProto_StringMetadata_StringAndMd5sumPrefix();

  PerfDataProto_StringMetadata_StringAndMd5sumPrefix(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from);
  PerfDataProto_StringMetadata_StringAndMd5sumPrefix(PerfDataProto_StringMetadata_StringAndMd5sumPrefix&& from) noexcept
    : PerfDataProto_StringMetadata_StringAndMd5sumPrefix() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_StringMetadata_StringAndMd5sumPrefix& operator=(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_StringMetadata_StringAndMd5sumPrefix& operator=(PerfDataProto_StringMetadata_StringAndMd5sumPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_StringMetadata_StringAndMd5sumPrefix* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_StringMetadata_StringAndMd5sumPrefix*>(
               &_PerfDataProto_StringMetadata_StringAndMd5sumPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix& a, PerfDataProto_StringMetadata_StringAndMd5sumPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_StringMetadata_StringAndMd5sumPrefix* New() const final {
    return CreateMaybeMessage<PerfDataProto_StringMetadata_StringAndMd5sumPrefix>(nullptr);
  }

  PerfDataProto_StringMetadata_StringAndMd5sumPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_StringMetadata_StringAndMd5sumPrefix>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from);
  void MergeFrom(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueMd5PrefixFieldNumber = 2,
  };
  // optional uint64 value_md5_prefix = 2;
  bool has_value_md5_prefix() const;
  void clear_value_md5_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint64 value_md5_prefix() const;
  void set_value_md5_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_md5_prefix_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto_StringMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto.StringMetadata) */ {
 public:
  PerfDataProto_StringMetadata();
  virtual ~PerfDataProto_StringMetadata();

  PerfDataProto_StringMetadata(const PerfDataProto_StringMetadata& from);
  PerfDataProto_StringMetadata(PerfDataProto_StringMetadata&& from) noexcept
    : PerfDataProto_StringMetadata() {
    *this = ::std::move(from);
  }

  inline PerfDataProto_StringMetadata& operator=(const PerfDataProto_StringMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto_StringMetadata& operator=(PerfDataProto_StringMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto_StringMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto_StringMetadata* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto_StringMetadata*>(
               &_PerfDataProto_StringMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PerfDataProto_StringMetadata& a, PerfDataProto_StringMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto_StringMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto_StringMetadata* New() const final {
    return CreateMaybeMessage<PerfDataProto_StringMetadata>(nullptr);
  }

  PerfDataProto_StringMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto_StringMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto_StringMetadata& from);
  void MergeFrom(const PerfDataProto_StringMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto_StringMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto.StringMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfDataProto_StringMetadata_StringAndMd5sumPrefix StringAndMd5sumPrefix;

  // accessors -------------------------------------------------------

  enum : int {
    kPerfCommandLineWholeFieldNumber = 8,
  };
  // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
  bool has_perf_command_line_whole() const;
  void clear_perf_command_line_whole();
  const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix& perf_command_line_whole() const;
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* release_perf_command_line_whole();
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* mutable_perf_command_line_whole();
  void set_allocated_perf_command_line_whole(::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* perf_command_line_whole);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.StringMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* perf_command_line_whole_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PerfDataProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PerfDataProto) */ {
 public:
  PerfDataProto();
  virtual ~PerfDataProto();

  PerfDataProto(const PerfDataProto& from);
  PerfDataProto(PerfDataProto&& from) noexcept
    : PerfDataProto() {
    *this = ::std::move(from);
  }

  inline PerfDataProto& operator=(const PerfDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfDataProto& operator=(PerfDataProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfDataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfDataProto* internal_default_instance() {
    return reinterpret_cast<const PerfDataProto*>(
               &_PerfDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PerfDataProto& a, PerfDataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfDataProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfDataProto* New() const final {
    return CreateMaybeMessage<PerfDataProto>(nullptr);
  }

  PerfDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfDataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfDataProto& from);
  void MergeFrom(const PerfDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfDataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.PerfDataProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfDataProto_PerfEventAttr PerfEventAttr;
  typedef PerfDataProto_PerfFileAttr PerfFileAttr;
  typedef PerfDataProto_PerfEventType PerfEventType;
  typedef PerfDataProto_SampleInfo SampleInfo;
  typedef PerfDataProto_CommEvent CommEvent;
  typedef PerfDataProto_MMapEvent MMapEvent;
  typedef PerfDataProto_BranchStackEntry BranchStackEntry;
  typedef PerfDataProto_SampleEvent SampleEvent;
  typedef PerfDataProto_ForkEvent ForkEvent;
  typedef PerfDataProto_EventHeader EventHeader;
  typedef PerfDataProto_PerfEvent PerfEvent;
  typedef PerfDataProto_PerfEventStats PerfEventStats;
  typedef PerfDataProto_PerfBuildID PerfBuildID;
  typedef PerfDataProto_StringMetadata StringMetadata;

  // accessors -------------------------------------------------------

  enum : int {
    kFileAttrsFieldNumber = 1,
    kEventsFieldNumber = 2,
    kBuildIdsFieldNumber = 7,
    kEventTypesFieldNumber = 10,
    kStatsFieldNumber = 4,
    kStringMetadataFieldNumber = 13,
    kTimestampSecFieldNumber = 3,
  };
  // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
  int file_attrs_size() const;
  void clear_file_attrs();
  ::metrics::PerfDataProto_PerfFileAttr* mutable_file_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfFileAttr >*
      mutable_file_attrs();
  const ::metrics::PerfDataProto_PerfFileAttr& file_attrs(int index) const;
  ::metrics::PerfDataProto_PerfFileAttr* add_file_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfFileAttr >&
      file_attrs() const;

  // repeated .metrics.PerfDataProto.PerfEvent events = 2;
  int events_size() const;
  void clear_events();
  ::metrics::PerfDataProto_PerfEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEvent >*
      mutable_events();
  const ::metrics::PerfDataProto_PerfEvent& events(int index) const;
  ::metrics::PerfDataProto_PerfEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEvent >&
      events() const;

  // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
  int build_ids_size() const;
  void clear_build_ids();
  ::metrics::PerfDataProto_PerfBuildID* mutable_build_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfBuildID >*
      mutable_build_ids();
  const ::metrics::PerfDataProto_PerfBuildID& build_ids(int index) const;
  ::metrics::PerfDataProto_PerfBuildID* add_build_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfBuildID >&
      build_ids() const;

  // repeated .metrics.PerfDataProto.PerfEventType event_types = 10;
  int event_types_size() const;
  void clear_event_types();
  ::metrics::PerfDataProto_PerfEventType* mutable_event_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEventType >*
      mutable_event_types();
  const ::metrics::PerfDataProto_PerfEventType& event_types(int index) const;
  ::metrics::PerfDataProto_PerfEventType* add_event_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEventType >&
      event_types() const;

  // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
  bool has_stats() const;
  void clear_stats();
  const ::metrics::PerfDataProto_PerfEventStats& stats() const;
  ::metrics::PerfDataProto_PerfEventStats* release_stats();
  ::metrics::PerfDataProto_PerfEventStats* mutable_stats();
  void set_allocated_stats(::metrics::PerfDataProto_PerfEventStats* stats);

  // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
  bool has_string_metadata() const;
  void clear_string_metadata();
  const ::metrics::PerfDataProto_StringMetadata& string_metadata() const;
  ::metrics::PerfDataProto_StringMetadata* release_string_metadata();
  ::metrics::PerfDataProto_StringMetadata* mutable_string_metadata();
  void set_allocated_string_metadata(::metrics::PerfDataProto_StringMetadata* string_metadata);

  // optional uint64 timestamp_sec = 3;
  bool has_timestamp_sec() const;
  void clear_timestamp_sec();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_sec() const;
  void set_timestamp_sec(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.PerfDataProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfFileAttr > file_attrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEvent > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfBuildID > build_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEventType > event_types_;
  ::metrics::PerfDataProto_PerfEventStats* stats_;
  ::metrics::PerfDataProto_StringMetadata* string_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_sec_;
  friend struct ::TableStruct_perf_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerfDataProto_PerfEventAttr

// optional uint32 type = 1;
inline bool PerfDataProto_PerfEventAttr::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventAttr::type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.type)
  return type_;
}
inline void PerfDataProto_PerfEventAttr::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.type)
}

// optional uint32 size = 2;
inline bool PerfDataProto_PerfEventAttr::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventAttr::size() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.size)
  return size_;
}
inline void PerfDataProto_PerfEventAttr::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.size)
}

// optional uint64 config = 3;
inline bool PerfDataProto_PerfEventAttr::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_config() {
  config_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventAttr::config() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.config)
  return config_;
}
inline void PerfDataProto_PerfEventAttr::set_config(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  config_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.config)
}

// optional uint64 sample_period = 4;
inline bool PerfDataProto_PerfEventAttr::has_sample_period() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_sample_period() {
  sample_period_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventAttr::sample_period() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_period)
  return sample_period_;
}
inline void PerfDataProto_PerfEventAttr::set_sample_period(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sample_period_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_period)
}

// optional uint64 sample_freq = 5;
inline bool PerfDataProto_PerfEventAttr::has_sample_freq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_sample_freq() {
  sample_freq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventAttr::sample_freq() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_freq)
  return sample_freq_;
}
inline void PerfDataProto_PerfEventAttr::set_sample_freq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  sample_freq_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_freq)
}

// optional uint64 sample_type = 6;
inline bool PerfDataProto_PerfEventAttr::has_sample_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_sample_type() {
  sample_type_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventAttr::sample_type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_type)
  return sample_type_;
}
inline void PerfDataProto_PerfEventAttr::set_sample_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  sample_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_type)
}

// optional uint64 read_format = 7;
inline bool PerfDataProto_PerfEventAttr::has_read_format() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_read_format() {
  read_format_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventAttr::read_format() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.read_format)
  return read_format_;
}
inline void PerfDataProto_PerfEventAttr::set_read_format(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  read_format_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.read_format)
}

// optional bool disabled = 8;
inline bool PerfDataProto_PerfEventAttr::has_disabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_disabled() {
  disabled_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PerfDataProto_PerfEventAttr::disabled() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.disabled)
  return disabled_;
}
inline void PerfDataProto_PerfEventAttr::set_disabled(bool value) {
  _has_bits_[0] |= 0x00000080u;
  disabled_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.disabled)
}

// optional bool inherit = 9;
inline bool PerfDataProto_PerfEventAttr::has_inherit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_inherit() {
  inherit_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool PerfDataProto_PerfEventAttr::inherit() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.inherit)
  return inherit_;
}
inline void PerfDataProto_PerfEventAttr::set_inherit(bool value) {
  _has_bits_[0] |= 0x00000100u;
  inherit_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.inherit)
}

// optional bool pinned = 10;
inline bool PerfDataProto_PerfEventAttr::has_pinned() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_pinned() {
  pinned_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool PerfDataProto_PerfEventAttr::pinned() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.pinned)
  return pinned_;
}
inline void PerfDataProto_PerfEventAttr::set_pinned(bool value) {
  _has_bits_[0] |= 0x00000200u;
  pinned_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.pinned)
}

// optional bool exclusive = 11;
inline bool PerfDataProto_PerfEventAttr::has_exclusive() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_exclusive() {
  exclusive_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool PerfDataProto_PerfEventAttr::exclusive() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclusive)
  return exclusive_;
}
inline void PerfDataProto_PerfEventAttr::set_exclusive(bool value) {
  _has_bits_[0] |= 0x00000400u;
  exclusive_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclusive)
}

// optional bool exclude_user = 12;
inline bool PerfDataProto_PerfEventAttr::has_exclude_user() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_user() {
  exclude_user_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PerfDataProto_PerfEventAttr::exclude_user() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_user)
  return exclude_user_;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_user(bool value) {
  _has_bits_[0] |= 0x00000800u;
  exclude_user_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_user)
}

// optional bool exclude_kernel = 13;
inline bool PerfDataProto_PerfEventAttr::has_exclude_kernel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_kernel() {
  exclude_kernel_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool PerfDataProto_PerfEventAttr::exclude_kernel() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_kernel)
  return exclude_kernel_;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_kernel(bool value) {
  _has_bits_[0] |= 0x00001000u;
  exclude_kernel_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_kernel)
}

// optional bool exclude_hv = 14;
inline bool PerfDataProto_PerfEventAttr::has_exclude_hv() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_hv() {
  exclude_hv_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool PerfDataProto_PerfEventAttr::exclude_hv() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_hv)
  return exclude_hv_;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_hv(bool value) {
  _has_bits_[0] |= 0x00002000u;
  exclude_hv_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_hv)
}

// optional bool exclude_idle = 15;
inline bool PerfDataProto_PerfEventAttr::has_exclude_idle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_idle() {
  exclude_idle_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool PerfDataProto_PerfEventAttr::exclude_idle() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_idle)
  return exclude_idle_;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_idle(bool value) {
  _has_bits_[0] |= 0x00004000u;
  exclude_idle_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_idle)
}

// optional bool mmap = 16;
inline bool PerfDataProto_PerfEventAttr::has_mmap() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_mmap() {
  mmap_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool PerfDataProto_PerfEventAttr::mmap() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.mmap)
  return mmap_;
}
inline void PerfDataProto_PerfEventAttr::set_mmap(bool value) {
  _has_bits_[0] |= 0x00008000u;
  mmap_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.mmap)
}

// optional bool comm = 17;
inline bool PerfDataProto_PerfEventAttr::has_comm() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_comm() {
  comm_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool PerfDataProto_PerfEventAttr::comm() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.comm)
  return comm_;
}
inline void PerfDataProto_PerfEventAttr::set_comm(bool value) {
  _has_bits_[0] |= 0x00010000u;
  comm_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.comm)
}

// optional bool freq = 18;
inline bool PerfDataProto_PerfEventAttr::has_freq() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_freq() {
  freq_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool PerfDataProto_PerfEventAttr::freq() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.freq)
  return freq_;
}
inline void PerfDataProto_PerfEventAttr::set_freq(bool value) {
  _has_bits_[0] |= 0x00020000u;
  freq_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.freq)
}

// optional bool inherit_stat = 19;
inline bool PerfDataProto_PerfEventAttr::has_inherit_stat() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_inherit_stat() {
  inherit_stat_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool PerfDataProto_PerfEventAttr::inherit_stat() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.inherit_stat)
  return inherit_stat_;
}
inline void PerfDataProto_PerfEventAttr::set_inherit_stat(bool value) {
  _has_bits_[0] |= 0x00040000u;
  inherit_stat_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.inherit_stat)
}

// optional bool enable_on_exec = 20;
inline bool PerfDataProto_PerfEventAttr::has_enable_on_exec() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_enable_on_exec() {
  enable_on_exec_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool PerfDataProto_PerfEventAttr::enable_on_exec() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.enable_on_exec)
  return enable_on_exec_;
}
inline void PerfDataProto_PerfEventAttr::set_enable_on_exec(bool value) {
  _has_bits_[0] |= 0x00080000u;
  enable_on_exec_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.enable_on_exec)
}

// optional bool task = 21;
inline bool PerfDataProto_PerfEventAttr::has_task() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_task() {
  task_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool PerfDataProto_PerfEventAttr::task() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.task)
  return task_;
}
inline void PerfDataProto_PerfEventAttr::set_task(bool value) {
  _has_bits_[0] |= 0x00100000u;
  task_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.task)
}

// optional bool watermark = 22;
inline bool PerfDataProto_PerfEventAttr::has_watermark() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_watermark() {
  watermark_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool PerfDataProto_PerfEventAttr::watermark() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.watermark)
  return watermark_;
}
inline void PerfDataProto_PerfEventAttr::set_watermark(bool value) {
  _has_bits_[0] |= 0x00200000u;
  watermark_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.watermark)
}

// optional uint32 precise_ip = 23;
inline bool PerfDataProto_PerfEventAttr::has_precise_ip() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_precise_ip() {
  precise_ip_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventAttr::precise_ip() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.precise_ip)
  return precise_ip_;
}
inline void PerfDataProto_PerfEventAttr::set_precise_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  precise_ip_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.precise_ip)
}

// optional bool mmap_data = 24;
inline bool PerfDataProto_PerfEventAttr::has_mmap_data() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_mmap_data() {
  mmap_data_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool PerfDataProto_PerfEventAttr::mmap_data() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.mmap_data)
  return mmap_data_;
}
inline void PerfDataProto_PerfEventAttr::set_mmap_data(bool value) {
  _has_bits_[0] |= 0x00400000u;
  mmap_data_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.mmap_data)
}

// optional bool sample_id_all = 25;
inline bool PerfDataProto_PerfEventAttr::has_sample_id_all() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_sample_id_all() {
  sample_id_all_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool PerfDataProto_PerfEventAttr::sample_id_all() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_id_all)
  return sample_id_all_;
}
inline void PerfDataProto_PerfEventAttr::set_sample_id_all(bool value) {
  _has_bits_[0] |= 0x01000000u;
  sample_id_all_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_id_all)
}

// optional bool exclude_host = 26;
inline bool PerfDataProto_PerfEventAttr::has_exclude_host() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_host() {
  exclude_host_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool PerfDataProto_PerfEventAttr::exclude_host() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_host)
  return exclude_host_;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_host(bool value) {
  _has_bits_[0] |= 0x02000000u;
  exclude_host_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_host)
}

// optional bool exclude_guest = 27;
inline bool PerfDataProto_PerfEventAttr::has_exclude_guest() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_exclude_guest() {
  exclude_guest_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool PerfDataProto_PerfEventAttr::exclude_guest() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_guest)
  return exclude_guest_;
}
inline void PerfDataProto_PerfEventAttr::set_exclude_guest(bool value) {
  _has_bits_[0] |= 0x04000000u;
  exclude_guest_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_guest)
}

// optional uint32 wakeup_events = 28;
inline bool PerfDataProto_PerfEventAttr::has_wakeup_events() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_wakeup_events() {
  wakeup_events_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventAttr::wakeup_events() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.wakeup_events)
  return wakeup_events_;
}
inline void PerfDataProto_PerfEventAttr::set_wakeup_events(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  wakeup_events_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.wakeup_events)
}

// optional uint32 wakeup_watermark = 29;
inline bool PerfDataProto_PerfEventAttr::has_wakeup_watermark() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_wakeup_watermark() {
  wakeup_watermark_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventAttr::wakeup_watermark() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.wakeup_watermark)
  return wakeup_watermark_;
}
inline void PerfDataProto_PerfEventAttr::set_wakeup_watermark(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  wakeup_watermark_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.wakeup_watermark)
}

// optional uint32 bp_type = 30;
inline bool PerfDataProto_PerfEventAttr::has_bp_type() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_bp_type() {
  bp_type_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventAttr::bp_type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.bp_type)
  return bp_type_;
}
inline void PerfDataProto_PerfEventAttr::set_bp_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  bp_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.bp_type)
}

// optional uint64 bp_addr = 31;
inline bool PerfDataProto_PerfEventAttr::has_bp_addr() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_bp_addr() {
  bp_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventAttr::bp_addr() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.bp_addr)
  return bp_addr_;
}
inline void PerfDataProto_PerfEventAttr::set_bp_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x20000000u;
  bp_addr_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.bp_addr)
}

// optional uint64 config1 = 32;
inline bool PerfDataProto_PerfEventAttr::has_config1() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_config1() {
  config1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventAttr::config1() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.config1)
  return config1_;
}
inline void PerfDataProto_PerfEventAttr::set_config1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x40000000u;
  config1_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.config1)
}

// optional uint64 bp_len = 33;
inline bool PerfDataProto_PerfEventAttr::has_bp_len() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_bp_len() {
  bp_len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventAttr::bp_len() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.bp_len)
  return bp_len_;
}
inline void PerfDataProto_PerfEventAttr::set_bp_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x80000000u;
  bp_len_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.bp_len)
}

// optional uint64 config2 = 34;
inline bool PerfDataProto_PerfEventAttr::has_config2() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_config2() {
  config2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventAttr::config2() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.config2)
  return config2_;
}
inline void PerfDataProto_PerfEventAttr::set_config2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000001u;
  config2_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.config2)
}

// optional uint64 branch_sample_type = 35;
inline bool PerfDataProto_PerfEventAttr::has_branch_sample_type() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void PerfDataProto_PerfEventAttr::clear_branch_sample_type() {
  branch_sample_type_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventAttr::branch_sample_type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.branch_sample_type)
  return branch_sample_type_;
}
inline void PerfDataProto_PerfEventAttr::set_branch_sample_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000002u;
  branch_sample_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.branch_sample_type)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfFileAttr

// optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
inline bool PerfDataProto_PerfFileAttr::has_attr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_PerfFileAttr::clear_attr() {
  if (attr_ != nullptr) attr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_PerfEventAttr& PerfDataProto_PerfFileAttr::attr() const {
  const ::metrics::PerfDataProto_PerfEventAttr* p = attr_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfFileAttr.attr)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_PerfEventAttr*>(
      &::metrics::_PerfDataProto_PerfEventAttr_default_instance_);
}
inline ::metrics::PerfDataProto_PerfEventAttr* PerfDataProto_PerfFileAttr::release_attr() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfFileAttr.attr)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_PerfEventAttr* temp = attr_;
  attr_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_PerfEventAttr* PerfDataProto_PerfFileAttr::mutable_attr() {
  _has_bits_[0] |= 0x00000001u;
  if (attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_PerfEventAttr>(GetArenaNoVirtual());
    attr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfFileAttr.attr)
  return attr_;
}
inline void PerfDataProto_PerfFileAttr::set_allocated_attr(::metrics::PerfDataProto_PerfEventAttr* attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attr_;
  }
  if (attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfFileAttr.attr)
}

// repeated uint64 ids = 2;
inline int PerfDataProto_PerfFileAttr::ids_size() const {
  return ids_.size();
}
inline void PerfDataProto_PerfFileAttr::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfFileAttr::ids(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfFileAttr.ids)
  return ids_.Get(index);
}
inline void PerfDataProto_PerfFileAttr::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfFileAttr.ids)
}
inline void PerfDataProto_PerfFileAttr::add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.PerfFileAttr.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PerfDataProto_PerfFileAttr::ids() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.PerfFileAttr.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PerfDataProto_PerfFileAttr::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.PerfFileAttr.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// PerfDataProto_PerfEventType

// optional uint64 id = 1;
inline bool PerfDataProto_PerfEventType::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_PerfEventType::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventType::id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventType.id)
  return id_;
}
inline void PerfDataProto_PerfEventType::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventType.id)
}

// optional uint64 name_md5_prefix = 3;
inline bool PerfDataProto_PerfEventType::has_name_md5_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_PerfEventType::clear_name_md5_prefix() {
  name_md5_prefix_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfEventType::name_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventType.name_md5_prefix)
  return name_md5_prefix_;
}
inline void PerfDataProto_PerfEventType::set_name_md5_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  name_md5_prefix_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventType.name_md5_prefix)
}

// -------------------------------------------------------------------

// PerfDataProto_SampleInfo

// optional uint32 pid = 1;
inline bool PerfDataProto_SampleInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_SampleInfo::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_SampleInfo::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.pid)
  return pid_;
}
inline void PerfDataProto_SampleInfo::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.pid)
}

// optional uint32 tid = 2;
inline bool PerfDataProto_SampleInfo::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_SampleInfo::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_SampleInfo::tid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.tid)
  return tid_;
}
inline void PerfDataProto_SampleInfo::set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.tid)
}

// optional uint64 sample_time_ns = 3;
inline bool PerfDataProto_SampleInfo::has_sample_time_ns() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_SampleInfo::clear_sample_time_ns() {
  sample_time_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleInfo::sample_time_ns() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.sample_time_ns)
  return sample_time_ns_;
}
inline void PerfDataProto_SampleInfo::set_sample_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sample_time_ns_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.sample_time_ns)
}

// optional uint64 id = 4;
inline bool PerfDataProto_SampleInfo::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfDataProto_SampleInfo::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleInfo::id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.id)
  return id_;
}
inline void PerfDataProto_SampleInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.id)
}

// optional uint32 cpu = 5;
inline bool PerfDataProto_SampleInfo::has_cpu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfDataProto_SampleInfo::clear_cpu() {
  cpu_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_SampleInfo::cpu() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.cpu)
  return cpu_;
}
inline void PerfDataProto_SampleInfo::set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  cpu_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.cpu)
}

// -------------------------------------------------------------------

// PerfDataProto_CommEvent

// optional uint32 pid = 1;
inline bool PerfDataProto_CommEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_CommEvent::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_CommEvent::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.pid)
  return pid_;
}
inline void PerfDataProto_CommEvent::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.pid)
}

// optional uint32 tid = 2;
inline bool PerfDataProto_CommEvent::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_CommEvent::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_CommEvent::tid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.tid)
  return tid_;
}
inline void PerfDataProto_CommEvent::set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.tid)
}

// optional uint64 comm_md5_prefix = 4;
inline bool PerfDataProto_CommEvent::has_comm_md5_prefix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfDataProto_CommEvent::clear_comm_md5_prefix() {
  comm_md5_prefix_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_CommEvent::comm_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.comm_md5_prefix)
  return comm_md5_prefix_;
}
inline void PerfDataProto_CommEvent::set_comm_md5_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  comm_md5_prefix_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.comm_md5_prefix)
}

// optional uint64 sample_time = 5 [deprecated = true];
inline bool PerfDataProto_CommEvent::has_sample_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfDataProto_CommEvent::clear_sample_time() {
  sample_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_CommEvent::sample_time() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.sample_time)
  return sample_time_;
}
inline void PerfDataProto_CommEvent::set_sample_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  sample_time_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.sample_time)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
inline bool PerfDataProto_CommEvent::has_sample_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_CommEvent::clear_sample_info() {
  if (sample_info_ != nullptr) sample_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_CommEvent::sample_info() const {
  const ::metrics::PerfDataProto_SampleInfo* p = sample_info_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.sample_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_SampleInfo*>(
      &::metrics::_PerfDataProto_SampleInfo_default_instance_);
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_CommEvent::release_sample_info() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.CommEvent.sample_info)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_CommEvent::mutable_sample_info() {
  _has_bits_[0] |= 0x00000001u;
  if (sample_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_SampleInfo>(GetArenaNoVirtual());
    sample_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.CommEvent.sample_info)
  return sample_info_;
}
inline void PerfDataProto_CommEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sample_info_;
  }
  if (sample_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sample_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sample_info_ = sample_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.CommEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_MMapEvent

// optional uint32 pid = 1;
inline bool PerfDataProto_MMapEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_MMapEvent::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_MMapEvent::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.pid)
  return pid_;
}
inline void PerfDataProto_MMapEvent::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.pid)
}

// optional uint32 tid = 2;
inline bool PerfDataProto_MMapEvent::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_MMapEvent::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_MMapEvent::tid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.tid)
  return tid_;
}
inline void PerfDataProto_MMapEvent::set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.tid)
}

// optional uint64 start = 3;
inline bool PerfDataProto_MMapEvent::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfDataProto_MMapEvent::clear_start() {
  start_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_MMapEvent::start() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.start)
  return start_;
}
inline void PerfDataProto_MMapEvent::set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  start_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.start)
}

// optional uint64 len = 4;
inline bool PerfDataProto_MMapEvent::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfDataProto_MMapEvent::clear_len() {
  len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_MMapEvent::len() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.len)
  return len_;
}
inline void PerfDataProto_MMapEvent::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.len)
}

// optional uint64 pgoff = 5;
inline bool PerfDataProto_MMapEvent::has_pgoff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerfDataProto_MMapEvent::clear_pgoff() {
  pgoff_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_MMapEvent::pgoff() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.pgoff)
  return pgoff_;
}
inline void PerfDataProto_MMapEvent::set_pgoff(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  pgoff_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.pgoff)
}

// optional uint64 filename_md5_prefix = 7;
inline bool PerfDataProto_MMapEvent::has_filename_md5_prefix() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerfDataProto_MMapEvent::clear_filename_md5_prefix() {
  filename_md5_prefix_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_MMapEvent::filename_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.filename_md5_prefix)
  return filename_md5_prefix_;
}
inline void PerfDataProto_MMapEvent::set_filename_md5_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  filename_md5_prefix_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.filename_md5_prefix)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
inline bool PerfDataProto_MMapEvent::has_sample_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_MMapEvent::clear_sample_info() {
  if (sample_info_ != nullptr) sample_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_MMapEvent::sample_info() const {
  const ::metrics::PerfDataProto_SampleInfo* p = sample_info_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.sample_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_SampleInfo*>(
      &::metrics::_PerfDataProto_SampleInfo_default_instance_);
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_MMapEvent::release_sample_info() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.MMapEvent.sample_info)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_MMapEvent::mutable_sample_info() {
  _has_bits_[0] |= 0x00000001u;
  if (sample_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_SampleInfo>(GetArenaNoVirtual());
    sample_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.MMapEvent.sample_info)
  return sample_info_;
}
inline void PerfDataProto_MMapEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sample_info_;
  }
  if (sample_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sample_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sample_info_ = sample_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.MMapEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_BranchStackEntry

// optional uint64 from_ip = 1;
inline bool PerfDataProto_BranchStackEntry::has_from_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_BranchStackEntry::clear_from_ip() {
  from_ip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_BranchStackEntry::from_ip() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.from_ip)
  return from_ip_;
}
inline void PerfDataProto_BranchStackEntry::set_from_ip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  from_ip_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.from_ip)
}

// optional uint64 to_ip = 2;
inline bool PerfDataProto_BranchStackEntry::has_to_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_BranchStackEntry::clear_to_ip() {
  to_ip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_BranchStackEntry::to_ip() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.to_ip)
  return to_ip_;
}
inline void PerfDataProto_BranchStackEntry::set_to_ip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  to_ip_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.to_ip)
}

// optional bool mispredicted = 3;
inline bool PerfDataProto_BranchStackEntry::has_mispredicted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_BranchStackEntry::clear_mispredicted() {
  mispredicted_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PerfDataProto_BranchStackEntry::mispredicted() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.mispredicted)
  return mispredicted_;
}
inline void PerfDataProto_BranchStackEntry::set_mispredicted(bool value) {
  _has_bits_[0] |= 0x00000004u;
  mispredicted_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.mispredicted)
}

// -------------------------------------------------------------------

// PerfDataProto_SampleEvent

// optional uint64 ip = 1;
inline bool PerfDataProto_SampleEvent::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_ip() {
  ip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleEvent::ip() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.ip)
  return ip_;
}
inline void PerfDataProto_SampleEvent::set_ip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ip_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.ip)
}

// optional uint32 pid = 2;
inline bool PerfDataProto_SampleEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_SampleEvent::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.pid)
  return pid_;
}
inline void PerfDataProto_SampleEvent::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.pid)
}

// optional uint32 tid = 3;
inline bool PerfDataProto_SampleEvent::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_SampleEvent::tid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.tid)
  return tid_;
}
inline void PerfDataProto_SampleEvent::set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.tid)
}

// optional uint64 sample_time_ns = 4;
inline bool PerfDataProto_SampleEvent::has_sample_time_ns() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_sample_time_ns() {
  sample_time_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleEvent::sample_time_ns() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.sample_time_ns)
  return sample_time_ns_;
}
inline void PerfDataProto_SampleEvent::set_sample_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  sample_time_ns_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.sample_time_ns)
}

// optional uint64 addr = 5;
inline bool PerfDataProto_SampleEvent::has_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_addr() {
  addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleEvent::addr() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.addr)
  return addr_;
}
inline void PerfDataProto_SampleEvent::set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.addr)
}

// optional uint64 id = 6;
inline bool PerfDataProto_SampleEvent::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleEvent::id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.id)
  return id_;
}
inline void PerfDataProto_SampleEvent::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.id)
}

// optional uint64 stream_id = 7;
inline bool PerfDataProto_SampleEvent::has_stream_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_stream_id() {
  stream_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleEvent::stream_id() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.stream_id)
  return stream_id_;
}
inline void PerfDataProto_SampleEvent::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.stream_id)
}

// optional uint64 period = 8;
inline bool PerfDataProto_SampleEvent::has_period() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_period() {
  period_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleEvent::period() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.period)
  return period_;
}
inline void PerfDataProto_SampleEvent::set_period(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  period_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.period)
}

// optional uint32 cpu = 9;
inline bool PerfDataProto_SampleEvent::has_cpu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_cpu() {
  cpu_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_SampleEvent::cpu() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.cpu)
  return cpu_;
}
inline void PerfDataProto_SampleEvent::set_cpu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  cpu_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.cpu)
}

// optional uint32 raw_size = 10;
inline bool PerfDataProto_SampleEvent::has_raw_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_raw_size() {
  raw_size_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_SampleEvent::raw_size() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.raw_size)
  return raw_size_;
}
inline void PerfDataProto_SampleEvent::set_raw_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  raw_size_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.raw_size)
}

// repeated uint64 callchain = 11;
inline int PerfDataProto_SampleEvent::callchain_size() const {
  return callchain_.size();
}
inline void PerfDataProto_SampleEvent::clear_callchain() {
  callchain_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleEvent::callchain(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.callchain)
  return callchain_.Get(index);
}
inline void PerfDataProto_SampleEvent::set_callchain(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  callchain_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.callchain)
}
inline void PerfDataProto_SampleEvent::add_callchain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  callchain_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.SampleEvent.callchain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PerfDataProto_SampleEvent::callchain() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.SampleEvent.callchain)
  return callchain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PerfDataProto_SampleEvent::mutable_callchain() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.SampleEvent.callchain)
  return &callchain_;
}

// repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
inline int PerfDataProto_SampleEvent::branch_stack_size() const {
  return branch_stack_.size();
}
inline void PerfDataProto_SampleEvent::clear_branch_stack() {
  branch_stack_.Clear();
}
inline ::metrics::PerfDataProto_BranchStackEntry* PerfDataProto_SampleEvent::mutable_branch_stack(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.SampleEvent.branch_stack)
  return branch_stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_BranchStackEntry >*
PerfDataProto_SampleEvent::mutable_branch_stack() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.SampleEvent.branch_stack)
  return &branch_stack_;
}
inline const ::metrics::PerfDataProto_BranchStackEntry& PerfDataProto_SampleEvent::branch_stack(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.branch_stack)
  return branch_stack_.Get(index);
}
inline ::metrics::PerfDataProto_BranchStackEntry* PerfDataProto_SampleEvent::add_branch_stack() {
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.SampleEvent.branch_stack)
  return branch_stack_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_BranchStackEntry >&
PerfDataProto_SampleEvent::branch_stack() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.SampleEvent.branch_stack)
  return branch_stack_;
}

// optional uint64 weight = 15;
inline bool PerfDataProto_SampleEvent::has_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_weight() {
  weight_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleEvent::weight() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.weight)
  return weight_;
}
inline void PerfDataProto_SampleEvent::set_weight(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  weight_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.weight)
}

// optional uint64 data_src = 16;
inline bool PerfDataProto_SampleEvent::has_data_src() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_data_src() {
  data_src_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleEvent::data_src() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.data_src)
  return data_src_;
}
inline void PerfDataProto_SampleEvent::set_data_src(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  data_src_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.data_src)
}

// optional uint64 transaction = 17;
inline bool PerfDataProto_SampleEvent::has_transaction() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PerfDataProto_SampleEvent::clear_transaction() {
  transaction_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_SampleEvent::transaction() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.transaction)
  return transaction_;
}
inline void PerfDataProto_SampleEvent::set_transaction(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  transaction_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.transaction)
}

// -------------------------------------------------------------------

// PerfDataProto_ForkEvent

// optional uint32 pid = 1;
inline bool PerfDataProto_ForkEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_ForkEvent::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_ForkEvent::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.pid)
  return pid_;
}
inline void PerfDataProto_ForkEvent::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.pid)
}

// optional uint32 ppid = 2;
inline bool PerfDataProto_ForkEvent::has_ppid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_ForkEvent::clear_ppid() {
  ppid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_ForkEvent::ppid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.ppid)
  return ppid_;
}
inline void PerfDataProto_ForkEvent::set_ppid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ppid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.ppid)
}

// optional uint32 tid = 3;
inline bool PerfDataProto_ForkEvent::has_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfDataProto_ForkEvent::clear_tid() {
  tid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_ForkEvent::tid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.tid)
  return tid_;
}
inline void PerfDataProto_ForkEvent::set_tid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.tid)
}

// optional uint32 ptid = 4;
inline bool PerfDataProto_ForkEvent::has_ptid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfDataProto_ForkEvent::clear_ptid() {
  ptid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_ForkEvent::ptid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.ptid)
  return ptid_;
}
inline void PerfDataProto_ForkEvent::set_ptid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ptid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.ptid)
}

// optional uint64 fork_time_ns = 5;
inline bool PerfDataProto_ForkEvent::has_fork_time_ns() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerfDataProto_ForkEvent::clear_fork_time_ns() {
  fork_time_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_ForkEvent::fork_time_ns() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.fork_time_ns)
  return fork_time_ns_;
}
inline void PerfDataProto_ForkEvent::set_fork_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  fork_time_ns_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.fork_time_ns)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
inline bool PerfDataProto_ForkEvent::has_sample_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_ForkEvent::clear_sample_info() {
  if (sample_info_ != nullptr) sample_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_ForkEvent::sample_info() const {
  const ::metrics::PerfDataProto_SampleInfo* p = sample_info_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.sample_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_SampleInfo*>(
      &::metrics::_PerfDataProto_SampleInfo_default_instance_);
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_ForkEvent::release_sample_info() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.ForkEvent.sample_info)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
  sample_info_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_SampleInfo* PerfDataProto_ForkEvent::mutable_sample_info() {
  _has_bits_[0] |= 0x00000001u;
  if (sample_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_SampleInfo>(GetArenaNoVirtual());
    sample_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.ForkEvent.sample_info)
  return sample_info_;
}
inline void PerfDataProto_ForkEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sample_info_;
  }
  if (sample_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sample_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sample_info_ = sample_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.ForkEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_EventHeader

// optional uint32 type = 1;
inline bool PerfDataProto_EventHeader::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_EventHeader::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_EventHeader::type() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.EventHeader.type)
  return type_;
}
inline void PerfDataProto_EventHeader::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.EventHeader.type)
}

// optional uint32 misc = 2;
inline bool PerfDataProto_EventHeader::has_misc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_EventHeader::clear_misc() {
  misc_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_EventHeader::misc() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.EventHeader.misc)
  return misc_;
}
inline void PerfDataProto_EventHeader::set_misc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  misc_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.EventHeader.misc)
}

// optional uint32 size = 3;
inline bool PerfDataProto_EventHeader::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_EventHeader::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_EventHeader::size() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.EventHeader.size)
  return size_;
}
inline void PerfDataProto_EventHeader::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.EventHeader.size)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfEvent

// optional .metrics.PerfDataProto.EventHeader header = 1;
inline bool PerfDataProto_PerfEvent::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_PerfEvent::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_EventHeader& PerfDataProto_PerfEvent::header() const {
  const ::metrics::PerfDataProto_EventHeader* p = header_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_EventHeader*>(
      &::metrics::_PerfDataProto_EventHeader_default_instance_);
}
inline ::metrics::PerfDataProto_EventHeader* PerfDataProto_PerfEvent::release_header() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.header)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_EventHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_EventHeader* PerfDataProto_PerfEvent::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_EventHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.header)
  return header_;
}
inline void PerfDataProto_PerfEvent::set_allocated_header(::metrics::PerfDataProto_EventHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.header)
}

// optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;
inline bool PerfDataProto_PerfEvent::has_mmap_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_PerfEvent::clear_mmap_event() {
  if (mmap_event_ != nullptr) mmap_event_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::metrics::PerfDataProto_MMapEvent& PerfDataProto_PerfEvent::mmap_event() const {
  const ::metrics::PerfDataProto_MMapEvent* p = mmap_event_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.mmap_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_MMapEvent*>(
      &::metrics::_PerfDataProto_MMapEvent_default_instance_);
}
inline ::metrics::PerfDataProto_MMapEvent* PerfDataProto_PerfEvent::release_mmap_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.mmap_event)
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::PerfDataProto_MMapEvent* temp = mmap_event_;
  mmap_event_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_MMapEvent* PerfDataProto_PerfEvent::mutable_mmap_event() {
  _has_bits_[0] |= 0x00000002u;
  if (mmap_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_MMapEvent>(GetArenaNoVirtual());
    mmap_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.mmap_event)
  return mmap_event_;
}
inline void PerfDataProto_PerfEvent::set_allocated_mmap_event(::metrics::PerfDataProto_MMapEvent* mmap_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mmap_event_;
  }
  if (mmap_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mmap_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mmap_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mmap_event_ = mmap_event;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.mmap_event)
}

// optional .metrics.PerfDataProto.SampleEvent sample_event = 3;
inline bool PerfDataProto_PerfEvent::has_sample_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_PerfEvent::clear_sample_event() {
  if (sample_event_ != nullptr) sample_event_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::metrics::PerfDataProto_SampleEvent& PerfDataProto_PerfEvent::sample_event() const {
  const ::metrics::PerfDataProto_SampleEvent* p = sample_event_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.sample_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_SampleEvent*>(
      &::metrics::_PerfDataProto_SampleEvent_default_instance_);
}
inline ::metrics::PerfDataProto_SampleEvent* PerfDataProto_PerfEvent::release_sample_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.sample_event)
  _has_bits_[0] &= ~0x00000004u;
  ::metrics::PerfDataProto_SampleEvent* temp = sample_event_;
  sample_event_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_SampleEvent* PerfDataProto_PerfEvent::mutable_sample_event() {
  _has_bits_[0] |= 0x00000004u;
  if (sample_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_SampleEvent>(GetArenaNoVirtual());
    sample_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.sample_event)
  return sample_event_;
}
inline void PerfDataProto_PerfEvent::set_allocated_sample_event(::metrics::PerfDataProto_SampleEvent* sample_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sample_event_;
  }
  if (sample_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sample_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sample_event_ = sample_event;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.sample_event)
}

// optional .metrics.PerfDataProto.CommEvent comm_event = 4;
inline bool PerfDataProto_PerfEvent::has_comm_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfDataProto_PerfEvent::clear_comm_event() {
  if (comm_event_ != nullptr) comm_event_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::metrics::PerfDataProto_CommEvent& PerfDataProto_PerfEvent::comm_event() const {
  const ::metrics::PerfDataProto_CommEvent* p = comm_event_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.comm_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_CommEvent*>(
      &::metrics::_PerfDataProto_CommEvent_default_instance_);
}
inline ::metrics::PerfDataProto_CommEvent* PerfDataProto_PerfEvent::release_comm_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.comm_event)
  _has_bits_[0] &= ~0x00000008u;
  ::metrics::PerfDataProto_CommEvent* temp = comm_event_;
  comm_event_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_CommEvent* PerfDataProto_PerfEvent::mutable_comm_event() {
  _has_bits_[0] |= 0x00000008u;
  if (comm_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_CommEvent>(GetArenaNoVirtual());
    comm_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.comm_event)
  return comm_event_;
}
inline void PerfDataProto_PerfEvent::set_allocated_comm_event(::metrics::PerfDataProto_CommEvent* comm_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete comm_event_;
  }
  if (comm_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      comm_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comm_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  comm_event_ = comm_event;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.comm_event)
}

// optional .metrics.PerfDataProto.ForkEvent fork_event = 5;
inline bool PerfDataProto_PerfEvent::has_fork_event() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfDataProto_PerfEvent::clear_fork_event() {
  if (fork_event_ != nullptr) fork_event_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::metrics::PerfDataProto_ForkEvent& PerfDataProto_PerfEvent::fork_event() const {
  const ::metrics::PerfDataProto_ForkEvent* p = fork_event_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.fork_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_ForkEvent*>(
      &::metrics::_PerfDataProto_ForkEvent_default_instance_);
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::release_fork_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.fork_event)
  _has_bits_[0] &= ~0x00000010u;
  ::metrics::PerfDataProto_ForkEvent* temp = fork_event_;
  fork_event_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::mutable_fork_event() {
  _has_bits_[0] |= 0x00000010u;
  if (fork_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_ForkEvent>(GetArenaNoVirtual());
    fork_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.fork_event)
  return fork_event_;
}
inline void PerfDataProto_PerfEvent::set_allocated_fork_event(::metrics::PerfDataProto_ForkEvent* fork_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fork_event_;
  }
  if (fork_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fork_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fork_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  fork_event_ = fork_event;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.fork_event)
}

// optional .metrics.PerfDataProto.ForkEvent exit_event = 9;
inline bool PerfDataProto_PerfEvent::has_exit_event() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerfDataProto_PerfEvent::clear_exit_event() {
  if (exit_event_ != nullptr) exit_event_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::metrics::PerfDataProto_ForkEvent& PerfDataProto_PerfEvent::exit_event() const {
  const ::metrics::PerfDataProto_ForkEvent* p = exit_event_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.exit_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_ForkEvent*>(
      &::metrics::_PerfDataProto_ForkEvent_default_instance_);
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::release_exit_event() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.exit_event)
  _has_bits_[0] &= ~0x00000020u;
  ::metrics::PerfDataProto_ForkEvent* temp = exit_event_;
  exit_event_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::mutable_exit_event() {
  _has_bits_[0] |= 0x00000020u;
  if (exit_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_ForkEvent>(GetArenaNoVirtual());
    exit_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.exit_event)
  return exit_event_;
}
inline void PerfDataProto_PerfEvent::set_allocated_exit_event(::metrics::PerfDataProto_ForkEvent* exit_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete exit_event_;
  }
  if (exit_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exit_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exit_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  exit_event_ = exit_event;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.exit_event)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfEventStats

// optional uint32 num_events_read = 1;
inline bool PerfDataProto_PerfEventStats::has_num_events_read() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_PerfEventStats::clear_num_events_read() {
  num_events_read_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventStats::num_events_read() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_events_read)
  return num_events_read_;
}
inline void PerfDataProto_PerfEventStats::set_num_events_read(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_events_read_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_events_read)
}

// optional uint32 num_sample_events = 2;
inline bool PerfDataProto_PerfEventStats::has_num_sample_events() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_PerfEventStats::clear_num_sample_events() {
  num_sample_events_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventStats::num_sample_events() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_sample_events)
  return num_sample_events_;
}
inline void PerfDataProto_PerfEventStats::set_num_sample_events(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_sample_events_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_sample_events)
}

// optional uint32 num_mmap_events = 3;
inline bool PerfDataProto_PerfEventStats::has_num_mmap_events() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_PerfEventStats::clear_num_mmap_events() {
  num_mmap_events_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventStats::num_mmap_events() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_mmap_events)
  return num_mmap_events_;
}
inline void PerfDataProto_PerfEventStats::set_num_mmap_events(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_mmap_events_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_mmap_events)
}

// optional uint32 num_fork_events = 4;
inline bool PerfDataProto_PerfEventStats::has_num_fork_events() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfDataProto_PerfEventStats::clear_num_fork_events() {
  num_fork_events_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventStats::num_fork_events() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_fork_events)
  return num_fork_events_;
}
inline void PerfDataProto_PerfEventStats::set_num_fork_events(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_fork_events_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_fork_events)
}

// optional uint32 num_exit_events = 5;
inline bool PerfDataProto_PerfEventStats::has_num_exit_events() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfDataProto_PerfEventStats::clear_num_exit_events() {
  num_exit_events_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventStats::num_exit_events() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_exit_events)
  return num_exit_events_;
}
inline void PerfDataProto_PerfEventStats::set_num_exit_events(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_exit_events_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_exit_events)
}

// optional uint32 num_sample_events_mapped = 6;
inline bool PerfDataProto_PerfEventStats::has_num_sample_events_mapped() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerfDataProto_PerfEventStats::clear_num_sample_events_mapped() {
  num_sample_events_mapped_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfEventStats::num_sample_events_mapped() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_sample_events_mapped)
  return num_sample_events_mapped_;
}
inline void PerfDataProto_PerfEventStats::set_num_sample_events_mapped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_sample_events_mapped_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_sample_events_mapped)
}

// optional bool did_remap = 7;
inline bool PerfDataProto_PerfEventStats::has_did_remap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerfDataProto_PerfEventStats::clear_did_remap() {
  did_remap_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PerfDataProto_PerfEventStats::did_remap() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.did_remap)
  return did_remap_;
}
inline void PerfDataProto_PerfEventStats::set_did_remap(bool value) {
  _has_bits_[0] |= 0x00000040u;
  did_remap_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.did_remap)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfBuildID

// optional uint32 misc = 1;
inline bool PerfDataProto_PerfBuildID::has_misc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto_PerfBuildID::clear_misc() {
  misc_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfBuildID::misc() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.misc)
  return misc_;
}
inline void PerfDataProto_PerfBuildID::set_misc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  misc_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.misc)
}

// optional uint32 pid = 2;
inline bool PerfDataProto_PerfBuildID::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto_PerfBuildID::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfDataProto_PerfBuildID::pid() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.pid)
  return pid_;
}
inline void PerfDataProto_PerfBuildID::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.pid)
}

// optional bytes build_id_hash = 3;
inline bool PerfDataProto_PerfBuildID::has_build_id_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_PerfBuildID::clear_build_id_hash() {
  build_id_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerfDataProto_PerfBuildID::build_id_hash() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.build_id_hash)
  return build_id_hash_.GetNoArena();
}
inline void PerfDataProto_PerfBuildID::set_build_id_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  build_id_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.build_id_hash)
}
inline void PerfDataProto_PerfBuildID::set_build_id_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  build_id_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.PerfDataProto.PerfBuildID.build_id_hash)
}
inline void PerfDataProto_PerfBuildID::set_build_id_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  build_id_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.PerfDataProto.PerfBuildID.build_id_hash)
}
inline void PerfDataProto_PerfBuildID::set_build_id_hash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  build_id_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.PerfDataProto.PerfBuildID.build_id_hash)
}
inline std::string* PerfDataProto_PerfBuildID::mutable_build_id_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfBuildID.build_id_hash)
  return build_id_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerfDataProto_PerfBuildID::release_build_id_hash() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfBuildID.build_id_hash)
  if (!has_build_id_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return build_id_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerfDataProto_PerfBuildID::set_allocated_build_id_hash(std::string* build_id_hash) {
  if (build_id_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  build_id_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_id_hash);
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfBuildID.build_id_hash)
}

// optional uint64 filename_md5_prefix = 5;
inline bool PerfDataProto_PerfBuildID::has_filename_md5_prefix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfDataProto_PerfBuildID::clear_filename_md5_prefix() {
  filename_md5_prefix_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_PerfBuildID::filename_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.filename_md5_prefix)
  return filename_md5_prefix_;
}
inline void PerfDataProto_PerfBuildID::set_filename_md5_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  filename_md5_prefix_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.filename_md5_prefix)
}

// -------------------------------------------------------------------

// PerfDataProto_StringMetadata_StringAndMd5sumPrefix

// optional uint64 value_md5_prefix = 2;
inline bool PerfDataProto_StringMetadata_StringAndMd5sumPrefix::has_value_md5_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::clear_value_md5_prefix() {
  value_md5_prefix_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto_StringMetadata_StringAndMd5sumPrefix::value_md5_prefix() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.value_md5_prefix)
  return value_md5_prefix_;
}
inline void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::set_value_md5_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  value_md5_prefix_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.value_md5_prefix)
}

// -------------------------------------------------------------------

// PerfDataProto_StringMetadata

// optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
inline bool PerfDataProto_StringMetadata::has_perf_command_line_whole() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto_StringMetadata::clear_perf_command_line_whole() {
  if (perf_command_line_whole_ != nullptr) perf_command_line_whole_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix& PerfDataProto_StringMetadata::perf_command_line_whole() const {
  const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* p = perf_command_line_whole_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix*>(
      &::metrics::_PerfDataProto_StringMetadata_StringAndMd5sumPrefix_default_instance_);
}
inline ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* PerfDataProto_StringMetadata::release_perf_command_line_whole() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* temp = perf_command_line_whole_;
  perf_command_line_whole_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* PerfDataProto_StringMetadata::mutable_perf_command_line_whole() {
  _has_bits_[0] |= 0x00000001u;
  if (perf_command_line_whole_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix>(GetArenaNoVirtual());
    perf_command_line_whole_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
  return perf_command_line_whole_;
}
inline void PerfDataProto_StringMetadata::set_allocated_perf_command_line_whole(::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* perf_command_line_whole) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete perf_command_line_whole_;
  }
  if (perf_command_line_whole) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perf_command_line_whole = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_command_line_whole, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  perf_command_line_whole_ = perf_command_line_whole;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
}

// -------------------------------------------------------------------

// PerfDataProto

// repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
inline int PerfDataProto::file_attrs_size() const {
  return file_attrs_.size();
}
inline void PerfDataProto::clear_file_attrs() {
  file_attrs_.Clear();
}
inline ::metrics::PerfDataProto_PerfFileAttr* PerfDataProto::mutable_file_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.file_attrs)
  return file_attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfFileAttr >*
PerfDataProto::mutable_file_attrs() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.file_attrs)
  return &file_attrs_;
}
inline const ::metrics::PerfDataProto_PerfFileAttr& PerfDataProto::file_attrs(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.file_attrs)
  return file_attrs_.Get(index);
}
inline ::metrics::PerfDataProto_PerfFileAttr* PerfDataProto::add_file_attrs() {
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.file_attrs)
  return file_attrs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfFileAttr >&
PerfDataProto::file_attrs() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.file_attrs)
  return file_attrs_;
}

// repeated .metrics.PerfDataProto.PerfEvent events = 2;
inline int PerfDataProto::events_size() const {
  return events_.size();
}
inline void PerfDataProto::clear_events() {
  events_.Clear();
}
inline ::metrics::PerfDataProto_PerfEvent* PerfDataProto::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEvent >*
PerfDataProto::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.events)
  return &events_;
}
inline const ::metrics::PerfDataProto_PerfEvent& PerfDataProto::events(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.events)
  return events_.Get(index);
}
inline ::metrics::PerfDataProto_PerfEvent* PerfDataProto::add_events() {
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEvent >&
PerfDataProto::events() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.events)
  return events_;
}

// repeated .metrics.PerfDataProto.PerfEventType event_types = 10;
inline int PerfDataProto::event_types_size() const {
  return event_types_.size();
}
inline void PerfDataProto::clear_event_types() {
  event_types_.Clear();
}
inline ::metrics::PerfDataProto_PerfEventType* PerfDataProto::mutable_event_types(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.event_types)
  return event_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEventType >*
PerfDataProto::mutable_event_types() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.event_types)
  return &event_types_;
}
inline const ::metrics::PerfDataProto_PerfEventType& PerfDataProto::event_types(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.event_types)
  return event_types_.Get(index);
}
inline ::metrics::PerfDataProto_PerfEventType* PerfDataProto::add_event_types() {
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.event_types)
  return event_types_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfEventType >&
PerfDataProto::event_types() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.event_types)
  return event_types_;
}

// optional uint64 timestamp_sec = 3;
inline bool PerfDataProto::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfDataProto::clear_timestamp_sec() {
  timestamp_sec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfDataProto::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.timestamp_sec)
  return timestamp_sec_;
}
inline void PerfDataProto::set_timestamp_sec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:metrics.PerfDataProto.timestamp_sec)
}

// optional .metrics.PerfDataProto.PerfEventStats stats = 4;
inline bool PerfDataProto::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfDataProto::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::metrics::PerfDataProto_PerfEventStats& PerfDataProto::stats() const {
  const ::metrics::PerfDataProto_PerfEventStats* p = stats_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_PerfEventStats*>(
      &::metrics::_PerfDataProto_PerfEventStats_default_instance_);
}
inline ::metrics::PerfDataProto_PerfEventStats* PerfDataProto::release_stats() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.stats)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::PerfDataProto_PerfEventStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_PerfEventStats* PerfDataProto::mutable_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_PerfEventStats>(GetArenaNoVirtual());
    stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.stats)
  return stats_;
}
inline void PerfDataProto::set_allocated_stats(::metrics::PerfDataProto_PerfEventStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.stats)
}

// repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
inline int PerfDataProto::build_ids_size() const {
  return build_ids_.size();
}
inline void PerfDataProto::clear_build_ids() {
  build_ids_.Clear();
}
inline ::metrics::PerfDataProto_PerfBuildID* PerfDataProto::mutable_build_ids(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.build_ids)
  return build_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfBuildID >*
PerfDataProto::mutable_build_ids() {
  // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.build_ids)
  return &build_ids_;
}
inline const ::metrics::PerfDataProto_PerfBuildID& PerfDataProto::build_ids(int index) const {
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.build_ids)
  return build_ids_.Get(index);
}
inline ::metrics::PerfDataProto_PerfBuildID* PerfDataProto::add_build_ids() {
  // @@protoc_insertion_point(field_add:metrics.PerfDataProto.build_ids)
  return build_ids_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto_PerfBuildID >&
PerfDataProto::build_ids() const {
  // @@protoc_insertion_point(field_list:metrics.PerfDataProto.build_ids)
  return build_ids_;
}

// optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
inline bool PerfDataProto::has_string_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfDataProto::clear_string_metadata() {
  if (string_metadata_ != nullptr) string_metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::metrics::PerfDataProto_StringMetadata& PerfDataProto::string_metadata() const {
  const ::metrics::PerfDataProto_StringMetadata* p = string_metadata_;
  // @@protoc_insertion_point(field_get:metrics.PerfDataProto.string_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::PerfDataProto_StringMetadata*>(
      &::metrics::_PerfDataProto_StringMetadata_default_instance_);
}
inline ::metrics::PerfDataProto_StringMetadata* PerfDataProto::release_string_metadata() {
  // @@protoc_insertion_point(field_release:metrics.PerfDataProto.string_metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::PerfDataProto_StringMetadata* temp = string_metadata_;
  string_metadata_ = nullptr;
  return temp;
}
inline ::metrics::PerfDataProto_StringMetadata* PerfDataProto::mutable_string_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (string_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::PerfDataProto_StringMetadata>(GetArenaNoVirtual());
    string_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.string_metadata)
  return string_metadata_;
}
inline void PerfDataProto::set_allocated_string_metadata(::metrics::PerfDataProto_StringMetadata* string_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete string_metadata_;
  }
  if (string_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      string_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_metadata_ = string_metadata;
  // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.string_metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_perf_5fdata_2eproto
