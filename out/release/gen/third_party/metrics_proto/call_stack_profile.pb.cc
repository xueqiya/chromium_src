// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: call_stack_profile.proto

#include "call_stack_profile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_call_5fstack_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallStackProfile_AsyncBacktrace_call_5fstack_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fstack_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallStackProfile_Location_call_5fstack_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fstack_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallStackProfile_MetadataItem_call_5fstack_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fstack_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallStackProfile_ModuleIdentifier_call_5fstack_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fstack_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallStackProfile_Sample_call_5fstack_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fstack_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallStackProfile_Stack_call_5fstack_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_call_5fstack_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallStackProfile_StackSample_call_5fstack_5fprofile_2eproto;
namespace metrics {
class CallStackProfile_ModuleIdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallStackProfile_ModuleIdentifier> _instance;
} _CallStackProfile_ModuleIdentifier_default_instance_;
class CallStackProfile_LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallStackProfile_Location> _instance;
} _CallStackProfile_Location_default_instance_;
class CallStackProfile_StackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallStackProfile_Stack> _instance;
} _CallStackProfile_Stack_default_instance_;
class CallStackProfile_MetadataItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallStackProfile_MetadataItem> _instance;
} _CallStackProfile_MetadataItem_default_instance_;
class CallStackProfile_AsyncBacktraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallStackProfile_AsyncBacktrace> _instance;
} _CallStackProfile_AsyncBacktrace_default_instance_;
class CallStackProfile_SampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallStackProfile_Sample> _instance;
} _CallStackProfile_Sample_default_instance_;
class CallStackProfile_StackSampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallStackProfile_StackSample> _instance;
} _CallStackProfile_StackSample_default_instance_;
class CallStackProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallStackProfile> _instance;
} _CallStackProfile_default_instance_;
}  // namespace metrics
static void InitDefaultsscc_info_CallStackProfile_call_5fstack_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CallStackProfile_default_instance_;
    new (ptr) ::metrics::CallStackProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CallStackProfile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CallStackProfile_call_5fstack_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_CallStackProfile_call_5fstack_5fprofile_2eproto}, {
      &scc_info_CallStackProfile_Sample_call_5fstack_5fprofile_2eproto.base,
      &scc_info_CallStackProfile_ModuleIdentifier_call_5fstack_5fprofile_2eproto.base,
      &scc_info_CallStackProfile_MetadataItem_call_5fstack_5fprofile_2eproto.base,
      &scc_info_CallStackProfile_AsyncBacktrace_call_5fstack_5fprofile_2eproto.base,
      &scc_info_CallStackProfile_Stack_call_5fstack_5fprofile_2eproto.base,
      &scc_info_CallStackProfile_StackSample_call_5fstack_5fprofile_2eproto.base,}};

static void InitDefaultsscc_info_CallStackProfile_AsyncBacktrace_call_5fstack_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CallStackProfile_AsyncBacktrace_default_instance_;
    new (ptr) ::metrics::CallStackProfile_AsyncBacktrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CallStackProfile_AsyncBacktrace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallStackProfile_AsyncBacktrace_call_5fstack_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CallStackProfile_AsyncBacktrace_call_5fstack_5fprofile_2eproto}, {
      &scc_info_CallStackProfile_Location_call_5fstack_5fprofile_2eproto.base,}};

static void InitDefaultsscc_info_CallStackProfile_Location_call_5fstack_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CallStackProfile_Location_default_instance_;
    new (ptr) ::metrics::CallStackProfile_Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CallStackProfile_Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallStackProfile_Location_call_5fstack_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CallStackProfile_Location_call_5fstack_5fprofile_2eproto}, {}};

static void InitDefaultsscc_info_CallStackProfile_MetadataItem_call_5fstack_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CallStackProfile_MetadataItem_default_instance_;
    new (ptr) ::metrics::CallStackProfile_MetadataItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CallStackProfile_MetadataItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallStackProfile_MetadataItem_call_5fstack_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CallStackProfile_MetadataItem_call_5fstack_5fprofile_2eproto}, {}};

static void InitDefaultsscc_info_CallStackProfile_ModuleIdentifier_call_5fstack_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CallStackProfile_ModuleIdentifier_default_instance_;
    new (ptr) ::metrics::CallStackProfile_ModuleIdentifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CallStackProfile_ModuleIdentifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallStackProfile_ModuleIdentifier_call_5fstack_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CallStackProfile_ModuleIdentifier_call_5fstack_5fprofile_2eproto}, {}};

static void InitDefaultsscc_info_CallStackProfile_Sample_call_5fstack_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CallStackProfile_Sample_default_instance_;
    new (ptr) ::metrics::CallStackProfile_Sample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CallStackProfile_Sample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallStackProfile_Sample_call_5fstack_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CallStackProfile_Sample_call_5fstack_5fprofile_2eproto}, {
      &scc_info_CallStackProfile_Location_call_5fstack_5fprofile_2eproto.base,}};

static void InitDefaultsscc_info_CallStackProfile_Stack_call_5fstack_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CallStackProfile_Stack_default_instance_;
    new (ptr) ::metrics::CallStackProfile_Stack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CallStackProfile_Stack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallStackProfile_Stack_call_5fstack_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CallStackProfile_Stack_call_5fstack_5fprofile_2eproto}, {
      &scc_info_CallStackProfile_Location_call_5fstack_5fprofile_2eproto.base,}};

static void InitDefaultsscc_info_CallStackProfile_StackSample_call_5fstack_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CallStackProfile_StackSample_default_instance_;
    new (ptr) ::metrics::CallStackProfile_StackSample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CallStackProfile_StackSample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallStackProfile_StackSample_call_5fstack_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CallStackProfile_StackSample_call_5fstack_5fprofile_2eproto}, {
      &scc_info_CallStackProfile_MetadataItem_call_5fstack_5fprofile_2eproto.base,}};

namespace metrics {

// ===================================================================

void CallStackProfile_ModuleIdentifier::InitAsDefaultInstance() {
}
class CallStackProfile_ModuleIdentifier::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_ModuleIdentifier>()._has_bits_);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_md5_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallStackProfile_ModuleIdentifier::CallStackProfile_ModuleIdentifier()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CallStackProfile.ModuleIdentifier)
}
CallStackProfile_ModuleIdentifier::CallStackProfile_ModuleIdentifier(const CallStackProfile_ModuleIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  build_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_id()) {
    build_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.build_id_);
  }
  name_md5_prefix_ = from.name_md5_prefix_;
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.ModuleIdentifier)
}

void CallStackProfile_ModuleIdentifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallStackProfile_ModuleIdentifier_call_5fstack_5fprofile_2eproto.base);
  build_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_md5_prefix_ = PROTOBUF_ULONGLONG(0);
}

CallStackProfile_ModuleIdentifier::~CallStackProfile_ModuleIdentifier() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.ModuleIdentifier)
  SharedDtor();
}

void CallStackProfile_ModuleIdentifier::SharedDtor() {
  build_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CallStackProfile_ModuleIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallStackProfile_ModuleIdentifier& CallStackProfile_ModuleIdentifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallStackProfile_ModuleIdentifier_call_5fstack_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void CallStackProfile_ModuleIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.ModuleIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    build_id_.ClearNonDefaultToEmptyNoArena();
  }
  name_md5_prefix_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallStackProfile_ModuleIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string build_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_build_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 name_md5_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_name_md5_prefix(&has_bits);
          name_md5_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallStackProfile_ModuleIdentifier::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CallStackProfile.ModuleIdentifier)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string build_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_build_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 name_md5_prefix = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_name_md5_prefix(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &name_md5_prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CallStackProfile.ModuleIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CallStackProfile.ModuleIdentifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallStackProfile_ModuleIdentifier::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CallStackProfile.ModuleIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string build_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->build_id(), output);
  }

  // optional fixed64 name_md5_prefix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(2, this->name_md5_prefix(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CallStackProfile.ModuleIdentifier)
}

size_t CallStackProfile_ModuleIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.ModuleIdentifier)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string build_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->build_id());
    }

    // optional fixed64 name_md5_prefix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_ModuleIdentifier::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CallStackProfile_ModuleIdentifier*>(
      &from));
}

void CallStackProfile_ModuleIdentifier::MergeFrom(const CallStackProfile_ModuleIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.ModuleIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      build_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.build_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      name_md5_prefix_ = from.name_md5_prefix_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CallStackProfile_ModuleIdentifier::CopyFrom(const CallStackProfile_ModuleIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.ModuleIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_ModuleIdentifier::IsInitialized() const {
  return true;
}

void CallStackProfile_ModuleIdentifier::InternalSwap(CallStackProfile_ModuleIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  build_id_.Swap(&other->build_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(name_md5_prefix_, other->name_md5_prefix_);
}

std::string CallStackProfile_ModuleIdentifier::GetTypeName() const {
  return "metrics.CallStackProfile.ModuleIdentifier";
}


// ===================================================================

void CallStackProfile_Location::InitAsDefaultInstance() {
}
class CallStackProfile_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_Location>()._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_module_id_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallStackProfile_Location::CallStackProfile_Location()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CallStackProfile.Location)
}
CallStackProfile_Location::CallStackProfile_Location(const CallStackProfile_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&module_id_index_) -
    reinterpret_cast<char*>(&address_)) + sizeof(module_id_index_));
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.Location)
}

void CallStackProfile_Location::SharedCtor() {
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&module_id_index_) -
      reinterpret_cast<char*>(&address_)) + sizeof(module_id_index_));
}

CallStackProfile_Location::~CallStackProfile_Location() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.Location)
  SharedDtor();
}

void CallStackProfile_Location::SharedDtor() {
}

void CallStackProfile_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallStackProfile_Location& CallStackProfile_Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallStackProfile_Location_call_5fstack_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void CallStackProfile_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&module_id_index_) -
        reinterpret_cast<char*>(&address_)) + sizeof(module_id_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallStackProfile_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_address(&has_bits);
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 module_id_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_module_id_index(&has_bits);
          module_id_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallStackProfile_Location::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CallStackProfile.Location)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_address(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 module_id_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_module_id_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CallStackProfile.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CallStackProfile.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallStackProfile_Location::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CallStackProfile.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }

  // optional int32 module_id_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->module_id_index(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CallStackProfile.Location)
}

size_t CallStackProfile_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.Location)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->address());
    }

    // optional int32 module_id_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->module_id_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_Location::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CallStackProfile_Location*>(
      &from));
}

void CallStackProfile_Location::MergeFrom(const CallStackProfile_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      address_ = from.address_;
    }
    if (cached_has_bits & 0x00000002u) {
      module_id_index_ = from.module_id_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CallStackProfile_Location::CopyFrom(const CallStackProfile_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_Location::IsInitialized() const {
  return true;
}

void CallStackProfile_Location::InternalSwap(CallStackProfile_Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(address_, other->address_);
  swap(module_id_index_, other->module_id_index_);
}

std::string CallStackProfile_Location::GetTypeName() const {
  return "metrics.CallStackProfile.Location";
}


// ===================================================================

void CallStackProfile_Stack::InitAsDefaultInstance() {
}
class CallStackProfile_Stack::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_Stack>()._has_bits_);
};

CallStackProfile_Stack::CallStackProfile_Stack()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CallStackProfile.Stack)
}
CallStackProfile_Stack::CallStackProfile_Stack(const CallStackProfile_Stack& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      frame_(from.frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.Stack)
}

void CallStackProfile_Stack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallStackProfile_Stack_call_5fstack_5fprofile_2eproto.base);
}

CallStackProfile_Stack::~CallStackProfile_Stack() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.Stack)
  SharedDtor();
}

void CallStackProfile_Stack::SharedDtor() {
}

void CallStackProfile_Stack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallStackProfile_Stack& CallStackProfile_Stack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallStackProfile_Stack_call_5fstack_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void CallStackProfile_Stack::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.Stack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallStackProfile_Stack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .metrics.CallStackProfile.Location frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallStackProfile_Stack::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CallStackProfile.Stack)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metrics.CallStackProfile.Location frame = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CallStackProfile.Stack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CallStackProfile.Stack)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallStackProfile_Stack::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CallStackProfile.Stack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->frame(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CallStackProfile.Stack)
}

size_t CallStackProfile_Stack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.Stack)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->frame(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_Stack::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CallStackProfile_Stack*>(
      &from));
}

void CallStackProfile_Stack::MergeFrom(const CallStackProfile_Stack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.Stack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_.MergeFrom(from.frame_);
}

void CallStackProfile_Stack::CopyFrom(const CallStackProfile_Stack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.Stack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_Stack::IsInitialized() const {
  return true;
}

void CallStackProfile_Stack::InternalSwap(CallStackProfile_Stack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&frame_)->InternalSwap(CastToBase(&other->frame_));
}

std::string CallStackProfile_Stack::GetTypeName() const {
  return "metrics.CallStackProfile.Stack";
}


// ===================================================================

void CallStackProfile_MetadataItem::InitAsDefaultInstance() {
}
class CallStackProfile_MetadataItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_MetadataItem>()._has_bits_);
  static void set_has_name_hash_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallStackProfile_MetadataItem::CallStackProfile_MetadataItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CallStackProfile.MetadataItem)
}
CallStackProfile_MetadataItem::CallStackProfile_MetadataItem(const CallStackProfile_MetadataItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_hash_index_) -
    reinterpret_cast<char*>(&value_)) + sizeof(name_hash_index_));
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.MetadataItem)
}

void CallStackProfile_MetadataItem::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_hash_index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(name_hash_index_));
}

CallStackProfile_MetadataItem::~CallStackProfile_MetadataItem() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.MetadataItem)
  SharedDtor();
}

void CallStackProfile_MetadataItem::SharedDtor() {
}

void CallStackProfile_MetadataItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallStackProfile_MetadataItem& CallStackProfile_MetadataItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallStackProfile_MetadataItem_call_5fstack_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void CallStackProfile_MetadataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.MetadataItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&name_hash_index_) -
        reinterpret_cast<char*>(&value_)) + sizeof(name_hash_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallStackProfile_MetadataItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 name_hash_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_name_hash_index(&has_bits);
          name_hash_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_key(&has_bits);
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallStackProfile_MetadataItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CallStackProfile.MetadataItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 name_hash_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_name_hash_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_hash_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 key = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_key(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CallStackProfile.MetadataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CallStackProfile.MetadataItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallStackProfile_MetadataItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CallStackProfile.MetadataItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 name_hash_index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->name_hash_index(), output);
  }

  // optional sint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64(2, this->value(), output);
  }

  // optional sint64 key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64(3, this->key(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CallStackProfile.MetadataItem)
}

size_t CallStackProfile_MetadataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.MetadataItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional sint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->value());
    }

    // optional sint64 key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->key());
    }

    // optional int32 name_hash_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->name_hash_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_MetadataItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CallStackProfile_MetadataItem*>(
      &from));
}

void CallStackProfile_MetadataItem::MergeFrom(const CallStackProfile_MetadataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.MetadataItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000004u) {
      name_hash_index_ = from.name_hash_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CallStackProfile_MetadataItem::CopyFrom(const CallStackProfile_MetadataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.MetadataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_MetadataItem::IsInitialized() const {
  return true;
}

void CallStackProfile_MetadataItem::InternalSwap(CallStackProfile_MetadataItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
  swap(key_, other->key_);
  swap(name_hash_index_, other->name_hash_index_);
}

std::string CallStackProfile_MetadataItem::GetTypeName() const {
  return "metrics.CallStackProfile.MetadataItem";
}


// ===================================================================

void CallStackProfile_AsyncBacktrace::InitAsDefaultInstance() {
}
class CallStackProfile_AsyncBacktrace::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_AsyncBacktrace>()._has_bits_);
};

CallStackProfile_AsyncBacktrace::CallStackProfile_AsyncBacktrace()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CallStackProfile.AsyncBacktrace)
}
CallStackProfile_AsyncBacktrace::CallStackProfile_AsyncBacktrace(const CallStackProfile_AsyncBacktrace& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      location_(from.location_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.AsyncBacktrace)
}

void CallStackProfile_AsyncBacktrace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallStackProfile_AsyncBacktrace_call_5fstack_5fprofile_2eproto.base);
}

CallStackProfile_AsyncBacktrace::~CallStackProfile_AsyncBacktrace() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.AsyncBacktrace)
  SharedDtor();
}

void CallStackProfile_AsyncBacktrace::SharedDtor() {
}

void CallStackProfile_AsyncBacktrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallStackProfile_AsyncBacktrace& CallStackProfile_AsyncBacktrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallStackProfile_AsyncBacktrace_call_5fstack_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void CallStackProfile_AsyncBacktrace::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.AsyncBacktrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallStackProfile_AsyncBacktrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .metrics.CallStackProfile.Location location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallStackProfile_AsyncBacktrace::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CallStackProfile.AsyncBacktrace)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metrics.CallStackProfile.Location location = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CallStackProfile.AsyncBacktrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CallStackProfile.AsyncBacktrace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallStackProfile_AsyncBacktrace::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CallStackProfile.AsyncBacktrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location location = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->location_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->location(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CallStackProfile.AsyncBacktrace)
}

size_t CallStackProfile_AsyncBacktrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.AsyncBacktrace)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location location = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->location_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->location(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_AsyncBacktrace::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CallStackProfile_AsyncBacktrace*>(
      &from));
}

void CallStackProfile_AsyncBacktrace::MergeFrom(const CallStackProfile_AsyncBacktrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.AsyncBacktrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  location_.MergeFrom(from.location_);
}

void CallStackProfile_AsyncBacktrace::CopyFrom(const CallStackProfile_AsyncBacktrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.AsyncBacktrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_AsyncBacktrace::IsInitialized() const {
  return true;
}

void CallStackProfile_AsyncBacktrace::InternalSwap(CallStackProfile_AsyncBacktrace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&location_)->InternalSwap(CastToBase(&other->location_));
}

std::string CallStackProfile_AsyncBacktrace::GetTypeName() const {
  return "metrics.CallStackProfile.AsyncBacktrace";
}


// ===================================================================

void CallStackProfile_Sample::InitAsDefaultInstance() {
}
class CallStackProfile_Sample::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_Sample>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallStackProfile_Sample::CallStackProfile_Sample()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CallStackProfile.Sample)
}
CallStackProfile_Sample::CallStackProfile_Sample(const CallStackProfile_Sample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      frame_(from.frame_),
      process_phase_(from.process_phase_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.Sample)
}

void CallStackProfile_Sample::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallStackProfile_Sample_call_5fstack_5fprofile_2eproto.base);
  count_ = PROTOBUF_LONGLONG(0);
}

CallStackProfile_Sample::~CallStackProfile_Sample() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.Sample)
  SharedDtor();
}

void CallStackProfile_Sample::SharedDtor() {
}

void CallStackProfile_Sample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallStackProfile_Sample& CallStackProfile_Sample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallStackProfile_Sample_call_5fstack_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void CallStackProfile_Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.Sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.Clear();
  process_phase_.Clear();
  count_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallStackProfile_Sample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .metrics.CallStackProfile.Location frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.ProcessPhase process_phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::metrics::ProcessPhase_IsValid(val))) {
              add_process_phase(static_cast<::metrics::ProcessPhase>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_process_phase(), ptr, ctx, ::metrics::ProcessPhase_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallStackProfile_Sample::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CallStackProfile.Sample)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metrics.CallStackProfile.Location frame = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.ProcessPhase process_phase = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::ProcessPhase_IsValid(value)) {
            add_process_phase(static_cast< ::metrics::ProcessPhase >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::metrics::ProcessPhase_IsValid,
                 &unknown_fields_stream,
                 this->mutable_process_phase())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CallStackProfile.Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CallStackProfile.Sample)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallStackProfile_Sample::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CallStackProfile.Sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->frame(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  // repeated .metrics.ProcessPhase process_phase = 3;
  for (int i = 0, n = this->process_phase_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->process_phase(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CallStackProfile.Sample)
}

size_t CallStackProfile_Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.Sample)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Location frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->frame(static_cast<int>(i)));
    }
  }

  // repeated .metrics.ProcessPhase process_phase = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->process_phase_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->process_phase(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional int64 count = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_Sample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CallStackProfile_Sample*>(
      &from));
}

void CallStackProfile_Sample::MergeFrom(const CallStackProfile_Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_.MergeFrom(from.frame_);
  process_phase_.MergeFrom(from.process_phase_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void CallStackProfile_Sample::CopyFrom(const CallStackProfile_Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_Sample::IsInitialized() const {
  return true;
}

void CallStackProfile_Sample::InternalSwap(CallStackProfile_Sample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&frame_)->InternalSwap(CastToBase(&other->frame_));
  process_phase_.InternalSwap(&other->process_phase_);
  swap(count_, other->count_);
}

std::string CallStackProfile_Sample::GetTypeName() const {
  return "metrics.CallStackProfile.Sample";
}


// ===================================================================

void CallStackProfile_StackSample::InitAsDefaultInstance() {
}
class CallStackProfile_StackSample::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile_StackSample>()._has_bits_);
  static void set_has_stack_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sample_time_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_continued_work(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_async_backtrace_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CallStackProfile_StackSample::CallStackProfile_StackSample()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CallStackProfile.StackSample)
}
CallStackProfile_StackSample::CallStackProfile_StackSample(const CallStackProfile_StackSample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stack_index_, &from.stack_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&stack_index_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile.StackSample)
}

void CallStackProfile_StackSample::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallStackProfile_StackSample_call_5fstack_5fprofile_2eproto.base);
  ::memset(&stack_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&stack_index_)) + sizeof(weight_));
  count_ = PROTOBUF_LONGLONG(1);
}

CallStackProfile_StackSample::~CallStackProfile_StackSample() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile.StackSample)
  SharedDtor();
}

void CallStackProfile_StackSample::SharedDtor() {
}

void CallStackProfile_StackSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallStackProfile_StackSample& CallStackProfile_StackSample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallStackProfile_StackSample_call_5fstack_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void CallStackProfile_StackSample::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile.StackSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&stack_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_) -
        reinterpret_cast<char*>(&stack_index_)) + sizeof(weight_));
    count_ = PROTOBUF_LONGLONG(1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallStackProfile_StackSample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 stack_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stack_index(&has_bits);
          stack_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sample_time_offset_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sample_time_offset_ms(&has_bits);
          sample_time_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool continued_work = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_continued_work(&has_bits);
          continued_work_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 async_backtrace_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_async_backtrace_index(&has_bits);
          async_backtrace_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.MetadataItem metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional int64 weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 count = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallStackProfile_StackSample::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CallStackProfile.StackSample)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stack_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_stack_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &stack_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sample_time_offset_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_sample_time_offset_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_time_offset_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool continued_work = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_continued_work(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continued_work_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 async_backtrace_index = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_async_backtrace_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &async_backtrace_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CallStackProfile.MetadataItem metadata = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 weight = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 count = 7 [default = 1];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CallStackProfile.StackSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CallStackProfile.StackSample)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallStackProfile_StackSample::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CallStackProfile.StackSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 stack_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->stack_index(), output);
  }

  // optional int32 sample_time_offset_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->sample_time_offset_ms(), output);
  }

  // optional bool continued_work = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->continued_work(), output);
  }

  // optional int32 async_backtrace_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->async_backtrace_index(), output);
  }

  // repeated .metrics.CallStackProfile.MetadataItem metadata = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->metadata(static_cast<int>(i)),
      output);
  }

  // optional int64 weight = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->weight(), output);
  }

  // optional int64 count = 7 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CallStackProfile.StackSample)
}

size_t CallStackProfile_StackSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile.StackSample)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.MetadataItem metadata = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metadata(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 stack_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->stack_index());
    }

    // optional int32 sample_time_offset_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sample_time_offset_ms());
    }

    // optional bool continued_work = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 async_backtrace_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->async_backtrace_index());
    }

    // optional int64 weight = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->weight());
    }

    // optional int64 count = 7 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile_StackSample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CallStackProfile_StackSample*>(
      &from));
}

void CallStackProfile_StackSample::MergeFrom(const CallStackProfile_StackSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile.StackSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      stack_index_ = from.stack_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      sample_time_offset_ms_ = from.sample_time_offset_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      continued_work_ = from.continued_work_;
    }
    if (cached_has_bits & 0x00000008u) {
      async_backtrace_index_ = from.async_backtrace_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CallStackProfile_StackSample::CopyFrom(const CallStackProfile_StackSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile.StackSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile_StackSample::IsInitialized() const {
  return true;
}

void CallStackProfile_StackSample::InternalSwap(CallStackProfile_StackSample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&metadata_)->InternalSwap(CastToBase(&other->metadata_));
  swap(stack_index_, other->stack_index_);
  swap(sample_time_offset_ms_, other->sample_time_offset_ms_);
  swap(continued_work_, other->continued_work_);
  swap(async_backtrace_index_, other->async_backtrace_index_);
  swap(weight_, other->weight_);
  swap(count_, other->count_);
}

std::string CallStackProfile_StackSample::GetTypeName() const {
  return "metrics.CallStackProfile.StackSample";
}


// ===================================================================

void CallStackProfile::InitAsDefaultInstance() {
}
class CallStackProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<CallStackProfile>()._has_bits_);
  static void set_has_profile_start_time_offset_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_profile_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sampling_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallStackProfile::CallStackProfile()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CallStackProfile)
}
CallStackProfile::CallStackProfile(const CallStackProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      deprecated_sample_(from.deprecated_sample_),
      module_id_(from.module_id_),
      metadata_name_hash_(from.metadata_name_hash_),
      profile_metadata_(from.profile_metadata_),
      async_backtrace_(from.async_backtrace_),
      stack_(from.stack_),
      stack_sample_(from.stack_sample_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&profile_duration_ms_, &from.profile_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&profile_start_time_offset_ms_) -
    reinterpret_cast<char*>(&profile_duration_ms_)) + sizeof(profile_start_time_offset_ms_));
  // @@protoc_insertion_point(copy_constructor:metrics.CallStackProfile)
}

void CallStackProfile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallStackProfile_call_5fstack_5fprofile_2eproto.base);
  ::memset(&profile_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profile_start_time_offset_ms_) -
      reinterpret_cast<char*>(&profile_duration_ms_)) + sizeof(profile_start_time_offset_ms_));
}

CallStackProfile::~CallStackProfile() {
  // @@protoc_insertion_point(destructor:metrics.CallStackProfile)
  SharedDtor();
}

void CallStackProfile::SharedDtor() {
}

void CallStackProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallStackProfile& CallStackProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallStackProfile_call_5fstack_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void CallStackProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CallStackProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_sample_.Clear();
  module_id_.Clear();
  metadata_name_hash_.Clear();
  profile_metadata_.Clear();
  async_backtrace_.Clear();
  stack_.Clear();
  stack_sample_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&profile_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&profile_start_time_offset_ms_) -
        reinterpret_cast<char*>(&profile_duration_ms_)) + sizeof(profile_start_time_offset_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallStackProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .metrics.CallStackProfile.Sample DEPRECATED_sample = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_deprecated_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.ModuleIdentifier module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_module_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional int32 profile_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_profile_duration_ms(&has_bits);
          profile_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sampling_period_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sampling_period_ms(&has_bits);
          sampling_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 metadata_name_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_metadata_name_hash(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 41);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(mutable_metadata_name_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.MetadataItem profile_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_profile_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.AsyncBacktrace async_backtrace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_async_backtrace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.Stack stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.CallStackProfile.StackSample stack_sample = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stack_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // optional int64 profile_start_time_offset_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_profile_start_time_offset_ms(&has_bits);
          profile_start_time_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallStackProfile::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CallStackProfile)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metrics.CallStackProfile.Sample DEPRECATED_sample = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_deprecated_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CallStackProfile.ModuleIdentifier module_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_module_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 profile_duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_profile_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &profile_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sampling_period_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_sampling_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sampling_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 metadata_name_hash = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 41u, input, this->mutable_metadata_name_hash())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_metadata_name_hash())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CallStackProfile.MetadataItem profile_metadata = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_profile_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CallStackProfile.AsyncBacktrace async_backtrace = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_async_backtrace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CallStackProfile.Stack stack = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CallStackProfile.StackSample stack_sample = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stack_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 profile_start_time_offset_ms = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_profile_start_time_offset_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &profile_start_time_offset_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CallStackProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CallStackProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallStackProfile::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CallStackProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Sample DEPRECATED_sample = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deprecated_sample_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->deprecated_sample(static_cast<int>(i)),
      output);
  }

  // repeated .metrics.CallStackProfile.ModuleIdentifier module_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->module_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->module_id(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 profile_duration_ms = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->profile_duration_ms(), output);
  }

  // optional int32 sampling_period_ms = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->sampling_period_ms(), output);
  }

  // repeated fixed64 metadata_name_hash = 5;
  for (int i = 0, n = this->metadata_name_hash_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(
      5, this->metadata_name_hash(i), output);
  }

  // repeated .metrics.CallStackProfile.MetadataItem profile_metadata = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->profile_metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->profile_metadata(static_cast<int>(i)),
      output);
  }

  // repeated .metrics.CallStackProfile.AsyncBacktrace async_backtrace = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->async_backtrace_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->async_backtrace(static_cast<int>(i)),
      output);
  }

  // repeated .metrics.CallStackProfile.Stack stack = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stack_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->stack(static_cast<int>(i)),
      output);
  }

  // repeated .metrics.CallStackProfile.StackSample stack_sample = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stack_sample_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->stack_sample(static_cast<int>(i)),
      output);
  }

  // optional int64 profile_start_time_offset_ms = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->profile_start_time_offset_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CallStackProfile)
}

size_t CallStackProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CallStackProfile)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CallStackProfile.Sample DEPRECATED_sample = 1 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->deprecated_sample_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->deprecated_sample(static_cast<int>(i)));
    }
  }

  // repeated .metrics.CallStackProfile.ModuleIdentifier module_id = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->module_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->module_id(static_cast<int>(i)));
    }
  }

  // repeated fixed64 metadata_name_hash = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->metadata_name_hash_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->metadata_name_hash_size());
    total_size += data_size;
  }

  // repeated .metrics.CallStackProfile.MetadataItem profile_metadata = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->profile_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->profile_metadata(static_cast<int>(i)));
    }
  }

  // repeated .metrics.CallStackProfile.AsyncBacktrace async_backtrace = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->async_backtrace_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->async_backtrace(static_cast<int>(i)));
    }
  }

  // repeated .metrics.CallStackProfile.Stack stack = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->stack_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stack(static_cast<int>(i)));
    }
  }

  // repeated .metrics.CallStackProfile.StackSample stack_sample = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->stack_sample_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stack_sample(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 profile_duration_ms = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->profile_duration_ms());
    }

    // optional int32 sampling_period_ms = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sampling_period_ms());
    }

    // optional int64 profile_start_time_offset_ms = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->profile_start_time_offset_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallStackProfile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CallStackProfile*>(
      &from));
}

void CallStackProfile::MergeFrom(const CallStackProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CallStackProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deprecated_sample_.MergeFrom(from.deprecated_sample_);
  module_id_.MergeFrom(from.module_id_);
  metadata_name_hash_.MergeFrom(from.metadata_name_hash_);
  profile_metadata_.MergeFrom(from.profile_metadata_);
  async_backtrace_.MergeFrom(from.async_backtrace_);
  stack_.MergeFrom(from.stack_);
  stack_sample_.MergeFrom(from.stack_sample_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      profile_duration_ms_ = from.profile_duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      sampling_period_ms_ = from.sampling_period_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      profile_start_time_offset_ms_ = from.profile_start_time_offset_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CallStackProfile::CopyFrom(const CallStackProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CallStackProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStackProfile::IsInitialized() const {
  return true;
}

void CallStackProfile::InternalSwap(CallStackProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&deprecated_sample_)->InternalSwap(CastToBase(&other->deprecated_sample_));
  CastToBase(&module_id_)->InternalSwap(CastToBase(&other->module_id_));
  metadata_name_hash_.InternalSwap(&other->metadata_name_hash_);
  CastToBase(&profile_metadata_)->InternalSwap(CastToBase(&other->profile_metadata_));
  CastToBase(&async_backtrace_)->InternalSwap(CastToBase(&other->async_backtrace_));
  CastToBase(&stack_)->InternalSwap(CastToBase(&other->stack_));
  CastToBase(&stack_sample_)->InternalSwap(CastToBase(&other->stack_sample_));
  swap(profile_duration_ms_, other->profile_duration_ms_);
  swap(sampling_period_ms_, other->sampling_period_ms_);
  swap(profile_start_time_offset_ms_, other->profile_start_time_offset_ms_);
}

std::string CallStackProfile::GetTypeName() const {
  return "metrics.CallStackProfile";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_ModuleIdentifier* Arena::CreateMaybeMessage< ::metrics::CallStackProfile_ModuleIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CallStackProfile_ModuleIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_Location* Arena::CreateMaybeMessage< ::metrics::CallStackProfile_Location >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CallStackProfile_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_Stack* Arena::CreateMaybeMessage< ::metrics::CallStackProfile_Stack >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CallStackProfile_Stack >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_MetadataItem* Arena::CreateMaybeMessage< ::metrics::CallStackProfile_MetadataItem >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CallStackProfile_MetadataItem >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_AsyncBacktrace* Arena::CreateMaybeMessage< ::metrics::CallStackProfile_AsyncBacktrace >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CallStackProfile_AsyncBacktrace >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_Sample* Arena::CreateMaybeMessage< ::metrics::CallStackProfile_Sample >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CallStackProfile_Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile_StackSample* Arena::CreateMaybeMessage< ::metrics::CallStackProfile_StackSample >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CallStackProfile_StackSample >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CallStackProfile* Arena::CreateMaybeMessage< ::metrics::CallStackProfile >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CallStackProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
