// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_user_metrics_extension.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chrome_5fuser_5fmetrics_5fextension_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chrome_5fuser_5fmetrics_5fextension_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "cast_logs.pb.h"
#include "chrome_os_app_list_launch_event.pb.h"
#include "histogram_event.pb.h"
#include "memory_leak_report.pb.h"
#include "omnibox_event.pb.h"
#include "perf_data.pb.h"
#include "printer_event.pb.h"
#include "reporting_info.pb.h"
#include "sampled_profile.pb.h"
#include "structured_event.pb.h"
#include "system_profile.pb.h"
#include "trace_log.pb.h"
#include "translate_event.pb.h"
#include "user_action_event.pb.h"
#include "user_demographics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chrome_5fuser_5fmetrics_5fextension_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chrome_5fuser_5fmetrics_5fextension_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace metrics {
class ChromeUserMetricsExtension;
class ChromeUserMetricsExtensionDefaultTypeInternal;
extern ChromeUserMetricsExtensionDefaultTypeInternal _ChromeUserMetricsExtension_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::ChromeUserMetricsExtension* Arena::CreateMaybeMessage<::metrics::ChromeUserMetricsExtension>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum ChromeUserMetricsExtension_Product : int {
  ChromeUserMetricsExtension_Product_CHROME = 0,
  ChromeUserMetricsExtension_Product_ANDROID_WEBVIEW = 20,
  ChromeUserMetricsExtension_Product_CAST = 35,
  ChromeUserMetricsExtension_Product_ANDROID_WEBLAYER = 56
};
bool ChromeUserMetricsExtension_Product_IsValid(int value);
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension_Product_Product_MIN = ChromeUserMetricsExtension_Product_CHROME;
constexpr ChromeUserMetricsExtension_Product ChromeUserMetricsExtension_Product_Product_MAX = ChromeUserMetricsExtension_Product_ANDROID_WEBLAYER;
constexpr int ChromeUserMetricsExtension_Product_Product_ARRAYSIZE = ChromeUserMetricsExtension_Product_Product_MAX + 1;

const std::string& ChromeUserMetricsExtension_Product_Name(ChromeUserMetricsExtension_Product value);
template<typename T>
inline const std::string& ChromeUserMetricsExtension_Product_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeUserMetricsExtension_Product>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeUserMetricsExtension_Product_Name.");
  return ChromeUserMetricsExtension_Product_Name(static_cast<ChromeUserMetricsExtension_Product>(enum_t_value));
}
bool ChromeUserMetricsExtension_Product_Parse(
    const std::string& name, ChromeUserMetricsExtension_Product* value);
// ===================================================================

class ChromeUserMetricsExtension :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.ChromeUserMetricsExtension) */ {
 public:
  ChromeUserMetricsExtension();
  virtual ~ChromeUserMetricsExtension();

  ChromeUserMetricsExtension(const ChromeUserMetricsExtension& from);
  ChromeUserMetricsExtension(ChromeUserMetricsExtension&& from) noexcept
    : ChromeUserMetricsExtension() {
    *this = ::std::move(from);
  }

  inline ChromeUserMetricsExtension& operator=(const ChromeUserMetricsExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeUserMetricsExtension& operator=(ChromeUserMetricsExtension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeUserMetricsExtension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeUserMetricsExtension* internal_default_instance() {
    return reinterpret_cast<const ChromeUserMetricsExtension*>(
               &_ChromeUserMetricsExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeUserMetricsExtension& a, ChromeUserMetricsExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeUserMetricsExtension* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeUserMetricsExtension* New() const final {
    return CreateMaybeMessage<ChromeUserMetricsExtension>(nullptr);
  }

  ChromeUserMetricsExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeUserMetricsExtension>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeUserMetricsExtension& from);
  void MergeFrom(const ChromeUserMetricsExtension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeUserMetricsExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.ChromeUserMetricsExtension";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeUserMetricsExtension_Product Product;
  static constexpr Product CHROME =
    ChromeUserMetricsExtension_Product_CHROME;
  static constexpr Product ANDROID_WEBVIEW =
    ChromeUserMetricsExtension_Product_ANDROID_WEBVIEW;
  static constexpr Product CAST =
    ChromeUserMetricsExtension_Product_CAST;
  static constexpr Product ANDROID_WEBLAYER =
    ChromeUserMetricsExtension_Product_ANDROID_WEBLAYER;
  static inline bool Product_IsValid(int value) {
    return ChromeUserMetricsExtension_Product_IsValid(value);
  }
  static constexpr Product Product_MIN =
    ChromeUserMetricsExtension_Product_Product_MIN;
  static constexpr Product Product_MAX =
    ChromeUserMetricsExtension_Product_Product_MAX;
  static constexpr int Product_ARRAYSIZE =
    ChromeUserMetricsExtension_Product_Product_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Product_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Product>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Product_Name.");
    return ChromeUserMetricsExtension_Product_Name(enum_t_value);
  }
  static inline bool Product_Parse(const std::string& name,
      Product* value) {
    return ChromeUserMetricsExtension_Product_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserActionEventFieldNumber = 4,
    kOmniboxEventFieldNumber = 5,
    kHistogramEventFieldNumber = 6,
    kPerfDataFieldNumber = 8,
    kSampledProfileFieldNumber = 11,
    kMemoryLeakReportFieldNumber = 13,
    kTranslateEventFieldNumber = 15,
    kPrinterEventFieldNumber = 16,
    kTraceLogFieldNumber = 19,
    kChromeOsAppListLaunchEventFieldNumber = 20,
    kStructuredEventFieldNumber = 22,
    kSystemProfileFieldNumber = 3,
    kCastLogsFieldNumber = 12,
    kReportingInfoFieldNumber = 17,
    kUserDemographicsFieldNumber = 21,
    kClientIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kProductFieldNumber = 10,
  };
  // repeated .metrics.UserActionEventProto user_action_event = 4;
  int user_action_event_size() const;
  void clear_user_action_event();
  ::metrics::UserActionEventProto* mutable_user_action_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::UserActionEventProto >*
      mutable_user_action_event();
  const ::metrics::UserActionEventProto& user_action_event(int index) const;
  ::metrics::UserActionEventProto* add_user_action_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::UserActionEventProto >&
      user_action_event() const;

  // repeated .metrics.OmniboxEventProto omnibox_event = 5;
  int omnibox_event_size() const;
  void clear_omnibox_event();
  ::metrics::OmniboxEventProto* mutable_omnibox_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto >*
      mutable_omnibox_event();
  const ::metrics::OmniboxEventProto& omnibox_event(int index) const;
  ::metrics::OmniboxEventProto* add_omnibox_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto >&
      omnibox_event() const;

  // repeated .metrics.HistogramEventProto histogram_event = 6;
  int histogram_event_size() const;
  void clear_histogram_event();
  ::metrics::HistogramEventProto* mutable_histogram_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::HistogramEventProto >*
      mutable_histogram_event();
  const ::metrics::HistogramEventProto& histogram_event(int index) const;
  ::metrics::HistogramEventProto* add_histogram_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::HistogramEventProto >&
      histogram_event() const;

  // repeated .metrics.PerfDataProto perf_data = 8 [deprecated = true];
  PROTOBUF_DEPRECATED int perf_data_size() const;
  PROTOBUF_DEPRECATED void clear_perf_data();
  PROTOBUF_DEPRECATED ::metrics::PerfDataProto* mutable_perf_data(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto >*
      mutable_perf_data();
  PROTOBUF_DEPRECATED const ::metrics::PerfDataProto& perf_data(int index) const;
  PROTOBUF_DEPRECATED ::metrics::PerfDataProto* add_perf_data();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto >&
      perf_data() const;

  // repeated .metrics.SampledProfile sampled_profile = 11;
  int sampled_profile_size() const;
  void clear_sampled_profile();
  ::metrics::SampledProfile* mutable_sampled_profile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SampledProfile >*
      mutable_sampled_profile();
  const ::metrics::SampledProfile& sampled_profile(int index) const;
  ::metrics::SampledProfile* add_sampled_profile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SampledProfile >&
      sampled_profile() const;

  // repeated .metrics.MemoryLeakReportProto memory_leak_report = 13;
  int memory_leak_report_size() const;
  void clear_memory_leak_report();
  ::metrics::MemoryLeakReportProto* mutable_memory_leak_report(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::MemoryLeakReportProto >*
      mutable_memory_leak_report();
  const ::metrics::MemoryLeakReportProto& memory_leak_report(int index) const;
  ::metrics::MemoryLeakReportProto* add_memory_leak_report();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::MemoryLeakReportProto >&
      memory_leak_report() const;

  // repeated .metrics.TranslateEventProto translate_event = 15;
  int translate_event_size() const;
  void clear_translate_event();
  ::metrics::TranslateEventProto* mutable_translate_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TranslateEventProto >*
      mutable_translate_event();
  const ::metrics::TranslateEventProto& translate_event(int index) const;
  ::metrics::TranslateEventProto* add_translate_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TranslateEventProto >&
      translate_event() const;

  // repeated .metrics.PrinterEventProto printer_event = 16;
  int printer_event_size() const;
  void clear_printer_event();
  ::metrics::PrinterEventProto* mutable_printer_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PrinterEventProto >*
      mutable_printer_event();
  const ::metrics::PrinterEventProto& printer_event(int index) const;
  ::metrics::PrinterEventProto* add_printer_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PrinterEventProto >&
      printer_event() const;

  // repeated .metrics.TraceLog trace_log = 19;
  int trace_log_size() const;
  void clear_trace_log();
  ::metrics::TraceLog* mutable_trace_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TraceLog >*
      mutable_trace_log();
  const ::metrics::TraceLog& trace_log(int index) const;
  ::metrics::TraceLog* add_trace_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TraceLog >&
      trace_log() const;

  // repeated .metrics.ChromeOSAppListLaunchEventProto chrome_os_app_list_launch_event = 20;
  int chrome_os_app_list_launch_event_size() const;
  void clear_chrome_os_app_list_launch_event();
  ::metrics::ChromeOSAppListLaunchEventProto* mutable_chrome_os_app_list_launch_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeOSAppListLaunchEventProto >*
      mutable_chrome_os_app_list_launch_event();
  const ::metrics::ChromeOSAppListLaunchEventProto& chrome_os_app_list_launch_event(int index) const;
  ::metrics::ChromeOSAppListLaunchEventProto* add_chrome_os_app_list_launch_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeOSAppListLaunchEventProto >&
      chrome_os_app_list_launch_event() const;

  // repeated .metrics.StructuredEventProto structured_event = 22;
  int structured_event_size() const;
  void clear_structured_event();
  ::metrics::StructuredEventProto* mutable_structured_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto >*
      mutable_structured_event();
  const ::metrics::StructuredEventProto& structured_event(int index) const;
  ::metrics::StructuredEventProto* add_structured_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto >&
      structured_event() const;

  // optional .metrics.SystemProfileProto system_profile = 3;
  bool has_system_profile() const;
  void clear_system_profile();
  const ::metrics::SystemProfileProto& system_profile() const;
  ::metrics::SystemProfileProto* release_system_profile();
  ::metrics::SystemProfileProto* mutable_system_profile();
  void set_allocated_system_profile(::metrics::SystemProfileProto* system_profile);

  // optional .metrics.CastLogsProto cast_logs = 12;
  bool has_cast_logs() const;
  void clear_cast_logs();
  const ::metrics::CastLogsProto& cast_logs() const;
  ::metrics::CastLogsProto* release_cast_logs();
  ::metrics::CastLogsProto* mutable_cast_logs();
  void set_allocated_cast_logs(::metrics::CastLogsProto* cast_logs);

  // optional .metrics.ReportingInfo reporting_info = 17;
  bool has_reporting_info() const;
  void clear_reporting_info();
  const ::metrics::ReportingInfo& reporting_info() const;
  ::metrics::ReportingInfo* release_reporting_info();
  ::metrics::ReportingInfo* mutable_reporting_info();
  void set_allocated_reporting_info(::metrics::ReportingInfo* reporting_info);

  // optional .metrics.UserDemographicsProto user_demographics = 21;
  bool has_user_demographics() const;
  void clear_user_demographics();
  const ::metrics::UserDemographicsProto& user_demographics() const;
  ::metrics::UserDemographicsProto* release_user_demographics();
  ::metrics::UserDemographicsProto* mutable_user_demographics();
  void set_allocated_user_demographics(::metrics::UserDemographicsProto* user_demographics);

  // optional fixed64 client_id = 1;
  bool has_client_id() const;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 product = 10 [default = 0];
  bool has_product() const;
  void clear_product();
  ::PROTOBUF_NAMESPACE_ID::int32 product() const;
  void set_product(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.ChromeUserMetricsExtension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::UserActionEventProto > user_action_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto > omnibox_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::HistogramEventProto > histogram_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto > perf_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SampledProfile > sampled_profile_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::MemoryLeakReportProto > memory_leak_report_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TranslateEventProto > translate_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PrinterEventProto > printer_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TraceLog > trace_log_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeOSAppListLaunchEventProto > chrome_os_app_list_launch_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto > structured_event_;
  ::metrics::SystemProfileProto* system_profile_;
  ::metrics::CastLogsProto* cast_logs_;
  ::metrics::ReportingInfo* reporting_info_;
  ::metrics::UserDemographicsProto* user_demographics_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 product_;
  friend struct ::TableStruct_chrome_5fuser_5fmetrics_5fextension_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeUserMetricsExtension

// optional int32 product = 10 [default = 0];
inline bool ChromeUserMetricsExtension::has_product() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChromeUserMetricsExtension::clear_product() {
  product_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChromeUserMetricsExtension::product() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.product)
  return product_;
}
inline void ChromeUserMetricsExtension::set_product(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  product_ = value;
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.product)
}

// optional fixed64 client_id = 1;
inline bool ChromeUserMetricsExtension::has_client_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChromeUserMetricsExtension::clear_client_id() {
  client_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChromeUserMetricsExtension::client_id() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.client_id)
  return client_id_;
}
inline void ChromeUserMetricsExtension::set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  client_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.client_id)
}

// optional int32 session_id = 2;
inline bool ChromeUserMetricsExtension::has_session_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChromeUserMetricsExtension::clear_session_id() {
  session_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChromeUserMetricsExtension::session_id() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.session_id)
  return session_id_;
}
inline void ChromeUserMetricsExtension::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  session_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.session_id)
}

// optional .metrics.SystemProfileProto system_profile = 3;
inline bool ChromeUserMetricsExtension::has_system_profile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::metrics::SystemProfileProto& ChromeUserMetricsExtension::system_profile() const {
  const ::metrics::SystemProfileProto* p = system_profile_;
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.system_profile)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::SystemProfileProto*>(
      &::metrics::_SystemProfileProto_default_instance_);
}
inline ::metrics::SystemProfileProto* ChromeUserMetricsExtension::release_system_profile() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.system_profile)
  _has_bits_[0] &= ~0x00000001u;
  ::metrics::SystemProfileProto* temp = system_profile_;
  system_profile_ = nullptr;
  return temp;
}
inline ::metrics::SystemProfileProto* ChromeUserMetricsExtension::mutable_system_profile() {
  _has_bits_[0] |= 0x00000001u;
  if (system_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::SystemProfileProto>(GetArenaNoVirtual());
    system_profile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.system_profile)
  return system_profile_;
}
inline void ChromeUserMetricsExtension::set_allocated_system_profile(::metrics::SystemProfileProto* system_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_profile_);
  }
  if (system_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      system_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  system_profile_ = system_profile;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.system_profile)
}

// optional .metrics.UserDemographicsProto user_demographics = 21;
inline bool ChromeUserMetricsExtension::has_user_demographics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::metrics::UserDemographicsProto& ChromeUserMetricsExtension::user_demographics() const {
  const ::metrics::UserDemographicsProto* p = user_demographics_;
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.user_demographics)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::UserDemographicsProto*>(
      &::metrics::_UserDemographicsProto_default_instance_);
}
inline ::metrics::UserDemographicsProto* ChromeUserMetricsExtension::release_user_demographics() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.user_demographics)
  _has_bits_[0] &= ~0x00000008u;
  ::metrics::UserDemographicsProto* temp = user_demographics_;
  user_demographics_ = nullptr;
  return temp;
}
inline ::metrics::UserDemographicsProto* ChromeUserMetricsExtension::mutable_user_demographics() {
  _has_bits_[0] |= 0x00000008u;
  if (user_demographics_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::UserDemographicsProto>(GetArenaNoVirtual());
    user_demographics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.user_demographics)
  return user_demographics_;
}
inline void ChromeUserMetricsExtension::set_allocated_user_demographics(::metrics::UserDemographicsProto* user_demographics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_demographics_);
  }
  if (user_demographics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_demographics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_demographics, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_demographics_ = user_demographics;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.user_demographics)
}

// repeated .metrics.UserActionEventProto user_action_event = 4;
inline int ChromeUserMetricsExtension::user_action_event_size() const {
  return user_action_event_.size();
}
inline ::metrics::UserActionEventProto* ChromeUserMetricsExtension::mutable_user_action_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.user_action_event)
  return user_action_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::UserActionEventProto >*
ChromeUserMetricsExtension::mutable_user_action_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.user_action_event)
  return &user_action_event_;
}
inline const ::metrics::UserActionEventProto& ChromeUserMetricsExtension::user_action_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.user_action_event)
  return user_action_event_.Get(index);
}
inline ::metrics::UserActionEventProto* ChromeUserMetricsExtension::add_user_action_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.user_action_event)
  return user_action_event_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::UserActionEventProto >&
ChromeUserMetricsExtension::user_action_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.user_action_event)
  return user_action_event_;
}

// repeated .metrics.OmniboxEventProto omnibox_event = 5;
inline int ChromeUserMetricsExtension::omnibox_event_size() const {
  return omnibox_event_.size();
}
inline ::metrics::OmniboxEventProto* ChromeUserMetricsExtension::mutable_omnibox_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.omnibox_event)
  return omnibox_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto >*
ChromeUserMetricsExtension::mutable_omnibox_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.omnibox_event)
  return &omnibox_event_;
}
inline const ::metrics::OmniboxEventProto& ChromeUserMetricsExtension::omnibox_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.omnibox_event)
  return omnibox_event_.Get(index);
}
inline ::metrics::OmniboxEventProto* ChromeUserMetricsExtension::add_omnibox_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.omnibox_event)
  return omnibox_event_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::OmniboxEventProto >&
ChromeUserMetricsExtension::omnibox_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.omnibox_event)
  return omnibox_event_;
}

// repeated .metrics.HistogramEventProto histogram_event = 6;
inline int ChromeUserMetricsExtension::histogram_event_size() const {
  return histogram_event_.size();
}
inline ::metrics::HistogramEventProto* ChromeUserMetricsExtension::mutable_histogram_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.histogram_event)
  return histogram_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::HistogramEventProto >*
ChromeUserMetricsExtension::mutable_histogram_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.histogram_event)
  return &histogram_event_;
}
inline const ::metrics::HistogramEventProto& ChromeUserMetricsExtension::histogram_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.histogram_event)
  return histogram_event_.Get(index);
}
inline ::metrics::HistogramEventProto* ChromeUserMetricsExtension::add_histogram_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.histogram_event)
  return histogram_event_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::HistogramEventProto >&
ChromeUserMetricsExtension::histogram_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.histogram_event)
  return histogram_event_;
}

// repeated .metrics.TranslateEventProto translate_event = 15;
inline int ChromeUserMetricsExtension::translate_event_size() const {
  return translate_event_.size();
}
inline ::metrics::TranslateEventProto* ChromeUserMetricsExtension::mutable_translate_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.translate_event)
  return translate_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TranslateEventProto >*
ChromeUserMetricsExtension::mutable_translate_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.translate_event)
  return &translate_event_;
}
inline const ::metrics::TranslateEventProto& ChromeUserMetricsExtension::translate_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.translate_event)
  return translate_event_.Get(index);
}
inline ::metrics::TranslateEventProto* ChromeUserMetricsExtension::add_translate_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.translate_event)
  return translate_event_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TranslateEventProto >&
ChromeUserMetricsExtension::translate_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.translate_event)
  return translate_event_;
}

// repeated .metrics.PrinterEventProto printer_event = 16;
inline int ChromeUserMetricsExtension::printer_event_size() const {
  return printer_event_.size();
}
inline ::metrics::PrinterEventProto* ChromeUserMetricsExtension::mutable_printer_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.printer_event)
  return printer_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PrinterEventProto >*
ChromeUserMetricsExtension::mutable_printer_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.printer_event)
  return &printer_event_;
}
inline const ::metrics::PrinterEventProto& ChromeUserMetricsExtension::printer_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.printer_event)
  return printer_event_.Get(index);
}
inline ::metrics::PrinterEventProto* ChromeUserMetricsExtension::add_printer_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.printer_event)
  return printer_event_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PrinterEventProto >&
ChromeUserMetricsExtension::printer_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.printer_event)
  return printer_event_;
}

// repeated .metrics.ChromeOSAppListLaunchEventProto chrome_os_app_list_launch_event = 20;
inline int ChromeUserMetricsExtension::chrome_os_app_list_launch_event_size() const {
  return chrome_os_app_list_launch_event_.size();
}
inline ::metrics::ChromeOSAppListLaunchEventProto* ChromeUserMetricsExtension::mutable_chrome_os_app_list_launch_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.chrome_os_app_list_launch_event)
  return chrome_os_app_list_launch_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeOSAppListLaunchEventProto >*
ChromeUserMetricsExtension::mutable_chrome_os_app_list_launch_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.chrome_os_app_list_launch_event)
  return &chrome_os_app_list_launch_event_;
}
inline const ::metrics::ChromeOSAppListLaunchEventProto& ChromeUserMetricsExtension::chrome_os_app_list_launch_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.chrome_os_app_list_launch_event)
  return chrome_os_app_list_launch_event_.Get(index);
}
inline ::metrics::ChromeOSAppListLaunchEventProto* ChromeUserMetricsExtension::add_chrome_os_app_list_launch_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.chrome_os_app_list_launch_event)
  return chrome_os_app_list_launch_event_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeOSAppListLaunchEventProto >&
ChromeUserMetricsExtension::chrome_os_app_list_launch_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.chrome_os_app_list_launch_event)
  return chrome_os_app_list_launch_event_;
}

// repeated .metrics.StructuredEventProto structured_event = 22;
inline int ChromeUserMetricsExtension::structured_event_size() const {
  return structured_event_.size();
}
inline ::metrics::StructuredEventProto* ChromeUserMetricsExtension::mutable_structured_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.structured_event)
  return structured_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto >*
ChromeUserMetricsExtension::mutable_structured_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.structured_event)
  return &structured_event_;
}
inline const ::metrics::StructuredEventProto& ChromeUserMetricsExtension::structured_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.structured_event)
  return structured_event_.Get(index);
}
inline ::metrics::StructuredEventProto* ChromeUserMetricsExtension::add_structured_event() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.structured_event)
  return structured_event_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::StructuredEventProto >&
ChromeUserMetricsExtension::structured_event() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.structured_event)
  return structured_event_;
}

// repeated .metrics.PerfDataProto perf_data = 8 [deprecated = true];
inline int ChromeUserMetricsExtension::perf_data_size() const {
  return perf_data_.size();
}
inline ::metrics::PerfDataProto* ChromeUserMetricsExtension::mutable_perf_data(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.perf_data)
  return perf_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto >*
ChromeUserMetricsExtension::mutable_perf_data() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.perf_data)
  return &perf_data_;
}
inline const ::metrics::PerfDataProto& ChromeUserMetricsExtension::perf_data(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.perf_data)
  return perf_data_.Get(index);
}
inline ::metrics::PerfDataProto* ChromeUserMetricsExtension::add_perf_data() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.perf_data)
  return perf_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::PerfDataProto >&
ChromeUserMetricsExtension::perf_data() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.perf_data)
  return perf_data_;
}

// repeated .metrics.SampledProfile sampled_profile = 11;
inline int ChromeUserMetricsExtension::sampled_profile_size() const {
  return sampled_profile_.size();
}
inline ::metrics::SampledProfile* ChromeUserMetricsExtension::mutable_sampled_profile(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.sampled_profile)
  return sampled_profile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SampledProfile >*
ChromeUserMetricsExtension::mutable_sampled_profile() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.sampled_profile)
  return &sampled_profile_;
}
inline const ::metrics::SampledProfile& ChromeUserMetricsExtension::sampled_profile(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.sampled_profile)
  return sampled_profile_.Get(index);
}
inline ::metrics::SampledProfile* ChromeUserMetricsExtension::add_sampled_profile() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.sampled_profile)
  return sampled_profile_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::SampledProfile >&
ChromeUserMetricsExtension::sampled_profile() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.sampled_profile)
  return sampled_profile_;
}

// optional .metrics.CastLogsProto cast_logs = 12;
inline bool ChromeUserMetricsExtension::has_cast_logs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::metrics::CastLogsProto& ChromeUserMetricsExtension::cast_logs() const {
  const ::metrics::CastLogsProto* p = cast_logs_;
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.cast_logs)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::CastLogsProto*>(
      &::metrics::_CastLogsProto_default_instance_);
}
inline ::metrics::CastLogsProto* ChromeUserMetricsExtension::release_cast_logs() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.cast_logs)
  _has_bits_[0] &= ~0x00000002u;
  ::metrics::CastLogsProto* temp = cast_logs_;
  cast_logs_ = nullptr;
  return temp;
}
inline ::metrics::CastLogsProto* ChromeUserMetricsExtension::mutable_cast_logs() {
  _has_bits_[0] |= 0x00000002u;
  if (cast_logs_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::CastLogsProto>(GetArenaNoVirtual());
    cast_logs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.cast_logs)
  return cast_logs_;
}
inline void ChromeUserMetricsExtension::set_allocated_cast_logs(::metrics::CastLogsProto* cast_logs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cast_logs_);
  }
  if (cast_logs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cast_logs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cast_logs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cast_logs_ = cast_logs;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.cast_logs)
}

// repeated .metrics.MemoryLeakReportProto memory_leak_report = 13;
inline int ChromeUserMetricsExtension::memory_leak_report_size() const {
  return memory_leak_report_.size();
}
inline ::metrics::MemoryLeakReportProto* ChromeUserMetricsExtension::mutable_memory_leak_report(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.memory_leak_report)
  return memory_leak_report_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::MemoryLeakReportProto >*
ChromeUserMetricsExtension::mutable_memory_leak_report() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.memory_leak_report)
  return &memory_leak_report_;
}
inline const ::metrics::MemoryLeakReportProto& ChromeUserMetricsExtension::memory_leak_report(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.memory_leak_report)
  return memory_leak_report_.Get(index);
}
inline ::metrics::MemoryLeakReportProto* ChromeUserMetricsExtension::add_memory_leak_report() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.memory_leak_report)
  return memory_leak_report_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::MemoryLeakReportProto >&
ChromeUserMetricsExtension::memory_leak_report() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.memory_leak_report)
  return memory_leak_report_;
}

// optional .metrics.ReportingInfo reporting_info = 17;
inline bool ChromeUserMetricsExtension::has_reporting_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::metrics::ReportingInfo& ChromeUserMetricsExtension::reporting_info() const {
  const ::metrics::ReportingInfo* p = reporting_info_;
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.reporting_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::metrics::ReportingInfo*>(
      &::metrics::_ReportingInfo_default_instance_);
}
inline ::metrics::ReportingInfo* ChromeUserMetricsExtension::release_reporting_info() {
  // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.reporting_info)
  _has_bits_[0] &= ~0x00000004u;
  ::metrics::ReportingInfo* temp = reporting_info_;
  reporting_info_ = nullptr;
  return temp;
}
inline ::metrics::ReportingInfo* ChromeUserMetricsExtension::mutable_reporting_info() {
  _has_bits_[0] |= 0x00000004u;
  if (reporting_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::ReportingInfo>(GetArenaNoVirtual());
    reporting_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.reporting_info)
  return reporting_info_;
}
inline void ChromeUserMetricsExtension::set_allocated_reporting_info(::metrics::ReportingInfo* reporting_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reporting_info_);
  }
  if (reporting_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reporting_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reporting_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reporting_info_ = reporting_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.reporting_info)
}

// repeated .metrics.TraceLog trace_log = 19;
inline int ChromeUserMetricsExtension::trace_log_size() const {
  return trace_log_.size();
}
inline ::metrics::TraceLog* ChromeUserMetricsExtension::mutable_trace_log(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.trace_log)
  return trace_log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TraceLog >*
ChromeUserMetricsExtension::mutable_trace_log() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.trace_log)
  return &trace_log_;
}
inline const ::metrics::TraceLog& ChromeUserMetricsExtension::trace_log(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.trace_log)
  return trace_log_.Get(index);
}
inline ::metrics::TraceLog* ChromeUserMetricsExtension::add_trace_log() {
  // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.trace_log)
  return trace_log_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::TraceLog >&
ChromeUserMetricsExtension::trace_log() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.trace_log)
  return trace_log_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::ChromeUserMetricsExtension_Product> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chrome_5fuser_5fmetrics_5fextension_2eproto
