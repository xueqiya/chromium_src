// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memory_leak_report.proto

#include "memory_leak_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_memory_5fleak_5freport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_AllocationBreakdown_memory_5fleak_5freport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_memory_5fleak_5freport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_MemoryUsageInfo_memory_5fleak_5freport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_memory_5fleak_5freport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_Params_memory_5fleak_5freport_2eproto;
namespace metrics {
class MemoryLeakReportProto_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryLeakReportProto_Params> _instance;
} _MemoryLeakReportProto_Params_default_instance_;
class MemoryLeakReportProto_AllocationBreakdownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryLeakReportProto_AllocationBreakdown> _instance;
} _MemoryLeakReportProto_AllocationBreakdown_default_instance_;
class MemoryLeakReportProto_MemoryUsageInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryLeakReportProto_MemoryUsageInfo> _instance;
} _MemoryLeakReportProto_MemoryUsageInfo_default_instance_;
class MemoryLeakReportProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryLeakReportProto> _instance;
} _MemoryLeakReportProto_default_instance_;
}  // namespace metrics
static void InitDefaultsscc_info_MemoryLeakReportProto_memory_5fleak_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_MemoryLeakReportProto_default_instance_;
    new (ptr) ::metrics::MemoryLeakReportProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::MemoryLeakReportProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MemoryLeakReportProto_memory_5fleak_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MemoryLeakReportProto_memory_5fleak_5freport_2eproto}, {
      &scc_info_MemoryLeakReportProto_Params_memory_5fleak_5freport_2eproto.base,
      &scc_info_MemoryLeakReportProto_AllocationBreakdown_memory_5fleak_5freport_2eproto.base,
      &scc_info_MemoryLeakReportProto_MemoryUsageInfo_memory_5fleak_5freport_2eproto.base,}};

static void InitDefaultsscc_info_MemoryLeakReportProto_AllocationBreakdown_memory_5fleak_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_MemoryLeakReportProto_AllocationBreakdown_default_instance_;
    new (ptr) ::metrics::MemoryLeakReportProto_AllocationBreakdown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::MemoryLeakReportProto_AllocationBreakdown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_AllocationBreakdown_memory_5fleak_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemoryLeakReportProto_AllocationBreakdown_memory_5fleak_5freport_2eproto}, {}};

static void InitDefaultsscc_info_MemoryLeakReportProto_MemoryUsageInfo_memory_5fleak_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_MemoryLeakReportProto_MemoryUsageInfo_default_instance_;
    new (ptr) ::metrics::MemoryLeakReportProto_MemoryUsageInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::MemoryLeakReportProto_MemoryUsageInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_MemoryUsageInfo_memory_5fleak_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemoryLeakReportProto_MemoryUsageInfo_memory_5fleak_5freport_2eproto}, {}};

static void InitDefaultsscc_info_MemoryLeakReportProto_Params_memory_5fleak_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_MemoryLeakReportProto_Params_default_instance_;
    new (ptr) ::metrics::MemoryLeakReportProto_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::MemoryLeakReportProto_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_Params_memory_5fleak_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemoryLeakReportProto_Params_memory_5fleak_5freport_2eproto}, {}};

namespace metrics {
bool MemoryLeakReportProto_ProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MemoryLeakReportProto_ProcessType_strings[3] = {};

static const char MemoryLeakReportProto_ProcessType_names[] =
  "BROWSER_PROCESS"
  "RENDERER_PROCESS"
  "UNKNOWN_PROCESS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MemoryLeakReportProto_ProcessType_entries[] = {
  { {MemoryLeakReportProto_ProcessType_names + 0, 15}, 1 },
  { {MemoryLeakReportProto_ProcessType_names + 15, 16}, 2 },
  { {MemoryLeakReportProto_ProcessType_names + 31, 15}, 0 },
};

static const int MemoryLeakReportProto_ProcessType_entries_by_number[] = {
  2, // 0 -> UNKNOWN_PROCESS
  0, // 1 -> BROWSER_PROCESS
  1, // 2 -> RENDERER_PROCESS
};

const std::string& MemoryLeakReportProto_ProcessType_Name(
    MemoryLeakReportProto_ProcessType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MemoryLeakReportProto_ProcessType_entries,
          MemoryLeakReportProto_ProcessType_entries_by_number,
          3, MemoryLeakReportProto_ProcessType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MemoryLeakReportProto_ProcessType_entries,
      MemoryLeakReportProto_ProcessType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MemoryLeakReportProto_ProcessType_strings[idx].get();
}
bool MemoryLeakReportProto_ProcessType_Parse(
    const std::string& name, MemoryLeakReportProto_ProcessType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MemoryLeakReportProto_ProcessType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MemoryLeakReportProto_ProcessType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto::UNKNOWN_PROCESS;
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto::BROWSER_PROCESS;
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto::RENDERER_PROCESS;
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto::ProcessType_MIN;
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto::ProcessType_MAX;
constexpr int MemoryLeakReportProto::ProcessType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MemoryLeakReportProto_Params::InitAsDefaultInstance() {
}
class MemoryLeakReportProto_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryLeakReportProto_Params>()._has_bits_);
  static void set_has_sampling_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_stack_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_analysis_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size_suspicion_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_call_stack_suspicion_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MemoryLeakReportProto_Params::MemoryLeakReportProto_Params()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.Params)
}
MemoryLeakReportProto_Params::MemoryLeakReportProto_Params(const MemoryLeakReportProto_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sampling_rate_, &from.sampling_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
    reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.Params)
}

void MemoryLeakReportProto_Params::SharedCtor() {
  ::memset(&sampling_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
      reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
}

MemoryLeakReportProto_Params::~MemoryLeakReportProto_Params() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.Params)
  SharedDtor();
}

void MemoryLeakReportProto_Params::SharedDtor() {
}

void MemoryLeakReportProto_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLeakReportProto_Params& MemoryLeakReportProto_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryLeakReportProto_Params_memory_5fleak_5freport_2eproto.base);
  return *internal_default_instance();
}


void MemoryLeakReportProto_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&sampling_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
        reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryLeakReportProto_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float sampling_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_sampling_rate(&has_bits);
          sampling_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_stack_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_stack_depth(&has_bits);
          max_stack_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 analysis_interval_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_analysis_interval_bytes(&has_bits);
          analysis_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size_suspicion_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size_suspicion_threshold(&has_bits);
          size_suspicion_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 call_stack_suspicion_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_call_stack_suspicion_threshold(&has_bits);
          call_stack_suspicion_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryLeakReportProto_Params::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.Params)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float sampling_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_sampling_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sampling_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_stack_depth = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_max_stack_depth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_stack_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 analysis_interval_bytes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_analysis_interval_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &analysis_interval_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size_suspicion_threshold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_size_suspicion_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_suspicion_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 call_stack_suspicion_threshold = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_call_stack_suspicion_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_stack_suspicion_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.Params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.Params)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryLeakReportProto_Params::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float sampling_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->sampling_rate(), output);
  }

  // optional uint32 max_stack_depth = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->max_stack_depth(), output);
  }

  // optional uint64 analysis_interval_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->analysis_interval_bytes(), output);
  }

  // optional uint32 size_suspicion_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->size_suspicion_threshold(), output);
  }

  // optional uint32 call_stack_suspicion_threshold = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->call_stack_suspicion_threshold(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.Params)
}

size_t MemoryLeakReportProto_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.Params)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float sampling_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 max_stack_depth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_stack_depth());
    }

    // optional uint64 analysis_interval_bytes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->analysis_interval_bytes());
    }

    // optional uint32 size_suspicion_threshold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->size_suspicion_threshold());
    }

    // optional uint32 call_stack_suspicion_threshold = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->call_stack_suspicion_threshold());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto_Params::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MemoryLeakReportProto_Params*>(
      &from));
}

void MemoryLeakReportProto_Params::MergeFrom(const MemoryLeakReportProto_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      sampling_rate_ = from.sampling_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_stack_depth_ = from.max_stack_depth_;
    }
    if (cached_has_bits & 0x00000004u) {
      analysis_interval_bytes_ = from.analysis_interval_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_suspicion_threshold_ = from.size_suspicion_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      call_stack_suspicion_threshold_ = from.call_stack_suspicion_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryLeakReportProto_Params::CopyFrom(const MemoryLeakReportProto_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_Params::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_Params::InternalSwap(MemoryLeakReportProto_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sampling_rate_, other->sampling_rate_);
  swap(max_stack_depth_, other->max_stack_depth_);
  swap(analysis_interval_bytes_, other->analysis_interval_bytes_);
  swap(size_suspicion_threshold_, other->size_suspicion_threshold_);
  swap(call_stack_suspicion_threshold_, other->call_stack_suspicion_threshold_);
}

std::string MemoryLeakReportProto_Params::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.Params";
}


// ===================================================================

void MemoryLeakReportProto_AllocationBreakdown::InitAsDefaultInstance() {
}
class MemoryLeakReportProto_AllocationBreakdown::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryLeakReportProto_AllocationBreakdown>()._has_bits_);
  static void set_has_count_for_call_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
}
MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown(const MemoryLeakReportProto_AllocationBreakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      counts_by_size_(from.counts_by_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_for_call_stack_ = from.count_for_call_stack_;
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
}

void MemoryLeakReportProto_AllocationBreakdown::SharedCtor() {
  count_for_call_stack_ = 0u;
}

MemoryLeakReportProto_AllocationBreakdown::~MemoryLeakReportProto_AllocationBreakdown() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
  SharedDtor();
}

void MemoryLeakReportProto_AllocationBreakdown::SharedDtor() {
}

void MemoryLeakReportProto_AllocationBreakdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLeakReportProto_AllocationBreakdown& MemoryLeakReportProto_AllocationBreakdown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryLeakReportProto_AllocationBreakdown_memory_5fleak_5freport_2eproto.base);
  return *internal_default_instance();
}


void MemoryLeakReportProto_AllocationBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_by_size_.Clear();
  count_for_call_stack_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryLeakReportProto_AllocationBreakdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 counts_by_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_counts_by_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_counts_by_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count_for_call_stack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count_for_call_stack(&has_bits);
          count_for_call_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryLeakReportProto_AllocationBreakdown::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 counts_by_size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_counts_by_size())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_counts_by_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count_for_call_stack = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count_for_call_stack(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_for_call_stack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.AllocationBreakdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.AllocationBreakdown)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryLeakReportProto_AllocationBreakdown::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 counts_by_size = 1;
  for (int i = 0, n = this->counts_by_size_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      1, this->counts_by_size(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 count_for_call_stack = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->count_for_call_stack(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.AllocationBreakdown)
}

size_t MemoryLeakReportProto_AllocationBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 counts_by_size = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->counts_by_size_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->counts_by_size_size());
    total_size += data_size;
  }

  // optional uint32 count_for_call_stack = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count_for_call_stack());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto_AllocationBreakdown::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MemoryLeakReportProto_AllocationBreakdown*>(
      &from));
}

void MemoryLeakReportProto_AllocationBreakdown::MergeFrom(const MemoryLeakReportProto_AllocationBreakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counts_by_size_.MergeFrom(from.counts_by_size_);
  if (from.has_count_for_call_stack()) {
    set_count_for_call_stack(from.count_for_call_stack());
  }
}

void MemoryLeakReportProto_AllocationBreakdown::CopyFrom(const MemoryLeakReportProto_AllocationBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_AllocationBreakdown::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_AllocationBreakdown::InternalSwap(MemoryLeakReportProto_AllocationBreakdown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  counts_by_size_.InternalSwap(&other->counts_by_size_);
  swap(count_for_call_stack_, other->count_for_call_stack_);
}

std::string MemoryLeakReportProto_AllocationBreakdown::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.AllocationBreakdown";
}


// ===================================================================

void MemoryLeakReportProto_MemoryUsageInfo::InitAsDefaultInstance() {
}
class MemoryLeakReportProto_MemoryUsageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryLeakReportProto_MemoryUsageInfo>()._has_bits_);
  static void set_has_available_ram_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chrome_ram_usage_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}
MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo(const MemoryLeakReportProto_MemoryUsageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&available_ram_mb_, &from.available_ram_mb_,
    static_cast<size_t>(reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
    reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}

void MemoryLeakReportProto_MemoryUsageInfo::SharedCtor() {
  ::memset(&available_ram_mb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
      reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
}

MemoryLeakReportProto_MemoryUsageInfo::~MemoryLeakReportProto_MemoryUsageInfo() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  SharedDtor();
}

void MemoryLeakReportProto_MemoryUsageInfo::SharedDtor() {
}

void MemoryLeakReportProto_MemoryUsageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLeakReportProto_MemoryUsageInfo& MemoryLeakReportProto_MemoryUsageInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryLeakReportProto_MemoryUsageInfo_memory_5fleak_5freport_2eproto.base);
  return *internal_default_instance();
}


void MemoryLeakReportProto_MemoryUsageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&available_ram_mb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
        reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryLeakReportProto_MemoryUsageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 available_ram_mb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_available_ram_mb(&has_bits);
          available_ram_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 chrome_ram_usage_mb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_chrome_ram_usage_mb(&has_bits);
          chrome_ram_usage_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryLeakReportProto_MemoryUsageInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 available_ram_mb = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_available_ram_mb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_ram_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chrome_ram_usage_mb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_chrome_ram_usage_mb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chrome_ram_usage_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryLeakReportProto_MemoryUsageInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 available_ram_mb = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->available_ram_mb(), output);
  }

  // optional uint64 chrome_ram_usage_mb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->chrome_ram_usage_mb(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}

size_t MemoryLeakReportProto_MemoryUsageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 available_ram_mb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->available_ram_mb());
    }

    // optional uint64 chrome_ram_usage_mb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->chrome_ram_usage_mb());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto_MemoryUsageInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MemoryLeakReportProto_MemoryUsageInfo*>(
      &from));
}

void MemoryLeakReportProto_MemoryUsageInfo::MergeFrom(const MemoryLeakReportProto_MemoryUsageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      available_ram_mb_ = from.available_ram_mb_;
    }
    if (cached_has_bits & 0x00000002u) {
      chrome_ram_usage_mb_ = from.chrome_ram_usage_mb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryLeakReportProto_MemoryUsageInfo::CopyFrom(const MemoryLeakReportProto_MemoryUsageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_MemoryUsageInfo::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_MemoryUsageInfo::InternalSwap(MemoryLeakReportProto_MemoryUsageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(available_ram_mb_, other->available_ram_mb_);
  swap(chrome_ram_usage_mb_, other->chrome_ram_usage_mb_);
}

std::string MemoryLeakReportProto_MemoryUsageInfo::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.MemoryUsageInfo";
}


// ===================================================================

void MemoryLeakReportProto::InitAsDefaultInstance() {
  ::metrics::_MemoryLeakReportProto_default_instance_._instance.get_mutable()->params_ = const_cast< ::metrics::MemoryLeakReportProto_Params*>(
      ::metrics::MemoryLeakReportProto_Params::internal_default_instance());
  ::metrics::_MemoryLeakReportProto_default_instance_._instance.get_mutable()->memory_usage_info_ = const_cast< ::metrics::MemoryLeakReportProto_MemoryUsageInfo*>(
      ::metrics::MemoryLeakReportProto_MemoryUsageInfo::internal_default_instance());
}
class MemoryLeakReportProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryLeakReportProto>()._has_bits_);
  static void set_has_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::metrics::MemoryLeakReportProto_Params& params(const MemoryLeakReportProto* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_process(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_rising_intervals(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_allocs_increase(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::metrics::MemoryLeakReportProto_MemoryUsageInfo& memory_usage_info(const MemoryLeakReportProto* msg);
  static void set_has_memory_usage_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::metrics::MemoryLeakReportProto_Params&
MemoryLeakReportProto::_Internal::params(const MemoryLeakReportProto* msg) {
  return *msg->params_;
}
const ::metrics::MemoryLeakReportProto_MemoryUsageInfo&
MemoryLeakReportProto::_Internal::memory_usage_info(const MemoryLeakReportProto* msg) {
  return *msg->memory_usage_info_;
}
MemoryLeakReportProto::MemoryLeakReportProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto)
}
MemoryLeakReportProto::MemoryLeakReportProto(const MemoryLeakReportProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      call_stack_(from.call_stack_),
      alloc_breakdown_history_(from.alloc_breakdown_history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  build_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_id()) {
    build_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.build_id_);
  }
  if (from.has_params()) {
    params_ = new ::metrics::MemoryLeakReportProto_Params(*from.params_);
  } else {
    params_ = nullptr;
  }
  if (from.has_memory_usage_info()) {
    memory_usage_info_ = new ::metrics::MemoryLeakReportProto_MemoryUsageInfo(*from.memory_usage_info_);
  } else {
    memory_usage_info_ = nullptr;
  }
  ::memcpy(&size_bytes_, &from.size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_allocs_increase_) -
    reinterpret_cast<char*>(&size_bytes_)) + sizeof(num_allocs_increase_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto)
}

void MemoryLeakReportProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryLeakReportProto_memory_5fleak_5freport_2eproto.base);
  build_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_allocs_increase_) -
      reinterpret_cast<char*>(&params_)) + sizeof(num_allocs_increase_));
}

MemoryLeakReportProto::~MemoryLeakReportProto() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto)
  SharedDtor();
}

void MemoryLeakReportProto::SharedDtor() {
  build_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete memory_usage_info_;
}

void MemoryLeakReportProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLeakReportProto& MemoryLeakReportProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryLeakReportProto_memory_5fleak_5freport_2eproto.base);
  return *internal_default_instance();
}


void MemoryLeakReportProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_stack_.Clear();
  alloc_breakdown_history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      build_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(params_ != nullptr);
      params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(memory_usage_info_ != nullptr);
      memory_usage_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_allocs_increase_) -
        reinterpret_cast<char*>(&size_bytes_)) + sizeof(num_allocs_increase_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryLeakReportProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 call_stack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_call_stack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_call_stack(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size_bytes(&has_bits);
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.MemoryLeakReportProto.Params params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_alloc_breakdown_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::MemoryLeakReportProto_ProcessType_IsValid(val))) {
            set_source_process(static_cast<::metrics::MemoryLeakReportProto_ProcessType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes build_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_build_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_rising_intervals = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_rising_intervals(&has_bits);
          num_rising_intervals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_allocs_increase = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_allocs_increase(&has_bits);
          num_allocs_increase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_memory_usage_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryLeakReportProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 call_stack = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_call_stack())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_call_stack())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size_bytes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_size_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.MemoryLeakReportProto.Params params = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_alloc_breakdown_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::MemoryLeakReportProto_ProcessType_IsValid(value)) {
            set_source_process(static_cast< ::metrics::MemoryLeakReportProto_ProcessType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes build_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_build_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_rising_intervals = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_num_rising_intervals(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rising_intervals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_allocs_increase = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_num_allocs_increase(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_allocs_increase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memory_usage_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryLeakReportProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 call_stack = 1;
  for (int i = 0, n = this->call_stack_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      1, this->call_stack(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 size_bytes = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->size_bytes(), output);
  }

  // optional .metrics.MemoryLeakReportProto.Params params = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::params(this), output);
  }

  // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alloc_breakdown_history_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->alloc_breakdown_history(static_cast<int>(i)),
      output);
  }

  // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->source_process(), output);
  }

  // optional bytes build_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->build_id(), output);
  }

  // optional uint32 num_rising_intervals = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->num_rising_intervals(), output);
  }

  // optional uint32 num_allocs_increase = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->num_allocs_increase(), output);
  }

  // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::memory_usage_info(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto)
}

size_t MemoryLeakReportProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 call_stack = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->call_stack_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->call_stack_size());
    total_size += data_size;
  }

  // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->alloc_breakdown_history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->alloc_breakdown_history(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes build_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->build_id());
    }

    // optional .metrics.MemoryLeakReportProto.Params params = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_);
    }

    // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memory_usage_info_);
    }

    // optional uint32 size_bytes = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->size_bytes());
    }

    // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->source_process());
    }

    // optional uint32 num_rising_intervals = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_rising_intervals());
    }

    // optional uint32 num_allocs_increase = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_allocs_increase());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MemoryLeakReportProto*>(
      &from));
}

void MemoryLeakReportProto::MergeFrom(const MemoryLeakReportProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  call_stack_.MergeFrom(from.call_stack_);
  alloc_breakdown_history_.MergeFrom(from.alloc_breakdown_history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      build_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.build_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_params()->::metrics::MemoryLeakReportProto_Params::MergeFrom(from.params());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_memory_usage_info()->::metrics::MemoryLeakReportProto_MemoryUsageInfo::MergeFrom(from.memory_usage_info());
    }
    if (cached_has_bits & 0x00000008u) {
      size_bytes_ = from.size_bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_process_ = from.source_process_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_rising_intervals_ = from.num_rising_intervals_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_allocs_increase_ = from.num_allocs_increase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryLeakReportProto::CopyFrom(const MemoryLeakReportProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto::InternalSwap(MemoryLeakReportProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  call_stack_.InternalSwap(&other->call_stack_);
  CastToBase(&alloc_breakdown_history_)->InternalSwap(CastToBase(&other->alloc_breakdown_history_));
  build_id_.Swap(&other->build_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(params_, other->params_);
  swap(memory_usage_info_, other->memory_usage_info_);
  swap(size_bytes_, other->size_bytes_);
  swap(source_process_, other->source_process_);
  swap(num_rising_intervals_, other->num_rising_intervals_);
  swap(num_allocs_increase_, other->num_allocs_increase_);
}

std::string MemoryLeakReportProto::GetTypeName() const {
  return "metrics.MemoryLeakReportProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::MemoryLeakReportProto_Params* Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto_Params >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::MemoryLeakReportProto_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::MemoryLeakReportProto_AllocationBreakdown* Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto_AllocationBreakdown >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::MemoryLeakReportProto_AllocationBreakdown >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::MemoryLeakReportProto_MemoryUsageInfo* Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto_MemoryUsageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::MemoryLeakReportProto_MemoryUsageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::MemoryLeakReportProto* Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::MemoryLeakReportProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
