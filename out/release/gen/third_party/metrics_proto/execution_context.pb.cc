// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution_context.proto

#include "execution_context.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace metrics {
}  // namespace metrics
namespace metrics {
bool Process_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Process_strings[10] = {};

static const char Process_names[] =
  "BROWSER_PROCESS"
  "GPU_PROCESS"
  "OTHER_PROCESS"
  "PPAPI_BROKER_PROCESS"
  "PPAPI_PLUGIN_PROCESS"
  "RENDERER_PROCESS"
  "SANDBOX_HELPER_PROCESS"
  "UNKNOWN_PROCESS"
  "UTILITY_PROCESS"
  "ZYGOTE_PROCESS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Process_entries[] = {
  { {Process_names + 0, 15}, 1 },
  { {Process_names + 15, 11}, 3 },
  { {Process_names + 26, 13}, 9 },
  { {Process_names + 39, 20}, 8 },
  { {Process_names + 59, 20}, 7 },
  { {Process_names + 79, 16}, 2 },
  { {Process_names + 95, 22}, 6 },
  { {Process_names + 117, 15}, 0 },
  { {Process_names + 132, 15}, 4 },
  { {Process_names + 147, 14}, 5 },
};

static const int Process_entries_by_number[] = {
  7, // 0 -> UNKNOWN_PROCESS
  0, // 1 -> BROWSER_PROCESS
  5, // 2 -> RENDERER_PROCESS
  1, // 3 -> GPU_PROCESS
  8, // 4 -> UTILITY_PROCESS
  9, // 5 -> ZYGOTE_PROCESS
  6, // 6 -> SANDBOX_HELPER_PROCESS
  4, // 7 -> PPAPI_PLUGIN_PROCESS
  3, // 8 -> PPAPI_BROKER_PROCESS
  2, // 9 -> OTHER_PROCESS
};

const std::string& Process_Name(
    Process value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Process_entries,
          Process_entries_by_number,
          10, Process_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Process_entries,
      Process_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Process_strings[idx].get();
}
bool Process_Parse(
    const std::string& name, Process* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Process_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<Process>(int_value);
  }
  return success;
}
bool Thread_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Thread_strings[18] = {};

static const char Thread_names[] =
  "CACHE_THREAD"
  "COMPOSITOR_THREAD"
  "COMPOSITOR_TILE_WORKER_THREAD"
  "DB_THREAD"
  "FILE_THREAD"
  "FILE_USER_BLOCKING_THREAD"
  "GPU_MAIN_THREAD"
  "GPU_MEMORY_THREAD"
  "IO_THREAD"
  "MAIN_THREAD"
  "OTHER_THREAD"
  "PROCESS_LAUNCHER_THREAD"
  "RENDER_THREAD"
  "SCHEDULER_WORKER_THREAD"
  "SERVICE_WORKER_THREAD"
  "THREAD_POOL_THREAD"
  "UNKNOWN_THREAD"
  "UTILITY_THREAD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Thread_entries[] = {
  { {Thread_names + 0, 12}, 5 },
  { {Thread_names + 12, 17}, 11 },
  { {Thread_names + 29, 29}, 14 },
  { {Thread_names + 58, 9}, 7 },
  { {Thread_names + 67, 11}, 2 },
  { {Thread_names + 78, 25}, 3 },
  { {Thread_names + 103, 15}, 8 },
  { {Thread_names + 118, 17}, 17 },
  { {Thread_names + 135, 9}, 6 },
  { {Thread_names + 144, 11}, 1 },
  { {Thread_names + 155, 12}, 12 },
  { {Thread_names + 167, 23}, 4 },
  { {Thread_names + 190, 13}, 9 },
  { {Thread_names + 203, 23}, 13 },
  { {Thread_names + 226, 21}, 15 },
  { {Thread_names + 247, 18}, 16 },
  { {Thread_names + 265, 14}, 0 },
  { {Thread_names + 279, 14}, 10 },
};

static const int Thread_entries_by_number[] = {
  16, // 0 -> UNKNOWN_THREAD
  9, // 1 -> MAIN_THREAD
  4, // 2 -> FILE_THREAD
  5, // 3 -> FILE_USER_BLOCKING_THREAD
  11, // 4 -> PROCESS_LAUNCHER_THREAD
  0, // 5 -> CACHE_THREAD
  8, // 6 -> IO_THREAD
  3, // 7 -> DB_THREAD
  6, // 8 -> GPU_MAIN_THREAD
  12, // 9 -> RENDER_THREAD
  17, // 10 -> UTILITY_THREAD
  1, // 11 -> COMPOSITOR_THREAD
  10, // 12 -> OTHER_THREAD
  13, // 13 -> SCHEDULER_WORKER_THREAD
  2, // 14 -> COMPOSITOR_TILE_WORKER_THREAD
  14, // 15 -> SERVICE_WORKER_THREAD
  15, // 16 -> THREAD_POOL_THREAD
  7, // 17 -> GPU_MEMORY_THREAD
};

const std::string& Thread_Name(
    Thread value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Thread_entries,
          Thread_entries_by_number,
          18, Thread_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Thread_entries,
      Thread_entries_by_number,
      18, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Thread_strings[idx].get();
}
bool Thread_Parse(
    const std::string& name, Thread* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Thread_entries, 18, name, &int_value);
  if (success) {
    *value = static_cast<Thread>(int_value);
  }
  return success;
}
bool ProcessPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProcessPhase_strings[5] = {};

static const char ProcessPhase_names[] =
  "FIRST_NONEMPTY_PAINT"
  "MAIN_LOOP_START"
  "MAIN_NAVIGATION_FINISHED"
  "MAIN_NAVIGATION_START"
  "SHUTDOWN_START";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProcessPhase_entries[] = {
  { {ProcessPhase_names + 0, 20}, 3 },
  { {ProcessPhase_names + 20, 15}, 0 },
  { {ProcessPhase_names + 35, 24}, 2 },
  { {ProcessPhase_names + 59, 21}, 1 },
  { {ProcessPhase_names + 80, 14}, 4 },
};

static const int ProcessPhase_entries_by_number[] = {
  1, // 0 -> MAIN_LOOP_START
  3, // 1 -> MAIN_NAVIGATION_START
  2, // 2 -> MAIN_NAVIGATION_FINISHED
  0, // 3 -> FIRST_NONEMPTY_PAINT
  4, // 4 -> SHUTDOWN_START
};

const std::string& ProcessPhase_Name(
    ProcessPhase value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProcessPhase_entries,
          ProcessPhase_entries_by_number,
          5, ProcessPhase_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProcessPhase_entries,
      ProcessPhase_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProcessPhase_strings[idx].get();
}
bool ProcessPhase_Parse(
    const std::string& name, ProcessPhase* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProcessPhase_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ProcessPhase>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
