{"src/include/dawn/webgpu.h": "// BSD 3-Clause License\n//\n// Copyright (c) 2019, \"WebGPU native\" developers\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// 1. Redistributions of source code must retain the above copyright notice, this\n//    list of conditions and the following disclaimer.\n//\n// 2. Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n// 3. Neither the name of the copyright holder nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#ifndef WEBGPU_H_\n#define WEBGPU_H_\n\n#if defined(WGPU_SHARED_LIBRARY)\n#    if defined(_WIN32)\n#        if defined(WGPU_IMPLEMENTATION)\n#            define WGPU_EXPORT __declspec(dllexport)\n#        else\n#            define WGPU_EXPORT __declspec(dllimport)\n#        endif\n#    else  // defined(_WIN32)\n#        if defined(WGPU_IMPLEMENTATION)\n#            define WGPU_EXPORT __attribute__((visibility(\"default\")))\n#        else\n#            define WGPU_EXPORT\n#        endif\n#    endif  // defined(_WIN32)\n#else       // defined(WGPU_SHARED_LIBRARY)\n#    define WGPU_EXPORT\n#endif  // defined(WGPU_SHARED_LIBRARY)\n\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n\nconst uint64_t WGPU_WHOLE_SIZE = 0xffffffffffffffffULL; // UINT64_MAX\n\ntypedef uint32_t WGPUFlags;\n\ntypedef struct WGPUBindGroupImpl* WGPUBindGroup;\ntypedef struct WGPUBindGroupLayoutImpl* WGPUBindGroupLayout;\ntypedef struct WGPUBufferImpl* WGPUBuffer;\ntypedef struct WGPUCommandBufferImpl* WGPUCommandBuffer;\ntypedef struct WGPUCommandEncoderImpl* WGPUCommandEncoder;\ntypedef struct WGPUComputePassEncoderImpl* WGPUComputePassEncoder;\ntypedef struct WGPUComputePipelineImpl* WGPUComputePipeline;\ntypedef struct WGPUDeviceImpl* WGPUDevice;\ntypedef struct WGPUFenceImpl* WGPUFence;\ntypedef struct WGPUInstanceImpl* WGPUInstance;\ntypedef struct WGPUPipelineLayoutImpl* WGPUPipelineLayout;\ntypedef struct WGPUQueueImpl* WGPUQueue;\ntypedef struct WGPURenderBundleImpl* WGPURenderBundle;\ntypedef struct WGPURenderBundleEncoderImpl* WGPURenderBundleEncoder;\ntypedef struct WGPURenderPassEncoderImpl* WGPURenderPassEncoder;\ntypedef struct WGPURenderPipelineImpl* WGPURenderPipeline;\ntypedef struct WGPUSamplerImpl* WGPUSampler;\ntypedef struct WGPUShaderModuleImpl* WGPUShaderModule;\ntypedef struct WGPUSurfaceImpl* WGPUSurface;\ntypedef struct WGPUSwapChainImpl* WGPUSwapChain;\ntypedef struct WGPUTextureImpl* WGPUTexture;\ntypedef struct WGPUTextureViewImpl* WGPUTextureView;\n\ntypedef enum WGPUAdapterType {\n    WGPUAdapterType_DiscreteGPU = 0x00000000,\n    WGPUAdapterType_IntegratedGPU = 0x00000001,\n    WGPUAdapterType_CPU = 0x00000002,\n    WGPUAdapterType_Unknown = 0x00000003,\n    WGPUAdapterType_Force32 = 0x7FFFFFFF\n} WGPUAdapterType;\n\ntypedef enum WGPUAddressMode {\n    WGPUAddressMode_Repeat = 0x00000000,\n    WGPUAddressMode_MirrorRepeat = 0x00000001,\n    WGPUAddressMode_ClampToEdge = 0x00000002,\n    WGPUAddressMode_Force32 = 0x7FFFFFFF\n} WGPUAddressMode;\n\ntypedef enum WGPUBackendType {\n    WGPUBackendType_Null = 0x00000000,\n    WGPUBackendType_D3D11 = 0x00000001,\n    WGPUBackendType_D3D12 = 0x00000002,\n    WGPUBackendType_Metal = 0x00000003,\n    WGPUBackendType_Vulkan = 0x00000004,\n    WGPUBackendType_OpenGL = 0x00000005,\n    WGPUBackendType_OpenGLES = 0x00000006,\n    WGPUBackendType_Force32 = 0x7FFFFFFF\n} WGPUBackendType;\n\ntypedef enum WGPUBindingType {\n    WGPUBindingType_UniformBuffer = 0x00000000,\n    WGPUBindingType_StorageBuffer = 0x00000001,\n    WGPUBindingType_ReadonlyStorageBuffer = 0x00000002,\n    WGPUBindingType_Sampler = 0x00000003,\n    WGPUBindingType_SampledTexture = 0x00000004,\n    WGPUBindingType_StorageTexture = 0x00000005,\n    WGPUBindingType_Force32 = 0x7FFFFFFF\n} WGPUBindingType;\n\ntypedef enum WGPUBlendFactor {\n    WGPUBlendFactor_Zero = 0x00000000,\n    WGPUBlendFactor_One = 0x00000001,\n    WGPUBlendFactor_SrcColor = 0x00000002,\n    WGPUBlendFactor_OneMinusSrcColor = 0x00000003,\n    WGPUBlendFactor_SrcAlpha = 0x00000004,\n    WGPUBlendFactor_OneMinusSrcAlpha = 0x00000005,\n    WGPUBlendFactor_DstColor = 0x00000006,\n    WGPUBlendFactor_OneMinusDstColor = 0x00000007,\n    WGPUBlendFactor_DstAlpha = 0x00000008,\n    WGPUBlendFactor_OneMinusDstAlpha = 0x00000009,\n    WGPUBlendFactor_SrcAlphaSaturated = 0x0000000A,\n    WGPUBlendFactor_BlendColor = 0x0000000B,\n    WGPUBlendFactor_OneMinusBlendColor = 0x0000000C,\n    WGPUBlendFactor_Force32 = 0x7FFFFFFF\n} WGPUBlendFactor;\n\ntypedef enum WGPUBlendOperation {\n    WGPUBlendOperation_Add = 0x00000000,\n    WGPUBlendOperation_Subtract = 0x00000001,\n    WGPUBlendOperation_ReverseSubtract = 0x00000002,\n    WGPUBlendOperation_Min = 0x00000003,\n    WGPUBlendOperation_Max = 0x00000004,\n    WGPUBlendOperation_Force32 = 0x7FFFFFFF\n} WGPUBlendOperation;\n\ntypedef enum WGPUBufferMapAsyncStatus {\n    WGPUBufferMapAsyncStatus_Success = 0x00000000,\n    WGPUBufferMapAsyncStatus_Error = 0x00000001,\n    WGPUBufferMapAsyncStatus_Unknown = 0x00000002,\n    WGPUBufferMapAsyncStatus_DeviceLost = 0x00000003,\n    WGPUBufferMapAsyncStatus_Force32 = 0x7FFFFFFF\n} WGPUBufferMapAsyncStatus;\n\ntypedef enum WGPUCompareFunction {\n    WGPUCompareFunction_Never = 0x00000000,\n    WGPUCompareFunction_Less = 0x00000001,\n    WGPUCompareFunction_LessEqual = 0x00000002,\n    WGPUCompareFunction_Greater = 0x00000003,\n    WGPUCompareFunction_GreaterEqual = 0x00000004,\n    WGPUCompareFunction_Equal = 0x00000005,\n    WGPUCompareFunction_NotEqual = 0x00000006,\n    WGPUCompareFunction_Always = 0x00000007,\n    WGPUCompareFunction_Force32 = 0x7FFFFFFF\n} WGPUCompareFunction;\n\ntypedef enum WGPUCullMode {\n    WGPUCullMode_None = 0x00000000,\n    WGPUCullMode_Front = 0x00000001,\n    WGPUCullMode_Back = 0x00000002,\n    WGPUCullMode_Force32 = 0x7FFFFFFF\n} WGPUCullMode;\n\ntypedef enum WGPUErrorFilter {\n    WGPUErrorFilter_None = 0x00000000,\n    WGPUErrorFilter_Validation = 0x00000001,\n    WGPUErrorFilter_OutOfMemory = 0x00000002,\n    WGPUErrorFilter_Force32 = 0x7FFFFFFF\n} WGPUErrorFilter;\n\ntypedef enum WGPUErrorType {\n    WGPUErrorType_NoError = 0x00000000,\n    WGPUErrorType_Validation = 0x00000001,\n    WGPUErrorType_OutOfMemory = 0x00000002,\n    WGPUErrorType_Unknown = 0x00000003,\n    WGPUErrorType_DeviceLost = 0x00000004,\n    WGPUErrorType_Force32 = 0x7FFFFFFF\n} WGPUErrorType;\n\ntypedef enum WGPUFenceCompletionStatus {\n    WGPUFenceCompletionStatus_Success = 0x00000000,\n    WGPUFenceCompletionStatus_Error = 0x00000001,\n    WGPUFenceCompletionStatus_Unknown = 0x00000002,\n    WGPUFenceCompletionStatus_DeviceLost = 0x00000003,\n    WGPUFenceCompletionStatus_Force32 = 0x7FFFFFFF\n} WGPUFenceCompletionStatus;\n\ntypedef enum WGPUFilterMode {\n    WGPUFilterMode_Nearest = 0x00000000,\n    WGPUFilterMode_Linear = 0x00000001,\n    WGPUFilterMode_Force32 = 0x7FFFFFFF\n} WGPUFilterMode;\n\ntypedef enum WGPUFrontFace {\n    WGPUFrontFace_CCW = 0x00000000,\n    WGPUFrontFace_CW = 0x00000001,\n    WGPUFrontFace_Force32 = 0x7FFFFFFF\n} WGPUFrontFace;\n\ntypedef enum WGPUIndexFormat {\n    WGPUIndexFormat_Uint16 = 0x00000000,\n    WGPUIndexFormat_Uint32 = 0x00000001,\n    WGPUIndexFormat_Force32 = 0x7FFFFFFF\n} WGPUIndexFormat;\n\ntypedef enum WGPUInputStepMode {\n    WGPUInputStepMode_Vertex = 0x00000000,\n    WGPUInputStepMode_Instance = 0x00000001,\n    WGPUInputStepMode_Force32 = 0x7FFFFFFF\n} WGPUInputStepMode;\n\ntypedef enum WGPULoadOp {\n    WGPULoadOp_Clear = 0x00000000,\n    WGPULoadOp_Load = 0x00000001,\n    WGPULoadOp_Force32 = 0x7FFFFFFF\n} WGPULoadOp;\n\ntypedef enum WGPUPresentMode {\n    WGPUPresentMode_NoVSync = 0x00000000,\n    WGPUPresentMode_VSync = 0x00000001,\n    WGPUPresentMode_Force32 = 0x7FFFFFFF\n} WGPUPresentMode;\n\ntypedef enum WGPUPrimitiveTopology {\n    WGPUPrimitiveTopology_PointList = 0x00000000,\n    WGPUPrimitiveTopology_LineList = 0x00000001,\n    WGPUPrimitiveTopology_LineStrip = 0x00000002,\n    WGPUPrimitiveTopology_TriangleList = 0x00000003,\n    WGPUPrimitiveTopology_TriangleStrip = 0x00000004,\n    WGPUPrimitiveTopology_Force32 = 0x7FFFFFFF\n} WGPUPrimitiveTopology;\n\ntypedef enum WGPUSType {\n    WGPUSType_Invalid = 0x00000000,\n    WGPUSType_SurfaceDescriptorFromMetalLayer = 0x00000001,\n    WGPUSType_SurfaceDescriptorFromWindowsHWND = 0x00000002,\n    WGPUSType_SurfaceDescriptorFromXlib = 0x00000003,\n    WGPUSType_SurfaceDescriptorFromHTMLCanvasId = 0x00000004,\n    WGPUSType_Force32 = 0x7FFFFFFF\n} WGPUSType;\n\ntypedef enum WGPUStencilOperation {\n    WGPUStencilOperation_Keep = 0x00000000,\n    WGPUStencilOperation_Zero = 0x00000001,\n    WGPUStencilOperation_Replace = 0x00000002,\n    WGPUStencilOperation_Invert = 0x00000003,\n    WGPUStencilOperation_IncrementClamp = 0x00000004,\n    WGPUStencilOperation_DecrementClamp = 0x00000005,\n    WGPUStencilOperation_IncrementWrap = 0x00000006,\n    WGPUStencilOperation_DecrementWrap = 0x00000007,\n    WGPUStencilOperation_Force32 = 0x7FFFFFFF\n} WGPUStencilOperation;\n\ntypedef enum WGPUStoreOp {\n    WGPUStoreOp_Store = 0x00000000,\n    WGPUStoreOp_Clear = 0x00000001,\n    WGPUStoreOp_Force32 = 0x7FFFFFFF\n} WGPUStoreOp;\n\ntypedef enum WGPUTextureAspect {\n    WGPUTextureAspect_All = 0x00000000,\n    WGPUTextureAspect_StencilOnly = 0x00000001,\n    WGPUTextureAspect_DepthOnly = 0x00000002,\n    WGPUTextureAspect_Force32 = 0x7FFFFFFF\n} WGPUTextureAspect;\n\ntypedef enum WGPUTextureComponentType {\n    WGPUTextureComponentType_Float = 0x00000000,\n    WGPUTextureComponentType_Sint = 0x00000001,\n    WGPUTextureComponentType_Uint = 0x00000002,\n    WGPUTextureComponentType_Force32 = 0x7FFFFFFF\n} WGPUTextureComponentType;\n\ntypedef enum WGPUTextureDimension {\n    WGPUTextureDimension_1D = 0x00000000,\n    WGPUTextureDimension_2D = 0x00000001,\n    WGPUTextureDimension_3D = 0x00000002,\n    WGPUTextureDimension_Force32 = 0x7FFFFFFF\n} WGPUTextureDimension;\n\ntypedef enum WGPUTextureFormat {\n    WGPUTextureFormat_Undefined = 0x00000000,\n    WGPUTextureFormat_R8Unorm = 0x00000001,\n    WGPUTextureFormat_R8Snorm = 0x00000002,\n    WGPUTextureFormat_R8Uint = 0x00000003,\n    WGPUTextureFormat_R8Sint = 0x00000004,\n    WGPUTextureFormat_R16Uint = 0x00000005,\n    WGPUTextureFormat_R16Sint = 0x00000006,\n    WGPUTextureFormat_R16Float = 0x00000007,\n    WGPUTextureFormat_RG8Unorm = 0x00000008,\n    WGPUTextureFormat_RG8Snorm = 0x00000009,\n    WGPUTextureFormat_RG8Uint = 0x0000000A,\n    WGPUTextureFormat_RG8Sint = 0x0000000B,\n    WGPUTextureFormat_R32Float = 0x0000000C,\n    WGPUTextureFormat_R32Uint = 0x0000000D,\n    WGPUTextureFormat_R32Sint = 0x0000000E,\n    WGPUTextureFormat_RG16Uint = 0x0000000F,\n    WGPUTextureFormat_RG16Sint = 0x00000010,\n    WGPUTextureFormat_RG16Float = 0x00000011,\n    WGPUTextureFormat_RGBA8Unorm = 0x00000012,\n    WGPUTextureFormat_RGBA8UnormSrgb = 0x00000013,\n    WGPUTextureFormat_RGBA8Snorm = 0x00000014,\n    WGPUTextureFormat_RGBA8Uint = 0x00000015,\n    WGPUTextureFormat_RGBA8Sint = 0x00000016,\n    WGPUTextureFormat_BGRA8Unorm = 0x00000017,\n    WGPUTextureFormat_BGRA8UnormSrgb = 0x00000018,\n    WGPUTextureFormat_RGB10A2Unorm = 0x00000019,\n    WGPUTextureFormat_RG11B10Float = 0x0000001A,\n    WGPUTextureFormat_RG32Float = 0x0000001B,\n    WGPUTextureFormat_RG32Uint = 0x0000001C,\n    WGPUTextureFormat_RG32Sint = 0x0000001D,\n    WGPUTextureFormat_RGBA16Uint = 0x0000001E,\n    WGPUTextureFormat_RGBA16Sint = 0x0000001F,\n    WGPUTextureFormat_RGBA16Float = 0x00000020,\n    WGPUTextureFormat_RGBA32Float = 0x00000021,\n    WGPUTextureFormat_RGBA32Uint = 0x00000022,\n    WGPUTextureFormat_RGBA32Sint = 0x00000023,\n    WGPUTextureFormat_Depth32Float = 0x00000024,\n    WGPUTextureFormat_Depth24Plus = 0x00000025,\n    WGPUTextureFormat_Depth24PlusStencil8 = 0x00000026,\n    WGPUTextureFormat_BC1RGBAUnorm = 0x00000027,\n    WGPUTextureFormat_BC1RGBAUnormSrgb = 0x00000028,\n    WGPUTextureFormat_BC2RGBAUnorm = 0x00000029,\n    WGPUTextureFormat_BC2RGBAUnormSrgb = 0x0000002A,\n    WGPUTextureFormat_BC3RGBAUnorm = 0x0000002B,\n    WGPUTextureFormat_BC3RGBAUnormSrgb = 0x0000002C,\n    WGPUTextureFormat_BC4RUnorm = 0x0000002D,\n    WGPUTextureFormat_BC4RSnorm = 0x0000002E,\n    WGPUTextureFormat_BC5RGUnorm = 0x0000002F,\n    WGPUTextureFormat_BC5RGSnorm = 0x00000030,\n    WGPUTextureFormat_BC6HRGBUfloat = 0x00000031,\n    WGPUTextureFormat_BC6HRGBSfloat = 0x00000032,\n    WGPUTextureFormat_BC7RGBAUnorm = 0x00000033,\n    WGPUTextureFormat_BC7RGBAUnormSrgb = 0x00000034,\n    WGPUTextureFormat_Force32 = 0x7FFFFFFF\n} WGPUTextureFormat;\n\ntypedef enum WGPUTextureViewDimension {\n    WGPUTextureViewDimension_Undefined = 0x00000000,\n    WGPUTextureViewDimension_1D = 0x00000001,\n    WGPUTextureViewDimension_2D = 0x00000002,\n    WGPUTextureViewDimension_2DArray = 0x00000003,\n    WGPUTextureViewDimension_Cube = 0x00000004,\n    WGPUTextureViewDimension_CubeArray = 0x00000005,\n    WGPUTextureViewDimension_3D = 0x00000006,\n    WGPUTextureViewDimension_Force32 = 0x7FFFFFFF\n} WGPUTextureViewDimension;\n\ntypedef enum WGPUVertexFormat {\n    WGPUVertexFormat_UChar2 = 0x00000000,\n    WGPUVertexFormat_UChar4 = 0x00000001,\n    WGPUVertexFormat_Char2 = 0x00000002,\n    WGPUVertexFormat_Char4 = 0x00000003,\n    WGPUVertexFormat_UChar2Norm = 0x00000004,\n    WGPUVertexFormat_UChar4Norm = 0x00000005,\n    WGPUVertexFormat_Char2Norm = 0x00000006,\n    WGPUVertexFormat_Char4Norm = 0x00000007,\n    WGPUVertexFormat_UShort2 = 0x00000008,\n    WGPUVertexFormat_UShort4 = 0x00000009,\n    WGPUVertexFormat_Short2 = 0x0000000A,\n    WGPUVertexFormat_Short4 = 0x0000000B,\n    WGPUVertexFormat_UShort2Norm = 0x0000000C,\n    WGPUVertexFormat_UShort4Norm = 0x0000000D,\n    WGPUVertexFormat_Short2Norm = 0x0000000E,\n    WGPUVertexFormat_Short4Norm = 0x0000000F,\n    WGPUVertexFormat_Half2 = 0x00000010,\n    WGPUVertexFormat_Half4 = 0x00000011,\n    WGPUVertexFormat_Float = 0x00000012,\n    WGPUVertexFormat_Float2 = 0x00000013,\n    WGPUVertexFormat_Float3 = 0x00000014,\n    WGPUVertexFormat_Float4 = 0x00000015,\n    WGPUVertexFormat_UInt = 0x00000016,\n    WGPUVertexFormat_UInt2 = 0x00000017,\n    WGPUVertexFormat_UInt3 = 0x00000018,\n    WGPUVertexFormat_UInt4 = 0x00000019,\n    WGPUVertexFormat_Int = 0x0000001A,\n    WGPUVertexFormat_Int2 = 0x0000001B,\n    WGPUVertexFormat_Int3 = 0x0000001C,\n    WGPUVertexFormat_Int4 = 0x0000001D,\n    WGPUVertexFormat_Force32 = 0x7FFFFFFF\n} WGPUVertexFormat;\n\ntypedef enum WGPUBufferUsage {\n    WGPUBufferUsage_None = 0x00000000,\n    WGPUBufferUsage_MapRead = 0x00000001,\n    WGPUBufferUsage_MapWrite = 0x00000002,\n    WGPUBufferUsage_CopySrc = 0x00000004,\n    WGPUBufferUsage_CopyDst = 0x00000008,\n    WGPUBufferUsage_Index = 0x00000010,\n    WGPUBufferUsage_Vertex = 0x00000020,\n    WGPUBufferUsage_Uniform = 0x00000040,\n    WGPUBufferUsage_Storage = 0x00000080,\n    WGPUBufferUsage_Indirect = 0x00000100,\n    WGPUBufferUsage_Force32 = 0x7FFFFFFF\n} WGPUBufferUsage;\ntypedef WGPUFlags WGPUBufferUsageFlags;\n\ntypedef enum WGPUColorWriteMask {\n    WGPUColorWriteMask_None = 0x00000000,\n    WGPUColorWriteMask_Red = 0x00000001,\n    WGPUColorWriteMask_Green = 0x00000002,\n    WGPUColorWriteMask_Blue = 0x00000004,\n    WGPUColorWriteMask_Alpha = 0x00000008,\n    WGPUColorWriteMask_All = 0x0000000F,\n    WGPUColorWriteMask_Force32 = 0x7FFFFFFF\n} WGPUColorWriteMask;\ntypedef WGPUFlags WGPUColorWriteMaskFlags;\n\ntypedef enum WGPUShaderStage {\n    WGPUShaderStage_None = 0x00000000,\n    WGPUShaderStage_Vertex = 0x00000001,\n    WGPUShaderStage_Fragment = 0x00000002,\n    WGPUShaderStage_Compute = 0x00000004,\n    WGPUShaderStage_Force32 = 0x7FFFFFFF\n} WGPUShaderStage;\ntypedef WGPUFlags WGPUShaderStageFlags;\n\ntypedef enum WGPUTextureUsage {\n    WGPUTextureUsage_None = 0x00000000,\n    WGPUTextureUsage_CopySrc = 0x00000001,\n    WGPUTextureUsage_CopyDst = 0x00000002,\n    WGPUTextureUsage_Sampled = 0x00000004,\n    WGPUTextureUsage_Storage = 0x00000008,\n    WGPUTextureUsage_OutputAttachment = 0x00000010,\n    WGPUTextureUsage_Present = 0x00000020,\n    WGPUTextureUsage_Force32 = 0x7FFFFFFF\n} WGPUTextureUsage;\ntypedef WGPUFlags WGPUTextureUsageFlags;\n\n\ntypedef struct WGPUChainedStruct {\n    struct WGPUChainedStruct const * next;\n    WGPUSType sType;\n} WGPUChainedStruct;\n\ntypedef struct WGPUAdapterProperties {\n    WGPUChainedStruct const * nextInChain;\n    uint32_t deviceID;\n    uint32_t vendorID;\n    char const * name;\n    WGPUAdapterType adapterType;\n    WGPUBackendType backendType;\n} WGPUAdapterProperties;\n\ntypedef struct WGPUBindGroupBinding {\n    uint32_t binding;\n    WGPUBuffer buffer;\n    uint64_t offset;\n    uint64_t size;\n    WGPUSampler sampler;\n    WGPUTextureView textureView;\n} WGPUBindGroupBinding;\n\ntypedef struct WGPUBindGroupLayoutBinding {\n    uint32_t binding;\n    WGPUShaderStageFlags visibility;\n    WGPUBindingType type;\n    bool hasDynamicOffset;\n    bool multisampled;\n    WGPUTextureViewDimension textureDimension;\n    WGPUTextureComponentType textureComponentType;\n} WGPUBindGroupLayoutBinding;\n\ntypedef struct WGPUBlendDescriptor {\n    WGPUBlendOperation operation;\n    WGPUBlendFactor srcFactor;\n    WGPUBlendFactor dstFactor;\n} WGPUBlendDescriptor;\n\ntypedef struct WGPUBufferCopyView {\n    WGPUChainedStruct const * nextInChain;\n    WGPUBuffer buffer;\n    uint64_t offset;\n    uint32_t rowPitch;\n    uint32_t imageHeight;\n} WGPUBufferCopyView;\n\ntypedef struct WGPUBufferDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    WGPUBufferUsageFlags usage;\n    uint64_t size;\n} WGPUBufferDescriptor;\n\ntypedef struct WGPUColor {\n    float r;\n    float g;\n    float b;\n    float a;\n} WGPUColor;\n\ntypedef struct WGPUCommandBufferDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n} WGPUCommandBufferDescriptor;\n\ntypedef struct WGPUCommandEncoderDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n} WGPUCommandEncoderDescriptor;\n\ntypedef struct WGPUComputePassDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n} WGPUComputePassDescriptor;\n\ntypedef struct WGPUCreateBufferMappedResult {\n    WGPUBuffer buffer;\n    uint64_t dataLength;\n    void * data;\n} WGPUCreateBufferMappedResult;\n\ntypedef struct WGPUDeviceProperties {\n    bool textureCompressionBC;\n} WGPUDeviceProperties;\n\ntypedef struct WGPUExtent3D {\n    uint32_t width;\n    uint32_t height;\n    uint32_t depth;\n} WGPUExtent3D;\n\ntypedef struct WGPUFenceDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    uint64_t initialValue;\n} WGPUFenceDescriptor;\n\ntypedef struct WGPUInstanceDescriptor {\n    WGPUChainedStruct const * nextInChain;\n} WGPUInstanceDescriptor;\n\ntypedef struct WGPUOrigin3D {\n    uint32_t x;\n    uint32_t y;\n    uint32_t z;\n} WGPUOrigin3D;\n\ntypedef struct WGPUPipelineLayoutDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    uint32_t bindGroupLayoutCount;\n    WGPUBindGroupLayout const * bindGroupLayouts;\n} WGPUPipelineLayoutDescriptor;\n\ntypedef struct WGPUProgrammableStageDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUShaderModule module;\n    char const * entryPoint;\n} WGPUProgrammableStageDescriptor;\n\ntypedef struct WGPURasterizationStateDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUFrontFace frontFace;\n    WGPUCullMode cullMode;\n    int32_t depthBias;\n    float depthBiasSlopeScale;\n    float depthBiasClamp;\n} WGPURasterizationStateDescriptor;\n\ntypedef struct WGPURenderBundleDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n} WGPURenderBundleDescriptor;\n\ntypedef struct WGPURenderBundleEncoderDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    uint32_t colorFormatsCount;\n    WGPUTextureFormat const * colorFormats;\n    WGPUTextureFormat depthStencilFormat;\n    uint32_t sampleCount;\n} WGPURenderBundleEncoderDescriptor;\n\ntypedef struct WGPURenderPassDepthStencilAttachmentDescriptor {\n    WGPUTextureView attachment;\n    WGPULoadOp depthLoadOp;\n    WGPUStoreOp depthStoreOp;\n    float clearDepth;\n    WGPULoadOp stencilLoadOp;\n    WGPUStoreOp stencilStoreOp;\n    uint32_t clearStencil;\n} WGPURenderPassDepthStencilAttachmentDescriptor;\n\ntypedef struct WGPUSamplerDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    WGPUAddressMode addressModeU;\n    WGPUAddressMode addressModeV;\n    WGPUAddressMode addressModeW;\n    WGPUFilterMode magFilter;\n    WGPUFilterMode minFilter;\n    WGPUFilterMode mipmapFilter;\n    float lodMinClamp;\n    float lodMaxClamp;\n    WGPUCompareFunction compare;\n} WGPUSamplerDescriptor;\n\ntypedef struct WGPUShaderModuleDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    uint32_t codeSize;\n    uint32_t const * code;\n} WGPUShaderModuleDescriptor;\n\ntypedef struct WGPUStencilStateFaceDescriptor {\n    WGPUCompareFunction compare;\n    WGPUStencilOperation failOp;\n    WGPUStencilOperation depthFailOp;\n    WGPUStencilOperation passOp;\n} WGPUStencilStateFaceDescriptor;\n\ntypedef struct WGPUSurfaceDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n} WGPUSurfaceDescriptor;\n\ntypedef struct WGPUSurfaceDescriptorFromHTMLCanvasId {\n    WGPUChainedStruct chain;\n    char const * id;\n} WGPUSurfaceDescriptorFromHTMLCanvasId;\n\ntypedef struct WGPUSurfaceDescriptorFromMetalLayer {\n    WGPUChainedStruct chain;\n    void * layer;\n} WGPUSurfaceDescriptorFromMetalLayer;\n\ntypedef struct WGPUSurfaceDescriptorFromWindowsHWND {\n    WGPUChainedStruct chain;\n    void * hinstance;\n    void * hwnd;\n} WGPUSurfaceDescriptorFromWindowsHWND;\n\ntypedef struct WGPUSurfaceDescriptorFromXlib {\n    WGPUChainedStruct chain;\n    void * display;\n    uint32_t window;\n} WGPUSurfaceDescriptorFromXlib;\n\ntypedef struct WGPUSwapChainDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    WGPUTextureUsageFlags usage;\n    WGPUTextureFormat format;\n    uint32_t width;\n    uint32_t height;\n    WGPUPresentMode presentMode;\n    uint64_t implementation;\n} WGPUSwapChainDescriptor;\n\ntypedef struct WGPUTextureViewDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    WGPUTextureFormat format;\n    WGPUTextureViewDimension dimension;\n    uint32_t baseMipLevel;\n    uint32_t mipLevelCount;\n    uint32_t baseArrayLayer;\n    uint32_t arrayLayerCount;\n    WGPUTextureAspect aspect;\n} WGPUTextureViewDescriptor;\n\ntypedef struct WGPUVertexAttributeDescriptor {\n    WGPUVertexFormat format;\n    uint64_t offset;\n    uint32_t shaderLocation;\n} WGPUVertexAttributeDescriptor;\n\ntypedef struct WGPUBindGroupDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    WGPUBindGroupLayout layout;\n    uint32_t bindingCount;\n    WGPUBindGroupBinding const * bindings;\n} WGPUBindGroupDescriptor;\n\ntypedef struct WGPUBindGroupLayoutDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    uint32_t bindingCount;\n    WGPUBindGroupLayoutBinding const * bindings;\n} WGPUBindGroupLayoutDescriptor;\n\ntypedef struct WGPUColorStateDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTextureFormat format;\n    WGPUBlendDescriptor alphaBlend;\n    WGPUBlendDescriptor colorBlend;\n    WGPUColorWriteMaskFlags writeMask;\n} WGPUColorStateDescriptor;\n\ntypedef struct WGPUComputePipelineDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    WGPUPipelineLayout layout;\n    WGPUProgrammableStageDescriptor computeStage;\n} WGPUComputePipelineDescriptor;\n\ntypedef struct WGPUDepthStencilStateDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTextureFormat format;\n    bool depthWriteEnabled;\n    WGPUCompareFunction depthCompare;\n    WGPUStencilStateFaceDescriptor stencilFront;\n    WGPUStencilStateFaceDescriptor stencilBack;\n    uint32_t stencilReadMask;\n    uint32_t stencilWriteMask;\n} WGPUDepthStencilStateDescriptor;\n\ntypedef struct WGPURenderPassColorAttachmentDescriptor {\n    WGPUTextureView attachment;\n    WGPUTextureView resolveTarget;\n    WGPULoadOp loadOp;\n    WGPUStoreOp storeOp;\n    WGPUColor clearColor;\n} WGPURenderPassColorAttachmentDescriptor;\n\ntypedef struct WGPUTextureCopyView {\n    WGPUChainedStruct const * nextInChain;\n    WGPUTexture texture;\n    uint32_t mipLevel;\n    uint32_t arrayLayer;\n    WGPUOrigin3D origin;\n} WGPUTextureCopyView;\n\ntypedef struct WGPUTextureDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    WGPUTextureUsageFlags usage;\n    WGPUTextureDimension dimension;\n    WGPUExtent3D size;\n    uint32_t arrayLayerCount;\n    WGPUTextureFormat format;\n    uint32_t mipLevelCount;\n    uint32_t sampleCount;\n} WGPUTextureDescriptor;\n\ntypedef struct WGPUVertexBufferLayoutDescriptor {\n    uint64_t arrayStride;\n    WGPUInputStepMode stepMode;\n    uint32_t attributeCount;\n    WGPUVertexAttributeDescriptor const * attributes;\n} WGPUVertexBufferLayoutDescriptor;\n\ntypedef struct WGPURenderPassDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    uint32_t colorAttachmentCount;\n    WGPURenderPassColorAttachmentDescriptor const * colorAttachments;\n    WGPURenderPassDepthStencilAttachmentDescriptor const * depthStencilAttachment;\n} WGPURenderPassDescriptor;\n\ntypedef struct WGPUVertexStateDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    WGPUIndexFormat indexFormat;\n    uint32_t vertexBufferCount;\n    WGPUVertexBufferLayoutDescriptor const * vertexBuffers;\n} WGPUVertexStateDescriptor;\n\ntypedef struct WGPURenderPipelineDescriptor {\n    WGPUChainedStruct const * nextInChain;\n    char const * label;\n    WGPUPipelineLayout layout;\n    WGPUProgrammableStageDescriptor vertexStage;\n    WGPUProgrammableStageDescriptor const * fragmentStage;\n    WGPUVertexStateDescriptor const * vertexState;\n    WGPUPrimitiveTopology primitiveTopology;\n    WGPURasterizationStateDescriptor const * rasterizationState;\n    uint32_t sampleCount;\n    WGPUDepthStencilStateDescriptor const * depthStencilState;\n    uint32_t colorStateCount;\n    WGPUColorStateDescriptor const * colorStates;\n    uint32_t sampleMask;\n    bool alphaToCoverageEnabled;\n} WGPURenderPipelineDescriptor;\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef void (*WGPUBufferCreateMappedCallback)(WGPUBufferMapAsyncStatus status, WGPUCreateBufferMappedResult result, void * userdata);\ntypedef void (*WGPUBufferMapReadCallback)(WGPUBufferMapAsyncStatus status, void const * data, uint64_t dataLength, void * userdata);\ntypedef void (*WGPUBufferMapWriteCallback)(WGPUBufferMapAsyncStatus status, void * data, uint64_t dataLength, void * userdata);\ntypedef void (*WGPUDeviceLostCallback)(char const * message, void * userdata);\ntypedef void (*WGPUErrorCallback)(WGPUErrorType type, char const * message, void * userdata);\ntypedef void (*WGPUFenceOnCompletionCallback)(WGPUFenceCompletionStatus status, void * userdata);\n\ntypedef void (*WGPUProc)();\n\n#if !defined(WGPU_SKIP_PROCS)\n\ntypedef WGPUInstance (*WGPUProcCreateInstance)(WGPUInstanceDescriptor const * descriptor);\ntypedef WGPUProc (*WGPUProcGetProcAddress)(WGPUDevice device, char const * procName);\n\n// Procs of BindGroup\ntypedef void (*WGPUProcBindGroupReference)(WGPUBindGroup bindGroup);\ntypedef void (*WGPUProcBindGroupRelease)(WGPUBindGroup bindGroup);\n\n// Procs of BindGroupLayout\ntypedef void (*WGPUProcBindGroupLayoutReference)(WGPUBindGroupLayout bindGroupLayout);\ntypedef void (*WGPUProcBindGroupLayoutRelease)(WGPUBindGroupLayout bindGroupLayout);\n\n// Procs of Buffer\ntypedef void (*WGPUProcBufferDestroy)(WGPUBuffer buffer);\ntypedef void (*WGPUProcBufferMapReadAsync)(WGPUBuffer buffer, WGPUBufferMapReadCallback callback, void * userdata);\ntypedef void (*WGPUProcBufferMapWriteAsync)(WGPUBuffer buffer, WGPUBufferMapWriteCallback callback, void * userdata);\ntypedef void (*WGPUProcBufferSetSubData)(WGPUBuffer buffer, uint64_t start, uint64_t count, void const * data);\ntypedef void (*WGPUProcBufferUnmap)(WGPUBuffer buffer);\ntypedef void (*WGPUProcBufferReference)(WGPUBuffer buffer);\ntypedef void (*WGPUProcBufferRelease)(WGPUBuffer buffer);\n\n// Procs of CommandBuffer\ntypedef void (*WGPUProcCommandBufferReference)(WGPUCommandBuffer commandBuffer);\ntypedef void (*WGPUProcCommandBufferRelease)(WGPUCommandBuffer commandBuffer);\n\n// Procs of CommandEncoder\ntypedef WGPUComputePassEncoder (*WGPUProcCommandEncoderBeginComputePass)(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor);\ntypedef WGPURenderPassEncoder (*WGPUProcCommandEncoderBeginRenderPass)(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor);\ntypedef void (*WGPUProcCommandEncoderCopyBufferToBuffer)(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size);\ntypedef void (*WGPUProcCommandEncoderCopyBufferToTexture)(WGPUCommandEncoder commandEncoder, WGPUBufferCopyView const * source, WGPUTextureCopyView const * destination, WGPUExtent3D const * copySize);\ntypedef void (*WGPUProcCommandEncoderCopyTextureToBuffer)(WGPUCommandEncoder commandEncoder, WGPUTextureCopyView const * source, WGPUBufferCopyView const * destination, WGPUExtent3D const * copySize);\ntypedef void (*WGPUProcCommandEncoderCopyTextureToTexture)(WGPUCommandEncoder commandEncoder, WGPUTextureCopyView const * source, WGPUTextureCopyView const * destination, WGPUExtent3D const * copySize);\ntypedef WGPUCommandBuffer (*WGPUProcCommandEncoderFinish)(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor);\ntypedef void (*WGPUProcCommandEncoderInsertDebugMarker)(WGPUCommandEncoder commandEncoder, char const * groupLabel);\ntypedef void (*WGPUProcCommandEncoderPopDebugGroup)(WGPUCommandEncoder commandEncoder);\ntypedef void (*WGPUProcCommandEncoderPushDebugGroup)(WGPUCommandEncoder commandEncoder, char const * groupLabel);\ntypedef void (*WGPUProcCommandEncoderReference)(WGPUCommandEncoder commandEncoder);\ntypedef void (*WGPUProcCommandEncoderRelease)(WGPUCommandEncoder commandEncoder);\n\n// Procs of ComputePassEncoder\ntypedef void (*WGPUProcComputePassEncoderDispatch)(WGPUComputePassEncoder computePassEncoder, uint32_t x, uint32_t y, uint32_t z);\ntypedef void (*WGPUProcComputePassEncoderDispatchIndirect)(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef void (*WGPUProcComputePassEncoderEndPass)(WGPUComputePassEncoder computePassEncoder);\ntypedef void (*WGPUProcComputePassEncoderInsertDebugMarker)(WGPUComputePassEncoder computePassEncoder, char const * groupLabel);\ntypedef void (*WGPUProcComputePassEncoderPopDebugGroup)(WGPUComputePassEncoder computePassEncoder);\ntypedef void (*WGPUProcComputePassEncoderPushDebugGroup)(WGPUComputePassEncoder computePassEncoder, char const * groupLabel);\ntypedef void (*WGPUProcComputePassEncoderSetBindGroup)(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\ntypedef void (*WGPUProcComputePassEncoderSetPipeline)(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline);\ntypedef void (*WGPUProcComputePassEncoderReference)(WGPUComputePassEncoder computePassEncoder);\ntypedef void (*WGPUProcComputePassEncoderRelease)(WGPUComputePassEncoder computePassEncoder);\n\n// Procs of ComputePipeline\ntypedef WGPUBindGroupLayout (*WGPUProcComputePipelineGetBindGroupLayout)(WGPUComputePipeline computePipeline, uint32_t group);\ntypedef void (*WGPUProcComputePipelineReference)(WGPUComputePipeline computePipeline);\ntypedef void (*WGPUProcComputePipelineRelease)(WGPUComputePipeline computePipeline);\n\n// Procs of Device\ntypedef WGPUBindGroup (*WGPUProcDeviceCreateBindGroup)(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor);\ntypedef WGPUBindGroupLayout (*WGPUProcDeviceCreateBindGroupLayout)(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor);\ntypedef WGPUBuffer (*WGPUProcDeviceCreateBuffer)(WGPUDevice device, WGPUBufferDescriptor const * descriptor);\ntypedef WGPUCreateBufferMappedResult (*WGPUProcDeviceCreateBufferMapped)(WGPUDevice device, WGPUBufferDescriptor const * descriptor);\ntypedef void (*WGPUProcDeviceCreateBufferMappedAsync)(WGPUDevice device, WGPUBufferDescriptor const * descriptor, WGPUBufferCreateMappedCallback callback, void * userdata);\ntypedef WGPUCommandEncoder (*WGPUProcDeviceCreateCommandEncoder)(WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor);\ntypedef WGPUComputePipeline (*WGPUProcDeviceCreateComputePipeline)(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor);\ntypedef WGPUPipelineLayout (*WGPUProcDeviceCreatePipelineLayout)(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor);\ntypedef WGPUQueue (*WGPUProcDeviceCreateQueue)(WGPUDevice device);\ntypedef WGPURenderBundleEncoder (*WGPUProcDeviceCreateRenderBundleEncoder)(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor);\ntypedef WGPURenderPipeline (*WGPUProcDeviceCreateRenderPipeline)(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor);\ntypedef WGPUSampler (*WGPUProcDeviceCreateSampler)(WGPUDevice device, WGPUSamplerDescriptor const * descriptor);\ntypedef WGPUShaderModule (*WGPUProcDeviceCreateShaderModule)(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor);\ntypedef WGPUSwapChain (*WGPUProcDeviceCreateSwapChain)(WGPUDevice device, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor);\ntypedef WGPUTexture (*WGPUProcDeviceCreateTexture)(WGPUDevice device, WGPUTextureDescriptor const * descriptor);\ntypedef void (*WGPUProcDeviceInjectError)(WGPUDevice device, WGPUErrorType type, char const * message);\ntypedef void (*WGPUProcDeviceLoseForTesting)(WGPUDevice device);\ntypedef bool (*WGPUProcDevicePopErrorScope)(WGPUDevice device, WGPUErrorCallback callback, void * userdata);\ntypedef void (*WGPUProcDevicePushErrorScope)(WGPUDevice device, WGPUErrorFilter filter);\ntypedef void (*WGPUProcDeviceSetDeviceLostCallback)(WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata);\ntypedef void (*WGPUProcDeviceSetUncapturedErrorCallback)(WGPUDevice device, WGPUErrorCallback callback, void * userdata);\ntypedef void (*WGPUProcDeviceTick)(WGPUDevice device);\ntypedef void (*WGPUProcDeviceReference)(WGPUDevice device);\ntypedef void (*WGPUProcDeviceRelease)(WGPUDevice device);\n\n// Procs of Fence\ntypedef uint64_t (*WGPUProcFenceGetCompletedValue)(WGPUFence fence);\ntypedef void (*WGPUProcFenceOnCompletion)(WGPUFence fence, uint64_t value, WGPUFenceOnCompletionCallback callback, void * userdata);\ntypedef void (*WGPUProcFenceReference)(WGPUFence fence);\ntypedef void (*WGPUProcFenceRelease)(WGPUFence fence);\n\n// Procs of Instance\ntypedef WGPUSurface (*WGPUProcInstanceCreateSurface)(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor);\ntypedef void (*WGPUProcInstanceReference)(WGPUInstance instance);\ntypedef void (*WGPUProcInstanceRelease)(WGPUInstance instance);\n\n// Procs of PipelineLayout\ntypedef void (*WGPUProcPipelineLayoutReference)(WGPUPipelineLayout pipelineLayout);\ntypedef void (*WGPUProcPipelineLayoutRelease)(WGPUPipelineLayout pipelineLayout);\n\n// Procs of Queue\ntypedef WGPUFence (*WGPUProcQueueCreateFence)(WGPUQueue queue, WGPUFenceDescriptor const * descriptor);\ntypedef void (*WGPUProcQueueSignal)(WGPUQueue queue, WGPUFence fence, uint64_t signalValue);\ntypedef void (*WGPUProcQueueSubmit)(WGPUQueue queue, uint32_t commandCount, WGPUCommandBuffer const * commands);\ntypedef void (*WGPUProcQueueReference)(WGPUQueue queue);\ntypedef void (*WGPUProcQueueRelease)(WGPUQueue queue);\n\n// Procs of RenderBundle\ntypedef void (*WGPUProcRenderBundleReference)(WGPURenderBundle renderBundle);\ntypedef void (*WGPUProcRenderBundleRelease)(WGPURenderBundle renderBundle);\n\n// Procs of RenderBundleEncoder\ntypedef void (*WGPUProcRenderBundleEncoderDraw)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\ntypedef void (*WGPUProcRenderBundleEncoderDrawIndexed)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\ntypedef void (*WGPUProcRenderBundleEncoderDrawIndexedIndirect)(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef void (*WGPUProcRenderBundleEncoderDrawIndirect)(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef WGPURenderBundle (*WGPUProcRenderBundleEncoderFinish)(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor);\ntypedef void (*WGPUProcRenderBundleEncoderInsertDebugMarker)(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel);\ntypedef void (*WGPUProcRenderBundleEncoderPopDebugGroup)(WGPURenderBundleEncoder renderBundleEncoder);\ntypedef void (*WGPUProcRenderBundleEncoderPushDebugGroup)(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel);\ntypedef void (*WGPUProcRenderBundleEncoderSetBindGroup)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\ntypedef void (*WGPUProcRenderBundleEncoderSetIndexBuffer)(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, uint64_t offset);\ntypedef void (*WGPUProcRenderBundleEncoderSetPipeline)(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline);\ntypedef void (*WGPUProcRenderBundleEncoderSetVertexBuffer)(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset);\ntypedef void (*WGPUProcRenderBundleEncoderReference)(WGPURenderBundleEncoder renderBundleEncoder);\ntypedef void (*WGPUProcRenderBundleEncoderRelease)(WGPURenderBundleEncoder renderBundleEncoder);\n\n// Procs of RenderPassEncoder\ntypedef void (*WGPUProcRenderPassEncoderDraw)(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\ntypedef void (*WGPUProcRenderPassEncoderDrawIndexed)(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\ntypedef void (*WGPUProcRenderPassEncoderDrawIndexedIndirect)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef void (*WGPUProcRenderPassEncoderDrawIndirect)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\ntypedef void (*WGPUProcRenderPassEncoderEndPass)(WGPURenderPassEncoder renderPassEncoder);\ntypedef void (*WGPUProcRenderPassEncoderExecuteBundles)(WGPURenderPassEncoder renderPassEncoder, uint32_t bundlesCount, WGPURenderBundle const * bundles);\ntypedef void (*WGPUProcRenderPassEncoderInsertDebugMarker)(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel);\ntypedef void (*WGPUProcRenderPassEncoderPopDebugGroup)(WGPURenderPassEncoder renderPassEncoder);\ntypedef void (*WGPUProcRenderPassEncoderPushDebugGroup)(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel);\ntypedef void (*WGPUProcRenderPassEncoderSetBindGroup)(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\ntypedef void (*WGPUProcRenderPassEncoderSetBlendColor)(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color);\ntypedef void (*WGPUProcRenderPassEncoderSetIndexBuffer)(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, uint64_t offset);\ntypedef void (*WGPUProcRenderPassEncoderSetPipeline)(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline);\ntypedef void (*WGPUProcRenderPassEncoderSetScissorRect)(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height);\ntypedef void (*WGPUProcRenderPassEncoderSetStencilReference)(WGPURenderPassEncoder renderPassEncoder, uint32_t reference);\ntypedef void (*WGPUProcRenderPassEncoderSetVertexBuffer)(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset);\ntypedef void (*WGPUProcRenderPassEncoderSetViewport)(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);\ntypedef void (*WGPUProcRenderPassEncoderReference)(WGPURenderPassEncoder renderPassEncoder);\ntypedef void (*WGPUProcRenderPassEncoderRelease)(WGPURenderPassEncoder renderPassEncoder);\n\n// Procs of RenderPipeline\ntypedef WGPUBindGroupLayout (*WGPUProcRenderPipelineGetBindGroupLayout)(WGPURenderPipeline renderPipeline, uint32_t group);\ntypedef void (*WGPUProcRenderPipelineReference)(WGPURenderPipeline renderPipeline);\ntypedef void (*WGPUProcRenderPipelineRelease)(WGPURenderPipeline renderPipeline);\n\n// Procs of Sampler\ntypedef void (*WGPUProcSamplerReference)(WGPUSampler sampler);\ntypedef void (*WGPUProcSamplerRelease)(WGPUSampler sampler);\n\n// Procs of ShaderModule\ntypedef void (*WGPUProcShaderModuleReference)(WGPUShaderModule shaderModule);\ntypedef void (*WGPUProcShaderModuleRelease)(WGPUShaderModule shaderModule);\n\n// Procs of Surface\ntypedef void (*WGPUProcSurfaceReference)(WGPUSurface surface);\ntypedef void (*WGPUProcSurfaceRelease)(WGPUSurface surface);\n\n// Procs of SwapChain\ntypedef void (*WGPUProcSwapChainConfigure)(WGPUSwapChain swapChain, WGPUTextureFormat format, WGPUTextureUsageFlags allowedUsage, uint32_t width, uint32_t height);\ntypedef WGPUTextureView (*WGPUProcSwapChainGetCurrentTextureView)(WGPUSwapChain swapChain);\ntypedef void (*WGPUProcSwapChainPresent)(WGPUSwapChain swapChain);\ntypedef void (*WGPUProcSwapChainReference)(WGPUSwapChain swapChain);\ntypedef void (*WGPUProcSwapChainRelease)(WGPUSwapChain swapChain);\n\n// Procs of Texture\ntypedef WGPUTextureView (*WGPUProcTextureCreateView)(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor);\ntypedef void (*WGPUProcTextureDestroy)(WGPUTexture texture);\ntypedef void (*WGPUProcTextureReference)(WGPUTexture texture);\ntypedef void (*WGPUProcTextureRelease)(WGPUTexture texture);\n\n// Procs of TextureView\ntypedef void (*WGPUProcTextureViewReference)(WGPUTextureView textureView);\ntypedef void (*WGPUProcTextureViewRelease)(WGPUTextureView textureView);\n\n#endif  // !defined(WGPU_SKIP_PROCS)\n\n#if !defined(WGPU_SKIP_DECLARATIONS)\n\nWGPU_EXPORT WGPUInstance wgpuCreateInstance(WGPUInstanceDescriptor const * descriptor);\nWGPU_EXPORT WGPUProc wgpuGetProcAddress(WGPUDevice device, char const * procName);\n\n// Methods of BindGroup\nWGPU_EXPORT void wgpuBindGroupReference(WGPUBindGroup bindGroup);\nWGPU_EXPORT void wgpuBindGroupRelease(WGPUBindGroup bindGroup);\n\n// Methods of BindGroupLayout\nWGPU_EXPORT void wgpuBindGroupLayoutReference(WGPUBindGroupLayout bindGroupLayout);\nWGPU_EXPORT void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout);\n\n// Methods of Buffer\nWGPU_EXPORT void wgpuBufferDestroy(WGPUBuffer buffer);\nWGPU_EXPORT void wgpuBufferMapReadAsync(WGPUBuffer buffer, WGPUBufferMapReadCallback callback, void * userdata);\nWGPU_EXPORT void wgpuBufferMapWriteAsync(WGPUBuffer buffer, WGPUBufferMapWriteCallback callback, void * userdata);\nWGPU_EXPORT void wgpuBufferSetSubData(WGPUBuffer buffer, uint64_t start, uint64_t count, void const * data);\nWGPU_EXPORT void wgpuBufferUnmap(WGPUBuffer buffer);\nWGPU_EXPORT void wgpuBufferReference(WGPUBuffer buffer);\nWGPU_EXPORT void wgpuBufferRelease(WGPUBuffer buffer);\n\n// Methods of CommandBuffer\nWGPU_EXPORT void wgpuCommandBufferReference(WGPUCommandBuffer commandBuffer);\nWGPU_EXPORT void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer);\n\n// Methods of CommandEncoder\nWGPU_EXPORT WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor);\nWGPU_EXPORT WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor);\nWGPU_EXPORT void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size);\nWGPU_EXPORT void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUBufferCopyView const * source, WGPUTextureCopyView const * destination, WGPUExtent3D const * copySize);\nWGPU_EXPORT void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUTextureCopyView const * source, WGPUBufferCopyView const * destination, WGPUExtent3D const * copySize);\nWGPU_EXPORT void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUTextureCopyView const * source, WGPUTextureCopyView const * destination, WGPUExtent3D const * copySize);\nWGPU_EXPORT WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor);\nWGPU_EXPORT void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder);\nWGPU_EXPORT void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuCommandEncoderReference(WGPUCommandEncoder commandEncoder);\nWGPU_EXPORT void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder);\n\n// Methods of ComputePassEncoder\nWGPU_EXPORT void wgpuComputePassEncoderDispatch(WGPUComputePassEncoder computePassEncoder, uint32_t x, uint32_t y, uint32_t z);\nWGPU_EXPORT void wgpuComputePassEncoderDispatchIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT void wgpuComputePassEncoderEndPass(WGPUComputePassEncoder computePassEncoder);\nWGPU_EXPORT void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder);\nWGPU_EXPORT void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\nWGPU_EXPORT void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline);\nWGPU_EXPORT void wgpuComputePassEncoderReference(WGPUComputePassEncoder computePassEncoder);\nWGPU_EXPORT void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder);\n\n// Methods of ComputePipeline\nWGPU_EXPORT WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t group);\nWGPU_EXPORT void wgpuComputePipelineReference(WGPUComputePipeline computePipeline);\nWGPU_EXPORT void wgpuComputePipelineRelease(WGPUComputePipeline computePipeline);\n\n// Methods of Device\nWGPU_EXPORT WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor);\nWGPU_EXPORT WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor);\nWGPU_EXPORT WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor);\nWGPU_EXPORT WGPUCreateBufferMappedResult wgpuDeviceCreateBufferMapped(WGPUDevice device, WGPUBufferDescriptor const * descriptor);\nWGPU_EXPORT void wgpuDeviceCreateBufferMappedAsync(WGPUDevice device, WGPUBufferDescriptor const * descriptor, WGPUBufferCreateMappedCallback callback, void * userdata);\nWGPU_EXPORT WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor);\nWGPU_EXPORT WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor);\nWGPU_EXPORT WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor);\nWGPU_EXPORT WGPUQueue wgpuDeviceCreateQueue(WGPUDevice device);\nWGPU_EXPORT WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor);\nWGPU_EXPORT WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor);\nWGPU_EXPORT WGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, WGPUSamplerDescriptor const * descriptor);\nWGPU_EXPORT WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor);\nWGPU_EXPORT WGPUSwapChain wgpuDeviceCreateSwapChain(WGPUDevice device, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor);\nWGPU_EXPORT WGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor);\nWGPU_EXPORT void wgpuDeviceInjectError(WGPUDevice device, WGPUErrorType type, char const * message);\nWGPU_EXPORT void wgpuDeviceLoseForTesting(WGPUDevice device);\nWGPU_EXPORT bool wgpuDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback callback, void * userdata);\nWGPU_EXPORT void wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter);\nWGPU_EXPORT void wgpuDeviceSetDeviceLostCallback(WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata);\nWGPU_EXPORT void wgpuDeviceSetUncapturedErrorCallback(WGPUDevice device, WGPUErrorCallback callback, void * userdata);\nWGPU_EXPORT void wgpuDeviceTick(WGPUDevice device);\nWGPU_EXPORT void wgpuDeviceReference(WGPUDevice device);\nWGPU_EXPORT void wgpuDeviceRelease(WGPUDevice device);\n\n// Methods of Fence\nWGPU_EXPORT uint64_t wgpuFenceGetCompletedValue(WGPUFence fence);\nWGPU_EXPORT void wgpuFenceOnCompletion(WGPUFence fence, uint64_t value, WGPUFenceOnCompletionCallback callback, void * userdata);\nWGPU_EXPORT void wgpuFenceReference(WGPUFence fence);\nWGPU_EXPORT void wgpuFenceRelease(WGPUFence fence);\n\n// Methods of Instance\nWGPU_EXPORT WGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor);\nWGPU_EXPORT void wgpuInstanceReference(WGPUInstance instance);\nWGPU_EXPORT void wgpuInstanceRelease(WGPUInstance instance);\n\n// Methods of PipelineLayout\nWGPU_EXPORT void wgpuPipelineLayoutReference(WGPUPipelineLayout pipelineLayout);\nWGPU_EXPORT void wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout);\n\n// Methods of Queue\nWGPU_EXPORT WGPUFence wgpuQueueCreateFence(WGPUQueue queue, WGPUFenceDescriptor const * descriptor);\nWGPU_EXPORT void wgpuQueueSignal(WGPUQueue queue, WGPUFence fence, uint64_t signalValue);\nWGPU_EXPORT void wgpuQueueSubmit(WGPUQueue queue, uint32_t commandCount, WGPUCommandBuffer const * commands);\nWGPU_EXPORT void wgpuQueueReference(WGPUQueue queue);\nWGPU_EXPORT void wgpuQueueRelease(WGPUQueue queue);\n\n// Methods of RenderBundle\nWGPU_EXPORT void wgpuRenderBundleReference(WGPURenderBundle renderBundle);\nWGPU_EXPORT void wgpuRenderBundleRelease(WGPURenderBundle renderBundle);\n\n// Methods of RenderBundleEncoder\nWGPU_EXPORT void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\nWGPU_EXPORT void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\nWGPU_EXPORT void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor);\nWGPU_EXPORT void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder);\nWGPU_EXPORT void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\nWGPU_EXPORT void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, uint64_t offset);\nWGPU_EXPORT void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline);\nWGPU_EXPORT void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset);\nWGPU_EXPORT void wgpuRenderBundleEncoderReference(WGPURenderBundleEncoder renderBundleEncoder);\nWGPU_EXPORT void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder);\n\n// Methods of RenderPassEncoder\nWGPU_EXPORT void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\nWGPU_EXPORT void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\nWGPU_EXPORT void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nWGPU_EXPORT void wgpuRenderPassEncoderEndPass(WGPURenderPassEncoder renderPassEncoder);\nWGPU_EXPORT void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, uint32_t bundlesCount, WGPURenderBundle const * bundles);\nWGPU_EXPORT void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder);\nWGPU_EXPORT void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel);\nWGPU_EXPORT void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\nWGPU_EXPORT void wgpuRenderPassEncoderSetBlendColor(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color);\nWGPU_EXPORT void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, uint64_t offset);\nWGPU_EXPORT void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline);\nWGPU_EXPORT void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height);\nWGPU_EXPORT void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference);\nWGPU_EXPORT void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset);\nWGPU_EXPORT void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);\nWGPU_EXPORT void wgpuRenderPassEncoderReference(WGPURenderPassEncoder renderPassEncoder);\nWGPU_EXPORT void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder);\n\n// Methods of RenderPipeline\nWGPU_EXPORT WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t group);\nWGPU_EXPORT void wgpuRenderPipelineReference(WGPURenderPipeline renderPipeline);\nWGPU_EXPORT void wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline);\n\n// Methods of Sampler\nWGPU_EXPORT void wgpuSamplerReference(WGPUSampler sampler);\nWGPU_EXPORT void wgpuSamplerRelease(WGPUSampler sampler);\n\n// Methods of ShaderModule\nWGPU_EXPORT void wgpuShaderModuleReference(WGPUShaderModule shaderModule);\nWGPU_EXPORT void wgpuShaderModuleRelease(WGPUShaderModule shaderModule);\n\n// Methods of Surface\nWGPU_EXPORT void wgpuSurfaceReference(WGPUSurface surface);\nWGPU_EXPORT void wgpuSurfaceRelease(WGPUSurface surface);\n\n// Methods of SwapChain\nWGPU_EXPORT void wgpuSwapChainConfigure(WGPUSwapChain swapChain, WGPUTextureFormat format, WGPUTextureUsageFlags allowedUsage, uint32_t width, uint32_t height);\nWGPU_EXPORT WGPUTextureView wgpuSwapChainGetCurrentTextureView(WGPUSwapChain swapChain);\nWGPU_EXPORT void wgpuSwapChainPresent(WGPUSwapChain swapChain);\nWGPU_EXPORT void wgpuSwapChainReference(WGPUSwapChain swapChain);\nWGPU_EXPORT void wgpuSwapChainRelease(WGPUSwapChain swapChain);\n\n// Methods of Texture\nWGPU_EXPORT WGPUTextureView wgpuTextureCreateView(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor);\nWGPU_EXPORT void wgpuTextureDestroy(WGPUTexture texture);\nWGPU_EXPORT void wgpuTextureReference(WGPUTexture texture);\nWGPU_EXPORT void wgpuTextureRelease(WGPUTexture texture);\n\n// Methods of TextureView\nWGPU_EXPORT void wgpuTextureViewReference(WGPUTextureView textureView);\nWGPU_EXPORT void wgpuTextureViewRelease(WGPUTextureView textureView);\n\n#endif  // !defined(WGPU_SKIP_DECLARATIONS)\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#endif // WEBGPU_H_\n", "src/include/dawn/dawn_proc_table.h": "\n#ifndef DAWN_DAWN_PROC_TABLE_H_\n#define DAWN_DAWN_PROC_TABLE_H_\n\n#include \"dawn/webgpu.h\"\n\ntypedef struct DawnProcTable {\n    WGPUProcGetProcAddress getProcAddress;\n    WGPUProcCreateInstance createInstance;\n\n    WGPUProcBindGroupReference bindGroupReference;\n    WGPUProcBindGroupRelease bindGroupRelease;\n\n    WGPUProcBindGroupLayoutReference bindGroupLayoutReference;\n    WGPUProcBindGroupLayoutRelease bindGroupLayoutRelease;\n\n    WGPUProcBufferDestroy bufferDestroy;\n    WGPUProcBufferMapReadAsync bufferMapReadAsync;\n    WGPUProcBufferMapWriteAsync bufferMapWriteAsync;\n    WGPUProcBufferSetSubData bufferSetSubData;\n    WGPUProcBufferUnmap bufferUnmap;\n    WGPUProcBufferReference bufferReference;\n    WGPUProcBufferRelease bufferRelease;\n\n    WGPUProcCommandBufferReference commandBufferReference;\n    WGPUProcCommandBufferRelease commandBufferRelease;\n\n    WGPUProcCommandEncoderBeginComputePass commandEncoderBeginComputePass;\n    WGPUProcCommandEncoderBeginRenderPass commandEncoderBeginRenderPass;\n    WGPUProcCommandEncoderCopyBufferToBuffer commandEncoderCopyBufferToBuffer;\n    WGPUProcCommandEncoderCopyBufferToTexture commandEncoderCopyBufferToTexture;\n    WGPUProcCommandEncoderCopyTextureToBuffer commandEncoderCopyTextureToBuffer;\n    WGPUProcCommandEncoderCopyTextureToTexture commandEncoderCopyTextureToTexture;\n    WGPUProcCommandEncoderFinish commandEncoderFinish;\n    WGPUProcCommandEncoderInsertDebugMarker commandEncoderInsertDebugMarker;\n    WGPUProcCommandEncoderPopDebugGroup commandEncoderPopDebugGroup;\n    WGPUProcCommandEncoderPushDebugGroup commandEncoderPushDebugGroup;\n    WGPUProcCommandEncoderReference commandEncoderReference;\n    WGPUProcCommandEncoderRelease commandEncoderRelease;\n\n    WGPUProcComputePassEncoderDispatch computePassEncoderDispatch;\n    WGPUProcComputePassEncoderDispatchIndirect computePassEncoderDispatchIndirect;\n    WGPUProcComputePassEncoderEndPass computePassEncoderEndPass;\n    WGPUProcComputePassEncoderInsertDebugMarker computePassEncoderInsertDebugMarker;\n    WGPUProcComputePassEncoderPopDebugGroup computePassEncoderPopDebugGroup;\n    WGPUProcComputePassEncoderPushDebugGroup computePassEncoderPushDebugGroup;\n    WGPUProcComputePassEncoderSetBindGroup computePassEncoderSetBindGroup;\n    WGPUProcComputePassEncoderSetPipeline computePassEncoderSetPipeline;\n    WGPUProcComputePassEncoderReference computePassEncoderReference;\n    WGPUProcComputePassEncoderRelease computePassEncoderRelease;\n\n    WGPUProcComputePipelineGetBindGroupLayout computePipelineGetBindGroupLayout;\n    WGPUProcComputePipelineReference computePipelineReference;\n    WGPUProcComputePipelineRelease computePipelineRelease;\n\n    WGPUProcDeviceCreateBindGroup deviceCreateBindGroup;\n    WGPUProcDeviceCreateBindGroupLayout deviceCreateBindGroupLayout;\n    WGPUProcDeviceCreateBuffer deviceCreateBuffer;\n    WGPUProcDeviceCreateBufferMapped deviceCreateBufferMapped;\n    WGPUProcDeviceCreateBufferMappedAsync deviceCreateBufferMappedAsync;\n    WGPUProcDeviceCreateCommandEncoder deviceCreateCommandEncoder;\n    WGPUProcDeviceCreateComputePipeline deviceCreateComputePipeline;\n    WGPUProcDeviceCreatePipelineLayout deviceCreatePipelineLayout;\n    WGPUProcDeviceCreateQueue deviceCreateQueue;\n    WGPUProcDeviceCreateRenderBundleEncoder deviceCreateRenderBundleEncoder;\n    WGPUProcDeviceCreateRenderPipeline deviceCreateRenderPipeline;\n    WGPUProcDeviceCreateSampler deviceCreateSampler;\n    WGPUProcDeviceCreateShaderModule deviceCreateShaderModule;\n    WGPUProcDeviceCreateSwapChain deviceCreateSwapChain;\n    WGPUProcDeviceCreateTexture deviceCreateTexture;\n    WGPUProcDeviceInjectError deviceInjectError;\n    WGPUProcDeviceLoseForTesting deviceLoseForTesting;\n    WGPUProcDevicePopErrorScope devicePopErrorScope;\n    WGPUProcDevicePushErrorScope devicePushErrorScope;\n    WGPUProcDeviceSetDeviceLostCallback deviceSetDeviceLostCallback;\n    WGPUProcDeviceSetUncapturedErrorCallback deviceSetUncapturedErrorCallback;\n    WGPUProcDeviceTick deviceTick;\n    WGPUProcDeviceReference deviceReference;\n    WGPUProcDeviceRelease deviceRelease;\n\n    WGPUProcFenceGetCompletedValue fenceGetCompletedValue;\n    WGPUProcFenceOnCompletion fenceOnCompletion;\n    WGPUProcFenceReference fenceReference;\n    WGPUProcFenceRelease fenceRelease;\n\n    WGPUProcInstanceCreateSurface instanceCreateSurface;\n    WGPUProcInstanceReference instanceReference;\n    WGPUProcInstanceRelease instanceRelease;\n\n    WGPUProcPipelineLayoutReference pipelineLayoutReference;\n    WGPUProcPipelineLayoutRelease pipelineLayoutRelease;\n\n    WGPUProcQueueCreateFence queueCreateFence;\n    WGPUProcQueueSignal queueSignal;\n    WGPUProcQueueSubmit queueSubmit;\n    WGPUProcQueueReference queueReference;\n    WGPUProcQueueRelease queueRelease;\n\n    WGPUProcRenderBundleReference renderBundleReference;\n    WGPUProcRenderBundleRelease renderBundleRelease;\n\n    WGPUProcRenderBundleEncoderDraw renderBundleEncoderDraw;\n    WGPUProcRenderBundleEncoderDrawIndexed renderBundleEncoderDrawIndexed;\n    WGPUProcRenderBundleEncoderDrawIndexedIndirect renderBundleEncoderDrawIndexedIndirect;\n    WGPUProcRenderBundleEncoderDrawIndirect renderBundleEncoderDrawIndirect;\n    WGPUProcRenderBundleEncoderFinish renderBundleEncoderFinish;\n    WGPUProcRenderBundleEncoderInsertDebugMarker renderBundleEncoderInsertDebugMarker;\n    WGPUProcRenderBundleEncoderPopDebugGroup renderBundleEncoderPopDebugGroup;\n    WGPUProcRenderBundleEncoderPushDebugGroup renderBundleEncoderPushDebugGroup;\n    WGPUProcRenderBundleEncoderSetBindGroup renderBundleEncoderSetBindGroup;\n    WGPUProcRenderBundleEncoderSetIndexBuffer renderBundleEncoderSetIndexBuffer;\n    WGPUProcRenderBundleEncoderSetPipeline renderBundleEncoderSetPipeline;\n    WGPUProcRenderBundleEncoderSetVertexBuffer renderBundleEncoderSetVertexBuffer;\n    WGPUProcRenderBundleEncoderReference renderBundleEncoderReference;\n    WGPUProcRenderBundleEncoderRelease renderBundleEncoderRelease;\n\n    WGPUProcRenderPassEncoderDraw renderPassEncoderDraw;\n    WGPUProcRenderPassEncoderDrawIndexed renderPassEncoderDrawIndexed;\n    WGPUProcRenderPassEncoderDrawIndexedIndirect renderPassEncoderDrawIndexedIndirect;\n    WGPUProcRenderPassEncoderDrawIndirect renderPassEncoderDrawIndirect;\n    WGPUProcRenderPassEncoderEndPass renderPassEncoderEndPass;\n    WGPUProcRenderPassEncoderExecuteBundles renderPassEncoderExecuteBundles;\n    WGPUProcRenderPassEncoderInsertDebugMarker renderPassEncoderInsertDebugMarker;\n    WGPUProcRenderPassEncoderPopDebugGroup renderPassEncoderPopDebugGroup;\n    WGPUProcRenderPassEncoderPushDebugGroup renderPassEncoderPushDebugGroup;\n    WGPUProcRenderPassEncoderSetBindGroup renderPassEncoderSetBindGroup;\n    WGPUProcRenderPassEncoderSetBlendColor renderPassEncoderSetBlendColor;\n    WGPUProcRenderPassEncoderSetIndexBuffer renderPassEncoderSetIndexBuffer;\n    WGPUProcRenderPassEncoderSetPipeline renderPassEncoderSetPipeline;\n    WGPUProcRenderPassEncoderSetScissorRect renderPassEncoderSetScissorRect;\n    WGPUProcRenderPassEncoderSetStencilReference renderPassEncoderSetStencilReference;\n    WGPUProcRenderPassEncoderSetVertexBuffer renderPassEncoderSetVertexBuffer;\n    WGPUProcRenderPassEncoderSetViewport renderPassEncoderSetViewport;\n    WGPUProcRenderPassEncoderReference renderPassEncoderReference;\n    WGPUProcRenderPassEncoderRelease renderPassEncoderRelease;\n\n    WGPUProcRenderPipelineGetBindGroupLayout renderPipelineGetBindGroupLayout;\n    WGPUProcRenderPipelineReference renderPipelineReference;\n    WGPUProcRenderPipelineRelease renderPipelineRelease;\n\n    WGPUProcSamplerReference samplerReference;\n    WGPUProcSamplerRelease samplerRelease;\n\n    WGPUProcShaderModuleReference shaderModuleReference;\n    WGPUProcShaderModuleRelease shaderModuleRelease;\n\n    WGPUProcSurfaceReference surfaceReference;\n    WGPUProcSurfaceRelease surfaceRelease;\n\n    WGPUProcSwapChainConfigure swapChainConfigure;\n    WGPUProcSwapChainGetCurrentTextureView swapChainGetCurrentTextureView;\n    WGPUProcSwapChainPresent swapChainPresent;\n    WGPUProcSwapChainReference swapChainReference;\n    WGPUProcSwapChainRelease swapChainRelease;\n\n    WGPUProcTextureCreateView textureCreateView;\n    WGPUProcTextureDestroy textureDestroy;\n    WGPUProcTextureReference textureReference;\n    WGPUProcTextureRelease textureRelease;\n\n    WGPUProcTextureViewReference textureViewReference;\n    WGPUProcTextureViewRelease textureViewRelease;\n\n} DawnProcTable;\n\n#endif  // DAWN_DAWN_PROC_TABLE_H_\n"}