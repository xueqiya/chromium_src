// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nigori_local_data.proto

#include "nigori_local_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nigori_5flocal_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CryptographerData_nigori_5flocal_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nigori_5flocal_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomPassphraseKeyDerivationParams_nigori_5flocal_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_encryption_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncryptedData_encryption_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_entity_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntityMetadata_entity_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5ftype_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelTypeState_model_5ftype_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nigori_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NigoriKeyBag_nigori_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nigori_5flocal_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NigoriModel_nigori_5flocal_5fdata_2eproto;
namespace sync_pb {
class CryptographerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CryptographerData> _instance;
} _CryptographerData_default_instance_;
class CustomPassphraseKeyDerivationParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomPassphraseKeyDerivationParams> _instance;
} _CustomPassphraseKeyDerivationParams_default_instance_;
class NigoriModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NigoriModel> _instance;
} _NigoriModel_default_instance_;
class NigoriLocalDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NigoriLocalData> _instance;
} _NigoriLocalData_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_CryptographerData_nigori_5flocal_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_CryptographerData_default_instance_;
    new (ptr) ::sync_pb::CryptographerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::CryptographerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CryptographerData_nigori_5flocal_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CryptographerData_nigori_5flocal_5fdata_2eproto}, {
      &scc_info_NigoriKeyBag_nigori_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_CustomPassphraseKeyDerivationParams_nigori_5flocal_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_CustomPassphraseKeyDerivationParams_default_instance_;
    new (ptr) ::sync_pb::CustomPassphraseKeyDerivationParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::CustomPassphraseKeyDerivationParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomPassphraseKeyDerivationParams_nigori_5flocal_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CustomPassphraseKeyDerivationParams_nigori_5flocal_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_NigoriLocalData_nigori_5flocal_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_NigoriLocalData_default_instance_;
    new (ptr) ::sync_pb::NigoriLocalData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::NigoriLocalData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NigoriLocalData_nigori_5flocal_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_NigoriLocalData_nigori_5flocal_5fdata_2eproto}, {
      &scc_info_ModelTypeState_model_5ftype_5fstate_2eproto.base,
      &scc_info_EntityMetadata_entity_5fmetadata_2eproto.base,
      &scc_info_NigoriModel_nigori_5flocal_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_NigoriModel_nigori_5flocal_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_NigoriModel_default_instance_;
    new (ptr) ::sync_pb::NigoriModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::NigoriModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NigoriModel_nigori_5flocal_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_NigoriModel_nigori_5flocal_5fdata_2eproto}, {
      &scc_info_CryptographerData_nigori_5flocal_5fdata_2eproto.base,
      &scc_info_EncryptedData_encryption_2eproto.base,
      &scc_info_CustomPassphraseKeyDerivationParams_nigori_5flocal_5fdata_2eproto.base,}};

namespace sync_pb {

// ===================================================================

void CryptographerData::InitAsDefaultInstance() {
  ::sync_pb::_CryptographerData_default_instance_._instance.get_mutable()->key_bag_ = const_cast< ::sync_pb::NigoriKeyBag*>(
      ::sync_pb::NigoriKeyBag::internal_default_instance());
}
class CryptographerData::_Internal {
 public:
  using HasBits = decltype(std::declval<CryptographerData>()._has_bits_);
  static const ::sync_pb::NigoriKeyBag& key_bag(const CryptographerData* msg);
  static void set_has_key_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::NigoriKeyBag&
CryptographerData::_Internal::key_bag(const CryptographerData* msg) {
  return *msg->key_bag_;
}
void CryptographerData::clear_key_bag() {
  if (key_bag_ != nullptr) key_bag_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CryptographerData::CryptographerData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CryptographerData)
}
CryptographerData::CryptographerData(const CryptographerData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  default_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_key_name()) {
    default_key_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.default_key_name_);
  }
  if (from.has_key_bag()) {
    key_bag_ = new ::sync_pb::NigoriKeyBag(*from.key_bag_);
  } else {
    key_bag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.CryptographerData)
}

void CryptographerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CryptographerData_nigori_5flocal_5fdata_2eproto.base);
  default_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_bag_ = nullptr;
}

CryptographerData::~CryptographerData() {
  // @@protoc_insertion_point(destructor:sync_pb.CryptographerData)
  SharedDtor();
}

void CryptographerData::SharedDtor() {
  default_key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_bag_;
}

void CryptographerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CryptographerData& CryptographerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CryptographerData_nigori_5flocal_5fdata_2eproto.base);
  return *internal_default_instance();
}


void CryptographerData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CryptographerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      default_key_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(key_bag_ != nullptr);
      key_bag_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CryptographerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.NigoriKeyBag key_bag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_key_bag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string default_key_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_default_key_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CryptographerData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CryptographerData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.NigoriKeyBag key_bag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key_bag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default_key_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_default_key_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CryptographerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CryptographerData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CryptographerData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CryptographerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.NigoriKeyBag key_bag = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::key_bag(this), output);
  }

  // optional string default_key_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->default_key_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CryptographerData)
}

size_t CryptographerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CryptographerData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string default_key_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->default_key_name());
    }

    // optional .sync_pb.NigoriKeyBag key_bag = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_bag_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptographerData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CryptographerData*>(
      &from));
}

void CryptographerData::MergeFrom(const CryptographerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CryptographerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      default_key_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.default_key_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_key_bag()->::sync_pb::NigoriKeyBag::MergeFrom(from.key_bag());
    }
  }
}

void CryptographerData::CopyFrom(const CryptographerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CryptographerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptographerData::IsInitialized() const {
  return true;
}

void CryptographerData::InternalSwap(CryptographerData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  default_key_name_.Swap(&other->default_key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_bag_, other->key_bag_);
}

std::string CryptographerData::GetTypeName() const {
  return "sync_pb.CryptographerData";
}


// ===================================================================

void CustomPassphraseKeyDerivationParams::InitAsDefaultInstance() {
}
class CustomPassphraseKeyDerivationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomPassphraseKeyDerivationParams>()._has_bits_);
  static void set_has_custom_passphrase_key_derivation_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_passphrase_key_derivation_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CustomPassphraseKeyDerivationParams::CustomPassphraseKeyDerivationParams()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CustomPassphraseKeyDerivationParams)
}
CustomPassphraseKeyDerivationParams::CustomPassphraseKeyDerivationParams(const CustomPassphraseKeyDerivationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_passphrase_key_derivation_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_passphrase_key_derivation_salt()) {
    custom_passphrase_key_derivation_salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_passphrase_key_derivation_salt_);
  }
  custom_passphrase_key_derivation_method_ = from.custom_passphrase_key_derivation_method_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.CustomPassphraseKeyDerivationParams)
}

void CustomPassphraseKeyDerivationParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomPassphraseKeyDerivationParams_nigori_5flocal_5fdata_2eproto.base);
  custom_passphrase_key_derivation_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_passphrase_key_derivation_method_ = 0;
}

CustomPassphraseKeyDerivationParams::~CustomPassphraseKeyDerivationParams() {
  // @@protoc_insertion_point(destructor:sync_pb.CustomPassphraseKeyDerivationParams)
  SharedDtor();
}

void CustomPassphraseKeyDerivationParams::SharedDtor() {
  custom_passphrase_key_derivation_salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomPassphraseKeyDerivationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomPassphraseKeyDerivationParams& CustomPassphraseKeyDerivationParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomPassphraseKeyDerivationParams_nigori_5flocal_5fdata_2eproto.base);
  return *internal_default_instance();
}


void CustomPassphraseKeyDerivationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CustomPassphraseKeyDerivationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    custom_passphrase_key_derivation_salt_.ClearNonDefaultToEmptyNoArena();
  }
  custom_passphrase_key_derivation_method_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomPassphraseKeyDerivationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.NigoriSpecifics.KeyDerivationMethod custom_passphrase_key_derivation_method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::NigoriSpecifics_KeyDerivationMethod_IsValid(val))) {
            set_custom_passphrase_key_derivation_method(static_cast<::sync_pb::NigoriSpecifics_KeyDerivationMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string custom_passphrase_key_derivation_salt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_custom_passphrase_key_derivation_salt(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomPassphraseKeyDerivationParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CustomPassphraseKeyDerivationParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.NigoriSpecifics.KeyDerivationMethod custom_passphrase_key_derivation_method = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::NigoriSpecifics_KeyDerivationMethod_IsValid(value)) {
            set_custom_passphrase_key_derivation_method(static_cast< ::sync_pb::NigoriSpecifics_KeyDerivationMethod >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_passphrase_key_derivation_salt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_passphrase_key_derivation_salt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CustomPassphraseKeyDerivationParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CustomPassphraseKeyDerivationParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomPassphraseKeyDerivationParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CustomPassphraseKeyDerivationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.NigoriSpecifics.KeyDerivationMethod custom_passphrase_key_derivation_method = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->custom_passphrase_key_derivation_method(), output);
  }

  // optional string custom_passphrase_key_derivation_salt = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->custom_passphrase_key_derivation_salt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CustomPassphraseKeyDerivationParams)
}

size_t CustomPassphraseKeyDerivationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CustomPassphraseKeyDerivationParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string custom_passphrase_key_derivation_salt = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->custom_passphrase_key_derivation_salt());
    }

    // optional .sync_pb.NigoriSpecifics.KeyDerivationMethod custom_passphrase_key_derivation_method = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->custom_passphrase_key_derivation_method());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomPassphraseKeyDerivationParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CustomPassphraseKeyDerivationParams*>(
      &from));
}

void CustomPassphraseKeyDerivationParams::MergeFrom(const CustomPassphraseKeyDerivationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CustomPassphraseKeyDerivationParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      custom_passphrase_key_derivation_salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_passphrase_key_derivation_salt_);
    }
    if (cached_has_bits & 0x00000002u) {
      custom_passphrase_key_derivation_method_ = from.custom_passphrase_key_derivation_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CustomPassphraseKeyDerivationParams::CopyFrom(const CustomPassphraseKeyDerivationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CustomPassphraseKeyDerivationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomPassphraseKeyDerivationParams::IsInitialized() const {
  return true;
}

void CustomPassphraseKeyDerivationParams::InternalSwap(CustomPassphraseKeyDerivationParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_passphrase_key_derivation_salt_.Swap(&other->custom_passphrase_key_derivation_salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(custom_passphrase_key_derivation_method_, other->custom_passphrase_key_derivation_method_);
}

std::string CustomPassphraseKeyDerivationParams::GetTypeName() const {
  return "sync_pb.CustomPassphraseKeyDerivationParams";
}


// ===================================================================

void NigoriModel::InitAsDefaultInstance() {
  ::sync_pb::_NigoriModel_default_instance_._instance.get_mutable()->cryptographer_data_ = const_cast< ::sync_pb::CryptographerData*>(
      ::sync_pb::CryptographerData::internal_default_instance());
  ::sync_pb::_NigoriModel_default_instance_._instance.get_mutable()->pending_keys_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
  ::sync_pb::_NigoriModel_default_instance_._instance.get_mutable()->custom_passphrase_key_derivation_params_ = const_cast< ::sync_pb::CustomPassphraseKeyDerivationParams*>(
      ::sync_pb::CustomPassphraseKeyDerivationParams::internal_default_instance());
  ::sync_pb::_NigoriModel_default_instance_._instance.get_mutable()->pending_keystore_decryptor_token_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
}
class NigoriModel::_Internal {
 public:
  using HasBits = decltype(std::declval<NigoriModel>()._has_bits_);
  static const ::sync_pb::CryptographerData& cryptographer_data(const NigoriModel* msg);
  static void set_has_cryptographer_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current_keystore_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::EncryptedData& pending_keys(const NigoriModel* msg);
  static void set_has_pending_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_passphrase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_keystore_migration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_custom_passphrase_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::CustomPassphraseKeyDerivationParams& custom_passphrase_key_derivation_params(const NigoriModel* msg);
  static void set_has_custom_passphrase_key_derivation_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_encrypt_everything(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::sync_pb::EncryptedData& pending_keystore_decryptor_token(const NigoriModel* msg);
  static void set_has_pending_keystore_decryptor_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::sync_pb::CryptographerData&
NigoriModel::_Internal::cryptographer_data(const NigoriModel* msg) {
  return *msg->cryptographer_data_;
}
const ::sync_pb::EncryptedData&
NigoriModel::_Internal::pending_keys(const NigoriModel* msg) {
  return *msg->pending_keys_;
}
const ::sync_pb::CustomPassphraseKeyDerivationParams&
NigoriModel::_Internal::custom_passphrase_key_derivation_params(const NigoriModel* msg) {
  return *msg->custom_passphrase_key_derivation_params_;
}
const ::sync_pb::EncryptedData&
NigoriModel::_Internal::pending_keystore_decryptor_token(const NigoriModel* msg) {
  return *msg->pending_keystore_decryptor_token_;
}
void NigoriModel::clear_pending_keys() {
  if (pending_keys_ != nullptr) pending_keys_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void NigoriModel::clear_pending_keystore_decryptor_token() {
  if (pending_keystore_decryptor_token_ != nullptr) pending_keystore_decryptor_token_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
NigoriModel::NigoriModel()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.NigoriModel)
}
NigoriModel::NigoriModel(const NigoriModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      encrypted_types_specifics_field_number_(from.encrypted_types_specifics_field_number_),
      keystore_key_(from.keystore_key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_keystore_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_current_keystore_key_name()) {
    current_keystore_key_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_keystore_key_name_);
  }
  if (from.has_cryptographer_data()) {
    cryptographer_data_ = new ::sync_pb::CryptographerData(*from.cryptographer_data_);
  } else {
    cryptographer_data_ = nullptr;
  }
  if (from.has_pending_keys()) {
    pending_keys_ = new ::sync_pb::EncryptedData(*from.pending_keys_);
  } else {
    pending_keys_ = nullptr;
  }
  if (from.has_custom_passphrase_key_derivation_params()) {
    custom_passphrase_key_derivation_params_ = new ::sync_pb::CustomPassphraseKeyDerivationParams(*from.custom_passphrase_key_derivation_params_);
  } else {
    custom_passphrase_key_derivation_params_ = nullptr;
  }
  if (from.has_pending_keystore_decryptor_token()) {
    pending_keystore_decryptor_token_ = new ::sync_pb::EncryptedData(*from.pending_keystore_decryptor_token_);
  } else {
    pending_keystore_decryptor_token_ = nullptr;
  }
  ::memcpy(&keystore_migration_time_, &from.keystore_migration_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&encrypt_everything_) -
    reinterpret_cast<char*>(&keystore_migration_time_)) + sizeof(encrypt_everything_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.NigoriModel)
}

void NigoriModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NigoriModel_nigori_5flocal_5fdata_2eproto.base);
  current_keystore_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cryptographer_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encrypt_everything_) -
      reinterpret_cast<char*>(&cryptographer_data_)) + sizeof(encrypt_everything_));
}

NigoriModel::~NigoriModel() {
  // @@protoc_insertion_point(destructor:sync_pb.NigoriModel)
  SharedDtor();
}

void NigoriModel::SharedDtor() {
  current_keystore_key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cryptographer_data_;
  if (this != internal_default_instance()) delete pending_keys_;
  if (this != internal_default_instance()) delete custom_passphrase_key_derivation_params_;
  if (this != internal_default_instance()) delete pending_keystore_decryptor_token_;
}

void NigoriModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NigoriModel& NigoriModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NigoriModel_nigori_5flocal_5fdata_2eproto.base);
  return *internal_default_instance();
}


void NigoriModel::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NigoriModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypted_types_specifics_field_number_.Clear();
  keystore_key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      current_keystore_key_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cryptographer_data_ != nullptr);
      cryptographer_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pending_keys_ != nullptr);
      pending_keys_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(custom_passphrase_key_derivation_params_ != nullptr);
      custom_passphrase_key_derivation_params_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pending_keystore_decryptor_token_ != nullptr);
      pending_keystore_decryptor_token_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&keystore_migration_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&passphrase_type_) -
        reinterpret_cast<char*>(&keystore_migration_time_)) + sizeof(passphrase_type_));
  }
  encrypt_everything_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NigoriModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.CryptographerData cryptographer_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_cryptographer_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string current_keystore_key_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_current_keystore_key_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.EncryptedData pending_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_pending_keys(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::NigoriSpecifics_PassphraseType_IsValid(val))) {
            set_passphrase_type(static_cast<::sync_pb::NigoriSpecifics_PassphraseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 keystore_migration_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_keystore_migration_time(&has_bits);
          keystore_migration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 custom_passphrase_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_custom_passphrase_time(&has_bits);
          custom_passphrase_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_custom_passphrase_key_derivation_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_everything = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_encrypt_everything(&has_bits);
          encrypt_everything_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 encrypted_types_specifics_field_number = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_encrypted_types_specifics_field_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 72);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_encrypted_types_specifics_field_number(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string keystore_key = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_keystore_key(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_pending_keystore_decryptor_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NigoriModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.NigoriModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.CryptographerData cryptographer_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cryptographer_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string current_keystore_key_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_current_keystore_key_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.EncryptedData pending_keys = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pending_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::NigoriSpecifics_PassphraseType_IsValid(value)) {
            set_passphrase_type(static_cast< ::sync_pb::NigoriSpecifics_PassphraseType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 keystore_migration_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_keystore_migration_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &keystore_migration_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 custom_passphrase_time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_custom_passphrase_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &custom_passphrase_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_passphrase_key_derivation_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_everything = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_encrypt_everything(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_everything_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 encrypted_types_specifics_field_number = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 72u, input, this->mutable_encrypted_types_specifics_field_number())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_encrypted_types_specifics_field_number())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keystore_key = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_keystore_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pending_keystore_decryptor_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.NigoriModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.NigoriModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NigoriModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.NigoriModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.CryptographerData cryptographer_data = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::cryptographer_data(this), output);
  }

  // optional string current_keystore_key_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->current_keystore_key_name(), output);
  }

  // optional .sync_pb.EncryptedData pending_keys = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::pending_keys(this), output);
  }

  // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->passphrase_type(), output);
  }

  // optional int64 keystore_migration_time = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->keystore_migration_time(), output);
  }

  // optional int64 custom_passphrase_time = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->custom_passphrase_time(), output);
  }

  // optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::custom_passphrase_key_derivation_params(this), output);
  }

  // optional bool encrypt_everything = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->encrypt_everything(), output);
  }

  // repeated int32 encrypted_types_specifics_field_number = 9;
  for (int i = 0, n = this->encrypted_types_specifics_field_number_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      9, this->encrypted_types_specifics_field_number(i), output);
  }

  // repeated string keystore_key = 10;
  for (int i = 0, n = this->keystore_key_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      10, this->keystore_key(i), output);
  }

  // optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::pending_keystore_decryptor_token(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.NigoriModel)
}

size_t NigoriModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NigoriModel)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 encrypted_types_specifics_field_number = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->encrypted_types_specifics_field_number_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->encrypted_types_specifics_field_number_size());
    total_size += data_size;
  }

  // repeated string keystore_key = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->keystore_key_size());
  for (int i = 0, n = this->keystore_key_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->keystore_key(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string current_keystore_key_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->current_keystore_key_name());
    }

    // optional .sync_pb.CryptographerData cryptographer_data = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cryptographer_data_);
    }

    // optional .sync_pb.EncryptedData pending_keys = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pending_keys_);
    }

    // optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_passphrase_key_derivation_params_);
    }

    // optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pending_keystore_decryptor_token_);
    }

    // optional int64 keystore_migration_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->keystore_migration_time());
    }

    // optional int64 custom_passphrase_time = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->custom_passphrase_time());
    }

    // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->passphrase_type());
    }

  }
  // optional bool encrypt_everything = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NigoriModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NigoriModel*>(
      &from));
}

void NigoriModel::MergeFrom(const NigoriModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NigoriModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  encrypted_types_specifics_field_number_.MergeFrom(from.encrypted_types_specifics_field_number_);
  keystore_key_.MergeFrom(from.keystore_key_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      current_keystore_key_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_keystore_key_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cryptographer_data()->::sync_pb::CryptographerData::MergeFrom(from.cryptographer_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pending_keys()->::sync_pb::EncryptedData::MergeFrom(from.pending_keys());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_custom_passphrase_key_derivation_params()->::sync_pb::CustomPassphraseKeyDerivationParams::MergeFrom(from.custom_passphrase_key_derivation_params());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_pending_keystore_decryptor_token()->::sync_pb::EncryptedData::MergeFrom(from.pending_keystore_decryptor_token());
    }
    if (cached_has_bits & 0x00000020u) {
      keystore_migration_time_ = from.keystore_migration_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      custom_passphrase_time_ = from.custom_passphrase_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      passphrase_type_ = from.passphrase_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_encrypt_everything(from.encrypt_everything());
  }
}

void NigoriModel::CopyFrom(const NigoriModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NigoriModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriModel::IsInitialized() const {
  return true;
}

void NigoriModel::InternalSwap(NigoriModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encrypted_types_specifics_field_number_.InternalSwap(&other->encrypted_types_specifics_field_number_);
  keystore_key_.InternalSwap(CastToBase(&other->keystore_key_));
  current_keystore_key_name_.Swap(&other->current_keystore_key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cryptographer_data_, other->cryptographer_data_);
  swap(pending_keys_, other->pending_keys_);
  swap(custom_passphrase_key_derivation_params_, other->custom_passphrase_key_derivation_params_);
  swap(pending_keystore_decryptor_token_, other->pending_keystore_decryptor_token_);
  swap(keystore_migration_time_, other->keystore_migration_time_);
  swap(custom_passphrase_time_, other->custom_passphrase_time_);
  swap(passphrase_type_, other->passphrase_type_);
  swap(encrypt_everything_, other->encrypt_everything_);
}

std::string NigoriModel::GetTypeName() const {
  return "sync_pb.NigoriModel";
}


// ===================================================================

void NigoriLocalData::InitAsDefaultInstance() {
  ::sync_pb::_NigoriLocalData_default_instance_._instance.get_mutable()->model_type_state_ = const_cast< ::sync_pb::ModelTypeState*>(
      ::sync_pb::ModelTypeState::internal_default_instance());
  ::sync_pb::_NigoriLocalData_default_instance_._instance.get_mutable()->entity_metadata_ = const_cast< ::sync_pb::EntityMetadata*>(
      ::sync_pb::EntityMetadata::internal_default_instance());
  ::sync_pb::_NigoriLocalData_default_instance_._instance.get_mutable()->nigori_model_ = const_cast< ::sync_pb::NigoriModel*>(
      ::sync_pb::NigoriModel::internal_default_instance());
}
class NigoriLocalData::_Internal {
 public:
  using HasBits = decltype(std::declval<NigoriLocalData>()._has_bits_);
  static const ::sync_pb::ModelTypeState& model_type_state(const NigoriLocalData* msg);
  static void set_has_model_type_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::EntityMetadata& entity_metadata(const NigoriLocalData* msg);
  static void set_has_entity_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::NigoriModel& nigori_model(const NigoriLocalData* msg);
  static void set_has_nigori_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::ModelTypeState&
NigoriLocalData::_Internal::model_type_state(const NigoriLocalData* msg) {
  return *msg->model_type_state_;
}
const ::sync_pb::EntityMetadata&
NigoriLocalData::_Internal::entity_metadata(const NigoriLocalData* msg) {
  return *msg->entity_metadata_;
}
const ::sync_pb::NigoriModel&
NigoriLocalData::_Internal::nigori_model(const NigoriLocalData* msg) {
  return *msg->nigori_model_;
}
void NigoriLocalData::clear_model_type_state() {
  if (model_type_state_ != nullptr) model_type_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void NigoriLocalData::clear_entity_metadata() {
  if (entity_metadata_ != nullptr) entity_metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
NigoriLocalData::NigoriLocalData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.NigoriLocalData)
}
NigoriLocalData::NigoriLocalData(const NigoriLocalData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_model_type_state()) {
    model_type_state_ = new ::sync_pb::ModelTypeState(*from.model_type_state_);
  } else {
    model_type_state_ = nullptr;
  }
  if (from.has_entity_metadata()) {
    entity_metadata_ = new ::sync_pb::EntityMetadata(*from.entity_metadata_);
  } else {
    entity_metadata_ = nullptr;
  }
  if (from.has_nigori_model()) {
    nigori_model_ = new ::sync_pb::NigoriModel(*from.nigori_model_);
  } else {
    nigori_model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.NigoriLocalData)
}

void NigoriLocalData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NigoriLocalData_nigori_5flocal_5fdata_2eproto.base);
  ::memset(&model_type_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nigori_model_) -
      reinterpret_cast<char*>(&model_type_state_)) + sizeof(nigori_model_));
}

NigoriLocalData::~NigoriLocalData() {
  // @@protoc_insertion_point(destructor:sync_pb.NigoriLocalData)
  SharedDtor();
}

void NigoriLocalData::SharedDtor() {
  if (this != internal_default_instance()) delete model_type_state_;
  if (this != internal_default_instance()) delete entity_metadata_;
  if (this != internal_default_instance()) delete nigori_model_;
}

void NigoriLocalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NigoriLocalData& NigoriLocalData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NigoriLocalData_nigori_5flocal_5fdata_2eproto.base);
  return *internal_default_instance();
}


void NigoriLocalData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NigoriLocalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(model_type_state_ != nullptr);
      model_type_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entity_metadata_ != nullptr);
      entity_metadata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(nigori_model_ != nullptr);
      nigori_model_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NigoriLocalData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.ModelTypeState model_type_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_model_type_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.EntityMetadata entity_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_entity_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.NigoriModel nigori_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_nigori_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NigoriLocalData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.NigoriLocalData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.ModelTypeState model_type_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_model_type_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.EntityMetadata entity_metadata = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.NigoriModel nigori_model = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nigori_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.NigoriLocalData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.NigoriLocalData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NigoriLocalData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.NigoriLocalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.ModelTypeState model_type_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::model_type_state(this), output);
  }

  // optional .sync_pb.EntityMetadata entity_metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::entity_metadata(this), output);
  }

  // optional .sync_pb.NigoriModel nigori_model = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::nigori_model(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.NigoriLocalData)
}

size_t NigoriLocalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NigoriLocalData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .sync_pb.ModelTypeState model_type_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_type_state_);
    }

    // optional .sync_pb.EntityMetadata entity_metadata = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_metadata_);
    }

    // optional .sync_pb.NigoriModel nigori_model = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nigori_model_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NigoriLocalData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NigoriLocalData*>(
      &from));
}

void NigoriLocalData::MergeFrom(const NigoriLocalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NigoriLocalData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_model_type_state()->::sync_pb::ModelTypeState::MergeFrom(from.model_type_state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_entity_metadata()->::sync_pb::EntityMetadata::MergeFrom(from.entity_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_nigori_model()->::sync_pb::NigoriModel::MergeFrom(from.nigori_model());
    }
  }
}

void NigoriLocalData::CopyFrom(const NigoriLocalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NigoriLocalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriLocalData::IsInitialized() const {
  return true;
}

void NigoriLocalData::InternalSwap(NigoriLocalData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(model_type_state_, other->model_type_state_);
  swap(entity_metadata_, other->entity_metadata_);
  swap(nigori_model_, other->nigori_model_);
}

std::string NigoriLocalData::GetTypeName() const {
  return "sync_pb.NigoriLocalData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::CryptographerData* Arena::CreateMaybeMessage< ::sync_pb::CryptographerData >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::CryptographerData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::CustomPassphraseKeyDerivationParams* Arena::CreateMaybeMessage< ::sync_pb::CustomPassphraseKeyDerivationParams >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::CustomPassphraseKeyDerivationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::NigoriModel* Arena::CreateMaybeMessage< ::sync_pb::NigoriModel >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::NigoriModel >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::NigoriLocalData* Arena::CreateMaybeMessage< ::sync_pb::NigoriLocalData >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::NigoriLocalData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
