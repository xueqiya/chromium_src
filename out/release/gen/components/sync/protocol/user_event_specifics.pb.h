// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_event_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5fevent_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5fevent_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "user_consent_types.pb.h"
#include "gaia_password_reuse.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5fevent_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5fevent_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class UserEventSpecifics;
class UserEventSpecificsDefaultTypeInternal;
extern UserEventSpecificsDefaultTypeInternal _UserEventSpecifics_default_instance_;
class UserEventSpecifics_FieldTrial;
class UserEventSpecifics_FieldTrialDefaultTypeInternal;
extern UserEventSpecifics_FieldTrialDefaultTypeInternal _UserEventSpecifics_FieldTrial_default_instance_;
class UserEventSpecifics_GaiaPasswordCaptured;
class UserEventSpecifics_GaiaPasswordCapturedDefaultTypeInternal;
extern UserEventSpecifics_GaiaPasswordCapturedDefaultTypeInternal _UserEventSpecifics_GaiaPasswordCaptured_default_instance_;
class UserEventSpecifics_LanguageDetection;
class UserEventSpecifics_LanguageDetectionDefaultTypeInternal;
extern UserEventSpecifics_LanguageDetectionDefaultTypeInternal _UserEventSpecifics_LanguageDetection_default_instance_;
class UserEventSpecifics_LanguageDetection_Language;
class UserEventSpecifics_LanguageDetection_LanguageDefaultTypeInternal;
extern UserEventSpecifics_LanguageDetection_LanguageDefaultTypeInternal _UserEventSpecifics_LanguageDetection_Language_default_instance_;
class UserEventSpecifics_Test;
class UserEventSpecifics_TestDefaultTypeInternal;
extern UserEventSpecifics_TestDefaultTypeInternal _UserEventSpecifics_Test_default_instance_;
class UserEventSpecifics_Translation;
class UserEventSpecifics_TranslationDefaultTypeInternal;
extern UserEventSpecifics_TranslationDefaultTypeInternal _UserEventSpecifics_Translation_default_instance_;
class UserEventSpecifics_UserConsent;
class UserEventSpecifics_UserConsentDefaultTypeInternal;
extern UserEventSpecifics_UserConsentDefaultTypeInternal _UserEventSpecifics_UserConsent_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::UserEventSpecifics* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics>(Arena*);
template<> ::sync_pb::UserEventSpecifics_FieldTrial* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_FieldTrial>(Arena*);
template<> ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_GaiaPasswordCaptured>(Arena*);
template<> ::sync_pb::UserEventSpecifics_LanguageDetection* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_LanguageDetection>(Arena*);
template<> ::sync_pb::UserEventSpecifics_LanguageDetection_Language* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_LanguageDetection_Language>(Arena*);
template<> ::sync_pb::UserEventSpecifics_Test* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_Test>(Arena*);
template<> ::sync_pb::UserEventSpecifics_Translation* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_Translation>(Arena*);
template<> ::sync_pb::UserEventSpecifics_UserConsent* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_UserConsent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum UserEventSpecifics_Translation_Interaction : int {
  UserEventSpecifics_Translation_Interaction_UNKNOWN = 0,
  UserEventSpecifics_Translation_Interaction_ACCEPT = 1,
  UserEventSpecifics_Translation_Interaction_DECLINE = 2,
  UserEventSpecifics_Translation_Interaction_IGNORED = 3,
  UserEventSpecifics_Translation_Interaction_DISMISSED = 4,
  UserEventSpecifics_Translation_Interaction_MANUAL = 5,
  UserEventSpecifics_Translation_Interaction_TRANSLATION_REVERTED = 6,
  UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_PREF = 7,
  UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_LINK = 8,
  UserEventSpecifics_Translation_Interaction_INITIALIZATION_ERROR = 9
};
bool UserEventSpecifics_Translation_Interaction_IsValid(int value);
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation_Interaction_Interaction_MIN = UserEventSpecifics_Translation_Interaction_UNKNOWN;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation_Interaction_Interaction_MAX = UserEventSpecifics_Translation_Interaction_INITIALIZATION_ERROR;
constexpr int UserEventSpecifics_Translation_Interaction_Interaction_ARRAYSIZE = UserEventSpecifics_Translation_Interaction_Interaction_MAX + 1;

const std::string& UserEventSpecifics_Translation_Interaction_Name(UserEventSpecifics_Translation_Interaction value);
template<typename T>
inline const std::string& UserEventSpecifics_Translation_Interaction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserEventSpecifics_Translation_Interaction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserEventSpecifics_Translation_Interaction_Name.");
  return UserEventSpecifics_Translation_Interaction_Name(static_cast<UserEventSpecifics_Translation_Interaction>(enum_t_value));
}
bool UserEventSpecifics_Translation_Interaction_Parse(
    const std::string& name, UserEventSpecifics_Translation_Interaction* value);
enum UserEventSpecifics_UserConsent_Feature : int {
  UserEventSpecifics_UserConsent_Feature_FEATURE_UNSPECIFIED = 0,
  UserEventSpecifics_UserConsent_Feature_CHROME_SYNC = 1,
  UserEventSpecifics_UserConsent_Feature_PLAY_STORE = 2,
  UserEventSpecifics_UserConsent_Feature_BACKUP_AND_RESTORE = 3,
  UserEventSpecifics_UserConsent_Feature_GOOGLE_LOCATION_SERVICE = 4,
  UserEventSpecifics_UserConsent_Feature_CHROME_UNIFIED_CONSENT = 5,
  UserEventSpecifics_UserConsent_Feature_ASSISTANT_ACTIVITY_CONTROL = 6
};
bool UserEventSpecifics_UserConsent_Feature_IsValid(int value);
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent_Feature_Feature_MIN = UserEventSpecifics_UserConsent_Feature_FEATURE_UNSPECIFIED;
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent_Feature_Feature_MAX = UserEventSpecifics_UserConsent_Feature_ASSISTANT_ACTIVITY_CONTROL;
constexpr int UserEventSpecifics_UserConsent_Feature_Feature_ARRAYSIZE = UserEventSpecifics_UserConsent_Feature_Feature_MAX + 1;

const std::string& UserEventSpecifics_UserConsent_Feature_Name(UserEventSpecifics_UserConsent_Feature value);
template<typename T>
inline const std::string& UserEventSpecifics_UserConsent_Feature_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserEventSpecifics_UserConsent_Feature>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserEventSpecifics_UserConsent_Feature_Name.");
  return UserEventSpecifics_UserConsent_Feature_Name(static_cast<UserEventSpecifics_UserConsent_Feature>(enum_t_value));
}
bool UserEventSpecifics_UserConsent_Feature_Parse(
    const std::string& name, UserEventSpecifics_UserConsent_Feature* value);
enum UserEventSpecifics_GaiaPasswordCaptured_EventTrigger : int {
  UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_UNSPECIFIED = 0,
  UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_USER_LOGGED_IN = 1,
  UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EXPIRED_28D_TIMER = 2
};
bool UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_IsValid(int value);
constexpr UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_MIN = UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_UNSPECIFIED;
constexpr UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_MAX = UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EXPIRED_28D_TIMER;
constexpr int UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_ARRAYSIZE = UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_MAX + 1;

const std::string& UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name(UserEventSpecifics_GaiaPasswordCaptured_EventTrigger value);
template<typename T>
inline const std::string& UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserEventSpecifics_GaiaPasswordCaptured_EventTrigger>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name.");
  return UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name(static_cast<UserEventSpecifics_GaiaPasswordCaptured_EventTrigger>(enum_t_value));
}
bool UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Parse(
    const std::string& name, UserEventSpecifics_GaiaPasswordCaptured_EventTrigger* value);
// ===================================================================

class UserEventSpecifics_Test :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.Test) */ {
 public:
  UserEventSpecifics_Test();
  virtual ~UserEventSpecifics_Test();

  UserEventSpecifics_Test(const UserEventSpecifics_Test& from);
  UserEventSpecifics_Test(UserEventSpecifics_Test&& from) noexcept
    : UserEventSpecifics_Test() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_Test& operator=(const UserEventSpecifics_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_Test& operator=(UserEventSpecifics_Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEventSpecifics_Test* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_Test*>(
               &_UserEventSpecifics_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserEventSpecifics_Test& a, UserEventSpecifics_Test& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEventSpecifics_Test* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_Test* New() const final {
    return CreateMaybeMessage<UserEventSpecifics_Test>(nullptr);
  }

  UserEventSpecifics_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEventSpecifics_Test>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserEventSpecifics_Test& from);
  void MergeFrom(const UserEventSpecifics_Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_Test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.Test";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.Test)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_FieldTrial :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.FieldTrial) */ {
 public:
  UserEventSpecifics_FieldTrial();
  virtual ~UserEventSpecifics_FieldTrial();

  UserEventSpecifics_FieldTrial(const UserEventSpecifics_FieldTrial& from);
  UserEventSpecifics_FieldTrial(UserEventSpecifics_FieldTrial&& from) noexcept
    : UserEventSpecifics_FieldTrial() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_FieldTrial& operator=(const UserEventSpecifics_FieldTrial& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_FieldTrial& operator=(UserEventSpecifics_FieldTrial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_FieldTrial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEventSpecifics_FieldTrial* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_FieldTrial*>(
               &_UserEventSpecifics_FieldTrial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserEventSpecifics_FieldTrial& a, UserEventSpecifics_FieldTrial& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEventSpecifics_FieldTrial* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_FieldTrial* New() const final {
    return CreateMaybeMessage<UserEventSpecifics_FieldTrial>(nullptr);
  }

  UserEventSpecifics_FieldTrial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEventSpecifics_FieldTrial>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserEventSpecifics_FieldTrial& from);
  void MergeFrom(const UserEventSpecifics_FieldTrial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_FieldTrial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.FieldTrial";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariationIdsFieldNumber = 1,
  };
  // repeated fixed32 variation_ids = 1;
  int variation_ids_size() const;
  void clear_variation_ids();
  ::PROTOBUF_NAMESPACE_ID::uint32 variation_ids(int index) const;
  void set_variation_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_variation_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      variation_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_variation_ids();

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.FieldTrial)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > variation_ids_;
  friend struct ::TableStruct_user_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_LanguageDetection_Language :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.LanguageDetection.Language) */ {
 public:
  UserEventSpecifics_LanguageDetection_Language();
  virtual ~UserEventSpecifics_LanguageDetection_Language();

  UserEventSpecifics_LanguageDetection_Language(const UserEventSpecifics_LanguageDetection_Language& from);
  UserEventSpecifics_LanguageDetection_Language(UserEventSpecifics_LanguageDetection_Language&& from) noexcept
    : UserEventSpecifics_LanguageDetection_Language() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_LanguageDetection_Language& operator=(const UserEventSpecifics_LanguageDetection_Language& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_LanguageDetection_Language& operator=(UserEventSpecifics_LanguageDetection_Language&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_LanguageDetection_Language& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEventSpecifics_LanguageDetection_Language* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_LanguageDetection_Language*>(
               &_UserEventSpecifics_LanguageDetection_Language_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserEventSpecifics_LanguageDetection_Language& a, UserEventSpecifics_LanguageDetection_Language& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEventSpecifics_LanguageDetection_Language* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_LanguageDetection_Language* New() const final {
    return CreateMaybeMessage<UserEventSpecifics_LanguageDetection_Language>(nullptr);
  }

  UserEventSpecifics_LanguageDetection_Language* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEventSpecifics_LanguageDetection_Language>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserEventSpecifics_LanguageDetection_Language& from);
  void MergeFrom(const UserEventSpecifics_LanguageDetection_Language& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_LanguageDetection_Language* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.LanguageDetection.Language";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodeFieldNumber = 1,
    kIsReliableFieldNumber = 2,
  };
  // optional string language_code = 1;
  bool has_language_code() const;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);

  // optional bool is_reliable = 2;
  bool has_is_reliable() const;
  void clear_is_reliable();
  bool is_reliable() const;
  void set_is_reliable(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.LanguageDetection.Language)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  bool is_reliable_;
  friend struct ::TableStruct_user_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_LanguageDetection :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.LanguageDetection) */ {
 public:
  UserEventSpecifics_LanguageDetection();
  virtual ~UserEventSpecifics_LanguageDetection();

  UserEventSpecifics_LanguageDetection(const UserEventSpecifics_LanguageDetection& from);
  UserEventSpecifics_LanguageDetection(UserEventSpecifics_LanguageDetection&& from) noexcept
    : UserEventSpecifics_LanguageDetection() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_LanguageDetection& operator=(const UserEventSpecifics_LanguageDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_LanguageDetection& operator=(UserEventSpecifics_LanguageDetection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_LanguageDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEventSpecifics_LanguageDetection* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_LanguageDetection*>(
               &_UserEventSpecifics_LanguageDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserEventSpecifics_LanguageDetection& a, UserEventSpecifics_LanguageDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEventSpecifics_LanguageDetection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_LanguageDetection* New() const final {
    return CreateMaybeMessage<UserEventSpecifics_LanguageDetection>(nullptr);
  }

  UserEventSpecifics_LanguageDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEventSpecifics_LanguageDetection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserEventSpecifics_LanguageDetection& from);
  void MergeFrom(const UserEventSpecifics_LanguageDetection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_LanguageDetection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.LanguageDetection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_LanguageDetection_Language Language;

  // accessors -------------------------------------------------------

  enum : int {
    kDetectedLanguagesFieldNumber = 1,
    kAdoptedLanguageCodeFieldNumber = 2,
  };
  // repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
  int detected_languages_size() const;
  void clear_detected_languages();
  ::sync_pb::UserEventSpecifics_LanguageDetection_Language* mutable_detected_languages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >*
      mutable_detected_languages();
  const ::sync_pb::UserEventSpecifics_LanguageDetection_Language& detected_languages(int index) const;
  ::sync_pb::UserEventSpecifics_LanguageDetection_Language* add_detected_languages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >&
      detected_languages() const;

  // optional string adopted_language_code = 2;
  bool has_adopted_language_code() const;
  void clear_adopted_language_code();
  const std::string& adopted_language_code() const;
  void set_adopted_language_code(const std::string& value);
  void set_adopted_language_code(std::string&& value);
  void set_adopted_language_code(const char* value);
  void set_adopted_language_code(const char* value, size_t size);
  std::string* mutable_adopted_language_code();
  std::string* release_adopted_language_code();
  void set_allocated_adopted_language_code(std::string* adopted_language_code);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.LanguageDetection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language > detected_languages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adopted_language_code_;
  friend struct ::TableStruct_user_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_Translation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.Translation) */ {
 public:
  UserEventSpecifics_Translation();
  virtual ~UserEventSpecifics_Translation();

  UserEventSpecifics_Translation(const UserEventSpecifics_Translation& from);
  UserEventSpecifics_Translation(UserEventSpecifics_Translation&& from) noexcept
    : UserEventSpecifics_Translation() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_Translation& operator=(const UserEventSpecifics_Translation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_Translation& operator=(UserEventSpecifics_Translation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_Translation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEventSpecifics_Translation* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_Translation*>(
               &_UserEventSpecifics_Translation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserEventSpecifics_Translation& a, UserEventSpecifics_Translation& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEventSpecifics_Translation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_Translation* New() const final {
    return CreateMaybeMessage<UserEventSpecifics_Translation>(nullptr);
  }

  UserEventSpecifics_Translation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEventSpecifics_Translation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserEventSpecifics_Translation& from);
  void MergeFrom(const UserEventSpecifics_Translation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_Translation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.Translation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_Translation_Interaction Interaction;
  static constexpr Interaction UNKNOWN =
    UserEventSpecifics_Translation_Interaction_UNKNOWN;
  static constexpr Interaction ACCEPT =
    UserEventSpecifics_Translation_Interaction_ACCEPT;
  static constexpr Interaction DECLINE =
    UserEventSpecifics_Translation_Interaction_DECLINE;
  static constexpr Interaction IGNORED =
    UserEventSpecifics_Translation_Interaction_IGNORED;
  static constexpr Interaction DISMISSED =
    UserEventSpecifics_Translation_Interaction_DISMISSED;
  static constexpr Interaction MANUAL =
    UserEventSpecifics_Translation_Interaction_MANUAL;
  static constexpr Interaction TRANSLATION_REVERTED =
    UserEventSpecifics_Translation_Interaction_TRANSLATION_REVERTED;
  static constexpr Interaction AUTO_TRANSLATION_BY_PREF =
    UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_PREF;
  static constexpr Interaction AUTO_TRANSLATION_BY_LINK =
    UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_LINK;
  static constexpr Interaction INITIALIZATION_ERROR =
    UserEventSpecifics_Translation_Interaction_INITIALIZATION_ERROR;
  static inline bool Interaction_IsValid(int value) {
    return UserEventSpecifics_Translation_Interaction_IsValid(value);
  }
  static constexpr Interaction Interaction_MIN =
    UserEventSpecifics_Translation_Interaction_Interaction_MIN;
  static constexpr Interaction Interaction_MAX =
    UserEventSpecifics_Translation_Interaction_Interaction_MAX;
  static constexpr int Interaction_ARRAYSIZE =
    UserEventSpecifics_Translation_Interaction_Interaction_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Interaction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Interaction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Interaction_Name.");
    return UserEventSpecifics_Translation_Interaction_Name(enum_t_value);
  }
  static inline bool Interaction_Parse(const std::string& name,
      Interaction* value) {
    return UserEventSpecifics_Translation_Interaction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFromLanguageCodeFieldNumber = 1,
    kToLanguageCodeFieldNumber = 2,
    kInteractionFieldNumber = 3,
  };
  // optional string from_language_code = 1;
  bool has_from_language_code() const;
  void clear_from_language_code();
  const std::string& from_language_code() const;
  void set_from_language_code(const std::string& value);
  void set_from_language_code(std::string&& value);
  void set_from_language_code(const char* value);
  void set_from_language_code(const char* value, size_t size);
  std::string* mutable_from_language_code();
  std::string* release_from_language_code();
  void set_allocated_from_language_code(std::string* from_language_code);

  // optional string to_language_code = 2;
  bool has_to_language_code() const;
  void clear_to_language_code();
  const std::string& to_language_code() const;
  void set_to_language_code(const std::string& value);
  void set_to_language_code(std::string&& value);
  void set_to_language_code(const char* value);
  void set_to_language_code(const char* value, size_t size);
  std::string* mutable_to_language_code();
  std::string* release_to_language_code();
  void set_allocated_to_language_code(std::string* to_language_code);

  // optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
  bool has_interaction() const;
  void clear_interaction();
  ::sync_pb::UserEventSpecifics_Translation_Interaction interaction() const;
  void set_interaction(::sync_pb::UserEventSpecifics_Translation_Interaction value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.Translation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_language_code_;
  int interaction_;
  friend struct ::TableStruct_user_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_UserConsent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.UserConsent) */ {
 public:
  UserEventSpecifics_UserConsent();
  virtual ~UserEventSpecifics_UserConsent();

  UserEventSpecifics_UserConsent(const UserEventSpecifics_UserConsent& from);
  UserEventSpecifics_UserConsent(UserEventSpecifics_UserConsent&& from) noexcept
    : UserEventSpecifics_UserConsent() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_UserConsent& operator=(const UserEventSpecifics_UserConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_UserConsent& operator=(UserEventSpecifics_UserConsent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_UserConsent& default_instance();

  enum ConsentCase {
    kSyncConsent = 7,
    kArcBackupAndRestoreConsent = 8,
    kArcLocationServiceConsent = 9,
    kArcPlayTermsOfServiceConsent = 10,
    kArcMetricsAndUsageConsent = 11,
    kUnifiedConsent = 13,
    CONSENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEventSpecifics_UserConsent* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_UserConsent*>(
               &_UserEventSpecifics_UserConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserEventSpecifics_UserConsent& a, UserEventSpecifics_UserConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEventSpecifics_UserConsent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_UserConsent* New() const final {
    return CreateMaybeMessage<UserEventSpecifics_UserConsent>(nullptr);
  }

  UserEventSpecifics_UserConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEventSpecifics_UserConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserEventSpecifics_UserConsent& from);
  void MergeFrom(const UserEventSpecifics_UserConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_UserConsent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.UserConsent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_UserConsent_Feature Feature;
  static constexpr Feature FEATURE_UNSPECIFIED =
    UserEventSpecifics_UserConsent_Feature_FEATURE_UNSPECIFIED;
  static constexpr Feature CHROME_SYNC =
    UserEventSpecifics_UserConsent_Feature_CHROME_SYNC;
  static constexpr Feature PLAY_STORE =
    UserEventSpecifics_UserConsent_Feature_PLAY_STORE;
  static constexpr Feature BACKUP_AND_RESTORE =
    UserEventSpecifics_UserConsent_Feature_BACKUP_AND_RESTORE;
  static constexpr Feature GOOGLE_LOCATION_SERVICE =
    UserEventSpecifics_UserConsent_Feature_GOOGLE_LOCATION_SERVICE;
  static constexpr Feature CHROME_UNIFIED_CONSENT =
    UserEventSpecifics_UserConsent_Feature_CHROME_UNIFIED_CONSENT;
  static constexpr Feature ASSISTANT_ACTIVITY_CONTROL =
    UserEventSpecifics_UserConsent_Feature_ASSISTANT_ACTIVITY_CONTROL;
  static inline bool Feature_IsValid(int value) {
    return UserEventSpecifics_UserConsent_Feature_IsValid(value);
  }
  static constexpr Feature Feature_MIN =
    UserEventSpecifics_UserConsent_Feature_Feature_MIN;
  static constexpr Feature Feature_MAX =
    UserEventSpecifics_UserConsent_Feature_Feature_MAX;
  static constexpr int Feature_ARRAYSIZE =
    UserEventSpecifics_UserConsent_Feature_Feature_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Feature_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Feature>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Feature_Name.");
    return UserEventSpecifics_UserConsent_Feature_Name(enum_t_value);
  }
  static inline bool Feature_Parse(const std::string& name,
      Feature* value) {
    return UserEventSpecifics_UserConsent_Feature_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionGrdIdsFieldNumber = 2,
    kLocaleFieldNumber = 4,
    kAccountIdFieldNumber = 6,
    kFeatureFieldNumber = 1,
    kConfirmationGrdIdFieldNumber = 3,
    kStatusFieldNumber = 5,
    kClientConsentTimeUsecFieldNumber = 12,
    kSyncConsentFieldNumber = 7,
    kArcBackupAndRestoreConsentFieldNumber = 8,
    kArcLocationServiceConsentFieldNumber = 9,
    kArcPlayTermsOfServiceConsentFieldNumber = 10,
    kArcMetricsAndUsageConsentFieldNumber = 11,
    kUnifiedConsentFieldNumber = 13,
  };
  // repeated int32 description_grd_ids = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int description_grd_ids_size() const;
  PROTOBUF_DEPRECATED void clear_description_grd_ids();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 description_grd_ids(int index) const;
  PROTOBUF_DEPRECATED void set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  PROTOBUF_DEPRECATED void add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      description_grd_ids() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_description_grd_ids();

  // optional string locale = 4;
  bool has_locale() const;
  void clear_locale();
  const std::string& locale() const;
  void set_locale(const std::string& value);
  void set_locale(std::string&& value);
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  std::string* mutable_locale();
  std::string* release_locale();
  void set_allocated_locale(std::string* locale);

  // optional string account_id = 6;
  bool has_account_id() const;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_feature() const;
  PROTOBUF_DEPRECATED void clear_feature();
  PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_UserConsent_Feature feature() const;
  PROTOBUF_DEPRECATED void set_feature(::sync_pb::UserEventSpecifics_UserConsent_Feature value);

  // optional int32 confirmation_grd_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_confirmation_grd_id() const;
  PROTOBUF_DEPRECATED void clear_confirmation_grd_id();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id() const;
  PROTOBUF_DEPRECATED void set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_status() const;
  PROTOBUF_DEPRECATED void clear_status();
  PROTOBUF_DEPRECATED ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  PROTOBUF_DEPRECATED void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // optional int64 client_consent_time_usec = 12;
  bool has_client_consent_time_usec() const;
  void clear_client_consent_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 client_consent_time_usec() const;
  void set_client_consent_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
  bool has_sync_consent() const;
  void clear_sync_consent();
  const ::sync_pb::UserConsentTypes_SyncConsent& sync_consent() const;
  ::sync_pb::UserConsentTypes_SyncConsent* release_sync_consent();
  ::sync_pb::UserConsentTypes_SyncConsent* mutable_sync_consent();
  void set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent);

  // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
  bool has_arc_backup_and_restore_consent() const;
  void clear_arc_backup_and_restore_consent();
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& arc_backup_and_restore_consent() const;
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* release_arc_backup_and_restore_consent();
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* mutable_arc_backup_and_restore_consent();
  void set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent);

  // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
  bool has_arc_location_service_consent() const;
  void clear_arc_location_service_consent();
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& arc_location_service_consent() const;
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* release_arc_location_service_consent();
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* mutable_arc_location_service_consent();
  void set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent);

  // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
  bool has_arc_play_terms_of_service_consent() const;
  void clear_arc_play_terms_of_service_consent();
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& arc_play_terms_of_service_consent() const;
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* release_arc_play_terms_of_service_consent();
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* mutable_arc_play_terms_of_service_consent();
  void set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent);

  // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
  bool has_arc_metrics_and_usage_consent() const;
  void clear_arc_metrics_and_usage_consent();
  const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent& arc_metrics_and_usage_consent() const;
  ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* release_arc_metrics_and_usage_consent();
  ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* mutable_arc_metrics_and_usage_consent();
  void set_allocated_arc_metrics_and_usage_consent(::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent);

  // optional .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
  bool has_unified_consent() const;
  void clear_unified_consent();
  const ::sync_pb::UserConsentTypes_UnifiedConsent& unified_consent() const;
  ::sync_pb::UserConsentTypes_UnifiedConsent* release_unified_consent();
  ::sync_pb::UserConsentTypes_UnifiedConsent* mutable_unified_consent();
  void set_allocated_unified_consent(::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent);

  void clear_consent();
  ConsentCase consent_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.UserConsent)
 private:
  class _Internal;
  void set_has_sync_consent();
  void set_has_arc_backup_and_restore_consent();
  void set_has_arc_location_service_consent();
  void set_has_arc_play_terms_of_service_consent();
  void set_has_arc_metrics_and_usage_consent();
  void set_has_unified_consent();

  inline bool has_consent() const;
  inline void clear_has_consent();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > description_grd_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  int feature_;
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_consent_time_usec_;
  union ConsentUnion {
    ConsentUnion() {}
    ::sync_pb::UserConsentTypes_SyncConsent* sync_consent_;
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent_;
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent_;
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent_;
    ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent_;
    ::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent_;
  } consent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_user_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_GaiaPasswordCaptured :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.GaiaPasswordCaptured) */ {
 public:
  UserEventSpecifics_GaiaPasswordCaptured();
  virtual ~UserEventSpecifics_GaiaPasswordCaptured();

  UserEventSpecifics_GaiaPasswordCaptured(const UserEventSpecifics_GaiaPasswordCaptured& from);
  UserEventSpecifics_GaiaPasswordCaptured(UserEventSpecifics_GaiaPasswordCaptured&& from) noexcept
    : UserEventSpecifics_GaiaPasswordCaptured() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_GaiaPasswordCaptured& operator=(const UserEventSpecifics_GaiaPasswordCaptured& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_GaiaPasswordCaptured& operator=(UserEventSpecifics_GaiaPasswordCaptured&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics_GaiaPasswordCaptured& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEventSpecifics_GaiaPasswordCaptured* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_GaiaPasswordCaptured*>(
               &_UserEventSpecifics_GaiaPasswordCaptured_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserEventSpecifics_GaiaPasswordCaptured& a, UserEventSpecifics_GaiaPasswordCaptured& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEventSpecifics_GaiaPasswordCaptured* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEventSpecifics_GaiaPasswordCaptured* New() const final {
    return CreateMaybeMessage<UserEventSpecifics_GaiaPasswordCaptured>(nullptr);
  }

  UserEventSpecifics_GaiaPasswordCaptured* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEventSpecifics_GaiaPasswordCaptured>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserEventSpecifics_GaiaPasswordCaptured& from);
  void MergeFrom(const UserEventSpecifics_GaiaPasswordCaptured& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_GaiaPasswordCaptured* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.GaiaPasswordCaptured";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_GaiaPasswordCaptured_EventTrigger EventTrigger;
  static constexpr EventTrigger UNSPECIFIED =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_UNSPECIFIED;
  static constexpr EventTrigger USER_LOGGED_IN =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_USER_LOGGED_IN;
  static constexpr EventTrigger EXPIRED_28D_TIMER =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EXPIRED_28D_TIMER;
  static inline bool EventTrigger_IsValid(int value) {
    return UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_IsValid(value);
  }
  static constexpr EventTrigger EventTrigger_MIN =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_MIN;
  static constexpr EventTrigger EventTrigger_MAX =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_MAX;
  static constexpr int EventTrigger_ARRAYSIZE =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EventTrigger_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventTrigger>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventTrigger_Name.");
    return UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name(enum_t_value);
  }
  static inline bool EventTrigger_Parse(const std::string& name,
      EventTrigger* value) {
    return UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventTriggerFieldNumber = 1,
  };
  // optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured.EventTrigger event_trigger = 1;
  bool has_event_trigger() const;
  void clear_event_trigger();
  ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger event_trigger() const;
  void set_event_trigger(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int event_trigger_;
  friend struct ::TableStruct_user_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics) */ {
 public:
  UserEventSpecifics();
  virtual ~UserEventSpecifics();

  UserEventSpecifics(const UserEventSpecifics& from);
  UserEventSpecifics(UserEventSpecifics&& from) noexcept
    : UserEventSpecifics() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics& operator=(const UserEventSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics& operator=(UserEventSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserEventSpecifics& default_instance();

  enum EventCase {
    kTestEvent = 8,
    kFieldTrialEvent = 9,
    kLanguageDetectionEvent = 10,
    kTranslationEvent = 11,
    kUserConsent = 12,
    kGaiaPasswordReuseEvent = 104,
    kGaiaPasswordCapturedEvent = 15,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserEventSpecifics* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics*>(
               &_UserEventSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserEventSpecifics& a, UserEventSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEventSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEventSpecifics* New() const final {
    return CreateMaybeMessage<UserEventSpecifics>(nullptr);
  }

  UserEventSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEventSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserEventSpecifics& from);
  void MergeFrom(const UserEventSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_Test Test;
  typedef UserEventSpecifics_FieldTrial FieldTrial;
  typedef UserEventSpecifics_LanguageDetection LanguageDetection;
  typedef UserEventSpecifics_Translation Translation;
  typedef UserEventSpecifics_UserConsent UserConsent;
  typedef UserEventSpecifics_GaiaPasswordCaptured GaiaPasswordCaptured;

  // accessors -------------------------------------------------------

  enum : int {
    kEventTimeUsecFieldNumber = 1,
    kNavigationIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kTestEventFieldNumber = 8,
    kFieldTrialEventFieldNumber = 9,
    kLanguageDetectionEventFieldNumber = 10,
    kTranslationEventFieldNumber = 11,
    kUserConsentFieldNumber = 12,
    kGaiaPasswordReuseEventFieldNumber = 104,
    kGaiaPasswordCapturedEventFieldNumber = 15,
  };
  // optional int64 event_time_usec = 1;
  bool has_event_time_usec() const;
  void clear_event_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 event_time_usec() const;
  void set_event_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 navigation_id = 2;
  bool has_navigation_id() const;
  void clear_navigation_id();
  ::PROTOBUF_NAMESPACE_ID::int64 navigation_id() const;
  void set_navigation_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional fixed64 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .sync_pb.UserEventSpecifics.Test test_event = 8;
  bool has_test_event() const;
  void clear_test_event();
  const ::sync_pb::UserEventSpecifics_Test& test_event() const;
  ::sync_pb::UserEventSpecifics_Test* release_test_event();
  ::sync_pb::UserEventSpecifics_Test* mutable_test_event();
  void set_allocated_test_event(::sync_pb::UserEventSpecifics_Test* test_event);

  // optional .sync_pb.UserEventSpecifics.FieldTrial field_trial_event = 9;
  bool has_field_trial_event() const;
  void clear_field_trial_event();
  const ::sync_pb::UserEventSpecifics_FieldTrial& field_trial_event() const;
  ::sync_pb::UserEventSpecifics_FieldTrial* release_field_trial_event();
  ::sync_pb::UserEventSpecifics_FieldTrial* mutable_field_trial_event();
  void set_allocated_field_trial_event(::sync_pb::UserEventSpecifics_FieldTrial* field_trial_event);

  // optional .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10;
  bool has_language_detection_event() const;
  void clear_language_detection_event();
  const ::sync_pb::UserEventSpecifics_LanguageDetection& language_detection_event() const;
  ::sync_pb::UserEventSpecifics_LanguageDetection* release_language_detection_event();
  ::sync_pb::UserEventSpecifics_LanguageDetection* mutable_language_detection_event();
  void set_allocated_language_detection_event(::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event);

  // optional .sync_pb.UserEventSpecifics.Translation translation_event = 11;
  bool has_translation_event() const;
  void clear_translation_event();
  const ::sync_pb::UserEventSpecifics_Translation& translation_event() const;
  ::sync_pb::UserEventSpecifics_Translation* release_translation_event();
  ::sync_pb::UserEventSpecifics_Translation* mutable_translation_event();
  void set_allocated_translation_event(::sync_pb::UserEventSpecifics_Translation* translation_event);

  // optional .sync_pb.UserEventSpecifics.UserConsent user_consent = 12;
  bool has_user_consent() const;
  void clear_user_consent();
  const ::sync_pb::UserEventSpecifics_UserConsent& user_consent() const;
  ::sync_pb::UserEventSpecifics_UserConsent* release_user_consent();
  ::sync_pb::UserEventSpecifics_UserConsent* mutable_user_consent();
  void set_allocated_user_consent(::sync_pb::UserEventSpecifics_UserConsent* user_consent);

  // optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 104;
  bool has_gaia_password_reuse_event() const;
  void clear_gaia_password_reuse_event();
  const ::sync_pb::GaiaPasswordReuse& gaia_password_reuse_event() const;
  ::sync_pb::GaiaPasswordReuse* release_gaia_password_reuse_event();
  ::sync_pb::GaiaPasswordReuse* mutable_gaia_password_reuse_event();
  void set_allocated_gaia_password_reuse_event(::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event);

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured gaia_password_captured_event = 15;
  bool has_gaia_password_captured_event() const;
  void clear_gaia_password_captured_event();
  const ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured& gaia_password_captured_event() const;
  ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* release_gaia_password_captured_event();
  ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* mutable_gaia_password_captured_event();
  void set_allocated_gaia_password_captured_event(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* gaia_password_captured_event);

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics)
 private:
  class _Internal;
  void set_has_test_event();
  void set_has_field_trial_event();
  void set_has_language_detection_event();
  void set_has_translation_event();
  void set_has_user_consent();
  void set_has_gaia_password_reuse_event();
  void set_has_gaia_password_captured_event();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 event_time_usec_;
  ::PROTOBUF_NAMESPACE_ID::int64 navigation_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  union EventUnion {
    EventUnion() {}
    ::sync_pb::UserEventSpecifics_Test* test_event_;
    ::sync_pb::UserEventSpecifics_FieldTrial* field_trial_event_;
    ::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event_;
    ::sync_pb::UserEventSpecifics_Translation* translation_event_;
    ::sync_pb::UserEventSpecifics_UserConsent* user_consent_;
    ::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event_;
    ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* gaia_password_captured_event_;
  } event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_user_5fevent_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserEventSpecifics_Test

// -------------------------------------------------------------------

// UserEventSpecifics_FieldTrial

// repeated fixed32 variation_ids = 1;
inline int UserEventSpecifics_FieldTrial::variation_ids_size() const {
  return variation_ids_.size();
}
inline void UserEventSpecifics_FieldTrial::clear_variation_ids() {
  variation_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserEventSpecifics_FieldTrial::variation_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
  return variation_ids_.Get(index);
}
inline void UserEventSpecifics_FieldTrial::set_variation_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  variation_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
}
inline void UserEventSpecifics_FieldTrial::add_variation_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  variation_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UserEventSpecifics_FieldTrial::variation_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
  return variation_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UserEventSpecifics_FieldTrial::mutable_variation_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
  return &variation_ids_;
}

// -------------------------------------------------------------------

// UserEventSpecifics_LanguageDetection_Language

// optional string language_code = 1;
inline bool UserEventSpecifics_LanguageDetection_Language::has_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_LanguageDetection_Language::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserEventSpecifics_LanguageDetection_Language::language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  return language_code_.GetNoArena();
}
inline void UserEventSpecifics_LanguageDetection_Language::set_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
inline void UserEventSpecifics_LanguageDetection_Language::set_language_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
inline void UserEventSpecifics_LanguageDetection_Language::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
inline void UserEventSpecifics_LanguageDetection_Language::set_language_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
inline std::string* UserEventSpecifics_LanguageDetection_Language::mutable_language_code() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  return language_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserEventSpecifics_LanguageDetection_Language::release_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  if (!has_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_LanguageDetection_Language::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}

// optional bool is_reliable = 2;
inline bool UserEventSpecifics_LanguageDetection_Language::has_is_reliable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics_LanguageDetection_Language::clear_is_reliable() {
  is_reliable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool UserEventSpecifics_LanguageDetection_Language::is_reliable() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.Language.is_reliable)
  return is_reliable_;
}
inline void UserEventSpecifics_LanguageDetection_Language::set_is_reliable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_reliable_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.Language.is_reliable)
}

// -------------------------------------------------------------------

// UserEventSpecifics_LanguageDetection

// repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
inline int UserEventSpecifics_LanguageDetection::detected_languages_size() const {
  return detected_languages_.size();
}
inline void UserEventSpecifics_LanguageDetection::clear_detected_languages() {
  detected_languages_.Clear();
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection_Language* UserEventSpecifics_LanguageDetection::mutable_detected_languages(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >*
UserEventSpecifics_LanguageDetection::mutable_detected_languages() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return &detected_languages_;
}
inline const ::sync_pb::UserEventSpecifics_LanguageDetection_Language& UserEventSpecifics_LanguageDetection::detected_languages(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_.Get(index);
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection_Language* UserEventSpecifics_LanguageDetection::add_detected_languages() {
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >&
UserEventSpecifics_LanguageDetection::detected_languages() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_;
}

// optional string adopted_language_code = 2;
inline bool UserEventSpecifics_LanguageDetection::has_adopted_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_LanguageDetection::clear_adopted_language_code() {
  adopted_language_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserEventSpecifics_LanguageDetection::adopted_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  return adopted_language_code_.GetNoArena();
}
inline void UserEventSpecifics_LanguageDetection::set_adopted_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  adopted_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
inline void UserEventSpecifics_LanguageDetection::set_adopted_language_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  adopted_language_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
inline void UserEventSpecifics_LanguageDetection::set_adopted_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  adopted_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
inline void UserEventSpecifics_LanguageDetection::set_adopted_language_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  adopted_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
inline std::string* UserEventSpecifics_LanguageDetection::mutable_adopted_language_code() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  return adopted_language_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserEventSpecifics_LanguageDetection::release_adopted_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  if (!has_adopted_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return adopted_language_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_LanguageDetection::set_allocated_adopted_language_code(std::string* adopted_language_code) {
  if (adopted_language_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  adopted_language_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), adopted_language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}

// -------------------------------------------------------------------

// UserEventSpecifics_Translation

// optional string from_language_code = 1;
inline bool UserEventSpecifics_Translation::has_from_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_Translation::clear_from_language_code() {
  from_language_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserEventSpecifics_Translation::from_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.from_language_code)
  return from_language_code_.GetNoArena();
}
inline void UserEventSpecifics_Translation::set_from_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
inline void UserEventSpecifics_Translation::set_from_language_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_language_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
inline void UserEventSpecifics_Translation::set_from_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
inline void UserEventSpecifics_Translation::set_from_language_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
inline std::string* UserEventSpecifics_Translation::mutable_from_language_code() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.Translation.from_language_code)
  return from_language_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserEventSpecifics_Translation::release_from_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.Translation.from_language_code)
  if (!has_from_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_language_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_Translation::set_allocated_from_language_code(std::string* from_language_code) {
  if (from_language_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_language_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.Translation.from_language_code)
}

// optional string to_language_code = 2;
inline bool UserEventSpecifics_Translation::has_to_language_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics_Translation::clear_to_language_code() {
  to_language_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserEventSpecifics_Translation::to_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.to_language_code)
  return to_language_code_.GetNoArena();
}
inline void UserEventSpecifics_Translation::set_to_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
inline void UserEventSpecifics_Translation::set_to_language_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_language_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
inline void UserEventSpecifics_Translation::set_to_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
inline void UserEventSpecifics_Translation::set_to_language_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
inline std::string* UserEventSpecifics_Translation::mutable_to_language_code() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.Translation.to_language_code)
  return to_language_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserEventSpecifics_Translation::release_to_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.Translation.to_language_code)
  if (!has_to_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_language_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_Translation::set_allocated_to_language_code(std::string* to_language_code) {
  if (to_language_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_language_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.Translation.to_language_code)
}

// optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
inline bool UserEventSpecifics_Translation::has_interaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEventSpecifics_Translation::clear_interaction() {
  interaction_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::interaction() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.interaction)
  return static_cast< ::sync_pb::UserEventSpecifics_Translation_Interaction >(interaction_);
}
inline void UserEventSpecifics_Translation::set_interaction(::sync_pb::UserEventSpecifics_Translation_Interaction value) {
  assert(::sync_pb::UserEventSpecifics_Translation_Interaction_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  interaction_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.interaction)
}

// -------------------------------------------------------------------

// UserEventSpecifics_UserConsent

// optional string locale = 4;
inline bool UserEventSpecifics_UserConsent::has_locale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_UserConsent::clear_locale() {
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserEventSpecifics_UserConsent::locale() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.locale)
  return locale_.GetNoArena();
}
inline void UserEventSpecifics_UserConsent::set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.locale)
}
inline void UserEventSpecifics_UserConsent::set_locale(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  locale_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.UserConsent.locale)
}
inline void UserEventSpecifics_UserConsent::set_locale(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.UserConsent.locale)
}
inline void UserEventSpecifics_UserConsent::set_locale(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.UserConsent.locale)
}
inline std::string* UserEventSpecifics_UserConsent::mutable_locale() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.locale)
  return locale_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserEventSpecifics_UserConsent::release_locale() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.locale)
  if (!has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return locale_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_UserConsent::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  locale_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.locale)
}

// optional int64 client_consent_time_usec = 12;
inline bool UserEventSpecifics_UserConsent::has_client_consent_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserEventSpecifics_UserConsent::clear_client_consent_time_usec() {
  client_consent_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserEventSpecifics_UserConsent::client_consent_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.client_consent_time_usec)
  return client_consent_time_usec_;
}
inline void UserEventSpecifics_UserConsent::set_client_consent_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  client_consent_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.client_consent_time_usec)
}

// optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
inline bool UserEventSpecifics_UserConsent::has_sync_consent() const {
  return consent_case() == kSyncConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_sync_consent() {
  _oneof_case_[0] = kSyncConsent;
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserEventSpecifics_UserConsent::release_sync_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  if (has_sync_consent()) {
    clear_has_consent();
      ::sync_pb::UserConsentTypes_SyncConsent* temp = consent_.sync_consent_;
    consent_.sync_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_SyncConsent& UserEventSpecifics_UserConsent::sync_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  return has_sync_consent()
      ? *consent_.sync_consent_
      : *reinterpret_cast< ::sync_pb::UserConsentTypes_SyncConsent*>(&::sync_pb::_UserConsentTypes_SyncConsent_default_instance_);
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserEventSpecifics_UserConsent::mutable_sync_consent() {
  if (!has_sync_consent()) {
    clear_consent();
    set_has_sync_consent();
    consent_.sync_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_SyncConsent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  return consent_.sync_consent_;
}

// optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
inline bool UserEventSpecifics_UserConsent::has_arc_backup_and_restore_consent() const {
  return consent_case() == kArcBackupAndRestoreConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_arc_backup_and_restore_consent() {
  _oneof_case_[0] = kArcBackupAndRestoreConsent;
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserEventSpecifics_UserConsent::release_arc_backup_and_restore_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  if (has_arc_backup_and_restore_consent()) {
    clear_has_consent();
      ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* temp = consent_.arc_backup_and_restore_consent_;
    consent_.arc_backup_and_restore_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& UserEventSpecifics_UserConsent::arc_backup_and_restore_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  return has_arc_backup_and_restore_consent()
      ? *consent_.arc_backup_and_restore_consent_
      : *reinterpret_cast< ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent*>(&::sync_pb::_UserConsentTypes_ArcBackupAndRestoreConsent_default_instance_);
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserEventSpecifics_UserConsent::mutable_arc_backup_and_restore_consent() {
  if (!has_arc_backup_and_restore_consent()) {
    clear_consent();
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  return consent_.arc_backup_and_restore_consent_;
}

// optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
inline bool UserEventSpecifics_UserConsent::has_arc_location_service_consent() const {
  return consent_case() == kArcLocationServiceConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_arc_location_service_consent() {
  _oneof_case_[0] = kArcLocationServiceConsent;
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserEventSpecifics_UserConsent::release_arc_location_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  if (has_arc_location_service_consent()) {
    clear_has_consent();
      ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* temp = consent_.arc_location_service_consent_;
    consent_.arc_location_service_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& UserEventSpecifics_UserConsent::arc_location_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  return has_arc_location_service_consent()
      ? *consent_.arc_location_service_consent_
      : *reinterpret_cast< ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent*>(&::sync_pb::_UserConsentTypes_ArcGoogleLocationServiceConsent_default_instance_);
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserEventSpecifics_UserConsent::mutable_arc_location_service_consent() {
  if (!has_arc_location_service_consent()) {
    clear_consent();
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  return consent_.arc_location_service_consent_;
}

// optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
inline bool UserEventSpecifics_UserConsent::has_arc_play_terms_of_service_consent() const {
  return consent_case() == kArcPlayTermsOfServiceConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_arc_play_terms_of_service_consent() {
  _oneof_case_[0] = kArcPlayTermsOfServiceConsent;
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserEventSpecifics_UserConsent::release_arc_play_terms_of_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  if (has_arc_play_terms_of_service_consent()) {
    clear_has_consent();
      ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* temp = consent_.arc_play_terms_of_service_consent_;
    consent_.arc_play_terms_of_service_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& UserEventSpecifics_UserConsent::arc_play_terms_of_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  return has_arc_play_terms_of_service_consent()
      ? *consent_.arc_play_terms_of_service_consent_
      : *reinterpret_cast< ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent*>(&::sync_pb::_UserConsentTypes_ArcPlayTermsOfServiceConsent_default_instance_);
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserEventSpecifics_UserConsent::mutable_arc_play_terms_of_service_consent() {
  if (!has_arc_play_terms_of_service_consent()) {
    clear_consent();
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  return consent_.arc_play_terms_of_service_consent_;
}

// optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
inline bool UserEventSpecifics_UserConsent::has_arc_metrics_and_usage_consent() const {
  return consent_case() == kArcMetricsAndUsageConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_arc_metrics_and_usage_consent() {
  _oneof_case_[0] = kArcMetricsAndUsageConsent;
}
inline ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* UserEventSpecifics_UserConsent::release_arc_metrics_and_usage_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
  if (has_arc_metrics_and_usage_consent()) {
    clear_has_consent();
      ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* temp = consent_.arc_metrics_and_usage_consent_;
    consent_.arc_metrics_and_usage_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent& UserEventSpecifics_UserConsent::arc_metrics_and_usage_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
  return has_arc_metrics_and_usage_consent()
      ? *consent_.arc_metrics_and_usage_consent_
      : *reinterpret_cast< ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent*>(&::sync_pb::_UserConsentTypes_ArcMetricsAndUsageConsent_default_instance_);
}
inline ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* UserEventSpecifics_UserConsent::mutable_arc_metrics_and_usage_consent() {
  if (!has_arc_metrics_and_usage_consent()) {
    clear_consent();
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
  return consent_.arc_metrics_and_usage_consent_;
}

// optional .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
inline bool UserEventSpecifics_UserConsent::has_unified_consent() const {
  return consent_case() == kUnifiedConsent;
}
inline void UserEventSpecifics_UserConsent::set_has_unified_consent() {
  _oneof_case_[0] = kUnifiedConsent;
}
inline ::sync_pb::UserConsentTypes_UnifiedConsent* UserEventSpecifics_UserConsent::release_unified_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.unified_consent)
  if (has_unified_consent()) {
    clear_has_consent();
      ::sync_pb::UserConsentTypes_UnifiedConsent* temp = consent_.unified_consent_;
    consent_.unified_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_UnifiedConsent& UserEventSpecifics_UserConsent::unified_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.unified_consent)
  return has_unified_consent()
      ? *consent_.unified_consent_
      : *reinterpret_cast< ::sync_pb::UserConsentTypes_UnifiedConsent*>(&::sync_pb::_UserConsentTypes_UnifiedConsent_default_instance_);
}
inline ::sync_pb::UserConsentTypes_UnifiedConsent* UserEventSpecifics_UserConsent::mutable_unified_consent() {
  if (!has_unified_consent()) {
    clear_consent();
    set_has_unified_consent();
    consent_.unified_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_UnifiedConsent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.unified_consent)
  return consent_.unified_consent_;
}

// optional string account_id = 6;
inline bool UserEventSpecifics_UserConsent::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics_UserConsent::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserEventSpecifics_UserConsent::account_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.account_id)
  return account_id_.GetNoArena();
}
inline void UserEventSpecifics_UserConsent::set_account_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
inline void UserEventSpecifics_UserConsent::set_account_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
inline void UserEventSpecifics_UserConsent::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
inline void UserEventSpecifics_UserConsent::set_account_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
inline std::string* UserEventSpecifics_UserConsent::mutable_account_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserEventSpecifics_UserConsent::release_account_id() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.account_id)
  if (!has_account_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return account_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserEventSpecifics_UserConsent::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.account_id)
}

// optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
inline bool UserEventSpecifics_UserConsent::has_feature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEventSpecifics_UserConsent::clear_feature() {
  feature_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::feature() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.feature)
  return static_cast< ::sync_pb::UserEventSpecifics_UserConsent_Feature >(feature_);
}
inline void UserEventSpecifics_UserConsent::set_feature(::sync_pb::UserEventSpecifics_UserConsent_Feature value) {
  assert(::sync_pb::UserEventSpecifics_UserConsent_Feature_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  feature_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.feature)
}

// repeated int32 description_grd_ids = 2 [deprecated = true];
inline int UserEventSpecifics_UserConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserEventSpecifics_UserConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEventSpecifics_UserConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserEventSpecifics_UserConsent::set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
}
inline void UserEventSpecifics_UserConsent::add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserEventSpecifics_UserConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserEventSpecifics_UserConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 3 [deprecated = true];
inline bool UserEventSpecifics_UserConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserEventSpecifics_UserConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEventSpecifics_UserConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserEventSpecifics_UserConsent::set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
inline bool UserEventSpecifics_UserConsent::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserEventSpecifics_UserConsent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserEventSpecifics_UserConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserEventSpecifics_UserConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.status)
}

inline bool UserEventSpecifics_UserConsent::has_consent() const {
  return consent_case() != CONSENT_NOT_SET;
}
inline void UserEventSpecifics_UserConsent::clear_has_consent() {
  _oneof_case_[0] = CONSENT_NOT_SET;
}
inline UserEventSpecifics_UserConsent::ConsentCase UserEventSpecifics_UserConsent::consent_case() const {
  return UserEventSpecifics_UserConsent::ConsentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserEventSpecifics_GaiaPasswordCaptured

// optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured.EventTrigger event_trigger = 1;
inline bool UserEventSpecifics_GaiaPasswordCaptured::has_event_trigger() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics_GaiaPasswordCaptured::clear_event_trigger() {
  event_trigger_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured::event_trigger() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordCaptured.event_trigger)
  return static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger >(event_trigger_);
}
inline void UserEventSpecifics_GaiaPasswordCaptured::set_event_trigger(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger value) {
  assert(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  event_trigger_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordCaptured.event_trigger)
}

// -------------------------------------------------------------------

// UserEventSpecifics

// optional int64 event_time_usec = 1;
inline bool UserEventSpecifics::has_event_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEventSpecifics::clear_event_time_usec() {
  event_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserEventSpecifics::event_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.event_time_usec)
  return event_time_usec_;
}
inline void UserEventSpecifics::set_event_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  event_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.event_time_usec)
}

// optional int64 navigation_id = 2;
inline bool UserEventSpecifics::has_navigation_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserEventSpecifics::clear_navigation_id() {
  navigation_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserEventSpecifics::navigation_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.navigation_id)
  return navigation_id_;
}
inline void UserEventSpecifics::set_navigation_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  navigation_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.navigation_id)
}

// optional fixed64 session_id = 3;
inline bool UserEventSpecifics::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserEventSpecifics::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserEventSpecifics::session_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.session_id)
  return session_id_;
}
inline void UserEventSpecifics::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  session_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.session_id)
}

// optional .sync_pb.UserEventSpecifics.Test test_event = 8;
inline bool UserEventSpecifics::has_test_event() const {
  return event_case() == kTestEvent;
}
inline void UserEventSpecifics::set_has_test_event() {
  _oneof_case_[0] = kTestEvent;
}
inline void UserEventSpecifics::clear_test_event() {
  if (has_test_event()) {
    delete event_.test_event_;
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_Test* UserEventSpecifics::release_test_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.test_event)
  if (has_test_event()) {
    clear_has_event();
      ::sync_pb::UserEventSpecifics_Test* temp = event_.test_event_;
    event_.test_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_Test& UserEventSpecifics::test_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.test_event)
  return has_test_event()
      ? *event_.test_event_
      : *reinterpret_cast< ::sync_pb::UserEventSpecifics_Test*>(&::sync_pb::_UserEventSpecifics_Test_default_instance_);
}
inline ::sync_pb::UserEventSpecifics_Test* UserEventSpecifics::mutable_test_event() {
  if (!has_test_event()) {
    clear_event();
    set_has_test_event();
    event_.test_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_Test >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.test_event)
  return event_.test_event_;
}

// optional .sync_pb.UserEventSpecifics.FieldTrial field_trial_event = 9;
inline bool UserEventSpecifics::has_field_trial_event() const {
  return event_case() == kFieldTrialEvent;
}
inline void UserEventSpecifics::set_has_field_trial_event() {
  _oneof_case_[0] = kFieldTrialEvent;
}
inline void UserEventSpecifics::clear_field_trial_event() {
  if (has_field_trial_event()) {
    delete event_.field_trial_event_;
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_FieldTrial* UserEventSpecifics::release_field_trial_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.field_trial_event)
  if (has_field_trial_event()) {
    clear_has_event();
      ::sync_pb::UserEventSpecifics_FieldTrial* temp = event_.field_trial_event_;
    event_.field_trial_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_FieldTrial& UserEventSpecifics::field_trial_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.field_trial_event)
  return has_field_trial_event()
      ? *event_.field_trial_event_
      : *reinterpret_cast< ::sync_pb::UserEventSpecifics_FieldTrial*>(&::sync_pb::_UserEventSpecifics_FieldTrial_default_instance_);
}
inline ::sync_pb::UserEventSpecifics_FieldTrial* UserEventSpecifics::mutable_field_trial_event() {
  if (!has_field_trial_event()) {
    clear_event();
    set_has_field_trial_event();
    event_.field_trial_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_FieldTrial >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.field_trial_event)
  return event_.field_trial_event_;
}

// optional .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10;
inline bool UserEventSpecifics::has_language_detection_event() const {
  return event_case() == kLanguageDetectionEvent;
}
inline void UserEventSpecifics::set_has_language_detection_event() {
  _oneof_case_[0] = kLanguageDetectionEvent;
}
inline void UserEventSpecifics::clear_language_detection_event() {
  if (has_language_detection_event()) {
    delete event_.language_detection_event_;
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection* UserEventSpecifics::release_language_detection_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.language_detection_event)
  if (has_language_detection_event()) {
    clear_has_event();
      ::sync_pb::UserEventSpecifics_LanguageDetection* temp = event_.language_detection_event_;
    event_.language_detection_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_LanguageDetection& UserEventSpecifics::language_detection_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.language_detection_event)
  return has_language_detection_event()
      ? *event_.language_detection_event_
      : *reinterpret_cast< ::sync_pb::UserEventSpecifics_LanguageDetection*>(&::sync_pb::_UserEventSpecifics_LanguageDetection_default_instance_);
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection* UserEventSpecifics::mutable_language_detection_event() {
  if (!has_language_detection_event()) {
    clear_event();
    set_has_language_detection_event();
    event_.language_detection_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_LanguageDetection >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.language_detection_event)
  return event_.language_detection_event_;
}

// optional .sync_pb.UserEventSpecifics.Translation translation_event = 11;
inline bool UserEventSpecifics::has_translation_event() const {
  return event_case() == kTranslationEvent;
}
inline void UserEventSpecifics::set_has_translation_event() {
  _oneof_case_[0] = kTranslationEvent;
}
inline void UserEventSpecifics::clear_translation_event() {
  if (has_translation_event()) {
    delete event_.translation_event_;
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_Translation* UserEventSpecifics::release_translation_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.translation_event)
  if (has_translation_event()) {
    clear_has_event();
      ::sync_pb::UserEventSpecifics_Translation* temp = event_.translation_event_;
    event_.translation_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_Translation& UserEventSpecifics::translation_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.translation_event)
  return has_translation_event()
      ? *event_.translation_event_
      : *reinterpret_cast< ::sync_pb::UserEventSpecifics_Translation*>(&::sync_pb::_UserEventSpecifics_Translation_default_instance_);
}
inline ::sync_pb::UserEventSpecifics_Translation* UserEventSpecifics::mutable_translation_event() {
  if (!has_translation_event()) {
    clear_event();
    set_has_translation_event();
    event_.translation_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_Translation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.translation_event)
  return event_.translation_event_;
}

// optional .sync_pb.UserEventSpecifics.UserConsent user_consent = 12;
inline bool UserEventSpecifics::has_user_consent() const {
  return event_case() == kUserConsent;
}
inline void UserEventSpecifics::set_has_user_consent() {
  _oneof_case_[0] = kUserConsent;
}
inline void UserEventSpecifics::clear_user_consent() {
  if (has_user_consent()) {
    delete event_.user_consent_;
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_UserConsent* UserEventSpecifics::release_user_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.user_consent)
  if (has_user_consent()) {
    clear_has_event();
      ::sync_pb::UserEventSpecifics_UserConsent* temp = event_.user_consent_;
    event_.user_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_UserConsent& UserEventSpecifics::user_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.user_consent)
  return has_user_consent()
      ? *event_.user_consent_
      : *reinterpret_cast< ::sync_pb::UserEventSpecifics_UserConsent*>(&::sync_pb::_UserEventSpecifics_UserConsent_default_instance_);
}
inline ::sync_pb::UserEventSpecifics_UserConsent* UserEventSpecifics::mutable_user_consent() {
  if (!has_user_consent()) {
    clear_event();
    set_has_user_consent();
    event_.user_consent_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_UserConsent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.user_consent)
  return event_.user_consent_;
}

// optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 104;
inline bool UserEventSpecifics::has_gaia_password_reuse_event() const {
  return event_case() == kGaiaPasswordReuseEvent;
}
inline void UserEventSpecifics::set_has_gaia_password_reuse_event() {
  _oneof_case_[0] = kGaiaPasswordReuseEvent;
}
inline ::sync_pb::GaiaPasswordReuse* UserEventSpecifics::release_gaia_password_reuse_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  if (has_gaia_password_reuse_event()) {
    clear_has_event();
      ::sync_pb::GaiaPasswordReuse* temp = event_.gaia_password_reuse_event_;
    event_.gaia_password_reuse_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::GaiaPasswordReuse& UserEventSpecifics::gaia_password_reuse_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  return has_gaia_password_reuse_event()
      ? *event_.gaia_password_reuse_event_
      : *reinterpret_cast< ::sync_pb::GaiaPasswordReuse*>(&::sync_pb::_GaiaPasswordReuse_default_instance_);
}
inline ::sync_pb::GaiaPasswordReuse* UserEventSpecifics::mutable_gaia_password_reuse_event() {
  if (!has_gaia_password_reuse_event()) {
    clear_event();
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = CreateMaybeMessage< ::sync_pb::GaiaPasswordReuse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  return event_.gaia_password_reuse_event_;
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured gaia_password_captured_event = 15;
inline bool UserEventSpecifics::has_gaia_password_captured_event() const {
  return event_case() == kGaiaPasswordCapturedEvent;
}
inline void UserEventSpecifics::set_has_gaia_password_captured_event() {
  _oneof_case_[0] = kGaiaPasswordCapturedEvent;
}
inline void UserEventSpecifics::clear_gaia_password_captured_event() {
  if (has_gaia_password_captured_event()) {
    delete event_.gaia_password_captured_event_;
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* UserEventSpecifics::release_gaia_password_captured_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.gaia_password_captured_event)
  if (has_gaia_password_captured_event()) {
    clear_has_event();
      ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* temp = event_.gaia_password_captured_event_;
    event_.gaia_password_captured_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured& UserEventSpecifics::gaia_password_captured_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.gaia_password_captured_event)
  return has_gaia_password_captured_event()
      ? *event_.gaia_password_captured_event_
      : *reinterpret_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured*>(&::sync_pb::_UserEventSpecifics_GaiaPasswordCaptured_default_instance_);
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* UserEventSpecifics::mutable_gaia_password_captured_event() {
  if (!has_gaia_password_captured_event()) {
    clear_event();
    set_has_gaia_password_captured_event();
    event_.gaia_password_captured_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.gaia_password_captured_event)
  return event_.gaia_password_captured_event_;
}

inline bool UserEventSpecifics::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void UserEventSpecifics::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline UserEventSpecifics::EventCase UserEventSpecifics::event_case() const {
  return UserEventSpecifics::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_Translation_Interaction> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_UserConsent_Feature> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5fevent_5fspecifics_2eproto
