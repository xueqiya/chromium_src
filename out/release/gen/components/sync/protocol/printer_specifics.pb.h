// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: printer_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_printer_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_printer_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_printer_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_printer_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class PrinterPPDReference;
class PrinterPPDReferenceDefaultTypeInternal;
extern PrinterPPDReferenceDefaultTypeInternal _PrinterPPDReference_default_instance_;
class PrinterSpecifics;
class PrinterSpecificsDefaultTypeInternal;
extern PrinterSpecificsDefaultTypeInternal _PrinterSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::PrinterPPDReference* Arena::CreateMaybeMessage<::sync_pb::PrinterPPDReference>(Arena*);
template<> ::sync_pb::PrinterSpecifics* Arena::CreateMaybeMessage<::sync_pb::PrinterSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class PrinterPPDReference :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PrinterPPDReference) */ {
 public:
  PrinterPPDReference();
  virtual ~PrinterPPDReference();

  PrinterPPDReference(const PrinterPPDReference& from);
  PrinterPPDReference(PrinterPPDReference&& from) noexcept
    : PrinterPPDReference() {
    *this = ::std::move(from);
  }

  inline PrinterPPDReference& operator=(const PrinterPPDReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterPPDReference& operator=(PrinterPPDReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PrinterPPDReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrinterPPDReference* internal_default_instance() {
    return reinterpret_cast<const PrinterPPDReference*>(
               &_PrinterPPDReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrinterPPDReference& a, PrinterPPDReference& b) {
    a.Swap(&b);
  }
  inline void Swap(PrinterPPDReference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrinterPPDReference* New() const final {
    return CreateMaybeMessage<PrinterPPDReference>(nullptr);
  }

  PrinterPPDReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrinterPPDReference>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PrinterPPDReference& from);
  void MergeFrom(const PrinterPPDReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrinterPPDReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PrinterPPDReference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedPpdUrlFieldNumber = 1,
    kEffectiveManufacturerFieldNumber = 2,
    kEffectiveModelFieldNumber = 3,
    kEffectiveMakeAndModelFieldNumber = 4,
    kAutoconfFieldNumber = 5,
  };
  // optional string user_supplied_ppd_url = 1;
  bool has_user_supplied_ppd_url() const;
  void clear_user_supplied_ppd_url();
  const std::string& user_supplied_ppd_url() const;
  void set_user_supplied_ppd_url(const std::string& value);
  void set_user_supplied_ppd_url(std::string&& value);
  void set_user_supplied_ppd_url(const char* value);
  void set_user_supplied_ppd_url(const char* value, size_t size);
  std::string* mutable_user_supplied_ppd_url();
  std::string* release_user_supplied_ppd_url();
  void set_allocated_user_supplied_ppd_url(std::string* user_supplied_ppd_url);

  // optional string effective_manufacturer = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_effective_manufacturer() const;
  PROTOBUF_DEPRECATED void clear_effective_manufacturer();
  PROTOBUF_DEPRECATED const std::string& effective_manufacturer() const;
  PROTOBUF_DEPRECATED void set_effective_manufacturer(const std::string& value);
  PROTOBUF_DEPRECATED void set_effective_manufacturer(std::string&& value);
  PROTOBUF_DEPRECATED void set_effective_manufacturer(const char* value);
  PROTOBUF_DEPRECATED void set_effective_manufacturer(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_effective_manufacturer();
  PROTOBUF_DEPRECATED std::string* release_effective_manufacturer();
  PROTOBUF_DEPRECATED void set_allocated_effective_manufacturer(std::string* effective_manufacturer);

  // optional string effective_model = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_effective_model() const;
  PROTOBUF_DEPRECATED void clear_effective_model();
  PROTOBUF_DEPRECATED const std::string& effective_model() const;
  PROTOBUF_DEPRECATED void set_effective_model(const std::string& value);
  PROTOBUF_DEPRECATED void set_effective_model(std::string&& value);
  PROTOBUF_DEPRECATED void set_effective_model(const char* value);
  PROTOBUF_DEPRECATED void set_effective_model(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_effective_model();
  PROTOBUF_DEPRECATED std::string* release_effective_model();
  PROTOBUF_DEPRECATED void set_allocated_effective_model(std::string* effective_model);

  // optional string effective_make_and_model = 4;
  bool has_effective_make_and_model() const;
  void clear_effective_make_and_model();
  const std::string& effective_make_and_model() const;
  void set_effective_make_and_model(const std::string& value);
  void set_effective_make_and_model(std::string&& value);
  void set_effective_make_and_model(const char* value);
  void set_effective_make_and_model(const char* value, size_t size);
  std::string* mutable_effective_make_and_model();
  std::string* release_effective_make_and_model();
  void set_allocated_effective_make_and_model(std::string* effective_make_and_model);

  // optional bool autoconf = 5 [default = false];
  bool has_autoconf() const;
  void clear_autoconf();
  bool autoconf() const;
  void set_autoconf(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.PrinterPPDReference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_supplied_ppd_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effective_manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effective_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effective_make_and_model_;
  bool autoconf_;
  friend struct ::TableStruct_printer_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PrinterSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PrinterSpecifics) */ {
 public:
  PrinterSpecifics();
  virtual ~PrinterSpecifics();

  PrinterSpecifics(const PrinterSpecifics& from);
  PrinterSpecifics(PrinterSpecifics&& from) noexcept
    : PrinterSpecifics() {
    *this = ::std::move(from);
  }

  inline PrinterSpecifics& operator=(const PrinterSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterSpecifics& operator=(PrinterSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PrinterSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrinterSpecifics* internal_default_instance() {
    return reinterpret_cast<const PrinterSpecifics*>(
               &_PrinterSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrinterSpecifics& a, PrinterSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(PrinterSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrinterSpecifics* New() const final {
    return CreateMaybeMessage<PrinterSpecifics>(nullptr);
  }

  PrinterSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrinterSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PrinterSpecifics& from);
  void MergeFrom(const PrinterSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrinterSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PrinterSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDisplayNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kManufacturerFieldNumber = 4,
    kModelFieldNumber = 5,
    kUriFieldNumber = 6,
    kUuidFieldNumber = 7,
    kPpdFieldNumber = 8,
    kMakeAndModelFieldNumber = 11,
    kPrintServerUriFieldNumber = 12,
    kPpdReferenceFieldNumber = 9,
    kUpdatedTimestampFieldNumber = 10,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string display_name = 2;
  bool has_display_name() const;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional string manufacturer = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_manufacturer() const;
  PROTOBUF_DEPRECATED void clear_manufacturer();
  PROTOBUF_DEPRECATED const std::string& manufacturer() const;
  PROTOBUF_DEPRECATED void set_manufacturer(const std::string& value);
  PROTOBUF_DEPRECATED void set_manufacturer(std::string&& value);
  PROTOBUF_DEPRECATED void set_manufacturer(const char* value);
  PROTOBUF_DEPRECATED void set_manufacturer(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_manufacturer();
  PROTOBUF_DEPRECATED std::string* release_manufacturer();
  PROTOBUF_DEPRECATED void set_allocated_manufacturer(std::string* manufacturer);

  // optional string model = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_model() const;
  PROTOBUF_DEPRECATED void clear_model();
  PROTOBUF_DEPRECATED const std::string& model() const;
  PROTOBUF_DEPRECATED void set_model(const std::string& value);
  PROTOBUF_DEPRECATED void set_model(std::string&& value);
  PROTOBUF_DEPRECATED void set_model(const char* value);
  PROTOBUF_DEPRECATED void set_model(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_model();
  PROTOBUF_DEPRECATED std::string* release_model();
  PROTOBUF_DEPRECATED void set_allocated_model(std::string* model);

  // optional string uri = 6;
  bool has_uri() const;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);

  // optional string uuid = 7;
  bool has_uuid() const;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // optional bytes ppd = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_ppd() const;
  PROTOBUF_DEPRECATED void clear_ppd();
  PROTOBUF_DEPRECATED const std::string& ppd() const;
  PROTOBUF_DEPRECATED void set_ppd(const std::string& value);
  PROTOBUF_DEPRECATED void set_ppd(std::string&& value);
  PROTOBUF_DEPRECATED void set_ppd(const char* value);
  PROTOBUF_DEPRECATED void set_ppd(const void* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_ppd();
  PROTOBUF_DEPRECATED std::string* release_ppd();
  PROTOBUF_DEPRECATED void set_allocated_ppd(std::string* ppd);

  // optional string make_and_model = 11;
  bool has_make_and_model() const;
  void clear_make_and_model();
  const std::string& make_and_model() const;
  void set_make_and_model(const std::string& value);
  void set_make_and_model(std::string&& value);
  void set_make_and_model(const char* value);
  void set_make_and_model(const char* value, size_t size);
  std::string* mutable_make_and_model();
  std::string* release_make_and_model();
  void set_allocated_make_and_model(std::string* make_and_model);

  // optional string print_server_uri = 12;
  bool has_print_server_uri() const;
  void clear_print_server_uri();
  const std::string& print_server_uri() const;
  void set_print_server_uri(const std::string& value);
  void set_print_server_uri(std::string&& value);
  void set_print_server_uri(const char* value);
  void set_print_server_uri(const char* value, size_t size);
  std::string* mutable_print_server_uri();
  std::string* release_print_server_uri();
  void set_allocated_print_server_uri(std::string* print_server_uri);

  // optional .sync_pb.PrinterPPDReference ppd_reference = 9;
  bool has_ppd_reference() const;
  void clear_ppd_reference();
  const ::sync_pb::PrinterPPDReference& ppd_reference() const;
  ::sync_pb::PrinterPPDReference* release_ppd_reference();
  ::sync_pb::PrinterPPDReference* mutable_ppd_reference();
  void set_allocated_ppd_reference(::sync_pb::PrinterPPDReference* ppd_reference);

  // optional int64 updated_timestamp = 10;
  bool has_updated_timestamp() const;
  void clear_updated_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_timestamp() const;
  void set_updated_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.PrinterSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ppd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr make_and_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr print_server_uri_;
  ::sync_pb::PrinterPPDReference* ppd_reference_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_timestamp_;
  friend struct ::TableStruct_printer_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrinterPPDReference

// optional string user_supplied_ppd_url = 1;
inline bool PrinterPPDReference::has_user_supplied_ppd_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrinterPPDReference::clear_user_supplied_ppd_url() {
  user_supplied_ppd_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrinterPPDReference::user_supplied_ppd_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
  return user_supplied_ppd_url_.GetNoArena();
}
inline void PrinterPPDReference::set_user_supplied_ppd_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_supplied_ppd_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
}
inline void PrinterPPDReference::set_user_supplied_ppd_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_supplied_ppd_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
}
inline void PrinterPPDReference::set_user_supplied_ppd_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_supplied_ppd_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
}
inline void PrinterPPDReference::set_user_supplied_ppd_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_supplied_ppd_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
}
inline std::string* PrinterPPDReference::mutable_user_supplied_ppd_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
  return user_supplied_ppd_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterPPDReference::release_user_supplied_ppd_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
  if (!has_user_supplied_ppd_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_supplied_ppd_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterPPDReference::set_allocated_user_supplied_ppd_url(std::string* user_supplied_ppd_url) {
  if (user_supplied_ppd_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_supplied_ppd_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_supplied_ppd_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterPPDReference.user_supplied_ppd_url)
}

// optional string effective_manufacturer = 2 [deprecated = true];
inline bool PrinterPPDReference::has_effective_manufacturer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrinterPPDReference::clear_effective_manufacturer() {
  effective_manufacturer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrinterPPDReference::effective_manufacturer() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterPPDReference.effective_manufacturer)
  return effective_manufacturer_.GetNoArena();
}
inline void PrinterPPDReference::set_effective_manufacturer(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  effective_manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterPPDReference.effective_manufacturer)
}
inline void PrinterPPDReference::set_effective_manufacturer(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  effective_manufacturer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterPPDReference.effective_manufacturer)
}
inline void PrinterPPDReference::set_effective_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  effective_manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterPPDReference.effective_manufacturer)
}
inline void PrinterPPDReference::set_effective_manufacturer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  effective_manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterPPDReference.effective_manufacturer)
}
inline std::string* PrinterPPDReference::mutable_effective_manufacturer() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterPPDReference.effective_manufacturer)
  return effective_manufacturer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterPPDReference::release_effective_manufacturer() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterPPDReference.effective_manufacturer)
  if (!has_effective_manufacturer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return effective_manufacturer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterPPDReference::set_allocated_effective_manufacturer(std::string* effective_manufacturer) {
  if (effective_manufacturer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  effective_manufacturer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effective_manufacturer);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterPPDReference.effective_manufacturer)
}

// optional string effective_model = 3 [deprecated = true];
inline bool PrinterPPDReference::has_effective_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrinterPPDReference::clear_effective_model() {
  effective_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PrinterPPDReference::effective_model() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterPPDReference.effective_model)
  return effective_model_.GetNoArena();
}
inline void PrinterPPDReference::set_effective_model(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  effective_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterPPDReference.effective_model)
}
inline void PrinterPPDReference::set_effective_model(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  effective_model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterPPDReference.effective_model)
}
inline void PrinterPPDReference::set_effective_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  effective_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterPPDReference.effective_model)
}
inline void PrinterPPDReference::set_effective_model(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  effective_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterPPDReference.effective_model)
}
inline std::string* PrinterPPDReference::mutable_effective_model() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterPPDReference.effective_model)
  return effective_model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterPPDReference::release_effective_model() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterPPDReference.effective_model)
  if (!has_effective_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return effective_model_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterPPDReference::set_allocated_effective_model(std::string* effective_model) {
  if (effective_model != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  effective_model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effective_model);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterPPDReference.effective_model)
}

// optional string effective_make_and_model = 4;
inline bool PrinterPPDReference::has_effective_make_and_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrinterPPDReference::clear_effective_make_and_model() {
  effective_make_and_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PrinterPPDReference::effective_make_and_model() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterPPDReference.effective_make_and_model)
  return effective_make_and_model_.GetNoArena();
}
inline void PrinterPPDReference::set_effective_make_and_model(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  effective_make_and_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterPPDReference.effective_make_and_model)
}
inline void PrinterPPDReference::set_effective_make_and_model(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  effective_make_and_model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterPPDReference.effective_make_and_model)
}
inline void PrinterPPDReference::set_effective_make_and_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  effective_make_and_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterPPDReference.effective_make_and_model)
}
inline void PrinterPPDReference::set_effective_make_and_model(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  effective_make_and_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterPPDReference.effective_make_and_model)
}
inline std::string* PrinterPPDReference::mutable_effective_make_and_model() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterPPDReference.effective_make_and_model)
  return effective_make_and_model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterPPDReference::release_effective_make_and_model() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterPPDReference.effective_make_and_model)
  if (!has_effective_make_and_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return effective_make_and_model_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterPPDReference::set_allocated_effective_make_and_model(std::string* effective_make_and_model) {
  if (effective_make_and_model != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  effective_make_and_model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effective_make_and_model);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterPPDReference.effective_make_and_model)
}

// optional bool autoconf = 5 [default = false];
inline bool PrinterPPDReference::has_autoconf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrinterPPDReference::clear_autoconf() {
  autoconf_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PrinterPPDReference::autoconf() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterPPDReference.autoconf)
  return autoconf_;
}
inline void PrinterPPDReference::set_autoconf(bool value) {
  _has_bits_[0] |= 0x00000010u;
  autoconf_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PrinterPPDReference.autoconf)
}

// -------------------------------------------------------------------

// PrinterSpecifics

// optional string id = 1;
inline bool PrinterSpecifics::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrinterSpecifics::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrinterSpecifics::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.id)
  return id_.GetNoArena();
}
inline void PrinterSpecifics::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.id)
}
inline void PrinterSpecifics::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterSpecifics.id)
}
inline void PrinterSpecifics::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterSpecifics.id)
}
inline void PrinterSpecifics::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterSpecifics.id)
}
inline std::string* PrinterSpecifics::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterSpecifics::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterSpecifics::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.id)
}

// optional string display_name = 2;
inline bool PrinterSpecifics::has_display_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrinterSpecifics::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrinterSpecifics::display_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.display_name)
  return display_name_.GetNoArena();
}
inline void PrinterSpecifics::set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.display_name)
}
inline void PrinterSpecifics::set_display_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterSpecifics.display_name)
}
inline void PrinterSpecifics::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterSpecifics.display_name)
}
inline void PrinterSpecifics::set_display_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterSpecifics.display_name)
}
inline std::string* PrinterSpecifics::mutable_display_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.display_name)
  return display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterSpecifics::release_display_name() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.display_name)
  if (!has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return display_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterSpecifics::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.display_name)
}

// optional string description = 3;
inline bool PrinterSpecifics::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrinterSpecifics::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PrinterSpecifics::description() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.description)
  return description_.GetNoArena();
}
inline void PrinterSpecifics::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.description)
}
inline void PrinterSpecifics::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterSpecifics.description)
}
inline void PrinterSpecifics::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterSpecifics.description)
}
inline void PrinterSpecifics::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterSpecifics.description)
}
inline std::string* PrinterSpecifics::mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterSpecifics::release_description() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterSpecifics::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.description)
}

// optional string manufacturer = 4 [deprecated = true];
inline bool PrinterSpecifics::has_manufacturer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrinterSpecifics::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PrinterSpecifics::manufacturer() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void PrinterSpecifics::set_manufacturer(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.manufacturer)
}
inline void PrinterSpecifics::set_manufacturer(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  manufacturer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterSpecifics.manufacturer)
}
inline void PrinterSpecifics::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterSpecifics.manufacturer)
}
inline void PrinterSpecifics::set_manufacturer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterSpecifics.manufacturer)
}
inline std::string* PrinterSpecifics::mutable_manufacturer() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.manufacturer)
  return manufacturer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterSpecifics::release_manufacturer() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.manufacturer)
  if (!has_manufacturer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return manufacturer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterSpecifics::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  manufacturer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.manufacturer)
}

// optional string model = 5 [deprecated = true];
inline bool PrinterSpecifics::has_model() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrinterSpecifics::clear_model() {
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PrinterSpecifics::model() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.model)
  return model_.GetNoArena();
}
inline void PrinterSpecifics::set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.model)
}
inline void PrinterSpecifics::set_model(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterSpecifics.model)
}
inline void PrinterSpecifics::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterSpecifics.model)
}
inline void PrinterSpecifics::set_model(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterSpecifics.model)
}
inline std::string* PrinterSpecifics::mutable_model() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.model)
  return model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterSpecifics::release_model() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.model)
  if (!has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return model_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterSpecifics::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.model)
}

// optional string uri = 6;
inline bool PrinterSpecifics::has_uri() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrinterSpecifics::clear_uri() {
  uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PrinterSpecifics::uri() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.uri)
  return uri_.GetNoArena();
}
inline void PrinterSpecifics::set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.uri)
}
inline void PrinterSpecifics::set_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterSpecifics.uri)
}
inline void PrinterSpecifics::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterSpecifics.uri)
}
inline void PrinterSpecifics::set_uri(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterSpecifics.uri)
}
inline std::string* PrinterSpecifics::mutable_uri() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.uri)
  return uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterSpecifics::release_uri() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.uri)
  if (!has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return uri_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterSpecifics::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.uri)
}

// optional string uuid = 7;
inline bool PrinterSpecifics::has_uuid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrinterSpecifics::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PrinterSpecifics::uuid() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.uuid)
  return uuid_.GetNoArena();
}
inline void PrinterSpecifics::set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.uuid)
}
inline void PrinterSpecifics::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterSpecifics.uuid)
}
inline void PrinterSpecifics::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterSpecifics.uuid)
}
inline void PrinterSpecifics::set_uuid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterSpecifics.uuid)
}
inline std::string* PrinterSpecifics::mutable_uuid() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterSpecifics::release_uuid() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.uuid)
  if (!has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return uuid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterSpecifics::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.uuid)
}

// optional bytes ppd = 8 [deprecated = true];
inline bool PrinterSpecifics::has_ppd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrinterSpecifics::clear_ppd() {
  ppd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PrinterSpecifics::ppd() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.ppd)
  return ppd_.GetNoArena();
}
inline void PrinterSpecifics::set_ppd(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  ppd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.ppd)
}
inline void PrinterSpecifics::set_ppd(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  ppd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterSpecifics.ppd)
}
inline void PrinterSpecifics::set_ppd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  ppd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterSpecifics.ppd)
}
inline void PrinterSpecifics::set_ppd(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  ppd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterSpecifics.ppd)
}
inline std::string* PrinterSpecifics::mutable_ppd() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.ppd)
  return ppd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterSpecifics::release_ppd() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.ppd)
  if (!has_ppd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return ppd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterSpecifics::set_allocated_ppd(std::string* ppd) {
  if (ppd != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  ppd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ppd);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.ppd)
}

// optional .sync_pb.PrinterPPDReference ppd_reference = 9;
inline bool PrinterSpecifics::has_ppd_reference() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrinterSpecifics::clear_ppd_reference() {
  if (ppd_reference_ != nullptr) ppd_reference_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::sync_pb::PrinterPPDReference& PrinterSpecifics::ppd_reference() const {
  const ::sync_pb::PrinterPPDReference* p = ppd_reference_;
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.ppd_reference)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::PrinterPPDReference*>(
      &::sync_pb::_PrinterPPDReference_default_instance_);
}
inline ::sync_pb::PrinterPPDReference* PrinterSpecifics::release_ppd_reference() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.ppd_reference)
  _has_bits_[0] &= ~0x00000400u;
  ::sync_pb::PrinterPPDReference* temp = ppd_reference_;
  ppd_reference_ = nullptr;
  return temp;
}
inline ::sync_pb::PrinterPPDReference* PrinterSpecifics::mutable_ppd_reference() {
  _has_bits_[0] |= 0x00000400u;
  if (ppd_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PrinterPPDReference>(GetArenaNoVirtual());
    ppd_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.ppd_reference)
  return ppd_reference_;
}
inline void PrinterSpecifics::set_allocated_ppd_reference(::sync_pb::PrinterPPDReference* ppd_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ppd_reference_;
  }
  if (ppd_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ppd_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ppd_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  ppd_reference_ = ppd_reference;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.ppd_reference)
}

// optional int64 updated_timestamp = 10;
inline bool PrinterSpecifics::has_updated_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrinterSpecifics::clear_updated_timestamp() {
  updated_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrinterSpecifics::updated_timestamp() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.updated_timestamp)
  return updated_timestamp_;
}
inline void PrinterSpecifics::set_updated_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  updated_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.updated_timestamp)
}

// optional string make_and_model = 11;
inline bool PrinterSpecifics::has_make_and_model() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrinterSpecifics::clear_make_and_model() {
  make_and_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& PrinterSpecifics::make_and_model() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.make_and_model)
  return make_and_model_.GetNoArena();
}
inline void PrinterSpecifics::set_make_and_model(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  make_and_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.make_and_model)
}
inline void PrinterSpecifics::set_make_and_model(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  make_and_model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterSpecifics.make_and_model)
}
inline void PrinterSpecifics::set_make_and_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  make_and_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterSpecifics.make_and_model)
}
inline void PrinterSpecifics::set_make_and_model(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  make_and_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterSpecifics.make_and_model)
}
inline std::string* PrinterSpecifics::mutable_make_and_model() {
  _has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.make_and_model)
  return make_and_model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterSpecifics::release_make_and_model() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.make_and_model)
  if (!has_make_and_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return make_and_model_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterSpecifics::set_allocated_make_and_model(std::string* make_and_model) {
  if (make_and_model != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  make_and_model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), make_and_model);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.make_and_model)
}

// optional string print_server_uri = 12;
inline bool PrinterSpecifics::has_print_server_uri() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrinterSpecifics::clear_print_server_uri() {
  print_server_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& PrinterSpecifics::print_server_uri() const {
  // @@protoc_insertion_point(field_get:sync_pb.PrinterSpecifics.print_server_uri)
  return print_server_uri_.GetNoArena();
}
inline void PrinterSpecifics::set_print_server_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  print_server_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PrinterSpecifics.print_server_uri)
}
inline void PrinterSpecifics::set_print_server_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  print_server_uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PrinterSpecifics.print_server_uri)
}
inline void PrinterSpecifics::set_print_server_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  print_server_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PrinterSpecifics.print_server_uri)
}
inline void PrinterSpecifics::set_print_server_uri(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  print_server_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PrinterSpecifics.print_server_uri)
}
inline std::string* PrinterSpecifics::mutable_print_server_uri() {
  _has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PrinterSpecifics.print_server_uri)
  return print_server_uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrinterSpecifics::release_print_server_uri() {
  // @@protoc_insertion_point(field_release:sync_pb.PrinterSpecifics.print_server_uri)
  if (!has_print_server_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return print_server_uri_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterSpecifics::set_allocated_print_server_uri(std::string* print_server_uri) {
  if (print_server_uri != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  print_server_uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), print_server_uri);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PrinterSpecifics.print_server_uri)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_printer_5fspecifics_2eproto
