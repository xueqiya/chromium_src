// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bookmark_model_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bookmark_5fmodel_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bookmark_5fmodel_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "model_type_state.pb.h"
#include "entity_metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bookmark_5fmodel_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bookmark_5fmodel_5fmetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class BookmarkMetadata;
class BookmarkMetadataDefaultTypeInternal;
extern BookmarkMetadataDefaultTypeInternal _BookmarkMetadata_default_instance_;
class BookmarkModelMetadata;
class BookmarkModelMetadataDefaultTypeInternal;
extern BookmarkModelMetadataDefaultTypeInternal _BookmarkModelMetadata_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::BookmarkMetadata* Arena::CreateMaybeMessage<::sync_pb::BookmarkMetadata>(Arena*);
template<> ::sync_pb::BookmarkModelMetadata* Arena::CreateMaybeMessage<::sync_pb::BookmarkModelMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class BookmarkMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.BookmarkMetadata) */ {
 public:
  BookmarkMetadata();
  virtual ~BookmarkMetadata();

  BookmarkMetadata(const BookmarkMetadata& from);
  BookmarkMetadata(BookmarkMetadata&& from) noexcept
    : BookmarkMetadata() {
    *this = ::std::move(from);
  }

  inline BookmarkMetadata& operator=(const BookmarkMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookmarkMetadata& operator=(BookmarkMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BookmarkMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BookmarkMetadata* internal_default_instance() {
    return reinterpret_cast<const BookmarkMetadata*>(
               &_BookmarkMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BookmarkMetadata& a, BookmarkMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BookmarkMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BookmarkMetadata* New() const final {
    return CreateMaybeMessage<BookmarkMetadata>(nullptr);
  }

  BookmarkMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BookmarkMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BookmarkMetadata& from);
  void MergeFrom(const BookmarkMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BookmarkMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.BookmarkMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .sync_pb.EntityMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  const ::sync_pb::EntityMetadata& metadata() const;
  ::sync_pb::EntityMetadata* release_metadata();
  ::sync_pb::EntityMetadata* mutable_metadata();
  void set_allocated_metadata(::sync_pb::EntityMetadata* metadata);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.BookmarkMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::EntityMetadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  friend struct ::TableStruct_bookmark_5fmodel_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class BookmarkModelMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.BookmarkModelMetadata) */ {
 public:
  BookmarkModelMetadata();
  virtual ~BookmarkModelMetadata();

  BookmarkModelMetadata(const BookmarkModelMetadata& from);
  BookmarkModelMetadata(BookmarkModelMetadata&& from) noexcept
    : BookmarkModelMetadata() {
    *this = ::std::move(from);
  }

  inline BookmarkModelMetadata& operator=(const BookmarkModelMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookmarkModelMetadata& operator=(BookmarkModelMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BookmarkModelMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BookmarkModelMetadata* internal_default_instance() {
    return reinterpret_cast<const BookmarkModelMetadata*>(
               &_BookmarkModelMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BookmarkModelMetadata& a, BookmarkModelMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BookmarkModelMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BookmarkModelMetadata* New() const final {
    return CreateMaybeMessage<BookmarkModelMetadata>(nullptr);
  }

  BookmarkModelMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BookmarkModelMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BookmarkModelMetadata& from);
  void MergeFrom(const BookmarkModelMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BookmarkModelMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.BookmarkModelMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookmarksMetadataFieldNumber = 2,
    kModelTypeStateFieldNumber = 1,
  };
  // repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;
  int bookmarks_metadata_size() const;
  void clear_bookmarks_metadata();
  ::sync_pb::BookmarkMetadata* mutable_bookmarks_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::BookmarkMetadata >*
      mutable_bookmarks_metadata();
  const ::sync_pb::BookmarkMetadata& bookmarks_metadata(int index) const;
  ::sync_pb::BookmarkMetadata* add_bookmarks_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::BookmarkMetadata >&
      bookmarks_metadata() const;

  // optional .sync_pb.ModelTypeState model_type_state = 1;
  bool has_model_type_state() const;
  void clear_model_type_state();
  const ::sync_pb::ModelTypeState& model_type_state() const;
  ::sync_pb::ModelTypeState* release_model_type_state();
  ::sync_pb::ModelTypeState* mutable_model_type_state();
  void set_allocated_model_type_state(::sync_pb::ModelTypeState* model_type_state);

  // @@protoc_insertion_point(class_scope:sync_pb.BookmarkModelMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::BookmarkMetadata > bookmarks_metadata_;
  ::sync_pb::ModelTypeState* model_type_state_;
  friend struct ::TableStruct_bookmark_5fmodel_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BookmarkMetadata

// optional int64 id = 1;
inline bool BookmarkMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BookmarkMetadata::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BookmarkMetadata::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkMetadata.id)
  return id_;
}
inline void BookmarkMetadata::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkMetadata.id)
}

// optional .sync_pb.EntityMetadata metadata = 2;
inline bool BookmarkMetadata::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::sync_pb::EntityMetadata& BookmarkMetadata::metadata() const {
  const ::sync_pb::EntityMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkMetadata.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::EntityMetadata*>(
      &::sync_pb::_EntityMetadata_default_instance_);
}
inline ::sync_pb::EntityMetadata* BookmarkMetadata::release_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkMetadata.metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::EntityMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::sync_pb::EntityMetadata* BookmarkMetadata::mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EntityMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkMetadata.metadata)
  return metadata_;
}
inline void BookmarkMetadata::set_allocated_metadata(::sync_pb::EntityMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkMetadata.metadata)
}

// -------------------------------------------------------------------

// BookmarkModelMetadata

// optional .sync_pb.ModelTypeState model_type_state = 1;
inline bool BookmarkModelMetadata::has_model_type_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::sync_pb::ModelTypeState& BookmarkModelMetadata::model_type_state() const {
  const ::sync_pb::ModelTypeState* p = model_type_state_;
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkModelMetadata.model_type_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ModelTypeState*>(
      &::sync_pb::_ModelTypeState_default_instance_);
}
inline ::sync_pb::ModelTypeState* BookmarkModelMetadata::release_model_type_state() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkModelMetadata.model_type_state)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::ModelTypeState* temp = model_type_state_;
  model_type_state_ = nullptr;
  return temp;
}
inline ::sync_pb::ModelTypeState* BookmarkModelMetadata::mutable_model_type_state() {
  _has_bits_[0] |= 0x00000001u;
  if (model_type_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ModelTypeState>(GetArenaNoVirtual());
    model_type_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkModelMetadata.model_type_state)
  return model_type_state_;
}
inline void BookmarkModelMetadata::set_allocated_model_type_state(::sync_pb::ModelTypeState* model_type_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_type_state_);
  }
  if (model_type_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_type_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_type_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_type_state_ = model_type_state;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkModelMetadata.model_type_state)
}

// repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;
inline int BookmarkModelMetadata::bookmarks_metadata_size() const {
  return bookmarks_metadata_.size();
}
inline void BookmarkModelMetadata::clear_bookmarks_metadata() {
  bookmarks_metadata_.Clear();
}
inline ::sync_pb::BookmarkMetadata* BookmarkModelMetadata::mutable_bookmarks_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkModelMetadata.bookmarks_metadata)
  return bookmarks_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::BookmarkMetadata >*
BookmarkModelMetadata::mutable_bookmarks_metadata() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.BookmarkModelMetadata.bookmarks_metadata)
  return &bookmarks_metadata_;
}
inline const ::sync_pb::BookmarkMetadata& BookmarkModelMetadata::bookmarks_metadata(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkModelMetadata.bookmarks_metadata)
  return bookmarks_metadata_.Get(index);
}
inline ::sync_pb::BookmarkMetadata* BookmarkModelMetadata::add_bookmarks_metadata() {
  // @@protoc_insertion_point(field_add:sync_pb.BookmarkModelMetadata.bookmarks_metadata)
  return bookmarks_metadata_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::BookmarkMetadata >&
BookmarkModelMetadata::bookmarks_metadata() const {
  // @@protoc_insertion_point(field_list:sync_pb.BookmarkModelMetadata.bookmarks_metadata)
  return bookmarks_metadata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bookmark_5fmodel_5fmetadata_2eproto
