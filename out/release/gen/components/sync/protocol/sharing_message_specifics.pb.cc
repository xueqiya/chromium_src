// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing_message_specifics.proto

#include "sharing_message_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SharingMessageSpecifics_ChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto;
namespace sync_pb {
class SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration> _instance;
} _SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_default_instance_;
class SharingMessageSpecifics_ChannelConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SharingMessageSpecifics_ChannelConfiguration> _instance;
  const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* fcm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
} _SharingMessageSpecifics_ChannelConfiguration_default_instance_;
class SharingMessageSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SharingMessageSpecifics> _instance;
} _SharingMessageSpecifics_default_instance_;
class SharingMessageCommitErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SharingMessageCommitError> _instance;
} _SharingMessageCommitError_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_SharingMessageCommitError_sharing_5fmessage_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_SharingMessageCommitError_default_instance_;
    new (ptr) ::sync_pb::SharingMessageCommitError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::SharingMessageCommitError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SharingMessageCommitError_sharing_5fmessage_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SharingMessageCommitError_sharing_5fmessage_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_SharingMessageSpecifics_sharing_5fmessage_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_SharingMessageSpecifics_default_instance_;
    new (ptr) ::sync_pb::SharingMessageSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::SharingMessageSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SharingMessageSpecifics_sharing_5fmessage_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SharingMessageSpecifics_sharing_5fmessage_5fspecifics_2eproto}, {
      &scc_info_SharingMessageSpecifics_ChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_SharingMessageSpecifics_ChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_SharingMessageSpecifics_ChannelConfiguration_default_instance_;
    new (ptr) ::sync_pb::SharingMessageSpecifics_ChannelConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SharingMessageSpecifics_ChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SharingMessageSpecifics_ChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto}, {
      &scc_info_SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_default_instance_;
    new (ptr) ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto}, {}};

namespace sync_pb {
bool SharingMessageCommitError_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SharingMessageCommitError_ErrorCode_strings[11] = {};

static const char SharingMessageCommitError_ErrorCode_names[] =
  "INTERNAL"
  "INVALID_ARGUMENT"
  "NONE"
  "NOT_FOUND"
  "PERMISSION_DENIED"
  "RESOURCE_EXHAUSTED"
  "SYNC_NETWORK_ERROR"
  "SYNC_SERVER_ERROR"
  "SYNC_TURNED_OFF"
  "UNAUTHENTICATED"
  "UNAVAILABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SharingMessageCommitError_ErrorCode_entries[] = {
  { {SharingMessageCommitError_ErrorCode_names + 0, 8}, 3 },
  { {SharingMessageCommitError_ErrorCode_names + 8, 16}, 1 },
  { {SharingMessageCommitError_ErrorCode_names + 24, 4}, 0 },
  { {SharingMessageCommitError_ErrorCode_names + 28, 9}, 2 },
  { {SharingMessageCommitError_ErrorCode_names + 37, 17}, 7 },
  { {SharingMessageCommitError_ErrorCode_names + 54, 18}, 5 },
  { {SharingMessageCommitError_ErrorCode_names + 72, 18}, 9 },
  { {SharingMessageCommitError_ErrorCode_names + 90, 17}, 10 },
  { {SharingMessageCommitError_ErrorCode_names + 107, 15}, 8 },
  { {SharingMessageCommitError_ErrorCode_names + 122, 15}, 6 },
  { {SharingMessageCommitError_ErrorCode_names + 137, 11}, 4 },
};

static const int SharingMessageCommitError_ErrorCode_entries_by_number[] = {
  2, // 0 -> NONE
  1, // 1 -> INVALID_ARGUMENT
  3, // 2 -> NOT_FOUND
  0, // 3 -> INTERNAL
  10, // 4 -> UNAVAILABLE
  5, // 5 -> RESOURCE_EXHAUSTED
  9, // 6 -> UNAUTHENTICATED
  4, // 7 -> PERMISSION_DENIED
  8, // 8 -> SYNC_TURNED_OFF
  6, // 9 -> SYNC_NETWORK_ERROR
  7, // 10 -> SYNC_SERVER_ERROR
};

const std::string& SharingMessageCommitError_ErrorCode_Name(
    SharingMessageCommitError_ErrorCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SharingMessageCommitError_ErrorCode_entries,
          SharingMessageCommitError_ErrorCode_entries_by_number,
          11, SharingMessageCommitError_ErrorCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SharingMessageCommitError_ErrorCode_entries,
      SharingMessageCommitError_ErrorCode_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SharingMessageCommitError_ErrorCode_strings[idx].get();
}
bool SharingMessageCommitError_ErrorCode_Parse(
    const std::string& name, SharingMessageCommitError_ErrorCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SharingMessageCommitError_ErrorCode_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<SharingMessageCommitError_ErrorCode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::NONE;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::INVALID_ARGUMENT;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::NOT_FOUND;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::INTERNAL;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::UNAVAILABLE;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::RESOURCE_EXHAUSTED;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::UNAUTHENTICATED;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::PERMISSION_DENIED;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::SYNC_TURNED_OFF;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::SYNC_NETWORK_ERROR;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::SYNC_SERVER_ERROR;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::ErrorCode_MIN;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::ErrorCode_MAX;
constexpr int SharingMessageCommitError::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::InitAsDefaultInstance() {
}
class SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ttl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
}
SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration(const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&ttl_, &from.ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&ttl_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&ttl_)) + sizeof(priority_));
}

SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::~SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration() {
  // @@protoc_insertion_point(destructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  SharedDtor();
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&ttl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&ttl_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ttl(&has_bits);
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ttl = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ttl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 priority = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_priority(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional int32 ttl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->ttl(), output);
  }

  // optional int32 priority = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
}

size_t SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional int32 ttl = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ttl());
    }

    // optional int32 priority = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration*>(
      &from));
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::MergeFrom(const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      ttl_ = from.ttl_;
    }
    if (cached_has_bits & 0x00000004u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::CopyFrom(const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::IsInitialized() const {
  return true;
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::InternalSwap(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ttl_, other->ttl_);
  swap(priority_, other->priority_);
}

std::string SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::GetTypeName() const {
  return "sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration";
}


// ===================================================================

void SharingMessageSpecifics_ChannelConfiguration::InitAsDefaultInstance() {
}
class SharingMessageSpecifics_ChannelConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingMessageSpecifics_ChannelConfiguration>()._has_bits_);
  static const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& fcm(const SharingMessageSpecifics_ChannelConfiguration* msg);
};

const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration&
SharingMessageSpecifics_ChannelConfiguration::_Internal::fcm(const SharingMessageSpecifics_ChannelConfiguration* msg) {
  return *msg->channel_configuration_.fcm_;
}
void SharingMessageSpecifics_ChannelConfiguration::set_allocated_fcm(::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* fcm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_channel_configuration();
  if (fcm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fcm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fcm, submessage_arena);
    }
    set_has_fcm();
    channel_configuration_.fcm_ = fcm;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingMessageSpecifics.ChannelConfiguration.fcm)
}
SharingMessageSpecifics_ChannelConfiguration::SharingMessageSpecifics_ChannelConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
}
SharingMessageSpecifics_ChannelConfiguration::SharingMessageSpecifics_ChannelConfiguration(const SharingMessageSpecifics_ChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_channel_configuration();
  switch (from.channel_configuration_case()) {
    case kFcm: {
      mutable_fcm()->::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::MergeFrom(from.fcm());
      break;
    }
    case kServer: {
      set_server(from.server());
      break;
    }
    case CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
}

void SharingMessageSpecifics_ChannelConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SharingMessageSpecifics_ChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto.base);
  clear_has_channel_configuration();
}

SharingMessageSpecifics_ChannelConfiguration::~SharingMessageSpecifics_ChannelConfiguration() {
  // @@protoc_insertion_point(destructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  SharedDtor();
}

void SharingMessageSpecifics_ChannelConfiguration::SharedDtor() {
  if (has_channel_configuration()) {
    clear_channel_configuration();
  }
}

void SharingMessageSpecifics_ChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SharingMessageSpecifics_ChannelConfiguration& SharingMessageSpecifics_ChannelConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SharingMessageSpecifics_ChannelConfiguration_sharing_5fmessage_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void SharingMessageSpecifics_ChannelConfiguration::clear_channel_configuration() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  switch (channel_configuration_case()) {
    case kFcm: {
      delete channel_configuration_.fcm_;
      break;
    }
    case kServer: {
      channel_configuration_.server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANNEL_CONFIGURATION_NOT_SET;
}


void SharingMessageSpecifics_ChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_channel_configuration();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SharingMessageSpecifics_ChannelConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_fcm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_server(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SharingMessageSpecifics_ChannelConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fcm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes server = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SharingMessageSpecifics_ChannelConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (channel_configuration_case()) {
    case kFcm:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        1, _Internal::fcm(this), output);
      break;
    case kServer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
        2, this->server(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
}

size_t SharingMessageSpecifics_ChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (channel_configuration_case()) {
    // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;
    case kFcm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_configuration_.fcm_);
      break;
    }
    // optional bytes server = 2;
    case kServer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->server());
      break;
    }
    case CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingMessageSpecifics_ChannelConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingMessageSpecifics_ChannelConfiguration*>(
      &from));
}

void SharingMessageSpecifics_ChannelConfiguration::MergeFrom(const SharingMessageSpecifics_ChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.channel_configuration_case()) {
    case kFcm: {
      mutable_fcm()->::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::MergeFrom(from.fcm());
      break;
    }
    case kServer: {
      set_server(from.server());
      break;
    }
    case CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
}

void SharingMessageSpecifics_ChannelConfiguration::CopyFrom(const SharingMessageSpecifics_ChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingMessageSpecifics_ChannelConfiguration::IsInitialized() const {
  return true;
}

void SharingMessageSpecifics_ChannelConfiguration::InternalSwap(SharingMessageSpecifics_ChannelConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_configuration_, other->channel_configuration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SharingMessageSpecifics_ChannelConfiguration::GetTypeName() const {
  return "sync_pb.SharingMessageSpecifics.ChannelConfiguration";
}


// ===================================================================

void SharingMessageSpecifics::InitAsDefaultInstance() {
  ::sync_pb::_SharingMessageSpecifics_default_instance_._instance.get_mutable()->channel_configuration_ = const_cast< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration*>(
      ::sync_pb::SharingMessageSpecifics_ChannelConfiguration::internal_default_instance());
}
class SharingMessageSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingMessageSpecifics>()._has_bits_);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration& channel_configuration(const SharingMessageSpecifics* msg);
  static void set_has_channel_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration&
SharingMessageSpecifics::_Internal::channel_configuration(const SharingMessageSpecifics* msg) {
  return *msg->channel_configuration_;
}
SharingMessageSpecifics::SharingMessageSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SharingMessageSpecifics)
}
SharingMessageSpecifics::SharingMessageSpecifics(const SharingMessageSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_id()) {
    message_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.has_channel_configuration()) {
    channel_configuration_ = new ::sync_pb::SharingMessageSpecifics_ChannelConfiguration(*from.channel_configuration_);
  } else {
    channel_configuration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SharingMessageSpecifics)
}

void SharingMessageSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SharingMessageSpecifics_sharing_5fmessage_5fspecifics_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_configuration_ = nullptr;
}

SharingMessageSpecifics::~SharingMessageSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.SharingMessageSpecifics)
  SharedDtor();
}

void SharingMessageSpecifics::SharedDtor() {
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_configuration_;
}

void SharingMessageSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SharingMessageSpecifics& SharingMessageSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SharingMessageSpecifics_sharing_5fmessage_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void SharingMessageSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SharingMessageSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(channel_configuration_ != nullptr);
      channel_configuration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SharingMessageSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_message_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_channel_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SharingMessageSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SharingMessageSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_channel_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SharingMessageSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SharingMessageSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SharingMessageSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SharingMessageSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_id(), output);
  }

  // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::channel_configuration(this), output);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SharingMessageSpecifics)
}

size_t SharingMessageSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SharingMessageSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->message_id());
    }

    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_configuration_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingMessageSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingMessageSpecifics*>(
      &from));
}

void SharingMessageSpecifics::MergeFrom(const SharingMessageSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SharingMessageSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_channel_configuration()->::sync_pb::SharingMessageSpecifics_ChannelConfiguration::MergeFrom(from.channel_configuration());
    }
  }
}

void SharingMessageSpecifics::CopyFrom(const SharingMessageSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SharingMessageSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingMessageSpecifics::IsInitialized() const {
  return true;
}

void SharingMessageSpecifics::InternalSwap(SharingMessageSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_configuration_, other->channel_configuration_);
}

std::string SharingMessageSpecifics::GetTypeName() const {
  return "sync_pb.SharingMessageSpecifics";
}


// ===================================================================

void SharingMessageCommitError::InitAsDefaultInstance() {
}
class SharingMessageCommitError::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingMessageCommitError>()._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingMessageCommitError::SharingMessageCommitError()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SharingMessageCommitError)
}
SharingMessageCommitError::SharingMessageCommitError(const SharingMessageCommitError& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SharingMessageCommitError)
}

void SharingMessageCommitError::SharedCtor() {
  error_code_ = 0;
}

SharingMessageCommitError::~SharingMessageCommitError() {
  // @@protoc_insertion_point(destructor:sync_pb.SharingMessageCommitError)
  SharedDtor();
}

void SharingMessageCommitError::SharedDtor() {
}

void SharingMessageCommitError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SharingMessageCommitError& SharingMessageCommitError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SharingMessageCommitError_sharing_5fmessage_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void SharingMessageCommitError::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SharingMessageCommitError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SharingMessageCommitError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SharingMessageCommitError_ErrorCode_IsValid(val))) {
            set_error_code(static_cast<::sync_pb::SharingMessageCommitError_ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SharingMessageCommitError::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SharingMessageCommitError)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SharingMessageCommitError_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::sync_pb::SharingMessageCommitError_ErrorCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SharingMessageCommitError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SharingMessageCommitError)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SharingMessageCommitError::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SharingMessageCommitError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SharingMessageCommitError)
}

size_t SharingMessageCommitError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SharingMessageCommitError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingMessageCommitError::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingMessageCommitError*>(
      &from));
}

void SharingMessageCommitError::MergeFrom(const SharingMessageCommitError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SharingMessageCommitError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error_code()) {
    set_error_code(from.error_code());
  }
}

void SharingMessageCommitError::CopyFrom(const SharingMessageCommitError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SharingMessageCommitError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingMessageCommitError::IsInitialized() const {
  return true;
}

void SharingMessageCommitError::InternalSwap(SharingMessageCommitError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_code_, other->error_code_);
}

std::string SharingMessageCommitError::GetTypeName() const {
  return "sync_pb.SharingMessageCommitError";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* Arena::CreateMaybeMessage< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* Arena::CreateMaybeMessage< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SharingMessageSpecifics* Arena::CreateMaybeMessage< ::sync_pb::SharingMessageSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::SharingMessageSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SharingMessageCommitError* Arena::CreateMaybeMessage< ::sync_pb::SharingMessageCommitError >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::SharingMessageCommitError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
