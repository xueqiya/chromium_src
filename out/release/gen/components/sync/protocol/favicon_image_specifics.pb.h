// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: favicon_image_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_favicon_5fimage_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_favicon_5fimage_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_favicon_5fimage_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_favicon_5fimage_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class FaviconData;
class FaviconDataDefaultTypeInternal;
extern FaviconDataDefaultTypeInternal _FaviconData_default_instance_;
class FaviconImageSpecifics;
class FaviconImageSpecificsDefaultTypeInternal;
extern FaviconImageSpecificsDefaultTypeInternal _FaviconImageSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::FaviconData* Arena::CreateMaybeMessage<::sync_pb::FaviconData>(Arena*);
template<> ::sync_pb::FaviconImageSpecifics* Arena::CreateMaybeMessage<::sync_pb::FaviconImageSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class FaviconData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.FaviconData) */ {
 public:
  FaviconData();
  virtual ~FaviconData();

  FaviconData(const FaviconData& from);
  FaviconData(FaviconData&& from) noexcept
    : FaviconData() {
    *this = ::std::move(from);
  }

  inline FaviconData& operator=(const FaviconData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaviconData& operator=(FaviconData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FaviconData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaviconData* internal_default_instance() {
    return reinterpret_cast<const FaviconData*>(
               &_FaviconData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FaviconData& a, FaviconData& b) {
    a.Swap(&b);
  }
  inline void Swap(FaviconData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaviconData* New() const final {
    return CreateMaybeMessage<FaviconData>(nullptr);
  }

  FaviconData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaviconData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FaviconData& from);
  void MergeFrom(const FaviconData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaviconData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.FaviconData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaviconFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // optional bytes favicon = 1;
  bool has_favicon() const;
  void clear_favicon();
  const std::string& favicon() const;
  void set_favicon(const std::string& value);
  void set_favicon(std::string&& value);
  void set_favicon(const char* value);
  void set_favicon(const void* value, size_t size);
  std::string* mutable_favicon();
  std::string* release_favicon();
  void set_allocated_favicon(std::string* favicon);

  // optional int32 width = 2;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 3;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.FaviconData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr favicon_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_favicon_5fimage_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class FaviconImageSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.FaviconImageSpecifics) */ {
 public:
  FaviconImageSpecifics();
  virtual ~FaviconImageSpecifics();

  FaviconImageSpecifics(const FaviconImageSpecifics& from);
  FaviconImageSpecifics(FaviconImageSpecifics&& from) noexcept
    : FaviconImageSpecifics() {
    *this = ::std::move(from);
  }

  inline FaviconImageSpecifics& operator=(const FaviconImageSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaviconImageSpecifics& operator=(FaviconImageSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FaviconImageSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaviconImageSpecifics* internal_default_instance() {
    return reinterpret_cast<const FaviconImageSpecifics*>(
               &_FaviconImageSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FaviconImageSpecifics& a, FaviconImageSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(FaviconImageSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaviconImageSpecifics* New() const final {
    return CreateMaybeMessage<FaviconImageSpecifics>(nullptr);
  }

  FaviconImageSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaviconImageSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FaviconImageSpecifics& from);
  void MergeFrom(const FaviconImageSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaviconImageSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.FaviconImageSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaviconUrlFieldNumber = 1,
    kFaviconWebFieldNumber = 2,
    kFaviconWeb32FieldNumber = 3,
    kFaviconTouch64FieldNumber = 4,
    kFaviconTouchPrecomposed64FieldNumber = 5,
  };
  // optional string favicon_url = 1;
  bool has_favicon_url() const;
  void clear_favicon_url();
  const std::string& favicon_url() const;
  void set_favicon_url(const std::string& value);
  void set_favicon_url(std::string&& value);
  void set_favicon_url(const char* value);
  void set_favicon_url(const char* value, size_t size);
  std::string* mutable_favicon_url();
  std::string* release_favicon_url();
  void set_allocated_favicon_url(std::string* favicon_url);

  // optional .sync_pb.FaviconData favicon_web = 2;
  bool has_favicon_web() const;
  void clear_favicon_web();
  const ::sync_pb::FaviconData& favicon_web() const;
  ::sync_pb::FaviconData* release_favicon_web();
  ::sync_pb::FaviconData* mutable_favicon_web();
  void set_allocated_favicon_web(::sync_pb::FaviconData* favicon_web);

  // optional .sync_pb.FaviconData favicon_web_32 = 3;
  bool has_favicon_web_32() const;
  void clear_favicon_web_32();
  const ::sync_pb::FaviconData& favicon_web_32() const;
  ::sync_pb::FaviconData* release_favicon_web_32();
  ::sync_pb::FaviconData* mutable_favicon_web_32();
  void set_allocated_favicon_web_32(::sync_pb::FaviconData* favicon_web_32);

  // optional .sync_pb.FaviconData favicon_touch_64 = 4;
  bool has_favicon_touch_64() const;
  void clear_favicon_touch_64();
  const ::sync_pb::FaviconData& favicon_touch_64() const;
  ::sync_pb::FaviconData* release_favicon_touch_64();
  ::sync_pb::FaviconData* mutable_favicon_touch_64();
  void set_allocated_favicon_touch_64(::sync_pb::FaviconData* favicon_touch_64);

  // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
  bool has_favicon_touch_precomposed_64() const;
  void clear_favicon_touch_precomposed_64();
  const ::sync_pb::FaviconData& favicon_touch_precomposed_64() const;
  ::sync_pb::FaviconData* release_favicon_touch_precomposed_64();
  ::sync_pb::FaviconData* mutable_favicon_touch_precomposed_64();
  void set_allocated_favicon_touch_precomposed_64(::sync_pb::FaviconData* favicon_touch_precomposed_64);

  // @@protoc_insertion_point(class_scope:sync_pb.FaviconImageSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr favicon_url_;
  ::sync_pb::FaviconData* favicon_web_;
  ::sync_pb::FaviconData* favicon_web_32_;
  ::sync_pb::FaviconData* favicon_touch_64_;
  ::sync_pb::FaviconData* favicon_touch_precomposed_64_;
  friend struct ::TableStruct_favicon_5fimage_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FaviconData

// optional bytes favicon = 1;
inline bool FaviconData::has_favicon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaviconData::clear_favicon() {
  favicon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FaviconData::favicon() const {
  // @@protoc_insertion_point(field_get:sync_pb.FaviconData.favicon)
  return favicon_.GetNoArena();
}
inline void FaviconData::set_favicon(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  favicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.FaviconData.favicon)
}
inline void FaviconData::set_favicon(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  favicon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.FaviconData.favicon)
}
inline void FaviconData::set_favicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  favicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.FaviconData.favicon)
}
inline void FaviconData::set_favicon(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  favicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.FaviconData.favicon)
}
inline std::string* FaviconData::mutable_favicon() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.FaviconData.favicon)
  return favicon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaviconData::release_favicon() {
  // @@protoc_insertion_point(field_release:sync_pb.FaviconData.favicon)
  if (!has_favicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return favicon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaviconData::set_allocated_favicon(std::string* favicon) {
  if (favicon != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  favicon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), favicon);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconData.favicon)
}

// optional int32 width = 2;
inline bool FaviconData::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaviconData::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaviconData::width() const {
  // @@protoc_insertion_point(field_get:sync_pb.FaviconData.width)
  return width_;
}
inline void FaviconData::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.FaviconData.width)
}

// optional int32 height = 3;
inline bool FaviconData::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaviconData::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaviconData::height() const {
  // @@protoc_insertion_point(field_get:sync_pb.FaviconData.height)
  return height_;
}
inline void FaviconData::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.FaviconData.height)
}

// -------------------------------------------------------------------

// FaviconImageSpecifics

// optional string favicon_url = 1;
inline bool FaviconImageSpecifics::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaviconImageSpecifics::clear_favicon_url() {
  favicon_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FaviconImageSpecifics::favicon_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_url)
  return favicon_url_.GetNoArena();
}
inline void FaviconImageSpecifics::set_favicon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  favicon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.FaviconImageSpecifics.favicon_url)
}
inline void FaviconImageSpecifics::set_favicon_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  favicon_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.FaviconImageSpecifics.favicon_url)
}
inline void FaviconImageSpecifics::set_favicon_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  favicon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.FaviconImageSpecifics.favicon_url)
}
inline void FaviconImageSpecifics::set_favicon_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  favicon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.FaviconImageSpecifics.favicon_url)
}
inline std::string* FaviconImageSpecifics::mutable_favicon_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_url)
  return favicon_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaviconImageSpecifics::release_favicon_url() {
  // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_url)
  if (!has_favicon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return favicon_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaviconImageSpecifics::set_allocated_favicon_url(std::string* favicon_url) {
  if (favicon_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  favicon_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), favicon_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_url)
}

// optional .sync_pb.FaviconData favicon_web = 2;
inline bool FaviconImageSpecifics::has_favicon_web() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaviconImageSpecifics::clear_favicon_web() {
  if (favicon_web_ != nullptr) favicon_web_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_web() const {
  const ::sync_pb::FaviconData* p = favicon_web_;
  // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_web)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::FaviconData*>(
      &::sync_pb::_FaviconData_default_instance_);
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_web() {
  // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_web)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::FaviconData* temp = favicon_web_;
  favicon_web_ = nullptr;
  return temp;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_web() {
  _has_bits_[0] |= 0x00000002u;
  if (favicon_web_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::FaviconData>(GetArenaNoVirtual());
    favicon_web_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_web)
  return favicon_web_;
}
inline void FaviconImageSpecifics::set_allocated_favicon_web(::sync_pb::FaviconData* favicon_web) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete favicon_web_;
  }
  if (favicon_web) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      favicon_web = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon_web, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  favicon_web_ = favicon_web;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_web)
}

// optional .sync_pb.FaviconData favicon_web_32 = 3;
inline bool FaviconImageSpecifics::has_favicon_web_32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaviconImageSpecifics::clear_favicon_web_32() {
  if (favicon_web_32_ != nullptr) favicon_web_32_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_web_32() const {
  const ::sync_pb::FaviconData* p = favicon_web_32_;
  // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_web_32)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::FaviconData*>(
      &::sync_pb::_FaviconData_default_instance_);
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_web_32() {
  // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_web_32)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::FaviconData* temp = favicon_web_32_;
  favicon_web_32_ = nullptr;
  return temp;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_web_32() {
  _has_bits_[0] |= 0x00000004u;
  if (favicon_web_32_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::FaviconData>(GetArenaNoVirtual());
    favicon_web_32_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_web_32)
  return favicon_web_32_;
}
inline void FaviconImageSpecifics::set_allocated_favicon_web_32(::sync_pb::FaviconData* favicon_web_32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete favicon_web_32_;
  }
  if (favicon_web_32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      favicon_web_32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon_web_32, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  favicon_web_32_ = favicon_web_32;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_web_32)
}

// optional .sync_pb.FaviconData favicon_touch_64 = 4;
inline bool FaviconImageSpecifics::has_favicon_touch_64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaviconImageSpecifics::clear_favicon_touch_64() {
  if (favicon_touch_64_ != nullptr) favicon_touch_64_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_touch_64() const {
  const ::sync_pb::FaviconData* p = favicon_touch_64_;
  // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_touch_64)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::FaviconData*>(
      &::sync_pb::_FaviconData_default_instance_);
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_touch_64() {
  // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_touch_64)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::FaviconData* temp = favicon_touch_64_;
  favicon_touch_64_ = nullptr;
  return temp;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_touch_64() {
  _has_bits_[0] |= 0x00000008u;
  if (favicon_touch_64_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::FaviconData>(GetArenaNoVirtual());
    favicon_touch_64_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_touch_64)
  return favicon_touch_64_;
}
inline void FaviconImageSpecifics::set_allocated_favicon_touch_64(::sync_pb::FaviconData* favicon_touch_64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete favicon_touch_64_;
  }
  if (favicon_touch_64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      favicon_touch_64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon_touch_64, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  favicon_touch_64_ = favicon_touch_64;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_touch_64)
}

// optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
inline bool FaviconImageSpecifics::has_favicon_touch_precomposed_64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FaviconImageSpecifics::clear_favicon_touch_precomposed_64() {
  if (favicon_touch_precomposed_64_ != nullptr) favicon_touch_precomposed_64_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_touch_precomposed_64() const {
  const ::sync_pb::FaviconData* p = favicon_touch_precomposed_64_;
  // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::FaviconData*>(
      &::sync_pb::_FaviconData_default_instance_);
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_touch_precomposed_64() {
  // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
  _has_bits_[0] &= ~0x00000010u;
  ::sync_pb::FaviconData* temp = favicon_touch_precomposed_64_;
  favicon_touch_precomposed_64_ = nullptr;
  return temp;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_touch_precomposed_64() {
  _has_bits_[0] |= 0x00000010u;
  if (favicon_touch_precomposed_64_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::FaviconData>(GetArenaNoVirtual());
    favicon_touch_precomposed_64_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
  return favicon_touch_precomposed_64_;
}
inline void FaviconImageSpecifics::set_allocated_favicon_touch_precomposed_64(::sync_pb::FaviconData* favicon_touch_precomposed_64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete favicon_touch_precomposed_64_;
  }
  if (favicon_touch_precomposed_64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      favicon_touch_precomposed_64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon_touch_precomposed_64, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  favicon_touch_precomposed_64_ = favicon_touch_precomposed_64;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_favicon_5fimage_5fspecifics_2eproto
