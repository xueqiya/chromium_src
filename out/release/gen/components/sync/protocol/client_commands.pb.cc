// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_commands.proto

#include "client_commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_client_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomNudgeDelay_client_5fcommands_2eproto;
namespace sync_pb {
class CustomNudgeDelayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomNudgeDelay> _instance;
} _CustomNudgeDelay_default_instance_;
class ClientCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientCommand> _instance;
} _ClientCommand_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_ClientCommand_client_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ClientCommand_default_instance_;
    new (ptr) ::sync_pb::ClientCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ClientCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientCommand_client_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientCommand_client_5fcommands_2eproto}, {
      &scc_info_CustomNudgeDelay_client_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_CustomNudgeDelay_client_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_CustomNudgeDelay_default_instance_;
    new (ptr) ::sync_pb::CustomNudgeDelay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::CustomNudgeDelay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomNudgeDelay_client_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CustomNudgeDelay_client_5fcommands_2eproto}, {}};

namespace sync_pb {

// ===================================================================

void CustomNudgeDelay::InitAsDefaultInstance() {
}
class CustomNudgeDelay::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomNudgeDelay>()._has_bits_);
  static void set_has_datatype_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CustomNudgeDelay::CustomNudgeDelay()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CustomNudgeDelay)
}
CustomNudgeDelay::CustomNudgeDelay(const CustomNudgeDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&datatype_id_, &from.datatype_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_ms_) -
    reinterpret_cast<char*>(&datatype_id_)) + sizeof(delay_ms_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.CustomNudgeDelay)
}

void CustomNudgeDelay::SharedCtor() {
  ::memset(&datatype_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_ms_) -
      reinterpret_cast<char*>(&datatype_id_)) + sizeof(delay_ms_));
}

CustomNudgeDelay::~CustomNudgeDelay() {
  // @@protoc_insertion_point(destructor:sync_pb.CustomNudgeDelay)
  SharedDtor();
}

void CustomNudgeDelay::SharedDtor() {
}

void CustomNudgeDelay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomNudgeDelay& CustomNudgeDelay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomNudgeDelay_client_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void CustomNudgeDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CustomNudgeDelay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&datatype_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delay_ms_) -
        reinterpret_cast<char*>(&datatype_id_)) + sizeof(delay_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomNudgeDelay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 datatype_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_datatype_id(&has_bits);
          datatype_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 delay_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delay_ms(&has_bits);
          delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomNudgeDelay::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CustomNudgeDelay)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 datatype_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_datatype_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delay_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_delay_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CustomNudgeDelay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CustomNudgeDelay)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomNudgeDelay::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CustomNudgeDelay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 datatype_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->datatype_id(), output);
  }

  // optional int32 delay_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->delay_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CustomNudgeDelay)
}

size_t CustomNudgeDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CustomNudgeDelay)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 datatype_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->datatype_id());
    }

    // optional int32 delay_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->delay_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomNudgeDelay::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CustomNudgeDelay*>(
      &from));
}

void CustomNudgeDelay::MergeFrom(const CustomNudgeDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CustomNudgeDelay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      datatype_id_ = from.datatype_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      delay_ms_ = from.delay_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CustomNudgeDelay::CopyFrom(const CustomNudgeDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CustomNudgeDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomNudgeDelay::IsInitialized() const {
  return true;
}

void CustomNudgeDelay::InternalSwap(CustomNudgeDelay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(datatype_id_, other->datatype_id_);
  swap(delay_ms_, other->delay_ms_);
}

std::string CustomNudgeDelay::GetTypeName() const {
  return "sync_pb.CustomNudgeDelay";
}


// ===================================================================

void ClientCommand::InitAsDefaultInstance() {
}
class ClientCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientCommand>()._has_bits_);
  static void set_has_set_sync_poll_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_set_sync_long_poll_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_commit_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sessions_commit_delay_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_throttle_delay_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_invalidation_hint_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gu_retry_delay_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ClientCommand::ClientCommand()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientCommand)
}
ClientCommand::ClientCommand(const ClientCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      custom_nudge_delays_(from.custom_nudge_delays_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&set_sync_poll_interval_, &from.set_sync_poll_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&gu_retry_delay_seconds_) -
    reinterpret_cast<char*>(&set_sync_poll_interval_)) + sizeof(gu_retry_delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientCommand)
}

void ClientCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientCommand_client_5fcommands_2eproto.base);
  ::memset(&set_sync_poll_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gu_retry_delay_seconds_) -
      reinterpret_cast<char*>(&set_sync_poll_interval_)) + sizeof(gu_retry_delay_seconds_));
}

ClientCommand::~ClientCommand() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientCommand)
  SharedDtor();
}

void ClientCommand::SharedDtor() {
}

void ClientCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientCommand& ClientCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientCommand_client_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void ClientCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_nudge_delays_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&set_sync_poll_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gu_retry_delay_seconds_) -
        reinterpret_cast<char*>(&set_sync_poll_interval_)) + sizeof(gu_retry_delay_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 set_sync_poll_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_set_sync_poll_interval(&has_bits);
          set_sync_poll_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 set_sync_long_poll_interval = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_set_sync_long_poll_interval(&has_bits);
          set_sync_long_poll_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_commit_batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_commit_batch_size(&has_bits);
          max_commit_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sessions_commit_delay_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sessions_commit_delay_seconds(&has_bits);
          sessions_commit_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 throttle_delay_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_throttle_delay_seconds(&has_bits);
          throttle_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 client_invalidation_hint_buffer_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_client_invalidation_hint_buffer_size(&has_bits);
          client_invalidation_hint_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gu_retry_delay_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_gu_retry_delay_seconds(&has_bits);
          gu_retry_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_custom_nudge_delays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientCommand::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientCommand)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 set_sync_poll_interval = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_set_sync_poll_interval(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_sync_poll_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 set_sync_long_poll_interval = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_set_sync_long_poll_interval(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_sync_long_poll_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_commit_batch_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_commit_batch_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_commit_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sessions_commit_delay_seconds = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_sessions_commit_delay_seconds(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessions_commit_delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 throttle_delay_seconds = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_throttle_delay_seconds(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &throttle_delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 client_invalidation_hint_buffer_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_client_invalidation_hint_buffer_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_invalidation_hint_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gu_retry_delay_seconds = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_gu_retry_delay_seconds(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gu_retry_delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_custom_nudge_delays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientCommand::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 set_sync_poll_interval = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->set_sync_poll_interval(), output);
  }

  // optional int32 set_sync_long_poll_interval = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->set_sync_long_poll_interval(), output);
  }

  // optional int32 max_commit_batch_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_commit_batch_size(), output);
  }

  // optional int32 sessions_commit_delay_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->sessions_commit_delay_seconds(), output);
  }

  // optional int32 throttle_delay_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->throttle_delay_seconds(), output);
  }

  // optional int32 client_invalidation_hint_buffer_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->client_invalidation_hint_buffer_size(), output);
  }

  // optional int32 gu_retry_delay_seconds = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->gu_retry_delay_seconds(), output);
  }

  // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_nudge_delays_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->custom_nudge_delays(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientCommand)
}

size_t ClientCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientCommand)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_nudge_delays_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->custom_nudge_delays(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 set_sync_poll_interval = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->set_sync_poll_interval());
    }

    // optional int32 set_sync_long_poll_interval = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->set_sync_long_poll_interval());
    }

    // optional int32 max_commit_batch_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_commit_batch_size());
    }

    // optional int32 sessions_commit_delay_seconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sessions_commit_delay_seconds());
    }

    // optional int32 throttle_delay_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->throttle_delay_seconds());
    }

    // optional int32 client_invalidation_hint_buffer_size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->client_invalidation_hint_buffer_size());
    }

    // optional int32 gu_retry_delay_seconds = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->gu_retry_delay_seconds());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCommand::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientCommand*>(
      &from));
}

void ClientCommand::MergeFrom(const ClientCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_nudge_delays_.MergeFrom(from.custom_nudge_delays_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      set_sync_poll_interval_ = from.set_sync_poll_interval_;
    }
    if (cached_has_bits & 0x00000002u) {
      set_sync_long_poll_interval_ = from.set_sync_long_poll_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_commit_batch_size_ = from.max_commit_batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      sessions_commit_delay_seconds_ = from.sessions_commit_delay_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttle_delay_seconds_ = from.throttle_delay_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_invalidation_hint_buffer_size_ = from.client_invalidation_hint_buffer_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      gu_retry_delay_seconds_ = from.gu_retry_delay_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientCommand::CopyFrom(const ClientCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCommand::IsInitialized() const {
  return true;
}

void ClientCommand::InternalSwap(ClientCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&custom_nudge_delays_)->InternalSwap(CastToBase(&other->custom_nudge_delays_));
  swap(set_sync_poll_interval_, other->set_sync_poll_interval_);
  swap(set_sync_long_poll_interval_, other->set_sync_long_poll_interval_);
  swap(max_commit_batch_size_, other->max_commit_batch_size_);
  swap(sessions_commit_delay_seconds_, other->sessions_commit_delay_seconds_);
  swap(throttle_delay_seconds_, other->throttle_delay_seconds_);
  swap(client_invalidation_hint_buffer_size_, other->client_invalidation_hint_buffer_size_);
  swap(gu_retry_delay_seconds_, other->gu_retry_delay_seconds_);
}

std::string ClientCommand::GetTypeName() const {
  return "sync_pb.ClientCommand";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::CustomNudgeDelay* Arena::CreateMaybeMessage< ::sync_pb::CustomNudgeDelay >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::CustomNudgeDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ClientCommand* Arena::CreateMaybeMessage< ::sync_pb::ClientCommand >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ClientCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
