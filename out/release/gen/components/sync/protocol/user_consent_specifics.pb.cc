// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_consent_specifics.proto

#include "user_consent_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_ArcBackupAndRestoreConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_ArcGoogleLocationServiceConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_ArcMetricsAndUsageConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_ArcPlayTermsOfServiceConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_AssistantActivityControlConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_SyncConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_UnifiedConsent_user_5fconsent_5ftypes_2eproto;
namespace sync_pb {
class UserConsentSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserConsentSpecifics> _instance;
  const ::sync_pb::UserConsentTypes_SyncConsent* sync_consent_;
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent_;
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent_;
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent_;
  const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent_;
  const ::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent_;
  const ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* assistant_activity_control_consent_;
} _UserConsentSpecifics_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_UserConsentSpecifics_user_5fconsent_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_UserConsentSpecifics_default_instance_;
    new (ptr) ::sync_pb::UserConsentSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::UserConsentSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_UserConsentSpecifics_user_5fconsent_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_UserConsentSpecifics_user_5fconsent_5fspecifics_2eproto}, {
      &scc_info_UserConsentTypes_SyncConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_ArcBackupAndRestoreConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_ArcGoogleLocationServiceConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_ArcPlayTermsOfServiceConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_ArcMetricsAndUsageConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_UnifiedConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_AssistantActivityControlConsent_user_5fconsent_5ftypes_2eproto.base,}};

namespace sync_pb {
bool UserConsentSpecifics_Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UserConsentSpecifics_Feature_strings[7] = {};

static const char UserConsentSpecifics_Feature_names[] =
  "ASSISTANT_ACTIVITY_CONTROL"
  "BACKUP_AND_RESTORE"
  "CHROME_SYNC"
  "CHROME_UNIFIED_CONSENT"
  "FEATURE_UNSPECIFIED"
  "GOOGLE_LOCATION_SERVICE"
  "PLAY_STORE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UserConsentSpecifics_Feature_entries[] = {
  { {UserConsentSpecifics_Feature_names + 0, 26}, 6 },
  { {UserConsentSpecifics_Feature_names + 26, 18}, 3 },
  { {UserConsentSpecifics_Feature_names + 44, 11}, 1 },
  { {UserConsentSpecifics_Feature_names + 55, 22}, 5 },
  { {UserConsentSpecifics_Feature_names + 77, 19}, 0 },
  { {UserConsentSpecifics_Feature_names + 96, 23}, 4 },
  { {UserConsentSpecifics_Feature_names + 119, 10}, 2 },
};

static const int UserConsentSpecifics_Feature_entries_by_number[] = {
  4, // 0 -> FEATURE_UNSPECIFIED
  2, // 1 -> CHROME_SYNC
  6, // 2 -> PLAY_STORE
  1, // 3 -> BACKUP_AND_RESTORE
  5, // 4 -> GOOGLE_LOCATION_SERVICE
  3, // 5 -> CHROME_UNIFIED_CONSENT
  0, // 6 -> ASSISTANT_ACTIVITY_CONTROL
};

const std::string& UserConsentSpecifics_Feature_Name(
    UserConsentSpecifics_Feature value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UserConsentSpecifics_Feature_entries,
          UserConsentSpecifics_Feature_entries_by_number,
          7, UserConsentSpecifics_Feature_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UserConsentSpecifics_Feature_entries,
      UserConsentSpecifics_Feature_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UserConsentSpecifics_Feature_strings[idx].get();
}
bool UserConsentSpecifics_Feature_Parse(
    const std::string& name, UserConsentSpecifics_Feature* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UserConsentSpecifics_Feature_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<UserConsentSpecifics_Feature>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::FEATURE_UNSPECIFIED;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::CHROME_SYNC;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::PLAY_STORE;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::BACKUP_AND_RESTORE;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::GOOGLE_LOCATION_SERVICE;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::CHROME_UNIFIED_CONSENT;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::ASSISTANT_ACTIVITY_CONTROL;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::Feature_MIN;
constexpr UserConsentSpecifics_Feature UserConsentSpecifics::Feature_MAX;
constexpr int UserConsentSpecifics::Feature_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void UserConsentSpecifics::InitAsDefaultInstance() {
}
class UserConsentSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<UserConsentSpecifics>()._has_bits_);
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_consent_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sync_pb::UserConsentTypes_SyncConsent& sync_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& arc_backup_and_restore_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& arc_location_service_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& arc_play_terms_of_service_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent& arc_metrics_and_usage_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_UnifiedConsent& unified_consent(const UserConsentSpecifics* msg);
  static const ::sync_pb::UserConsentTypes_AssistantActivityControlConsent& assistant_activity_control_consent(const UserConsentSpecifics* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_confirmation_grd_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::sync_pb::UserConsentTypes_SyncConsent&
UserConsentSpecifics::_Internal::sync_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.sync_consent_;
}
const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent&
UserConsentSpecifics::_Internal::arc_backup_and_restore_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.arc_backup_and_restore_consent_;
}
const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent&
UserConsentSpecifics::_Internal::arc_location_service_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.arc_location_service_consent_;
}
const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent&
UserConsentSpecifics::_Internal::arc_play_terms_of_service_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.arc_play_terms_of_service_consent_;
}
const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent&
UserConsentSpecifics::_Internal::arc_metrics_and_usage_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.arc_metrics_and_usage_consent_;
}
const ::sync_pb::UserConsentTypes_UnifiedConsent&
UserConsentSpecifics::_Internal::unified_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.unified_consent_;
}
const ::sync_pb::UserConsentTypes_AssistantActivityControlConsent&
UserConsentSpecifics::_Internal::assistant_activity_control_consent(const UserConsentSpecifics* msg) {
  return *msg->consent_.assistant_activity_control_consent_;
}
void UserConsentSpecifics::set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (sync_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_consent, submessage_arena);
    }
    set_has_sync_consent();
    consent_.sync_consent_ = sync_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.sync_consent)
}
void UserConsentSpecifics::clear_sync_consent() {
  if (has_sync_consent()) {
    delete consent_.sync_consent_;
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (arc_backup_and_restore_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc_backup_and_restore_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_backup_and_restore_consent, submessage_arena);
    }
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = arc_backup_and_restore_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_backup_and_restore_consent)
}
void UserConsentSpecifics::clear_arc_backup_and_restore_consent() {
  if (has_arc_backup_and_restore_consent()) {
    delete consent_.arc_backup_and_restore_consent_;
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (arc_location_service_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc_location_service_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_location_service_consent, submessage_arena);
    }
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = arc_location_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_location_service_consent)
}
void UserConsentSpecifics::clear_arc_location_service_consent() {
  if (has_arc_location_service_consent()) {
    delete consent_.arc_location_service_consent_;
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (arc_play_terms_of_service_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc_play_terms_of_service_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_play_terms_of_service_consent, submessage_arena);
    }
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = arc_play_terms_of_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_play_terms_of_service_consent)
}
void UserConsentSpecifics::clear_arc_play_terms_of_service_consent() {
  if (has_arc_play_terms_of_service_consent()) {
    delete consent_.arc_play_terms_of_service_consent_;
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_arc_metrics_and_usage_consent(::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (arc_metrics_and_usage_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc_metrics_and_usage_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_metrics_and_usage_consent, submessage_arena);
    }
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = arc_metrics_and_usage_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.arc_metrics_and_usage_consent)
}
void UserConsentSpecifics::clear_arc_metrics_and_usage_consent() {
  if (has_arc_metrics_and_usage_consent()) {
    delete consent_.arc_metrics_and_usage_consent_;
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_unified_consent(::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (unified_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unified_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unified_consent, submessage_arena);
    }
    set_has_unified_consent();
    consent_.unified_consent_ = unified_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.unified_consent)
}
void UserConsentSpecifics::clear_unified_consent() {
  if (has_unified_consent()) {
    delete consent_.unified_consent_;
    clear_has_consent();
  }
}
void UserConsentSpecifics::set_allocated_assistant_activity_control_consent(::sync_pb::UserConsentTypes_AssistantActivityControlConsent* assistant_activity_control_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (assistant_activity_control_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assistant_activity_control_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assistant_activity_control_consent, submessage_arena);
    }
    set_has_assistant_activity_control_consent();
    consent_.assistant_activity_control_consent_ = assistant_activity_control_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentSpecifics.assistant_activity_control_consent)
}
void UserConsentSpecifics::clear_assistant_activity_control_consent() {
  if (has_assistant_activity_control_consent()) {
    delete consent_.assistant_activity_control_consent_;
    clear_has_consent();
  }
}
UserConsentSpecifics::UserConsentSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserConsentSpecifics)
}
UserConsentSpecifics::UserConsentSpecifics(const UserConsentSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      description_grd_ids_(from.description_grd_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_locale()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_id()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  ::memcpy(&feature_, &from.feature_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_consent_time_usec_) -
    reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  clear_has_consent();
  switch (from.consent_case()) {
    case kSyncConsent: {
      mutable_sync_consent()->::sync_pb::UserConsentTypes_SyncConsent::MergeFrom(from.sync_consent());
      break;
    }
    case kArcBackupAndRestoreConsent: {
      mutable_arc_backup_and_restore_consent()->::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(from.arc_backup_and_restore_consent());
      break;
    }
    case kArcLocationServiceConsent: {
      mutable_arc_location_service_consent()->::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(from.arc_location_service_consent());
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      mutable_arc_play_terms_of_service_consent()->::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(from.arc_play_terms_of_service_consent());
      break;
    }
    case kArcMetricsAndUsageConsent: {
      mutable_arc_metrics_and_usage_consent()->::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::MergeFrom(from.arc_metrics_and_usage_consent());
      break;
    }
    case kUnifiedConsent: {
      mutable_unified_consent()->::sync_pb::UserConsentTypes_UnifiedConsent::MergeFrom(from.unified_consent());
      break;
    }
    case kAssistantActivityControlConsent: {
      mutable_assistant_activity_control_consent()->::sync_pb::UserConsentTypes_AssistantActivityControlConsent::MergeFrom(from.assistant_activity_control_consent());
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserConsentSpecifics)
}

void UserConsentSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserConsentSpecifics_user_5fconsent_5fspecifics_2eproto.base);
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_consent_time_usec_) -
      reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  clear_has_consent();
}

UserConsentSpecifics::~UserConsentSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.UserConsentSpecifics)
  SharedDtor();
}

void UserConsentSpecifics::SharedDtor() {
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_consent()) {
    clear_consent();
  }
}

void UserConsentSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserConsentSpecifics& UserConsentSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserConsentSpecifics_user_5fconsent_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void UserConsentSpecifics::clear_consent() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.UserConsentSpecifics)
  switch (consent_case()) {
    case kSyncConsent: {
      delete consent_.sync_consent_;
      break;
    }
    case kArcBackupAndRestoreConsent: {
      delete consent_.arc_backup_and_restore_consent_;
      break;
    }
    case kArcLocationServiceConsent: {
      delete consent_.arc_location_service_consent_;
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      delete consent_.arc_play_terms_of_service_consent_;
      break;
    }
    case kArcMetricsAndUsageConsent: {
      delete consent_.arc_metrics_and_usage_consent_;
      break;
    }
    case kUnifiedConsent: {
      delete consent_.unified_consent_;
      break;
    }
    case kAssistantActivityControlConsent: {
      delete consent_.assistant_activity_control_consent_;
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSENT_NOT_SET;
}


void UserConsentSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserConsentSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_grd_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      locale_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&feature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_consent_time_usec_) -
        reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  }
  clear_consent();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserConsentSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::UserConsentSpecifics_Feature_IsValid(val))) {
            set_feature(static_cast<::sync_pb::UserConsentSpecifics_Feature>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int32 description_grd_ids = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_description_grd_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 confirmation_grd_id = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_confirmation_grd_id(&has_bits);
          confirmation_grd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string locale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_locale(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(val))) {
            set_status(static_cast<::sync_pb::UserConsentTypes_ConsentStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_sync_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_arc_backup_and_restore_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_arc_location_service_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_arc_play_terms_of_service_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_arc_metrics_and_usage_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 client_consent_time_usec = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_client_consent_time_usec(&has_bits);
          client_consent_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_unified_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_assistant_activity_control_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserConsentSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserConsentSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentSpecifics_Feature_IsValid(value)) {
            set_feature(static_cast< ::sync_pb::UserConsentSpecifics_Feature >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 description_grd_ids = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_description_grd_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_description_grd_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 confirmation_grd_id = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_confirmation_grd_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmation_grd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string locale = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_locale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arc_backup_and_restore_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arc_location_service_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arc_play_terms_of_service_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arc_metrics_and_usage_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 client_consent_time_usec = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_client_consent_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_consent_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unified_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_assistant_activity_control_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserConsentSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserConsentSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserConsentSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserConsentSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->feature(), output);
  }

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  for (int i = 0, n = this->description_grd_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->description_grd_ids(i), output);
  }

  // optional int32 confirmation_grd_id = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->confirmation_grd_id(), output);
  }

  // optional string locale = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->locale(), output);
  }

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional string account_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account_id(), output);
  }

  switch (consent_case()) {
    case kSyncConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        7, _Internal::sync_consent(this), output);
      break;
    case kArcBackupAndRestoreConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        8, _Internal::arc_backup_and_restore_consent(this), output);
      break;
    case kArcLocationServiceConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        9, _Internal::arc_location_service_consent(this), output);
      break;
    case kArcPlayTermsOfServiceConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        10, _Internal::arc_play_terms_of_service_consent(this), output);
      break;
    case kArcMetricsAndUsageConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        11, _Internal::arc_metrics_and_usage_consent(this), output);
      break;
    default: ;
  }
  // optional int64 client_consent_time_usec = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->client_consent_time_usec(), output);
  }

  switch (consent_case()) {
    case kUnifiedConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        13, _Internal::unified_consent(this), output);
      break;
    case kAssistantActivityControlConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        14, _Internal::assistant_activity_control_consent(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserConsentSpecifics)
}

size_t UserConsentSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserConsentSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->description_grd_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->description_grd_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string locale = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->locale());
    }

    // optional string account_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->account_id());
    }

    // optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->feature());
    }

    // optional int32 confirmation_grd_id = 3 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->confirmation_grd_id());
    }

    // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int64 client_consent_time_usec = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->client_consent_time_usec());
    }

  }
  switch (consent_case()) {
    // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
    case kSyncConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.sync_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
    case kArcBackupAndRestoreConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_backup_and_restore_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
    case kArcLocationServiceConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_location_service_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
    case kArcPlayTermsOfServiceConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_play_terms_of_service_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
    case kArcMetricsAndUsageConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_metrics_and_usage_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
    case kUnifiedConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.unified_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;
    case kAssistantActivityControlConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.assistant_activity_control_consent_);
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserConsentSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserConsentSpecifics*>(
      &from));
}

void UserConsentSpecifics::MergeFrom(const UserConsentSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserConsentSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_grd_ids_.MergeFrom(from.description_grd_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      feature_ = from.feature_;
    }
    if (cached_has_bits & 0x00000008u) {
      confirmation_grd_id_ = from.confirmation_grd_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_consent_time_usec_ = from.client_consent_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.consent_case()) {
    case kSyncConsent: {
      mutable_sync_consent()->::sync_pb::UserConsentTypes_SyncConsent::MergeFrom(from.sync_consent());
      break;
    }
    case kArcBackupAndRestoreConsent: {
      mutable_arc_backup_and_restore_consent()->::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(from.arc_backup_and_restore_consent());
      break;
    }
    case kArcLocationServiceConsent: {
      mutable_arc_location_service_consent()->::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(from.arc_location_service_consent());
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      mutable_arc_play_terms_of_service_consent()->::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(from.arc_play_terms_of_service_consent());
      break;
    }
    case kArcMetricsAndUsageConsent: {
      mutable_arc_metrics_and_usage_consent()->::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::MergeFrom(from.arc_metrics_and_usage_consent());
      break;
    }
    case kUnifiedConsent: {
      mutable_unified_consent()->::sync_pb::UserConsentTypes_UnifiedConsent::MergeFrom(from.unified_consent());
      break;
    }
    case kAssistantActivityControlConsent: {
      mutable_assistant_activity_control_consent()->::sync_pb::UserConsentTypes_AssistantActivityControlConsent::MergeFrom(from.assistant_activity_control_consent());
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
}

void UserConsentSpecifics::CopyFrom(const UserConsentSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserConsentSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConsentSpecifics::IsInitialized() const {
  return true;
}

void UserConsentSpecifics::InternalSwap(UserConsentSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_grd_ids_.InternalSwap(&other->description_grd_ids_);
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(feature_, other->feature_);
  swap(confirmation_grd_id_, other->confirmation_grd_id_);
  swap(status_, other->status_);
  swap(client_consent_time_usec_, other->client_consent_time_usec_);
  swap(consent_, other->consent_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string UserConsentSpecifics::GetTypeName() const {
  return "sync_pb.UserConsentSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::UserConsentSpecifics* Arena::CreateMaybeMessage< ::sync_pb::UserConsentSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::UserConsentSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
