// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

#include "sync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_app_5flist_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppListSpecifics_app_5flist_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fnotification_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppNotification_app_5fnotification_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsetting_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppSettingSpecifics_app_5fsetting_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppSpecifics_app_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arc_5fpackage_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArcPackageSpecifics_arc_5fpackage_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillProfileSpecifics_autofill_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillSpecifics_autofill_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AutofillWalletSpecifics_autofill_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bookmark_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BookmarkSpecifics_bookmark_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChipBag_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromiumExtensionsActivity_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearServerDataMessage_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearServerDataResponse_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientCommand_client_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientConfigParams_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientStatus_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServerResponse_Error_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommitMessage_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommitResponse_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommitResponse_EntryResponse_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommitResponse_EntryResponse_DatatypeSpecificError_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataTypeContext_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataTypeProgressMarker_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fdebug_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugInfo_client_5fdebug_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5finfo_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceInfoSpecifics_device_5finfo_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dictionary_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DictionarySpecifics_dictionary_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_encryption_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncryptedData_encryption_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<44> scc_info_EntitySpecifics_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ExperimentsSpecifics_experiments_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extension_5fsetting_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtensionSettingSpecifics_extension_5fsetting_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extension_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtensionSpecifics_extension_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_favicon_5fimage_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaviconImageSpecifics_favicon_5fimage_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_favicon_5ftracking_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaviconTrackingSpecifics_favicon_5ftracking_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GarbageCollectionDirective_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUpdateTriggers_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_get_5fupdates_5fcaller_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUpdatesCallerInfo_get_5fupdates_5fcaller_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetUpdatesMessage_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetUpdatesResponse_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_history_5fdelete_5fdirective_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HistoryDeleteDirectiveSpecifics_history_5fdelete_5fdirective_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_managed_5fuser_5fsetting_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManagedUserSettingSpecifics_managed_5fuser_5fsetting_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_managed_5fuser_5fshared_5fsetting_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManagedUserSharedSettingSpecifics_managed_5fuser_5fshared_5fsetting_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_managed_5fuser_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManagedUserSpecifics_managed_5fuser_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_managed_5fuser_5fwhitelist_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManagedUserWhitelistSpecifics_managed_5fuser_5fwhitelist_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nigori_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NigoriSpecifics_nigori_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_os_5fpreference_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OsPreferenceSpecifics_os_5fpreference_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_os_5fpriority_5fpreference_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OsPriorityPreferenceSpecifics_os_5fpriority_5fpreference_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_password_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PasswordSpecifics_password_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_preference_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreferenceSpecifics_preference_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_printer_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrinterSpecifics_printer_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_priority_5fpreference_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriorityPreferenceSpecifics_priority_5fpreference_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilingData_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_reading_5flist_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadingListSpecifics_reading_5flist_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_search_5fengine_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchEngineSpecifics_search_5fengine_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_security_5fevent_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecurityEventSpecifics_security_5fevent_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_send_5ftab_5fto_5fself_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendTabToSelfSpecifics_send_5ftab_5fto_5fself_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_session_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SessionSpecifics_session_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SharingMessageCommitError_sharing_5fmessage_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SharingMessageSpecifics_sharing_5fmessage_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncDisabledEvent_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SyncEntity_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_synced_5fnotification_5fapp_5finfo_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncedNotificationAppInfoSpecifics_synced_5fnotification_5fapp_5finfo_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_synced_5fnotification_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncedNotificationSpecifics_synced_5fnotification_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_theme_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThemeSpecifics_theme_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_typed_5furl_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TypedUrlSpecifics_typed_5furl_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_unique_5fposition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniquePosition_unique_5fposition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_UserConsentSpecifics_user_5fconsent_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fevent_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_UserEventSpecifics_user_5fevent_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletMetadataSpecifics_autofill_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_web_5fapp_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebAppSpecifics_web_5fapp_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wifi_5fconfiguration_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WifiConfigurationSpecifics_wifi_5fconfiguration_5fspecifics_2eproto;
namespace sync_pb {
class ProfilingDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilingData> _instance;
} _ProfilingData_default_instance_;
class EntitySpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntitySpecifics> _instance;
  const ::sync_pb::AutofillSpecifics* autofill_;
  const ::sync_pb::BookmarkSpecifics* bookmark_;
  const ::sync_pb::PreferenceSpecifics* preference_;
  const ::sync_pb::TypedUrlSpecifics* typed_url_;
  const ::sync_pb::ThemeSpecifics* theme_;
  const ::sync_pb::AppNotification* app_notification_;
  const ::sync_pb::PasswordSpecifics* password_;
  const ::sync_pb::NigoriSpecifics* nigori_;
  const ::sync_pb::ExtensionSpecifics* extension_;
  const ::sync_pb::AppSpecifics* app_;
  const ::sync_pb::SessionSpecifics* session_;
  const ::sync_pb::AutofillProfileSpecifics* autofill_profile_;
  const ::sync_pb::SearchEngineSpecifics* search_engine_;
  const ::sync_pb::ExtensionSettingSpecifics* extension_setting_;
  const ::sync_pb::AppSettingSpecifics* app_setting_;
  const ::sync_pb::HistoryDeleteDirectiveSpecifics* history_delete_directive_;
  const ::sync_pb::SyncedNotificationSpecifics* synced_notification_;
  const ::sync_pb::SyncedNotificationAppInfoSpecifics* synced_notification_app_info_;
  const ::sync_pb::DeviceInfoSpecifics* device_info_;
  const ::sync_pb::ExperimentsSpecifics* experiments_;
  const ::sync_pb::PriorityPreferenceSpecifics* priority_preference_;
  const ::sync_pb::DictionarySpecifics* dictionary_;
  const ::sync_pb::FaviconTrackingSpecifics* favicon_tracking_;
  const ::sync_pb::FaviconImageSpecifics* favicon_image_;
  const ::sync_pb::ManagedUserSettingSpecifics* managed_user_setting_;
  const ::sync_pb::ManagedUserSpecifics* managed_user_;
  const ::sync_pb::ManagedUserSharedSettingSpecifics* managed_user_shared_setting_;
  const ::sync_pb::ManagedUserWhitelistSpecifics* managed_user_whitelist_;
  const ::sync_pb::AppListSpecifics* app_list_;
  const ::sync_pb::AutofillWalletSpecifics* autofill_wallet_;
  const ::sync_pb::WalletMetadataSpecifics* wallet_metadata_;
  const ::sync_pb::ArcPackageSpecifics* arc_package_;
  const ::sync_pb::PrinterSpecifics* printer_;
  const ::sync_pb::ReadingListSpecifics* reading_list_;
  const ::sync_pb::UserEventSpecifics* user_event_;
  const ::sync_pb::UserConsentSpecifics* user_consent_;
  const ::sync_pb::SendTabToSelfSpecifics* send_tab_to_self_;
  const ::sync_pb::SecurityEventSpecifics* security_event_;
  const ::sync_pb::WebAppSpecifics* web_app_;
  const ::sync_pb::WifiConfigurationSpecifics* wifi_configuration_;
  const ::sync_pb::OsPreferenceSpecifics* os_preference_;
  const ::sync_pb::OsPriorityPreferenceSpecifics* os_priority_preference_;
  const ::sync_pb::SharingMessageSpecifics* sharing_message_;
} _EntitySpecifics_default_instance_;
class SyncEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncEntity> _instance;
} _SyncEntity_default_instance_;
class ChromiumExtensionsActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromiumExtensionsActivity> _instance;
} _ChromiumExtensionsActivity_default_instance_;
class ClientConfigParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientConfigParams> _instance;
} _ClientConfigParams_default_instance_;
class CommitMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitMessage> _instance;
} _CommitMessage_default_instance_;
class GetUpdateTriggersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUpdateTriggers> _instance;
} _GetUpdateTriggers_default_instance_;
class GarbageCollectionDirectiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GarbageCollectionDirective> _instance;
} _GarbageCollectionDirective_default_instance_;
class DataTypeProgressMarkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataTypeProgressMarker> _instance;
} _DataTypeProgressMarker_default_instance_;
class GetUpdatesMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUpdatesMessage> _instance;
} _GetUpdatesMessage_default_instance_;
class ClearServerDataMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearServerDataMessage> _instance;
} _ClearServerDataMessage_default_instance_;
class ClearServerDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearServerDataResponse> _instance;
} _ClearServerDataResponse_default_instance_;
class ChipBagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChipBag> _instance;
} _ChipBag_default_instance_;
class ClientStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientStatus> _instance;
} _ClientStatus_default_instance_;
class DataTypeContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataTypeContext> _instance;
} _DataTypeContext_default_instance_;
class ClientToServerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServerMessage> _instance;
} _ClientToServerMessage_default_instance_;
class GetCrashInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCrashInfoRequest> _instance;
} _GetCrashInfoRequest_default_instance_;
class GetCrashInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCrashInfoResponse> _instance;
} _GetCrashInfoResponse_default_instance_;
class CommitResponse_EntryResponse_DatatypeSpecificErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitResponse_EntryResponse_DatatypeSpecificError> _instance;
  const ::sync_pb::SharingMessageCommitError* sharing_message_error_;
} _CommitResponse_EntryResponse_DatatypeSpecificError_default_instance_;
class CommitResponse_EntryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitResponse_EntryResponse> _instance;
} _CommitResponse_EntryResponse_default_instance_;
class CommitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitResponse> _instance;
} _CommitResponse_default_instance_;
class GetUpdatesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUpdatesResponse> _instance;
} _GetUpdatesResponse_default_instance_;
class ClientToServerResponse_ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServerResponse_Error> _instance;
} _ClientToServerResponse_Error_default_instance_;
class ClientToServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServerResponse> _instance;
} _ClientToServerResponse_default_instance_;
class EventRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventRequest> _instance;
} _EventRequest_default_instance_;
class EventResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventResponse> _instance;
} _EventResponse_default_instance_;
class SyncDisabledEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncDisabledEvent> _instance;
} _SyncDisabledEvent_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_ChipBag_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ChipBag_default_instance_;
    new (ptr) ::sync_pb::ChipBag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ChipBag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChipBag_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChipBag_sync_2eproto}, {}};

static void InitDefaultsscc_info_ChromiumExtensionsActivity_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ChromiumExtensionsActivity_default_instance_;
    new (ptr) ::sync_pb::ChromiumExtensionsActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ChromiumExtensionsActivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromiumExtensionsActivity_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromiumExtensionsActivity_sync_2eproto}, {}};

static void InitDefaultsscc_info_ClearServerDataMessage_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ClearServerDataMessage_default_instance_;
    new (ptr) ::sync_pb::ClearServerDataMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ClearServerDataMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearServerDataMessage_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClearServerDataMessage_sync_2eproto}, {}};

static void InitDefaultsscc_info_ClearServerDataResponse_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ClearServerDataResponse_default_instance_;
    new (ptr) ::sync_pb::ClearServerDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ClearServerDataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearServerDataResponse_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClearServerDataResponse_sync_2eproto}, {}};

static void InitDefaultsscc_info_ClientConfigParams_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ClientConfigParams_default_instance_;
    new (ptr) ::sync_pb::ClientConfigParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ClientConfigParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientConfigParams_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientConfigParams_sync_2eproto}, {}};

static void InitDefaultsscc_info_ClientStatus_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ClientStatus_default_instance_;
    new (ptr) ::sync_pb::ClientStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ClientStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientStatus_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientStatus_sync_2eproto}, {}};

static void InitDefaultsscc_info_ClientToServerMessage_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ClientToServerMessage_default_instance_;
    new (ptr) ::sync_pb::ClientToServerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ClientToServerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ClientToServerMessage_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_ClientToServerMessage_sync_2eproto}, {
      &scc_info_CommitMessage_sync_2eproto.base,
      &scc_info_GetUpdatesMessage_sync_2eproto.base,
      &scc_info_DebugInfo_client_5fdebug_5finfo_2eproto.base,
      &scc_info_ChipBag_sync_2eproto.base,
      &scc_info_ClientStatus_sync_2eproto.base,
      &scc_info_ClearServerDataMessage_sync_2eproto.base,}};

static void InitDefaultsscc_info_ClientToServerResponse_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ClientToServerResponse_default_instance_;
    new (ptr) ::sync_pb::ClientToServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ClientToServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ClientToServerResponse_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_ClientToServerResponse_sync_2eproto}, {
      &scc_info_CommitResponse_sync_2eproto.base,
      &scc_info_GetUpdatesResponse_sync_2eproto.base,
      &scc_info_ClientCommand_client_5fcommands_2eproto.base,
      &scc_info_ProfilingData_sync_2eproto.base,
      &scc_info_ClientToServerResponse_Error_sync_2eproto.base,
      &scc_info_ChipBag_sync_2eproto.base,
      &scc_info_ClearServerDataResponse_sync_2eproto.base,}};

static void InitDefaultsscc_info_ClientToServerResponse_Error_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ClientToServerResponse_Error_default_instance_;
    new (ptr) ::sync_pb::ClientToServerResponse_Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ClientToServerResponse_Error::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientToServerResponse_Error_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientToServerResponse_Error_sync_2eproto}, {}};

static void InitDefaultsscc_info_CommitMessage_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_CommitMessage_default_instance_;
    new (ptr) ::sync_pb::CommitMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::CommitMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommitMessage_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_CommitMessage_sync_2eproto}, {
      &scc_info_SyncEntity_sync_2eproto.base,
      &scc_info_ChromiumExtensionsActivity_sync_2eproto.base,
      &scc_info_ClientConfigParams_sync_2eproto.base,
      &scc_info_DataTypeContext_sync_2eproto.base,}};

static void InitDefaultsscc_info_CommitResponse_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_CommitResponse_default_instance_;
    new (ptr) ::sync_pb::CommitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::CommitResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommitResponse_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CommitResponse_sync_2eproto}, {
      &scc_info_CommitResponse_EntryResponse_sync_2eproto.base,}};

static void InitDefaultsscc_info_CommitResponse_EntryResponse_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_CommitResponse_EntryResponse_default_instance_;
    new (ptr) ::sync_pb::CommitResponse_EntryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::CommitResponse_EntryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommitResponse_EntryResponse_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CommitResponse_EntryResponse_sync_2eproto}, {
      &scc_info_CommitResponse_EntryResponse_DatatypeSpecificError_sync_2eproto.base,}};

static void InitDefaultsscc_info_CommitResponse_EntryResponse_DatatypeSpecificError_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_CommitResponse_EntryResponse_DatatypeSpecificError_default_instance_;
    new (ptr) ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommitResponse_EntryResponse_DatatypeSpecificError_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CommitResponse_EntryResponse_DatatypeSpecificError_sync_2eproto}, {
      &scc_info_SharingMessageCommitError_sharing_5fmessage_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_DataTypeContext_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_DataTypeContext_default_instance_;
    new (ptr) ::sync_pb::DataTypeContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::DataTypeContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataTypeContext_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DataTypeContext_sync_2eproto}, {}};

static void InitDefaultsscc_info_DataTypeProgressMarker_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_DataTypeProgressMarker_default_instance_;
    new (ptr) ::sync_pb::DataTypeProgressMarker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::DataTypeProgressMarker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataTypeProgressMarker_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DataTypeProgressMarker_sync_2eproto}, {
      &scc_info_GetUpdateTriggers_sync_2eproto.base,
      &scc_info_GarbageCollectionDirective_sync_2eproto.base,}};

static void InitDefaultsscc_info_EntitySpecifics_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_EntitySpecifics_default_instance_;
    new (ptr) ::sync_pb::EntitySpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::EntitySpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<44> scc_info_EntitySpecifics_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 44, InitDefaultsscc_info_EntitySpecifics_sync_2eproto}, {
      &scc_info_EncryptedData_encryption_2eproto.base,
      &scc_info_AutofillSpecifics_autofill_5fspecifics_2eproto.base,
      &scc_info_BookmarkSpecifics_bookmark_5fspecifics_2eproto.base,
      &scc_info_PreferenceSpecifics_preference_5fspecifics_2eproto.base,
      &scc_info_TypedUrlSpecifics_typed_5furl_5fspecifics_2eproto.base,
      &scc_info_ThemeSpecifics_theme_5fspecifics_2eproto.base,
      &scc_info_AppNotification_app_5fnotification_5fspecifics_2eproto.base,
      &scc_info_PasswordSpecifics_password_5fspecifics_2eproto.base,
      &scc_info_NigoriSpecifics_nigori_5fspecifics_2eproto.base,
      &scc_info_ExtensionSpecifics_extension_5fspecifics_2eproto.base,
      &scc_info_AppSpecifics_app_5fspecifics_2eproto.base,
      &scc_info_SessionSpecifics_session_5fspecifics_2eproto.base,
      &scc_info_AutofillProfileSpecifics_autofill_5fspecifics_2eproto.base,
      &scc_info_SearchEngineSpecifics_search_5fengine_5fspecifics_2eproto.base,
      &scc_info_ExtensionSettingSpecifics_extension_5fsetting_5fspecifics_2eproto.base,
      &scc_info_AppSettingSpecifics_app_5fsetting_5fspecifics_2eproto.base,
      &scc_info_HistoryDeleteDirectiveSpecifics_history_5fdelete_5fdirective_5fspecifics_2eproto.base,
      &scc_info_SyncedNotificationSpecifics_synced_5fnotification_5fspecifics_2eproto.base,
      &scc_info_SyncedNotificationAppInfoSpecifics_synced_5fnotification_5fapp_5finfo_5fspecifics_2eproto.base,
      &scc_info_DeviceInfoSpecifics_device_5finfo_5fspecifics_2eproto.base,
      &scc_info_ExperimentsSpecifics_experiments_5fspecifics_2eproto.base,
      &scc_info_PriorityPreferenceSpecifics_priority_5fpreference_5fspecifics_2eproto.base,
      &scc_info_DictionarySpecifics_dictionary_5fspecifics_2eproto.base,
      &scc_info_FaviconTrackingSpecifics_favicon_5ftracking_5fspecifics_2eproto.base,
      &scc_info_FaviconImageSpecifics_favicon_5fimage_5fspecifics_2eproto.base,
      &scc_info_ManagedUserSettingSpecifics_managed_5fuser_5fsetting_5fspecifics_2eproto.base,
      &scc_info_ManagedUserSpecifics_managed_5fuser_5fspecifics_2eproto.base,
      &scc_info_ManagedUserSharedSettingSpecifics_managed_5fuser_5fshared_5fsetting_5fspecifics_2eproto.base,
      &scc_info_ManagedUserWhitelistSpecifics_managed_5fuser_5fwhitelist_5fspecifics_2eproto.base,
      &scc_info_AppListSpecifics_app_5flist_5fspecifics_2eproto.base,
      &scc_info_AutofillWalletSpecifics_autofill_5fspecifics_2eproto.base,
      &scc_info_WalletMetadataSpecifics_autofill_5fspecifics_2eproto.base,
      &scc_info_ArcPackageSpecifics_arc_5fpackage_5fspecifics_2eproto.base,
      &scc_info_PrinterSpecifics_printer_5fspecifics_2eproto.base,
      &scc_info_ReadingListSpecifics_reading_5flist_5fspecifics_2eproto.base,
      &scc_info_UserEventSpecifics_user_5fevent_5fspecifics_2eproto.base,
      &scc_info_UserConsentSpecifics_user_5fconsent_5fspecifics_2eproto.base,
      &scc_info_SendTabToSelfSpecifics_send_5ftab_5fto_5fself_5fspecifics_2eproto.base,
      &scc_info_SecurityEventSpecifics_security_5fevent_5fspecifics_2eproto.base,
      &scc_info_WebAppSpecifics_web_5fapp_5fspecifics_2eproto.base,
      &scc_info_WifiConfigurationSpecifics_wifi_5fconfiguration_5fspecifics_2eproto.base,
      &scc_info_OsPreferenceSpecifics_os_5fpreference_5fspecifics_2eproto.base,
      &scc_info_OsPriorityPreferenceSpecifics_os_5fpriority_5fpreference_5fspecifics_2eproto.base,
      &scc_info_SharingMessageSpecifics_sharing_5fmessage_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_EventRequest_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_EventRequest_default_instance_;
    new (ptr) ::sync_pb::EventRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::EventRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventRequest_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EventRequest_sync_2eproto}, {
      &scc_info_SyncDisabledEvent_sync_2eproto.base,}};

static void InitDefaultsscc_info_EventResponse_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_EventResponse_default_instance_;
    new (ptr) ::sync_pb::EventResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::EventResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventResponse_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EventResponse_sync_2eproto}, {}};

static void InitDefaultsscc_info_GarbageCollectionDirective_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GarbageCollectionDirective_default_instance_;
    new (ptr) ::sync_pb::GarbageCollectionDirective();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GarbageCollectionDirective::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GarbageCollectionDirective_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GarbageCollectionDirective_sync_2eproto}, {}};

static void InitDefaultsscc_info_GetCrashInfoRequest_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GetCrashInfoRequest_default_instance_;
    new (ptr) ::sync_pb::GetCrashInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GetCrashInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCrashInfoRequest_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCrashInfoRequest_sync_2eproto}, {}};

static void InitDefaultsscc_info_GetCrashInfoResponse_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GetCrashInfoResponse_default_instance_;
    new (ptr) ::sync_pb::GetCrashInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GetCrashInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCrashInfoResponse_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCrashInfoResponse_sync_2eproto}, {}};

static void InitDefaultsscc_info_GetUpdateTriggers_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GetUpdateTriggers_default_instance_;
    new (ptr) ::sync_pb::GetUpdateTriggers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GetUpdateTriggers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUpdateTriggers_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetUpdateTriggers_sync_2eproto}, {}};

static void InitDefaultsscc_info_GetUpdatesMessage_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GetUpdatesMessage_default_instance_;
    new (ptr) ::sync_pb::GetUpdatesMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GetUpdatesMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetUpdatesMessage_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GetUpdatesMessage_sync_2eproto}, {
      &scc_info_GetUpdatesCallerInfo_get_5fupdates_5fcaller_5finfo_2eproto.base,
      &scc_info_DataTypeProgressMarker_sync_2eproto.base,
      &scc_info_DataTypeContext_sync_2eproto.base,}};

static void InitDefaultsscc_info_GetUpdatesResponse_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GetUpdatesResponse_default_instance_;
    new (ptr) ::sync_pb::GetUpdatesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GetUpdatesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetUpdatesResponse_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GetUpdatesResponse_sync_2eproto}, {
      &scc_info_SyncEntity_sync_2eproto.base,
      &scc_info_DataTypeProgressMarker_sync_2eproto.base,
      &scc_info_DataTypeContext_sync_2eproto.base,}};

static void InitDefaultsscc_info_ProfilingData_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ProfilingData_default_instance_;
    new (ptr) ::sync_pb::ProfilingData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ProfilingData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilingData_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProfilingData_sync_2eproto}, {}};

static void InitDefaultsscc_info_SyncDisabledEvent_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_SyncDisabledEvent_default_instance_;
    new (ptr) ::sync_pb::SyncDisabledEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::SyncDisabledEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncDisabledEvent_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SyncDisabledEvent_sync_2eproto}, {}};

static void InitDefaultsscc_info_SyncEntity_sync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_SyncEntity_default_instance_;
    new (ptr) ::sync_pb::SyncEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::SyncEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SyncEntity_sync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SyncEntity_sync_2eproto}, {
      &scc_info_EntitySpecifics_sync_2eproto.base,
      &scc_info_UniquePosition_unique_5fposition_2eproto.base,}};

namespace sync_pb {
bool GarbageCollectionDirective_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GarbageCollectionDirective_Type_strings[4] = {};

static const char GarbageCollectionDirective_Type_names[] =
  "AGE_WATERMARK"
  "DEPRECATED_MAX_ITEM_COUNT"
  "UNKNOWN"
  "VERSION_WATERMARK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GarbageCollectionDirective_Type_entries[] = {
  { {GarbageCollectionDirective_Type_names + 0, 13}, 2 },
  { {GarbageCollectionDirective_Type_names + 13, 25}, 3 },
  { {GarbageCollectionDirective_Type_names + 38, 7}, 0 },
  { {GarbageCollectionDirective_Type_names + 45, 17}, 1 },
};

static const int GarbageCollectionDirective_Type_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  3, // 1 -> VERSION_WATERMARK
  0, // 2 -> AGE_WATERMARK
  1, // 3 -> DEPRECATED_MAX_ITEM_COUNT
};

const std::string& GarbageCollectionDirective_Type_Name(
    GarbageCollectionDirective_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GarbageCollectionDirective_Type_entries,
          GarbageCollectionDirective_Type_entries_by_number,
          4, GarbageCollectionDirective_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GarbageCollectionDirective_Type_entries,
      GarbageCollectionDirective_Type_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GarbageCollectionDirective_Type_strings[idx].get();
}
bool GarbageCollectionDirective_Type_Parse(
    const std::string& name, GarbageCollectionDirective_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GarbageCollectionDirective_Type_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<GarbageCollectionDirective_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::UNKNOWN;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::VERSION_WATERMARK;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::AGE_WATERMARK;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::DEPRECATED_MAX_ITEM_COUNT;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::Type_MIN;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::Type_MAX;
constexpr int GarbageCollectionDirective::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ClientToServerMessage_Contents_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientToServerMessage_Contents_strings[5] = {};

static const char ClientToServerMessage_Contents_names[] =
  "CLEAR_SERVER_DATA"
  "COMMIT"
  "DEPRECATED_3"
  "DEPRECATED_4"
  "GET_UPDATES";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientToServerMessage_Contents_entries[] = {
  { {ClientToServerMessage_Contents_names + 0, 17}, 5 },
  { {ClientToServerMessage_Contents_names + 17, 6}, 1 },
  { {ClientToServerMessage_Contents_names + 23, 12}, 3 },
  { {ClientToServerMessage_Contents_names + 35, 12}, 4 },
  { {ClientToServerMessage_Contents_names + 47, 11}, 2 },
};

static const int ClientToServerMessage_Contents_entries_by_number[] = {
  1, // 1 -> COMMIT
  4, // 2 -> GET_UPDATES
  2, // 3 -> DEPRECATED_3
  3, // 4 -> DEPRECATED_4
  0, // 5 -> CLEAR_SERVER_DATA
};

const std::string& ClientToServerMessage_Contents_Name(
    ClientToServerMessage_Contents value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientToServerMessage_Contents_entries,
          ClientToServerMessage_Contents_entries_by_number,
          5, ClientToServerMessage_Contents_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientToServerMessage_Contents_entries,
      ClientToServerMessage_Contents_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientToServerMessage_Contents_strings[idx].get();
}
bool ClientToServerMessage_Contents_Parse(
    const std::string& name, ClientToServerMessage_Contents* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientToServerMessage_Contents_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ClientToServerMessage_Contents>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientToServerMessage_Contents ClientToServerMessage::COMMIT;
constexpr ClientToServerMessage_Contents ClientToServerMessage::GET_UPDATES;
constexpr ClientToServerMessage_Contents ClientToServerMessage::DEPRECATED_3;
constexpr ClientToServerMessage_Contents ClientToServerMessage::DEPRECATED_4;
constexpr ClientToServerMessage_Contents ClientToServerMessage::CLEAR_SERVER_DATA;
constexpr ClientToServerMessage_Contents ClientToServerMessage::Contents_MIN;
constexpr ClientToServerMessage_Contents ClientToServerMessage::Contents_MAX;
constexpr int ClientToServerMessage::Contents_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CommitResponse_ResponseType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CommitResponse_ResponseType_strings[6] = {};

static const char CommitResponse_ResponseType_names[] =
  "CONFLICT"
  "INVALID_MESSAGE"
  "OVER_QUOTA"
  "RETRY"
  "SUCCESS"
  "TRANSIENT_ERROR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CommitResponse_ResponseType_entries[] = {
  { {CommitResponse_ResponseType_names + 0, 8}, 2 },
  { {CommitResponse_ResponseType_names + 8, 15}, 4 },
  { {CommitResponse_ResponseType_names + 23, 10}, 5 },
  { {CommitResponse_ResponseType_names + 33, 5}, 3 },
  { {CommitResponse_ResponseType_names + 38, 7}, 1 },
  { {CommitResponse_ResponseType_names + 45, 15}, 6 },
};

static const int CommitResponse_ResponseType_entries_by_number[] = {
  4, // 1 -> SUCCESS
  0, // 2 -> CONFLICT
  3, // 3 -> RETRY
  1, // 4 -> INVALID_MESSAGE
  2, // 5 -> OVER_QUOTA
  5, // 6 -> TRANSIENT_ERROR
};

const std::string& CommitResponse_ResponseType_Name(
    CommitResponse_ResponseType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CommitResponse_ResponseType_entries,
          CommitResponse_ResponseType_entries_by_number,
          6, CommitResponse_ResponseType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CommitResponse_ResponseType_entries,
      CommitResponse_ResponseType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CommitResponse_ResponseType_strings[idx].get();
}
bool CommitResponse_ResponseType_Parse(
    const std::string& name, CommitResponse_ResponseType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CommitResponse_ResponseType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<CommitResponse_ResponseType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommitResponse_ResponseType CommitResponse::SUCCESS;
constexpr CommitResponse_ResponseType CommitResponse::CONFLICT;
constexpr CommitResponse_ResponseType CommitResponse::RETRY;
constexpr CommitResponse_ResponseType CommitResponse::INVALID_MESSAGE;
constexpr CommitResponse_ResponseType CommitResponse::OVER_QUOTA;
constexpr CommitResponse_ResponseType CommitResponse::TRANSIENT_ERROR;
constexpr CommitResponse_ResponseType CommitResponse::ResponseType_MIN;
constexpr CommitResponse_ResponseType CommitResponse::ResponseType_MAX;
constexpr int CommitResponse::ResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ProfilingData::InitAsDefaultInstance() {
}
class ProfilingData::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilingData>()._has_bits_);
  static void set_has_meta_data_write_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_data_write_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_lookup_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_meta_data_read_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_data_read_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_total_request_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ProfilingData::ProfilingData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ProfilingData)
}
ProfilingData::ProfilingData(const ProfilingData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&meta_data_write_time_, &from.meta_data_write_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_request_time_) -
    reinterpret_cast<char*>(&meta_data_write_time_)) + sizeof(total_request_time_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ProfilingData)
}

void ProfilingData::SharedCtor() {
  ::memset(&meta_data_write_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_request_time_) -
      reinterpret_cast<char*>(&meta_data_write_time_)) + sizeof(total_request_time_));
}

ProfilingData::~ProfilingData() {
  // @@protoc_insertion_point(destructor:sync_pb.ProfilingData)
  SharedDtor();
}

void ProfilingData::SharedDtor() {
}

void ProfilingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilingData& ProfilingData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilingData_sync_2eproto.base);
  return *internal_default_instance();
}


void ProfilingData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ProfilingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&meta_data_write_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_request_time_) -
        reinterpret_cast<char*>(&meta_data_write_time_)) + sizeof(total_request_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProfilingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 meta_data_write_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_meta_data_write_time(&has_bits);
          meta_data_write_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 file_data_write_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_file_data_write_time(&has_bits);
          file_data_write_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 user_lookup_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_user_lookup_time(&has_bits);
          user_lookup_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 meta_data_read_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_meta_data_read_time(&has_bits);
          meta_data_read_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 file_data_read_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_file_data_read_time(&has_bits);
          file_data_read_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_request_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_total_request_time(&has_bits);
          total_request_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProfilingData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ProfilingData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 meta_data_write_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_meta_data_write_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &meta_data_write_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 file_data_write_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_file_data_write_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_data_write_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 user_lookup_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_user_lookup_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_lookup_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 meta_data_read_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_meta_data_read_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &meta_data_read_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 file_data_read_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_file_data_read_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_data_read_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_request_time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_total_request_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_request_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ProfilingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ProfilingData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProfilingData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ProfilingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 meta_data_write_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->meta_data_write_time(), output);
  }

  // optional int64 file_data_write_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->file_data_write_time(), output);
  }

  // optional int64 user_lookup_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->user_lookup_time(), output);
  }

  // optional int64 meta_data_read_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->meta_data_read_time(), output);
  }

  // optional int64 file_data_read_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->file_data_read_time(), output);
  }

  // optional int64 total_request_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->total_request_time(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ProfilingData)
}

size_t ProfilingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ProfilingData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 meta_data_write_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->meta_data_write_time());
    }

    // optional int64 file_data_write_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->file_data_write_time());
    }

    // optional int64 user_lookup_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->user_lookup_time());
    }

    // optional int64 meta_data_read_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->meta_data_read_time());
    }

    // optional int64 file_data_read_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->file_data_read_time());
    }

    // optional int64 total_request_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_request_time());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilingData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProfilingData*>(
      &from));
}

void ProfilingData::MergeFrom(const ProfilingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ProfilingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      meta_data_write_time_ = from.meta_data_write_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      file_data_write_time_ = from.file_data_write_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_lookup_time_ = from.user_lookup_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      meta_data_read_time_ = from.meta_data_read_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_data_read_time_ = from.file_data_read_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_request_time_ = from.total_request_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilingData::CopyFrom(const ProfilingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ProfilingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilingData::IsInitialized() const {
  return true;
}

void ProfilingData::InternalSwap(ProfilingData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(meta_data_write_time_, other->meta_data_write_time_);
  swap(file_data_write_time_, other->file_data_write_time_);
  swap(user_lookup_time_, other->user_lookup_time_);
  swap(meta_data_read_time_, other->meta_data_read_time_);
  swap(file_data_read_time_, other->file_data_read_time_);
  swap(total_request_time_, other->total_request_time_);
}

std::string ProfilingData::GetTypeName() const {
  return "sync_pb.ProfilingData";
}


// ===================================================================

void EntitySpecifics::InitAsDefaultInstance() {
  ::sync_pb::_EntitySpecifics_default_instance_._instance.get_mutable()->encrypted_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
}
class EntitySpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<EntitySpecifics>()._has_bits_);
  static const ::sync_pb::EncryptedData& encrypted(const EntitySpecifics* msg);
  static void set_has_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::AutofillSpecifics& autofill(const EntitySpecifics* msg);
  static const ::sync_pb::BookmarkSpecifics& bookmark(const EntitySpecifics* msg);
  static const ::sync_pb::PreferenceSpecifics& preference(const EntitySpecifics* msg);
  static const ::sync_pb::TypedUrlSpecifics& typed_url(const EntitySpecifics* msg);
  static const ::sync_pb::ThemeSpecifics& theme(const EntitySpecifics* msg);
  static const ::sync_pb::AppNotification& app_notification(const EntitySpecifics* msg);
  static const ::sync_pb::PasswordSpecifics& password(const EntitySpecifics* msg);
  static const ::sync_pb::NigoriSpecifics& nigori(const EntitySpecifics* msg);
  static const ::sync_pb::ExtensionSpecifics& extension(const EntitySpecifics* msg);
  static const ::sync_pb::AppSpecifics& app(const EntitySpecifics* msg);
  static const ::sync_pb::SessionSpecifics& session(const EntitySpecifics* msg);
  static const ::sync_pb::AutofillProfileSpecifics& autofill_profile(const EntitySpecifics* msg);
  static const ::sync_pb::SearchEngineSpecifics& search_engine(const EntitySpecifics* msg);
  static const ::sync_pb::ExtensionSettingSpecifics& extension_setting(const EntitySpecifics* msg);
  static const ::sync_pb::AppSettingSpecifics& app_setting(const EntitySpecifics* msg);
  static const ::sync_pb::HistoryDeleteDirectiveSpecifics& history_delete_directive(const EntitySpecifics* msg);
  static const ::sync_pb::SyncedNotificationSpecifics& synced_notification(const EntitySpecifics* msg);
  static const ::sync_pb::SyncedNotificationAppInfoSpecifics& synced_notification_app_info(const EntitySpecifics* msg);
  static const ::sync_pb::DeviceInfoSpecifics& device_info(const EntitySpecifics* msg);
  static const ::sync_pb::ExperimentsSpecifics& experiments(const EntitySpecifics* msg);
  static const ::sync_pb::PriorityPreferenceSpecifics& priority_preference(const EntitySpecifics* msg);
  static const ::sync_pb::DictionarySpecifics& dictionary(const EntitySpecifics* msg);
  static const ::sync_pb::FaviconTrackingSpecifics& favicon_tracking(const EntitySpecifics* msg);
  static const ::sync_pb::FaviconImageSpecifics& favicon_image(const EntitySpecifics* msg);
  static const ::sync_pb::ManagedUserSettingSpecifics& managed_user_setting(const EntitySpecifics* msg);
  static const ::sync_pb::ManagedUserSpecifics& managed_user(const EntitySpecifics* msg);
  static const ::sync_pb::ManagedUserSharedSettingSpecifics& managed_user_shared_setting(const EntitySpecifics* msg);
  static const ::sync_pb::ManagedUserWhitelistSpecifics& managed_user_whitelist(const EntitySpecifics* msg);
  static const ::sync_pb::AppListSpecifics& app_list(const EntitySpecifics* msg);
  static const ::sync_pb::AutofillWalletSpecifics& autofill_wallet(const EntitySpecifics* msg);
  static const ::sync_pb::WalletMetadataSpecifics& wallet_metadata(const EntitySpecifics* msg);
  static const ::sync_pb::ArcPackageSpecifics& arc_package(const EntitySpecifics* msg);
  static const ::sync_pb::PrinterSpecifics& printer(const EntitySpecifics* msg);
  static const ::sync_pb::ReadingListSpecifics& reading_list(const EntitySpecifics* msg);
  static const ::sync_pb::UserEventSpecifics& user_event(const EntitySpecifics* msg);
  static const ::sync_pb::UserConsentSpecifics& user_consent(const EntitySpecifics* msg);
  static const ::sync_pb::SendTabToSelfSpecifics& send_tab_to_self(const EntitySpecifics* msg);
  static const ::sync_pb::SecurityEventSpecifics& security_event(const EntitySpecifics* msg);
  static const ::sync_pb::WebAppSpecifics& web_app(const EntitySpecifics* msg);
  static const ::sync_pb::WifiConfigurationSpecifics& wifi_configuration(const EntitySpecifics* msg);
  static const ::sync_pb::OsPreferenceSpecifics& os_preference(const EntitySpecifics* msg);
  static const ::sync_pb::OsPriorityPreferenceSpecifics& os_priority_preference(const EntitySpecifics* msg);
  static const ::sync_pb::SharingMessageSpecifics& sharing_message(const EntitySpecifics* msg);
};

const ::sync_pb::EncryptedData&
EntitySpecifics::_Internal::encrypted(const EntitySpecifics* msg) {
  return *msg->encrypted_;
}
const ::sync_pb::AutofillSpecifics&
EntitySpecifics::_Internal::autofill(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.autofill_;
}
const ::sync_pb::BookmarkSpecifics&
EntitySpecifics::_Internal::bookmark(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.bookmark_;
}
const ::sync_pb::PreferenceSpecifics&
EntitySpecifics::_Internal::preference(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.preference_;
}
const ::sync_pb::TypedUrlSpecifics&
EntitySpecifics::_Internal::typed_url(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.typed_url_;
}
const ::sync_pb::ThemeSpecifics&
EntitySpecifics::_Internal::theme(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.theme_;
}
const ::sync_pb::AppNotification&
EntitySpecifics::_Internal::app_notification(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.app_notification_;
}
const ::sync_pb::PasswordSpecifics&
EntitySpecifics::_Internal::password(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.password_;
}
const ::sync_pb::NigoriSpecifics&
EntitySpecifics::_Internal::nigori(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.nigori_;
}
const ::sync_pb::ExtensionSpecifics&
EntitySpecifics::_Internal::extension(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.extension_;
}
const ::sync_pb::AppSpecifics&
EntitySpecifics::_Internal::app(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.app_;
}
const ::sync_pb::SessionSpecifics&
EntitySpecifics::_Internal::session(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.session_;
}
const ::sync_pb::AutofillProfileSpecifics&
EntitySpecifics::_Internal::autofill_profile(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.autofill_profile_;
}
const ::sync_pb::SearchEngineSpecifics&
EntitySpecifics::_Internal::search_engine(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.search_engine_;
}
const ::sync_pb::ExtensionSettingSpecifics&
EntitySpecifics::_Internal::extension_setting(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.extension_setting_;
}
const ::sync_pb::AppSettingSpecifics&
EntitySpecifics::_Internal::app_setting(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.app_setting_;
}
const ::sync_pb::HistoryDeleteDirectiveSpecifics&
EntitySpecifics::_Internal::history_delete_directive(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.history_delete_directive_;
}
const ::sync_pb::SyncedNotificationSpecifics&
EntitySpecifics::_Internal::synced_notification(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.synced_notification_;
}
const ::sync_pb::SyncedNotificationAppInfoSpecifics&
EntitySpecifics::_Internal::synced_notification_app_info(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.synced_notification_app_info_;
}
const ::sync_pb::DeviceInfoSpecifics&
EntitySpecifics::_Internal::device_info(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.device_info_;
}
const ::sync_pb::ExperimentsSpecifics&
EntitySpecifics::_Internal::experiments(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.experiments_;
}
const ::sync_pb::PriorityPreferenceSpecifics&
EntitySpecifics::_Internal::priority_preference(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.priority_preference_;
}
const ::sync_pb::DictionarySpecifics&
EntitySpecifics::_Internal::dictionary(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.dictionary_;
}
const ::sync_pb::FaviconTrackingSpecifics&
EntitySpecifics::_Internal::favicon_tracking(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.favicon_tracking_;
}
const ::sync_pb::FaviconImageSpecifics&
EntitySpecifics::_Internal::favicon_image(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.favicon_image_;
}
const ::sync_pb::ManagedUserSettingSpecifics&
EntitySpecifics::_Internal::managed_user_setting(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.managed_user_setting_;
}
const ::sync_pb::ManagedUserSpecifics&
EntitySpecifics::_Internal::managed_user(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.managed_user_;
}
const ::sync_pb::ManagedUserSharedSettingSpecifics&
EntitySpecifics::_Internal::managed_user_shared_setting(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.managed_user_shared_setting_;
}
const ::sync_pb::ManagedUserWhitelistSpecifics&
EntitySpecifics::_Internal::managed_user_whitelist(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.managed_user_whitelist_;
}
const ::sync_pb::AppListSpecifics&
EntitySpecifics::_Internal::app_list(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.app_list_;
}
const ::sync_pb::AutofillWalletSpecifics&
EntitySpecifics::_Internal::autofill_wallet(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.autofill_wallet_;
}
const ::sync_pb::WalletMetadataSpecifics&
EntitySpecifics::_Internal::wallet_metadata(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.wallet_metadata_;
}
const ::sync_pb::ArcPackageSpecifics&
EntitySpecifics::_Internal::arc_package(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.arc_package_;
}
const ::sync_pb::PrinterSpecifics&
EntitySpecifics::_Internal::printer(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.printer_;
}
const ::sync_pb::ReadingListSpecifics&
EntitySpecifics::_Internal::reading_list(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.reading_list_;
}
const ::sync_pb::UserEventSpecifics&
EntitySpecifics::_Internal::user_event(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.user_event_;
}
const ::sync_pb::UserConsentSpecifics&
EntitySpecifics::_Internal::user_consent(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.user_consent_;
}
const ::sync_pb::SendTabToSelfSpecifics&
EntitySpecifics::_Internal::send_tab_to_self(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.send_tab_to_self_;
}
const ::sync_pb::SecurityEventSpecifics&
EntitySpecifics::_Internal::security_event(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.security_event_;
}
const ::sync_pb::WebAppSpecifics&
EntitySpecifics::_Internal::web_app(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.web_app_;
}
const ::sync_pb::WifiConfigurationSpecifics&
EntitySpecifics::_Internal::wifi_configuration(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.wifi_configuration_;
}
const ::sync_pb::OsPreferenceSpecifics&
EntitySpecifics::_Internal::os_preference(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.os_preference_;
}
const ::sync_pb::OsPriorityPreferenceSpecifics&
EntitySpecifics::_Internal::os_priority_preference(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.os_priority_preference_;
}
const ::sync_pb::SharingMessageSpecifics&
EntitySpecifics::_Internal::sharing_message(const EntitySpecifics* msg) {
  return *msg->specifics_variant_.sharing_message_;
}
void EntitySpecifics::clear_encrypted() {
  if (encrypted_ != nullptr) encrypted_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void EntitySpecifics::set_allocated_autofill(::sync_pb::AutofillSpecifics* autofill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (autofill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autofill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill, submessage_arena);
    }
    set_has_autofill();
    specifics_variant_.autofill_ = autofill;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill)
}
void EntitySpecifics::clear_autofill() {
  if (has_autofill()) {
    delete specifics_variant_.autofill_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_bookmark(::sync_pb::BookmarkSpecifics* bookmark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (bookmark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bookmark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bookmark, submessage_arena);
    }
    set_has_bookmark();
    specifics_variant_.bookmark_ = bookmark;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.bookmark)
}
void EntitySpecifics::clear_bookmark() {
  if (has_bookmark()) {
    delete specifics_variant_.bookmark_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_preference(::sync_pb::PreferenceSpecifics* preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preference, submessage_arena);
    }
    set_has_preference();
    specifics_variant_.preference_ = preference;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.preference)
}
void EntitySpecifics::clear_preference() {
  if (has_preference()) {
    delete specifics_variant_.preference_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_typed_url(::sync_pb::TypedUrlSpecifics* typed_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (typed_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      typed_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, typed_url, submessage_arena);
    }
    set_has_typed_url();
    specifics_variant_.typed_url_ = typed_url;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.typed_url)
}
void EntitySpecifics::clear_typed_url() {
  if (has_typed_url()) {
    delete specifics_variant_.typed_url_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_theme(::sync_pb::ThemeSpecifics* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    set_has_theme();
    specifics_variant_.theme_ = theme;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.theme)
}
void EntitySpecifics::clear_theme() {
  if (has_theme()) {
    delete specifics_variant_.theme_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_app_notification(::sync_pb::AppNotification* app_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (app_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_notification, submessage_arena);
    }
    set_has_app_notification();
    specifics_variant_.app_notification_ = app_notification;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app_notification)
}
void EntitySpecifics::clear_app_notification() {
  if (has_app_notification()) {
    delete specifics_variant_.app_notification_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_password(::sync_pb::PasswordSpecifics* password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password, submessage_arena);
    }
    set_has_password();
    specifics_variant_.password_ = password;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.password)
}
void EntitySpecifics::clear_password() {
  if (has_password()) {
    delete specifics_variant_.password_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_nigori(::sync_pb::NigoriSpecifics* nigori) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (nigori) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nigori = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nigori, submessage_arena);
    }
    set_has_nigori();
    specifics_variant_.nigori_ = nigori;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.nigori)
}
void EntitySpecifics::clear_nigori() {
  if (has_nigori()) {
    delete specifics_variant_.nigori_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_extension(::sync_pb::ExtensionSpecifics* extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension, submessage_arena);
    }
    set_has_extension();
    specifics_variant_.extension_ = extension;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.extension)
}
void EntitySpecifics::clear_extension() {
  if (has_extension()) {
    delete specifics_variant_.extension_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_app(::sync_pb::AppSpecifics* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    set_has_app();
    specifics_variant_.app_ = app;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app)
}
void EntitySpecifics::clear_app() {
  if (has_app()) {
    delete specifics_variant_.app_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_session(::sync_pb::SessionSpecifics* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    specifics_variant_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.session)
}
void EntitySpecifics::clear_session() {
  if (has_session()) {
    delete specifics_variant_.session_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_autofill_profile(::sync_pb::AutofillProfileSpecifics* autofill_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (autofill_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autofill_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill_profile, submessage_arena);
    }
    set_has_autofill_profile();
    specifics_variant_.autofill_profile_ = autofill_profile;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill_profile)
}
void EntitySpecifics::clear_autofill_profile() {
  if (has_autofill_profile()) {
    delete specifics_variant_.autofill_profile_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_search_engine(::sync_pb::SearchEngineSpecifics* search_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (search_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_engine, submessage_arena);
    }
    set_has_search_engine();
    specifics_variant_.search_engine_ = search_engine;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.search_engine)
}
void EntitySpecifics::clear_search_engine() {
  if (has_search_engine()) {
    delete specifics_variant_.search_engine_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_extension_setting(::sync_pb::ExtensionSettingSpecifics* extension_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (extension_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extension_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_setting, submessage_arena);
    }
    set_has_extension_setting();
    specifics_variant_.extension_setting_ = extension_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.extension_setting)
}
void EntitySpecifics::clear_extension_setting() {
  if (has_extension_setting()) {
    delete specifics_variant_.extension_setting_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_app_setting(::sync_pb::AppSettingSpecifics* app_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (app_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_setting, submessage_arena);
    }
    set_has_app_setting();
    specifics_variant_.app_setting_ = app_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app_setting)
}
void EntitySpecifics::clear_app_setting() {
  if (has_app_setting()) {
    delete specifics_variant_.app_setting_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_history_delete_directive(::sync_pb::HistoryDeleteDirectiveSpecifics* history_delete_directive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (history_delete_directive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      history_delete_directive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history_delete_directive, submessage_arena);
    }
    set_has_history_delete_directive();
    specifics_variant_.history_delete_directive_ = history_delete_directive;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.history_delete_directive)
}
void EntitySpecifics::clear_history_delete_directive() {
  if (has_history_delete_directive()) {
    delete specifics_variant_.history_delete_directive_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_synced_notification(::sync_pb::SyncedNotificationSpecifics* synced_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (synced_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      synced_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synced_notification, submessage_arena);
    }
    set_has_synced_notification();
    specifics_variant_.synced_notification_ = synced_notification;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.synced_notification)
}
void EntitySpecifics::clear_synced_notification() {
  if (has_synced_notification()) {
    delete specifics_variant_.synced_notification_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_synced_notification_app_info(::sync_pb::SyncedNotificationAppInfoSpecifics* synced_notification_app_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (synced_notification_app_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      synced_notification_app_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synced_notification_app_info, submessage_arena);
    }
    set_has_synced_notification_app_info();
    specifics_variant_.synced_notification_app_info_ = synced_notification_app_info;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.synced_notification_app_info)
}
void EntitySpecifics::clear_synced_notification_app_info() {
  if (has_synced_notification_app_info()) {
    delete specifics_variant_.synced_notification_app_info_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_device_info(::sync_pb::DeviceInfoSpecifics* device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    set_has_device_info();
    specifics_variant_.device_info_ = device_info;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.device_info)
}
void EntitySpecifics::clear_device_info() {
  if (has_device_info()) {
    delete specifics_variant_.device_info_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_experiments(::sync_pb::ExperimentsSpecifics* experiments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (experiments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      experiments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, experiments, submessage_arena);
    }
    set_has_experiments();
    specifics_variant_.experiments_ = experiments;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.experiments)
}
void EntitySpecifics::clear_experiments() {
  if (has_experiments()) {
    delete specifics_variant_.experiments_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_priority_preference(::sync_pb::PriorityPreferenceSpecifics* priority_preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (priority_preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      priority_preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority_preference, submessage_arena);
    }
    set_has_priority_preference();
    specifics_variant_.priority_preference_ = priority_preference;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.priority_preference)
}
void EntitySpecifics::clear_priority_preference() {
  if (has_priority_preference()) {
    delete specifics_variant_.priority_preference_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_dictionary(::sync_pb::DictionarySpecifics* dictionary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (dictionary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dictionary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dictionary, submessage_arena);
    }
    set_has_dictionary();
    specifics_variant_.dictionary_ = dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.dictionary)
}
void EntitySpecifics::clear_dictionary() {
  if (has_dictionary()) {
    delete specifics_variant_.dictionary_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_favicon_tracking(::sync_pb::FaviconTrackingSpecifics* favicon_tracking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (favicon_tracking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      favicon_tracking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon_tracking, submessage_arena);
    }
    set_has_favicon_tracking();
    specifics_variant_.favicon_tracking_ = favicon_tracking;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.favicon_tracking)
}
void EntitySpecifics::clear_favicon_tracking() {
  if (has_favicon_tracking()) {
    delete specifics_variant_.favicon_tracking_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_favicon_image(::sync_pb::FaviconImageSpecifics* favicon_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (favicon_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      favicon_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon_image, submessage_arena);
    }
    set_has_favicon_image();
    specifics_variant_.favicon_image_ = favicon_image;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.favicon_image)
}
void EntitySpecifics::clear_favicon_image() {
  if (has_favicon_image()) {
    delete specifics_variant_.favicon_image_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_managed_user_setting(::sync_pb::ManagedUserSettingSpecifics* managed_user_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (managed_user_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      managed_user_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, managed_user_setting, submessage_arena);
    }
    set_has_managed_user_setting();
    specifics_variant_.managed_user_setting_ = managed_user_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user_setting)
}
void EntitySpecifics::clear_managed_user_setting() {
  if (has_managed_user_setting()) {
    delete specifics_variant_.managed_user_setting_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_managed_user(::sync_pb::ManagedUserSpecifics* managed_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (managed_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      managed_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, managed_user, submessage_arena);
    }
    set_has_managed_user();
    specifics_variant_.managed_user_ = managed_user;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user)
}
void EntitySpecifics::clear_managed_user() {
  if (has_managed_user()) {
    delete specifics_variant_.managed_user_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_managed_user_shared_setting(::sync_pb::ManagedUserSharedSettingSpecifics* managed_user_shared_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (managed_user_shared_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      managed_user_shared_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, managed_user_shared_setting, submessage_arena);
    }
    set_has_managed_user_shared_setting();
    specifics_variant_.managed_user_shared_setting_ = managed_user_shared_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user_shared_setting)
}
void EntitySpecifics::clear_managed_user_shared_setting() {
  if (has_managed_user_shared_setting()) {
    delete specifics_variant_.managed_user_shared_setting_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_managed_user_whitelist(::sync_pb::ManagedUserWhitelistSpecifics* managed_user_whitelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (managed_user_whitelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      managed_user_whitelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, managed_user_whitelist, submessage_arena);
    }
    set_has_managed_user_whitelist();
    specifics_variant_.managed_user_whitelist_ = managed_user_whitelist;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.managed_user_whitelist)
}
void EntitySpecifics::clear_managed_user_whitelist() {
  if (has_managed_user_whitelist()) {
    delete specifics_variant_.managed_user_whitelist_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_app_list(::sync_pb::AppListSpecifics* app_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (app_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_list, submessage_arena);
    }
    set_has_app_list();
    specifics_variant_.app_list_ = app_list;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.app_list)
}
void EntitySpecifics::clear_app_list() {
  if (has_app_list()) {
    delete specifics_variant_.app_list_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_autofill_wallet(::sync_pb::AutofillWalletSpecifics* autofill_wallet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (autofill_wallet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autofill_wallet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill_wallet, submessage_arena);
    }
    set_has_autofill_wallet();
    specifics_variant_.autofill_wallet_ = autofill_wallet;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.autofill_wallet)
}
void EntitySpecifics::clear_autofill_wallet() {
  if (has_autofill_wallet()) {
    delete specifics_variant_.autofill_wallet_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_wallet_metadata(::sync_pb::WalletMetadataSpecifics* wallet_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (wallet_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wallet_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wallet_metadata, submessage_arena);
    }
    set_has_wallet_metadata();
    specifics_variant_.wallet_metadata_ = wallet_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.wallet_metadata)
}
void EntitySpecifics::clear_wallet_metadata() {
  if (has_wallet_metadata()) {
    delete specifics_variant_.wallet_metadata_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_arc_package(::sync_pb::ArcPackageSpecifics* arc_package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (arc_package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc_package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_package, submessage_arena);
    }
    set_has_arc_package();
    specifics_variant_.arc_package_ = arc_package;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.arc_package)
}
void EntitySpecifics::clear_arc_package() {
  if (has_arc_package()) {
    delete specifics_variant_.arc_package_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_printer(::sync_pb::PrinterSpecifics* printer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (printer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      printer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, printer, submessage_arena);
    }
    set_has_printer();
    specifics_variant_.printer_ = printer;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.printer)
}
void EntitySpecifics::clear_printer() {
  if (has_printer()) {
    delete specifics_variant_.printer_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_reading_list(::sync_pb::ReadingListSpecifics* reading_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (reading_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reading_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reading_list, submessage_arena);
    }
    set_has_reading_list();
    specifics_variant_.reading_list_ = reading_list;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.reading_list)
}
void EntitySpecifics::clear_reading_list() {
  if (has_reading_list()) {
    delete specifics_variant_.reading_list_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_user_event(::sync_pb::UserEventSpecifics* user_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (user_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_event, submessage_arena);
    }
    set_has_user_event();
    specifics_variant_.user_event_ = user_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.user_event)
}
void EntitySpecifics::clear_user_event() {
  if (has_user_event()) {
    delete specifics_variant_.user_event_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_user_consent(::sync_pb::UserConsentSpecifics* user_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (user_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_consent, submessage_arena);
    }
    set_has_user_consent();
    specifics_variant_.user_consent_ = user_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.user_consent)
}
void EntitySpecifics::clear_user_consent() {
  if (has_user_consent()) {
    delete specifics_variant_.user_consent_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_send_tab_to_self(::sync_pb::SendTabToSelfSpecifics* send_tab_to_self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (send_tab_to_self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      send_tab_to_self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_tab_to_self, submessage_arena);
    }
    set_has_send_tab_to_self();
    specifics_variant_.send_tab_to_self_ = send_tab_to_self;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.send_tab_to_self)
}
void EntitySpecifics::clear_send_tab_to_self() {
  if (has_send_tab_to_self()) {
    delete specifics_variant_.send_tab_to_self_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_security_event(::sync_pb::SecurityEventSpecifics* security_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (security_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      security_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_event, submessage_arena);
    }
    set_has_security_event();
    specifics_variant_.security_event_ = security_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.security_event)
}
void EntitySpecifics::clear_security_event() {
  if (has_security_event()) {
    delete specifics_variant_.security_event_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_web_app(::sync_pb::WebAppSpecifics* web_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (web_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      web_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_app, submessage_arena);
    }
    set_has_web_app();
    specifics_variant_.web_app_ = web_app;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.web_app)
}
void EntitySpecifics::clear_web_app() {
  if (has_web_app()) {
    delete specifics_variant_.web_app_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_wifi_configuration(::sync_pb::WifiConfigurationSpecifics* wifi_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (wifi_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wifi_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi_configuration, submessage_arena);
    }
    set_has_wifi_configuration();
    specifics_variant_.wifi_configuration_ = wifi_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.wifi_configuration)
}
void EntitySpecifics::clear_wifi_configuration() {
  if (has_wifi_configuration()) {
    delete specifics_variant_.wifi_configuration_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_os_preference(::sync_pb::OsPreferenceSpecifics* os_preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (os_preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      os_preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, os_preference, submessage_arena);
    }
    set_has_os_preference();
    specifics_variant_.os_preference_ = os_preference;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.os_preference)
}
void EntitySpecifics::clear_os_preference() {
  if (has_os_preference()) {
    delete specifics_variant_.os_preference_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_os_priority_preference(::sync_pb::OsPriorityPreferenceSpecifics* os_priority_preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (os_priority_preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      os_priority_preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, os_priority_preference, submessage_arena);
    }
    set_has_os_priority_preference();
    specifics_variant_.os_priority_preference_ = os_priority_preference;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.os_priority_preference)
}
void EntitySpecifics::clear_os_priority_preference() {
  if (has_os_priority_preference()) {
    delete specifics_variant_.os_priority_preference_;
    clear_has_specifics_variant();
  }
}
void EntitySpecifics::set_allocated_sharing_message(::sync_pb::SharingMessageSpecifics* sharing_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_specifics_variant();
  if (sharing_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sharing_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sharing_message, submessage_arena);
    }
    set_has_sharing_message();
    specifics_variant_.sharing_message_ = sharing_message;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.sharing_message)
}
void EntitySpecifics::clear_sharing_message() {
  if (has_sharing_message()) {
    delete specifics_variant_.sharing_message_;
    clear_has_specifics_variant();
  }
}
EntitySpecifics::EntitySpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.EntitySpecifics)
}
EntitySpecifics::EntitySpecifics(const EntitySpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_encrypted()) {
    encrypted_ = new ::sync_pb::EncryptedData(*from.encrypted_);
  } else {
    encrypted_ = nullptr;
  }
  clear_has_specifics_variant();
  switch (from.specifics_variant_case()) {
    case kAutofill: {
      mutable_autofill()->::sync_pb::AutofillSpecifics::MergeFrom(from.autofill());
      break;
    }
    case kBookmark: {
      mutable_bookmark()->::sync_pb::BookmarkSpecifics::MergeFrom(from.bookmark());
      break;
    }
    case kPreference: {
      mutable_preference()->::sync_pb::PreferenceSpecifics::MergeFrom(from.preference());
      break;
    }
    case kTypedUrl: {
      mutable_typed_url()->::sync_pb::TypedUrlSpecifics::MergeFrom(from.typed_url());
      break;
    }
    case kTheme: {
      mutable_theme()->::sync_pb::ThemeSpecifics::MergeFrom(from.theme());
      break;
    }
    case kAppNotification: {
      mutable_app_notification()->::sync_pb::AppNotification::MergeFrom(from.app_notification());
      break;
    }
    case kPassword: {
      mutable_password()->::sync_pb::PasswordSpecifics::MergeFrom(from.password());
      break;
    }
    case kNigori: {
      mutable_nigori()->::sync_pb::NigoriSpecifics::MergeFrom(from.nigori());
      break;
    }
    case kExtension: {
      mutable_extension()->::sync_pb::ExtensionSpecifics::MergeFrom(from.extension());
      break;
    }
    case kApp: {
      mutable_app()->::sync_pb::AppSpecifics::MergeFrom(from.app());
      break;
    }
    case kSession: {
      mutable_session()->::sync_pb::SessionSpecifics::MergeFrom(from.session());
      break;
    }
    case kAutofillProfile: {
      mutable_autofill_profile()->::sync_pb::AutofillProfileSpecifics::MergeFrom(from.autofill_profile());
      break;
    }
    case kSearchEngine: {
      mutable_search_engine()->::sync_pb::SearchEngineSpecifics::MergeFrom(from.search_engine());
      break;
    }
    case kExtensionSetting: {
      mutable_extension_setting()->::sync_pb::ExtensionSettingSpecifics::MergeFrom(from.extension_setting());
      break;
    }
    case kAppSetting: {
      mutable_app_setting()->::sync_pb::AppSettingSpecifics::MergeFrom(from.app_setting());
      break;
    }
    case kHistoryDeleteDirective: {
      mutable_history_delete_directive()->::sync_pb::HistoryDeleteDirectiveSpecifics::MergeFrom(from.history_delete_directive());
      break;
    }
    case kSyncedNotification: {
      mutable_synced_notification()->::sync_pb::SyncedNotificationSpecifics::MergeFrom(from.synced_notification());
      break;
    }
    case kSyncedNotificationAppInfo: {
      mutable_synced_notification_app_info()->::sync_pb::SyncedNotificationAppInfoSpecifics::MergeFrom(from.synced_notification_app_info());
      break;
    }
    case kDeviceInfo: {
      mutable_device_info()->::sync_pb::DeviceInfoSpecifics::MergeFrom(from.device_info());
      break;
    }
    case kExperiments: {
      mutable_experiments()->::sync_pb::ExperimentsSpecifics::MergeFrom(from.experiments());
      break;
    }
    case kPriorityPreference: {
      mutable_priority_preference()->::sync_pb::PriorityPreferenceSpecifics::MergeFrom(from.priority_preference());
      break;
    }
    case kDictionary: {
      mutable_dictionary()->::sync_pb::DictionarySpecifics::MergeFrom(from.dictionary());
      break;
    }
    case kFaviconTracking: {
      mutable_favicon_tracking()->::sync_pb::FaviconTrackingSpecifics::MergeFrom(from.favicon_tracking());
      break;
    }
    case kFaviconImage: {
      mutable_favicon_image()->::sync_pb::FaviconImageSpecifics::MergeFrom(from.favicon_image());
      break;
    }
    case kManagedUserSetting: {
      mutable_managed_user_setting()->::sync_pb::ManagedUserSettingSpecifics::MergeFrom(from.managed_user_setting());
      break;
    }
    case kManagedUser: {
      mutable_managed_user()->::sync_pb::ManagedUserSpecifics::MergeFrom(from.managed_user());
      break;
    }
    case kManagedUserSharedSetting: {
      mutable_managed_user_shared_setting()->::sync_pb::ManagedUserSharedSettingSpecifics::MergeFrom(from.managed_user_shared_setting());
      break;
    }
    case kManagedUserWhitelist: {
      mutable_managed_user_whitelist()->::sync_pb::ManagedUserWhitelistSpecifics::MergeFrom(from.managed_user_whitelist());
      break;
    }
    case kAppList: {
      mutable_app_list()->::sync_pb::AppListSpecifics::MergeFrom(from.app_list());
      break;
    }
    case kAutofillWallet: {
      mutable_autofill_wallet()->::sync_pb::AutofillWalletSpecifics::MergeFrom(from.autofill_wallet());
      break;
    }
    case kWalletMetadata: {
      mutable_wallet_metadata()->::sync_pb::WalletMetadataSpecifics::MergeFrom(from.wallet_metadata());
      break;
    }
    case kArcPackage: {
      mutable_arc_package()->::sync_pb::ArcPackageSpecifics::MergeFrom(from.arc_package());
      break;
    }
    case kPrinter: {
      mutable_printer()->::sync_pb::PrinterSpecifics::MergeFrom(from.printer());
      break;
    }
    case kReadingList: {
      mutable_reading_list()->::sync_pb::ReadingListSpecifics::MergeFrom(from.reading_list());
      break;
    }
    case kUserEvent: {
      mutable_user_event()->::sync_pb::UserEventSpecifics::MergeFrom(from.user_event());
      break;
    }
    case kUserConsent: {
      mutable_user_consent()->::sync_pb::UserConsentSpecifics::MergeFrom(from.user_consent());
      break;
    }
    case kSendTabToSelf: {
      mutable_send_tab_to_self()->::sync_pb::SendTabToSelfSpecifics::MergeFrom(from.send_tab_to_self());
      break;
    }
    case kSecurityEvent: {
      mutable_security_event()->::sync_pb::SecurityEventSpecifics::MergeFrom(from.security_event());
      break;
    }
    case kWebApp: {
      mutable_web_app()->::sync_pb::WebAppSpecifics::MergeFrom(from.web_app());
      break;
    }
    case kWifiConfiguration: {
      mutable_wifi_configuration()->::sync_pb::WifiConfigurationSpecifics::MergeFrom(from.wifi_configuration());
      break;
    }
    case kOsPreference: {
      mutable_os_preference()->::sync_pb::OsPreferenceSpecifics::MergeFrom(from.os_preference());
      break;
    }
    case kOsPriorityPreference: {
      mutable_os_priority_preference()->::sync_pb::OsPriorityPreferenceSpecifics::MergeFrom(from.os_priority_preference());
      break;
    }
    case kSharingMessage: {
      mutable_sharing_message()->::sync_pb::SharingMessageSpecifics::MergeFrom(from.sharing_message());
      break;
    }
    case SPECIFICS_VARIANT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.EntitySpecifics)
}

void EntitySpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntitySpecifics_sync_2eproto.base);
  encrypted_ = nullptr;
  clear_has_specifics_variant();
}

EntitySpecifics::~EntitySpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.EntitySpecifics)
  SharedDtor();
}

void EntitySpecifics::SharedDtor() {
  if (this != internal_default_instance()) delete encrypted_;
  if (has_specifics_variant()) {
    clear_specifics_variant();
  }
}

void EntitySpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntitySpecifics& EntitySpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntitySpecifics_sync_2eproto.base);
  return *internal_default_instance();
}


void EntitySpecifics::clear_specifics_variant() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.EntitySpecifics)
  switch (specifics_variant_case()) {
    case kAutofill: {
      delete specifics_variant_.autofill_;
      break;
    }
    case kBookmark: {
      delete specifics_variant_.bookmark_;
      break;
    }
    case kPreference: {
      delete specifics_variant_.preference_;
      break;
    }
    case kTypedUrl: {
      delete specifics_variant_.typed_url_;
      break;
    }
    case kTheme: {
      delete specifics_variant_.theme_;
      break;
    }
    case kAppNotification: {
      delete specifics_variant_.app_notification_;
      break;
    }
    case kPassword: {
      delete specifics_variant_.password_;
      break;
    }
    case kNigori: {
      delete specifics_variant_.nigori_;
      break;
    }
    case kExtension: {
      delete specifics_variant_.extension_;
      break;
    }
    case kApp: {
      delete specifics_variant_.app_;
      break;
    }
    case kSession: {
      delete specifics_variant_.session_;
      break;
    }
    case kAutofillProfile: {
      delete specifics_variant_.autofill_profile_;
      break;
    }
    case kSearchEngine: {
      delete specifics_variant_.search_engine_;
      break;
    }
    case kExtensionSetting: {
      delete specifics_variant_.extension_setting_;
      break;
    }
    case kAppSetting: {
      delete specifics_variant_.app_setting_;
      break;
    }
    case kHistoryDeleteDirective: {
      delete specifics_variant_.history_delete_directive_;
      break;
    }
    case kSyncedNotification: {
      delete specifics_variant_.synced_notification_;
      break;
    }
    case kSyncedNotificationAppInfo: {
      delete specifics_variant_.synced_notification_app_info_;
      break;
    }
    case kDeviceInfo: {
      delete specifics_variant_.device_info_;
      break;
    }
    case kExperiments: {
      delete specifics_variant_.experiments_;
      break;
    }
    case kPriorityPreference: {
      delete specifics_variant_.priority_preference_;
      break;
    }
    case kDictionary: {
      delete specifics_variant_.dictionary_;
      break;
    }
    case kFaviconTracking: {
      delete specifics_variant_.favicon_tracking_;
      break;
    }
    case kFaviconImage: {
      delete specifics_variant_.favicon_image_;
      break;
    }
    case kManagedUserSetting: {
      delete specifics_variant_.managed_user_setting_;
      break;
    }
    case kManagedUser: {
      delete specifics_variant_.managed_user_;
      break;
    }
    case kManagedUserSharedSetting: {
      delete specifics_variant_.managed_user_shared_setting_;
      break;
    }
    case kManagedUserWhitelist: {
      delete specifics_variant_.managed_user_whitelist_;
      break;
    }
    case kAppList: {
      delete specifics_variant_.app_list_;
      break;
    }
    case kAutofillWallet: {
      delete specifics_variant_.autofill_wallet_;
      break;
    }
    case kWalletMetadata: {
      delete specifics_variant_.wallet_metadata_;
      break;
    }
    case kArcPackage: {
      delete specifics_variant_.arc_package_;
      break;
    }
    case kPrinter: {
      delete specifics_variant_.printer_;
      break;
    }
    case kReadingList: {
      delete specifics_variant_.reading_list_;
      break;
    }
    case kUserEvent: {
      delete specifics_variant_.user_event_;
      break;
    }
    case kUserConsent: {
      delete specifics_variant_.user_consent_;
      break;
    }
    case kSendTabToSelf: {
      delete specifics_variant_.send_tab_to_self_;
      break;
    }
    case kSecurityEvent: {
      delete specifics_variant_.security_event_;
      break;
    }
    case kWebApp: {
      delete specifics_variant_.web_app_;
      break;
    }
    case kWifiConfiguration: {
      delete specifics_variant_.wifi_configuration_;
      break;
    }
    case kOsPreference: {
      delete specifics_variant_.os_preference_;
      break;
    }
    case kOsPriorityPreference: {
      delete specifics_variant_.os_priority_preference_;
      break;
    }
    case kSharingMessage: {
      delete specifics_variant_.sharing_message_;
      break;
    }
    case SPECIFICS_VARIANT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPECIFICS_VARIANT_NOT_SET;
}


void EntitySpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EntitySpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(encrypted_ != nullptr);
    encrypted_->Clear();
  }
  clear_specifics_variant();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EntitySpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.EncryptedData encrypted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_encrypted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillSpecifics autofill = 31729;
      case 31729:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_autofill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.BookmarkSpecifics bookmark = 32904;
      case 32904:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_bookmark(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.PreferenceSpecifics preference = 37702;
      case 37702:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_preference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
      case 40781:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_typed_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ThemeSpecifics theme = 41210;
      case 41210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.AppNotification app_notification = 45184 [deprecated = true];
      case 45184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_app_notification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.PasswordSpecifics password = 45873;
      case 45873:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.NigoriSpecifics nigori = 47745;
      case 47745:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_nigori(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ExtensionSpecifics extension = 48119;
      case 48119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_extension(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.AppSpecifics app = 48364;
      case 48364:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SessionSpecifics session = 50119;
      case 50119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
      case 63951:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_autofill_profile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
      case 88610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_search_engine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
      case 96159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_extension_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.AppSettingSpecifics app_setting = 103656;
      case 103656:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_app_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
      case 150251:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_history_delete_directive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108 [deprecated = true];
      case 153108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_synced_notification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
      case 154522:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_device_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ExperimentsSpecifics experiments = 161496 [deprecated = true];
      case 161496:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_experiments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
      case 163425:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_priority_preference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.DictionarySpecifics dictionary = 170540;
      case 170540:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_dictionary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
      case 181534:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_favicon_tracking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
      case 182019:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_favicon_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
      case 186662:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_managed_user_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ManagedUserSpecifics managed_user = 194582 [deprecated = true];
      case 194582:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_managed_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026 [deprecated = true];
      case 202026:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_managed_user_shared_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.AppListSpecifics app_list = 229170;
      case 229170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_app_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816 [deprecated = true];
      case 235816:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_synced_notification_app_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ManagedUserWhitelistSpecifics managed_user_whitelist = 306060;
      case 306060:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_managed_user_whitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
      case 306270:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_autofill_wallet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
      case 330441:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_wallet_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ArcPackageSpecifics arc_package = 340906;
      case 340906:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_arc_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.PrinterSpecifics printer = 410745;
      case 410745:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_printer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ReadingListSpecifics reading_list = 411028;
      case 411028:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_reading_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserEventSpecifics user_event = 455206;
      case 455206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_user_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentSpecifics user_consent = 556014;
      case 556014:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_user_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SecurityEventSpecifics security_event = 600372;
      case 600372:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_security_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SendTabToSelfSpecifics send_tab_to_self = 601980;
      case 601980:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_send_tab_to_self(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecifics wifi_configuration = 662827;
      case 662827:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_wifi_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WebAppSpecifics web_app = 673225;
      case 673225:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_web_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.OsPreferenceSpecifics os_preference = 702141;
      case 702141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_os_preference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.OsPriorityPreferenceSpecifics os_priority_preference = 703915;
      case 703915:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_os_priority_preference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SharingMessageSpecifics sharing_message = 728866;
      case 728866:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_sharing_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EntitySpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.EntitySpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(5830933u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.EncryptedData encrypted = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_encrypted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AutofillSpecifics autofill = 31729;
      case 31729: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (253834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.BookmarkSpecifics bookmark = 32904;
      case 32904: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (263234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bookmark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PreferenceSpecifics preference = 37702;
      case 37702: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (301618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_preference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
      case 40781: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (326250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_typed_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ThemeSpecifics theme = 41210;
      case 41210: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (329682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_theme()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AppNotification app_notification = 45184 [deprecated = true];
      case 45184: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (361474 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PasswordSpecifics password = 45873;
      case 45873: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (366986 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.NigoriSpecifics nigori = 47745;
      case 47745: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (381962 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nigori()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ExtensionSpecifics extension = 48119;
      case 48119: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (384954 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AppSpecifics app = 48364;
      case 48364: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386914 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SessionSpecifics session = 50119;
      case 50119: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (400954 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
      case 63951: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (511610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofill_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
      case 88610: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (708882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_search_engine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
      case 96159: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (769274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extension_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AppSettingSpecifics app_setting = 103656;
      case 103656: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (829250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
      case 150251: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1202010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_history_delete_directive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108 [deprecated = true];
      case 153108: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1224866 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_synced_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
      case 154522: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1236178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ExperimentsSpecifics experiments = 161496 [deprecated = true];
      case 161496: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1291970 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_experiments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
      case 163425: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1307402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_priority_preference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DictionarySpecifics dictionary = 170540;
      case 170540: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1364322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
      case 181534: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1452274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_favicon_tracking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
      case 182019: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1456154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_favicon_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
      case 186662: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1493298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_managed_user_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ManagedUserSpecifics managed_user = 194582 [deprecated = true];
      case 194582: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1556658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_managed_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026 [deprecated = true];
      case 202026: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1616210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_managed_user_shared_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AppListSpecifics app_list = 229170;
      case 229170: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1833362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816 [deprecated = true];
      case 235816: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1886530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_synced_notification_app_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ManagedUserWhitelistSpecifics managed_user_whitelist = 306060;
      case 306060: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2448482 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_managed_user_whitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
      case 306270: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2450162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofill_wallet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
      case 330441: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2643530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wallet_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ArcPackageSpecifics arc_package = 340906;
      case 340906: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2727250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arc_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PrinterSpecifics printer = 410745;
      case 410745: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3285962 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ReadingListSpecifics reading_list = 411028;
      case 411028: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3288226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reading_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics user_event = 455206;
      case 455206: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3641650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentSpecifics user_consent = 556014;
      case 556014: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4448114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SecurityEventSpecifics security_event = 600372;
      case 600372: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4802978 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_security_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SendTabToSelfSpecifics send_tab_to_self = 601980;
      case 601980: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4815842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_send_tab_to_self()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WifiConfigurationSpecifics wifi_configuration = 662827;
      case 662827: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5302618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wifi_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WebAppSpecifics web_app = 673225;
      case 673225: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5385802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_web_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.OsPreferenceSpecifics os_preference = 702141;
      case 702141: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5617130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_os_preference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.OsPriorityPreferenceSpecifics os_priority_preference = 703915;
      case 703915: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5631322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_os_priority_preference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SharingMessageSpecifics sharing_message = 728866;
      case 728866: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5830930 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sharing_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.EntitySpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.EntitySpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EntitySpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.EntitySpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.EncryptedData encrypted = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::encrypted(this), output);
  }

  switch (specifics_variant_case()) {
    case kAutofill:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        31729, _Internal::autofill(this), output);
      break;
    case kBookmark:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        32904, _Internal::bookmark(this), output);
      break;
    case kPreference:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        37702, _Internal::preference(this), output);
      break;
    case kTypedUrl:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        40781, _Internal::typed_url(this), output);
      break;
    case kTheme:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        41210, _Internal::theme(this), output);
      break;
    case kAppNotification:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        45184, _Internal::app_notification(this), output);
      break;
    case kPassword:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        45873, _Internal::password(this), output);
      break;
    case kNigori:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        47745, _Internal::nigori(this), output);
      break;
    case kExtension:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        48119, _Internal::extension(this), output);
      break;
    case kApp:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        48364, _Internal::app(this), output);
      break;
    case kSession:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        50119, _Internal::session(this), output);
      break;
    case kAutofillProfile:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        63951, _Internal::autofill_profile(this), output);
      break;
    case kSearchEngine:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        88610, _Internal::search_engine(this), output);
      break;
    case kExtensionSetting:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        96159, _Internal::extension_setting(this), output);
      break;
    case kAppSetting:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        103656, _Internal::app_setting(this), output);
      break;
    case kHistoryDeleteDirective:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        150251, _Internal::history_delete_directive(this), output);
      break;
    case kSyncedNotification:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        153108, _Internal::synced_notification(this), output);
      break;
    case kDeviceInfo:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        154522, _Internal::device_info(this), output);
      break;
    case kExperiments:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        161496, _Internal::experiments(this), output);
      break;
    case kPriorityPreference:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        163425, _Internal::priority_preference(this), output);
      break;
    case kDictionary:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        170540, _Internal::dictionary(this), output);
      break;
    case kFaviconTracking:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        181534, _Internal::favicon_tracking(this), output);
      break;
    case kFaviconImage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        182019, _Internal::favicon_image(this), output);
      break;
    case kManagedUserSetting:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        186662, _Internal::managed_user_setting(this), output);
      break;
    case kManagedUser:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        194582, _Internal::managed_user(this), output);
      break;
    case kManagedUserSharedSetting:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        202026, _Internal::managed_user_shared_setting(this), output);
      break;
    case kAppList:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        229170, _Internal::app_list(this), output);
      break;
    case kSyncedNotificationAppInfo:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        235816, _Internal::synced_notification_app_info(this), output);
      break;
    case kManagedUserWhitelist:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        306060, _Internal::managed_user_whitelist(this), output);
      break;
    case kAutofillWallet:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        306270, _Internal::autofill_wallet(this), output);
      break;
    case kWalletMetadata:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        330441, _Internal::wallet_metadata(this), output);
      break;
    case kArcPackage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        340906, _Internal::arc_package(this), output);
      break;
    case kPrinter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        410745, _Internal::printer(this), output);
      break;
    case kReadingList:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        411028, _Internal::reading_list(this), output);
      break;
    case kUserEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        455206, _Internal::user_event(this), output);
      break;
    case kUserConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        556014, _Internal::user_consent(this), output);
      break;
    case kSecurityEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        600372, _Internal::security_event(this), output);
      break;
    case kSendTabToSelf:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        601980, _Internal::send_tab_to_self(this), output);
      break;
    case kWifiConfiguration:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        662827, _Internal::wifi_configuration(this), output);
      break;
    case kWebApp:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        673225, _Internal::web_app(this), output);
      break;
    case kOsPreference:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        702141, _Internal::os_preference(this), output);
      break;
    case kOsPriorityPreference:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        703915, _Internal::os_priority_preference(this), output);
      break;
    case kSharingMessage:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        728866, _Internal::sharing_message(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.EntitySpecifics)
}

size_t EntitySpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EntitySpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.EncryptedData encrypted = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encrypted_);
  }

  switch (specifics_variant_case()) {
    // optional .sync_pb.AutofillSpecifics autofill = 31729;
    case kAutofill: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.autofill_);
      break;
    }
    // optional .sync_pb.BookmarkSpecifics bookmark = 32904;
    case kBookmark: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.bookmark_);
      break;
    }
    // optional .sync_pb.PreferenceSpecifics preference = 37702;
    case kPreference: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.preference_);
      break;
    }
    // optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
    case kTypedUrl: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.typed_url_);
      break;
    }
    // optional .sync_pb.ThemeSpecifics theme = 41210;
    case kTheme: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.theme_);
      break;
    }
    // optional .sync_pb.AppNotification app_notification = 45184 [deprecated = true];
    case kAppNotification: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.app_notification_);
      break;
    }
    // optional .sync_pb.PasswordSpecifics password = 45873;
    case kPassword: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.password_);
      break;
    }
    // optional .sync_pb.NigoriSpecifics nigori = 47745;
    case kNigori: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.nigori_);
      break;
    }
    // optional .sync_pb.ExtensionSpecifics extension = 48119;
    case kExtension: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.extension_);
      break;
    }
    // optional .sync_pb.AppSpecifics app = 48364;
    case kApp: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.app_);
      break;
    }
    // optional .sync_pb.SessionSpecifics session = 50119;
    case kSession: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.session_);
      break;
    }
    // optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
    case kAutofillProfile: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.autofill_profile_);
      break;
    }
    // optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
    case kSearchEngine: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.search_engine_);
      break;
    }
    // optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
    case kExtensionSetting: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.extension_setting_);
      break;
    }
    // optional .sync_pb.AppSettingSpecifics app_setting = 103656;
    case kAppSetting: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.app_setting_);
      break;
    }
    // optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
    case kHistoryDeleteDirective: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.history_delete_directive_);
      break;
    }
    // optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108 [deprecated = true];
    case kSyncedNotification: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.synced_notification_);
      break;
    }
    // optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816 [deprecated = true];
    case kSyncedNotificationAppInfo: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.synced_notification_app_info_);
      break;
    }
    // optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
    case kDeviceInfo: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.device_info_);
      break;
    }
    // optional .sync_pb.ExperimentsSpecifics experiments = 161496 [deprecated = true];
    case kExperiments: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.experiments_);
      break;
    }
    // optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
    case kPriorityPreference: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.priority_preference_);
      break;
    }
    // optional .sync_pb.DictionarySpecifics dictionary = 170540;
    case kDictionary: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.dictionary_);
      break;
    }
    // optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
    case kFaviconTracking: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.favicon_tracking_);
      break;
    }
    // optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
    case kFaviconImage: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.favicon_image_);
      break;
    }
    // optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
    case kManagedUserSetting: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.managed_user_setting_);
      break;
    }
    // optional .sync_pb.ManagedUserSpecifics managed_user = 194582 [deprecated = true];
    case kManagedUser: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.managed_user_);
      break;
    }
    // optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026 [deprecated = true];
    case kManagedUserSharedSetting: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.managed_user_shared_setting_);
      break;
    }
    // optional .sync_pb.ManagedUserWhitelistSpecifics managed_user_whitelist = 306060;
    case kManagedUserWhitelist: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.managed_user_whitelist_);
      break;
    }
    // optional .sync_pb.AppListSpecifics app_list = 229170;
    case kAppList: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.app_list_);
      break;
    }
    // optional .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
    case kAutofillWallet: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.autofill_wallet_);
      break;
    }
    // optional .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
    case kWalletMetadata: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.wallet_metadata_);
      break;
    }
    // optional .sync_pb.ArcPackageSpecifics arc_package = 340906;
    case kArcPackage: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.arc_package_);
      break;
    }
    // optional .sync_pb.PrinterSpecifics printer = 410745;
    case kPrinter: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.printer_);
      break;
    }
    // optional .sync_pb.ReadingListSpecifics reading_list = 411028;
    case kReadingList: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.reading_list_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics user_event = 455206;
    case kUserEvent: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.user_event_);
      break;
    }
    // optional .sync_pb.UserConsentSpecifics user_consent = 556014;
    case kUserConsent: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.user_consent_);
      break;
    }
    // optional .sync_pb.SendTabToSelfSpecifics send_tab_to_self = 601980;
    case kSendTabToSelf: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.send_tab_to_self_);
      break;
    }
    // optional .sync_pb.SecurityEventSpecifics security_event = 600372;
    case kSecurityEvent: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.security_event_);
      break;
    }
    // optional .sync_pb.WebAppSpecifics web_app = 673225;
    case kWebApp: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.web_app_);
      break;
    }
    // optional .sync_pb.WifiConfigurationSpecifics wifi_configuration = 662827;
    case kWifiConfiguration: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.wifi_configuration_);
      break;
    }
    // optional .sync_pb.OsPreferenceSpecifics os_preference = 702141;
    case kOsPreference: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.os_preference_);
      break;
    }
    // optional .sync_pb.OsPriorityPreferenceSpecifics os_priority_preference = 703915;
    case kOsPriorityPreference: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.os_priority_preference_);
      break;
    }
    // optional .sync_pb.SharingMessageSpecifics sharing_message = 728866;
    case kSharingMessage: {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_variant_.sharing_message_);
      break;
    }
    case SPECIFICS_VARIANT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntitySpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EntitySpecifics*>(
      &from));
}

void EntitySpecifics::MergeFrom(const EntitySpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EntitySpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_encrypted()) {
    mutable_encrypted()->::sync_pb::EncryptedData::MergeFrom(from.encrypted());
  }
  switch (from.specifics_variant_case()) {
    case kAutofill: {
      mutable_autofill()->::sync_pb::AutofillSpecifics::MergeFrom(from.autofill());
      break;
    }
    case kBookmark: {
      mutable_bookmark()->::sync_pb::BookmarkSpecifics::MergeFrom(from.bookmark());
      break;
    }
    case kPreference: {
      mutable_preference()->::sync_pb::PreferenceSpecifics::MergeFrom(from.preference());
      break;
    }
    case kTypedUrl: {
      mutable_typed_url()->::sync_pb::TypedUrlSpecifics::MergeFrom(from.typed_url());
      break;
    }
    case kTheme: {
      mutable_theme()->::sync_pb::ThemeSpecifics::MergeFrom(from.theme());
      break;
    }
    case kAppNotification: {
      mutable_app_notification()->::sync_pb::AppNotification::MergeFrom(from.app_notification());
      break;
    }
    case kPassword: {
      mutable_password()->::sync_pb::PasswordSpecifics::MergeFrom(from.password());
      break;
    }
    case kNigori: {
      mutable_nigori()->::sync_pb::NigoriSpecifics::MergeFrom(from.nigori());
      break;
    }
    case kExtension: {
      mutable_extension()->::sync_pb::ExtensionSpecifics::MergeFrom(from.extension());
      break;
    }
    case kApp: {
      mutable_app()->::sync_pb::AppSpecifics::MergeFrom(from.app());
      break;
    }
    case kSession: {
      mutable_session()->::sync_pb::SessionSpecifics::MergeFrom(from.session());
      break;
    }
    case kAutofillProfile: {
      mutable_autofill_profile()->::sync_pb::AutofillProfileSpecifics::MergeFrom(from.autofill_profile());
      break;
    }
    case kSearchEngine: {
      mutable_search_engine()->::sync_pb::SearchEngineSpecifics::MergeFrom(from.search_engine());
      break;
    }
    case kExtensionSetting: {
      mutable_extension_setting()->::sync_pb::ExtensionSettingSpecifics::MergeFrom(from.extension_setting());
      break;
    }
    case kAppSetting: {
      mutable_app_setting()->::sync_pb::AppSettingSpecifics::MergeFrom(from.app_setting());
      break;
    }
    case kHistoryDeleteDirective: {
      mutable_history_delete_directive()->::sync_pb::HistoryDeleteDirectiveSpecifics::MergeFrom(from.history_delete_directive());
      break;
    }
    case kSyncedNotification: {
      mutable_synced_notification()->::sync_pb::SyncedNotificationSpecifics::MergeFrom(from.synced_notification());
      break;
    }
    case kSyncedNotificationAppInfo: {
      mutable_synced_notification_app_info()->::sync_pb::SyncedNotificationAppInfoSpecifics::MergeFrom(from.synced_notification_app_info());
      break;
    }
    case kDeviceInfo: {
      mutable_device_info()->::sync_pb::DeviceInfoSpecifics::MergeFrom(from.device_info());
      break;
    }
    case kExperiments: {
      mutable_experiments()->::sync_pb::ExperimentsSpecifics::MergeFrom(from.experiments());
      break;
    }
    case kPriorityPreference: {
      mutable_priority_preference()->::sync_pb::PriorityPreferenceSpecifics::MergeFrom(from.priority_preference());
      break;
    }
    case kDictionary: {
      mutable_dictionary()->::sync_pb::DictionarySpecifics::MergeFrom(from.dictionary());
      break;
    }
    case kFaviconTracking: {
      mutable_favicon_tracking()->::sync_pb::FaviconTrackingSpecifics::MergeFrom(from.favicon_tracking());
      break;
    }
    case kFaviconImage: {
      mutable_favicon_image()->::sync_pb::FaviconImageSpecifics::MergeFrom(from.favicon_image());
      break;
    }
    case kManagedUserSetting: {
      mutable_managed_user_setting()->::sync_pb::ManagedUserSettingSpecifics::MergeFrom(from.managed_user_setting());
      break;
    }
    case kManagedUser: {
      mutable_managed_user()->::sync_pb::ManagedUserSpecifics::MergeFrom(from.managed_user());
      break;
    }
    case kManagedUserSharedSetting: {
      mutable_managed_user_shared_setting()->::sync_pb::ManagedUserSharedSettingSpecifics::MergeFrom(from.managed_user_shared_setting());
      break;
    }
    case kManagedUserWhitelist: {
      mutable_managed_user_whitelist()->::sync_pb::ManagedUserWhitelistSpecifics::MergeFrom(from.managed_user_whitelist());
      break;
    }
    case kAppList: {
      mutable_app_list()->::sync_pb::AppListSpecifics::MergeFrom(from.app_list());
      break;
    }
    case kAutofillWallet: {
      mutable_autofill_wallet()->::sync_pb::AutofillWalletSpecifics::MergeFrom(from.autofill_wallet());
      break;
    }
    case kWalletMetadata: {
      mutable_wallet_metadata()->::sync_pb::WalletMetadataSpecifics::MergeFrom(from.wallet_metadata());
      break;
    }
    case kArcPackage: {
      mutable_arc_package()->::sync_pb::ArcPackageSpecifics::MergeFrom(from.arc_package());
      break;
    }
    case kPrinter: {
      mutable_printer()->::sync_pb::PrinterSpecifics::MergeFrom(from.printer());
      break;
    }
    case kReadingList: {
      mutable_reading_list()->::sync_pb::ReadingListSpecifics::MergeFrom(from.reading_list());
      break;
    }
    case kUserEvent: {
      mutable_user_event()->::sync_pb::UserEventSpecifics::MergeFrom(from.user_event());
      break;
    }
    case kUserConsent: {
      mutable_user_consent()->::sync_pb::UserConsentSpecifics::MergeFrom(from.user_consent());
      break;
    }
    case kSendTabToSelf: {
      mutable_send_tab_to_self()->::sync_pb::SendTabToSelfSpecifics::MergeFrom(from.send_tab_to_self());
      break;
    }
    case kSecurityEvent: {
      mutable_security_event()->::sync_pb::SecurityEventSpecifics::MergeFrom(from.security_event());
      break;
    }
    case kWebApp: {
      mutable_web_app()->::sync_pb::WebAppSpecifics::MergeFrom(from.web_app());
      break;
    }
    case kWifiConfiguration: {
      mutable_wifi_configuration()->::sync_pb::WifiConfigurationSpecifics::MergeFrom(from.wifi_configuration());
      break;
    }
    case kOsPreference: {
      mutable_os_preference()->::sync_pb::OsPreferenceSpecifics::MergeFrom(from.os_preference());
      break;
    }
    case kOsPriorityPreference: {
      mutable_os_priority_preference()->::sync_pb::OsPriorityPreferenceSpecifics::MergeFrom(from.os_priority_preference());
      break;
    }
    case kSharingMessage: {
      mutable_sharing_message()->::sync_pb::SharingMessageSpecifics::MergeFrom(from.sharing_message());
      break;
    }
    case SPECIFICS_VARIANT_NOT_SET: {
      break;
    }
  }
}

void EntitySpecifics::CopyFrom(const EntitySpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EntitySpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySpecifics::IsInitialized() const {
  return true;
}

void EntitySpecifics::InternalSwap(EntitySpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(encrypted_, other->encrypted_);
  swap(specifics_variant_, other->specifics_variant_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string EntitySpecifics::GetTypeName() const {
  return "sync_pb.EntitySpecifics";
}


// ===================================================================

void SyncEntity::InitAsDefaultInstance() {
  ::sync_pb::_SyncEntity_default_instance_._instance.get_mutable()->specifics_ = const_cast< ::sync_pb::EntitySpecifics*>(
      ::sync_pb::EntitySpecifics::internal_default_instance());
  ::sync_pb::_SyncEntity_default_instance_._instance.get_mutable()->unique_position_ = const_cast< ::sync_pb::UniquePosition*>(
      ::sync_pb::UniquePosition::internal_default_instance());
}
class SyncEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncEntity>()._has_bits_);
  static void set_has_id_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parent_id_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ctime(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_non_unique_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_defined_unique_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_position_in_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_insert_after_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_originator_cache_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_originator_client_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::sync_pb::EntitySpecifics& specifics(const SyncEntity* msg);
  static void set_has_specifics(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_client_defined_unique_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ordinal_in_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::sync_pb::UniquePosition& unique_position(const SyncEntity* msg);
  static void set_has_unique_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::sync_pb::EntitySpecifics&
SyncEntity::_Internal::specifics(const SyncEntity* msg) {
  return *msg->specifics_;
}
const ::sync_pb::UniquePosition&
SyncEntity::_Internal::unique_position(const SyncEntity* msg) {
  return *msg->unique_position_;
}
void SyncEntity::clear_unique_position() {
  if (unique_position_ != nullptr) unique_position_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
SyncEntity::SyncEntity()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SyncEntity)
}
SyncEntity::SyncEntity(const SyncEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id_string()) {
    id_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_string_);
  }
  parent_id_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_id_string()) {
    parent_id_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_id_string_);
  }
  old_parent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_old_parent_id()) {
    old_parent_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.old_parent_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  non_unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_non_unique_name()) {
    non_unique_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.non_unique_name_);
  }
  server_defined_unique_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_defined_unique_tag()) {
    server_defined_unique_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_defined_unique_tag_);
  }
  insert_after_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_insert_after_item_id()) {
    insert_after_item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.insert_after_item_id_);
  }
  originator_cache_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_originator_cache_guid()) {
    originator_cache_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.originator_cache_guid_);
  }
  originator_client_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_originator_client_item_id()) {
    originator_client_item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.originator_client_item_id_);
  }
  client_defined_unique_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_defined_unique_tag()) {
    client_defined_unique_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_defined_unique_tag_);
  }
  ordinal_in_parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_ordinal_in_parent()) {
    ordinal_in_parent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ordinal_in_parent_);
  }
  if (from.has_specifics()) {
    specifics_ = new ::sync_pb::EntitySpecifics(*from.specifics_);
  } else {
    specifics_ = nullptr;
  }
  if (from.has_unique_position()) {
    unique_position_ = new ::sync_pb::UniquePosition(*from.unique_position_);
  } else {
    unique_position_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&folder_) -
    reinterpret_cast<char*>(&version_)) + sizeof(folder_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SyncEntity)
}

void SyncEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncEntity_sync_2eproto.base);
  id_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_id_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_parent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  non_unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_defined_unique_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  insert_after_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  originator_cache_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  originator_client_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_defined_unique_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordinal_in_parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&specifics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&folder_) -
      reinterpret_cast<char*>(&specifics_)) + sizeof(folder_));
}

SyncEntity::~SyncEntity() {
  // @@protoc_insertion_point(destructor:sync_pb.SyncEntity)
  SharedDtor();
}

void SyncEntity::SharedDtor() {
  id_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_id_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_parent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  non_unique_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_defined_unique_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  insert_after_item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  originator_cache_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  originator_client_item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_defined_unique_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordinal_in_parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete specifics_;
  if (this != internal_default_instance()) delete unique_position_;
}

void SyncEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncEntity& SyncEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncEntity_sync_2eproto.base);
  return *internal_default_instance();
}


void SyncEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SyncEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      parent_id_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      old_parent_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      non_unique_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      server_defined_unique_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      insert_after_item_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      originator_cache_guid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      originator_client_item_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      client_defined_unique_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      ordinal_in_parent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(specifics_ != nullptr);
      specifics_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(unique_position_ != nullptr);
      unique_position_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ctime_) -
        reinterpret_cast<char*>(&version_)) + sizeof(ctime_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&position_in_parent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&folder_) -
        reinterpret_cast<char*>(&position_in_parent_)) + sizeof(folder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string parent_id_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_parent_id_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string old_parent_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_old_parent_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mtime(&has_bits);
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ctime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ctime(&has_bits);
          ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string non_unique_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_non_unique_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string server_defined_unique_tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_server_defined_unique_tag(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 position_in_parent = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_position_in_parent(&has_bits);
          position_in_parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string insert_after_item_id = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_insert_after_item_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool deleted = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_deleted(&has_bits);
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string originator_cache_guid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_originator_cache_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string originator_client_item_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_originator_client_item_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.EntitySpecifics specifics = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_specifics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool folder = 22 [default = false];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_folder(&has_bits);
          folder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string client_defined_unique_tag = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_client_defined_unique_tag(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ordinal_in_parent = 24 [deprecated = true];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ordinal_in_parent(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UniquePosition unique_position = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_unique_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncEntity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SyncEntity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id_string = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_id_string = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string old_parent_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_old_parent_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mtime = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_mtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ctime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_ctime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string non_unique_name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_non_unique_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string server_defined_unique_tag = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_server_defined_unique_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 position_in_parent = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_position_in_parent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_in_parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string insert_after_item_id = 16 [deprecated = true];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_after_item_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deleted = 18 [default = false];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_deleted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string originator_cache_guid = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_originator_cache_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string originator_client_item_id = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_originator_client_item_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.EntitySpecifics specifics = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_specifics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool folder = 22 [default = false];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_folder(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &folder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_defined_unique_tag = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_defined_unique_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ordinal_in_parent = 24 [deprecated = true];
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ordinal_in_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UniquePosition unique_position = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unique_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SyncEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SyncEntity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncEntity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SyncEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id_string(), output);
  }

  // optional string parent_id_string = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parent_id_string(), output);
  }

  // optional string old_parent_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->old_parent_id(), output);
  }

  // optional int64 version = 4;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->version(), output);
  }

  // optional int64 mtime = 5;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->mtime(), output);
  }

  // optional int64 ctime = 6;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->ctime(), output);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional string non_unique_name = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->non_unique_name(), output);
  }

  // optional string server_defined_unique_tag = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->server_defined_unique_tag(), output);
  }

  // optional int64 position_in_parent = 15 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->position_in_parent(), output);
  }

  // optional string insert_after_item_id = 16 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->insert_after_item_id(), output);
  }

  // optional bool deleted = 18 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->deleted(), output);
  }

  // optional string originator_cache_guid = 19;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->originator_cache_guid(), output);
  }

  // optional string originator_client_item_id = 20;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->originator_client_item_id(), output);
  }

  // optional .sync_pb.EntitySpecifics specifics = 21;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::specifics(this), output);
  }

  // optional bool folder = 22 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->folder(), output);
  }

  // optional string client_defined_unique_tag = 23;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->client_defined_unique_tag(), output);
  }

  // optional bytes ordinal_in_parent = 24 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->ordinal_in_parent(), output);
  }

  // optional .sync_pb.UniquePosition unique_position = 25;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::unique_position(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SyncEntity)
}

size_t SyncEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SyncEntity)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id_string = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id_string());
    }

    // optional string parent_id_string = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->parent_id_string());
    }

    // optional string old_parent_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->old_parent_id());
    }

    // optional string name = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string non_unique_name = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->non_unique_name());
    }

    // optional string server_defined_unique_tag = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->server_defined_unique_tag());
    }

    // optional string insert_after_item_id = 16 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->insert_after_item_id());
    }

    // optional string originator_cache_guid = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->originator_cache_guid());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string originator_client_item_id = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->originator_client_item_id());
    }

    // optional string client_defined_unique_tag = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->client_defined_unique_tag());
    }

    // optional bytes ordinal_in_parent = 24 [deprecated = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->ordinal_in_parent());
    }

    // optional .sync_pb.EntitySpecifics specifics = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specifics_);
    }

    // optional .sync_pb.UniquePosition unique_position = 25;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unique_position_);
    }

    // optional int64 version = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int64 mtime = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

    // optional int64 ctime = 6;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ctime());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int64 position_in_parent = 15 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->position_in_parent());
    }

    // optional bool deleted = 18 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool folder = 22 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncEntity::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SyncEntity*>(
      &from));
}

void SyncEntity::MergeFrom(const SyncEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SyncEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      parent_id_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_id_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      old_parent_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.old_parent_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      non_unique_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.non_unique_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      server_defined_unique_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_defined_unique_tag_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      insert_after_item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.insert_after_item_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      originator_cache_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.originator_cache_guid_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      originator_client_item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.originator_client_item_id_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      client_defined_unique_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_defined_unique_tag_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      ordinal_in_parent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ordinal_in_parent_);
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_specifics()->::sync_pb::EntitySpecifics::MergeFrom(from.specifics());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_unique_position()->::sync_pb::UniquePosition::MergeFrom(from.unique_position());
    }
    if (cached_has_bits & 0x00002000u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00004000u) {
      mtime_ = from.mtime_;
    }
    if (cached_has_bits & 0x00008000u) {
      ctime_ = from.ctime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      position_in_parent_ = from.position_in_parent_;
    }
    if (cached_has_bits & 0x00020000u) {
      deleted_ = from.deleted_;
    }
    if (cached_has_bits & 0x00040000u) {
      folder_ = from.folder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncEntity::CopyFrom(const SyncEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SyncEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEntity::IsInitialized() const {
  return true;
}

void SyncEntity::InternalSwap(SyncEntity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_string_.Swap(&other->id_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_id_string_.Swap(&other->parent_id_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  old_parent_id_.Swap(&other->old_parent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  non_unique_name_.Swap(&other->non_unique_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_defined_unique_tag_.Swap(&other->server_defined_unique_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  insert_after_item_id_.Swap(&other->insert_after_item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  originator_cache_guid_.Swap(&other->originator_cache_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  originator_client_item_id_.Swap(&other->originator_client_item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_defined_unique_tag_.Swap(&other->client_defined_unique_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ordinal_in_parent_.Swap(&other->ordinal_in_parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(specifics_, other->specifics_);
  swap(unique_position_, other->unique_position_);
  swap(version_, other->version_);
  swap(mtime_, other->mtime_);
  swap(ctime_, other->ctime_);
  swap(position_in_parent_, other->position_in_parent_);
  swap(deleted_, other->deleted_);
  swap(folder_, other->folder_);
}

std::string SyncEntity::GetTypeName() const {
  return "sync_pb.SyncEntity";
}


// ===================================================================

void ChromiumExtensionsActivity::InitAsDefaultInstance() {
}
class ChromiumExtensionsActivity::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromiumExtensionsActivity>()._has_bits_);
  static void set_has_extension_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bookmark_writes_since_last_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromiumExtensionsActivity::ChromiumExtensionsActivity()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ChromiumExtensionsActivity)
}
ChromiumExtensionsActivity::ChromiumExtensionsActivity(const ChromiumExtensionsActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_id()) {
    extension_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
  }
  bookmark_writes_since_last_commit_ = from.bookmark_writes_since_last_commit_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ChromiumExtensionsActivity)
}

void ChromiumExtensionsActivity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromiumExtensionsActivity_sync_2eproto.base);
  extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bookmark_writes_since_last_commit_ = 0u;
}

ChromiumExtensionsActivity::~ChromiumExtensionsActivity() {
  // @@protoc_insertion_point(destructor:sync_pb.ChromiumExtensionsActivity)
  SharedDtor();
}

void ChromiumExtensionsActivity::SharedDtor() {
  extension_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChromiumExtensionsActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromiumExtensionsActivity& ChromiumExtensionsActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromiumExtensionsActivity_sync_2eproto.base);
  return *internal_default_instance();
}


void ChromiumExtensionsActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ChromiumExtensionsActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    extension_id_.ClearNonDefaultToEmptyNoArena();
  }
  bookmark_writes_since_last_commit_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromiumExtensionsActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string extension_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extension_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bookmark_writes_since_last_commit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bookmark_writes_since_last_commit(&has_bits);
          bookmark_writes_since_last_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromiumExtensionsActivity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ChromiumExtensionsActivity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string extension_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bookmark_writes_since_last_commit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_bookmark_writes_since_last_commit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bookmark_writes_since_last_commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ChromiumExtensionsActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ChromiumExtensionsActivity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromiumExtensionsActivity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ChromiumExtensionsActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string extension_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->extension_id(), output);
  }

  // optional uint32 bookmark_writes_since_last_commit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->bookmark_writes_since_last_commit(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ChromiumExtensionsActivity)
}

size_t ChromiumExtensionsActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ChromiumExtensionsActivity)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string extension_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->extension_id());
    }

    // optional uint32 bookmark_writes_since_last_commit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->bookmark_writes_since_last_commit());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromiumExtensionsActivity::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromiumExtensionsActivity*>(
      &from));
}

void ChromiumExtensionsActivity::MergeFrom(const ChromiumExtensionsActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ChromiumExtensionsActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extension_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      bookmark_writes_since_last_commit_ = from.bookmark_writes_since_last_commit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromiumExtensionsActivity::CopyFrom(const ChromiumExtensionsActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ChromiumExtensionsActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromiumExtensionsActivity::IsInitialized() const {
  return true;
}

void ChromiumExtensionsActivity::InternalSwap(ChromiumExtensionsActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extension_id_.Swap(&other->extension_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bookmark_writes_since_last_commit_, other->bookmark_writes_since_last_commit_);
}

std::string ChromiumExtensionsActivity::GetTypeName() const {
  return "sync_pb.ChromiumExtensionsActivity";
}


// ===================================================================

void ClientConfigParams::InitAsDefaultInstance() {
}
class ClientConfigParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientConfigParams>()._has_bits_);
  static void set_has_tabs_datatype_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cookie_jar_mismatch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientConfigParams::ClientConfigParams()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientConfigParams)
}
ClientConfigParams::ClientConfigParams(const ClientConfigParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      enabled_type_ids_(from.enabled_type_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tabs_datatype_enabled_, &from.tabs_datatype_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&cookie_jar_mismatch_) -
    reinterpret_cast<char*>(&tabs_datatype_enabled_)) + sizeof(cookie_jar_mismatch_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientConfigParams)
}

void ClientConfigParams::SharedCtor() {
  ::memset(&tabs_datatype_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cookie_jar_mismatch_) -
      reinterpret_cast<char*>(&tabs_datatype_enabled_)) + sizeof(cookie_jar_mismatch_));
}

ClientConfigParams::~ClientConfigParams() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientConfigParams)
  SharedDtor();
}

void ClientConfigParams::SharedDtor() {
}

void ClientConfigParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientConfigParams& ClientConfigParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientConfigParams_sync_2eproto.base);
  return *internal_default_instance();
}


void ClientConfigParams::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientConfigParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_type_ids_.Clear();
  ::memset(&tabs_datatype_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cookie_jar_mismatch_) -
      reinterpret_cast<char*>(&tabs_datatype_enabled_)) + sizeof(cookie_jar_mismatch_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientConfigParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 enabled_type_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_enabled_type_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_enabled_type_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tabs_datatype_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tabs_datatype_enabled(&has_bits);
          tabs_datatype_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cookie_jar_mismatch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cookie_jar_mismatch(&has_bits);
          cookie_jar_mismatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientConfigParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientConfigParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 enabled_type_ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_enabled_type_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enabled_type_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tabs_datatype_enabled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_tabs_datatype_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tabs_datatype_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cookie_jar_mismatch = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_cookie_jar_mismatch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cookie_jar_mismatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientConfigParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientConfigParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientConfigParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientConfigParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 enabled_type_ids = 1;
  for (int i = 0, n = this->enabled_type_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      1, this->enabled_type_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool tabs_datatype_enabled = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->tabs_datatype_enabled(), output);
  }

  // optional bool cookie_jar_mismatch = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->cookie_jar_mismatch(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientConfigParams)
}

size_t ClientConfigParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientConfigParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 enabled_type_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->enabled_type_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->enabled_type_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool tabs_datatype_enabled = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool cookie_jar_mismatch = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientConfigParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientConfigParams*>(
      &from));
}

void ClientConfigParams::MergeFrom(const ClientConfigParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientConfigParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enabled_type_ids_.MergeFrom(from.enabled_type_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tabs_datatype_enabled_ = from.tabs_datatype_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      cookie_jar_mismatch_ = from.cookie_jar_mismatch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientConfigParams::CopyFrom(const ClientConfigParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientConfigParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConfigParams::IsInitialized() const {
  return true;
}

void ClientConfigParams::InternalSwap(ClientConfigParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enabled_type_ids_.InternalSwap(&other->enabled_type_ids_);
  swap(tabs_datatype_enabled_, other->tabs_datatype_enabled_);
  swap(cookie_jar_mismatch_, other->cookie_jar_mismatch_);
}

std::string ClientConfigParams::GetTypeName() const {
  return "sync_pb.ClientConfigParams";
}


// ===================================================================

void CommitMessage::InitAsDefaultInstance() {
  ::sync_pb::_CommitMessage_default_instance_._instance.get_mutable()->config_params_ = const_cast< ::sync_pb::ClientConfigParams*>(
      ::sync_pb::ClientConfigParams::internal_default_instance());
}
class CommitMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitMessage>()._has_bits_);
  static void set_has_cache_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::ClientConfigParams& config_params(const CommitMessage* msg);
  static void set_has_config_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::ClientConfigParams&
CommitMessage::_Internal::config_params(const CommitMessage* msg) {
  return *msg->config_params_;
}
CommitMessage::CommitMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CommitMessage)
}
CommitMessage::CommitMessage(const CommitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_),
      extensions_activity_(from.extensions_activity_),
      client_contexts_(from.client_contexts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cache_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_guid()) {
    cache_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
  }
  padding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_padding()) {
    padding_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.padding_);
  }
  if (from.has_config_params()) {
    config_params_ = new ::sync_pb::ClientConfigParams(*from.config_params_);
  } else {
    config_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.CommitMessage)
}

void CommitMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitMessage_sync_2eproto.base);
  cache_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  padding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_params_ = nullptr;
}

CommitMessage::~CommitMessage() {
  // @@protoc_insertion_point(destructor:sync_pb.CommitMessage)
  SharedDtor();
}

void CommitMessage::SharedDtor() {
  cache_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  padding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_params_;
}

void CommitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitMessage& CommitMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitMessage_sync_2eproto.base);
  return *internal_default_instance();
}


void CommitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CommitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  extensions_activity_.Clear();
  client_contexts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cache_guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      padding_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(config_params_ != nullptr);
      config_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommitMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sync_pb.SyncEntity entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional string cache_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cache_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_extensions_activity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ClientConfigParams config_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_config_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.DataTypeContext client_contexts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_client_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional string padding = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_padding(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommitMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CommitMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.SyncEntity entries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cache_guid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_extensions_activity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClientConfigParams config_params = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeContext client_contexts = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_client_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string padding = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_padding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CommitMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CommitMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommitMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CommitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.SyncEntity entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cache_guid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cache_guid(), output);
  }

  // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extensions_activity_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->extensions_activity(static_cast<int>(i)),
      output);
  }

  // optional .sync_pb.ClientConfigParams config_params = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::config_params(this), output);
  }

  // repeated .sync_pb.DataTypeContext client_contexts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_contexts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->client_contexts(static_cast<int>(i)),
      output);
  }

  // optional string padding = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->padding(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CommitMessage)
}

size_t CommitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CommitMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.SyncEntity entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->extensions_activity_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->extensions_activity(static_cast<int>(i)));
    }
  }

  // repeated .sync_pb.DataTypeContext client_contexts = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->client_contexts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->client_contexts(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string cache_guid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cache_guid());
    }

    // optional string padding = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->padding());
    }

    // optional .sync_pb.ClientConfigParams config_params = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_params_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommitMessage*>(
      &from));
}

void CommitMessage::MergeFrom(const CommitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CommitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  extensions_activity_.MergeFrom(from.extensions_activity_);
  client_contexts_.MergeFrom(from.client_contexts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cache_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      padding_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.padding_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_config_params()->::sync_pb::ClientConfigParams::MergeFrom(from.config_params());
    }
  }
}

void CommitMessage::CopyFrom(const CommitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CommitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitMessage::IsInitialized() const {
  return true;
}

void CommitMessage::InternalSwap(CommitMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  CastToBase(&extensions_activity_)->InternalSwap(CastToBase(&other->extensions_activity_));
  CastToBase(&client_contexts_)->InternalSwap(CastToBase(&other->client_contexts_));
  cache_guid_.Swap(&other->cache_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  padding_.Swap(&other->padding_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_params_, other->config_params_);
}

std::string CommitMessage::GetTypeName() const {
  return "sync_pb.CommitMessage";
}


// ===================================================================

void GetUpdateTriggers::InitAsDefaultInstance() {
}
class GetUpdateTriggers::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUpdateTriggers>()._has_bits_);
  static void set_has_client_dropped_hints(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_invalidations_out_of_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_local_modification_nudges(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_datatype_refresh_nudges(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_dropped_hints(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_initial_sync_in_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sync_for_resolve_conflict_in_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

GetUpdateTriggers::GetUpdateTriggers()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetUpdateTriggers)
}
GetUpdateTriggers::GetUpdateTriggers(const GetUpdateTriggers& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      notification_hint_(from.notification_hint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_modification_nudges_, &from.local_modification_nudges_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_for_resolve_conflict_in_progress_) -
    reinterpret_cast<char*>(&local_modification_nudges_)) + sizeof(sync_for_resolve_conflict_in_progress_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetUpdateTriggers)
}

void GetUpdateTriggers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUpdateTriggers_sync_2eproto.base);
  ::memset(&local_modification_nudges_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_for_resolve_conflict_in_progress_) -
      reinterpret_cast<char*>(&local_modification_nudges_)) + sizeof(sync_for_resolve_conflict_in_progress_));
}

GetUpdateTriggers::~GetUpdateTriggers() {
  // @@protoc_insertion_point(destructor:sync_pb.GetUpdateTriggers)
  SharedDtor();
}

void GetUpdateTriggers::SharedDtor() {
}

void GetUpdateTriggers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUpdateTriggers& GetUpdateTriggers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUpdateTriggers_sync_2eproto.base);
  return *internal_default_instance();
}


void GetUpdateTriggers::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetUpdateTriggers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_hint_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&local_modification_nudges_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_for_resolve_conflict_in_progress_) -
        reinterpret_cast<char*>(&local_modification_nudges_)) + sizeof(sync_for_resolve_conflict_in_progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetUpdateTriggers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string notification_hint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_notification_hint(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional bool client_dropped_hints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_dropped_hints(&has_bits);
          client_dropped_hints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool invalidations_out_of_sync = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_invalidations_out_of_sync(&has_bits);
          invalidations_out_of_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 local_modification_nudges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_local_modification_nudges(&has_bits);
          local_modification_nudges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 datatype_refresh_nudges = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_datatype_refresh_nudges(&has_bits);
          datatype_refresh_nudges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool server_dropped_hints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_server_dropped_hints(&has_bits);
          server_dropped_hints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool initial_sync_in_progress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_initial_sync_in_progress(&has_bits);
          initial_sync_in_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sync_for_resolve_conflict_in_progress = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sync_for_resolve_conflict_in_progress(&has_bits);
          sync_for_resolve_conflict_in_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetUpdateTriggers::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetUpdateTriggers)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string notification_hint = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_notification_hint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool client_dropped_hints = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_client_dropped_hints(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_dropped_hints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool invalidations_out_of_sync = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_invalidations_out_of_sync(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalidations_out_of_sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 local_modification_nudges = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_local_modification_nudges(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_modification_nudges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 datatype_refresh_nudges = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_datatype_refresh_nudges(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatype_refresh_nudges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool server_dropped_hints = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_server_dropped_hints(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_dropped_hints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool initial_sync_in_progress = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_initial_sync_in_progress(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initial_sync_in_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sync_for_resolve_conflict_in_progress = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_sync_for_resolve_conflict_in_progress(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_for_resolve_conflict_in_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetUpdateTriggers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetUpdateTriggers)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetUpdateTriggers::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetUpdateTriggers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string notification_hint = 1;
  for (int i = 0, n = this->notification_hint_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->notification_hint(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool client_dropped_hints = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->client_dropped_hints(), output);
  }

  // optional bool invalidations_out_of_sync = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->invalidations_out_of_sync(), output);
  }

  // optional int64 local_modification_nudges = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->local_modification_nudges(), output);
  }

  // optional int64 datatype_refresh_nudges = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->datatype_refresh_nudges(), output);
  }

  // optional bool server_dropped_hints = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->server_dropped_hints(), output);
  }

  // optional bool initial_sync_in_progress = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->initial_sync_in_progress(), output);
  }

  // optional bool sync_for_resolve_conflict_in_progress = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->sync_for_resolve_conflict_in_progress(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetUpdateTriggers)
}

size_t GetUpdateTriggers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetUpdateTriggers)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string notification_hint = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->notification_hint_size());
  for (int i = 0, n = this->notification_hint_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->notification_hint(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 local_modification_nudges = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->local_modification_nudges());
    }

    // optional int64 datatype_refresh_nudges = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->datatype_refresh_nudges());
    }

    // optional bool client_dropped_hints = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool invalidations_out_of_sync = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool server_dropped_hints = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool initial_sync_in_progress = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool sync_for_resolve_conflict_in_progress = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdateTriggers::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetUpdateTriggers*>(
      &from));
}

void GetUpdateTriggers::MergeFrom(const GetUpdateTriggers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetUpdateTriggers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notification_hint_.MergeFrom(from.notification_hint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      local_modification_nudges_ = from.local_modification_nudges_;
    }
    if (cached_has_bits & 0x00000002u) {
      datatype_refresh_nudges_ = from.datatype_refresh_nudges_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_dropped_hints_ = from.client_dropped_hints_;
    }
    if (cached_has_bits & 0x00000008u) {
      invalidations_out_of_sync_ = from.invalidations_out_of_sync_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_dropped_hints_ = from.server_dropped_hints_;
    }
    if (cached_has_bits & 0x00000020u) {
      initial_sync_in_progress_ = from.initial_sync_in_progress_;
    }
    if (cached_has_bits & 0x00000040u) {
      sync_for_resolve_conflict_in_progress_ = from.sync_for_resolve_conflict_in_progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUpdateTriggers::CopyFrom(const GetUpdateTriggers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetUpdateTriggers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateTriggers::IsInitialized() const {
  return true;
}

void GetUpdateTriggers::InternalSwap(GetUpdateTriggers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notification_hint_.InternalSwap(CastToBase(&other->notification_hint_));
  swap(local_modification_nudges_, other->local_modification_nudges_);
  swap(datatype_refresh_nudges_, other->datatype_refresh_nudges_);
  swap(client_dropped_hints_, other->client_dropped_hints_);
  swap(invalidations_out_of_sync_, other->invalidations_out_of_sync_);
  swap(server_dropped_hints_, other->server_dropped_hints_);
  swap(initial_sync_in_progress_, other->initial_sync_in_progress_);
  swap(sync_for_resolve_conflict_in_progress_, other->sync_for_resolve_conflict_in_progress_);
}

std::string GetUpdateTriggers::GetTypeName() const {
  return "sync_pb.GetUpdateTriggers";
}


// ===================================================================

void GarbageCollectionDirective::InitAsDefaultInstance() {
}
class GarbageCollectionDirective::_Internal {
 public:
  using HasBits = decltype(std::declval<GarbageCollectionDirective>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version_watermark(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_age_watermark_in_days(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GarbageCollectionDirective::GarbageCollectionDirective()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GarbageCollectionDirective)
}
GarbageCollectionDirective::GarbageCollectionDirective(const GarbageCollectionDirective& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_watermark_, &from.version_watermark_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_watermark_in_days_) -
    reinterpret_cast<char*>(&version_watermark_)) + sizeof(age_watermark_in_days_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GarbageCollectionDirective)
}

void GarbageCollectionDirective::SharedCtor() {
  ::memset(&version_watermark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_watermark_in_days_) -
      reinterpret_cast<char*>(&version_watermark_)) + sizeof(age_watermark_in_days_));
}

GarbageCollectionDirective::~GarbageCollectionDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.GarbageCollectionDirective)
  SharedDtor();
}

void GarbageCollectionDirective::SharedDtor() {
}

void GarbageCollectionDirective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GarbageCollectionDirective& GarbageCollectionDirective::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GarbageCollectionDirective_sync_2eproto.base);
  return *internal_default_instance();
}


void GarbageCollectionDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GarbageCollectionDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&version_watermark_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_watermark_in_days_) -
        reinterpret_cast<char*>(&version_watermark_)) + sizeof(age_watermark_in_days_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GarbageCollectionDirective::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::GarbageCollectionDirective_Type_IsValid(val))) {
            set_type(static_cast<::sync_pb::GarbageCollectionDirective_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 version_watermark = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version_watermark(&has_bits);
          version_watermark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 age_watermark_in_days = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_age_watermark_in_days(&has_bits);
          age_watermark_in_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GarbageCollectionDirective::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GarbageCollectionDirective)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GarbageCollectionDirective_Type_IsValid(value)) {
            set_type(static_cast< ::sync_pb::GarbageCollectionDirective_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 version_watermark = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_version_watermark(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_watermark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 age_watermark_in_days = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_age_watermark_in_days(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_watermark_in_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GarbageCollectionDirective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GarbageCollectionDirective)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GarbageCollectionDirective::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GarbageCollectionDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 version_watermark = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->version_watermark(), output);
  }

  // optional int32 age_watermark_in_days = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->age_watermark_in_days(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GarbageCollectionDirective)
}

size_t GarbageCollectionDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GarbageCollectionDirective)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 version_watermark = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->version_watermark());
    }

    // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 age_watermark_in_days = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->age_watermark_in_days());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GarbageCollectionDirective::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GarbageCollectionDirective*>(
      &from));
}

void GarbageCollectionDirective::MergeFrom(const GarbageCollectionDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GarbageCollectionDirective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      version_watermark_ = from.version_watermark_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      age_watermark_in_days_ = from.age_watermark_in_days_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GarbageCollectionDirective::CopyFrom(const GarbageCollectionDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GarbageCollectionDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarbageCollectionDirective::IsInitialized() const {
  return true;
}

void GarbageCollectionDirective::InternalSwap(GarbageCollectionDirective* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_watermark_, other->version_watermark_);
  swap(type_, other->type_);
  swap(age_watermark_in_days_, other->age_watermark_in_days_);
}

std::string GarbageCollectionDirective::GetTypeName() const {
  return "sync_pb.GarbageCollectionDirective";
}


// ===================================================================

void DataTypeProgressMarker::InitAsDefaultInstance() {
  ::sync_pb::_DataTypeProgressMarker_default_instance_._instance.get_mutable()->get_update_triggers_ = const_cast< ::sync_pb::GetUpdateTriggers*>(
      ::sync_pb::GetUpdateTriggers::internal_default_instance());
  ::sync_pb::_DataTypeProgressMarker_default_instance_._instance.get_mutable()->gc_directive_ = const_cast< ::sync_pb::GarbageCollectionDirective*>(
      ::sync_pb::GarbageCollectionDirective::internal_default_instance());
}
class DataTypeProgressMarker::_Internal {
 public:
  using HasBits = decltype(std::declval<DataTypeProgressMarker>()._has_bits_);
  static void set_has_data_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp_token_for_migration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_notification_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::GetUpdateTriggers& get_update_triggers(const DataTypeProgressMarker* msg);
  static void set_has_get_update_triggers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::GarbageCollectionDirective& gc_directive(const DataTypeProgressMarker* msg);
  static void set_has_gc_directive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sync_pb::GetUpdateTriggers&
DataTypeProgressMarker::_Internal::get_update_triggers(const DataTypeProgressMarker* msg) {
  return *msg->get_update_triggers_;
}
const ::sync_pb::GarbageCollectionDirective&
DataTypeProgressMarker::_Internal::gc_directive(const DataTypeProgressMarker* msg) {
  return *msg->gc_directive_;
}
DataTypeProgressMarker::DataTypeProgressMarker()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.DataTypeProgressMarker)
}
DataTypeProgressMarker::DataTypeProgressMarker(const DataTypeProgressMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  notification_hint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_notification_hint()) {
    notification_hint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notification_hint_);
  }
  if (from.has_get_update_triggers()) {
    get_update_triggers_ = new ::sync_pb::GetUpdateTriggers(*from.get_update_triggers_);
  } else {
    get_update_triggers_ = nullptr;
  }
  if (from.has_gc_directive()) {
    gc_directive_ = new ::sync_pb::GarbageCollectionDirective(*from.gc_directive_);
  } else {
    gc_directive_ = nullptr;
  }
  ::memcpy(&timestamp_token_for_migration_, &from.timestamp_token_for_migration_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_id_) -
    reinterpret_cast<char*>(&timestamp_token_for_migration_)) + sizeof(data_type_id_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.DataTypeProgressMarker)
}

void DataTypeProgressMarker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataTypeProgressMarker_sync_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notification_hint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&get_update_triggers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_id_) -
      reinterpret_cast<char*>(&get_update_triggers_)) + sizeof(data_type_id_));
}

DataTypeProgressMarker::~DataTypeProgressMarker() {
  // @@protoc_insertion_point(destructor:sync_pb.DataTypeProgressMarker)
  SharedDtor();
}

void DataTypeProgressMarker::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notification_hint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete get_update_triggers_;
  if (this != internal_default_instance()) delete gc_directive_;
}

void DataTypeProgressMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataTypeProgressMarker& DataTypeProgressMarker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataTypeProgressMarker_sync_2eproto.base);
  return *internal_default_instance();
}


void DataTypeProgressMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DataTypeProgressMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      notification_hint_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(get_update_triggers_ != nullptr);
      get_update_triggers_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gc_directive_ != nullptr);
      gc_directive_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&timestamp_token_for_migration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_type_id_) -
        reinterpret_cast<char*>(&timestamp_token_for_migration_)) + sizeof(data_type_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataTypeProgressMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 data_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data_type_id(&has_bits);
          data_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp_token_for_migration = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp_token_for_migration(&has_bits);
          timestamp_token_for_migration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string notification_hint = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_notification_hint(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_get_update_triggers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_gc_directive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataTypeProgressMarker::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.DataTypeProgressMarker)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_data_type_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_token_for_migration = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_timestamp_token_for_migration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_token_for_migration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notification_hint = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_hint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_get_update_triggers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gc_directive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.DataTypeProgressMarker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.DataTypeProgressMarker)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataTypeProgressMarker::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.DataTypeProgressMarker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_type_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->data_type_id(), output);
  }

  // optional bytes token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->token(), output);
  }

  // optional int64 timestamp_token_for_migration = 3 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->timestamp_token_for_migration(), output);
  }

  // optional string notification_hint = 4 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->notification_hint(), output);
  }

  // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::get_update_triggers(this), output);
  }

  // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::gc_directive(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.DataTypeProgressMarker)
}

size_t DataTypeProgressMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DataTypeProgressMarker)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional string notification_hint = 4 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->notification_hint());
    }

    // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_update_triggers_);
    }

    // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gc_directive_);
    }

    // optional int64 timestamp_token_for_migration = 3 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_token_for_migration());
    }

    // optional int32 data_type_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->data_type_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTypeProgressMarker::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DataTypeProgressMarker*>(
      &from));
}

void DataTypeProgressMarker::MergeFrom(const DataTypeProgressMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DataTypeProgressMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      notification_hint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notification_hint_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_get_update_triggers()->::sync_pb::GetUpdateTriggers::MergeFrom(from.get_update_triggers());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_gc_directive()->::sync_pb::GarbageCollectionDirective::MergeFrom(from.gc_directive());
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_token_for_migration_ = from.timestamp_token_for_migration_;
    }
    if (cached_has_bits & 0x00000020u) {
      data_type_id_ = from.data_type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataTypeProgressMarker::CopyFrom(const DataTypeProgressMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DataTypeProgressMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTypeProgressMarker::IsInitialized() const {
  return true;
}

void DataTypeProgressMarker::InternalSwap(DataTypeProgressMarker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notification_hint_.Swap(&other->notification_hint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(get_update_triggers_, other->get_update_triggers_);
  swap(gc_directive_, other->gc_directive_);
  swap(timestamp_token_for_migration_, other->timestamp_token_for_migration_);
  swap(data_type_id_, other->data_type_id_);
}

std::string DataTypeProgressMarker::GetTypeName() const {
  return "sync_pb.DataTypeProgressMarker";
}


// ===================================================================

void GetUpdatesMessage::InitAsDefaultInstance() {
  ::sync_pb::_GetUpdatesMessage_default_instance_._instance.get_mutable()->caller_info_ = const_cast< ::sync_pb::GetUpdatesCallerInfo*>(
      ::sync_pb::GetUpdatesCallerInfo::internal_default_instance());
}
class GetUpdatesMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUpdatesMessage>()._has_bits_);
  static const ::sync_pb::GetUpdatesCallerInfo& caller_info(const GetUpdatesMessage* msg);
  static void set_has_caller_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fetch_folders(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_streaming(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_need_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_create_mobile_bookmarks_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_get_updates_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_retry(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::sync_pb::GetUpdatesCallerInfo&
GetUpdatesMessage::_Internal::caller_info(const GetUpdatesMessage* msg) {
  return *msg->caller_info_;
}
void GetUpdatesMessage::clear_caller_info() {
  if (caller_info_ != nullptr) caller_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetUpdatesMessage::GetUpdatesMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetUpdatesMessage)
}
GetUpdatesMessage::GetUpdatesMessage(const GetUpdatesMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      from_progress_marker_(from.from_progress_marker_),
      client_contexts_(from.client_contexts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_caller_info()) {
    caller_info_ = new ::sync_pb::GetUpdatesCallerInfo(*from.caller_info_);
  } else {
    caller_info_ = nullptr;
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&fetch_folders_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(fetch_folders_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetUpdatesMessage)
}

void GetUpdatesMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUpdatesMessage_sync_2eproto.base);
  ::memset(&caller_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_retry_) -
      reinterpret_cast<char*>(&caller_info_)) + sizeof(is_retry_));
  fetch_folders_ = true;
}

GetUpdatesMessage::~GetUpdatesMessage() {
  // @@protoc_insertion_point(destructor:sync_pb.GetUpdatesMessage)
  SharedDtor();
}

void GetUpdatesMessage::SharedDtor() {
  if (this != internal_default_instance()) delete caller_info_;
}

void GetUpdatesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUpdatesMessage& GetUpdatesMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUpdatesMessage_sync_2eproto.base);
  return *internal_default_instance();
}


void GetUpdatesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetUpdatesMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_progress_marker_.Clear();
  client_contexts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caller_info_ != nullptr);
    caller_info_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_retry_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(is_retry_));
    fetch_folders_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetUpdatesMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_caller_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fetch_folders = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fetch_folders(&has_bits);
          fetch_folders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 batch_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_from_progress_marker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional bool streaming = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_streaming(&has_bits);
          streaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool need_encryption_key = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_need_encryption_key(&has_bits);
          need_encryption_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_GetUpdatesOrigin_IsValid(val))) {
            set_get_updates_origin(static_cast<::sync_pb::SyncEnums_GetUpdatesOrigin>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_retry = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_retry(&has_bits);
          is_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.DataTypeContext client_contexts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_client_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_create_mobile_bookmarks_folder(&has_bits);
          create_mobile_bookmarks_folder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetUpdatesMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetUpdatesMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_caller_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fetch_folders = 3 [default = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_fetch_folders(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_folders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 batch_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_batch_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_from_progress_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool streaming = 7 [default = false];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_streaming(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_encryption_key = 8 [default = false];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_need_encryption_key(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_encryption_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_GetUpdatesOrigin_IsValid(value)) {
            set_get_updates_origin(static_cast< ::sync_pb::SyncEnums_GetUpdatesOrigin >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_retry = 10 [default = false];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_is_retry(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_retry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeContext client_contexts = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_client_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];
      case 1000: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8000 & 0xFF)) {
          _Internal::set_has_create_mobile_bookmarks_folder(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_mobile_bookmarks_folder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetUpdatesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetUpdatesMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetUpdatesMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetUpdatesMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::caller_info(this), output);
  }

  // optional bool fetch_folders = 3 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->fetch_folders(), output);
  }

  // optional int32 batch_size = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->batch_size(), output);
  }

  // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->from_progress_marker_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->from_progress_marker(static_cast<int>(i)),
      output);
  }

  // optional bool streaming = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->streaming(), output);
  }

  // optional bool need_encryption_key = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->need_encryption_key(), output);
  }

  // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->get_updates_origin(), output);
  }

  // optional bool is_retry = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->is_retry(), output);
  }

  // repeated .sync_pb.DataTypeContext client_contexts = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_contexts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11,
      this->client_contexts(static_cast<int>(i)),
      output);
  }

  // optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1000, this->create_mobile_bookmarks_folder(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetUpdatesMessage)
}

size_t GetUpdatesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetUpdatesMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->from_progress_marker_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->from_progress_marker(static_cast<int>(i)));
    }
  }

  // repeated .sync_pb.DataTypeContext client_contexts = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->client_contexts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->client_contexts(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caller_info_);
    }

    // optional int32 batch_size = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

    // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->get_updates_origin());
    }

    // optional bool streaming = 7 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool need_encryption_key = 8 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool is_retry = 10 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool fetch_folders = 3 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdatesMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetUpdatesMessage*>(
      &from));
}

void GetUpdatesMessage::MergeFrom(const GetUpdatesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetUpdatesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  from_progress_marker_.MergeFrom(from.from_progress_marker_);
  client_contexts_.MergeFrom(from.client_contexts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_caller_info()->::sync_pb::GetUpdatesCallerInfo::MergeFrom(from.caller_info());
    }
    if (cached_has_bits & 0x00000002u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      get_updates_origin_ = from.get_updates_origin_;
    }
    if (cached_has_bits & 0x00000008u) {
      streaming_ = from.streaming_;
    }
    if (cached_has_bits & 0x00000010u) {
      need_encryption_key_ = from.need_encryption_key_;
    }
    if (cached_has_bits & 0x00000020u) {
      create_mobile_bookmarks_folder_ = from.create_mobile_bookmarks_folder_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_retry_ = from.is_retry_;
    }
    if (cached_has_bits & 0x00000080u) {
      fetch_folders_ = from.fetch_folders_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUpdatesMessage::CopyFrom(const GetUpdatesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetUpdatesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesMessage::IsInitialized() const {
  if (has_caller_info()) {
    if (!this->caller_info_->IsInitialized()) return false;
  }
  return true;
}

void GetUpdatesMessage::InternalSwap(GetUpdatesMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&from_progress_marker_)->InternalSwap(CastToBase(&other->from_progress_marker_));
  CastToBase(&client_contexts_)->InternalSwap(CastToBase(&other->client_contexts_));
  swap(caller_info_, other->caller_info_);
  swap(batch_size_, other->batch_size_);
  swap(get_updates_origin_, other->get_updates_origin_);
  swap(streaming_, other->streaming_);
  swap(need_encryption_key_, other->need_encryption_key_);
  swap(create_mobile_bookmarks_folder_, other->create_mobile_bookmarks_folder_);
  swap(is_retry_, other->is_retry_);
  swap(fetch_folders_, other->fetch_folders_);
}

std::string GetUpdatesMessage::GetTypeName() const {
  return "sync_pb.GetUpdatesMessage";
}


// ===================================================================

void ClearServerDataMessage::InitAsDefaultInstance() {
}
class ClearServerDataMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearServerDataMessage>()._has_bits_);
};

ClearServerDataMessage::ClearServerDataMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClearServerDataMessage)
}
ClearServerDataMessage::ClearServerDataMessage(const ClearServerDataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClearServerDataMessage)
}

void ClearServerDataMessage::SharedCtor() {
}

ClearServerDataMessage::~ClearServerDataMessage() {
  // @@protoc_insertion_point(destructor:sync_pb.ClearServerDataMessage)
  SharedDtor();
}

void ClearServerDataMessage::SharedDtor() {
}

void ClearServerDataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearServerDataMessage& ClearServerDataMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearServerDataMessage_sync_2eproto.base);
  return *internal_default_instance();
}


void ClearServerDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClearServerDataMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClearServerDataMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClearServerDataMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClearServerDataMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClearServerDataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClearServerDataMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClearServerDataMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClearServerDataMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClearServerDataMessage)
}

size_t ClearServerDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClearServerDataMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearServerDataMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearServerDataMessage*>(
      &from));
}

void ClearServerDataMessage::MergeFrom(const ClearServerDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClearServerDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearServerDataMessage::CopyFrom(const ClearServerDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClearServerDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearServerDataMessage::IsInitialized() const {
  return true;
}

void ClearServerDataMessage::InternalSwap(ClearServerDataMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ClearServerDataMessage::GetTypeName() const {
  return "sync_pb.ClearServerDataMessage";
}


// ===================================================================

void ClearServerDataResponse::InitAsDefaultInstance() {
}
class ClearServerDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearServerDataResponse>()._has_bits_);
};

ClearServerDataResponse::ClearServerDataResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClearServerDataResponse)
}
ClearServerDataResponse::ClearServerDataResponse(const ClearServerDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClearServerDataResponse)
}

void ClearServerDataResponse::SharedCtor() {
}

ClearServerDataResponse::~ClearServerDataResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.ClearServerDataResponse)
  SharedDtor();
}

void ClearServerDataResponse::SharedDtor() {
}

void ClearServerDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearServerDataResponse& ClearServerDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearServerDataResponse_sync_2eproto.base);
  return *internal_default_instance();
}


void ClearServerDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClearServerDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClearServerDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClearServerDataResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClearServerDataResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClearServerDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClearServerDataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClearServerDataResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClearServerDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClearServerDataResponse)
}

size_t ClearServerDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClearServerDataResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearServerDataResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearServerDataResponse*>(
      &from));
}

void ClearServerDataResponse::MergeFrom(const ClearServerDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClearServerDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearServerDataResponse::CopyFrom(const ClearServerDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClearServerDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearServerDataResponse::IsInitialized() const {
  return true;
}

void ClearServerDataResponse::InternalSwap(ClearServerDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ClearServerDataResponse::GetTypeName() const {
  return "sync_pb.ClearServerDataResponse";
}


// ===================================================================

void ChipBag::InitAsDefaultInstance() {
}
class ChipBag::_Internal {
 public:
  using HasBits = decltype(std::declval<ChipBag>()._has_bits_);
  static void set_has_server_chips(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChipBag::ChipBag()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ChipBag)
}
ChipBag::ChipBag(const ChipBag& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_chips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_chips()) {
    server_chips_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_chips_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.ChipBag)
}

void ChipBag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChipBag_sync_2eproto.base);
  server_chips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChipBag::~ChipBag() {
  // @@protoc_insertion_point(destructor:sync_pb.ChipBag)
  SharedDtor();
}

void ChipBag::SharedDtor() {
  server_chips_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChipBag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChipBag& ChipBag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChipBag_sync_2eproto.base);
  return *internal_default_instance();
}


void ChipBag::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ChipBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    server_chips_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChipBag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes server_chips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_server_chips(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChipBag::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ChipBag)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes server_chips = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_chips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ChipBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ChipBag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChipBag::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ChipBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes server_chips = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->server_chips(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ChipBag)
}

size_t ChipBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ChipBag)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes server_chips = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->server_chips());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChipBag::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChipBag*>(
      &from));
}

void ChipBag::MergeFrom(const ChipBag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ChipBag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_chips()) {
    _has_bits_[0] |= 0x00000001u;
    server_chips_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_chips_);
  }
}

void ChipBag::CopyFrom(const ChipBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ChipBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChipBag::IsInitialized() const {
  return true;
}

void ChipBag::InternalSwap(ChipBag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_chips_.Swap(&other->server_chips_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ChipBag::GetTypeName() const {
  return "sync_pb.ChipBag";
}


// ===================================================================

void ClientStatus::InitAsDefaultInstance() {
}
class ClientStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientStatus>()._has_bits_);
  static void set_has_hierarchy_conflict_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_sync_feature_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientStatus::ClientStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientStatus)
}
ClientStatus::ClientStatus(const ClientStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hierarchy_conflict_detected_, &from.hierarchy_conflict_detected_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_sync_feature_enabled_) -
    reinterpret_cast<char*>(&hierarchy_conflict_detected_)) + sizeof(is_sync_feature_enabled_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientStatus)
}

void ClientStatus::SharedCtor() {
  ::memset(&hierarchy_conflict_detected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_sync_feature_enabled_) -
      reinterpret_cast<char*>(&hierarchy_conflict_detected_)) + sizeof(is_sync_feature_enabled_));
}

ClientStatus::~ClientStatus() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientStatus)
  SharedDtor();
}

void ClientStatus::SharedDtor() {
}

void ClientStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientStatus& ClientStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientStatus_sync_2eproto.base);
  return *internal_default_instance();
}


void ClientStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hierarchy_conflict_detected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_sync_feature_enabled_) -
      reinterpret_cast<char*>(&hierarchy_conflict_detected_)) + sizeof(is_sync_feature_enabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool hierarchy_conflict_detected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hierarchy_conflict_detected(&has_bits);
          hierarchy_conflict_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_sync_feature_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_sync_feature_enabled(&has_bits);
          is_sync_feature_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hierarchy_conflict_detected = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_hierarchy_conflict_detected(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hierarchy_conflict_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_sync_feature_enabled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_sync_feature_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sync_feature_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hierarchy_conflict_detected = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->hierarchy_conflict_detected(), output);
  }

  // optional bool is_sync_feature_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_sync_feature_enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientStatus)
}

size_t ClientStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool hierarchy_conflict_detected = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_sync_feature_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientStatus*>(
      &from));
}

void ClientStatus::MergeFrom(const ClientStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hierarchy_conflict_detected_ = from.hierarchy_conflict_detected_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_sync_feature_enabled_ = from.is_sync_feature_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientStatus::CopyFrom(const ClientStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStatus::IsInitialized() const {
  return true;
}

void ClientStatus::InternalSwap(ClientStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hierarchy_conflict_detected_, other->hierarchy_conflict_detected_);
  swap(is_sync_feature_enabled_, other->is_sync_feature_enabled_);
}

std::string ClientStatus::GetTypeName() const {
  return "sync_pb.ClientStatus";
}


// ===================================================================

void DataTypeContext::InitAsDefaultInstance() {
}
class DataTypeContext::_Internal {
 public:
  using HasBits = decltype(std::declval<DataTypeContext>()._has_bits_);
  static void set_has_data_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DataTypeContext::DataTypeContext()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.DataTypeContext)
}
DataTypeContext::DataTypeContext(const DataTypeContext& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_context()) {
    context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(data_type_id_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.DataTypeContext)
}

void DataTypeContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataTypeContext_sync_2eproto.base);
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(data_type_id_));
}

DataTypeContext::~DataTypeContext() {
  // @@protoc_insertion_point(destructor:sync_pb.DataTypeContext)
  SharedDtor();
}

void DataTypeContext::SharedDtor() {
  context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataTypeContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataTypeContext& DataTypeContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataTypeContext_sync_2eproto.base);
  return *internal_default_instance();
}


void DataTypeContext::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DataTypeContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    context_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_type_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(data_type_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataTypeContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 data_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data_type_id(&has_bits);
          data_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_context(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataTypeContext::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.DataTypeContext)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_data_type_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes context = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.DataTypeContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.DataTypeContext)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataTypeContext::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.DataTypeContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_type_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->data_type_id(), output);
  }

  // optional bytes context = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->context(), output);
  }

  // optional int64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.DataTypeContext)
}

size_t DataTypeContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DataTypeContext)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes context = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->context());
    }

    // optional int64 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int32 data_type_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->data_type_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTypeContext::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DataTypeContext*>(
      &from));
}

void DataTypeContext::MergeFrom(const DataTypeContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DataTypeContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_type_id_ = from.data_type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataTypeContext::CopyFrom(const DataTypeContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DataTypeContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTypeContext::IsInitialized() const {
  return true;
}

void DataTypeContext::InternalSwap(DataTypeContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  context_.Swap(&other->context_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(data_type_id_, other->data_type_id_);
}

std::string DataTypeContext::GetTypeName() const {
  return "sync_pb.DataTypeContext";
}


// ===================================================================

void ClientToServerMessage::InitAsDefaultInstance() {
  ::sync_pb::_ClientToServerMessage_default_instance_._instance.get_mutable()->commit_ = const_cast< ::sync_pb::CommitMessage*>(
      ::sync_pb::CommitMessage::internal_default_instance());
  ::sync_pb::_ClientToServerMessage_default_instance_._instance.get_mutable()->get_updates_ = const_cast< ::sync_pb::GetUpdatesMessage*>(
      ::sync_pb::GetUpdatesMessage::internal_default_instance());
  ::sync_pb::_ClientToServerMessage_default_instance_._instance.get_mutable()->debug_info_ = const_cast< ::sync_pb::DebugInfo*>(
      ::sync_pb::DebugInfo::internal_default_instance());
  ::sync_pb::_ClientToServerMessage_default_instance_._instance.get_mutable()->bag_of_chips_ = const_cast< ::sync_pb::ChipBag*>(
      ::sync_pb::ChipBag::internal_default_instance());
  ::sync_pb::_ClientToServerMessage_default_instance_._instance.get_mutable()->client_status_ = const_cast< ::sync_pb::ClientStatus*>(
      ::sync_pb::ClientStatus::internal_default_instance());
  ::sync_pb::_ClientToServerMessage_default_instance_._instance.get_mutable()->clear_server_data_ = const_cast< ::sync_pb::ClearServerDataMessage*>(
      ::sync_pb::ClearServerDataMessage::internal_default_instance());
}
class ClientToServerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientToServerMessage>()._has_bits_);
  static void set_has_share(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_message_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::sync_pb::CommitMessage& commit(const ClientToServerMessage* msg);
  static void set_has_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::GetUpdatesMessage& get_updates(const ClientToServerMessage* msg);
  static void set_has_get_updates(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_store_birthday(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sync_problem_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::sync_pb::DebugInfo& debug_info(const ClientToServerMessage* msg);
  static void set_has_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::ChipBag& bag_of_chips(const ClientToServerMessage* msg);
  static void set_has_bag_of_chips(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_api_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::ClientStatus& client_status(const ClientToServerMessage* msg);
  static void set_has_client_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_invalidator_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sync_pb::ClearServerDataMessage& clear_server_data(const ClientToServerMessage* msg);
  static void set_has_clear_server_data(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::sync_pb::CommitMessage&
ClientToServerMessage::_Internal::commit(const ClientToServerMessage* msg) {
  return *msg->commit_;
}
const ::sync_pb::GetUpdatesMessage&
ClientToServerMessage::_Internal::get_updates(const ClientToServerMessage* msg) {
  return *msg->get_updates_;
}
const ::sync_pb::DebugInfo&
ClientToServerMessage::_Internal::debug_info(const ClientToServerMessage* msg) {
  return *msg->debug_info_;
}
const ::sync_pb::ChipBag&
ClientToServerMessage::_Internal::bag_of_chips(const ClientToServerMessage* msg) {
  return *msg->bag_of_chips_;
}
const ::sync_pb::ClientStatus&
ClientToServerMessage::_Internal::client_status(const ClientToServerMessage* msg) {
  return *msg->client_status_;
}
const ::sync_pb::ClearServerDataMessage&
ClientToServerMessage::_Internal::clear_server_data(const ClientToServerMessage* msg) {
  return *msg->clear_server_data_;
}
void ClientToServerMessage::clear_debug_info() {
  if (debug_info_ != nullptr) debug_info_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
ClientToServerMessage::ClientToServerMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientToServerMessage)
}
ClientToServerMessage::ClientToServerMessage(const ClientToServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  share_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_share()) {
    share_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.share_);
  }
  store_birthday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_birthday()) {
    store_birthday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
  }
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_api_key()) {
    api_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.api_key_);
  }
  invalidator_client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_invalidator_client_id()) {
    invalidator_client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invalidator_client_id_);
  }
  if (from.has_commit()) {
    commit_ = new ::sync_pb::CommitMessage(*from.commit_);
  } else {
    commit_ = nullptr;
  }
  if (from.has_get_updates()) {
    get_updates_ = new ::sync_pb::GetUpdatesMessage(*from.get_updates_);
  } else {
    get_updates_ = nullptr;
  }
  if (from.has_debug_info()) {
    debug_info_ = new ::sync_pb::DebugInfo(*from.debug_info_);
  } else {
    debug_info_ = nullptr;
  }
  if (from.has_bag_of_chips()) {
    bag_of_chips_ = new ::sync_pb::ChipBag(*from.bag_of_chips_);
  } else {
    bag_of_chips_ = nullptr;
  }
  if (from.has_client_status()) {
    client_status_ = new ::sync_pb::ClientStatus(*from.client_status_);
  } else {
    client_status_ = nullptr;
  }
  if (from.has_clear_server_data()) {
    clear_server_data_ = new ::sync_pb::ClearServerDataMessage(*from.clear_server_data_);
  } else {
    clear_server_data_ = nullptr;
  }
  ::memcpy(&sync_problem_detected_, &from.sync_problem_detected_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_contents_) -
    reinterpret_cast<char*>(&sync_problem_detected_)) + sizeof(message_contents_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientToServerMessage)
}

void ClientToServerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServerMessage_sync_2eproto.base);
  share_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_birthday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invalidator_client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&commit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_problem_detected_) -
      reinterpret_cast<char*>(&commit_)) + sizeof(sync_problem_detected_));
  protocol_version_ = 52;
  message_contents_ = 1;
}

ClientToServerMessage::~ClientToServerMessage() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientToServerMessage)
  SharedDtor();
}

void ClientToServerMessage::SharedDtor() {
  share_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_birthday_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invalidator_client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commit_;
  if (this != internal_default_instance()) delete get_updates_;
  if (this != internal_default_instance()) delete debug_info_;
  if (this != internal_default_instance()) delete bag_of_chips_;
  if (this != internal_default_instance()) delete client_status_;
  if (this != internal_default_instance()) delete clear_server_data_;
}

void ClientToServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServerMessage& ClientToServerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServerMessage_sync_2eproto.base);
  return *internal_default_instance();
}


void ClientToServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientToServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      share_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      store_birthday_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      api_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      invalidator_client_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(commit_ != nullptr);
      commit_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(get_updates_ != nullptr);
      get_updates_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(debug_info_ != nullptr);
      debug_info_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(bag_of_chips_ != nullptr);
      bag_of_chips_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(client_status_ != nullptr);
      client_status_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(clear_server_data_ != nullptr);
      clear_server_data_->Clear();
    }
  }
  if (cached_has_bits & 0x00001c00u) {
    sync_problem_detected_ = false;
    protocol_version_ = 52;
    message_contents_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientToServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string share = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_share(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 protocol_version = 2 [default = 52];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::ClientToServerMessage_Contents_IsValid(val))) {
            set_message_contents(static_cast<::sync_pb::ClientToServerMessage_Contents>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.CommitMessage commit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_commit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GetUpdatesMessage get_updates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_get_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string store_birthday = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_store_birthday(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sync_problem_detected = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sync_problem_detected(&has_bits);
          sync_problem_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.DebugInfo debug_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_debug_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ChipBag bag_of_chips = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_bag_of_chips(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string api_key = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_api_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ClientStatus client_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_client_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string invalidator_client_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_invalidator_client_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ClearServerDataMessage clear_server_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_clear_server_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientToServerMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientToServerMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string share = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_share()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 protocol_version = 2 [default = 52];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_protocol_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::ClientToServerMessage_Contents_IsValid(value)) {
            set_message_contents(static_cast< ::sync_pb::ClientToServerMessage_Contents >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.CommitMessage commit = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GetUpdatesMessage get_updates = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_get_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string store_birthday = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_store_birthday()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sync_problem_detected = 8 [default = false];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_sync_problem_detected(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_problem_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DebugInfo debug_info = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ChipBag bag_of_chips = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bag_of_chips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string api_key = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_api_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClientStatus client_status = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_client_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string invalidator_client_id = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_invalidator_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClearServerDataMessage clear_server_data = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clear_server_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientToServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientToServerMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientToServerMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientToServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string share = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->share(), output);
  }

  // optional int32 protocol_version = 2 [default = 52];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->protocol_version(), output);
  }

  // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->message_contents(), output);
  }

  // optional .sync_pb.CommitMessage commit = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::commit(this), output);
  }

  // optional .sync_pb.GetUpdatesMessage get_updates = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::get_updates(this), output);
  }

  // optional string store_birthday = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->store_birthday(), output);
  }

  // optional bool sync_problem_detected = 8 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->sync_problem_detected(), output);
  }

  // optional .sync_pb.DebugInfo debug_info = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::debug_info(this), output);
  }

  // optional .sync_pb.ChipBag bag_of_chips = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::bag_of_chips(this), output);
  }

  // optional string api_key = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->api_key(), output);
  }

  // optional .sync_pb.ClientStatus client_status = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::client_status(this), output);
  }

  // optional string invalidator_client_id = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->invalidator_client_id(), output);
  }

  // optional .sync_pb.ClearServerDataMessage clear_server_data = 15;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::clear_server_data(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientToServerMessage)
}

size_t ClientToServerMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sync_pb.ClientToServerMessage)
  size_t total_size = 0;

  if (has_share()) {
    // required string share = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->share());
  }

  if (has_message_contents()) {
    // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->message_contents());
  }

  return total_size;
}
size_t ClientToServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientToServerMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00001001) ^ 0x00001001) == 0) {  // All required fields are present.
    // required string share = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->share());

    // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->message_contents());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string store_birthday = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->store_birthday());
    }

    // optional string api_key = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->api_key());
    }

    // optional string invalidator_client_id = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->invalidator_client_id());
    }

    // optional .sync_pb.CommitMessage commit = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commit_);
    }

    // optional .sync_pb.GetUpdatesMessage get_updates = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_updates_);
    }

    // optional .sync_pb.DebugInfo debug_info = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_info_);
    }

    // optional .sync_pb.ChipBag bag_of_chips = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bag_of_chips_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .sync_pb.ClientStatus client_status = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_status_);
    }

    // optional .sync_pb.ClearServerDataMessage clear_server_data = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clear_server_data_);
    }

    // optional bool sync_problem_detected = 8 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int32 protocol_version = 2 [default = 52];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->protocol_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServerMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientToServerMessage*>(
      &from));
}

void ClientToServerMessage::MergeFrom(const ClientToServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientToServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      share_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.share_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      store_birthday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      api_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.api_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      invalidator_client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invalidator_client_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_commit()->::sync_pb::CommitMessage::MergeFrom(from.commit());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_get_updates()->::sync_pb::GetUpdatesMessage::MergeFrom(from.get_updates());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_debug_info()->::sync_pb::DebugInfo::MergeFrom(from.debug_info());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_bag_of_chips()->::sync_pb::ChipBag::MergeFrom(from.bag_of_chips());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_client_status()->::sync_pb::ClientStatus::MergeFrom(from.client_status());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_clear_server_data()->::sync_pb::ClearServerDataMessage::MergeFrom(from.clear_server_data());
    }
    if (cached_has_bits & 0x00000400u) {
      sync_problem_detected_ = from.sync_problem_detected_;
    }
    if (cached_has_bits & 0x00000800u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00001000u) {
      message_contents_ = from.message_contents_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientToServerMessage::CopyFrom(const ClientToServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientToServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001001) != 0x00001001) return false;
  if (has_get_updates()) {
    if (!this->get_updates_->IsInitialized()) return false;
  }
  if (has_debug_info()) {
    if (!this->debug_info_->IsInitialized()) return false;
  }
  return true;
}

void ClientToServerMessage::InternalSwap(ClientToServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  share_.Swap(&other->share_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  store_birthday_.Swap(&other->store_birthday_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  api_key_.Swap(&other->api_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  invalidator_client_id_.Swap(&other->invalidator_client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(commit_, other->commit_);
  swap(get_updates_, other->get_updates_);
  swap(debug_info_, other->debug_info_);
  swap(bag_of_chips_, other->bag_of_chips_);
  swap(client_status_, other->client_status_);
  swap(clear_server_data_, other->clear_server_data_);
  swap(sync_problem_detected_, other->sync_problem_detected_);
  swap(protocol_version_, other->protocol_version_);
  swap(message_contents_, other->message_contents_);
}

std::string ClientToServerMessage::GetTypeName() const {
  return "sync_pb.ClientToServerMessage";
}


// ===================================================================

void GetCrashInfoRequest::InitAsDefaultInstance() {
}
class GetCrashInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCrashInfoRequest>()._has_bits_);
  static void set_has_crash_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crash_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetCrashInfoRequest::GetCrashInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetCrashInfoRequest)
}
GetCrashInfoRequest::GetCrashInfoRequest(const GetCrashInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crash_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_crash_id()) {
    crash_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crash_id_);
  }
  crash_time_millis_ = from.crash_time_millis_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetCrashInfoRequest)
}

void GetCrashInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCrashInfoRequest_sync_2eproto.base);
  crash_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crash_time_millis_ = PROTOBUF_LONGLONG(0);
}

GetCrashInfoRequest::~GetCrashInfoRequest() {
  // @@protoc_insertion_point(destructor:sync_pb.GetCrashInfoRequest)
  SharedDtor();
}

void GetCrashInfoRequest::SharedDtor() {
  crash_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCrashInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCrashInfoRequest& GetCrashInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCrashInfoRequest_sync_2eproto.base);
  return *internal_default_instance();
}


void GetCrashInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetCrashInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    crash_id_.ClearNonDefaultToEmptyNoArena();
  }
  crash_time_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCrashInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string crash_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_crash_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 crash_time_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_crash_time_millis(&has_bits);
          crash_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCrashInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetCrashInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crash_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_crash_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 crash_time_millis = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_crash_time_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &crash_time_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetCrashInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetCrashInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCrashInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetCrashInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string crash_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->crash_id(), output);
  }

  // optional int64 crash_time_millis = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->crash_time_millis(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetCrashInfoRequest)
}

size_t GetCrashInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetCrashInfoRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string crash_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->crash_id());
    }

    // optional int64 crash_time_millis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->crash_time_millis());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCrashInfoRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetCrashInfoRequest*>(
      &from));
}

void GetCrashInfoRequest::MergeFrom(const GetCrashInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetCrashInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      crash_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crash_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      crash_time_millis_ = from.crash_time_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCrashInfoRequest::CopyFrom(const GetCrashInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetCrashInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCrashInfoRequest::IsInitialized() const {
  return true;
}

void GetCrashInfoRequest::InternalSwap(GetCrashInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  crash_id_.Swap(&other->crash_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(crash_time_millis_, other->crash_time_millis_);
}

std::string GetCrashInfoRequest::GetTypeName() const {
  return "sync_pb.GetCrashInfoRequest";
}


// ===================================================================

void GetCrashInfoResponse::InitAsDefaultInstance() {
}
class GetCrashInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCrashInfoResponse>()._has_bits_);
  static void set_has_stack_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crash_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetCrashInfoResponse::GetCrashInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetCrashInfoResponse)
}
GetCrashInfoResponse::GetCrashInfoResponse(const GetCrashInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_stack_id()) {
    stack_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stack_id_);
  }
  crash_time_millis_ = from.crash_time_millis_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetCrashInfoResponse)
}

void GetCrashInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCrashInfoResponse_sync_2eproto.base);
  stack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crash_time_millis_ = PROTOBUF_LONGLONG(0);
}

GetCrashInfoResponse::~GetCrashInfoResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.GetCrashInfoResponse)
  SharedDtor();
}

void GetCrashInfoResponse::SharedDtor() {
  stack_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCrashInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCrashInfoResponse& GetCrashInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCrashInfoResponse_sync_2eproto.base);
  return *internal_default_instance();
}


void GetCrashInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetCrashInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stack_id_.ClearNonDefaultToEmptyNoArena();
  }
  crash_time_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCrashInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string stack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_stack_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 crash_time_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_crash_time_millis(&has_bits);
          crash_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCrashInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetCrashInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stack_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_stack_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 crash_time_millis = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_crash_time_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &crash_time_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetCrashInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetCrashInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCrashInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetCrashInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stack_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stack_id(), output);
  }

  // optional int64 crash_time_millis = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->crash_time_millis(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetCrashInfoResponse)
}

size_t GetCrashInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetCrashInfoResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string stack_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->stack_id());
    }

    // optional int64 crash_time_millis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->crash_time_millis());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCrashInfoResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetCrashInfoResponse*>(
      &from));
}

void GetCrashInfoResponse::MergeFrom(const GetCrashInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetCrashInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      stack_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stack_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      crash_time_millis_ = from.crash_time_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCrashInfoResponse::CopyFrom(const GetCrashInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetCrashInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCrashInfoResponse::IsInitialized() const {
  return true;
}

void GetCrashInfoResponse::InternalSwap(GetCrashInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stack_id_.Swap(&other->stack_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(crash_time_millis_, other->crash_time_millis_);
}

std::string GetCrashInfoResponse::GetTypeName() const {
  return "sync_pb.GetCrashInfoResponse";
}


// ===================================================================

void CommitResponse_EntryResponse_DatatypeSpecificError::InitAsDefaultInstance() {
}
class CommitResponse_EntryResponse_DatatypeSpecificError::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitResponse_EntryResponse_DatatypeSpecificError>()._has_bits_);
  static const ::sync_pb::SharingMessageCommitError& sharing_message_error(const CommitResponse_EntryResponse_DatatypeSpecificError* msg);
};

const ::sync_pb::SharingMessageCommitError&
CommitResponse_EntryResponse_DatatypeSpecificError::_Internal::sharing_message_error(const CommitResponse_EntryResponse_DatatypeSpecificError* msg) {
  return *msg->datatype_error_.sharing_message_error_;
}
void CommitResponse_EntryResponse_DatatypeSpecificError::set_allocated_sharing_message_error(::sync_pb::SharingMessageCommitError* sharing_message_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_datatype_error();
  if (sharing_message_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sharing_message_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sharing_message_error, submessage_arena);
    }
    set_has_sharing_message_error();
    datatype_error_.sharing_message_error_ = sharing_message_error;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError.sharing_message_error)
}
void CommitResponse_EntryResponse_DatatypeSpecificError::clear_sharing_message_error() {
  if (has_sharing_message_error()) {
    delete datatype_error_.sharing_message_error_;
    clear_has_datatype_error();
  }
}
CommitResponse_EntryResponse_DatatypeSpecificError::CommitResponse_EntryResponse_DatatypeSpecificError()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
}
CommitResponse_EntryResponse_DatatypeSpecificError::CommitResponse_EntryResponse_DatatypeSpecificError(const CommitResponse_EntryResponse_DatatypeSpecificError& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_datatype_error();
  switch (from.datatype_error_case()) {
    case kSharingMessageError: {
      mutable_sharing_message_error()->::sync_pb::SharingMessageCommitError::MergeFrom(from.sharing_message_error());
      break;
    }
    case DATATYPE_ERROR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
}

void CommitResponse_EntryResponse_DatatypeSpecificError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitResponse_EntryResponse_DatatypeSpecificError_sync_2eproto.base);
  clear_has_datatype_error();
}

CommitResponse_EntryResponse_DatatypeSpecificError::~CommitResponse_EntryResponse_DatatypeSpecificError() {
  // @@protoc_insertion_point(destructor:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
  SharedDtor();
}

void CommitResponse_EntryResponse_DatatypeSpecificError::SharedDtor() {
  if (has_datatype_error()) {
    clear_datatype_error();
  }
}

void CommitResponse_EntryResponse_DatatypeSpecificError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitResponse_EntryResponse_DatatypeSpecificError& CommitResponse_EntryResponse_DatatypeSpecificError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitResponse_EntryResponse_DatatypeSpecificError_sync_2eproto.base);
  return *internal_default_instance();
}


void CommitResponse_EntryResponse_DatatypeSpecificError::clear_datatype_error() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
  switch (datatype_error_case()) {
    case kSharingMessageError: {
      delete datatype_error_.sharing_message_error_;
      break;
    }
    case DATATYPE_ERROR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATATYPE_ERROR_NOT_SET;
}


void CommitResponse_EntryResponse_DatatypeSpecificError::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_datatype_error();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommitResponse_EntryResponse_DatatypeSpecificError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.SharingMessageCommitError sharing_message_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sharing_message_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommitResponse_EntryResponse_DatatypeSpecificError::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SharingMessageCommitError sharing_message_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sharing_message_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommitResponse_EntryResponse_DatatypeSpecificError::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .sync_pb.SharingMessageCommitError sharing_message_error = 1;
  if (has_sharing_message_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::sharing_message_error(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
}

size_t CommitResponse_EntryResponse_DatatypeSpecificError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (datatype_error_case()) {
    // optional .sync_pb.SharingMessageCommitError sharing_message_error = 1;
    case kSharingMessageError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *datatype_error_.sharing_message_error_);
      break;
    }
    case DATATYPE_ERROR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitResponse_EntryResponse_DatatypeSpecificError::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommitResponse_EntryResponse_DatatypeSpecificError*>(
      &from));
}

void CommitResponse_EntryResponse_DatatypeSpecificError::MergeFrom(const CommitResponse_EntryResponse_DatatypeSpecificError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.datatype_error_case()) {
    case kSharingMessageError: {
      mutable_sharing_message_error()->::sync_pb::SharingMessageCommitError::MergeFrom(from.sharing_message_error());
      break;
    }
    case DATATYPE_ERROR_NOT_SET: {
      break;
    }
  }
}

void CommitResponse_EntryResponse_DatatypeSpecificError::CopyFrom(const CommitResponse_EntryResponse_DatatypeSpecificError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse_EntryResponse_DatatypeSpecificError::IsInitialized() const {
  return true;
}

void CommitResponse_EntryResponse_DatatypeSpecificError::InternalSwap(CommitResponse_EntryResponse_DatatypeSpecificError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(datatype_error_, other->datatype_error_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string CommitResponse_EntryResponse_DatatypeSpecificError::GetTypeName() const {
  return "sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError";
}


// ===================================================================

void CommitResponse_EntryResponse::InitAsDefaultInstance() {
  ::sync_pb::_CommitResponse_EntryResponse_default_instance_._instance.get_mutable()->datatype_specific_error_ = const_cast< ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError*>(
      ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError::internal_default_instance());
}
class CommitResponse_EntryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitResponse_EntryResponse>()._has_bits_);
  static void set_has_response_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_id_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parent_id_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_non_unique_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mtime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError& datatype_specific_error(const CommitResponse_EntryResponse* msg);
  static void set_has_datatype_specific_error(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError&
CommitResponse_EntryResponse::_Internal::datatype_specific_error(const CommitResponse_EntryResponse* msg) {
  return *msg->datatype_specific_error_;
}
CommitResponse_EntryResponse::CommitResponse_EntryResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CommitResponse.EntryResponse)
}
CommitResponse_EntryResponse::CommitResponse_EntryResponse(const CommitResponse_EntryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id_string()) {
    id_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_string_);
  }
  parent_id_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_id_string()) {
    parent_id_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_id_string_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  non_unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_non_unique_name()) {
    non_unique_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.non_unique_name_);
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_datatype_specific_error()) {
    datatype_specific_error_ = new ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError(*from.datatype_specific_error_);
  } else {
    datatype_specific_error_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(response_type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.CommitResponse.EntryResponse)
}

void CommitResponse_EntryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitResponse_EntryResponse_sync_2eproto.base);
  id_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_id_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  non_unique_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&datatype_specific_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtime_) -
      reinterpret_cast<char*>(&datatype_specific_error_)) + sizeof(mtime_));
  response_type_ = 1;
}

CommitResponse_EntryResponse::~CommitResponse_EntryResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.CommitResponse.EntryResponse)
  SharedDtor();
}

void CommitResponse_EntryResponse::SharedDtor() {
  id_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_id_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  non_unique_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete datatype_specific_error_;
}

void CommitResponse_EntryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitResponse_EntryResponse& CommitResponse_EntryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitResponse_EntryResponse_sync_2eproto.base);
  return *internal_default_instance();
}


void CommitResponse_EntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CommitResponse.EntryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      id_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      parent_id_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      non_unique_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      error_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(datatype_specific_error_ != nullptr);
      datatype_specific_error_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mtime_) -
        reinterpret_cast<char*>(&version_)) + sizeof(mtime_));
  }
  response_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommitResponse_EntryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .sync_pb.CommitResponse.ResponseType response_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::CommitResponse_ResponseType_IsValid(val))) {
            set_response_type(static_cast<::sync_pb::CommitResponse_ResponseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string id_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string parent_id_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_parent_id_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string non_unique_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_non_unique_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mtime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_mtime(&has_bits);
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError datatype_specific_error = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_datatype_specific_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommitResponse_EntryResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CommitResponse.EntryResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sync_pb.CommitResponse.ResponseType response_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::CommitResponse_ResponseType_IsValid(value)) {
            set_response_type(static_cast< ::sync_pb::CommitResponse_ResponseType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id_string = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_id_string = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 version = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string non_unique_name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_non_unique_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mtime = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_mtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError datatype_specific_error = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_datatype_specific_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagWireType(tag) ==
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CommitResponse.EntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CommitResponse.EntryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommitResponse_EntryResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CommitResponse.EntryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sync_pb.CommitResponse.ResponseType response_type = 2;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->response_type(), output);
  }

  // optional string id_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id_string(), output);
  }

  // optional string parent_id_string = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->parent_id_string(), output);
  }

  // optional int64 version = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->version(), output);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional string non_unique_name = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->non_unique_name(), output);
  }

  // optional string error_message = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->error_message(), output);
  }

  // optional int64 mtime = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->mtime(), output);
  }

  // optional .sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError datatype_specific_error = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::datatype_specific_error(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CommitResponse.EntryResponse)
}

size_t CommitResponse_EntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CommitResponse.EntryResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .sync_pb.CommitResponse.ResponseType response_type = 2;
  if (has_response_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->response_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id_string());
    }

    // optional string parent_id_string = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->parent_id_string());
    }

    // optional string name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string non_unique_name = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->non_unique_name());
    }

    // optional string error_message = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional .sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError datatype_specific_error = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *datatype_specific_error_);
    }

    // optional int64 version = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int64 mtime = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitResponse_EntryResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommitResponse_EntryResponse*>(
      &from));
}

void CommitResponse_EntryResponse::MergeFrom(const CommitResponse_EntryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CommitResponse.EntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      parent_id_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parent_id_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      non_unique_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.non_unique_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_datatype_specific_error()->::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError::MergeFrom(from.datatype_specific_error());
    }
    if (cached_has_bits & 0x00000040u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000080u) {
      mtime_ = from.mtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_response_type(from.response_type());
  }
}

void CommitResponse_EntryResponse::CopyFrom(const CommitResponse_EntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CommitResponse.EntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse_EntryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  return true;
}

void CommitResponse_EntryResponse::InternalSwap(CommitResponse_EntryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_string_.Swap(&other->id_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_id_string_.Swap(&other->parent_id_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  non_unique_name_.Swap(&other->non_unique_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(datatype_specific_error_, other->datatype_specific_error_);
  swap(version_, other->version_);
  swap(mtime_, other->mtime_);
  swap(response_type_, other->response_type_);
}

std::string CommitResponse_EntryResponse::GetTypeName() const {
  return "sync_pb.CommitResponse.EntryResponse";
}


// ===================================================================

void CommitResponse::InitAsDefaultInstance() {
}
class CommitResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitResponse>()._has_bits_);
};

CommitResponse::CommitResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CommitResponse)
}
CommitResponse::CommitResponse(const CommitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entryresponse_(from.entryresponse_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.CommitResponse)
}

void CommitResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitResponse_sync_2eproto.base);
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
}

void CommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitResponse& CommitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitResponse_sync_2eproto.base);
  return *internal_default_instance();
}


void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entryresponse_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated group EntryResponse = 1 { ... };
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 11)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(add_entryresponse(), ptr, 11);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 11);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommitResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CommitResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group EntryResponse = 1 { ... };
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (11 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadGroup(1, input, add_entryresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CommitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommitResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated group EntryResponse = 1 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entryresponse_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteGroup(
      1,
      this->entryresponse(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CommitResponse)
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CommitResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group EntryResponse = 1 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->entryresponse_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          this->entryresponse(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommitResponse*>(
      &from));
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entryresponse_.MergeFrom(from.entryresponse_);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->entryresponse())) return false;
  return true;
}

void CommitResponse::InternalSwap(CommitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entryresponse_)->InternalSwap(CastToBase(&other->entryresponse_));
}

std::string CommitResponse::GetTypeName() const {
  return "sync_pb.CommitResponse";
}


// ===================================================================

void GetUpdatesResponse::InitAsDefaultInstance() {
}
class GetUpdatesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUpdatesResponse>()._has_bits_);
  static void set_has_changes_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetUpdatesResponse::GetUpdatesResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetUpdatesResponse)
}
GetUpdatesResponse::GetUpdatesResponse(const GetUpdatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_),
      new_progress_marker_(from.new_progress_marker_),
      encryption_keys_(from.encryption_keys_),
      context_mutations_(from.context_mutations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  changes_remaining_ = from.changes_remaining_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetUpdatesResponse)
}

void GetUpdatesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUpdatesResponse_sync_2eproto.base);
  changes_remaining_ = PROTOBUF_LONGLONG(0);
}

GetUpdatesResponse::~GetUpdatesResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.GetUpdatesResponse)
  SharedDtor();
}

void GetUpdatesResponse::SharedDtor() {
}

void GetUpdatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUpdatesResponse& GetUpdatesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUpdatesResponse_sync_2eproto.base);
  return *internal_default_instance();
}


void GetUpdatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetUpdatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  new_progress_marker_.Clear();
  encryption_keys_.Clear();
  context_mutations_.Clear();
  changes_remaining_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetUpdatesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sync_pb.SyncEntity entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional int64 changes_remaining = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_changes_remaining(&has_bits);
          changes_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_new_progress_marker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated bytes encryption_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_encryption_keys(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.DataTypeContext context_mutations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_context_mutations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetUpdatesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetUpdatesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.SyncEntity entries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 changes_remaining = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_changes_remaining(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &changes_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_new_progress_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes encryption_keys = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_encryption_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.DataTypeContext context_mutations = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_context_mutations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetUpdatesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetUpdatesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetUpdatesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetUpdatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.SyncEntity entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 changes_remaining = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->changes_remaining(), output);
  }

  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->new_progress_marker_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->new_progress_marker(static_cast<int>(i)),
      output);
  }

  // repeated bytes encryption_keys = 6;
  for (int i = 0, n = this->encryption_keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      6, this->encryption_keys(i), output);
  }

  // repeated .sync_pb.DataTypeContext context_mutations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->context_mutations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->context_mutations(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetUpdatesResponse)
}

size_t GetUpdatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetUpdatesResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.SyncEntity entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->new_progress_marker_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->new_progress_marker(static_cast<int>(i)));
    }
  }

  // repeated bytes encryption_keys = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->encryption_keys_size());
  for (int i = 0, n = this->encryption_keys_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->encryption_keys(i));
  }

  // repeated .sync_pb.DataTypeContext context_mutations = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->context_mutations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->context_mutations(static_cast<int>(i)));
    }
  }

  // optional int64 changes_remaining = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->changes_remaining());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdatesResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetUpdatesResponse*>(
      &from));
}

void GetUpdatesResponse::MergeFrom(const GetUpdatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetUpdatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  new_progress_marker_.MergeFrom(from.new_progress_marker_);
  encryption_keys_.MergeFrom(from.encryption_keys_);
  context_mutations_.MergeFrom(from.context_mutations_);
  if (from.has_changes_remaining()) {
    set_changes_remaining(from.changes_remaining());
  }
}

void GetUpdatesResponse::CopyFrom(const GetUpdatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetUpdatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesResponse::IsInitialized() const {
  return true;
}

void GetUpdatesResponse::InternalSwap(GetUpdatesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  CastToBase(&new_progress_marker_)->InternalSwap(CastToBase(&other->new_progress_marker_));
  encryption_keys_.InternalSwap(CastToBase(&other->encryption_keys_));
  CastToBase(&context_mutations_)->InternalSwap(CastToBase(&other->context_mutations_));
  swap(changes_remaining_, other->changes_remaining_);
}

std::string GetUpdatesResponse::GetTypeName() const {
  return "sync_pb.GetUpdatesResponse";
}


// ===================================================================

void ClientToServerResponse_Error::InitAsDefaultInstance() {
}
class ClientToServerResponse_Error::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientToServerResponse_Error>()._has_bits_);
  static void set_has_error_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ClientToServerResponse_Error::ClientToServerResponse_Error()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientToServerResponse.Error)
}
ClientToServerResponse_Error::ClientToServerResponse_Error(const ClientToServerResponse_Error& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      error_data_type_ids_(from.error_data_type_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_description()) {
    error_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_description_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&error_type_, &from.error_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&error_type_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientToServerResponse.Error)
}

void ClientToServerResponse_Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServerResponse_Error_sync_2eproto.base);
  error_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_type_ = 100;
  action_ = 5;
}

ClientToServerResponse_Error::~ClientToServerResponse_Error() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientToServerResponse.Error)
  SharedDtor();
}

void ClientToServerResponse_Error::SharedDtor() {
  error_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientToServerResponse_Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServerResponse_Error& ClientToServerResponse_Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServerResponse_Error_sync_2eproto.base);
  return *internal_default_instance();
}


void ClientToServerResponse_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientToServerResponse.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_data_type_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      error_description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    error_type_ = 100;
    action_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientToServerResponse_Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_ErrorType_IsValid(val))) {
            set_error_type(static_cast<::sync_pb::SyncEnums_ErrorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string error_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_Action_IsValid(val))) {
            set_action(static_cast<::sync_pb::SyncEnums_Action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int32 error_data_type_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_error_data_type_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 40);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_error_data_type_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientToServerResponse_Error::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientToServerResponse.Error)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_ErrorType_IsValid(value)) {
            set_error_type(static_cast< ::sync_pb::SyncEnums_ErrorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_description = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_Action_IsValid(value)) {
            set_action(static_cast< ::sync_pb::SyncEnums_Action >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 error_data_type_ids = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_error_data_type_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_error_data_type_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientToServerResponse.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientToServerResponse.Error)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientToServerResponse_Error::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientToServerResponse.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  // optional string error_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_description(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // repeated int32 error_data_type_ids = 5;
  for (int i = 0, n = this->error_data_type_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      5, this->error_data_type_ids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientToServerResponse.Error)
}

size_t ClientToServerResponse_Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientToServerResponse.Error)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 error_data_type_ids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->error_data_type_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->error_data_type_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string error_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_description());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->error_type());
    }

    // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServerResponse_Error::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientToServerResponse_Error*>(
      &from));
}

void ClientToServerResponse_Error::MergeFrom(const ClientToServerResponse_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientToServerResponse.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  error_data_type_ids_.MergeFrom(from.error_data_type_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      error_type_ = from.error_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientToServerResponse_Error::CopyFrom(const ClientToServerResponse_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientToServerResponse.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerResponse_Error::IsInitialized() const {
  return true;
}

void ClientToServerResponse_Error::InternalSwap(ClientToServerResponse_Error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_data_type_ids_.InternalSwap(&other->error_data_type_ids_);
  error_description_.Swap(&other->error_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_type_, other->error_type_);
  swap(action_, other->action_);
}

std::string ClientToServerResponse_Error::GetTypeName() const {
  return "sync_pb.ClientToServerResponse.Error";
}


// ===================================================================

void ClientToServerResponse::InitAsDefaultInstance() {
  ::sync_pb::_ClientToServerResponse_default_instance_._instance.get_mutable()->commit_ = const_cast< ::sync_pb::CommitResponse*>(
      ::sync_pb::CommitResponse::internal_default_instance());
  ::sync_pb::_ClientToServerResponse_default_instance_._instance.get_mutable()->get_updates_ = const_cast< ::sync_pb::GetUpdatesResponse*>(
      ::sync_pb::GetUpdatesResponse::internal_default_instance());
  ::sync_pb::_ClientToServerResponse_default_instance_._instance.get_mutable()->client_command_ = const_cast< ::sync_pb::ClientCommand*>(
      ::sync_pb::ClientCommand::internal_default_instance());
  ::sync_pb::_ClientToServerResponse_default_instance_._instance.get_mutable()->profiling_data_ = const_cast< ::sync_pb::ProfilingData*>(
      ::sync_pb::ProfilingData::internal_default_instance());
  ::sync_pb::_ClientToServerResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::sync_pb::ClientToServerResponse_Error*>(
      ::sync_pb::ClientToServerResponse_Error::internal_default_instance());
  ::sync_pb::_ClientToServerResponse_default_instance_._instance.get_mutable()->new_bag_of_chips_ = const_cast< ::sync_pb::ChipBag*>(
      ::sync_pb::ChipBag::internal_default_instance());
  ::sync_pb::_ClientToServerResponse_default_instance_._instance.get_mutable()->clear_server_data_ = const_cast< ::sync_pb::ClearServerDataResponse*>(
      ::sync_pb::ClearServerDataResponse::internal_default_instance());
}
class ClientToServerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientToServerResponse>()._has_bits_);
  static const ::sync_pb::CommitResponse& commit(const ClientToServerResponse* msg);
  static void set_has_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::GetUpdatesResponse& get_updates(const ClientToServerResponse* msg);
  static void set_has_get_updates(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_store_birthday(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::ClientCommand& client_command(const ClientToServerResponse* msg);
  static void set_has_client_command(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::ProfilingData& profiling_data(const ClientToServerResponse* msg);
  static void set_has_profiling_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sync_pb::ClientToServerResponse_Error& error(const ClientToServerResponse* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::ChipBag& new_bag_of_chips(const ClientToServerResponse* msg);
  static void set_has_new_bag_of_chips(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::sync_pb::ClearServerDataResponse& clear_server_data(const ClientToServerResponse* msg);
  static void set_has_clear_server_data(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::sync_pb::CommitResponse&
ClientToServerResponse::_Internal::commit(const ClientToServerResponse* msg) {
  return *msg->commit_;
}
const ::sync_pb::GetUpdatesResponse&
ClientToServerResponse::_Internal::get_updates(const ClientToServerResponse* msg) {
  return *msg->get_updates_;
}
const ::sync_pb::ClientCommand&
ClientToServerResponse::_Internal::client_command(const ClientToServerResponse* msg) {
  return *msg->client_command_;
}
const ::sync_pb::ProfilingData&
ClientToServerResponse::_Internal::profiling_data(const ClientToServerResponse* msg) {
  return *msg->profiling_data_;
}
const ::sync_pb::ClientToServerResponse_Error&
ClientToServerResponse::_Internal::error(const ClientToServerResponse* msg) {
  return *msg->error_;
}
const ::sync_pb::ChipBag&
ClientToServerResponse::_Internal::new_bag_of_chips(const ClientToServerResponse* msg) {
  return *msg->new_bag_of_chips_;
}
const ::sync_pb::ClearServerDataResponse&
ClientToServerResponse::_Internal::clear_server_data(const ClientToServerResponse* msg) {
  return *msg->clear_server_data_;
}
void ClientToServerResponse::clear_client_command() {
  if (client_command_ != nullptr) client_command_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ClientToServerResponse::ClientToServerResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ClientToServerResponse)
}
ClientToServerResponse::ClientToServerResponse(const ClientToServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      migrated_data_type_id_(from.migrated_data_type_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  store_birthday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_birthday()) {
    store_birthday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
  }
  if (from.has_commit()) {
    commit_ = new ::sync_pb::CommitResponse(*from.commit_);
  } else {
    commit_ = nullptr;
  }
  if (from.has_get_updates()) {
    get_updates_ = new ::sync_pb::GetUpdatesResponse(*from.get_updates_);
  } else {
    get_updates_ = nullptr;
  }
  if (from.has_client_command()) {
    client_command_ = new ::sync_pb::ClientCommand(*from.client_command_);
  } else {
    client_command_ = nullptr;
  }
  if (from.has_profiling_data()) {
    profiling_data_ = new ::sync_pb::ProfilingData(*from.profiling_data_);
  } else {
    profiling_data_ = nullptr;
  }
  if (from.has_error()) {
    error_ = new ::sync_pb::ClientToServerResponse_Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  if (from.has_new_bag_of_chips()) {
    new_bag_of_chips_ = new ::sync_pb::ChipBag(*from.new_bag_of_chips_);
  } else {
    new_bag_of_chips_ = nullptr;
  }
  if (from.has_clear_server_data()) {
    clear_server_data_ = new ::sync_pb::ClearServerDataResponse(*from.clear_server_data_);
  } else {
    clear_server_data_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientToServerResponse)
}

void ClientToServerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServerResponse_sync_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_birthday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&commit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_server_data_) -
      reinterpret_cast<char*>(&commit_)) + sizeof(clear_server_data_));
  error_code_ = 100;
}

ClientToServerResponse::~ClientToServerResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientToServerResponse)
  SharedDtor();
}

void ClientToServerResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_birthday_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commit_;
  if (this != internal_default_instance()) delete get_updates_;
  if (this != internal_default_instance()) delete client_command_;
  if (this != internal_default_instance()) delete profiling_data_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete new_bag_of_chips_;
  if (this != internal_default_instance()) delete clear_server_data_;
}

void ClientToServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServerResponse& ClientToServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServerResponse_sync_2eproto.base);
  return *internal_default_instance();
}


void ClientToServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientToServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  migrated_data_type_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      error_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      store_birthday_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(commit_ != nullptr);
      commit_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(get_updates_ != nullptr);
      get_updates_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(client_command_ != nullptr);
      client_command_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(profiling_data_ != nullptr);
      profiling_data_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(error_ != nullptr);
      error_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(new_bag_of_chips_ != nullptr);
      new_bag_of_chips_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(clear_server_data_ != nullptr);
      clear_server_data_->Clear();
    }
    error_code_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientToServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.CommitResponse commit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_commit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GetUpdatesResponse get_updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_get_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_ErrorType_IsValid(val))) {
            set_error_code(static_cast<::sync_pb::SyncEnums_ErrorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string store_birthday = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_store_birthday(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ClientCommand client_command = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_client_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ProfilingData profiling_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_profiling_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 migrated_data_type_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_migrated_data_type_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 96);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_migrated_data_type_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ClientToServerResponse.Error error = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ChipBag new_bag_of_chips = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_new_bag_of_chips(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ClearServerDataResponse clear_server_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_clear_server_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientToServerResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ClientToServerResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.CommitResponse commit = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GetUpdatesResponse get_updates = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_get_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_ErrorType_IsValid(value)) {
            set_error_code(static_cast< ::sync_pb::SyncEnums_ErrorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string store_birthday = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_store_birthday()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClientCommand client_command = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_client_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ProfilingData profiling_data = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_profiling_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 migrated_data_type_id = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 96u, input, this->mutable_migrated_data_type_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_migrated_data_type_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClientToServerResponse.Error error = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ChipBag new_bag_of_chips = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_new_bag_of_chips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ClearServerDataResponse clear_server_data = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clear_server_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ClientToServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ClientToServerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientToServerResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ClientToServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.CommitResponse commit = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::commit(this), output);
  }

  // optional .sync_pb.GetUpdatesResponse get_updates = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::get_updates(this), output);
  }

  // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->error_code(), output);
  }

  // optional string error_message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->error_message(), output);
  }

  // optional string store_birthday = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->store_birthday(), output);
  }

  // optional .sync_pb.ClientCommand client_command = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::client_command(this), output);
  }

  // optional .sync_pb.ProfilingData profiling_data = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::profiling_data(this), output);
  }

  // repeated int32 migrated_data_type_id = 12;
  for (int i = 0, n = this->migrated_data_type_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      12, this->migrated_data_type_id(i), output);
  }

  // optional .sync_pb.ClientToServerResponse.Error error = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::error(this), output);
  }

  // optional .sync_pb.ChipBag new_bag_of_chips = 14;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::new_bag_of_chips(this), output);
  }

  // optional .sync_pb.ClearServerDataResponse clear_server_data = 15;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::clear_server_data(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ClientToServerResponse)
}

size_t ClientToServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientToServerResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 migrated_data_type_id = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->migrated_data_type_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->migrated_data_type_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string error_message = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional string store_birthday = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->store_birthday());
    }

    // optional .sync_pb.CommitResponse commit = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commit_);
    }

    // optional .sync_pb.GetUpdatesResponse get_updates = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_updates_);
    }

    // optional .sync_pb.ClientCommand client_command = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_command_);
    }

    // optional .sync_pb.ProfilingData profiling_data = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profiling_data_);
    }

    // optional .sync_pb.ClientToServerResponse.Error error = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_);
    }

    // optional .sync_pb.ChipBag new_bag_of_chips = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_bag_of_chips_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .sync_pb.ClearServerDataResponse clear_server_data = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clear_server_data_);
    }

    // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServerResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientToServerResponse*>(
      &from));
}

void ClientToServerResponse::MergeFrom(const ClientToServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientToServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  migrated_data_type_id_.MergeFrom(from.migrated_data_type_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      store_birthday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_commit()->::sync_pb::CommitResponse::MergeFrom(from.commit());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_get_updates()->::sync_pb::GetUpdatesResponse::MergeFrom(from.get_updates());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_client_command()->::sync_pb::ClientCommand::MergeFrom(from.client_command());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_profiling_data()->::sync_pb::ProfilingData::MergeFrom(from.profiling_data());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_error()->::sync_pb::ClientToServerResponse_Error::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_new_bag_of_chips()->::sync_pb::ChipBag::MergeFrom(from.new_bag_of_chips());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_clear_server_data()->::sync_pb::ClearServerDataResponse::MergeFrom(from.clear_server_data());
    }
    if (cached_has_bits & 0x00000200u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientToServerResponse::CopyFrom(const ClientToServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientToServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerResponse::IsInitialized() const {
  if (has_commit()) {
    if (!this->commit_->IsInitialized()) return false;
  }
  return true;
}

void ClientToServerResponse::InternalSwap(ClientToServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  migrated_data_type_id_.InternalSwap(&other->migrated_data_type_id_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  store_birthday_.Swap(&other->store_birthday_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(commit_, other->commit_);
  swap(get_updates_, other->get_updates_);
  swap(client_command_, other->client_command_);
  swap(profiling_data_, other->profiling_data_);
  swap(error_, other->error_);
  swap(new_bag_of_chips_, other->new_bag_of_chips_);
  swap(clear_server_data_, other->clear_server_data_);
  swap(error_code_, other->error_code_);
}

std::string ClientToServerResponse::GetTypeName() const {
  return "sync_pb.ClientToServerResponse";
}


// ===================================================================

void EventRequest::InitAsDefaultInstance() {
  ::sync_pb::_EventRequest_default_instance_._instance.get_mutable()->sync_disabled_ = const_cast< ::sync_pb::SyncDisabledEvent*>(
      ::sync_pb::SyncDisabledEvent::internal_default_instance());
}
class EventRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EventRequest>()._has_bits_);
  static const ::sync_pb::SyncDisabledEvent& sync_disabled(const EventRequest* msg);
  static void set_has_sync_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::SyncDisabledEvent&
EventRequest::_Internal::sync_disabled(const EventRequest* msg) {
  return *msg->sync_disabled_;
}
EventRequest::EventRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.EventRequest)
}
EventRequest::EventRequest(const EventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sync_disabled()) {
    sync_disabled_ = new ::sync_pb::SyncDisabledEvent(*from.sync_disabled_);
  } else {
    sync_disabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.EventRequest)
}

void EventRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventRequest_sync_2eproto.base);
  sync_disabled_ = nullptr;
}

EventRequest::~EventRequest() {
  // @@protoc_insertion_point(destructor:sync_pb.EventRequest)
  SharedDtor();
}

void EventRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sync_disabled_;
}

void EventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventRequest& EventRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventRequest_sync_2eproto.base);
  return *internal_default_instance();
}


void EventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sync_disabled_ != nullptr);
    sync_disabled_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.SyncDisabledEvent sync_disabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sync_disabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.EventRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SyncDisabledEvent sync_disabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_disabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.EventRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.EventRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.EventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.SyncDisabledEvent sync_disabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::sync_disabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.EventRequest)
}

size_t EventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EventRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.SyncDisabledEvent sync_disabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_disabled_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventRequest*>(
      &from));
}

void EventRequest::MergeFrom(const EventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sync_disabled()) {
    mutable_sync_disabled()->::sync_pb::SyncDisabledEvent::MergeFrom(from.sync_disabled());
  }
}

void EventRequest::CopyFrom(const EventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventRequest::IsInitialized() const {
  return true;
}

void EventRequest::InternalSwap(EventRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sync_disabled_, other->sync_disabled_);
}

std::string EventRequest::GetTypeName() const {
  return "sync_pb.EventRequest";
}


// ===================================================================

void EventResponse::InitAsDefaultInstance() {
}
class EventResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<EventResponse>()._has_bits_);
};

EventResponse::EventResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.EventResponse)
}
EventResponse::EventResponse(const EventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.EventResponse)
}

void EventResponse::SharedCtor() {
}

EventResponse::~EventResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.EventResponse)
  SharedDtor();
}

void EventResponse::SharedDtor() {
}

void EventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventResponse& EventResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventResponse_sync_2eproto.base);
  return *internal_default_instance();
}


void EventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.EventResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.EventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.EventResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.EventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.EventResponse)
}

size_t EventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EventResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventResponse*>(
      &from));
}

void EventResponse::MergeFrom(const EventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EventResponse::CopyFrom(const EventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventResponse::IsInitialized() const {
  return true;
}

void EventResponse::InternalSwap(EventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string EventResponse::GetTypeName() const {
  return "sync_pb.EventResponse";
}


// ===================================================================

void SyncDisabledEvent::InitAsDefaultInstance() {
}
class SyncDisabledEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncDisabledEvent>()._has_bits_);
  static void set_has_cache_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_store_birthday(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SyncDisabledEvent::SyncDisabledEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SyncDisabledEvent)
}
SyncDisabledEvent::SyncDisabledEvent(const SyncDisabledEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cache_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_guid()) {
    cache_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
  }
  store_birthday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_birthday()) {
    store_birthday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SyncDisabledEvent)
}

void SyncDisabledEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncDisabledEvent_sync_2eproto.base);
  cache_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_birthday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SyncDisabledEvent::~SyncDisabledEvent() {
  // @@protoc_insertion_point(destructor:sync_pb.SyncDisabledEvent)
  SharedDtor();
}

void SyncDisabledEvent::SharedDtor() {
  cache_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_birthday_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SyncDisabledEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncDisabledEvent& SyncDisabledEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncDisabledEvent_sync_2eproto.base);
  return *internal_default_instance();
}


void SyncDisabledEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SyncDisabledEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cache_guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      store_birthday_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncDisabledEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string cache_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cache_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string store_birthday = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_store_birthday(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncDisabledEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SyncDisabledEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cache_guid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string store_birthday = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_store_birthday()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SyncDisabledEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SyncDisabledEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncDisabledEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SyncDisabledEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cache_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cache_guid(), output);
  }

  // optional string store_birthday = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->store_birthday(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SyncDisabledEvent)
}

size_t SyncDisabledEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SyncDisabledEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string cache_guid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cache_guid());
    }

    // optional string store_birthday = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->store_birthday());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncDisabledEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SyncDisabledEvent*>(
      &from));
}

void SyncDisabledEvent::MergeFrom(const SyncDisabledEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SyncDisabledEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cache_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      store_birthday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_birthday_);
    }
  }
}

void SyncDisabledEvent::CopyFrom(const SyncDisabledEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SyncDisabledEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncDisabledEvent::IsInitialized() const {
  return true;
}

void SyncDisabledEvent::InternalSwap(SyncDisabledEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cache_guid_.Swap(&other->cache_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  store_birthday_.Swap(&other->store_birthday_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string SyncDisabledEvent::GetTypeName() const {
  return "sync_pb.SyncDisabledEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::ProfilingData* Arena::CreateMaybeMessage< ::sync_pb::ProfilingData >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ProfilingData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::EntitySpecifics* Arena::CreateMaybeMessage< ::sync_pb::EntitySpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::EntitySpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SyncEntity* Arena::CreateMaybeMessage< ::sync_pb::SyncEntity >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::SyncEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ChromiumExtensionsActivity* Arena::CreateMaybeMessage< ::sync_pb::ChromiumExtensionsActivity >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ChromiumExtensionsActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ClientConfigParams* Arena::CreateMaybeMessage< ::sync_pb::ClientConfigParams >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ClientConfigParams >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::CommitMessage* Arena::CreateMaybeMessage< ::sync_pb::CommitMessage >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::CommitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GetUpdateTriggers* Arena::CreateMaybeMessage< ::sync_pb::GetUpdateTriggers >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GetUpdateTriggers >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GarbageCollectionDirective* Arena::CreateMaybeMessage< ::sync_pb::GarbageCollectionDirective >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GarbageCollectionDirective >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::DataTypeProgressMarker* Arena::CreateMaybeMessage< ::sync_pb::DataTypeProgressMarker >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::DataTypeProgressMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GetUpdatesMessage* Arena::CreateMaybeMessage< ::sync_pb::GetUpdatesMessage >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GetUpdatesMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ClearServerDataMessage* Arena::CreateMaybeMessage< ::sync_pb::ClearServerDataMessage >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ClearServerDataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ClearServerDataResponse* Arena::CreateMaybeMessage< ::sync_pb::ClearServerDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ClearServerDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ChipBag* Arena::CreateMaybeMessage< ::sync_pb::ChipBag >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ChipBag >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ClientStatus* Arena::CreateMaybeMessage< ::sync_pb::ClientStatus >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ClientStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::DataTypeContext* Arena::CreateMaybeMessage< ::sync_pb::DataTypeContext >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::DataTypeContext >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ClientToServerMessage* Arena::CreateMaybeMessage< ::sync_pb::ClientToServerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ClientToServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GetCrashInfoRequest* Arena::CreateMaybeMessage< ::sync_pb::GetCrashInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GetCrashInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GetCrashInfoResponse* Arena::CreateMaybeMessage< ::sync_pb::GetCrashInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GetCrashInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* Arena::CreateMaybeMessage< ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::CommitResponse_EntryResponse* Arena::CreateMaybeMessage< ::sync_pb::CommitResponse_EntryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::CommitResponse_EntryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::CommitResponse* Arena::CreateMaybeMessage< ::sync_pb::CommitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::CommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GetUpdatesResponse* Arena::CreateMaybeMessage< ::sync_pb::GetUpdatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GetUpdatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ClientToServerResponse_Error* Arena::CreateMaybeMessage< ::sync_pb::ClientToServerResponse_Error >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ClientToServerResponse_Error >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ClientToServerResponse* Arena::CreateMaybeMessage< ::sync_pb::ClientToServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ClientToServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::EventRequest* Arena::CreateMaybeMessage< ::sync_pb::EventRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::EventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::EventResponse* Arena::CreateMaybeMessage< ::sync_pb::EventResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::EventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SyncDisabledEvent* Arena::CreateMaybeMessage< ::sync_pb::SyncDisabledEvent >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::SyncDisabledEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
