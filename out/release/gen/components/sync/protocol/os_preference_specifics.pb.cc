// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: os_preference_specifics.proto

#include "os_preference_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_preference_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreferenceSpecifics_preference_5fspecifics_2eproto;
namespace sync_pb {
class OsPreferenceSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OsPreferenceSpecifics> _instance;
} _OsPreferenceSpecifics_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_OsPreferenceSpecifics_os_5fpreference_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_OsPreferenceSpecifics_default_instance_;
    new (ptr) ::sync_pb::OsPreferenceSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::OsPreferenceSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OsPreferenceSpecifics_os_5fpreference_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OsPreferenceSpecifics_os_5fpreference_5fspecifics_2eproto}, {
      &scc_info_PreferenceSpecifics_preference_5fspecifics_2eproto.base,}};

namespace sync_pb {

// ===================================================================

void OsPreferenceSpecifics::InitAsDefaultInstance() {
  ::sync_pb::_OsPreferenceSpecifics_default_instance_._instance.get_mutable()->preference_ = const_cast< ::sync_pb::PreferenceSpecifics*>(
      ::sync_pb::PreferenceSpecifics::internal_default_instance());
}
class OsPreferenceSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<OsPreferenceSpecifics>()._has_bits_);
  static const ::sync_pb::PreferenceSpecifics& preference(const OsPreferenceSpecifics* msg);
  static void set_has_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::PreferenceSpecifics&
OsPreferenceSpecifics::_Internal::preference(const OsPreferenceSpecifics* msg) {
  return *msg->preference_;
}
void OsPreferenceSpecifics::clear_preference() {
  if (preference_ != nullptr) preference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
OsPreferenceSpecifics::OsPreferenceSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.OsPreferenceSpecifics)
}
OsPreferenceSpecifics::OsPreferenceSpecifics(const OsPreferenceSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_preference()) {
    preference_ = new ::sync_pb::PreferenceSpecifics(*from.preference_);
  } else {
    preference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.OsPreferenceSpecifics)
}

void OsPreferenceSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OsPreferenceSpecifics_os_5fpreference_5fspecifics_2eproto.base);
  preference_ = nullptr;
}

OsPreferenceSpecifics::~OsPreferenceSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.OsPreferenceSpecifics)
  SharedDtor();
}

void OsPreferenceSpecifics::SharedDtor() {
  if (this != internal_default_instance()) delete preference_;
}

void OsPreferenceSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OsPreferenceSpecifics& OsPreferenceSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OsPreferenceSpecifics_os_5fpreference_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void OsPreferenceSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.OsPreferenceSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preference_ != nullptr);
    preference_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OsPreferenceSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.PreferenceSpecifics preference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_preference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OsPreferenceSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.OsPreferenceSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.PreferenceSpecifics preference = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_preference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.OsPreferenceSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.OsPreferenceSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OsPreferenceSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.OsPreferenceSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.PreferenceSpecifics preference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::preference(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.OsPreferenceSpecifics)
}

size_t OsPreferenceSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.OsPreferenceSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.PreferenceSpecifics preference = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preference_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OsPreferenceSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OsPreferenceSpecifics*>(
      &from));
}

void OsPreferenceSpecifics::MergeFrom(const OsPreferenceSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.OsPreferenceSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_preference()) {
    mutable_preference()->::sync_pb::PreferenceSpecifics::MergeFrom(from.preference());
  }
}

void OsPreferenceSpecifics::CopyFrom(const OsPreferenceSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.OsPreferenceSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsPreferenceSpecifics::IsInitialized() const {
  return true;
}

void OsPreferenceSpecifics::InternalSwap(OsPreferenceSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preference_, other->preference_);
}

std::string OsPreferenceSpecifics::GetTypeName() const {
  return "sync_pb.OsPreferenceSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::OsPreferenceSpecifics* Arena::CreateMaybeMessage< ::sync_pb::OsPreferenceSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::OsPreferenceSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
