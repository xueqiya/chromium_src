// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_updates_caller_info.proto

#include "get_updates_caller_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace sync_pb {
class GetUpdatesCallerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUpdatesCallerInfo> _instance;
} _GetUpdatesCallerInfo_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_GetUpdatesCallerInfo_get_5fupdates_5fcaller_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GetUpdatesCallerInfo_default_instance_;
    new (ptr) ::sync_pb::GetUpdatesCallerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GetUpdatesCallerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUpdatesCallerInfo_get_5fupdates_5fcaller_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetUpdatesCallerInfo_get_5fupdates_5fcaller_5finfo_2eproto}, {}};

namespace sync_pb {
bool GetUpdatesCallerInfo_GetUpdatesSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GetUpdatesCallerInfo_GetUpdatesSource_strings[13] = {};

static const char GetUpdatesCallerInfo_GetUpdatesSource_names[] =
  "DATATYPE_REFRESH"
  "FIRST_UPDATE"
  "LOCAL"
  "MIGRATION"
  "NEWLY_SUPPORTED_DATATYPE"
  "NEW_CLIENT"
  "NOTIFICATION"
  "PERIODIC"
  "PROGRAMMATIC"
  "RECONFIGURATION"
  "RETRY"
  "SYNC_CYCLE_CONTINUATION"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GetUpdatesCallerInfo_GetUpdatesSource_entries[] = {
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 0, 16}, 11 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 16, 12}, 1 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 28, 5}, 2 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 33, 9}, 8 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 42, 24}, 7 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 66, 10}, 9 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 76, 12}, 3 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 88, 8}, 4 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 96, 12}, 14 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 108, 15}, 10 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 123, 5}, 13 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 128, 23}, 5 },
  { {GetUpdatesCallerInfo_GetUpdatesSource_names + 151, 7}, 0 },
};

static const int GetUpdatesCallerInfo_GetUpdatesSource_entries_by_number[] = {
  12, // 0 -> UNKNOWN
  1, // 1 -> FIRST_UPDATE
  2, // 2 -> LOCAL
  6, // 3 -> NOTIFICATION
  7, // 4 -> PERIODIC
  11, // 5 -> SYNC_CYCLE_CONTINUATION
  4, // 7 -> NEWLY_SUPPORTED_DATATYPE
  3, // 8 -> MIGRATION
  5, // 9 -> NEW_CLIENT
  9, // 10 -> RECONFIGURATION
  0, // 11 -> DATATYPE_REFRESH
  10, // 13 -> RETRY
  8, // 14 -> PROGRAMMATIC
};

const std::string& GetUpdatesCallerInfo_GetUpdatesSource_Name(
    GetUpdatesCallerInfo_GetUpdatesSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GetUpdatesCallerInfo_GetUpdatesSource_entries,
          GetUpdatesCallerInfo_GetUpdatesSource_entries_by_number,
          13, GetUpdatesCallerInfo_GetUpdatesSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GetUpdatesCallerInfo_GetUpdatesSource_entries,
      GetUpdatesCallerInfo_GetUpdatesSource_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GetUpdatesCallerInfo_GetUpdatesSource_strings[idx].get();
}
bool GetUpdatesCallerInfo_GetUpdatesSource_Parse(
    const std::string& name, GetUpdatesCallerInfo_GetUpdatesSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GetUpdatesCallerInfo_GetUpdatesSource_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<GetUpdatesCallerInfo_GetUpdatesSource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::UNKNOWN;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::FIRST_UPDATE;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::LOCAL;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::NOTIFICATION;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::PERIODIC;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::SYNC_CYCLE_CONTINUATION;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::NEWLY_SUPPORTED_DATATYPE;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::MIGRATION;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::NEW_CLIENT;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::RECONFIGURATION;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::DATATYPE_REFRESH;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::RETRY;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::PROGRAMMATIC;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::GetUpdatesSource_MIN;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::GetUpdatesSource_MAX;
constexpr int GetUpdatesCallerInfo::GetUpdatesSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GetUpdatesCallerInfo::InitAsDefaultInstance() {
}
class GetUpdatesCallerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUpdatesCallerInfo>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notifications_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetUpdatesCallerInfo::GetUpdatesCallerInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GetUpdatesCallerInfo)
}
GetUpdatesCallerInfo::GetUpdatesCallerInfo(const GetUpdatesCallerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&notifications_enabled_) -
    reinterpret_cast<char*>(&source_)) + sizeof(notifications_enabled_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetUpdatesCallerInfo)
}

void GetUpdatesCallerInfo::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&notifications_enabled_) -
      reinterpret_cast<char*>(&source_)) + sizeof(notifications_enabled_));
}

GetUpdatesCallerInfo::~GetUpdatesCallerInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.GetUpdatesCallerInfo)
  SharedDtor();
}

void GetUpdatesCallerInfo::SharedDtor() {
}

void GetUpdatesCallerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUpdatesCallerInfo& GetUpdatesCallerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUpdatesCallerInfo_get_5fupdates_5fcaller_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GetUpdatesCallerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetUpdatesCallerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notifications_enabled_) -
        reinterpret_cast<char*>(&source_)) + sizeof(notifications_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetUpdatesCallerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource_IsValid(val))) {
            set_source(static_cast<::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool notifications_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_notifications_enabled(&has_bits);
          notifications_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetUpdatesCallerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GetUpdatesCallerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource_IsValid(value)) {
            set_source(static_cast< ::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notifications_enabled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_notifications_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notifications_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GetUpdatesCallerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GetUpdatesCallerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetUpdatesCallerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GetUpdatesCallerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // optional bool notifications_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->notifications_enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GetUpdatesCallerInfo)
}

size_t GetUpdatesCallerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetUpdatesCallerInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1 [deprecated = true];
  if (has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->source());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool notifications_enabled = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdatesCallerInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetUpdatesCallerInfo*>(
      &from));
}

void GetUpdatesCallerInfo::MergeFrom(const GetUpdatesCallerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetUpdatesCallerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      notifications_enabled_ = from.notifications_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetUpdatesCallerInfo::CopyFrom(const GetUpdatesCallerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetUpdatesCallerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesCallerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetUpdatesCallerInfo::InternalSwap(GetUpdatesCallerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(source_, other->source_);
  swap(notifications_enabled_, other->notifications_enabled_);
}

std::string GetUpdatesCallerInfo::GetTypeName() const {
  return "sync_pb.GetUpdatesCallerInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::GetUpdatesCallerInfo* Arena::CreateMaybeMessage< ::sync_pb::GetUpdatesCallerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GetUpdatesCallerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
