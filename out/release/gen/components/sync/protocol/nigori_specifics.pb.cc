// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nigori_specifics.proto

#include "nigori_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_encryption_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncryptedData_encryption_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nigori_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NigoriKey_nigori_5fspecifics_2eproto;
namespace sync_pb {
class NigoriKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NigoriKey> _instance;
} _NigoriKey_default_instance_;
class NigoriKeyBagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NigoriKeyBag> _instance;
} _NigoriKeyBag_default_instance_;
class NigoriSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NigoriSpecifics> _instance;
} _NigoriSpecifics_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_NigoriKey_nigori_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_NigoriKey_default_instance_;
    new (ptr) ::sync_pb::NigoriKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::NigoriKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NigoriKey_nigori_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NigoriKey_nigori_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_NigoriKeyBag_nigori_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_NigoriKeyBag_default_instance_;
    new (ptr) ::sync_pb::NigoriKeyBag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::NigoriKeyBag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NigoriKeyBag_nigori_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NigoriKeyBag_nigori_5fspecifics_2eproto}, {
      &scc_info_NigoriKey_nigori_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_NigoriSpecifics_nigori_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_NigoriSpecifics_default_instance_;
    new (ptr) ::sync_pb::NigoriSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::NigoriSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NigoriSpecifics_nigori_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NigoriSpecifics_nigori_5fspecifics_2eproto}, {
      &scc_info_EncryptedData_encryption_2eproto.base,}};

namespace sync_pb {
bool NigoriSpecifics_PassphraseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NigoriSpecifics_PassphraseType_strings[6] = {};

static const char NigoriSpecifics_PassphraseType_names[] =
  "CUSTOM_PASSPHRASE"
  "FROZEN_IMPLICIT_PASSPHRASE"
  "IMPLICIT_PASSPHRASE"
  "KEYSTORE_PASSPHRASE"
  "TRUSTED_VAULT_PASSPHRASE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NigoriSpecifics_PassphraseType_entries[] = {
  { {NigoriSpecifics_PassphraseType_names + 0, 17}, 4 },
  { {NigoriSpecifics_PassphraseType_names + 17, 26}, 3 },
  { {NigoriSpecifics_PassphraseType_names + 43, 19}, 1 },
  { {NigoriSpecifics_PassphraseType_names + 62, 19}, 2 },
  { {NigoriSpecifics_PassphraseType_names + 81, 24}, 5 },
  { {NigoriSpecifics_PassphraseType_names + 105, 7}, 0 },
};

static const int NigoriSpecifics_PassphraseType_entries_by_number[] = {
  5, // 0 -> UNKNOWN
  2, // 1 -> IMPLICIT_PASSPHRASE
  3, // 2 -> KEYSTORE_PASSPHRASE
  1, // 3 -> FROZEN_IMPLICIT_PASSPHRASE
  0, // 4 -> CUSTOM_PASSPHRASE
  4, // 5 -> TRUSTED_VAULT_PASSPHRASE
};

const std::string& NigoriSpecifics_PassphraseType_Name(
    NigoriSpecifics_PassphraseType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NigoriSpecifics_PassphraseType_entries,
          NigoriSpecifics_PassphraseType_entries_by_number,
          6, NigoriSpecifics_PassphraseType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NigoriSpecifics_PassphraseType_entries,
      NigoriSpecifics_PassphraseType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NigoriSpecifics_PassphraseType_strings[idx].get();
}
bool NigoriSpecifics_PassphraseType_Parse(
    const std::string& name, NigoriSpecifics_PassphraseType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NigoriSpecifics_PassphraseType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<NigoriSpecifics_PassphraseType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NigoriSpecifics_PassphraseType NigoriSpecifics::UNKNOWN;
constexpr NigoriSpecifics_PassphraseType NigoriSpecifics::IMPLICIT_PASSPHRASE;
constexpr NigoriSpecifics_PassphraseType NigoriSpecifics::KEYSTORE_PASSPHRASE;
constexpr NigoriSpecifics_PassphraseType NigoriSpecifics::FROZEN_IMPLICIT_PASSPHRASE;
constexpr NigoriSpecifics_PassphraseType NigoriSpecifics::CUSTOM_PASSPHRASE;
constexpr NigoriSpecifics_PassphraseType NigoriSpecifics::TRUSTED_VAULT_PASSPHRASE;
constexpr NigoriSpecifics_PassphraseType NigoriSpecifics::PassphraseType_MIN;
constexpr NigoriSpecifics_PassphraseType NigoriSpecifics::PassphraseType_MAX;
constexpr int NigoriSpecifics::PassphraseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool NigoriSpecifics_KeyDerivationMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NigoriSpecifics_KeyDerivationMethod_strings[3] = {};

static const char NigoriSpecifics_KeyDerivationMethod_names[] =
  "PBKDF2_HMAC_SHA1_1003"
  "SCRYPT_8192_8_11"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NigoriSpecifics_KeyDerivationMethod_entries[] = {
  { {NigoriSpecifics_KeyDerivationMethod_names + 0, 21}, 1 },
  { {NigoriSpecifics_KeyDerivationMethod_names + 21, 16}, 2 },
  { {NigoriSpecifics_KeyDerivationMethod_names + 37, 11}, 0 },
};

static const int NigoriSpecifics_KeyDerivationMethod_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  0, // 1 -> PBKDF2_HMAC_SHA1_1003
  1, // 2 -> SCRYPT_8192_8_11
};

const std::string& NigoriSpecifics_KeyDerivationMethod_Name(
    NigoriSpecifics_KeyDerivationMethod value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NigoriSpecifics_KeyDerivationMethod_entries,
          NigoriSpecifics_KeyDerivationMethod_entries_by_number,
          3, NigoriSpecifics_KeyDerivationMethod_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NigoriSpecifics_KeyDerivationMethod_entries,
      NigoriSpecifics_KeyDerivationMethod_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NigoriSpecifics_KeyDerivationMethod_strings[idx].get();
}
bool NigoriSpecifics_KeyDerivationMethod_Parse(
    const std::string& name, NigoriSpecifics_KeyDerivationMethod* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NigoriSpecifics_KeyDerivationMethod_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<NigoriSpecifics_KeyDerivationMethod>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NigoriSpecifics_KeyDerivationMethod NigoriSpecifics::UNSPECIFIED;
constexpr NigoriSpecifics_KeyDerivationMethod NigoriSpecifics::PBKDF2_HMAC_SHA1_1003;
constexpr NigoriSpecifics_KeyDerivationMethod NigoriSpecifics::SCRYPT_8192_8_11;
constexpr NigoriSpecifics_KeyDerivationMethod NigoriSpecifics::KeyDerivationMethod_MIN;
constexpr NigoriSpecifics_KeyDerivationMethod NigoriSpecifics::KeyDerivationMethod_MAX;
constexpr int NigoriSpecifics::KeyDerivationMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void NigoriKey::InitAsDefaultInstance() {
}
class NigoriKey::_Internal {
 public:
  using HasBits = decltype(std::declval<NigoriKey>()._has_bits_);
  static void set_has_deprecated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deprecated_user_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mac_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

NigoriKey::NigoriKey()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.NigoriKey)
}
NigoriKey::NigoriKey(const NigoriKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deprecated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_deprecated_name()) {
    deprecated_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deprecated_name_);
  }
  deprecated_user_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_deprecated_user_key()) {
    deprecated_user_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deprecated_user_key_);
  }
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_key()) {
    encryption_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
  }
  mac_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_mac_key()) {
    mac_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mac_key_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.NigoriKey)
}

void NigoriKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NigoriKey_nigori_5fspecifics_2eproto.base);
  deprecated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deprecated_user_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NigoriKey::~NigoriKey() {
  // @@protoc_insertion_point(destructor:sync_pb.NigoriKey)
  SharedDtor();
}

void NigoriKey::SharedDtor() {
  deprecated_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deprecated_user_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NigoriKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NigoriKey& NigoriKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NigoriKey_nigori_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void NigoriKey::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NigoriKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      deprecated_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      deprecated_user_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      encryption_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      mac_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NigoriKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string deprecated_name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_deprecated_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes deprecated_user_key = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_deprecated_user_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes encryption_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encryption_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes mac_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_mac_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NigoriKey::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.NigoriKey)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deprecated_name = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes deprecated_user_key = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deprecated_user_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encryption_key = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes mac_key = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.NigoriKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.NigoriKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NigoriKey::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.NigoriKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string deprecated_name = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deprecated_name(), output);
  }

  // optional bytes deprecated_user_key = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->deprecated_user_key(), output);
  }

  // optional bytes encryption_key = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encryption_key(), output);
  }

  // optional bytes mac_key = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->mac_key(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.NigoriKey)
}

size_t NigoriKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NigoriKey)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string deprecated_name = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->deprecated_name());
    }

    // optional bytes deprecated_user_key = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->deprecated_user_key());
    }

    // optional bytes encryption_key = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->encryption_key());
    }

    // optional bytes mac_key = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->mac_key());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NigoriKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NigoriKey*>(
      &from));
}

void NigoriKey::MergeFrom(const NigoriKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NigoriKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      deprecated_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deprecated_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      deprecated_user_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deprecated_user_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      encryption_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      mac_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mac_key_);
    }
  }
}

void NigoriKey::CopyFrom(const NigoriKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NigoriKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriKey::IsInitialized() const {
  return true;
}

void NigoriKey::InternalSwap(NigoriKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deprecated_name_.Swap(&other->deprecated_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deprecated_user_key_.Swap(&other->deprecated_user_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encryption_key_.Swap(&other->encryption_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mac_key_.Swap(&other->mac_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string NigoriKey::GetTypeName() const {
  return "sync_pb.NigoriKey";
}


// ===================================================================

void NigoriKeyBag::InitAsDefaultInstance() {
}
class NigoriKeyBag::_Internal {
 public:
  using HasBits = decltype(std::declval<NigoriKeyBag>()._has_bits_);
};

NigoriKeyBag::NigoriKeyBag()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.NigoriKeyBag)
}
NigoriKeyBag::NigoriKeyBag(const NigoriKeyBag& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      key_(from.key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.NigoriKeyBag)
}

void NigoriKeyBag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NigoriKeyBag_nigori_5fspecifics_2eproto.base);
}

NigoriKeyBag::~NigoriKeyBag() {
  // @@protoc_insertion_point(destructor:sync_pb.NigoriKeyBag)
  SharedDtor();
}

void NigoriKeyBag::SharedDtor() {
}

void NigoriKeyBag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NigoriKeyBag& NigoriKeyBag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NigoriKeyBag_nigori_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void NigoriKeyBag::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NigoriKeyBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NigoriKeyBag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sync_pb.NigoriKey key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NigoriKeyBag::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.NigoriKeyBag)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.NigoriKey key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.NigoriKeyBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.NigoriKeyBag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NigoriKeyBag::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.NigoriKeyBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.NigoriKey key = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->key(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.NigoriKeyBag)
}

size_t NigoriKeyBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NigoriKeyBag)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.NigoriKey key = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->key_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->key(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NigoriKeyBag::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NigoriKeyBag*>(
      &from));
}

void NigoriKeyBag::MergeFrom(const NigoriKeyBag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NigoriKeyBag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
}

void NigoriKeyBag::CopyFrom(const NigoriKeyBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NigoriKeyBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriKeyBag::IsInitialized() const {
  return true;
}

void NigoriKeyBag::InternalSwap(NigoriKeyBag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&key_)->InternalSwap(CastToBase(&other->key_));
}

std::string NigoriKeyBag::GetTypeName() const {
  return "sync_pb.NigoriKeyBag";
}


// ===================================================================

void NigoriSpecifics::InitAsDefaultInstance() {
  ::sync_pb::_NigoriSpecifics_default_instance_._instance.get_mutable()->encryption_keybag_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
  ::sync_pb::_NigoriSpecifics_default_instance_._instance.get_mutable()->keystore_decryptor_token_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
}
class NigoriSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<NigoriSpecifics>()._has_bits_);
  static const ::sync_pb::EncryptedData& encryption_keybag(const NigoriSpecifics* msg);
  static void set_has_encryption_keybag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_keybag_is_frozen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_encrypt_bookmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encrypt_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_encrypt_autofill_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_encrypt_autofill(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_encrypt_themes(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_encrypt_typed_urls(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_encrypt_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_encrypt_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_encrypt_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_encrypt_search_engines(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_encrypt_everything(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_encrypt_extension_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_encrypt_app_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_encrypt_app_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_sync_tab_favicons(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_passphrase_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::sync_pb::EncryptedData& keystore_decryptor_token(const NigoriSpecifics* msg);
  static void set_has_keystore_decryptor_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_keystore_migration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_custom_passphrase_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_encrypt_dictionary(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_encrypt_favicon_images(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_encrypt_favicon_tracking(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_encrypt_app_list(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_encrypt_autofill_wallet_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_server_only_was_missing_keystore_migration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_encrypt_arc_package(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_encrypt_printers(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_encrypt_reading_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_custom_passphrase_key_derivation_method(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_custom_passphrase_key_derivation_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encrypt_send_tab_to_self(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_encrypt_web_apps(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_encrypt_os_preferences(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
};

const ::sync_pb::EncryptedData&
NigoriSpecifics::_Internal::encryption_keybag(const NigoriSpecifics* msg) {
  return *msg->encryption_keybag_;
}
const ::sync_pb::EncryptedData&
NigoriSpecifics::_Internal::keystore_decryptor_token(const NigoriSpecifics* msg) {
  return *msg->keystore_decryptor_token_;
}
void NigoriSpecifics::clear_encryption_keybag() {
  if (encryption_keybag_ != nullptr) encryption_keybag_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void NigoriSpecifics::clear_keystore_decryptor_token() {
  if (keystore_decryptor_token_ != nullptr) keystore_decryptor_token_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
NigoriSpecifics::NigoriSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.NigoriSpecifics)
}
NigoriSpecifics::NigoriSpecifics(const NigoriSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_passphrase_key_derivation_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_passphrase_key_derivation_salt()) {
    custom_passphrase_key_derivation_salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_passphrase_key_derivation_salt_);
  }
  if (from.has_encryption_keybag()) {
    encryption_keybag_ = new ::sync_pb::EncryptedData(*from.encryption_keybag_);
  } else {
    encryption_keybag_ = nullptr;
  }
  if (from.has_keystore_decryptor_token()) {
    keystore_decryptor_token_ = new ::sync_pb::EncryptedData(*from.keystore_decryptor_token_);
  } else {
    keystore_decryptor_token_ = nullptr;
  }
  ::memcpy(&keybag_is_frozen_, &from.keybag_is_frozen_,
    static_cast<size_t>(reinterpret_cast<char*>(&passphrase_type_) -
    reinterpret_cast<char*>(&keybag_is_frozen_)) + sizeof(passphrase_type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.NigoriSpecifics)
}

void NigoriSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NigoriSpecifics_nigori_5fspecifics_2eproto.base);
  custom_passphrase_key_derivation_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encryption_keybag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encrypt_os_preferences_) -
      reinterpret_cast<char*>(&encryption_keybag_)) + sizeof(encrypt_os_preferences_));
  passphrase_type_ = 1;
}

NigoriSpecifics::~NigoriSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.NigoriSpecifics)
  SharedDtor();
}

void NigoriSpecifics::SharedDtor() {
  custom_passphrase_key_derivation_salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encryption_keybag_;
  if (this != internal_default_instance()) delete keystore_decryptor_token_;
}

void NigoriSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NigoriSpecifics& NigoriSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NigoriSpecifics_nigori_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void NigoriSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NigoriSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      custom_passphrase_key_derivation_salt_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(encryption_keybag_ != nullptr);
      encryption_keybag_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(keystore_decryptor_token_ != nullptr);
      keystore_decryptor_token_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&keybag_is_frozen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_autofill_) -
        reinterpret_cast<char*>(&keybag_is_frozen_)) + sizeof(encrypt_autofill_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&encrypt_themes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_extension_settings_) -
        reinterpret_cast<char*>(&encrypt_themes_)) + sizeof(encrypt_extension_settings_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&encrypt_app_notifications_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_favicon_tracking_) -
        reinterpret_cast<char*>(&encrypt_app_notifications_)) + sizeof(encrypt_favicon_tracking_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&encrypt_app_list_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_send_tab_to_self_) -
        reinterpret_cast<char*>(&encrypt_app_list_)) + sizeof(encrypt_send_tab_to_self_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&encrypt_web_apps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_os_preferences_) -
        reinterpret_cast<char*>(&encrypt_web_apps_)) + sizeof(encrypt_os_preferences_));
    passphrase_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NigoriSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.EncryptedData encryption_keybag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_encryption_keybag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keybag_is_frozen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_keybag_is_frozen(&_has_bits_);
          keybag_is_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_bookmarks = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_encrypt_bookmarks(&_has_bits_);
          encrypt_bookmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_preferences = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_encrypt_preferences(&_has_bits_);
          encrypt_preferences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_autofill_profile = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_encrypt_autofill_profile(&_has_bits_);
          encrypt_autofill_profile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_autofill = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_encrypt_autofill(&_has_bits_);
          encrypt_autofill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_themes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_encrypt_themes(&_has_bits_);
          encrypt_themes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_typed_urls = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_encrypt_typed_urls(&_has_bits_);
          encrypt_typed_urls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_extensions = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_encrypt_extensions(&_has_bits_);
          encrypt_extensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_sessions = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_encrypt_sessions(&_has_bits_);
          encrypt_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_apps = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_encrypt_apps(&_has_bits_);
          encrypt_apps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_search_engines = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_encrypt_search_engines(&_has_bits_);
          encrypt_search_engines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_everything = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_encrypt_everything(&_has_bits_);
          encrypt_everything_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_extension_settings = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_encrypt_extension_settings(&_has_bits_);
          encrypt_extension_settings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_app_notifications = 26 [deprecated = true];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_encrypt_app_notifications(&_has_bits_);
          encrypt_app_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_app_settings = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_encrypt_app_settings(&_has_bits_);
          encrypt_app_settings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sync_tab_favicons = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_sync_tab_favicons(&_has_bits_);
          sync_tab_favicons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 passphrase_type = 30 [default = 1];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_passphrase_type(&_has_bits_);
          passphrase_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_keystore_decryptor_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 keystore_migration_time = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_keystore_migration_time(&_has_bits_);
          keystore_migration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 custom_passphrase_time = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_custom_passphrase_time(&_has_bits_);
          custom_passphrase_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_dictionary = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_encrypt_dictionary(&_has_bits_);
          encrypt_dictionary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_favicon_images = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_encrypt_favicon_images(&_has_bits_);
          encrypt_favicon_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_favicon_tracking = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_encrypt_favicon_tracking(&_has_bits_);
          encrypt_favicon_tracking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_app_list = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_encrypt_app_list(&_has_bits_);
          encrypt_app_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_autofill_wallet_metadata = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_encrypt_autofill_wallet_metadata(&_has_bits_);
          encrypt_autofill_wallet_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool server_only_was_missing_keystore_migration_time = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_server_only_was_missing_keystore_migration_time(&_has_bits_);
          server_only_was_missing_keystore_migration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_arc_package = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_encrypt_arc_package(&_has_bits_);
          encrypt_arc_package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_printers = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_encrypt_printers(&_has_bits_);
          encrypt_printers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_reading_list = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_encrypt_reading_list(&_has_bits_);
          encrypt_reading_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 custom_passphrase_key_derivation_method = 45 [default = 0];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_custom_passphrase_key_derivation_method(&_has_bits_);
          custom_passphrase_key_derivation_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_passphrase_key_derivation_salt = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_custom_passphrase_key_derivation_salt(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_send_tab_to_self = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_encrypt_send_tab_to_self(&_has_bits_);
          encrypt_send_tab_to_self_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_web_apps = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_encrypt_web_apps(&_has_bits_);
          encrypt_web_apps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encrypt_os_preferences = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_encrypt_os_preferences(&_has_bits_);
          encrypt_os_preferences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NigoriSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.NigoriSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.EncryptedData encryption_keybag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_encryption_keybag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool keybag_is_frozen = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_keybag_is_frozen(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keybag_is_frozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_bookmarks = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_encrypt_bookmarks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_bookmarks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_preferences = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_encrypt_preferences(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_preferences_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_autofill_profile = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_encrypt_autofill_profile(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_autofill_profile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_autofill = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_encrypt_autofill(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_autofill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_themes = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_encrypt_themes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_themes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_typed_urls = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_encrypt_typed_urls(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_typed_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_extensions = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_encrypt_extensions(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_extensions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_sessions = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_encrypt_sessions(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_apps = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_encrypt_apps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_apps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_search_engines = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_encrypt_search_engines(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_search_engines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_everything = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_encrypt_everything(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_everything_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_extension_settings = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_encrypt_extension_settings(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_extension_settings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_app_notifications = 26 [deprecated = true];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_encrypt_app_notifications(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_app_notifications_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_app_settings = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_encrypt_app_settings(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_app_settings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sync_tab_favicons = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_sync_tab_favicons(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_tab_favicons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 passphrase_type = 30 [default = 1];
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_passphrase_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &passphrase_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keystore_decryptor_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 keystore_migration_time = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          _Internal::set_has_keystore_migration_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &keystore_migration_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 custom_passphrase_time = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          _Internal::set_has_custom_passphrase_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &custom_passphrase_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_dictionary = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {
          _Internal::set_has_encrypt_dictionary(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_dictionary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_favicon_images = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          _Internal::set_has_encrypt_favicon_images(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_favicon_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_favicon_tracking = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {
          _Internal::set_has_encrypt_favicon_tracking(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_favicon_tracking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_app_list = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {
          _Internal::set_has_encrypt_app_list(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_app_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_autofill_wallet_metadata = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {
          _Internal::set_has_encrypt_autofill_wallet_metadata(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_autofill_wallet_metadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool server_only_was_missing_keystore_migration_time = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {
          _Internal::set_has_server_only_was_missing_keystore_migration_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_only_was_missing_keystore_migration_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_arc_package = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (328 & 0xFF)) {
          _Internal::set_has_encrypt_arc_package(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_arc_package_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_printers = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {
          _Internal::set_has_encrypt_printers(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_printers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_reading_list = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (344 & 0xFF)) {
          _Internal::set_has_encrypt_reading_list(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_reading_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 custom_passphrase_key_derivation_method = 45 [default = 0];
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (360 & 0xFF)) {
          _Internal::set_has_custom_passphrase_key_derivation_method(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &custom_passphrase_key_derivation_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_passphrase_key_derivation_salt = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_passphrase_key_derivation_salt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_send_tab_to_self = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (376 & 0xFF)) {
          _Internal::set_has_encrypt_send_tab_to_self(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_send_tab_to_self_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_web_apps = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (384 & 0xFF)) {
          _Internal::set_has_encrypt_web_apps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_web_apps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_os_preferences = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (392 & 0xFF)) {
          _Internal::set_has_encrypt_os_preferences(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_os_preferences_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.NigoriSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.NigoriSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NigoriSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.NigoriSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.EncryptedData encryption_keybag = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::encryption_keybag(this), output);
  }

  // optional bool keybag_is_frozen = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->keybag_is_frozen(), output);
  }

  // optional bool encrypt_bookmarks = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->encrypt_bookmarks(), output);
  }

  // optional bool encrypt_preferences = 14;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->encrypt_preferences(), output);
  }

  // optional bool encrypt_autofill_profile = 15;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->encrypt_autofill_profile(), output);
  }

  // optional bool encrypt_autofill = 16;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->encrypt_autofill(), output);
  }

  // optional bool encrypt_themes = 17;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->encrypt_themes(), output);
  }

  // optional bool encrypt_typed_urls = 18;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->encrypt_typed_urls(), output);
  }

  // optional bool encrypt_extensions = 19;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->encrypt_extensions(), output);
  }

  // optional bool encrypt_sessions = 20;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->encrypt_sessions(), output);
  }

  // optional bool encrypt_apps = 21;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->encrypt_apps(), output);
  }

  // optional bool encrypt_search_engines = 22;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->encrypt_search_engines(), output);
  }

  // optional bool encrypt_everything = 24;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->encrypt_everything(), output);
  }

  // optional bool encrypt_extension_settings = 25;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(25, this->encrypt_extension_settings(), output);
  }

  // optional bool encrypt_app_notifications = 26 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->encrypt_app_notifications(), output);
  }

  // optional bool encrypt_app_settings = 27;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(27, this->encrypt_app_settings(), output);
  }

  // optional bool sync_tab_favicons = 29;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(29, this->sync_tab_favicons(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 passphrase_type = 30 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(30, this->passphrase_type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::keystore_decryptor_token(this), output);
  }

  // optional int64 keystore_migration_time = 32;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(32, this->keystore_migration_time(), output);
  }

  // optional int64 custom_passphrase_time = 33;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(33, this->custom_passphrase_time(), output);
  }

  // optional bool encrypt_dictionary = 34;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(34, this->encrypt_dictionary(), output);
  }

  // optional bool encrypt_favicon_images = 35;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(35, this->encrypt_favicon_images(), output);
  }

  // optional bool encrypt_favicon_tracking = 36;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(36, this->encrypt_favicon_tracking(), output);
  }

  // optional bool encrypt_app_list = 38;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(38, this->encrypt_app_list(), output);
  }

  // optional bool encrypt_autofill_wallet_metadata = 39;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(39, this->encrypt_autofill_wallet_metadata(), output);
  }

  // optional bool server_only_was_missing_keystore_migration_time = 40;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(40, this->server_only_was_missing_keystore_migration_time(), output);
  }

  // optional bool encrypt_arc_package = 41;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(41, this->encrypt_arc_package(), output);
  }

  // optional bool encrypt_printers = 42;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(42, this->encrypt_printers(), output);
  }

  // optional bool encrypt_reading_list = 43;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(43, this->encrypt_reading_list(), output);
  }

  // optional int32 custom_passphrase_key_derivation_method = 45 [default = 0];
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(45, this->custom_passphrase_key_derivation_method(), output);
  }

  // optional string custom_passphrase_key_derivation_salt = 46;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->custom_passphrase_key_derivation_salt(), output);
  }

  // optional bool encrypt_send_tab_to_self = 47;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(47, this->encrypt_send_tab_to_self(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool encrypt_web_apps = 48;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(48, this->encrypt_web_apps(), output);
  }

  // optional bool encrypt_os_preferences = 49;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(49, this->encrypt_os_preferences(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.NigoriSpecifics)
}

size_t NigoriSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NigoriSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string custom_passphrase_key_derivation_salt = 46;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->custom_passphrase_key_derivation_salt());
    }

    // optional .sync_pb.EncryptedData encryption_keybag = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encryption_keybag_);
    }

    // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keystore_decryptor_token_);
    }

    // optional bool keybag_is_frozen = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_bookmarks = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_preferences = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_autofill_profile = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_autofill = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool encrypt_themes = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_typed_urls = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_extensions = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_sessions = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_apps = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_search_engines = 22;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_everything = 24;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_extension_settings = 25;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool encrypt_app_notifications = 26 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_app_settings = 27;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool sync_tab_favicons = 29;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int64 keystore_migration_time = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->keystore_migration_time());
    }

    // optional int64 custom_passphrase_time = 33;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->custom_passphrase_time());
    }

    // optional bool encrypt_dictionary = 34;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_favicon_images = 35;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_favicon_tracking = 36;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool encrypt_app_list = 38;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_autofill_wallet_metadata = 39;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool server_only_was_missing_keystore_migration_time = 40;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_arc_package = 41;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_printers = 42;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional int32 custom_passphrase_key_derivation_method = 45 [default = 0];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->custom_passphrase_key_derivation_method());
    }

    // optional bool encrypt_reading_list = 43;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_send_tab_to_self = 47;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional bool encrypt_web_apps = 48;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_os_preferences = 49;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional int32 passphrase_type = 30 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->passphrase_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NigoriSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NigoriSpecifics*>(
      &from));
}

void NigoriSpecifics::MergeFrom(const NigoriSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NigoriSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      custom_passphrase_key_derivation_salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_passphrase_key_derivation_salt_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_encryption_keybag()->::sync_pb::EncryptedData::MergeFrom(from.encryption_keybag());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_keystore_decryptor_token()->::sync_pb::EncryptedData::MergeFrom(from.keystore_decryptor_token());
    }
    if (cached_has_bits & 0x00000008u) {
      keybag_is_frozen_ = from.keybag_is_frozen_;
    }
    if (cached_has_bits & 0x00000010u) {
      encrypt_bookmarks_ = from.encrypt_bookmarks_;
    }
    if (cached_has_bits & 0x00000020u) {
      encrypt_preferences_ = from.encrypt_preferences_;
    }
    if (cached_has_bits & 0x00000040u) {
      encrypt_autofill_profile_ = from.encrypt_autofill_profile_;
    }
    if (cached_has_bits & 0x00000080u) {
      encrypt_autofill_ = from.encrypt_autofill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      encrypt_themes_ = from.encrypt_themes_;
    }
    if (cached_has_bits & 0x00000200u) {
      encrypt_typed_urls_ = from.encrypt_typed_urls_;
    }
    if (cached_has_bits & 0x00000400u) {
      encrypt_extensions_ = from.encrypt_extensions_;
    }
    if (cached_has_bits & 0x00000800u) {
      encrypt_sessions_ = from.encrypt_sessions_;
    }
    if (cached_has_bits & 0x00001000u) {
      encrypt_apps_ = from.encrypt_apps_;
    }
    if (cached_has_bits & 0x00002000u) {
      encrypt_search_engines_ = from.encrypt_search_engines_;
    }
    if (cached_has_bits & 0x00004000u) {
      encrypt_everything_ = from.encrypt_everything_;
    }
    if (cached_has_bits & 0x00008000u) {
      encrypt_extension_settings_ = from.encrypt_extension_settings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      encrypt_app_notifications_ = from.encrypt_app_notifications_;
    }
    if (cached_has_bits & 0x00020000u) {
      encrypt_app_settings_ = from.encrypt_app_settings_;
    }
    if (cached_has_bits & 0x00040000u) {
      sync_tab_favicons_ = from.sync_tab_favicons_;
    }
    if (cached_has_bits & 0x00080000u) {
      keystore_migration_time_ = from.keystore_migration_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      custom_passphrase_time_ = from.custom_passphrase_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      encrypt_dictionary_ = from.encrypt_dictionary_;
    }
    if (cached_has_bits & 0x00400000u) {
      encrypt_favicon_images_ = from.encrypt_favicon_images_;
    }
    if (cached_has_bits & 0x00800000u) {
      encrypt_favicon_tracking_ = from.encrypt_favicon_tracking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      encrypt_app_list_ = from.encrypt_app_list_;
    }
    if (cached_has_bits & 0x02000000u) {
      encrypt_autofill_wallet_metadata_ = from.encrypt_autofill_wallet_metadata_;
    }
    if (cached_has_bits & 0x04000000u) {
      server_only_was_missing_keystore_migration_time_ = from.server_only_was_missing_keystore_migration_time_;
    }
    if (cached_has_bits & 0x08000000u) {
      encrypt_arc_package_ = from.encrypt_arc_package_;
    }
    if (cached_has_bits & 0x10000000u) {
      encrypt_printers_ = from.encrypt_printers_;
    }
    if (cached_has_bits & 0x20000000u) {
      custom_passphrase_key_derivation_method_ = from.custom_passphrase_key_derivation_method_;
    }
    if (cached_has_bits & 0x40000000u) {
      encrypt_reading_list_ = from.encrypt_reading_list_;
    }
    if (cached_has_bits & 0x80000000u) {
      encrypt_send_tab_to_self_ = from.encrypt_send_tab_to_self_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      encrypt_web_apps_ = from.encrypt_web_apps_;
    }
    if (cached_has_bits & 0x00000002u) {
      encrypt_os_preferences_ = from.encrypt_os_preferences_;
    }
    if (cached_has_bits & 0x00000004u) {
      passphrase_type_ = from.passphrase_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void NigoriSpecifics::CopyFrom(const NigoriSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NigoriSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriSpecifics::IsInitialized() const {
  return true;
}

void NigoriSpecifics::InternalSwap(NigoriSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  custom_passphrase_key_derivation_salt_.Swap(&other->custom_passphrase_key_derivation_salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encryption_keybag_, other->encryption_keybag_);
  swap(keystore_decryptor_token_, other->keystore_decryptor_token_);
  swap(keybag_is_frozen_, other->keybag_is_frozen_);
  swap(encrypt_bookmarks_, other->encrypt_bookmarks_);
  swap(encrypt_preferences_, other->encrypt_preferences_);
  swap(encrypt_autofill_profile_, other->encrypt_autofill_profile_);
  swap(encrypt_autofill_, other->encrypt_autofill_);
  swap(encrypt_themes_, other->encrypt_themes_);
  swap(encrypt_typed_urls_, other->encrypt_typed_urls_);
  swap(encrypt_extensions_, other->encrypt_extensions_);
  swap(encrypt_sessions_, other->encrypt_sessions_);
  swap(encrypt_apps_, other->encrypt_apps_);
  swap(encrypt_search_engines_, other->encrypt_search_engines_);
  swap(encrypt_everything_, other->encrypt_everything_);
  swap(encrypt_extension_settings_, other->encrypt_extension_settings_);
  swap(encrypt_app_notifications_, other->encrypt_app_notifications_);
  swap(encrypt_app_settings_, other->encrypt_app_settings_);
  swap(sync_tab_favicons_, other->sync_tab_favicons_);
  swap(keystore_migration_time_, other->keystore_migration_time_);
  swap(custom_passphrase_time_, other->custom_passphrase_time_);
  swap(encrypt_dictionary_, other->encrypt_dictionary_);
  swap(encrypt_favicon_images_, other->encrypt_favicon_images_);
  swap(encrypt_favicon_tracking_, other->encrypt_favicon_tracking_);
  swap(encrypt_app_list_, other->encrypt_app_list_);
  swap(encrypt_autofill_wallet_metadata_, other->encrypt_autofill_wallet_metadata_);
  swap(server_only_was_missing_keystore_migration_time_, other->server_only_was_missing_keystore_migration_time_);
  swap(encrypt_arc_package_, other->encrypt_arc_package_);
  swap(encrypt_printers_, other->encrypt_printers_);
  swap(custom_passphrase_key_derivation_method_, other->custom_passphrase_key_derivation_method_);
  swap(encrypt_reading_list_, other->encrypt_reading_list_);
  swap(encrypt_send_tab_to_self_, other->encrypt_send_tab_to_self_);
  swap(encrypt_web_apps_, other->encrypt_web_apps_);
  swap(encrypt_os_preferences_, other->encrypt_os_preferences_);
  swap(passphrase_type_, other->passphrase_type_);
}

std::string NigoriSpecifics::GetTypeName() const {
  return "sync_pb.NigoriSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::NigoriKey* Arena::CreateMaybeMessage< ::sync_pb::NigoriKey >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::NigoriKey >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::NigoriKeyBag* Arena::CreateMaybeMessage< ::sync_pb::NigoriKeyBag >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::NigoriKeyBag >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::NigoriSpecifics* Arena::CreateMaybeMessage< ::sync_pb::NigoriSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::NigoriSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
