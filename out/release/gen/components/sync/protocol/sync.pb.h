// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "app_list_specifics.pb.h"
#include "app_notification_specifics.pb.h"
#include "app_setting_specifics.pb.h"
#include "app_specifics.pb.h"
#include "arc_package_specifics.pb.h"
#include "autofill_specifics.pb.h"
#include "bookmark_specifics.pb.h"
#include "client_commands.pb.h"
#include "client_debug_info.pb.h"
#include "device_info_specifics.pb.h"
#include "dictionary_specifics.pb.h"
#include "encryption.pb.h"
#include "experiments_specifics.pb.h"
#include "extension_setting_specifics.pb.h"
#include "extension_specifics.pb.h"
#include "favicon_image_specifics.pb.h"
#include "favicon_tracking_specifics.pb.h"
#include "get_updates_caller_info.pb.h"
#include "history_delete_directive_specifics.pb.h"
#include "managed_user_setting_specifics.pb.h"
#include "managed_user_shared_setting_specifics.pb.h"
#include "managed_user_specifics.pb.h"
#include "managed_user_whitelist_specifics.pb.h"
#include "nigori_specifics.pb.h"
#include "os_preference_specifics.pb.h"
#include "os_priority_preference_specifics.pb.h"
#include "password_specifics.pb.h"
#include "preference_specifics.pb.h"
#include "printer_specifics.pb.h"
#include "priority_preference_specifics.pb.h"
#include "reading_list_specifics.pb.h"
#include "search_engine_specifics.pb.h"
#include "security_event_specifics.pb.h"
#include "send_tab_to_self_specifics.pb.h"
#include "session_specifics.pb.h"
#include "sharing_message_specifics.pb.h"
#include "sync_enums.pb.h"
#include "synced_notification_app_info_specifics.pb.h"
#include "synced_notification_specifics.pb.h"
#include "theme_specifics.pb.h"
#include "typed_url_specifics.pb.h"
#include "unique_position.pb.h"
#include "user_consent_specifics.pb.h"
#include "user_event_specifics.pb.h"
#include "web_app_specifics.pb.h"
#include "wifi_configuration_specifics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sync_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class ChipBag;
class ChipBagDefaultTypeInternal;
extern ChipBagDefaultTypeInternal _ChipBag_default_instance_;
class ChromiumExtensionsActivity;
class ChromiumExtensionsActivityDefaultTypeInternal;
extern ChromiumExtensionsActivityDefaultTypeInternal _ChromiumExtensionsActivity_default_instance_;
class ClearServerDataMessage;
class ClearServerDataMessageDefaultTypeInternal;
extern ClearServerDataMessageDefaultTypeInternal _ClearServerDataMessage_default_instance_;
class ClearServerDataResponse;
class ClearServerDataResponseDefaultTypeInternal;
extern ClearServerDataResponseDefaultTypeInternal _ClearServerDataResponse_default_instance_;
class ClientConfigParams;
class ClientConfigParamsDefaultTypeInternal;
extern ClientConfigParamsDefaultTypeInternal _ClientConfigParams_default_instance_;
class ClientStatus;
class ClientStatusDefaultTypeInternal;
extern ClientStatusDefaultTypeInternal _ClientStatus_default_instance_;
class ClientToServerMessage;
class ClientToServerMessageDefaultTypeInternal;
extern ClientToServerMessageDefaultTypeInternal _ClientToServerMessage_default_instance_;
class ClientToServerResponse;
class ClientToServerResponseDefaultTypeInternal;
extern ClientToServerResponseDefaultTypeInternal _ClientToServerResponse_default_instance_;
class ClientToServerResponse_Error;
class ClientToServerResponse_ErrorDefaultTypeInternal;
extern ClientToServerResponse_ErrorDefaultTypeInternal _ClientToServerResponse_Error_default_instance_;
class CommitMessage;
class CommitMessageDefaultTypeInternal;
extern CommitMessageDefaultTypeInternal _CommitMessage_default_instance_;
class CommitResponse;
class CommitResponseDefaultTypeInternal;
extern CommitResponseDefaultTypeInternal _CommitResponse_default_instance_;
class CommitResponse_EntryResponse;
class CommitResponse_EntryResponseDefaultTypeInternal;
extern CommitResponse_EntryResponseDefaultTypeInternal _CommitResponse_EntryResponse_default_instance_;
class CommitResponse_EntryResponse_DatatypeSpecificError;
class CommitResponse_EntryResponse_DatatypeSpecificErrorDefaultTypeInternal;
extern CommitResponse_EntryResponse_DatatypeSpecificErrorDefaultTypeInternal _CommitResponse_EntryResponse_DatatypeSpecificError_default_instance_;
class DataTypeContext;
class DataTypeContextDefaultTypeInternal;
extern DataTypeContextDefaultTypeInternal _DataTypeContext_default_instance_;
class DataTypeProgressMarker;
class DataTypeProgressMarkerDefaultTypeInternal;
extern DataTypeProgressMarkerDefaultTypeInternal _DataTypeProgressMarker_default_instance_;
class EntitySpecifics;
class EntitySpecificsDefaultTypeInternal;
extern EntitySpecificsDefaultTypeInternal _EntitySpecifics_default_instance_;
class EventRequest;
class EventRequestDefaultTypeInternal;
extern EventRequestDefaultTypeInternal _EventRequest_default_instance_;
class EventResponse;
class EventResponseDefaultTypeInternal;
extern EventResponseDefaultTypeInternal _EventResponse_default_instance_;
class GarbageCollectionDirective;
class GarbageCollectionDirectiveDefaultTypeInternal;
extern GarbageCollectionDirectiveDefaultTypeInternal _GarbageCollectionDirective_default_instance_;
class GetCrashInfoRequest;
class GetCrashInfoRequestDefaultTypeInternal;
extern GetCrashInfoRequestDefaultTypeInternal _GetCrashInfoRequest_default_instance_;
class GetCrashInfoResponse;
class GetCrashInfoResponseDefaultTypeInternal;
extern GetCrashInfoResponseDefaultTypeInternal _GetCrashInfoResponse_default_instance_;
class GetUpdateTriggers;
class GetUpdateTriggersDefaultTypeInternal;
extern GetUpdateTriggersDefaultTypeInternal _GetUpdateTriggers_default_instance_;
class GetUpdatesMessage;
class GetUpdatesMessageDefaultTypeInternal;
extern GetUpdatesMessageDefaultTypeInternal _GetUpdatesMessage_default_instance_;
class GetUpdatesResponse;
class GetUpdatesResponseDefaultTypeInternal;
extern GetUpdatesResponseDefaultTypeInternal _GetUpdatesResponse_default_instance_;
class ProfilingData;
class ProfilingDataDefaultTypeInternal;
extern ProfilingDataDefaultTypeInternal _ProfilingData_default_instance_;
class SyncDisabledEvent;
class SyncDisabledEventDefaultTypeInternal;
extern SyncDisabledEventDefaultTypeInternal _SyncDisabledEvent_default_instance_;
class SyncEntity;
class SyncEntityDefaultTypeInternal;
extern SyncEntityDefaultTypeInternal _SyncEntity_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::ChipBag* Arena::CreateMaybeMessage<::sync_pb::ChipBag>(Arena*);
template<> ::sync_pb::ChromiumExtensionsActivity* Arena::CreateMaybeMessage<::sync_pb::ChromiumExtensionsActivity>(Arena*);
template<> ::sync_pb::ClearServerDataMessage* Arena::CreateMaybeMessage<::sync_pb::ClearServerDataMessage>(Arena*);
template<> ::sync_pb::ClearServerDataResponse* Arena::CreateMaybeMessage<::sync_pb::ClearServerDataResponse>(Arena*);
template<> ::sync_pb::ClientConfigParams* Arena::CreateMaybeMessage<::sync_pb::ClientConfigParams>(Arena*);
template<> ::sync_pb::ClientStatus* Arena::CreateMaybeMessage<::sync_pb::ClientStatus>(Arena*);
template<> ::sync_pb::ClientToServerMessage* Arena::CreateMaybeMessage<::sync_pb::ClientToServerMessage>(Arena*);
template<> ::sync_pb::ClientToServerResponse* Arena::CreateMaybeMessage<::sync_pb::ClientToServerResponse>(Arena*);
template<> ::sync_pb::ClientToServerResponse_Error* Arena::CreateMaybeMessage<::sync_pb::ClientToServerResponse_Error>(Arena*);
template<> ::sync_pb::CommitMessage* Arena::CreateMaybeMessage<::sync_pb::CommitMessage>(Arena*);
template<> ::sync_pb::CommitResponse* Arena::CreateMaybeMessage<::sync_pb::CommitResponse>(Arena*);
template<> ::sync_pb::CommitResponse_EntryResponse* Arena::CreateMaybeMessage<::sync_pb::CommitResponse_EntryResponse>(Arena*);
template<> ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* Arena::CreateMaybeMessage<::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError>(Arena*);
template<> ::sync_pb::DataTypeContext* Arena::CreateMaybeMessage<::sync_pb::DataTypeContext>(Arena*);
template<> ::sync_pb::DataTypeProgressMarker* Arena::CreateMaybeMessage<::sync_pb::DataTypeProgressMarker>(Arena*);
template<> ::sync_pb::EntitySpecifics* Arena::CreateMaybeMessage<::sync_pb::EntitySpecifics>(Arena*);
template<> ::sync_pb::EventRequest* Arena::CreateMaybeMessage<::sync_pb::EventRequest>(Arena*);
template<> ::sync_pb::EventResponse* Arena::CreateMaybeMessage<::sync_pb::EventResponse>(Arena*);
template<> ::sync_pb::GarbageCollectionDirective* Arena::CreateMaybeMessage<::sync_pb::GarbageCollectionDirective>(Arena*);
template<> ::sync_pb::GetCrashInfoRequest* Arena::CreateMaybeMessage<::sync_pb::GetCrashInfoRequest>(Arena*);
template<> ::sync_pb::GetCrashInfoResponse* Arena::CreateMaybeMessage<::sync_pb::GetCrashInfoResponse>(Arena*);
template<> ::sync_pb::GetUpdateTriggers* Arena::CreateMaybeMessage<::sync_pb::GetUpdateTriggers>(Arena*);
template<> ::sync_pb::GetUpdatesMessage* Arena::CreateMaybeMessage<::sync_pb::GetUpdatesMessage>(Arena*);
template<> ::sync_pb::GetUpdatesResponse* Arena::CreateMaybeMessage<::sync_pb::GetUpdatesResponse>(Arena*);
template<> ::sync_pb::ProfilingData* Arena::CreateMaybeMessage<::sync_pb::ProfilingData>(Arena*);
template<> ::sync_pb::SyncDisabledEvent* Arena::CreateMaybeMessage<::sync_pb::SyncDisabledEvent>(Arena*);
template<> ::sync_pb::SyncEntity* Arena::CreateMaybeMessage<::sync_pb::SyncEntity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum GarbageCollectionDirective_Type : int {
  GarbageCollectionDirective_Type_UNKNOWN = 0,
  GarbageCollectionDirective_Type_VERSION_WATERMARK = 1,
  GarbageCollectionDirective_Type_AGE_WATERMARK = 2,
  GarbageCollectionDirective_Type_DEPRECATED_MAX_ITEM_COUNT PROTOBUF_DEPRECATED = 3
};
bool GarbageCollectionDirective_Type_IsValid(int value);
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective_Type_Type_MIN = GarbageCollectionDirective_Type_UNKNOWN;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective_Type_Type_MAX = GarbageCollectionDirective_Type_DEPRECATED_MAX_ITEM_COUNT;
constexpr int GarbageCollectionDirective_Type_Type_ARRAYSIZE = GarbageCollectionDirective_Type_Type_MAX + 1;

const std::string& GarbageCollectionDirective_Type_Name(GarbageCollectionDirective_Type value);
template<typename T>
inline const std::string& GarbageCollectionDirective_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GarbageCollectionDirective_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GarbageCollectionDirective_Type_Name.");
  return GarbageCollectionDirective_Type_Name(static_cast<GarbageCollectionDirective_Type>(enum_t_value));
}
bool GarbageCollectionDirective_Type_Parse(
    const std::string& name, GarbageCollectionDirective_Type* value);
enum ClientToServerMessage_Contents : int {
  ClientToServerMessage_Contents_COMMIT = 1,
  ClientToServerMessage_Contents_GET_UPDATES = 2,
  ClientToServerMessage_Contents_DEPRECATED_3 = 3,
  ClientToServerMessage_Contents_DEPRECATED_4 = 4,
  ClientToServerMessage_Contents_CLEAR_SERVER_DATA = 5
};
bool ClientToServerMessage_Contents_IsValid(int value);
constexpr ClientToServerMessage_Contents ClientToServerMessage_Contents_Contents_MIN = ClientToServerMessage_Contents_COMMIT;
constexpr ClientToServerMessage_Contents ClientToServerMessage_Contents_Contents_MAX = ClientToServerMessage_Contents_CLEAR_SERVER_DATA;
constexpr int ClientToServerMessage_Contents_Contents_ARRAYSIZE = ClientToServerMessage_Contents_Contents_MAX + 1;

const std::string& ClientToServerMessage_Contents_Name(ClientToServerMessage_Contents value);
template<typename T>
inline const std::string& ClientToServerMessage_Contents_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientToServerMessage_Contents>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientToServerMessage_Contents_Name.");
  return ClientToServerMessage_Contents_Name(static_cast<ClientToServerMessage_Contents>(enum_t_value));
}
bool ClientToServerMessage_Contents_Parse(
    const std::string& name, ClientToServerMessage_Contents* value);
enum CommitResponse_ResponseType : int {
  CommitResponse_ResponseType_SUCCESS = 1,
  CommitResponse_ResponseType_CONFLICT = 2,
  CommitResponse_ResponseType_RETRY = 3,
  CommitResponse_ResponseType_INVALID_MESSAGE = 4,
  CommitResponse_ResponseType_OVER_QUOTA = 5,
  CommitResponse_ResponseType_TRANSIENT_ERROR = 6
};
bool CommitResponse_ResponseType_IsValid(int value);
constexpr CommitResponse_ResponseType CommitResponse_ResponseType_ResponseType_MIN = CommitResponse_ResponseType_SUCCESS;
constexpr CommitResponse_ResponseType CommitResponse_ResponseType_ResponseType_MAX = CommitResponse_ResponseType_TRANSIENT_ERROR;
constexpr int CommitResponse_ResponseType_ResponseType_ARRAYSIZE = CommitResponse_ResponseType_ResponseType_MAX + 1;

const std::string& CommitResponse_ResponseType_Name(CommitResponse_ResponseType value);
template<typename T>
inline const std::string& CommitResponse_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommitResponse_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommitResponse_ResponseType_Name.");
  return CommitResponse_ResponseType_Name(static_cast<CommitResponse_ResponseType>(enum_t_value));
}
bool CommitResponse_ResponseType_Parse(
    const std::string& name, CommitResponse_ResponseType* value);
// ===================================================================

class ProfilingData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ProfilingData) */ {
 public:
  ProfilingData();
  virtual ~ProfilingData();

  ProfilingData(const ProfilingData& from);
  ProfilingData(ProfilingData&& from) noexcept
    : ProfilingData() {
    *this = ::std::move(from);
  }

  inline ProfilingData& operator=(const ProfilingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilingData& operator=(ProfilingData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProfilingData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfilingData* internal_default_instance() {
    return reinterpret_cast<const ProfilingData*>(
               &_ProfilingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProfilingData& a, ProfilingData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilingData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilingData* New() const final {
    return CreateMaybeMessage<ProfilingData>(nullptr);
  }

  ProfilingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilingData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProfilingData& from);
  void MergeFrom(const ProfilingData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfilingData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ProfilingData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaDataWriteTimeFieldNumber = 1,
    kFileDataWriteTimeFieldNumber = 2,
    kUserLookupTimeFieldNumber = 3,
    kMetaDataReadTimeFieldNumber = 4,
    kFileDataReadTimeFieldNumber = 5,
    kTotalRequestTimeFieldNumber = 6,
  };
  // optional int64 meta_data_write_time = 1;
  bool has_meta_data_write_time() const;
  void clear_meta_data_write_time();
  ::PROTOBUF_NAMESPACE_ID::int64 meta_data_write_time() const;
  void set_meta_data_write_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 file_data_write_time = 2;
  bool has_file_data_write_time() const;
  void clear_file_data_write_time();
  ::PROTOBUF_NAMESPACE_ID::int64 file_data_write_time() const;
  void set_file_data_write_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 user_lookup_time = 3;
  bool has_user_lookup_time() const;
  void clear_user_lookup_time();
  ::PROTOBUF_NAMESPACE_ID::int64 user_lookup_time() const;
  void set_user_lookup_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 meta_data_read_time = 4;
  bool has_meta_data_read_time() const;
  void clear_meta_data_read_time();
  ::PROTOBUF_NAMESPACE_ID::int64 meta_data_read_time() const;
  void set_meta_data_read_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 file_data_read_time = 5;
  bool has_file_data_read_time() const;
  void clear_file_data_read_time();
  ::PROTOBUF_NAMESPACE_ID::int64 file_data_read_time() const;
  void set_file_data_read_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_request_time = 6;
  bool has_total_request_time() const;
  void clear_total_request_time();
  ::PROTOBUF_NAMESPACE_ID::int64 total_request_time() const;
  void set_total_request_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.ProfilingData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 meta_data_write_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_data_write_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_lookup_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 meta_data_read_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_data_read_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_request_time_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class EntitySpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.EntitySpecifics) */ {
 public:
  EntitySpecifics();
  virtual ~EntitySpecifics();

  EntitySpecifics(const EntitySpecifics& from);
  EntitySpecifics(EntitySpecifics&& from) noexcept
    : EntitySpecifics() {
    *this = ::std::move(from);
  }

  inline EntitySpecifics& operator=(const EntitySpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntitySpecifics& operator=(EntitySpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EntitySpecifics& default_instance();

  enum SpecificsVariantCase {
    kAutofill = 31729,
    kBookmark = 32904,
    kPreference = 37702,
    kTypedUrl = 40781,
    kTheme = 41210,
    kAppNotification = 45184,
    kPassword = 45873,
    kNigori = 47745,
    kExtension = 48119,
    kApp = 48364,
    kSession = 50119,
    kAutofillProfile = 63951,
    kSearchEngine = 88610,
    kExtensionSetting = 96159,
    kAppSetting = 103656,
    kHistoryDeleteDirective = 150251,
    kSyncedNotification = 153108,
    kSyncedNotificationAppInfo = 235816,
    kDeviceInfo = 154522,
    kExperiments = 161496,
    kPriorityPreference = 163425,
    kDictionary = 170540,
    kFaviconTracking = 181534,
    kFaviconImage = 182019,
    kManagedUserSetting = 186662,
    kManagedUser = 194582,
    kManagedUserSharedSetting = 202026,
    kManagedUserWhitelist = 306060,
    kAppList = 229170,
    kAutofillWallet = 306270,
    kWalletMetadata = 330441,
    kArcPackage = 340906,
    kPrinter = 410745,
    kReadingList = 411028,
    kUserEvent = 455206,
    kUserConsent = 556014,
    kSendTabToSelf = 601980,
    kSecurityEvent = 600372,
    kWebApp = 673225,
    kWifiConfiguration = 662827,
    kOsPreference = 702141,
    kOsPriorityPreference = 703915,
    kSharingMessage = 728866,
    SPECIFICS_VARIANT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntitySpecifics* internal_default_instance() {
    return reinterpret_cast<const EntitySpecifics*>(
               &_EntitySpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EntitySpecifics& a, EntitySpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(EntitySpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntitySpecifics* New() const final {
    return CreateMaybeMessage<EntitySpecifics>(nullptr);
  }

  EntitySpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntitySpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EntitySpecifics& from);
  void MergeFrom(const EntitySpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntitySpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.EntitySpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedFieldNumber = 1,
    kAutofillFieldNumber = 31729,
    kBookmarkFieldNumber = 32904,
    kPreferenceFieldNumber = 37702,
    kTypedUrlFieldNumber = 40781,
    kThemeFieldNumber = 41210,
    kAppNotificationFieldNumber = 45184,
    kPasswordFieldNumber = 45873,
    kNigoriFieldNumber = 47745,
    kExtensionFieldNumber = 48119,
    kAppFieldNumber = 48364,
    kSessionFieldNumber = 50119,
    kAutofillProfileFieldNumber = 63951,
    kSearchEngineFieldNumber = 88610,
    kExtensionSettingFieldNumber = 96159,
    kAppSettingFieldNumber = 103656,
    kHistoryDeleteDirectiveFieldNumber = 150251,
    kSyncedNotificationFieldNumber = 153108,
    kSyncedNotificationAppInfoFieldNumber = 235816,
    kDeviceInfoFieldNumber = 154522,
    kExperimentsFieldNumber = 161496,
    kPriorityPreferenceFieldNumber = 163425,
    kDictionaryFieldNumber = 170540,
    kFaviconTrackingFieldNumber = 181534,
    kFaviconImageFieldNumber = 182019,
    kManagedUserSettingFieldNumber = 186662,
    kManagedUserFieldNumber = 194582,
    kManagedUserSharedSettingFieldNumber = 202026,
    kManagedUserWhitelistFieldNumber = 306060,
    kAppListFieldNumber = 229170,
    kAutofillWalletFieldNumber = 306270,
    kWalletMetadataFieldNumber = 330441,
    kArcPackageFieldNumber = 340906,
    kPrinterFieldNumber = 410745,
    kReadingListFieldNumber = 411028,
    kUserEventFieldNumber = 455206,
    kUserConsentFieldNumber = 556014,
    kSendTabToSelfFieldNumber = 601980,
    kSecurityEventFieldNumber = 600372,
    kWebAppFieldNumber = 673225,
    kWifiConfigurationFieldNumber = 662827,
    kOsPreferenceFieldNumber = 702141,
    kOsPriorityPreferenceFieldNumber = 703915,
    kSharingMessageFieldNumber = 728866,
  };
  // optional .sync_pb.EncryptedData encrypted = 1;
  bool has_encrypted() const;
  void clear_encrypted();
  const ::sync_pb::EncryptedData& encrypted() const;
  ::sync_pb::EncryptedData* release_encrypted();
  ::sync_pb::EncryptedData* mutable_encrypted();
  void set_allocated_encrypted(::sync_pb::EncryptedData* encrypted);

  // optional .sync_pb.AutofillSpecifics autofill = 31729;
  bool has_autofill() const;
  void clear_autofill();
  const ::sync_pb::AutofillSpecifics& autofill() const;
  ::sync_pb::AutofillSpecifics* release_autofill();
  ::sync_pb::AutofillSpecifics* mutable_autofill();
  void set_allocated_autofill(::sync_pb::AutofillSpecifics* autofill);

  // optional .sync_pb.BookmarkSpecifics bookmark = 32904;
  bool has_bookmark() const;
  void clear_bookmark();
  const ::sync_pb::BookmarkSpecifics& bookmark() const;
  ::sync_pb::BookmarkSpecifics* release_bookmark();
  ::sync_pb::BookmarkSpecifics* mutable_bookmark();
  void set_allocated_bookmark(::sync_pb::BookmarkSpecifics* bookmark);

  // optional .sync_pb.PreferenceSpecifics preference = 37702;
  bool has_preference() const;
  void clear_preference();
  const ::sync_pb::PreferenceSpecifics& preference() const;
  ::sync_pb::PreferenceSpecifics* release_preference();
  ::sync_pb::PreferenceSpecifics* mutable_preference();
  void set_allocated_preference(::sync_pb::PreferenceSpecifics* preference);

  // optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
  bool has_typed_url() const;
  void clear_typed_url();
  const ::sync_pb::TypedUrlSpecifics& typed_url() const;
  ::sync_pb::TypedUrlSpecifics* release_typed_url();
  ::sync_pb::TypedUrlSpecifics* mutable_typed_url();
  void set_allocated_typed_url(::sync_pb::TypedUrlSpecifics* typed_url);

  // optional .sync_pb.ThemeSpecifics theme = 41210;
  bool has_theme() const;
  void clear_theme();
  const ::sync_pb::ThemeSpecifics& theme() const;
  ::sync_pb::ThemeSpecifics* release_theme();
  ::sync_pb::ThemeSpecifics* mutable_theme();
  void set_allocated_theme(::sync_pb::ThemeSpecifics* theme);

  // optional .sync_pb.AppNotification app_notification = 45184 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_app_notification() const;
  PROTOBUF_DEPRECATED void clear_app_notification();
  PROTOBUF_DEPRECATED const ::sync_pb::AppNotification& app_notification() const;
  PROTOBUF_DEPRECATED ::sync_pb::AppNotification* release_app_notification();
  PROTOBUF_DEPRECATED ::sync_pb::AppNotification* mutable_app_notification();
  PROTOBUF_DEPRECATED void set_allocated_app_notification(::sync_pb::AppNotification* app_notification);

  // optional .sync_pb.PasswordSpecifics password = 45873;
  bool has_password() const;
  void clear_password();
  const ::sync_pb::PasswordSpecifics& password() const;
  ::sync_pb::PasswordSpecifics* release_password();
  ::sync_pb::PasswordSpecifics* mutable_password();
  void set_allocated_password(::sync_pb::PasswordSpecifics* password);

  // optional .sync_pb.NigoriSpecifics nigori = 47745;
  bool has_nigori() const;
  void clear_nigori();
  const ::sync_pb::NigoriSpecifics& nigori() const;
  ::sync_pb::NigoriSpecifics* release_nigori();
  ::sync_pb::NigoriSpecifics* mutable_nigori();
  void set_allocated_nigori(::sync_pb::NigoriSpecifics* nigori);

  // optional .sync_pb.ExtensionSpecifics extension = 48119;
  bool has_extension() const;
  void clear_extension();
  const ::sync_pb::ExtensionSpecifics& extension() const;
  ::sync_pb::ExtensionSpecifics* release_extension();
  ::sync_pb::ExtensionSpecifics* mutable_extension();
  void set_allocated_extension(::sync_pb::ExtensionSpecifics* extension);

  // optional .sync_pb.AppSpecifics app = 48364;
  bool has_app() const;
  void clear_app();
  const ::sync_pb::AppSpecifics& app() const;
  ::sync_pb::AppSpecifics* release_app();
  ::sync_pb::AppSpecifics* mutable_app();
  void set_allocated_app(::sync_pb::AppSpecifics* app);

  // optional .sync_pb.SessionSpecifics session = 50119;
  bool has_session() const;
  void clear_session();
  const ::sync_pb::SessionSpecifics& session() const;
  ::sync_pb::SessionSpecifics* release_session();
  ::sync_pb::SessionSpecifics* mutable_session();
  void set_allocated_session(::sync_pb::SessionSpecifics* session);

  // optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
  bool has_autofill_profile() const;
  void clear_autofill_profile();
  const ::sync_pb::AutofillProfileSpecifics& autofill_profile() const;
  ::sync_pb::AutofillProfileSpecifics* release_autofill_profile();
  ::sync_pb::AutofillProfileSpecifics* mutable_autofill_profile();
  void set_allocated_autofill_profile(::sync_pb::AutofillProfileSpecifics* autofill_profile);

  // optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
  bool has_search_engine() const;
  void clear_search_engine();
  const ::sync_pb::SearchEngineSpecifics& search_engine() const;
  ::sync_pb::SearchEngineSpecifics* release_search_engine();
  ::sync_pb::SearchEngineSpecifics* mutable_search_engine();
  void set_allocated_search_engine(::sync_pb::SearchEngineSpecifics* search_engine);

  // optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
  bool has_extension_setting() const;
  void clear_extension_setting();
  const ::sync_pb::ExtensionSettingSpecifics& extension_setting() const;
  ::sync_pb::ExtensionSettingSpecifics* release_extension_setting();
  ::sync_pb::ExtensionSettingSpecifics* mutable_extension_setting();
  void set_allocated_extension_setting(::sync_pb::ExtensionSettingSpecifics* extension_setting);

  // optional .sync_pb.AppSettingSpecifics app_setting = 103656;
  bool has_app_setting() const;
  void clear_app_setting();
  const ::sync_pb::AppSettingSpecifics& app_setting() const;
  ::sync_pb::AppSettingSpecifics* release_app_setting();
  ::sync_pb::AppSettingSpecifics* mutable_app_setting();
  void set_allocated_app_setting(::sync_pb::AppSettingSpecifics* app_setting);

  // optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
  bool has_history_delete_directive() const;
  void clear_history_delete_directive();
  const ::sync_pb::HistoryDeleteDirectiveSpecifics& history_delete_directive() const;
  ::sync_pb::HistoryDeleteDirectiveSpecifics* release_history_delete_directive();
  ::sync_pb::HistoryDeleteDirectiveSpecifics* mutable_history_delete_directive();
  void set_allocated_history_delete_directive(::sync_pb::HistoryDeleteDirectiveSpecifics* history_delete_directive);

  // optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_synced_notification() const;
  PROTOBUF_DEPRECATED void clear_synced_notification();
  PROTOBUF_DEPRECATED const ::sync_pb::SyncedNotificationSpecifics& synced_notification() const;
  PROTOBUF_DEPRECATED ::sync_pb::SyncedNotificationSpecifics* release_synced_notification();
  PROTOBUF_DEPRECATED ::sync_pb::SyncedNotificationSpecifics* mutable_synced_notification();
  PROTOBUF_DEPRECATED void set_allocated_synced_notification(::sync_pb::SyncedNotificationSpecifics* synced_notification);

  // optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_synced_notification_app_info() const;
  PROTOBUF_DEPRECATED void clear_synced_notification_app_info();
  PROTOBUF_DEPRECATED const ::sync_pb::SyncedNotificationAppInfoSpecifics& synced_notification_app_info() const;
  PROTOBUF_DEPRECATED ::sync_pb::SyncedNotificationAppInfoSpecifics* release_synced_notification_app_info();
  PROTOBUF_DEPRECATED ::sync_pb::SyncedNotificationAppInfoSpecifics* mutable_synced_notification_app_info();
  PROTOBUF_DEPRECATED void set_allocated_synced_notification_app_info(::sync_pb::SyncedNotificationAppInfoSpecifics* synced_notification_app_info);

  // optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
  bool has_device_info() const;
  void clear_device_info();
  const ::sync_pb::DeviceInfoSpecifics& device_info() const;
  ::sync_pb::DeviceInfoSpecifics* release_device_info();
  ::sync_pb::DeviceInfoSpecifics* mutable_device_info();
  void set_allocated_device_info(::sync_pb::DeviceInfoSpecifics* device_info);

  // optional .sync_pb.ExperimentsSpecifics experiments = 161496 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_experiments() const;
  PROTOBUF_DEPRECATED void clear_experiments();
  PROTOBUF_DEPRECATED const ::sync_pb::ExperimentsSpecifics& experiments() const;
  PROTOBUF_DEPRECATED ::sync_pb::ExperimentsSpecifics* release_experiments();
  PROTOBUF_DEPRECATED ::sync_pb::ExperimentsSpecifics* mutable_experiments();
  PROTOBUF_DEPRECATED void set_allocated_experiments(::sync_pb::ExperimentsSpecifics* experiments);

  // optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
  bool has_priority_preference() const;
  void clear_priority_preference();
  const ::sync_pb::PriorityPreferenceSpecifics& priority_preference() const;
  ::sync_pb::PriorityPreferenceSpecifics* release_priority_preference();
  ::sync_pb::PriorityPreferenceSpecifics* mutable_priority_preference();
  void set_allocated_priority_preference(::sync_pb::PriorityPreferenceSpecifics* priority_preference);

  // optional .sync_pb.DictionarySpecifics dictionary = 170540;
  bool has_dictionary() const;
  void clear_dictionary();
  const ::sync_pb::DictionarySpecifics& dictionary() const;
  ::sync_pb::DictionarySpecifics* release_dictionary();
  ::sync_pb::DictionarySpecifics* mutable_dictionary();
  void set_allocated_dictionary(::sync_pb::DictionarySpecifics* dictionary);

  // optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
  bool has_favicon_tracking() const;
  void clear_favicon_tracking();
  const ::sync_pb::FaviconTrackingSpecifics& favicon_tracking() const;
  ::sync_pb::FaviconTrackingSpecifics* release_favicon_tracking();
  ::sync_pb::FaviconTrackingSpecifics* mutable_favicon_tracking();
  void set_allocated_favicon_tracking(::sync_pb::FaviconTrackingSpecifics* favicon_tracking);

  // optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
  bool has_favicon_image() const;
  void clear_favicon_image();
  const ::sync_pb::FaviconImageSpecifics& favicon_image() const;
  ::sync_pb::FaviconImageSpecifics* release_favicon_image();
  ::sync_pb::FaviconImageSpecifics* mutable_favicon_image();
  void set_allocated_favicon_image(::sync_pb::FaviconImageSpecifics* favicon_image);

  // optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
  bool has_managed_user_setting() const;
  void clear_managed_user_setting();
  const ::sync_pb::ManagedUserSettingSpecifics& managed_user_setting() const;
  ::sync_pb::ManagedUserSettingSpecifics* release_managed_user_setting();
  ::sync_pb::ManagedUserSettingSpecifics* mutable_managed_user_setting();
  void set_allocated_managed_user_setting(::sync_pb::ManagedUserSettingSpecifics* managed_user_setting);

  // optional .sync_pb.ManagedUserSpecifics managed_user = 194582 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_managed_user() const;
  PROTOBUF_DEPRECATED void clear_managed_user();
  PROTOBUF_DEPRECATED const ::sync_pb::ManagedUserSpecifics& managed_user() const;
  PROTOBUF_DEPRECATED ::sync_pb::ManagedUserSpecifics* release_managed_user();
  PROTOBUF_DEPRECATED ::sync_pb::ManagedUserSpecifics* mutable_managed_user();
  PROTOBUF_DEPRECATED void set_allocated_managed_user(::sync_pb::ManagedUserSpecifics* managed_user);

  // optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_managed_user_shared_setting() const;
  PROTOBUF_DEPRECATED void clear_managed_user_shared_setting();
  PROTOBUF_DEPRECATED const ::sync_pb::ManagedUserSharedSettingSpecifics& managed_user_shared_setting() const;
  PROTOBUF_DEPRECATED ::sync_pb::ManagedUserSharedSettingSpecifics* release_managed_user_shared_setting();
  PROTOBUF_DEPRECATED ::sync_pb::ManagedUserSharedSettingSpecifics* mutable_managed_user_shared_setting();
  PROTOBUF_DEPRECATED void set_allocated_managed_user_shared_setting(::sync_pb::ManagedUserSharedSettingSpecifics* managed_user_shared_setting);

  // optional .sync_pb.ManagedUserWhitelistSpecifics managed_user_whitelist = 306060;
  bool has_managed_user_whitelist() const;
  void clear_managed_user_whitelist();
  const ::sync_pb::ManagedUserWhitelistSpecifics& managed_user_whitelist() const;
  ::sync_pb::ManagedUserWhitelistSpecifics* release_managed_user_whitelist();
  ::sync_pb::ManagedUserWhitelistSpecifics* mutable_managed_user_whitelist();
  void set_allocated_managed_user_whitelist(::sync_pb::ManagedUserWhitelistSpecifics* managed_user_whitelist);

  // optional .sync_pb.AppListSpecifics app_list = 229170;
  bool has_app_list() const;
  void clear_app_list();
  const ::sync_pb::AppListSpecifics& app_list() const;
  ::sync_pb::AppListSpecifics* release_app_list();
  ::sync_pb::AppListSpecifics* mutable_app_list();
  void set_allocated_app_list(::sync_pb::AppListSpecifics* app_list);

  // optional .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
  bool has_autofill_wallet() const;
  void clear_autofill_wallet();
  const ::sync_pb::AutofillWalletSpecifics& autofill_wallet() const;
  ::sync_pb::AutofillWalletSpecifics* release_autofill_wallet();
  ::sync_pb::AutofillWalletSpecifics* mutable_autofill_wallet();
  void set_allocated_autofill_wallet(::sync_pb::AutofillWalletSpecifics* autofill_wallet);

  // optional .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
  bool has_wallet_metadata() const;
  void clear_wallet_metadata();
  const ::sync_pb::WalletMetadataSpecifics& wallet_metadata() const;
  ::sync_pb::WalletMetadataSpecifics* release_wallet_metadata();
  ::sync_pb::WalletMetadataSpecifics* mutable_wallet_metadata();
  void set_allocated_wallet_metadata(::sync_pb::WalletMetadataSpecifics* wallet_metadata);

  // optional .sync_pb.ArcPackageSpecifics arc_package = 340906;
  bool has_arc_package() const;
  void clear_arc_package();
  const ::sync_pb::ArcPackageSpecifics& arc_package() const;
  ::sync_pb::ArcPackageSpecifics* release_arc_package();
  ::sync_pb::ArcPackageSpecifics* mutable_arc_package();
  void set_allocated_arc_package(::sync_pb::ArcPackageSpecifics* arc_package);

  // optional .sync_pb.PrinterSpecifics printer = 410745;
  bool has_printer() const;
  void clear_printer();
  const ::sync_pb::PrinterSpecifics& printer() const;
  ::sync_pb::PrinterSpecifics* release_printer();
  ::sync_pb::PrinterSpecifics* mutable_printer();
  void set_allocated_printer(::sync_pb::PrinterSpecifics* printer);

  // optional .sync_pb.ReadingListSpecifics reading_list = 411028;
  bool has_reading_list() const;
  void clear_reading_list();
  const ::sync_pb::ReadingListSpecifics& reading_list() const;
  ::sync_pb::ReadingListSpecifics* release_reading_list();
  ::sync_pb::ReadingListSpecifics* mutable_reading_list();
  void set_allocated_reading_list(::sync_pb::ReadingListSpecifics* reading_list);

  // optional .sync_pb.UserEventSpecifics user_event = 455206;
  bool has_user_event() const;
  void clear_user_event();
  const ::sync_pb::UserEventSpecifics& user_event() const;
  ::sync_pb::UserEventSpecifics* release_user_event();
  ::sync_pb::UserEventSpecifics* mutable_user_event();
  void set_allocated_user_event(::sync_pb::UserEventSpecifics* user_event);

  // optional .sync_pb.UserConsentSpecifics user_consent = 556014;
  bool has_user_consent() const;
  void clear_user_consent();
  const ::sync_pb::UserConsentSpecifics& user_consent() const;
  ::sync_pb::UserConsentSpecifics* release_user_consent();
  ::sync_pb::UserConsentSpecifics* mutable_user_consent();
  void set_allocated_user_consent(::sync_pb::UserConsentSpecifics* user_consent);

  // optional .sync_pb.SendTabToSelfSpecifics send_tab_to_self = 601980;
  bool has_send_tab_to_self() const;
  void clear_send_tab_to_self();
  const ::sync_pb::SendTabToSelfSpecifics& send_tab_to_self() const;
  ::sync_pb::SendTabToSelfSpecifics* release_send_tab_to_self();
  ::sync_pb::SendTabToSelfSpecifics* mutable_send_tab_to_self();
  void set_allocated_send_tab_to_self(::sync_pb::SendTabToSelfSpecifics* send_tab_to_self);

  // optional .sync_pb.SecurityEventSpecifics security_event = 600372;
  bool has_security_event() const;
  void clear_security_event();
  const ::sync_pb::SecurityEventSpecifics& security_event() const;
  ::sync_pb::SecurityEventSpecifics* release_security_event();
  ::sync_pb::SecurityEventSpecifics* mutable_security_event();
  void set_allocated_security_event(::sync_pb::SecurityEventSpecifics* security_event);

  // optional .sync_pb.WebAppSpecifics web_app = 673225;
  bool has_web_app() const;
  void clear_web_app();
  const ::sync_pb::WebAppSpecifics& web_app() const;
  ::sync_pb::WebAppSpecifics* release_web_app();
  ::sync_pb::WebAppSpecifics* mutable_web_app();
  void set_allocated_web_app(::sync_pb::WebAppSpecifics* web_app);

  // optional .sync_pb.WifiConfigurationSpecifics wifi_configuration = 662827;
  bool has_wifi_configuration() const;
  void clear_wifi_configuration();
  const ::sync_pb::WifiConfigurationSpecifics& wifi_configuration() const;
  ::sync_pb::WifiConfigurationSpecifics* release_wifi_configuration();
  ::sync_pb::WifiConfigurationSpecifics* mutable_wifi_configuration();
  void set_allocated_wifi_configuration(::sync_pb::WifiConfigurationSpecifics* wifi_configuration);

  // optional .sync_pb.OsPreferenceSpecifics os_preference = 702141;
  bool has_os_preference() const;
  void clear_os_preference();
  const ::sync_pb::OsPreferenceSpecifics& os_preference() const;
  ::sync_pb::OsPreferenceSpecifics* release_os_preference();
  ::sync_pb::OsPreferenceSpecifics* mutable_os_preference();
  void set_allocated_os_preference(::sync_pb::OsPreferenceSpecifics* os_preference);

  // optional .sync_pb.OsPriorityPreferenceSpecifics os_priority_preference = 703915;
  bool has_os_priority_preference() const;
  void clear_os_priority_preference();
  const ::sync_pb::OsPriorityPreferenceSpecifics& os_priority_preference() const;
  ::sync_pb::OsPriorityPreferenceSpecifics* release_os_priority_preference();
  ::sync_pb::OsPriorityPreferenceSpecifics* mutable_os_priority_preference();
  void set_allocated_os_priority_preference(::sync_pb::OsPriorityPreferenceSpecifics* os_priority_preference);

  // optional .sync_pb.SharingMessageSpecifics sharing_message = 728866;
  bool has_sharing_message() const;
  void clear_sharing_message();
  const ::sync_pb::SharingMessageSpecifics& sharing_message() const;
  ::sync_pb::SharingMessageSpecifics* release_sharing_message();
  ::sync_pb::SharingMessageSpecifics* mutable_sharing_message();
  void set_allocated_sharing_message(::sync_pb::SharingMessageSpecifics* sharing_message);

  void clear_specifics_variant();
  SpecificsVariantCase specifics_variant_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.EntitySpecifics)
 private:
  class _Internal;
  void set_has_autofill();
  void set_has_bookmark();
  void set_has_preference();
  void set_has_typed_url();
  void set_has_theme();
  void set_has_app_notification();
  void set_has_password();
  void set_has_nigori();
  void set_has_extension();
  void set_has_app();
  void set_has_session();
  void set_has_autofill_profile();
  void set_has_search_engine();
  void set_has_extension_setting();
  void set_has_app_setting();
  void set_has_history_delete_directive();
  void set_has_synced_notification();
  void set_has_synced_notification_app_info();
  void set_has_device_info();
  void set_has_experiments();
  void set_has_priority_preference();
  void set_has_dictionary();
  void set_has_favicon_tracking();
  void set_has_favicon_image();
  void set_has_managed_user_setting();
  void set_has_managed_user();
  void set_has_managed_user_shared_setting();
  void set_has_managed_user_whitelist();
  void set_has_app_list();
  void set_has_autofill_wallet();
  void set_has_wallet_metadata();
  void set_has_arc_package();
  void set_has_printer();
  void set_has_reading_list();
  void set_has_user_event();
  void set_has_user_consent();
  void set_has_send_tab_to_self();
  void set_has_security_event();
  void set_has_web_app();
  void set_has_wifi_configuration();
  void set_has_os_preference();
  void set_has_os_priority_preference();
  void set_has_sharing_message();

  inline bool has_specifics_variant() const;
  inline void clear_has_specifics_variant();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::EncryptedData* encrypted_;
  union SpecificsVariantUnion {
    SpecificsVariantUnion() {}
    ::sync_pb::AutofillSpecifics* autofill_;
    ::sync_pb::BookmarkSpecifics* bookmark_;
    ::sync_pb::PreferenceSpecifics* preference_;
    ::sync_pb::TypedUrlSpecifics* typed_url_;
    ::sync_pb::ThemeSpecifics* theme_;
    ::sync_pb::AppNotification* app_notification_;
    ::sync_pb::PasswordSpecifics* password_;
    ::sync_pb::NigoriSpecifics* nigori_;
    ::sync_pb::ExtensionSpecifics* extension_;
    ::sync_pb::AppSpecifics* app_;
    ::sync_pb::SessionSpecifics* session_;
    ::sync_pb::AutofillProfileSpecifics* autofill_profile_;
    ::sync_pb::SearchEngineSpecifics* search_engine_;
    ::sync_pb::ExtensionSettingSpecifics* extension_setting_;
    ::sync_pb::AppSettingSpecifics* app_setting_;
    ::sync_pb::HistoryDeleteDirectiveSpecifics* history_delete_directive_;
    ::sync_pb::SyncedNotificationSpecifics* synced_notification_;
    ::sync_pb::SyncedNotificationAppInfoSpecifics* synced_notification_app_info_;
    ::sync_pb::DeviceInfoSpecifics* device_info_;
    ::sync_pb::ExperimentsSpecifics* experiments_;
    ::sync_pb::PriorityPreferenceSpecifics* priority_preference_;
    ::sync_pb::DictionarySpecifics* dictionary_;
    ::sync_pb::FaviconTrackingSpecifics* favicon_tracking_;
    ::sync_pb::FaviconImageSpecifics* favicon_image_;
    ::sync_pb::ManagedUserSettingSpecifics* managed_user_setting_;
    ::sync_pb::ManagedUserSpecifics* managed_user_;
    ::sync_pb::ManagedUserSharedSettingSpecifics* managed_user_shared_setting_;
    ::sync_pb::ManagedUserWhitelistSpecifics* managed_user_whitelist_;
    ::sync_pb::AppListSpecifics* app_list_;
    ::sync_pb::AutofillWalletSpecifics* autofill_wallet_;
    ::sync_pb::WalletMetadataSpecifics* wallet_metadata_;
    ::sync_pb::ArcPackageSpecifics* arc_package_;
    ::sync_pb::PrinterSpecifics* printer_;
    ::sync_pb::ReadingListSpecifics* reading_list_;
    ::sync_pb::UserEventSpecifics* user_event_;
    ::sync_pb::UserConsentSpecifics* user_consent_;
    ::sync_pb::SendTabToSelfSpecifics* send_tab_to_self_;
    ::sync_pb::SecurityEventSpecifics* security_event_;
    ::sync_pb::WebAppSpecifics* web_app_;
    ::sync_pb::WifiConfigurationSpecifics* wifi_configuration_;
    ::sync_pb::OsPreferenceSpecifics* os_preference_;
    ::sync_pb::OsPriorityPreferenceSpecifics* os_priority_preference_;
    ::sync_pb::SharingMessageSpecifics* sharing_message_;
  } specifics_variant_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class SyncEntity :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SyncEntity) */ {
 public:
  SyncEntity();
  virtual ~SyncEntity();

  SyncEntity(const SyncEntity& from);
  SyncEntity(SyncEntity&& from) noexcept
    : SyncEntity() {
    *this = ::std::move(from);
  }

  inline SyncEntity& operator=(const SyncEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncEntity& operator=(SyncEntity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SyncEntity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncEntity* internal_default_instance() {
    return reinterpret_cast<const SyncEntity*>(
               &_SyncEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SyncEntity& a, SyncEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncEntity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncEntity* New() const final {
    return CreateMaybeMessage<SyncEntity>(nullptr);
  }

  SyncEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncEntity>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SyncEntity& from);
  void MergeFrom(const SyncEntity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyncEntity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SyncEntity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdStringFieldNumber = 1,
    kParentIdStringFieldNumber = 2,
    kOldParentIdFieldNumber = 3,
    kNameFieldNumber = 7,
    kNonUniqueNameFieldNumber = 8,
    kServerDefinedUniqueTagFieldNumber = 10,
    kInsertAfterItemIdFieldNumber = 16,
    kOriginatorCacheGuidFieldNumber = 19,
    kOriginatorClientItemIdFieldNumber = 20,
    kClientDefinedUniqueTagFieldNumber = 23,
    kOrdinalInParentFieldNumber = 24,
    kSpecificsFieldNumber = 21,
    kUniquePositionFieldNumber = 25,
    kVersionFieldNumber = 4,
    kMtimeFieldNumber = 5,
    kCtimeFieldNumber = 6,
    kPositionInParentFieldNumber = 15,
    kDeletedFieldNumber = 18,
    kFolderFieldNumber = 22,
  };
  // optional string id_string = 1;
  bool has_id_string() const;
  void clear_id_string();
  const std::string& id_string() const;
  void set_id_string(const std::string& value);
  void set_id_string(std::string&& value);
  void set_id_string(const char* value);
  void set_id_string(const char* value, size_t size);
  std::string* mutable_id_string();
  std::string* release_id_string();
  void set_allocated_id_string(std::string* id_string);

  // optional string parent_id_string = 2;
  bool has_parent_id_string() const;
  void clear_parent_id_string();
  const std::string& parent_id_string() const;
  void set_parent_id_string(const std::string& value);
  void set_parent_id_string(std::string&& value);
  void set_parent_id_string(const char* value);
  void set_parent_id_string(const char* value, size_t size);
  std::string* mutable_parent_id_string();
  std::string* release_parent_id_string();
  void set_allocated_parent_id_string(std::string* parent_id_string);

  // optional string old_parent_id = 3;
  bool has_old_parent_id() const;
  void clear_old_parent_id();
  const std::string& old_parent_id() const;
  void set_old_parent_id(const std::string& value);
  void set_old_parent_id(std::string&& value);
  void set_old_parent_id(const char* value);
  void set_old_parent_id(const char* value, size_t size);
  std::string* mutable_old_parent_id();
  std::string* release_old_parent_id();
  void set_allocated_old_parent_id(std::string* old_parent_id);

  // optional string name = 7;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string non_unique_name = 8;
  bool has_non_unique_name() const;
  void clear_non_unique_name();
  const std::string& non_unique_name() const;
  void set_non_unique_name(const std::string& value);
  void set_non_unique_name(std::string&& value);
  void set_non_unique_name(const char* value);
  void set_non_unique_name(const char* value, size_t size);
  std::string* mutable_non_unique_name();
  std::string* release_non_unique_name();
  void set_allocated_non_unique_name(std::string* non_unique_name);

  // optional string server_defined_unique_tag = 10;
  bool has_server_defined_unique_tag() const;
  void clear_server_defined_unique_tag();
  const std::string& server_defined_unique_tag() const;
  void set_server_defined_unique_tag(const std::string& value);
  void set_server_defined_unique_tag(std::string&& value);
  void set_server_defined_unique_tag(const char* value);
  void set_server_defined_unique_tag(const char* value, size_t size);
  std::string* mutable_server_defined_unique_tag();
  std::string* release_server_defined_unique_tag();
  void set_allocated_server_defined_unique_tag(std::string* server_defined_unique_tag);

  // optional string insert_after_item_id = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_insert_after_item_id() const;
  PROTOBUF_DEPRECATED void clear_insert_after_item_id();
  PROTOBUF_DEPRECATED const std::string& insert_after_item_id() const;
  PROTOBUF_DEPRECATED void set_insert_after_item_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_insert_after_item_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_insert_after_item_id(const char* value);
  PROTOBUF_DEPRECATED void set_insert_after_item_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_insert_after_item_id();
  PROTOBUF_DEPRECATED std::string* release_insert_after_item_id();
  PROTOBUF_DEPRECATED void set_allocated_insert_after_item_id(std::string* insert_after_item_id);

  // optional string originator_cache_guid = 19;
  bool has_originator_cache_guid() const;
  void clear_originator_cache_guid();
  const std::string& originator_cache_guid() const;
  void set_originator_cache_guid(const std::string& value);
  void set_originator_cache_guid(std::string&& value);
  void set_originator_cache_guid(const char* value);
  void set_originator_cache_guid(const char* value, size_t size);
  std::string* mutable_originator_cache_guid();
  std::string* release_originator_cache_guid();
  void set_allocated_originator_cache_guid(std::string* originator_cache_guid);

  // optional string originator_client_item_id = 20;
  bool has_originator_client_item_id() const;
  void clear_originator_client_item_id();
  const std::string& originator_client_item_id() const;
  void set_originator_client_item_id(const std::string& value);
  void set_originator_client_item_id(std::string&& value);
  void set_originator_client_item_id(const char* value);
  void set_originator_client_item_id(const char* value, size_t size);
  std::string* mutable_originator_client_item_id();
  std::string* release_originator_client_item_id();
  void set_allocated_originator_client_item_id(std::string* originator_client_item_id);

  // optional string client_defined_unique_tag = 23;
  bool has_client_defined_unique_tag() const;
  void clear_client_defined_unique_tag();
  const std::string& client_defined_unique_tag() const;
  void set_client_defined_unique_tag(const std::string& value);
  void set_client_defined_unique_tag(std::string&& value);
  void set_client_defined_unique_tag(const char* value);
  void set_client_defined_unique_tag(const char* value, size_t size);
  std::string* mutable_client_defined_unique_tag();
  std::string* release_client_defined_unique_tag();
  void set_allocated_client_defined_unique_tag(std::string* client_defined_unique_tag);

  // optional bytes ordinal_in_parent = 24 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_ordinal_in_parent() const;
  PROTOBUF_DEPRECATED void clear_ordinal_in_parent();
  PROTOBUF_DEPRECATED const std::string& ordinal_in_parent() const;
  PROTOBUF_DEPRECATED void set_ordinal_in_parent(const std::string& value);
  PROTOBUF_DEPRECATED void set_ordinal_in_parent(std::string&& value);
  PROTOBUF_DEPRECATED void set_ordinal_in_parent(const char* value);
  PROTOBUF_DEPRECATED void set_ordinal_in_parent(const void* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_ordinal_in_parent();
  PROTOBUF_DEPRECATED std::string* release_ordinal_in_parent();
  PROTOBUF_DEPRECATED void set_allocated_ordinal_in_parent(std::string* ordinal_in_parent);

  // optional .sync_pb.EntitySpecifics specifics = 21;
  bool has_specifics() const;
  void clear_specifics();
  const ::sync_pb::EntitySpecifics& specifics() const;
  ::sync_pb::EntitySpecifics* release_specifics();
  ::sync_pb::EntitySpecifics* mutable_specifics();
  void set_allocated_specifics(::sync_pb::EntitySpecifics* specifics);

  // optional .sync_pb.UniquePosition unique_position = 25;
  bool has_unique_position() const;
  void clear_unique_position();
  const ::sync_pb::UniquePosition& unique_position() const;
  ::sync_pb::UniquePosition* release_unique_position();
  ::sync_pb::UniquePosition* mutable_unique_position();
  void set_allocated_unique_position(::sync_pb::UniquePosition* unique_position);

  // optional int64 version = 4;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mtime = 5;
  bool has_mtime() const;
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::int64 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 ctime = 6;
  bool has_ctime() const;
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::int64 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 position_in_parent = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_position_in_parent() const;
  PROTOBUF_DEPRECATED void clear_position_in_parent();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 position_in_parent() const;
  PROTOBUF_DEPRECATED void set_position_in_parent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool deleted = 18 [default = false];
  bool has_deleted() const;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);

  // optional bool folder = 22 [default = false];
  bool has_folder() const;
  void clear_folder();
  bool folder() const;
  void set_folder(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.SyncEntity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_parent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr non_unique_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_defined_unique_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_after_item_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originator_cache_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originator_client_item_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_defined_unique_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordinal_in_parent_;
  ::sync_pb::EntitySpecifics* specifics_;
  ::sync_pb::UniquePosition* unique_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 mtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 ctime_;
  ::PROTOBUF_NAMESPACE_ID::int64 position_in_parent_;
  bool deleted_;
  bool folder_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class ChromiumExtensionsActivity :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ChromiumExtensionsActivity) */ {
 public:
  ChromiumExtensionsActivity();
  virtual ~ChromiumExtensionsActivity();

  ChromiumExtensionsActivity(const ChromiumExtensionsActivity& from);
  ChromiumExtensionsActivity(ChromiumExtensionsActivity&& from) noexcept
    : ChromiumExtensionsActivity() {
    *this = ::std::move(from);
  }

  inline ChromiumExtensionsActivity& operator=(const ChromiumExtensionsActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromiumExtensionsActivity& operator=(ChromiumExtensionsActivity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromiumExtensionsActivity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromiumExtensionsActivity* internal_default_instance() {
    return reinterpret_cast<const ChromiumExtensionsActivity*>(
               &_ChromiumExtensionsActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChromiumExtensionsActivity& a, ChromiumExtensionsActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromiumExtensionsActivity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromiumExtensionsActivity* New() const final {
    return CreateMaybeMessage<ChromiumExtensionsActivity>(nullptr);
  }

  ChromiumExtensionsActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromiumExtensionsActivity>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromiumExtensionsActivity& from);
  void MergeFrom(const ChromiumExtensionsActivity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromiumExtensionsActivity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ChromiumExtensionsActivity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionIdFieldNumber = 1,
    kBookmarkWritesSinceLastCommitFieldNumber = 2,
  };
  // optional string extension_id = 1;
  bool has_extension_id() const;
  void clear_extension_id();
  const std::string& extension_id() const;
  void set_extension_id(const std::string& value);
  void set_extension_id(std::string&& value);
  void set_extension_id(const char* value);
  void set_extension_id(const char* value, size_t size);
  std::string* mutable_extension_id();
  std::string* release_extension_id();
  void set_allocated_extension_id(std::string* extension_id);

  // optional uint32 bookmark_writes_since_last_commit = 2;
  bool has_bookmark_writes_since_last_commit() const;
  void clear_bookmark_writes_since_last_commit();
  ::PROTOBUF_NAMESPACE_ID::uint32 bookmark_writes_since_last_commit() const;
  void set_bookmark_writes_since_last_commit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.ChromiumExtensionsActivity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bookmark_writes_since_last_commit_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class ClientConfigParams :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ClientConfigParams) */ {
 public:
  ClientConfigParams();
  virtual ~ClientConfigParams();

  ClientConfigParams(const ClientConfigParams& from);
  ClientConfigParams(ClientConfigParams&& from) noexcept
    : ClientConfigParams() {
    *this = ::std::move(from);
  }

  inline ClientConfigParams& operator=(const ClientConfigParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConfigParams& operator=(ClientConfigParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientConfigParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientConfigParams* internal_default_instance() {
    return reinterpret_cast<const ClientConfigParams*>(
               &_ClientConfigParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientConfigParams& a, ClientConfigParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConfigParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientConfigParams* New() const final {
    return CreateMaybeMessage<ClientConfigParams>(nullptr);
  }

  ClientConfigParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientConfigParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClientConfigParams& from);
  void MergeFrom(const ClientConfigParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientConfigParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ClientConfigParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledTypeIdsFieldNumber = 1,
    kTabsDatatypeEnabledFieldNumber = 2,
    kCookieJarMismatchFieldNumber = 3,
  };
  // repeated int32 enabled_type_ids = 1;
  int enabled_type_ids_size() const;
  void clear_enabled_type_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 enabled_type_ids(int index) const;
  void set_enabled_type_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_enabled_type_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      enabled_type_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_enabled_type_ids();

  // optional bool tabs_datatype_enabled = 2;
  bool has_tabs_datatype_enabled() const;
  void clear_tabs_datatype_enabled();
  bool tabs_datatype_enabled() const;
  void set_tabs_datatype_enabled(bool value);

  // optional bool cookie_jar_mismatch = 3;
  bool has_cookie_jar_mismatch() const;
  void clear_cookie_jar_mismatch();
  bool cookie_jar_mismatch() const;
  void set_cookie_jar_mismatch(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.ClientConfigParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > enabled_type_ids_;
  bool tabs_datatype_enabled_;
  bool cookie_jar_mismatch_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class CommitMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.CommitMessage) */ {
 public:
  CommitMessage();
  virtual ~CommitMessage();

  CommitMessage(const CommitMessage& from);
  CommitMessage(CommitMessage&& from) noexcept
    : CommitMessage() {
    *this = ::std::move(from);
  }

  inline CommitMessage& operator=(const CommitMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitMessage& operator=(CommitMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CommitMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitMessage* internal_default_instance() {
    return reinterpret_cast<const CommitMessage*>(
               &_CommitMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommitMessage& a, CommitMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitMessage* New() const final {
    return CreateMaybeMessage<CommitMessage>(nullptr);
  }

  CommitMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CommitMessage& from);
  void MergeFrom(const CommitMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.CommitMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kExtensionsActivityFieldNumber = 3,
    kClientContextsFieldNumber = 5,
    kCacheGuidFieldNumber = 2,
    kPaddingFieldNumber = 6,
    kConfigParamsFieldNumber = 4,
  };
  // repeated .sync_pb.SyncEntity entries = 1;
  int entries_size() const;
  void clear_entries();
  ::sync_pb::SyncEntity* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SyncEntity >*
      mutable_entries();
  const ::sync_pb::SyncEntity& entries(int index) const;
  ::sync_pb::SyncEntity* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SyncEntity >&
      entries() const;

  // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
  int extensions_activity_size() const;
  void clear_extensions_activity();
  ::sync_pb::ChromiumExtensionsActivity* mutable_extensions_activity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::ChromiumExtensionsActivity >*
      mutable_extensions_activity();
  const ::sync_pb::ChromiumExtensionsActivity& extensions_activity(int index) const;
  ::sync_pb::ChromiumExtensionsActivity* add_extensions_activity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::ChromiumExtensionsActivity >&
      extensions_activity() const;

  // repeated .sync_pb.DataTypeContext client_contexts = 5;
  int client_contexts_size() const;
  void clear_client_contexts();
  ::sync_pb::DataTypeContext* mutable_client_contexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >*
      mutable_client_contexts();
  const ::sync_pb::DataTypeContext& client_contexts(int index) const;
  ::sync_pb::DataTypeContext* add_client_contexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >&
      client_contexts() const;

  // optional string cache_guid = 2;
  bool has_cache_guid() const;
  void clear_cache_guid();
  const std::string& cache_guid() const;
  void set_cache_guid(const std::string& value);
  void set_cache_guid(std::string&& value);
  void set_cache_guid(const char* value);
  void set_cache_guid(const char* value, size_t size);
  std::string* mutable_cache_guid();
  std::string* release_cache_guid();
  void set_allocated_cache_guid(std::string* cache_guid);

  // optional string padding = 6;
  bool has_padding() const;
  void clear_padding();
  const std::string& padding() const;
  void set_padding(const std::string& value);
  void set_padding(std::string&& value);
  void set_padding(const char* value);
  void set_padding(const char* value, size_t size);
  std::string* mutable_padding();
  std::string* release_padding();
  void set_allocated_padding(std::string* padding);

  // optional .sync_pb.ClientConfigParams config_params = 4;
  bool has_config_params() const;
  void clear_config_params();
  const ::sync_pb::ClientConfigParams& config_params() const;
  ::sync_pb::ClientConfigParams* release_config_params();
  ::sync_pb::ClientConfigParams* mutable_config_params();
  void set_allocated_config_params(::sync_pb::ClientConfigParams* config_params);

  // @@protoc_insertion_point(class_scope:sync_pb.CommitMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SyncEntity > entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::ChromiumExtensionsActivity > extensions_activity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext > client_contexts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr padding_;
  ::sync_pb::ClientConfigParams* config_params_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class GetUpdateTriggers :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GetUpdateTriggers) */ {
 public:
  GetUpdateTriggers();
  virtual ~GetUpdateTriggers();

  GetUpdateTriggers(const GetUpdateTriggers& from);
  GetUpdateTriggers(GetUpdateTriggers&& from) noexcept
    : GetUpdateTriggers() {
    *this = ::std::move(from);
  }

  inline GetUpdateTriggers& operator=(const GetUpdateTriggers& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUpdateTriggers& operator=(GetUpdateTriggers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GetUpdateTriggers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUpdateTriggers* internal_default_instance() {
    return reinterpret_cast<const GetUpdateTriggers*>(
               &_GetUpdateTriggers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetUpdateTriggers& a, GetUpdateTriggers& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUpdateTriggers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUpdateTriggers* New() const final {
    return CreateMaybeMessage<GetUpdateTriggers>(nullptr);
  }

  GetUpdateTriggers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUpdateTriggers>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetUpdateTriggers& from);
  void MergeFrom(const GetUpdateTriggers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetUpdateTriggers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GetUpdateTriggers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationHintFieldNumber = 1,
    kLocalModificationNudgesFieldNumber = 4,
    kDatatypeRefreshNudgesFieldNumber = 5,
    kClientDroppedHintsFieldNumber = 2,
    kInvalidationsOutOfSyncFieldNumber = 3,
    kServerDroppedHintsFieldNumber = 6,
    kInitialSyncInProgressFieldNumber = 7,
    kSyncForResolveConflictInProgressFieldNumber = 8,
  };
  // repeated string notification_hint = 1;
  int notification_hint_size() const;
  void clear_notification_hint();
  const std::string& notification_hint(int index) const;
  std::string* mutable_notification_hint(int index);
  void set_notification_hint(int index, const std::string& value);
  void set_notification_hint(int index, std::string&& value);
  void set_notification_hint(int index, const char* value);
  void set_notification_hint(int index, const char* value, size_t size);
  std::string* add_notification_hint();
  void add_notification_hint(const std::string& value);
  void add_notification_hint(std::string&& value);
  void add_notification_hint(const char* value);
  void add_notification_hint(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notification_hint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notification_hint();

  // optional int64 local_modification_nudges = 4;
  bool has_local_modification_nudges() const;
  void clear_local_modification_nudges();
  ::PROTOBUF_NAMESPACE_ID::int64 local_modification_nudges() const;
  void set_local_modification_nudges(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 datatype_refresh_nudges = 5;
  bool has_datatype_refresh_nudges() const;
  void clear_datatype_refresh_nudges();
  ::PROTOBUF_NAMESPACE_ID::int64 datatype_refresh_nudges() const;
  void set_datatype_refresh_nudges(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool client_dropped_hints = 2;
  bool has_client_dropped_hints() const;
  void clear_client_dropped_hints();
  bool client_dropped_hints() const;
  void set_client_dropped_hints(bool value);

  // optional bool invalidations_out_of_sync = 3;
  bool has_invalidations_out_of_sync() const;
  void clear_invalidations_out_of_sync();
  bool invalidations_out_of_sync() const;
  void set_invalidations_out_of_sync(bool value);

  // optional bool server_dropped_hints = 6;
  bool has_server_dropped_hints() const;
  void clear_server_dropped_hints();
  bool server_dropped_hints() const;
  void set_server_dropped_hints(bool value);

  // optional bool initial_sync_in_progress = 7;
  bool has_initial_sync_in_progress() const;
  void clear_initial_sync_in_progress();
  bool initial_sync_in_progress() const;
  void set_initial_sync_in_progress(bool value);

  // optional bool sync_for_resolve_conflict_in_progress = 8;
  bool has_sync_for_resolve_conflict_in_progress() const;
  void clear_sync_for_resolve_conflict_in_progress();
  bool sync_for_resolve_conflict_in_progress() const;
  void set_sync_for_resolve_conflict_in_progress(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.GetUpdateTriggers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notification_hint_;
  ::PROTOBUF_NAMESPACE_ID::int64 local_modification_nudges_;
  ::PROTOBUF_NAMESPACE_ID::int64 datatype_refresh_nudges_;
  bool client_dropped_hints_;
  bool invalidations_out_of_sync_;
  bool server_dropped_hints_;
  bool initial_sync_in_progress_;
  bool sync_for_resolve_conflict_in_progress_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class GarbageCollectionDirective :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GarbageCollectionDirective) */ {
 public:
  GarbageCollectionDirective();
  virtual ~GarbageCollectionDirective();

  GarbageCollectionDirective(const GarbageCollectionDirective& from);
  GarbageCollectionDirective(GarbageCollectionDirective&& from) noexcept
    : GarbageCollectionDirective() {
    *this = ::std::move(from);
  }

  inline GarbageCollectionDirective& operator=(const GarbageCollectionDirective& from) {
    CopyFrom(from);
    return *this;
  }
  inline GarbageCollectionDirective& operator=(GarbageCollectionDirective&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GarbageCollectionDirective& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GarbageCollectionDirective* internal_default_instance() {
    return reinterpret_cast<const GarbageCollectionDirective*>(
               &_GarbageCollectionDirective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GarbageCollectionDirective& a, GarbageCollectionDirective& b) {
    a.Swap(&b);
  }
  inline void Swap(GarbageCollectionDirective* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GarbageCollectionDirective* New() const final {
    return CreateMaybeMessage<GarbageCollectionDirective>(nullptr);
  }

  GarbageCollectionDirective* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GarbageCollectionDirective>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GarbageCollectionDirective& from);
  void MergeFrom(const GarbageCollectionDirective& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GarbageCollectionDirective* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GarbageCollectionDirective";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GarbageCollectionDirective_Type Type;
  static constexpr Type UNKNOWN =
    GarbageCollectionDirective_Type_UNKNOWN;
  static constexpr Type VERSION_WATERMARK =
    GarbageCollectionDirective_Type_VERSION_WATERMARK;
  static constexpr Type AGE_WATERMARK =
    GarbageCollectionDirective_Type_AGE_WATERMARK;
  PROTOBUF_DEPRECATED static constexpr Type DEPRECATED_MAX_ITEM_COUNT =
    GarbageCollectionDirective_Type_DEPRECATED_MAX_ITEM_COUNT;
  static inline bool Type_IsValid(int value) {
    return GarbageCollectionDirective_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GarbageCollectionDirective_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GarbageCollectionDirective_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GarbageCollectionDirective_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return GarbageCollectionDirective_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return GarbageCollectionDirective_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionWatermarkFieldNumber = 2,
    kTypeFieldNumber = 1,
    kAgeWatermarkInDaysFieldNumber = 3,
  };
  // optional int64 version_watermark = 2;
  bool has_version_watermark() const;
  void clear_version_watermark();
  ::PROTOBUF_NAMESPACE_ID::int64 version_watermark() const;
  void set_version_watermark(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  ::sync_pb::GarbageCollectionDirective_Type type() const;
  void set_type(::sync_pb::GarbageCollectionDirective_Type value);

  // optional int32 age_watermark_in_days = 3;
  bool has_age_watermark_in_days() const;
  void clear_age_watermark_in_days();
  ::PROTOBUF_NAMESPACE_ID::int32 age_watermark_in_days() const;
  void set_age_watermark_in_days(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.GarbageCollectionDirective)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_watermark_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_watermark_in_days_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class DataTypeProgressMarker :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.DataTypeProgressMarker) */ {
 public:
  DataTypeProgressMarker();
  virtual ~DataTypeProgressMarker();

  DataTypeProgressMarker(const DataTypeProgressMarker& from);
  DataTypeProgressMarker(DataTypeProgressMarker&& from) noexcept
    : DataTypeProgressMarker() {
    *this = ::std::move(from);
  }

  inline DataTypeProgressMarker& operator=(const DataTypeProgressMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataTypeProgressMarker& operator=(DataTypeProgressMarker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DataTypeProgressMarker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataTypeProgressMarker* internal_default_instance() {
    return reinterpret_cast<const DataTypeProgressMarker*>(
               &_DataTypeProgressMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DataTypeProgressMarker& a, DataTypeProgressMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(DataTypeProgressMarker* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataTypeProgressMarker* New() const final {
    return CreateMaybeMessage<DataTypeProgressMarker>(nullptr);
  }

  DataTypeProgressMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataTypeProgressMarker>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DataTypeProgressMarker& from);
  void MergeFrom(const DataTypeProgressMarker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataTypeProgressMarker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.DataTypeProgressMarker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kNotificationHintFieldNumber = 4,
    kGetUpdateTriggersFieldNumber = 5,
    kGcDirectiveFieldNumber = 6,
    kTimestampTokenForMigrationFieldNumber = 3,
    kDataTypeIdFieldNumber = 1,
  };
  // optional bytes token = 2;
  bool has_token() const;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // optional string notification_hint = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_notification_hint() const;
  PROTOBUF_DEPRECATED void clear_notification_hint();
  PROTOBUF_DEPRECATED const std::string& notification_hint() const;
  PROTOBUF_DEPRECATED void set_notification_hint(const std::string& value);
  PROTOBUF_DEPRECATED void set_notification_hint(std::string&& value);
  PROTOBUF_DEPRECATED void set_notification_hint(const char* value);
  PROTOBUF_DEPRECATED void set_notification_hint(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_notification_hint();
  PROTOBUF_DEPRECATED std::string* release_notification_hint();
  PROTOBUF_DEPRECATED void set_allocated_notification_hint(std::string* notification_hint);

  // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
  bool has_get_update_triggers() const;
  void clear_get_update_triggers();
  const ::sync_pb::GetUpdateTriggers& get_update_triggers() const;
  ::sync_pb::GetUpdateTriggers* release_get_update_triggers();
  ::sync_pb::GetUpdateTriggers* mutable_get_update_triggers();
  void set_allocated_get_update_triggers(::sync_pb::GetUpdateTriggers* get_update_triggers);

  // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
  bool has_gc_directive() const;
  void clear_gc_directive();
  const ::sync_pb::GarbageCollectionDirective& gc_directive() const;
  ::sync_pb::GarbageCollectionDirective* release_gc_directive();
  ::sync_pb::GarbageCollectionDirective* mutable_gc_directive();
  void set_allocated_gc_directive(::sync_pb::GarbageCollectionDirective* gc_directive);

  // optional int64 timestamp_token_for_migration = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_timestamp_token_for_migration() const;
  PROTOBUF_DEPRECATED void clear_timestamp_token_for_migration();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 timestamp_token_for_migration() const;
  PROTOBUF_DEPRECATED void set_timestamp_token_for_migration(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 data_type_id = 1;
  bool has_data_type_id() const;
  void clear_data_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_id() const;
  void set_data_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.DataTypeProgressMarker)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_hint_;
  ::sync_pb::GetUpdateTriggers* get_update_triggers_;
  ::sync_pb::GarbageCollectionDirective* gc_directive_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_token_for_migration_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_id_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class GetUpdatesMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GetUpdatesMessage) */ {
 public:
  GetUpdatesMessage();
  virtual ~GetUpdatesMessage();

  GetUpdatesMessage(const GetUpdatesMessage& from);
  GetUpdatesMessage(GetUpdatesMessage&& from) noexcept
    : GetUpdatesMessage() {
    *this = ::std::move(from);
  }

  inline GetUpdatesMessage& operator=(const GetUpdatesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUpdatesMessage& operator=(GetUpdatesMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GetUpdatesMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUpdatesMessage* internal_default_instance() {
    return reinterpret_cast<const GetUpdatesMessage*>(
               &_GetUpdatesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetUpdatesMessage& a, GetUpdatesMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUpdatesMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUpdatesMessage* New() const final {
    return CreateMaybeMessage<GetUpdatesMessage>(nullptr);
  }

  GetUpdatesMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUpdatesMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetUpdatesMessage& from);
  void MergeFrom(const GetUpdatesMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetUpdatesMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GetUpdatesMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromProgressMarkerFieldNumber = 6,
    kClientContextsFieldNumber = 11,
    kCallerInfoFieldNumber = 2,
    kBatchSizeFieldNumber = 5,
    kGetUpdatesOriginFieldNumber = 9,
    kStreamingFieldNumber = 7,
    kNeedEncryptionKeyFieldNumber = 8,
    kCreateMobileBookmarksFolderFieldNumber = 1000,
    kIsRetryFieldNumber = 10,
    kFetchFoldersFieldNumber = 3,
  };
  // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
  int from_progress_marker_size() const;
  void clear_from_progress_marker();
  ::sync_pb::DataTypeProgressMarker* mutable_from_progress_marker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >*
      mutable_from_progress_marker();
  const ::sync_pb::DataTypeProgressMarker& from_progress_marker(int index) const;
  ::sync_pb::DataTypeProgressMarker* add_from_progress_marker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >&
      from_progress_marker() const;

  // repeated .sync_pb.DataTypeContext client_contexts = 11;
  int client_contexts_size() const;
  void clear_client_contexts();
  ::sync_pb::DataTypeContext* mutable_client_contexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >*
      mutable_client_contexts();
  const ::sync_pb::DataTypeContext& client_contexts(int index) const;
  ::sync_pb::DataTypeContext* add_client_contexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >&
      client_contexts() const;

  // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
  bool has_caller_info() const;
  void clear_caller_info();
  const ::sync_pb::GetUpdatesCallerInfo& caller_info() const;
  ::sync_pb::GetUpdatesCallerInfo* release_caller_info();
  ::sync_pb::GetUpdatesCallerInfo* mutable_caller_info();
  void set_allocated_caller_info(::sync_pb::GetUpdatesCallerInfo* caller_info);

  // optional int32 batch_size = 5;
  bool has_batch_size() const;
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
  bool has_get_updates_origin() const;
  void clear_get_updates_origin();
  ::sync_pb::SyncEnums_GetUpdatesOrigin get_updates_origin() const;
  void set_get_updates_origin(::sync_pb::SyncEnums_GetUpdatesOrigin value);

  // optional bool streaming = 7 [default = false];
  bool has_streaming() const;
  void clear_streaming();
  bool streaming() const;
  void set_streaming(bool value);

  // optional bool need_encryption_key = 8 [default = false];
  bool has_need_encryption_key() const;
  void clear_need_encryption_key();
  bool need_encryption_key() const;
  void set_need_encryption_key(bool value);

  // optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];
  PROTOBUF_DEPRECATED bool has_create_mobile_bookmarks_folder() const;
  PROTOBUF_DEPRECATED void clear_create_mobile_bookmarks_folder();
  PROTOBUF_DEPRECATED bool create_mobile_bookmarks_folder() const;
  PROTOBUF_DEPRECATED void set_create_mobile_bookmarks_folder(bool value);

  // optional bool is_retry = 10 [default = false];
  bool has_is_retry() const;
  void clear_is_retry();
  bool is_retry() const;
  void set_is_retry(bool value);

  // optional bool fetch_folders = 3 [default = true];
  bool has_fetch_folders() const;
  void clear_fetch_folders();
  bool fetch_folders() const;
  void set_fetch_folders(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.GetUpdatesMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker > from_progress_marker_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext > client_contexts_;
  ::sync_pb::GetUpdatesCallerInfo* caller_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size_;
  int get_updates_origin_;
  bool streaming_;
  bool need_encryption_key_;
  bool create_mobile_bookmarks_folder_;
  bool is_retry_;
  bool fetch_folders_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class ClearServerDataMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ClearServerDataMessage) */ {
 public:
  ClearServerDataMessage();
  virtual ~ClearServerDataMessage();

  ClearServerDataMessage(const ClearServerDataMessage& from);
  ClearServerDataMessage(ClearServerDataMessage&& from) noexcept
    : ClearServerDataMessage() {
    *this = ::std::move(from);
  }

  inline ClearServerDataMessage& operator=(const ClearServerDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearServerDataMessage& operator=(ClearServerDataMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClearServerDataMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearServerDataMessage* internal_default_instance() {
    return reinterpret_cast<const ClearServerDataMessage*>(
               &_ClearServerDataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ClearServerDataMessage& a, ClearServerDataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearServerDataMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearServerDataMessage* New() const final {
    return CreateMaybeMessage<ClearServerDataMessage>(nullptr);
  }

  ClearServerDataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearServerDataMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearServerDataMessage& from);
  void MergeFrom(const ClearServerDataMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearServerDataMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ClearServerDataMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.ClearServerDataMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class ClearServerDataResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ClearServerDataResponse) */ {
 public:
  ClearServerDataResponse();
  virtual ~ClearServerDataResponse();

  ClearServerDataResponse(const ClearServerDataResponse& from);
  ClearServerDataResponse(ClearServerDataResponse&& from) noexcept
    : ClearServerDataResponse() {
    *this = ::std::move(from);
  }

  inline ClearServerDataResponse& operator=(const ClearServerDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearServerDataResponse& operator=(ClearServerDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClearServerDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearServerDataResponse* internal_default_instance() {
    return reinterpret_cast<const ClearServerDataResponse*>(
               &_ClearServerDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClearServerDataResponse& a, ClearServerDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearServerDataResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearServerDataResponse* New() const final {
    return CreateMaybeMessage<ClearServerDataResponse>(nullptr);
  }

  ClearServerDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearServerDataResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearServerDataResponse& from);
  void MergeFrom(const ClearServerDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearServerDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ClearServerDataResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.ClearServerDataResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class ChipBag :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ChipBag) */ {
 public:
  ChipBag();
  virtual ~ChipBag();

  ChipBag(const ChipBag& from);
  ChipBag(ChipBag&& from) noexcept
    : ChipBag() {
    *this = ::std::move(from);
  }

  inline ChipBag& operator=(const ChipBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChipBag& operator=(ChipBag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChipBag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChipBag* internal_default_instance() {
    return reinterpret_cast<const ChipBag*>(
               &_ChipBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ChipBag& a, ChipBag& b) {
    a.Swap(&b);
  }
  inline void Swap(ChipBag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChipBag* New() const final {
    return CreateMaybeMessage<ChipBag>(nullptr);
  }

  ChipBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChipBag>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChipBag& from);
  void MergeFrom(const ChipBag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChipBag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ChipBag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerChipsFieldNumber = 1,
  };
  // optional bytes server_chips = 1;
  bool has_server_chips() const;
  void clear_server_chips();
  const std::string& server_chips() const;
  void set_server_chips(const std::string& value);
  void set_server_chips(std::string&& value);
  void set_server_chips(const char* value);
  void set_server_chips(const void* value, size_t size);
  std::string* mutable_server_chips();
  std::string* release_server_chips();
  void set_allocated_server_chips(std::string* server_chips);

  // @@protoc_insertion_point(class_scope:sync_pb.ChipBag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_chips_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class ClientStatus :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ClientStatus) */ {
 public:
  ClientStatus();
  virtual ~ClientStatus();

  ClientStatus(const ClientStatus& from);
  ClientStatus(ClientStatus&& from) noexcept
    : ClientStatus() {
    *this = ::std::move(from);
  }

  inline ClientStatus& operator=(const ClientStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStatus& operator=(ClientStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStatus* internal_default_instance() {
    return reinterpret_cast<const ClientStatus*>(
               &_ClientStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ClientStatus& a, ClientStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientStatus* New() const final {
    return CreateMaybeMessage<ClientStatus>(nullptr);
  }

  ClientStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClientStatus& from);
  void MergeFrom(const ClientStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ClientStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHierarchyConflictDetectedFieldNumber = 1,
    kIsSyncFeatureEnabledFieldNumber = 2,
  };
  // optional bool hierarchy_conflict_detected = 1;
  bool has_hierarchy_conflict_detected() const;
  void clear_hierarchy_conflict_detected();
  bool hierarchy_conflict_detected() const;
  void set_hierarchy_conflict_detected(bool value);

  // optional bool is_sync_feature_enabled = 2;
  bool has_is_sync_feature_enabled() const;
  void clear_is_sync_feature_enabled();
  bool is_sync_feature_enabled() const;
  void set_is_sync_feature_enabled(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.ClientStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool hierarchy_conflict_detected_;
  bool is_sync_feature_enabled_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class DataTypeContext :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.DataTypeContext) */ {
 public:
  DataTypeContext();
  virtual ~DataTypeContext();

  DataTypeContext(const DataTypeContext& from);
  DataTypeContext(DataTypeContext&& from) noexcept
    : DataTypeContext() {
    *this = ::std::move(from);
  }

  inline DataTypeContext& operator=(const DataTypeContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataTypeContext& operator=(DataTypeContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DataTypeContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataTypeContext* internal_default_instance() {
    return reinterpret_cast<const DataTypeContext*>(
               &_DataTypeContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DataTypeContext& a, DataTypeContext& b) {
    a.Swap(&b);
  }
  inline void Swap(DataTypeContext* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataTypeContext* New() const final {
    return CreateMaybeMessage<DataTypeContext>(nullptr);
  }

  DataTypeContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataTypeContext>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DataTypeContext& from);
  void MergeFrom(const DataTypeContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataTypeContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.DataTypeContext";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 2,
    kVersionFieldNumber = 3,
    kDataTypeIdFieldNumber = 1,
  };
  // optional bytes context = 2;
  bool has_context() const;
  void clear_context();
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);

  // optional int64 version = 3;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 data_type_id = 1;
  bool has_data_type_id() const;
  void clear_data_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_id() const;
  void set_data_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.DataTypeContext)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_id_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class ClientToServerMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ClientToServerMessage) */ {
 public:
  ClientToServerMessage();
  virtual ~ClientToServerMessage();

  ClientToServerMessage(const ClientToServerMessage& from);
  ClientToServerMessage(ClientToServerMessage&& from) noexcept
    : ClientToServerMessage() {
    *this = ::std::move(from);
  }

  inline ClientToServerMessage& operator=(const ClientToServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientToServerMessage& operator=(ClientToServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientToServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientToServerMessage* internal_default_instance() {
    return reinterpret_cast<const ClientToServerMessage*>(
               &_ClientToServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ClientToServerMessage& a, ClientToServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientToServerMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientToServerMessage* New() const final {
    return CreateMaybeMessage<ClientToServerMessage>(nullptr);
  }

  ClientToServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientToServerMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClientToServerMessage& from);
  void MergeFrom(const ClientToServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientToServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ClientToServerMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientToServerMessage_Contents Contents;
  static constexpr Contents COMMIT =
    ClientToServerMessage_Contents_COMMIT;
  static constexpr Contents GET_UPDATES =
    ClientToServerMessage_Contents_GET_UPDATES;
  static constexpr Contents DEPRECATED_3 =
    ClientToServerMessage_Contents_DEPRECATED_3;
  static constexpr Contents DEPRECATED_4 =
    ClientToServerMessage_Contents_DEPRECATED_4;
  static constexpr Contents CLEAR_SERVER_DATA =
    ClientToServerMessage_Contents_CLEAR_SERVER_DATA;
  static inline bool Contents_IsValid(int value) {
    return ClientToServerMessage_Contents_IsValid(value);
  }
  static constexpr Contents Contents_MIN =
    ClientToServerMessage_Contents_Contents_MIN;
  static constexpr Contents Contents_MAX =
    ClientToServerMessage_Contents_Contents_MAX;
  static constexpr int Contents_ARRAYSIZE =
    ClientToServerMessage_Contents_Contents_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Contents_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Contents>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Contents_Name.");
    return ClientToServerMessage_Contents_Name(enum_t_value);
  }
  static inline bool Contents_Parse(const std::string& name,
      Contents* value) {
    return ClientToServerMessage_Contents_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShareFieldNumber = 1,
    kStoreBirthdayFieldNumber = 7,
    kApiKeyFieldNumber = 12,
    kInvalidatorClientIdFieldNumber = 14,
    kCommitFieldNumber = 4,
    kGetUpdatesFieldNumber = 5,
    kDebugInfoFieldNumber = 10,
    kBagOfChipsFieldNumber = 11,
    kClientStatusFieldNumber = 13,
    kClearServerDataFieldNumber = 15,
    kSyncProblemDetectedFieldNumber = 8,
    kProtocolVersionFieldNumber = 2,
    kMessageContentsFieldNumber = 3,
  };
  // required string share = 1;
  bool has_share() const;
  void clear_share();
  const std::string& share() const;
  void set_share(const std::string& value);
  void set_share(std::string&& value);
  void set_share(const char* value);
  void set_share(const char* value, size_t size);
  std::string* mutable_share();
  std::string* release_share();
  void set_allocated_share(std::string* share);

  // optional string store_birthday = 7;
  bool has_store_birthday() const;
  void clear_store_birthday();
  const std::string& store_birthday() const;
  void set_store_birthday(const std::string& value);
  void set_store_birthday(std::string&& value);
  void set_store_birthday(const char* value);
  void set_store_birthday(const char* value, size_t size);
  std::string* mutable_store_birthday();
  std::string* release_store_birthday();
  void set_allocated_store_birthday(std::string* store_birthday);

  // optional string api_key = 12;
  bool has_api_key() const;
  void clear_api_key();
  const std::string& api_key() const;
  void set_api_key(const std::string& value);
  void set_api_key(std::string&& value);
  void set_api_key(const char* value);
  void set_api_key(const char* value, size_t size);
  std::string* mutable_api_key();
  std::string* release_api_key();
  void set_allocated_api_key(std::string* api_key);

  // optional string invalidator_client_id = 14;
  bool has_invalidator_client_id() const;
  void clear_invalidator_client_id();
  const std::string& invalidator_client_id() const;
  void set_invalidator_client_id(const std::string& value);
  void set_invalidator_client_id(std::string&& value);
  void set_invalidator_client_id(const char* value);
  void set_invalidator_client_id(const char* value, size_t size);
  std::string* mutable_invalidator_client_id();
  std::string* release_invalidator_client_id();
  void set_allocated_invalidator_client_id(std::string* invalidator_client_id);

  // optional .sync_pb.CommitMessage commit = 4;
  bool has_commit() const;
  void clear_commit();
  const ::sync_pb::CommitMessage& commit() const;
  ::sync_pb::CommitMessage* release_commit();
  ::sync_pb::CommitMessage* mutable_commit();
  void set_allocated_commit(::sync_pb::CommitMessage* commit);

  // optional .sync_pb.GetUpdatesMessage get_updates = 5;
  bool has_get_updates() const;
  void clear_get_updates();
  const ::sync_pb::GetUpdatesMessage& get_updates() const;
  ::sync_pb::GetUpdatesMessage* release_get_updates();
  ::sync_pb::GetUpdatesMessage* mutable_get_updates();
  void set_allocated_get_updates(::sync_pb::GetUpdatesMessage* get_updates);

  // optional .sync_pb.DebugInfo debug_info = 10;
  bool has_debug_info() const;
  void clear_debug_info();
  const ::sync_pb::DebugInfo& debug_info() const;
  ::sync_pb::DebugInfo* release_debug_info();
  ::sync_pb::DebugInfo* mutable_debug_info();
  void set_allocated_debug_info(::sync_pb::DebugInfo* debug_info);

  // optional .sync_pb.ChipBag bag_of_chips = 11;
  bool has_bag_of_chips() const;
  void clear_bag_of_chips();
  const ::sync_pb::ChipBag& bag_of_chips() const;
  ::sync_pb::ChipBag* release_bag_of_chips();
  ::sync_pb::ChipBag* mutable_bag_of_chips();
  void set_allocated_bag_of_chips(::sync_pb::ChipBag* bag_of_chips);

  // optional .sync_pb.ClientStatus client_status = 13;
  bool has_client_status() const;
  void clear_client_status();
  const ::sync_pb::ClientStatus& client_status() const;
  ::sync_pb::ClientStatus* release_client_status();
  ::sync_pb::ClientStatus* mutable_client_status();
  void set_allocated_client_status(::sync_pb::ClientStatus* client_status);

  // optional .sync_pb.ClearServerDataMessage clear_server_data = 15;
  bool has_clear_server_data() const;
  void clear_clear_server_data();
  const ::sync_pb::ClearServerDataMessage& clear_server_data() const;
  ::sync_pb::ClearServerDataMessage* release_clear_server_data();
  ::sync_pb::ClearServerDataMessage* mutable_clear_server_data();
  void set_allocated_clear_server_data(::sync_pb::ClearServerDataMessage* clear_server_data);

  // optional bool sync_problem_detected = 8 [default = false];
  bool has_sync_problem_detected() const;
  void clear_sync_problem_detected();
  bool sync_problem_detected() const;
  void set_sync_problem_detected(bool value);

  // optional int32 protocol_version = 2 [default = 52];
  bool has_protocol_version() const;
  void clear_protocol_version();
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
  bool has_message_contents() const;
  void clear_message_contents();
  ::sync_pb::ClientToServerMessage_Contents message_contents() const;
  void set_message_contents(::sync_pb::ClientToServerMessage_Contents value);

  // @@protoc_insertion_point(class_scope:sync_pb.ClientToServerMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_birthday_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invalidator_client_id_;
  ::sync_pb::CommitMessage* commit_;
  ::sync_pb::GetUpdatesMessage* get_updates_;
  ::sync_pb::DebugInfo* debug_info_;
  ::sync_pb::ChipBag* bag_of_chips_;
  ::sync_pb::ClientStatus* client_status_;
  ::sync_pb::ClearServerDataMessage* clear_server_data_;
  bool sync_problem_detected_;
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_version_;
  int message_contents_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class GetCrashInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GetCrashInfoRequest) */ {
 public:
  GetCrashInfoRequest();
  virtual ~GetCrashInfoRequest();

  GetCrashInfoRequest(const GetCrashInfoRequest& from);
  GetCrashInfoRequest(GetCrashInfoRequest&& from) noexcept
    : GetCrashInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetCrashInfoRequest& operator=(const GetCrashInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCrashInfoRequest& operator=(GetCrashInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GetCrashInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCrashInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetCrashInfoRequest*>(
               &_GetCrashInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetCrashInfoRequest& a, GetCrashInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCrashInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCrashInfoRequest* New() const final {
    return CreateMaybeMessage<GetCrashInfoRequest>(nullptr);
  }

  GetCrashInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCrashInfoRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetCrashInfoRequest& from);
  void MergeFrom(const GetCrashInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetCrashInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GetCrashInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrashIdFieldNumber = 1,
    kCrashTimeMillisFieldNumber = 2,
  };
  // optional string crash_id = 1;
  bool has_crash_id() const;
  void clear_crash_id();
  const std::string& crash_id() const;
  void set_crash_id(const std::string& value);
  void set_crash_id(std::string&& value);
  void set_crash_id(const char* value);
  void set_crash_id(const char* value, size_t size);
  std::string* mutable_crash_id();
  std::string* release_crash_id();
  void set_allocated_crash_id(std::string* crash_id);

  // optional int64 crash_time_millis = 2;
  bool has_crash_time_millis() const;
  void clear_crash_time_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 crash_time_millis() const;
  void set_crash_time_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.GetCrashInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crash_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 crash_time_millis_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class GetCrashInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GetCrashInfoResponse) */ {
 public:
  GetCrashInfoResponse();
  virtual ~GetCrashInfoResponse();

  GetCrashInfoResponse(const GetCrashInfoResponse& from);
  GetCrashInfoResponse(GetCrashInfoResponse&& from) noexcept
    : GetCrashInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetCrashInfoResponse& operator=(const GetCrashInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCrashInfoResponse& operator=(GetCrashInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GetCrashInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCrashInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetCrashInfoResponse*>(
               &_GetCrashInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetCrashInfoResponse& a, GetCrashInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCrashInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCrashInfoResponse* New() const final {
    return CreateMaybeMessage<GetCrashInfoResponse>(nullptr);
  }

  GetCrashInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCrashInfoResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetCrashInfoResponse& from);
  void MergeFrom(const GetCrashInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetCrashInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GetCrashInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackIdFieldNumber = 1,
    kCrashTimeMillisFieldNumber = 2,
  };
  // optional string stack_id = 1;
  bool has_stack_id() const;
  void clear_stack_id();
  const std::string& stack_id() const;
  void set_stack_id(const std::string& value);
  void set_stack_id(std::string&& value);
  void set_stack_id(const char* value);
  void set_stack_id(const char* value, size_t size);
  std::string* mutable_stack_id();
  std::string* release_stack_id();
  void set_allocated_stack_id(std::string* stack_id);

  // optional int64 crash_time_millis = 2;
  bool has_crash_time_millis() const;
  void clear_crash_time_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 crash_time_millis() const;
  void set_crash_time_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.GetCrashInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stack_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 crash_time_millis_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class CommitResponse_EntryResponse_DatatypeSpecificError :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError) */ {
 public:
  CommitResponse_EntryResponse_DatatypeSpecificError();
  virtual ~CommitResponse_EntryResponse_DatatypeSpecificError();

  CommitResponse_EntryResponse_DatatypeSpecificError(const CommitResponse_EntryResponse_DatatypeSpecificError& from);
  CommitResponse_EntryResponse_DatatypeSpecificError(CommitResponse_EntryResponse_DatatypeSpecificError&& from) noexcept
    : CommitResponse_EntryResponse_DatatypeSpecificError() {
    *this = ::std::move(from);
  }

  inline CommitResponse_EntryResponse_DatatypeSpecificError& operator=(const CommitResponse_EntryResponse_DatatypeSpecificError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitResponse_EntryResponse_DatatypeSpecificError& operator=(CommitResponse_EntryResponse_DatatypeSpecificError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CommitResponse_EntryResponse_DatatypeSpecificError& default_instance();

  enum DatatypeErrorCase {
    kSharingMessageError = 1,
    DATATYPE_ERROR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitResponse_EntryResponse_DatatypeSpecificError* internal_default_instance() {
    return reinterpret_cast<const CommitResponse_EntryResponse_DatatypeSpecificError*>(
               &_CommitResponse_EntryResponse_DatatypeSpecificError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommitResponse_EntryResponse_DatatypeSpecificError& a, CommitResponse_EntryResponse_DatatypeSpecificError& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitResponse_EntryResponse_DatatypeSpecificError* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitResponse_EntryResponse_DatatypeSpecificError* New() const final {
    return CreateMaybeMessage<CommitResponse_EntryResponse_DatatypeSpecificError>(nullptr);
  }

  CommitResponse_EntryResponse_DatatypeSpecificError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitResponse_EntryResponse_DatatypeSpecificError>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CommitResponse_EntryResponse_DatatypeSpecificError& from);
  void MergeFrom(const CommitResponse_EntryResponse_DatatypeSpecificError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitResponse_EntryResponse_DatatypeSpecificError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharingMessageErrorFieldNumber = 1,
  };
  // optional .sync_pb.SharingMessageCommitError sharing_message_error = 1;
  bool has_sharing_message_error() const;
  void clear_sharing_message_error();
  const ::sync_pb::SharingMessageCommitError& sharing_message_error() const;
  ::sync_pb::SharingMessageCommitError* release_sharing_message_error();
  ::sync_pb::SharingMessageCommitError* mutable_sharing_message_error();
  void set_allocated_sharing_message_error(::sync_pb::SharingMessageCommitError* sharing_message_error);

  void clear_datatype_error();
  DatatypeErrorCase datatype_error_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError)
 private:
  class _Internal;
  void set_has_sharing_message_error();

  inline bool has_datatype_error() const;
  inline void clear_has_datatype_error();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union DatatypeErrorUnion {
    DatatypeErrorUnion() {}
    ::sync_pb::SharingMessageCommitError* sharing_message_error_;
  } datatype_error_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class CommitResponse_EntryResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.CommitResponse.EntryResponse) */ {
 public:
  CommitResponse_EntryResponse();
  virtual ~CommitResponse_EntryResponse();

  CommitResponse_EntryResponse(const CommitResponse_EntryResponse& from);
  CommitResponse_EntryResponse(CommitResponse_EntryResponse&& from) noexcept
    : CommitResponse_EntryResponse() {
    *this = ::std::move(from);
  }

  inline CommitResponse_EntryResponse& operator=(const CommitResponse_EntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitResponse_EntryResponse& operator=(CommitResponse_EntryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CommitResponse_EntryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitResponse_EntryResponse* internal_default_instance() {
    return reinterpret_cast<const CommitResponse_EntryResponse*>(
               &_CommitResponse_EntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommitResponse_EntryResponse& a, CommitResponse_EntryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitResponse_EntryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitResponse_EntryResponse* New() const final {
    return CreateMaybeMessage<CommitResponse_EntryResponse>(nullptr);
  }

  CommitResponse_EntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitResponse_EntryResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CommitResponse_EntryResponse& from);
  void MergeFrom(const CommitResponse_EntryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitResponse_EntryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.CommitResponse.EntryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CommitResponse_EntryResponse_DatatypeSpecificError DatatypeSpecificError;

  // accessors -------------------------------------------------------

  enum : int {
    kIdStringFieldNumber = 3,
    kParentIdStringFieldNumber = 4,
    kNameFieldNumber = 7,
    kNonUniqueNameFieldNumber = 8,
    kErrorMessageFieldNumber = 9,
    kDatatypeSpecificErrorFieldNumber = 11,
    kVersionFieldNumber = 6,
    kMtimeFieldNumber = 10,
    kResponseTypeFieldNumber = 2,
  };
  // optional string id_string = 3;
  bool has_id_string() const;
  void clear_id_string();
  const std::string& id_string() const;
  void set_id_string(const std::string& value);
  void set_id_string(std::string&& value);
  void set_id_string(const char* value);
  void set_id_string(const char* value, size_t size);
  std::string* mutable_id_string();
  std::string* release_id_string();
  void set_allocated_id_string(std::string* id_string);

  // optional string parent_id_string = 4;
  bool has_parent_id_string() const;
  void clear_parent_id_string();
  const std::string& parent_id_string() const;
  void set_parent_id_string(const std::string& value);
  void set_parent_id_string(std::string&& value);
  void set_parent_id_string(const char* value);
  void set_parent_id_string(const char* value, size_t size);
  std::string* mutable_parent_id_string();
  std::string* release_parent_id_string();
  void set_allocated_parent_id_string(std::string* parent_id_string);

  // optional string name = 7;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string non_unique_name = 8;
  bool has_non_unique_name() const;
  void clear_non_unique_name();
  const std::string& non_unique_name() const;
  void set_non_unique_name(const std::string& value);
  void set_non_unique_name(std::string&& value);
  void set_non_unique_name(const char* value);
  void set_non_unique_name(const char* value, size_t size);
  std::string* mutable_non_unique_name();
  std::string* release_non_unique_name();
  void set_allocated_non_unique_name(std::string* non_unique_name);

  // optional string error_message = 9;
  bool has_error_message() const;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);

  // optional .sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError datatype_specific_error = 11;
  bool has_datatype_specific_error() const;
  void clear_datatype_specific_error();
  const ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError& datatype_specific_error() const;
  ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* release_datatype_specific_error();
  ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* mutable_datatype_specific_error();
  void set_allocated_datatype_specific_error(::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* datatype_specific_error);

  // optional int64 version = 6;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mtime = 10;
  bool has_mtime() const;
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::int64 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .sync_pb.CommitResponse.ResponseType response_type = 2;
  bool has_response_type() const;
  void clear_response_type();
  ::sync_pb::CommitResponse_ResponseType response_type() const;
  void set_response_type(::sync_pb::CommitResponse_ResponseType value);

  // @@protoc_insertion_point(class_scope:sync_pb.CommitResponse.EntryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr non_unique_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* datatype_specific_error_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 mtime_;
  int response_type_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class CommitResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.CommitResponse) */ {
 public:
  CommitResponse();
  virtual ~CommitResponse();

  CommitResponse(const CommitResponse& from);
  CommitResponse(CommitResponse&& from) noexcept
    : CommitResponse() {
    *this = ::std::move(from);
  }

  inline CommitResponse& operator=(const CommitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitResponse& operator=(CommitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CommitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitResponse* internal_default_instance() {
    return reinterpret_cast<const CommitResponse*>(
               &_CommitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CommitResponse& a, CommitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitResponse* New() const final {
    return CreateMaybeMessage<CommitResponse>(nullptr);
  }

  CommitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CommitResponse& from);
  void MergeFrom(const CommitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.CommitResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CommitResponse_EntryResponse EntryResponse;

  typedef CommitResponse_ResponseType ResponseType;
  static constexpr ResponseType SUCCESS =
    CommitResponse_ResponseType_SUCCESS;
  static constexpr ResponseType CONFLICT =
    CommitResponse_ResponseType_CONFLICT;
  static constexpr ResponseType RETRY =
    CommitResponse_ResponseType_RETRY;
  static constexpr ResponseType INVALID_MESSAGE =
    CommitResponse_ResponseType_INVALID_MESSAGE;
  static constexpr ResponseType OVER_QUOTA =
    CommitResponse_ResponseType_OVER_QUOTA;
  static constexpr ResponseType TRANSIENT_ERROR =
    CommitResponse_ResponseType_TRANSIENT_ERROR;
  static inline bool ResponseType_IsValid(int value) {
    return CommitResponse_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    CommitResponse_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    CommitResponse_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    CommitResponse_ResponseType_ResponseType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return CommitResponse_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(const std::string& name,
      ResponseType* value) {
    return CommitResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntryresponseFieldNumber = 1,
  };
  // repeated group EntryResponse = 1 { ... };
  int entryresponse_size() const;
  void clear_entryresponse();
  ::sync_pb::CommitResponse_EntryResponse* mutable_entryresponse(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::CommitResponse_EntryResponse >*
      mutable_entryresponse();
  const ::sync_pb::CommitResponse_EntryResponse& entryresponse(int index) const;
  ::sync_pb::CommitResponse_EntryResponse* add_entryresponse();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::CommitResponse_EntryResponse >&
      entryresponse() const;

  // @@protoc_insertion_point(class_scope:sync_pb.CommitResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::CommitResponse_EntryResponse > entryresponse_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class GetUpdatesResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GetUpdatesResponse) */ {
 public:
  GetUpdatesResponse();
  virtual ~GetUpdatesResponse();

  GetUpdatesResponse(const GetUpdatesResponse& from);
  GetUpdatesResponse(GetUpdatesResponse&& from) noexcept
    : GetUpdatesResponse() {
    *this = ::std::move(from);
  }

  inline GetUpdatesResponse& operator=(const GetUpdatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUpdatesResponse& operator=(GetUpdatesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GetUpdatesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUpdatesResponse* internal_default_instance() {
    return reinterpret_cast<const GetUpdatesResponse*>(
               &_GetUpdatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetUpdatesResponse& a, GetUpdatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUpdatesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUpdatesResponse* New() const final {
    return CreateMaybeMessage<GetUpdatesResponse>(nullptr);
  }

  GetUpdatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUpdatesResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetUpdatesResponse& from);
  void MergeFrom(const GetUpdatesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetUpdatesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GetUpdatesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kNewProgressMarkerFieldNumber = 5,
    kEncryptionKeysFieldNumber = 6,
    kContextMutationsFieldNumber = 7,
    kChangesRemainingFieldNumber = 4,
  };
  // repeated .sync_pb.SyncEntity entries = 1;
  int entries_size() const;
  void clear_entries();
  ::sync_pb::SyncEntity* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SyncEntity >*
      mutable_entries();
  const ::sync_pb::SyncEntity& entries(int index) const;
  ::sync_pb::SyncEntity* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SyncEntity >&
      entries() const;

  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
  int new_progress_marker_size() const;
  void clear_new_progress_marker();
  ::sync_pb::DataTypeProgressMarker* mutable_new_progress_marker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >*
      mutable_new_progress_marker();
  const ::sync_pb::DataTypeProgressMarker& new_progress_marker(int index) const;
  ::sync_pb::DataTypeProgressMarker* add_new_progress_marker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >&
      new_progress_marker() const;

  // repeated bytes encryption_keys = 6;
  int encryption_keys_size() const;
  void clear_encryption_keys();
  const std::string& encryption_keys(int index) const;
  std::string* mutable_encryption_keys(int index);
  void set_encryption_keys(int index, const std::string& value);
  void set_encryption_keys(int index, std::string&& value);
  void set_encryption_keys(int index, const char* value);
  void set_encryption_keys(int index, const void* value, size_t size);
  std::string* add_encryption_keys();
  void add_encryption_keys(const std::string& value);
  void add_encryption_keys(std::string&& value);
  void add_encryption_keys(const char* value);
  void add_encryption_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& encryption_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_encryption_keys();

  // repeated .sync_pb.DataTypeContext context_mutations = 7;
  int context_mutations_size() const;
  void clear_context_mutations();
  ::sync_pb::DataTypeContext* mutable_context_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >*
      mutable_context_mutations();
  const ::sync_pb::DataTypeContext& context_mutations(int index) const;
  ::sync_pb::DataTypeContext* add_context_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >&
      context_mutations() const;

  // optional int64 changes_remaining = 4;
  bool has_changes_remaining() const;
  void clear_changes_remaining();
  ::PROTOBUF_NAMESPACE_ID::int64 changes_remaining() const;
  void set_changes_remaining(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.GetUpdatesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SyncEntity > entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker > new_progress_marker_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> encryption_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext > context_mutations_;
  ::PROTOBUF_NAMESPACE_ID::int64 changes_remaining_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class ClientToServerResponse_Error :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ClientToServerResponse.Error) */ {
 public:
  ClientToServerResponse_Error();
  virtual ~ClientToServerResponse_Error();

  ClientToServerResponse_Error(const ClientToServerResponse_Error& from);
  ClientToServerResponse_Error(ClientToServerResponse_Error&& from) noexcept
    : ClientToServerResponse_Error() {
    *this = ::std::move(from);
  }

  inline ClientToServerResponse_Error& operator=(const ClientToServerResponse_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientToServerResponse_Error& operator=(ClientToServerResponse_Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientToServerResponse_Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientToServerResponse_Error* internal_default_instance() {
    return reinterpret_cast<const ClientToServerResponse_Error*>(
               &_ClientToServerResponse_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ClientToServerResponse_Error& a, ClientToServerResponse_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientToServerResponse_Error* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientToServerResponse_Error* New() const final {
    return CreateMaybeMessage<ClientToServerResponse_Error>(nullptr);
  }

  ClientToServerResponse_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientToServerResponse_Error>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClientToServerResponse_Error& from);
  void MergeFrom(const ClientToServerResponse_Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientToServerResponse_Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ClientToServerResponse.Error";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDataTypeIdsFieldNumber = 5,
    kErrorDescriptionFieldNumber = 2,
    kUrlFieldNumber = 3,
    kErrorTypeFieldNumber = 1,
    kActionFieldNumber = 4,
  };
  // repeated int32 error_data_type_ids = 5;
  int error_data_type_ids_size() const;
  void clear_error_data_type_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 error_data_type_ids(int index) const;
  void set_error_data_type_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_error_data_type_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      error_data_type_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_error_data_type_ids();

  // optional string error_description = 2;
  bool has_error_description() const;
  void clear_error_description();
  const std::string& error_description() const;
  void set_error_description(const std::string& value);
  void set_error_description(std::string&& value);
  void set_error_description(const char* value);
  void set_error_description(const char* value, size_t size);
  std::string* mutable_error_description();
  std::string* release_error_description();
  void set_allocated_error_description(std::string* error_description);

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
  bool has_error_type() const;
  void clear_error_type();
  ::sync_pb::SyncEnums_ErrorType error_type() const;
  void set_error_type(::sync_pb::SyncEnums_ErrorType value);

  // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
  bool has_action() const;
  void clear_action();
  ::sync_pb::SyncEnums_Action action() const;
  void set_action(::sync_pb::SyncEnums_Action value);

  // @@protoc_insertion_point(class_scope:sync_pb.ClientToServerResponse.Error)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > error_data_type_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int error_type_;
  int action_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class ClientToServerResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ClientToServerResponse) */ {
 public:
  ClientToServerResponse();
  virtual ~ClientToServerResponse();

  ClientToServerResponse(const ClientToServerResponse& from);
  ClientToServerResponse(ClientToServerResponse&& from) noexcept
    : ClientToServerResponse() {
    *this = ::std::move(from);
  }

  inline ClientToServerResponse& operator=(const ClientToServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientToServerResponse& operator=(ClientToServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientToServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientToServerResponse* internal_default_instance() {
    return reinterpret_cast<const ClientToServerResponse*>(
               &_ClientToServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ClientToServerResponse& a, ClientToServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientToServerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientToServerResponse* New() const final {
    return CreateMaybeMessage<ClientToServerResponse>(nullptr);
  }

  ClientToServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientToServerResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClientToServerResponse& from);
  void MergeFrom(const ClientToServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientToServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ClientToServerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientToServerResponse_Error Error;

  // accessors -------------------------------------------------------

  enum : int {
    kMigratedDataTypeIdFieldNumber = 12,
    kErrorMessageFieldNumber = 5,
    kStoreBirthdayFieldNumber = 6,
    kCommitFieldNumber = 1,
    kGetUpdatesFieldNumber = 2,
    kClientCommandFieldNumber = 7,
    kProfilingDataFieldNumber = 8,
    kErrorFieldNumber = 13,
    kNewBagOfChipsFieldNumber = 14,
    kClearServerDataFieldNumber = 15,
    kErrorCodeFieldNumber = 4,
  };
  // repeated int32 migrated_data_type_id = 12;
  int migrated_data_type_id_size() const;
  void clear_migrated_data_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 migrated_data_type_id(int index) const;
  void set_migrated_data_type_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_migrated_data_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      migrated_data_type_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_migrated_data_type_id();

  // optional string error_message = 5;
  bool has_error_message() const;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);

  // optional string store_birthday = 6;
  bool has_store_birthday() const;
  void clear_store_birthday();
  const std::string& store_birthday() const;
  void set_store_birthday(const std::string& value);
  void set_store_birthday(std::string&& value);
  void set_store_birthday(const char* value);
  void set_store_birthday(const char* value, size_t size);
  std::string* mutable_store_birthday();
  std::string* release_store_birthday();
  void set_allocated_store_birthday(std::string* store_birthday);

  // optional .sync_pb.CommitResponse commit = 1;
  bool has_commit() const;
  void clear_commit();
  const ::sync_pb::CommitResponse& commit() const;
  ::sync_pb::CommitResponse* release_commit();
  ::sync_pb::CommitResponse* mutable_commit();
  void set_allocated_commit(::sync_pb::CommitResponse* commit);

  // optional .sync_pb.GetUpdatesResponse get_updates = 2;
  bool has_get_updates() const;
  void clear_get_updates();
  const ::sync_pb::GetUpdatesResponse& get_updates() const;
  ::sync_pb::GetUpdatesResponse* release_get_updates();
  ::sync_pb::GetUpdatesResponse* mutable_get_updates();
  void set_allocated_get_updates(::sync_pb::GetUpdatesResponse* get_updates);

  // optional .sync_pb.ClientCommand client_command = 7;
  bool has_client_command() const;
  void clear_client_command();
  const ::sync_pb::ClientCommand& client_command() const;
  ::sync_pb::ClientCommand* release_client_command();
  ::sync_pb::ClientCommand* mutable_client_command();
  void set_allocated_client_command(::sync_pb::ClientCommand* client_command);

  // optional .sync_pb.ProfilingData profiling_data = 8;
  bool has_profiling_data() const;
  void clear_profiling_data();
  const ::sync_pb::ProfilingData& profiling_data() const;
  ::sync_pb::ProfilingData* release_profiling_data();
  ::sync_pb::ProfilingData* mutable_profiling_data();
  void set_allocated_profiling_data(::sync_pb::ProfilingData* profiling_data);

  // optional .sync_pb.ClientToServerResponse.Error error = 13;
  bool has_error() const;
  void clear_error();
  const ::sync_pb::ClientToServerResponse_Error& error() const;
  ::sync_pb::ClientToServerResponse_Error* release_error();
  ::sync_pb::ClientToServerResponse_Error* mutable_error();
  void set_allocated_error(::sync_pb::ClientToServerResponse_Error* error);

  // optional .sync_pb.ChipBag new_bag_of_chips = 14;
  bool has_new_bag_of_chips() const;
  void clear_new_bag_of_chips();
  const ::sync_pb::ChipBag& new_bag_of_chips() const;
  ::sync_pb::ChipBag* release_new_bag_of_chips();
  ::sync_pb::ChipBag* mutable_new_bag_of_chips();
  void set_allocated_new_bag_of_chips(::sync_pb::ChipBag* new_bag_of_chips);

  // optional .sync_pb.ClearServerDataResponse clear_server_data = 15;
  bool has_clear_server_data() const;
  void clear_clear_server_data();
  const ::sync_pb::ClearServerDataResponse& clear_server_data() const;
  ::sync_pb::ClearServerDataResponse* release_clear_server_data();
  ::sync_pb::ClearServerDataResponse* mutable_clear_server_data();
  void set_allocated_clear_server_data(::sync_pb::ClearServerDataResponse* clear_server_data);

  // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
  bool has_error_code() const;
  void clear_error_code();
  ::sync_pb::SyncEnums_ErrorType error_code() const;
  void set_error_code(::sync_pb::SyncEnums_ErrorType value);

  // @@protoc_insertion_point(class_scope:sync_pb.ClientToServerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > migrated_data_type_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_birthday_;
  ::sync_pb::CommitResponse* commit_;
  ::sync_pb::GetUpdatesResponse* get_updates_;
  ::sync_pb::ClientCommand* client_command_;
  ::sync_pb::ProfilingData* profiling_data_;
  ::sync_pb::ClientToServerResponse_Error* error_;
  ::sync_pb::ChipBag* new_bag_of_chips_;
  ::sync_pb::ClearServerDataResponse* clear_server_data_;
  int error_code_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class EventRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.EventRequest) */ {
 public:
  EventRequest();
  virtual ~EventRequest();

  EventRequest(const EventRequest& from);
  EventRequest(EventRequest&& from) noexcept
    : EventRequest() {
    *this = ::std::move(from);
  }

  inline EventRequest& operator=(const EventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventRequest& operator=(EventRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventRequest* internal_default_instance() {
    return reinterpret_cast<const EventRequest*>(
               &_EventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(EventRequest& a, EventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EventRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventRequest* New() const final {
    return CreateMaybeMessage<EventRequest>(nullptr);
  }

  EventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventRequest& from);
  void MergeFrom(const EventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.EventRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncDisabledFieldNumber = 1,
  };
  // optional .sync_pb.SyncDisabledEvent sync_disabled = 1;
  bool has_sync_disabled() const;
  void clear_sync_disabled();
  const ::sync_pb::SyncDisabledEvent& sync_disabled() const;
  ::sync_pb::SyncDisabledEvent* release_sync_disabled();
  ::sync_pb::SyncDisabledEvent* mutable_sync_disabled();
  void set_allocated_sync_disabled(::sync_pb::SyncDisabledEvent* sync_disabled);

  // @@protoc_insertion_point(class_scope:sync_pb.EventRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::SyncDisabledEvent* sync_disabled_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class EventResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.EventResponse) */ {
 public:
  EventResponse();
  virtual ~EventResponse();

  EventResponse(const EventResponse& from);
  EventResponse(EventResponse&& from) noexcept
    : EventResponse() {
    *this = ::std::move(from);
  }

  inline EventResponse& operator=(const EventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventResponse& operator=(EventResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventResponse* internal_default_instance() {
    return reinterpret_cast<const EventResponse*>(
               &_EventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(EventResponse& a, EventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EventResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventResponse* New() const final {
    return CreateMaybeMessage<EventResponse>(nullptr);
  }

  EventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventResponse& from);
  void MergeFrom(const EventResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.EventResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.EventResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2eproto;
};
// -------------------------------------------------------------------

class SyncDisabledEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SyncDisabledEvent) */ {
 public:
  SyncDisabledEvent();
  virtual ~SyncDisabledEvent();

  SyncDisabledEvent(const SyncDisabledEvent& from);
  SyncDisabledEvent(SyncDisabledEvent&& from) noexcept
    : SyncDisabledEvent() {
    *this = ::std::move(from);
  }

  inline SyncDisabledEvent& operator=(const SyncDisabledEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncDisabledEvent& operator=(SyncDisabledEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SyncDisabledEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncDisabledEvent* internal_default_instance() {
    return reinterpret_cast<const SyncDisabledEvent*>(
               &_SyncDisabledEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SyncDisabledEvent& a, SyncDisabledEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncDisabledEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncDisabledEvent* New() const final {
    return CreateMaybeMessage<SyncDisabledEvent>(nullptr);
  }

  SyncDisabledEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncDisabledEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SyncDisabledEvent& from);
  void MergeFrom(const SyncDisabledEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyncDisabledEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SyncDisabledEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheGuidFieldNumber = 1,
    kStoreBirthdayFieldNumber = 2,
  };
  // optional string cache_guid = 1;
  bool has_cache_guid() const;
  void clear_cache_guid();
  const std::string& cache_guid() const;
  void set_cache_guid(const std::string& value);
  void set_cache_guid(std::string&& value);
  void set_cache_guid(const char* value);
  void set_cache_guid(const char* value, size_t size);
  std::string* mutable_cache_guid();
  std::string* release_cache_guid();
  void set_allocated_cache_guid(std::string* cache_guid);

  // optional string store_birthday = 2;
  bool has_store_birthday() const;
  void clear_store_birthday();
  const std::string& store_birthday() const;
  void set_store_birthday(const std::string& value);
  void set_store_birthday(std::string&& value);
  void set_store_birthday(const char* value);
  void set_store_birthday(const char* value, size_t size);
  std::string* mutable_store_birthday();
  std::string* release_store_birthday();
  void set_allocated_store_birthday(std::string* store_birthday);

  // @@protoc_insertion_point(class_scope:sync_pb.SyncDisabledEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_birthday_;
  friend struct ::TableStruct_sync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProfilingData

// optional int64 meta_data_write_time = 1;
inline bool ProfilingData::has_meta_data_write_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfilingData::clear_meta_data_write_time() {
  meta_data_write_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilingData::meta_data_write_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.meta_data_write_time)
  return meta_data_write_time_;
}
inline void ProfilingData::set_meta_data_write_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  meta_data_write_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.meta_data_write_time)
}

// optional int64 file_data_write_time = 2;
inline bool ProfilingData::has_file_data_write_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfilingData::clear_file_data_write_time() {
  file_data_write_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilingData::file_data_write_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.file_data_write_time)
  return file_data_write_time_;
}
inline void ProfilingData::set_file_data_write_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  file_data_write_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.file_data_write_time)
}

// optional int64 user_lookup_time = 3;
inline bool ProfilingData::has_user_lookup_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfilingData::clear_user_lookup_time() {
  user_lookup_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilingData::user_lookup_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.user_lookup_time)
  return user_lookup_time_;
}
inline void ProfilingData::set_user_lookup_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  user_lookup_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.user_lookup_time)
}

// optional int64 meta_data_read_time = 4;
inline bool ProfilingData::has_meta_data_read_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfilingData::clear_meta_data_read_time() {
  meta_data_read_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilingData::meta_data_read_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.meta_data_read_time)
  return meta_data_read_time_;
}
inline void ProfilingData::set_meta_data_read_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  meta_data_read_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.meta_data_read_time)
}

// optional int64 file_data_read_time = 5;
inline bool ProfilingData::has_file_data_read_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfilingData::clear_file_data_read_time() {
  file_data_read_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilingData::file_data_read_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.file_data_read_time)
  return file_data_read_time_;
}
inline void ProfilingData::set_file_data_read_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  file_data_read_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.file_data_read_time)
}

// optional int64 total_request_time = 6;
inline bool ProfilingData::has_total_request_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProfilingData::clear_total_request_time() {
  total_request_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfilingData::total_request_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.ProfilingData.total_request_time)
  return total_request_time_;
}
inline void ProfilingData::set_total_request_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  total_request_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ProfilingData.total_request_time)
}

// -------------------------------------------------------------------

// EntitySpecifics

// optional .sync_pb.EncryptedData encrypted = 1;
inline bool EntitySpecifics::has_encrypted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::sync_pb::EncryptedData& EntitySpecifics::encrypted() const {
  const ::sync_pb::EncryptedData* p = encrypted_;
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.encrypted)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::EncryptedData*>(
      &::sync_pb::_EncryptedData_default_instance_);
}
inline ::sync_pb::EncryptedData* EntitySpecifics::release_encrypted() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.encrypted)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::EncryptedData* temp = encrypted_;
  encrypted_ = nullptr;
  return temp;
}
inline ::sync_pb::EncryptedData* EntitySpecifics::mutable_encrypted() {
  _has_bits_[0] |= 0x00000001u;
  if (encrypted_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EncryptedData>(GetArenaNoVirtual());
    encrypted_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.encrypted)
  return encrypted_;
}
inline void EntitySpecifics::set_allocated_encrypted(::sync_pb::EncryptedData* encrypted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_);
  }
  if (encrypted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encrypted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_ = encrypted;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EntitySpecifics.encrypted)
}

// optional .sync_pb.AutofillSpecifics autofill = 31729;
inline bool EntitySpecifics::has_autofill() const {
  return specifics_variant_case() == kAutofill;
}
inline void EntitySpecifics::set_has_autofill() {
  _oneof_case_[0] = kAutofill;
}
inline ::sync_pb::AutofillSpecifics* EntitySpecifics::release_autofill() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill)
  if (has_autofill()) {
    clear_has_specifics_variant();
      ::sync_pb::AutofillSpecifics* temp = specifics_variant_.autofill_;
    specifics_variant_.autofill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillSpecifics& EntitySpecifics::autofill() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill)
  return has_autofill()
      ? *specifics_variant_.autofill_
      : *reinterpret_cast< ::sync_pb::AutofillSpecifics*>(&::sync_pb::_AutofillSpecifics_default_instance_);
}
inline ::sync_pb::AutofillSpecifics* EntitySpecifics::mutable_autofill() {
  if (!has_autofill()) {
    clear_specifics_variant();
    set_has_autofill();
    specifics_variant_.autofill_ = CreateMaybeMessage< ::sync_pb::AutofillSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill)
  return specifics_variant_.autofill_;
}

// optional .sync_pb.BookmarkSpecifics bookmark = 32904;
inline bool EntitySpecifics::has_bookmark() const {
  return specifics_variant_case() == kBookmark;
}
inline void EntitySpecifics::set_has_bookmark() {
  _oneof_case_[0] = kBookmark;
}
inline ::sync_pb::BookmarkSpecifics* EntitySpecifics::release_bookmark() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.bookmark)
  if (has_bookmark()) {
    clear_has_specifics_variant();
      ::sync_pb::BookmarkSpecifics* temp = specifics_variant_.bookmark_;
    specifics_variant_.bookmark_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::BookmarkSpecifics& EntitySpecifics::bookmark() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.bookmark)
  return has_bookmark()
      ? *specifics_variant_.bookmark_
      : *reinterpret_cast< ::sync_pb::BookmarkSpecifics*>(&::sync_pb::_BookmarkSpecifics_default_instance_);
}
inline ::sync_pb::BookmarkSpecifics* EntitySpecifics::mutable_bookmark() {
  if (!has_bookmark()) {
    clear_specifics_variant();
    set_has_bookmark();
    specifics_variant_.bookmark_ = CreateMaybeMessage< ::sync_pb::BookmarkSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.bookmark)
  return specifics_variant_.bookmark_;
}

// optional .sync_pb.PreferenceSpecifics preference = 37702;
inline bool EntitySpecifics::has_preference() const {
  return specifics_variant_case() == kPreference;
}
inline void EntitySpecifics::set_has_preference() {
  _oneof_case_[0] = kPreference;
}
inline ::sync_pb::PreferenceSpecifics* EntitySpecifics::release_preference() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.preference)
  if (has_preference()) {
    clear_has_specifics_variant();
      ::sync_pb::PreferenceSpecifics* temp = specifics_variant_.preference_;
    specifics_variant_.preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::PreferenceSpecifics& EntitySpecifics::preference() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.preference)
  return has_preference()
      ? *specifics_variant_.preference_
      : *reinterpret_cast< ::sync_pb::PreferenceSpecifics*>(&::sync_pb::_PreferenceSpecifics_default_instance_);
}
inline ::sync_pb::PreferenceSpecifics* EntitySpecifics::mutable_preference() {
  if (!has_preference()) {
    clear_specifics_variant();
    set_has_preference();
    specifics_variant_.preference_ = CreateMaybeMessage< ::sync_pb::PreferenceSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.preference)
  return specifics_variant_.preference_;
}

// optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
inline bool EntitySpecifics::has_typed_url() const {
  return specifics_variant_case() == kTypedUrl;
}
inline void EntitySpecifics::set_has_typed_url() {
  _oneof_case_[0] = kTypedUrl;
}
inline ::sync_pb::TypedUrlSpecifics* EntitySpecifics::release_typed_url() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.typed_url)
  if (has_typed_url()) {
    clear_has_specifics_variant();
      ::sync_pb::TypedUrlSpecifics* temp = specifics_variant_.typed_url_;
    specifics_variant_.typed_url_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::TypedUrlSpecifics& EntitySpecifics::typed_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.typed_url)
  return has_typed_url()
      ? *specifics_variant_.typed_url_
      : *reinterpret_cast< ::sync_pb::TypedUrlSpecifics*>(&::sync_pb::_TypedUrlSpecifics_default_instance_);
}
inline ::sync_pb::TypedUrlSpecifics* EntitySpecifics::mutable_typed_url() {
  if (!has_typed_url()) {
    clear_specifics_variant();
    set_has_typed_url();
    specifics_variant_.typed_url_ = CreateMaybeMessage< ::sync_pb::TypedUrlSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.typed_url)
  return specifics_variant_.typed_url_;
}

// optional .sync_pb.ThemeSpecifics theme = 41210;
inline bool EntitySpecifics::has_theme() const {
  return specifics_variant_case() == kTheme;
}
inline void EntitySpecifics::set_has_theme() {
  _oneof_case_[0] = kTheme;
}
inline ::sync_pb::ThemeSpecifics* EntitySpecifics::release_theme() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.theme)
  if (has_theme()) {
    clear_has_specifics_variant();
      ::sync_pb::ThemeSpecifics* temp = specifics_variant_.theme_;
    specifics_variant_.theme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ThemeSpecifics& EntitySpecifics::theme() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.theme)
  return has_theme()
      ? *specifics_variant_.theme_
      : *reinterpret_cast< ::sync_pb::ThemeSpecifics*>(&::sync_pb::_ThemeSpecifics_default_instance_);
}
inline ::sync_pb::ThemeSpecifics* EntitySpecifics::mutable_theme() {
  if (!has_theme()) {
    clear_specifics_variant();
    set_has_theme();
    specifics_variant_.theme_ = CreateMaybeMessage< ::sync_pb::ThemeSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.theme)
  return specifics_variant_.theme_;
}

// optional .sync_pb.AppNotification app_notification = 45184 [deprecated = true];
inline bool EntitySpecifics::has_app_notification() const {
  return specifics_variant_case() == kAppNotification;
}
inline void EntitySpecifics::set_has_app_notification() {
  _oneof_case_[0] = kAppNotification;
}
inline ::sync_pb::AppNotification* EntitySpecifics::release_app_notification() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app_notification)
  if (has_app_notification()) {
    clear_has_specifics_variant();
      ::sync_pb::AppNotification* temp = specifics_variant_.app_notification_;
    specifics_variant_.app_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AppNotification& EntitySpecifics::app_notification() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app_notification)
  return has_app_notification()
      ? *specifics_variant_.app_notification_
      : *reinterpret_cast< ::sync_pb::AppNotification*>(&::sync_pb::_AppNotification_default_instance_);
}
inline ::sync_pb::AppNotification* EntitySpecifics::mutable_app_notification() {
  if (!has_app_notification()) {
    clear_specifics_variant();
    set_has_app_notification();
    specifics_variant_.app_notification_ = CreateMaybeMessage< ::sync_pb::AppNotification >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app_notification)
  return specifics_variant_.app_notification_;
}

// optional .sync_pb.PasswordSpecifics password = 45873;
inline bool EntitySpecifics::has_password() const {
  return specifics_variant_case() == kPassword;
}
inline void EntitySpecifics::set_has_password() {
  _oneof_case_[0] = kPassword;
}
inline ::sync_pb::PasswordSpecifics* EntitySpecifics::release_password() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.password)
  if (has_password()) {
    clear_has_specifics_variant();
      ::sync_pb::PasswordSpecifics* temp = specifics_variant_.password_;
    specifics_variant_.password_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::PasswordSpecifics& EntitySpecifics::password() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.password)
  return has_password()
      ? *specifics_variant_.password_
      : *reinterpret_cast< ::sync_pb::PasswordSpecifics*>(&::sync_pb::_PasswordSpecifics_default_instance_);
}
inline ::sync_pb::PasswordSpecifics* EntitySpecifics::mutable_password() {
  if (!has_password()) {
    clear_specifics_variant();
    set_has_password();
    specifics_variant_.password_ = CreateMaybeMessage< ::sync_pb::PasswordSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.password)
  return specifics_variant_.password_;
}

// optional .sync_pb.NigoriSpecifics nigori = 47745;
inline bool EntitySpecifics::has_nigori() const {
  return specifics_variant_case() == kNigori;
}
inline void EntitySpecifics::set_has_nigori() {
  _oneof_case_[0] = kNigori;
}
inline ::sync_pb::NigoriSpecifics* EntitySpecifics::release_nigori() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.nigori)
  if (has_nigori()) {
    clear_has_specifics_variant();
      ::sync_pb::NigoriSpecifics* temp = specifics_variant_.nigori_;
    specifics_variant_.nigori_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::NigoriSpecifics& EntitySpecifics::nigori() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.nigori)
  return has_nigori()
      ? *specifics_variant_.nigori_
      : *reinterpret_cast< ::sync_pb::NigoriSpecifics*>(&::sync_pb::_NigoriSpecifics_default_instance_);
}
inline ::sync_pb::NigoriSpecifics* EntitySpecifics::mutable_nigori() {
  if (!has_nigori()) {
    clear_specifics_variant();
    set_has_nigori();
    specifics_variant_.nigori_ = CreateMaybeMessage< ::sync_pb::NigoriSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.nigori)
  return specifics_variant_.nigori_;
}

// optional .sync_pb.ExtensionSpecifics extension = 48119;
inline bool EntitySpecifics::has_extension() const {
  return specifics_variant_case() == kExtension;
}
inline void EntitySpecifics::set_has_extension() {
  _oneof_case_[0] = kExtension;
}
inline ::sync_pb::ExtensionSpecifics* EntitySpecifics::release_extension() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.extension)
  if (has_extension()) {
    clear_has_specifics_variant();
      ::sync_pb::ExtensionSpecifics* temp = specifics_variant_.extension_;
    specifics_variant_.extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ExtensionSpecifics& EntitySpecifics::extension() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.extension)
  return has_extension()
      ? *specifics_variant_.extension_
      : *reinterpret_cast< ::sync_pb::ExtensionSpecifics*>(&::sync_pb::_ExtensionSpecifics_default_instance_);
}
inline ::sync_pb::ExtensionSpecifics* EntitySpecifics::mutable_extension() {
  if (!has_extension()) {
    clear_specifics_variant();
    set_has_extension();
    specifics_variant_.extension_ = CreateMaybeMessage< ::sync_pb::ExtensionSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.extension)
  return specifics_variant_.extension_;
}

// optional .sync_pb.AppSpecifics app = 48364;
inline bool EntitySpecifics::has_app() const {
  return specifics_variant_case() == kApp;
}
inline void EntitySpecifics::set_has_app() {
  _oneof_case_[0] = kApp;
}
inline ::sync_pb::AppSpecifics* EntitySpecifics::release_app() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app)
  if (has_app()) {
    clear_has_specifics_variant();
      ::sync_pb::AppSpecifics* temp = specifics_variant_.app_;
    specifics_variant_.app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AppSpecifics& EntitySpecifics::app() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app)
  return has_app()
      ? *specifics_variant_.app_
      : *reinterpret_cast< ::sync_pb::AppSpecifics*>(&::sync_pb::_AppSpecifics_default_instance_);
}
inline ::sync_pb::AppSpecifics* EntitySpecifics::mutable_app() {
  if (!has_app()) {
    clear_specifics_variant();
    set_has_app();
    specifics_variant_.app_ = CreateMaybeMessage< ::sync_pb::AppSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app)
  return specifics_variant_.app_;
}

// optional .sync_pb.SessionSpecifics session = 50119;
inline bool EntitySpecifics::has_session() const {
  return specifics_variant_case() == kSession;
}
inline void EntitySpecifics::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline ::sync_pb::SessionSpecifics* EntitySpecifics::release_session() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.session)
  if (has_session()) {
    clear_has_specifics_variant();
      ::sync_pb::SessionSpecifics* temp = specifics_variant_.session_;
    specifics_variant_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SessionSpecifics& EntitySpecifics::session() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.session)
  return has_session()
      ? *specifics_variant_.session_
      : *reinterpret_cast< ::sync_pb::SessionSpecifics*>(&::sync_pb::_SessionSpecifics_default_instance_);
}
inline ::sync_pb::SessionSpecifics* EntitySpecifics::mutable_session() {
  if (!has_session()) {
    clear_specifics_variant();
    set_has_session();
    specifics_variant_.session_ = CreateMaybeMessage< ::sync_pb::SessionSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.session)
  return specifics_variant_.session_;
}

// optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
inline bool EntitySpecifics::has_autofill_profile() const {
  return specifics_variant_case() == kAutofillProfile;
}
inline void EntitySpecifics::set_has_autofill_profile() {
  _oneof_case_[0] = kAutofillProfile;
}
inline ::sync_pb::AutofillProfileSpecifics* EntitySpecifics::release_autofill_profile() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill_profile)
  if (has_autofill_profile()) {
    clear_has_specifics_variant();
      ::sync_pb::AutofillProfileSpecifics* temp = specifics_variant_.autofill_profile_;
    specifics_variant_.autofill_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillProfileSpecifics& EntitySpecifics::autofill_profile() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill_profile)
  return has_autofill_profile()
      ? *specifics_variant_.autofill_profile_
      : *reinterpret_cast< ::sync_pb::AutofillProfileSpecifics*>(&::sync_pb::_AutofillProfileSpecifics_default_instance_);
}
inline ::sync_pb::AutofillProfileSpecifics* EntitySpecifics::mutable_autofill_profile() {
  if (!has_autofill_profile()) {
    clear_specifics_variant();
    set_has_autofill_profile();
    specifics_variant_.autofill_profile_ = CreateMaybeMessage< ::sync_pb::AutofillProfileSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill_profile)
  return specifics_variant_.autofill_profile_;
}

// optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
inline bool EntitySpecifics::has_search_engine() const {
  return specifics_variant_case() == kSearchEngine;
}
inline void EntitySpecifics::set_has_search_engine() {
  _oneof_case_[0] = kSearchEngine;
}
inline ::sync_pb::SearchEngineSpecifics* EntitySpecifics::release_search_engine() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.search_engine)
  if (has_search_engine()) {
    clear_has_specifics_variant();
      ::sync_pb::SearchEngineSpecifics* temp = specifics_variant_.search_engine_;
    specifics_variant_.search_engine_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SearchEngineSpecifics& EntitySpecifics::search_engine() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.search_engine)
  return has_search_engine()
      ? *specifics_variant_.search_engine_
      : *reinterpret_cast< ::sync_pb::SearchEngineSpecifics*>(&::sync_pb::_SearchEngineSpecifics_default_instance_);
}
inline ::sync_pb::SearchEngineSpecifics* EntitySpecifics::mutable_search_engine() {
  if (!has_search_engine()) {
    clear_specifics_variant();
    set_has_search_engine();
    specifics_variant_.search_engine_ = CreateMaybeMessage< ::sync_pb::SearchEngineSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.search_engine)
  return specifics_variant_.search_engine_;
}

// optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
inline bool EntitySpecifics::has_extension_setting() const {
  return specifics_variant_case() == kExtensionSetting;
}
inline void EntitySpecifics::set_has_extension_setting() {
  _oneof_case_[0] = kExtensionSetting;
}
inline ::sync_pb::ExtensionSettingSpecifics* EntitySpecifics::release_extension_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.extension_setting)
  if (has_extension_setting()) {
    clear_has_specifics_variant();
      ::sync_pb::ExtensionSettingSpecifics* temp = specifics_variant_.extension_setting_;
    specifics_variant_.extension_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ExtensionSettingSpecifics& EntitySpecifics::extension_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.extension_setting)
  return has_extension_setting()
      ? *specifics_variant_.extension_setting_
      : *reinterpret_cast< ::sync_pb::ExtensionSettingSpecifics*>(&::sync_pb::_ExtensionSettingSpecifics_default_instance_);
}
inline ::sync_pb::ExtensionSettingSpecifics* EntitySpecifics::mutable_extension_setting() {
  if (!has_extension_setting()) {
    clear_specifics_variant();
    set_has_extension_setting();
    specifics_variant_.extension_setting_ = CreateMaybeMessage< ::sync_pb::ExtensionSettingSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.extension_setting)
  return specifics_variant_.extension_setting_;
}

// optional .sync_pb.AppSettingSpecifics app_setting = 103656;
inline bool EntitySpecifics::has_app_setting() const {
  return specifics_variant_case() == kAppSetting;
}
inline void EntitySpecifics::set_has_app_setting() {
  _oneof_case_[0] = kAppSetting;
}
inline ::sync_pb::AppSettingSpecifics* EntitySpecifics::release_app_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app_setting)
  if (has_app_setting()) {
    clear_has_specifics_variant();
      ::sync_pb::AppSettingSpecifics* temp = specifics_variant_.app_setting_;
    specifics_variant_.app_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AppSettingSpecifics& EntitySpecifics::app_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app_setting)
  return has_app_setting()
      ? *specifics_variant_.app_setting_
      : *reinterpret_cast< ::sync_pb::AppSettingSpecifics*>(&::sync_pb::_AppSettingSpecifics_default_instance_);
}
inline ::sync_pb::AppSettingSpecifics* EntitySpecifics::mutable_app_setting() {
  if (!has_app_setting()) {
    clear_specifics_variant();
    set_has_app_setting();
    specifics_variant_.app_setting_ = CreateMaybeMessage< ::sync_pb::AppSettingSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app_setting)
  return specifics_variant_.app_setting_;
}

// optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
inline bool EntitySpecifics::has_history_delete_directive() const {
  return specifics_variant_case() == kHistoryDeleteDirective;
}
inline void EntitySpecifics::set_has_history_delete_directive() {
  _oneof_case_[0] = kHistoryDeleteDirective;
}
inline ::sync_pb::HistoryDeleteDirectiveSpecifics* EntitySpecifics::release_history_delete_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.history_delete_directive)
  if (has_history_delete_directive()) {
    clear_has_specifics_variant();
      ::sync_pb::HistoryDeleteDirectiveSpecifics* temp = specifics_variant_.history_delete_directive_;
    specifics_variant_.history_delete_directive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::HistoryDeleteDirectiveSpecifics& EntitySpecifics::history_delete_directive() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.history_delete_directive)
  return has_history_delete_directive()
      ? *specifics_variant_.history_delete_directive_
      : *reinterpret_cast< ::sync_pb::HistoryDeleteDirectiveSpecifics*>(&::sync_pb::_HistoryDeleteDirectiveSpecifics_default_instance_);
}
inline ::sync_pb::HistoryDeleteDirectiveSpecifics* EntitySpecifics::mutable_history_delete_directive() {
  if (!has_history_delete_directive()) {
    clear_specifics_variant();
    set_has_history_delete_directive();
    specifics_variant_.history_delete_directive_ = CreateMaybeMessage< ::sync_pb::HistoryDeleteDirectiveSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.history_delete_directive)
  return specifics_variant_.history_delete_directive_;
}

// optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108 [deprecated = true];
inline bool EntitySpecifics::has_synced_notification() const {
  return specifics_variant_case() == kSyncedNotification;
}
inline void EntitySpecifics::set_has_synced_notification() {
  _oneof_case_[0] = kSyncedNotification;
}
inline ::sync_pb::SyncedNotificationSpecifics* EntitySpecifics::release_synced_notification() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.synced_notification)
  if (has_synced_notification()) {
    clear_has_specifics_variant();
      ::sync_pb::SyncedNotificationSpecifics* temp = specifics_variant_.synced_notification_;
    specifics_variant_.synced_notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SyncedNotificationSpecifics& EntitySpecifics::synced_notification() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.synced_notification)
  return has_synced_notification()
      ? *specifics_variant_.synced_notification_
      : *reinterpret_cast< ::sync_pb::SyncedNotificationSpecifics*>(&::sync_pb::_SyncedNotificationSpecifics_default_instance_);
}
inline ::sync_pb::SyncedNotificationSpecifics* EntitySpecifics::mutable_synced_notification() {
  if (!has_synced_notification()) {
    clear_specifics_variant();
    set_has_synced_notification();
    specifics_variant_.synced_notification_ = CreateMaybeMessage< ::sync_pb::SyncedNotificationSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.synced_notification)
  return specifics_variant_.synced_notification_;
}

// optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816 [deprecated = true];
inline bool EntitySpecifics::has_synced_notification_app_info() const {
  return specifics_variant_case() == kSyncedNotificationAppInfo;
}
inline void EntitySpecifics::set_has_synced_notification_app_info() {
  _oneof_case_[0] = kSyncedNotificationAppInfo;
}
inline ::sync_pb::SyncedNotificationAppInfoSpecifics* EntitySpecifics::release_synced_notification_app_info() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.synced_notification_app_info)
  if (has_synced_notification_app_info()) {
    clear_has_specifics_variant();
      ::sync_pb::SyncedNotificationAppInfoSpecifics* temp = specifics_variant_.synced_notification_app_info_;
    specifics_variant_.synced_notification_app_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SyncedNotificationAppInfoSpecifics& EntitySpecifics::synced_notification_app_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.synced_notification_app_info)
  return has_synced_notification_app_info()
      ? *specifics_variant_.synced_notification_app_info_
      : *reinterpret_cast< ::sync_pb::SyncedNotificationAppInfoSpecifics*>(&::sync_pb::_SyncedNotificationAppInfoSpecifics_default_instance_);
}
inline ::sync_pb::SyncedNotificationAppInfoSpecifics* EntitySpecifics::mutable_synced_notification_app_info() {
  if (!has_synced_notification_app_info()) {
    clear_specifics_variant();
    set_has_synced_notification_app_info();
    specifics_variant_.synced_notification_app_info_ = CreateMaybeMessage< ::sync_pb::SyncedNotificationAppInfoSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.synced_notification_app_info)
  return specifics_variant_.synced_notification_app_info_;
}

// optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
inline bool EntitySpecifics::has_device_info() const {
  return specifics_variant_case() == kDeviceInfo;
}
inline void EntitySpecifics::set_has_device_info() {
  _oneof_case_[0] = kDeviceInfo;
}
inline ::sync_pb::DeviceInfoSpecifics* EntitySpecifics::release_device_info() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.device_info)
  if (has_device_info()) {
    clear_has_specifics_variant();
      ::sync_pb::DeviceInfoSpecifics* temp = specifics_variant_.device_info_;
    specifics_variant_.device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::DeviceInfoSpecifics& EntitySpecifics::device_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.device_info)
  return has_device_info()
      ? *specifics_variant_.device_info_
      : *reinterpret_cast< ::sync_pb::DeviceInfoSpecifics*>(&::sync_pb::_DeviceInfoSpecifics_default_instance_);
}
inline ::sync_pb::DeviceInfoSpecifics* EntitySpecifics::mutable_device_info() {
  if (!has_device_info()) {
    clear_specifics_variant();
    set_has_device_info();
    specifics_variant_.device_info_ = CreateMaybeMessage< ::sync_pb::DeviceInfoSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.device_info)
  return specifics_variant_.device_info_;
}

// optional .sync_pb.ExperimentsSpecifics experiments = 161496 [deprecated = true];
inline bool EntitySpecifics::has_experiments() const {
  return specifics_variant_case() == kExperiments;
}
inline void EntitySpecifics::set_has_experiments() {
  _oneof_case_[0] = kExperiments;
}
inline ::sync_pb::ExperimentsSpecifics* EntitySpecifics::release_experiments() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.experiments)
  if (has_experiments()) {
    clear_has_specifics_variant();
      ::sync_pb::ExperimentsSpecifics* temp = specifics_variant_.experiments_;
    specifics_variant_.experiments_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ExperimentsSpecifics& EntitySpecifics::experiments() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.experiments)
  return has_experiments()
      ? *specifics_variant_.experiments_
      : *reinterpret_cast< ::sync_pb::ExperimentsSpecifics*>(&::sync_pb::_ExperimentsSpecifics_default_instance_);
}
inline ::sync_pb::ExperimentsSpecifics* EntitySpecifics::mutable_experiments() {
  if (!has_experiments()) {
    clear_specifics_variant();
    set_has_experiments();
    specifics_variant_.experiments_ = CreateMaybeMessage< ::sync_pb::ExperimentsSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.experiments)
  return specifics_variant_.experiments_;
}

// optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
inline bool EntitySpecifics::has_priority_preference() const {
  return specifics_variant_case() == kPriorityPreference;
}
inline void EntitySpecifics::set_has_priority_preference() {
  _oneof_case_[0] = kPriorityPreference;
}
inline ::sync_pb::PriorityPreferenceSpecifics* EntitySpecifics::release_priority_preference() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.priority_preference)
  if (has_priority_preference()) {
    clear_has_specifics_variant();
      ::sync_pb::PriorityPreferenceSpecifics* temp = specifics_variant_.priority_preference_;
    specifics_variant_.priority_preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::PriorityPreferenceSpecifics& EntitySpecifics::priority_preference() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.priority_preference)
  return has_priority_preference()
      ? *specifics_variant_.priority_preference_
      : *reinterpret_cast< ::sync_pb::PriorityPreferenceSpecifics*>(&::sync_pb::_PriorityPreferenceSpecifics_default_instance_);
}
inline ::sync_pb::PriorityPreferenceSpecifics* EntitySpecifics::mutable_priority_preference() {
  if (!has_priority_preference()) {
    clear_specifics_variant();
    set_has_priority_preference();
    specifics_variant_.priority_preference_ = CreateMaybeMessage< ::sync_pb::PriorityPreferenceSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.priority_preference)
  return specifics_variant_.priority_preference_;
}

// optional .sync_pb.DictionarySpecifics dictionary = 170540;
inline bool EntitySpecifics::has_dictionary() const {
  return specifics_variant_case() == kDictionary;
}
inline void EntitySpecifics::set_has_dictionary() {
  _oneof_case_[0] = kDictionary;
}
inline ::sync_pb::DictionarySpecifics* EntitySpecifics::release_dictionary() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.dictionary)
  if (has_dictionary()) {
    clear_has_specifics_variant();
      ::sync_pb::DictionarySpecifics* temp = specifics_variant_.dictionary_;
    specifics_variant_.dictionary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::DictionarySpecifics& EntitySpecifics::dictionary() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.dictionary)
  return has_dictionary()
      ? *specifics_variant_.dictionary_
      : *reinterpret_cast< ::sync_pb::DictionarySpecifics*>(&::sync_pb::_DictionarySpecifics_default_instance_);
}
inline ::sync_pb::DictionarySpecifics* EntitySpecifics::mutable_dictionary() {
  if (!has_dictionary()) {
    clear_specifics_variant();
    set_has_dictionary();
    specifics_variant_.dictionary_ = CreateMaybeMessage< ::sync_pb::DictionarySpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.dictionary)
  return specifics_variant_.dictionary_;
}

// optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
inline bool EntitySpecifics::has_favicon_tracking() const {
  return specifics_variant_case() == kFaviconTracking;
}
inline void EntitySpecifics::set_has_favicon_tracking() {
  _oneof_case_[0] = kFaviconTracking;
}
inline ::sync_pb::FaviconTrackingSpecifics* EntitySpecifics::release_favicon_tracking() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.favicon_tracking)
  if (has_favicon_tracking()) {
    clear_has_specifics_variant();
      ::sync_pb::FaviconTrackingSpecifics* temp = specifics_variant_.favicon_tracking_;
    specifics_variant_.favicon_tracking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::FaviconTrackingSpecifics& EntitySpecifics::favicon_tracking() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.favicon_tracking)
  return has_favicon_tracking()
      ? *specifics_variant_.favicon_tracking_
      : *reinterpret_cast< ::sync_pb::FaviconTrackingSpecifics*>(&::sync_pb::_FaviconTrackingSpecifics_default_instance_);
}
inline ::sync_pb::FaviconTrackingSpecifics* EntitySpecifics::mutable_favicon_tracking() {
  if (!has_favicon_tracking()) {
    clear_specifics_variant();
    set_has_favicon_tracking();
    specifics_variant_.favicon_tracking_ = CreateMaybeMessage< ::sync_pb::FaviconTrackingSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.favicon_tracking)
  return specifics_variant_.favicon_tracking_;
}

// optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
inline bool EntitySpecifics::has_favicon_image() const {
  return specifics_variant_case() == kFaviconImage;
}
inline void EntitySpecifics::set_has_favicon_image() {
  _oneof_case_[0] = kFaviconImage;
}
inline ::sync_pb::FaviconImageSpecifics* EntitySpecifics::release_favicon_image() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.favicon_image)
  if (has_favicon_image()) {
    clear_has_specifics_variant();
      ::sync_pb::FaviconImageSpecifics* temp = specifics_variant_.favicon_image_;
    specifics_variant_.favicon_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::FaviconImageSpecifics& EntitySpecifics::favicon_image() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.favicon_image)
  return has_favicon_image()
      ? *specifics_variant_.favicon_image_
      : *reinterpret_cast< ::sync_pb::FaviconImageSpecifics*>(&::sync_pb::_FaviconImageSpecifics_default_instance_);
}
inline ::sync_pb::FaviconImageSpecifics* EntitySpecifics::mutable_favicon_image() {
  if (!has_favicon_image()) {
    clear_specifics_variant();
    set_has_favicon_image();
    specifics_variant_.favicon_image_ = CreateMaybeMessage< ::sync_pb::FaviconImageSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.favicon_image)
  return specifics_variant_.favicon_image_;
}

// optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
inline bool EntitySpecifics::has_managed_user_setting() const {
  return specifics_variant_case() == kManagedUserSetting;
}
inline void EntitySpecifics::set_has_managed_user_setting() {
  _oneof_case_[0] = kManagedUserSetting;
}
inline ::sync_pb::ManagedUserSettingSpecifics* EntitySpecifics::release_managed_user_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user_setting)
  if (has_managed_user_setting()) {
    clear_has_specifics_variant();
      ::sync_pb::ManagedUserSettingSpecifics* temp = specifics_variant_.managed_user_setting_;
    specifics_variant_.managed_user_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ManagedUserSettingSpecifics& EntitySpecifics::managed_user_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user_setting)
  return has_managed_user_setting()
      ? *specifics_variant_.managed_user_setting_
      : *reinterpret_cast< ::sync_pb::ManagedUserSettingSpecifics*>(&::sync_pb::_ManagedUserSettingSpecifics_default_instance_);
}
inline ::sync_pb::ManagedUserSettingSpecifics* EntitySpecifics::mutable_managed_user_setting() {
  if (!has_managed_user_setting()) {
    clear_specifics_variant();
    set_has_managed_user_setting();
    specifics_variant_.managed_user_setting_ = CreateMaybeMessage< ::sync_pb::ManagedUserSettingSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user_setting)
  return specifics_variant_.managed_user_setting_;
}

// optional .sync_pb.ManagedUserSpecifics managed_user = 194582 [deprecated = true];
inline bool EntitySpecifics::has_managed_user() const {
  return specifics_variant_case() == kManagedUser;
}
inline void EntitySpecifics::set_has_managed_user() {
  _oneof_case_[0] = kManagedUser;
}
inline ::sync_pb::ManagedUserSpecifics* EntitySpecifics::release_managed_user() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user)
  if (has_managed_user()) {
    clear_has_specifics_variant();
      ::sync_pb::ManagedUserSpecifics* temp = specifics_variant_.managed_user_;
    specifics_variant_.managed_user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ManagedUserSpecifics& EntitySpecifics::managed_user() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user)
  return has_managed_user()
      ? *specifics_variant_.managed_user_
      : *reinterpret_cast< ::sync_pb::ManagedUserSpecifics*>(&::sync_pb::_ManagedUserSpecifics_default_instance_);
}
inline ::sync_pb::ManagedUserSpecifics* EntitySpecifics::mutable_managed_user() {
  if (!has_managed_user()) {
    clear_specifics_variant();
    set_has_managed_user();
    specifics_variant_.managed_user_ = CreateMaybeMessage< ::sync_pb::ManagedUserSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user)
  return specifics_variant_.managed_user_;
}

// optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026 [deprecated = true];
inline bool EntitySpecifics::has_managed_user_shared_setting() const {
  return specifics_variant_case() == kManagedUserSharedSetting;
}
inline void EntitySpecifics::set_has_managed_user_shared_setting() {
  _oneof_case_[0] = kManagedUserSharedSetting;
}
inline ::sync_pb::ManagedUserSharedSettingSpecifics* EntitySpecifics::release_managed_user_shared_setting() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user_shared_setting)
  if (has_managed_user_shared_setting()) {
    clear_has_specifics_variant();
      ::sync_pb::ManagedUserSharedSettingSpecifics* temp = specifics_variant_.managed_user_shared_setting_;
    specifics_variant_.managed_user_shared_setting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ManagedUserSharedSettingSpecifics& EntitySpecifics::managed_user_shared_setting() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user_shared_setting)
  return has_managed_user_shared_setting()
      ? *specifics_variant_.managed_user_shared_setting_
      : *reinterpret_cast< ::sync_pb::ManagedUserSharedSettingSpecifics*>(&::sync_pb::_ManagedUserSharedSettingSpecifics_default_instance_);
}
inline ::sync_pb::ManagedUserSharedSettingSpecifics* EntitySpecifics::mutable_managed_user_shared_setting() {
  if (!has_managed_user_shared_setting()) {
    clear_specifics_variant();
    set_has_managed_user_shared_setting();
    specifics_variant_.managed_user_shared_setting_ = CreateMaybeMessage< ::sync_pb::ManagedUserSharedSettingSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user_shared_setting)
  return specifics_variant_.managed_user_shared_setting_;
}

// optional .sync_pb.ManagedUserWhitelistSpecifics managed_user_whitelist = 306060;
inline bool EntitySpecifics::has_managed_user_whitelist() const {
  return specifics_variant_case() == kManagedUserWhitelist;
}
inline void EntitySpecifics::set_has_managed_user_whitelist() {
  _oneof_case_[0] = kManagedUserWhitelist;
}
inline ::sync_pb::ManagedUserWhitelistSpecifics* EntitySpecifics::release_managed_user_whitelist() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.managed_user_whitelist)
  if (has_managed_user_whitelist()) {
    clear_has_specifics_variant();
      ::sync_pb::ManagedUserWhitelistSpecifics* temp = specifics_variant_.managed_user_whitelist_;
    specifics_variant_.managed_user_whitelist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ManagedUserWhitelistSpecifics& EntitySpecifics::managed_user_whitelist() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.managed_user_whitelist)
  return has_managed_user_whitelist()
      ? *specifics_variant_.managed_user_whitelist_
      : *reinterpret_cast< ::sync_pb::ManagedUserWhitelistSpecifics*>(&::sync_pb::_ManagedUserWhitelistSpecifics_default_instance_);
}
inline ::sync_pb::ManagedUserWhitelistSpecifics* EntitySpecifics::mutable_managed_user_whitelist() {
  if (!has_managed_user_whitelist()) {
    clear_specifics_variant();
    set_has_managed_user_whitelist();
    specifics_variant_.managed_user_whitelist_ = CreateMaybeMessage< ::sync_pb::ManagedUserWhitelistSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.managed_user_whitelist)
  return specifics_variant_.managed_user_whitelist_;
}

// optional .sync_pb.AppListSpecifics app_list = 229170;
inline bool EntitySpecifics::has_app_list() const {
  return specifics_variant_case() == kAppList;
}
inline void EntitySpecifics::set_has_app_list() {
  _oneof_case_[0] = kAppList;
}
inline ::sync_pb::AppListSpecifics* EntitySpecifics::release_app_list() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.app_list)
  if (has_app_list()) {
    clear_has_specifics_variant();
      ::sync_pb::AppListSpecifics* temp = specifics_variant_.app_list_;
    specifics_variant_.app_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AppListSpecifics& EntitySpecifics::app_list() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.app_list)
  return has_app_list()
      ? *specifics_variant_.app_list_
      : *reinterpret_cast< ::sync_pb::AppListSpecifics*>(&::sync_pb::_AppListSpecifics_default_instance_);
}
inline ::sync_pb::AppListSpecifics* EntitySpecifics::mutable_app_list() {
  if (!has_app_list()) {
    clear_specifics_variant();
    set_has_app_list();
    specifics_variant_.app_list_ = CreateMaybeMessage< ::sync_pb::AppListSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.app_list)
  return specifics_variant_.app_list_;
}

// optional .sync_pb.AutofillWalletSpecifics autofill_wallet = 306270;
inline bool EntitySpecifics::has_autofill_wallet() const {
  return specifics_variant_case() == kAutofillWallet;
}
inline void EntitySpecifics::set_has_autofill_wallet() {
  _oneof_case_[0] = kAutofillWallet;
}
inline ::sync_pb::AutofillWalletSpecifics* EntitySpecifics::release_autofill_wallet() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.autofill_wallet)
  if (has_autofill_wallet()) {
    clear_has_specifics_variant();
      ::sync_pb::AutofillWalletSpecifics* temp = specifics_variant_.autofill_wallet_;
    specifics_variant_.autofill_wallet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillWalletSpecifics& EntitySpecifics::autofill_wallet() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.autofill_wallet)
  return has_autofill_wallet()
      ? *specifics_variant_.autofill_wallet_
      : *reinterpret_cast< ::sync_pb::AutofillWalletSpecifics*>(&::sync_pb::_AutofillWalletSpecifics_default_instance_);
}
inline ::sync_pb::AutofillWalletSpecifics* EntitySpecifics::mutable_autofill_wallet() {
  if (!has_autofill_wallet()) {
    clear_specifics_variant();
    set_has_autofill_wallet();
    specifics_variant_.autofill_wallet_ = CreateMaybeMessage< ::sync_pb::AutofillWalletSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.autofill_wallet)
  return specifics_variant_.autofill_wallet_;
}

// optional .sync_pb.WalletMetadataSpecifics wallet_metadata = 330441;
inline bool EntitySpecifics::has_wallet_metadata() const {
  return specifics_variant_case() == kWalletMetadata;
}
inline void EntitySpecifics::set_has_wallet_metadata() {
  _oneof_case_[0] = kWalletMetadata;
}
inline ::sync_pb::WalletMetadataSpecifics* EntitySpecifics::release_wallet_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.wallet_metadata)
  if (has_wallet_metadata()) {
    clear_has_specifics_variant();
      ::sync_pb::WalletMetadataSpecifics* temp = specifics_variant_.wallet_metadata_;
    specifics_variant_.wallet_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WalletMetadataSpecifics& EntitySpecifics::wallet_metadata() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.wallet_metadata)
  return has_wallet_metadata()
      ? *specifics_variant_.wallet_metadata_
      : *reinterpret_cast< ::sync_pb::WalletMetadataSpecifics*>(&::sync_pb::_WalletMetadataSpecifics_default_instance_);
}
inline ::sync_pb::WalletMetadataSpecifics* EntitySpecifics::mutable_wallet_metadata() {
  if (!has_wallet_metadata()) {
    clear_specifics_variant();
    set_has_wallet_metadata();
    specifics_variant_.wallet_metadata_ = CreateMaybeMessage< ::sync_pb::WalletMetadataSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.wallet_metadata)
  return specifics_variant_.wallet_metadata_;
}

// optional .sync_pb.ArcPackageSpecifics arc_package = 340906;
inline bool EntitySpecifics::has_arc_package() const {
  return specifics_variant_case() == kArcPackage;
}
inline void EntitySpecifics::set_has_arc_package() {
  _oneof_case_[0] = kArcPackage;
}
inline ::sync_pb::ArcPackageSpecifics* EntitySpecifics::release_arc_package() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.arc_package)
  if (has_arc_package()) {
    clear_has_specifics_variant();
      ::sync_pb::ArcPackageSpecifics* temp = specifics_variant_.arc_package_;
    specifics_variant_.arc_package_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ArcPackageSpecifics& EntitySpecifics::arc_package() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.arc_package)
  return has_arc_package()
      ? *specifics_variant_.arc_package_
      : *reinterpret_cast< ::sync_pb::ArcPackageSpecifics*>(&::sync_pb::_ArcPackageSpecifics_default_instance_);
}
inline ::sync_pb::ArcPackageSpecifics* EntitySpecifics::mutable_arc_package() {
  if (!has_arc_package()) {
    clear_specifics_variant();
    set_has_arc_package();
    specifics_variant_.arc_package_ = CreateMaybeMessage< ::sync_pb::ArcPackageSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.arc_package)
  return specifics_variant_.arc_package_;
}

// optional .sync_pb.PrinterSpecifics printer = 410745;
inline bool EntitySpecifics::has_printer() const {
  return specifics_variant_case() == kPrinter;
}
inline void EntitySpecifics::set_has_printer() {
  _oneof_case_[0] = kPrinter;
}
inline ::sync_pb::PrinterSpecifics* EntitySpecifics::release_printer() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.printer)
  if (has_printer()) {
    clear_has_specifics_variant();
      ::sync_pb::PrinterSpecifics* temp = specifics_variant_.printer_;
    specifics_variant_.printer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::PrinterSpecifics& EntitySpecifics::printer() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.printer)
  return has_printer()
      ? *specifics_variant_.printer_
      : *reinterpret_cast< ::sync_pb::PrinterSpecifics*>(&::sync_pb::_PrinterSpecifics_default_instance_);
}
inline ::sync_pb::PrinterSpecifics* EntitySpecifics::mutable_printer() {
  if (!has_printer()) {
    clear_specifics_variant();
    set_has_printer();
    specifics_variant_.printer_ = CreateMaybeMessage< ::sync_pb::PrinterSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.printer)
  return specifics_variant_.printer_;
}

// optional .sync_pb.ReadingListSpecifics reading_list = 411028;
inline bool EntitySpecifics::has_reading_list() const {
  return specifics_variant_case() == kReadingList;
}
inline void EntitySpecifics::set_has_reading_list() {
  _oneof_case_[0] = kReadingList;
}
inline ::sync_pb::ReadingListSpecifics* EntitySpecifics::release_reading_list() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.reading_list)
  if (has_reading_list()) {
    clear_has_specifics_variant();
      ::sync_pb::ReadingListSpecifics* temp = specifics_variant_.reading_list_;
    specifics_variant_.reading_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::ReadingListSpecifics& EntitySpecifics::reading_list() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.reading_list)
  return has_reading_list()
      ? *specifics_variant_.reading_list_
      : *reinterpret_cast< ::sync_pb::ReadingListSpecifics*>(&::sync_pb::_ReadingListSpecifics_default_instance_);
}
inline ::sync_pb::ReadingListSpecifics* EntitySpecifics::mutable_reading_list() {
  if (!has_reading_list()) {
    clear_specifics_variant();
    set_has_reading_list();
    specifics_variant_.reading_list_ = CreateMaybeMessage< ::sync_pb::ReadingListSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.reading_list)
  return specifics_variant_.reading_list_;
}

// optional .sync_pb.UserEventSpecifics user_event = 455206;
inline bool EntitySpecifics::has_user_event() const {
  return specifics_variant_case() == kUserEvent;
}
inline void EntitySpecifics::set_has_user_event() {
  _oneof_case_[0] = kUserEvent;
}
inline ::sync_pb::UserEventSpecifics* EntitySpecifics::release_user_event() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.user_event)
  if (has_user_event()) {
    clear_has_specifics_variant();
      ::sync_pb::UserEventSpecifics* temp = specifics_variant_.user_event_;
    specifics_variant_.user_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics& EntitySpecifics::user_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.user_event)
  return has_user_event()
      ? *specifics_variant_.user_event_
      : *reinterpret_cast< ::sync_pb::UserEventSpecifics*>(&::sync_pb::_UserEventSpecifics_default_instance_);
}
inline ::sync_pb::UserEventSpecifics* EntitySpecifics::mutable_user_event() {
  if (!has_user_event()) {
    clear_specifics_variant();
    set_has_user_event();
    specifics_variant_.user_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.user_event)
  return specifics_variant_.user_event_;
}

// optional .sync_pb.UserConsentSpecifics user_consent = 556014;
inline bool EntitySpecifics::has_user_consent() const {
  return specifics_variant_case() == kUserConsent;
}
inline void EntitySpecifics::set_has_user_consent() {
  _oneof_case_[0] = kUserConsent;
}
inline ::sync_pb::UserConsentSpecifics* EntitySpecifics::release_user_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.user_consent)
  if (has_user_consent()) {
    clear_has_specifics_variant();
      ::sync_pb::UserConsentSpecifics* temp = specifics_variant_.user_consent_;
    specifics_variant_.user_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentSpecifics& EntitySpecifics::user_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.user_consent)
  return has_user_consent()
      ? *specifics_variant_.user_consent_
      : *reinterpret_cast< ::sync_pb::UserConsentSpecifics*>(&::sync_pb::_UserConsentSpecifics_default_instance_);
}
inline ::sync_pb::UserConsentSpecifics* EntitySpecifics::mutable_user_consent() {
  if (!has_user_consent()) {
    clear_specifics_variant();
    set_has_user_consent();
    specifics_variant_.user_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.user_consent)
  return specifics_variant_.user_consent_;
}

// optional .sync_pb.SendTabToSelfSpecifics send_tab_to_self = 601980;
inline bool EntitySpecifics::has_send_tab_to_self() const {
  return specifics_variant_case() == kSendTabToSelf;
}
inline void EntitySpecifics::set_has_send_tab_to_self() {
  _oneof_case_[0] = kSendTabToSelf;
}
inline ::sync_pb::SendTabToSelfSpecifics* EntitySpecifics::release_send_tab_to_self() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.send_tab_to_self)
  if (has_send_tab_to_self()) {
    clear_has_specifics_variant();
      ::sync_pb::SendTabToSelfSpecifics* temp = specifics_variant_.send_tab_to_self_;
    specifics_variant_.send_tab_to_self_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SendTabToSelfSpecifics& EntitySpecifics::send_tab_to_self() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.send_tab_to_self)
  return has_send_tab_to_self()
      ? *specifics_variant_.send_tab_to_self_
      : *reinterpret_cast< ::sync_pb::SendTabToSelfSpecifics*>(&::sync_pb::_SendTabToSelfSpecifics_default_instance_);
}
inline ::sync_pb::SendTabToSelfSpecifics* EntitySpecifics::mutable_send_tab_to_self() {
  if (!has_send_tab_to_self()) {
    clear_specifics_variant();
    set_has_send_tab_to_self();
    specifics_variant_.send_tab_to_self_ = CreateMaybeMessage< ::sync_pb::SendTabToSelfSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.send_tab_to_self)
  return specifics_variant_.send_tab_to_self_;
}

// optional .sync_pb.SecurityEventSpecifics security_event = 600372;
inline bool EntitySpecifics::has_security_event() const {
  return specifics_variant_case() == kSecurityEvent;
}
inline void EntitySpecifics::set_has_security_event() {
  _oneof_case_[0] = kSecurityEvent;
}
inline ::sync_pb::SecurityEventSpecifics* EntitySpecifics::release_security_event() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.security_event)
  if (has_security_event()) {
    clear_has_specifics_variant();
      ::sync_pb::SecurityEventSpecifics* temp = specifics_variant_.security_event_;
    specifics_variant_.security_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SecurityEventSpecifics& EntitySpecifics::security_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.security_event)
  return has_security_event()
      ? *specifics_variant_.security_event_
      : *reinterpret_cast< ::sync_pb::SecurityEventSpecifics*>(&::sync_pb::_SecurityEventSpecifics_default_instance_);
}
inline ::sync_pb::SecurityEventSpecifics* EntitySpecifics::mutable_security_event() {
  if (!has_security_event()) {
    clear_specifics_variant();
    set_has_security_event();
    specifics_variant_.security_event_ = CreateMaybeMessage< ::sync_pb::SecurityEventSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.security_event)
  return specifics_variant_.security_event_;
}

// optional .sync_pb.WebAppSpecifics web_app = 673225;
inline bool EntitySpecifics::has_web_app() const {
  return specifics_variant_case() == kWebApp;
}
inline void EntitySpecifics::set_has_web_app() {
  _oneof_case_[0] = kWebApp;
}
inline ::sync_pb::WebAppSpecifics* EntitySpecifics::release_web_app() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.web_app)
  if (has_web_app()) {
    clear_has_specifics_variant();
      ::sync_pb::WebAppSpecifics* temp = specifics_variant_.web_app_;
    specifics_variant_.web_app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WebAppSpecifics& EntitySpecifics::web_app() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.web_app)
  return has_web_app()
      ? *specifics_variant_.web_app_
      : *reinterpret_cast< ::sync_pb::WebAppSpecifics*>(&::sync_pb::_WebAppSpecifics_default_instance_);
}
inline ::sync_pb::WebAppSpecifics* EntitySpecifics::mutable_web_app() {
  if (!has_web_app()) {
    clear_specifics_variant();
    set_has_web_app();
    specifics_variant_.web_app_ = CreateMaybeMessage< ::sync_pb::WebAppSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.web_app)
  return specifics_variant_.web_app_;
}

// optional .sync_pb.WifiConfigurationSpecifics wifi_configuration = 662827;
inline bool EntitySpecifics::has_wifi_configuration() const {
  return specifics_variant_case() == kWifiConfiguration;
}
inline void EntitySpecifics::set_has_wifi_configuration() {
  _oneof_case_[0] = kWifiConfiguration;
}
inline ::sync_pb::WifiConfigurationSpecifics* EntitySpecifics::release_wifi_configuration() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.wifi_configuration)
  if (has_wifi_configuration()) {
    clear_has_specifics_variant();
      ::sync_pb::WifiConfigurationSpecifics* temp = specifics_variant_.wifi_configuration_;
    specifics_variant_.wifi_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WifiConfigurationSpecifics& EntitySpecifics::wifi_configuration() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.wifi_configuration)
  return has_wifi_configuration()
      ? *specifics_variant_.wifi_configuration_
      : *reinterpret_cast< ::sync_pb::WifiConfigurationSpecifics*>(&::sync_pb::_WifiConfigurationSpecifics_default_instance_);
}
inline ::sync_pb::WifiConfigurationSpecifics* EntitySpecifics::mutable_wifi_configuration() {
  if (!has_wifi_configuration()) {
    clear_specifics_variant();
    set_has_wifi_configuration();
    specifics_variant_.wifi_configuration_ = CreateMaybeMessage< ::sync_pb::WifiConfigurationSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.wifi_configuration)
  return specifics_variant_.wifi_configuration_;
}

// optional .sync_pb.OsPreferenceSpecifics os_preference = 702141;
inline bool EntitySpecifics::has_os_preference() const {
  return specifics_variant_case() == kOsPreference;
}
inline void EntitySpecifics::set_has_os_preference() {
  _oneof_case_[0] = kOsPreference;
}
inline ::sync_pb::OsPreferenceSpecifics* EntitySpecifics::release_os_preference() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.os_preference)
  if (has_os_preference()) {
    clear_has_specifics_variant();
      ::sync_pb::OsPreferenceSpecifics* temp = specifics_variant_.os_preference_;
    specifics_variant_.os_preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::OsPreferenceSpecifics& EntitySpecifics::os_preference() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.os_preference)
  return has_os_preference()
      ? *specifics_variant_.os_preference_
      : *reinterpret_cast< ::sync_pb::OsPreferenceSpecifics*>(&::sync_pb::_OsPreferenceSpecifics_default_instance_);
}
inline ::sync_pb::OsPreferenceSpecifics* EntitySpecifics::mutable_os_preference() {
  if (!has_os_preference()) {
    clear_specifics_variant();
    set_has_os_preference();
    specifics_variant_.os_preference_ = CreateMaybeMessage< ::sync_pb::OsPreferenceSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.os_preference)
  return specifics_variant_.os_preference_;
}

// optional .sync_pb.OsPriorityPreferenceSpecifics os_priority_preference = 703915;
inline bool EntitySpecifics::has_os_priority_preference() const {
  return specifics_variant_case() == kOsPriorityPreference;
}
inline void EntitySpecifics::set_has_os_priority_preference() {
  _oneof_case_[0] = kOsPriorityPreference;
}
inline ::sync_pb::OsPriorityPreferenceSpecifics* EntitySpecifics::release_os_priority_preference() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.os_priority_preference)
  if (has_os_priority_preference()) {
    clear_has_specifics_variant();
      ::sync_pb::OsPriorityPreferenceSpecifics* temp = specifics_variant_.os_priority_preference_;
    specifics_variant_.os_priority_preference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::OsPriorityPreferenceSpecifics& EntitySpecifics::os_priority_preference() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.os_priority_preference)
  return has_os_priority_preference()
      ? *specifics_variant_.os_priority_preference_
      : *reinterpret_cast< ::sync_pb::OsPriorityPreferenceSpecifics*>(&::sync_pb::_OsPriorityPreferenceSpecifics_default_instance_);
}
inline ::sync_pb::OsPriorityPreferenceSpecifics* EntitySpecifics::mutable_os_priority_preference() {
  if (!has_os_priority_preference()) {
    clear_specifics_variant();
    set_has_os_priority_preference();
    specifics_variant_.os_priority_preference_ = CreateMaybeMessage< ::sync_pb::OsPriorityPreferenceSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.os_priority_preference)
  return specifics_variant_.os_priority_preference_;
}

// optional .sync_pb.SharingMessageSpecifics sharing_message = 728866;
inline bool EntitySpecifics::has_sharing_message() const {
  return specifics_variant_case() == kSharingMessage;
}
inline void EntitySpecifics::set_has_sharing_message() {
  _oneof_case_[0] = kSharingMessage;
}
inline ::sync_pb::SharingMessageSpecifics* EntitySpecifics::release_sharing_message() {
  // @@protoc_insertion_point(field_release:sync_pb.EntitySpecifics.sharing_message)
  if (has_sharing_message()) {
    clear_has_specifics_variant();
      ::sync_pb::SharingMessageSpecifics* temp = specifics_variant_.sharing_message_;
    specifics_variant_.sharing_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SharingMessageSpecifics& EntitySpecifics::sharing_message() const {
  // @@protoc_insertion_point(field_get:sync_pb.EntitySpecifics.sharing_message)
  return has_sharing_message()
      ? *specifics_variant_.sharing_message_
      : *reinterpret_cast< ::sync_pb::SharingMessageSpecifics*>(&::sync_pb::_SharingMessageSpecifics_default_instance_);
}
inline ::sync_pb::SharingMessageSpecifics* EntitySpecifics::mutable_sharing_message() {
  if (!has_sharing_message()) {
    clear_specifics_variant();
    set_has_sharing_message();
    specifics_variant_.sharing_message_ = CreateMaybeMessage< ::sync_pb::SharingMessageSpecifics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EntitySpecifics.sharing_message)
  return specifics_variant_.sharing_message_;
}

inline bool EntitySpecifics::has_specifics_variant() const {
  return specifics_variant_case() != SPECIFICS_VARIANT_NOT_SET;
}
inline void EntitySpecifics::clear_has_specifics_variant() {
  _oneof_case_[0] = SPECIFICS_VARIANT_NOT_SET;
}
inline EntitySpecifics::SpecificsVariantCase EntitySpecifics::specifics_variant_case() const {
  return EntitySpecifics::SpecificsVariantCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SyncEntity

// optional string id_string = 1;
inline bool SyncEntity::has_id_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncEntity::clear_id_string() {
  id_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncEntity::id_string() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.id_string)
  return id_string_.GetNoArena();
}
inline void SyncEntity::set_id_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.id_string)
}
inline void SyncEntity::set_id_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.id_string)
}
inline void SyncEntity::set_id_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.id_string)
}
inline void SyncEntity::set_id_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.id_string)
}
inline std::string* SyncEntity::mutable_id_string() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.id_string)
  return id_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_id_string() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.id_string)
  if (!has_id_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_id_string(std::string* id_string) {
  if (id_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_string);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.id_string)
}

// optional string parent_id_string = 2;
inline bool SyncEntity::has_parent_id_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncEntity::clear_parent_id_string() {
  parent_id_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SyncEntity::parent_id_string() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.parent_id_string)
  return parent_id_string_.GetNoArena();
}
inline void SyncEntity::set_parent_id_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  parent_id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.parent_id_string)
}
inline void SyncEntity::set_parent_id_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  parent_id_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.parent_id_string)
}
inline void SyncEntity::set_parent_id_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  parent_id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.parent_id_string)
}
inline void SyncEntity::set_parent_id_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  parent_id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.parent_id_string)
}
inline std::string* SyncEntity::mutable_parent_id_string() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.parent_id_string)
  return parent_id_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_parent_id_string() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.parent_id_string)
  if (!has_parent_id_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return parent_id_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_parent_id_string(std::string* parent_id_string) {
  if (parent_id_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parent_id_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id_string);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.parent_id_string)
}

// optional string old_parent_id = 3;
inline bool SyncEntity::has_old_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncEntity::clear_old_parent_id() {
  old_parent_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SyncEntity::old_parent_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.old_parent_id)
  return old_parent_id_.GetNoArena();
}
inline void SyncEntity::set_old_parent_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  old_parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.old_parent_id)
}
inline void SyncEntity::set_old_parent_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  old_parent_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.old_parent_id)
}
inline void SyncEntity::set_old_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  old_parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.old_parent_id)
}
inline void SyncEntity::set_old_parent_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  old_parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.old_parent_id)
}
inline std::string* SyncEntity::mutable_old_parent_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.old_parent_id)
  return old_parent_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_old_parent_id() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.old_parent_id)
  if (!has_old_parent_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return old_parent_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_old_parent_id(std::string* old_parent_id) {
  if (old_parent_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_parent_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_parent_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.old_parent_id)
}

// optional int64 version = 4;
inline bool SyncEntity::has_version() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SyncEntity::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncEntity::version() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.version)
  return version_;
}
inline void SyncEntity::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  version_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.version)
}

// optional int64 mtime = 5;
inline bool SyncEntity::has_mtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SyncEntity::clear_mtime() {
  mtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncEntity::mtime() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.mtime)
  return mtime_;
}
inline void SyncEntity::set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  mtime_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.mtime)
}

// optional int64 ctime = 6;
inline bool SyncEntity::has_ctime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SyncEntity::clear_ctime() {
  ctime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncEntity::ctime() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.ctime)
  return ctime_;
}
inline void SyncEntity::set_ctime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  ctime_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.ctime)
}

// optional string name = 7;
inline bool SyncEntity::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncEntity::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SyncEntity::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.name)
  return name_.GetNoArena();
}
inline void SyncEntity::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.name)
}
inline void SyncEntity::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.name)
}
inline void SyncEntity::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.name)
}
inline void SyncEntity::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.name)
}
inline std::string* SyncEntity::mutable_name() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.name)
}

// optional string non_unique_name = 8;
inline bool SyncEntity::has_non_unique_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncEntity::clear_non_unique_name() {
  non_unique_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SyncEntity::non_unique_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.non_unique_name)
  return non_unique_name_.GetNoArena();
}
inline void SyncEntity::set_non_unique_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  non_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.non_unique_name)
}
inline void SyncEntity::set_non_unique_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  non_unique_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.non_unique_name)
}
inline void SyncEntity::set_non_unique_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  non_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.non_unique_name)
}
inline void SyncEntity::set_non_unique_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  non_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.non_unique_name)
}
inline std::string* SyncEntity::mutable_non_unique_name() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.non_unique_name)
  return non_unique_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_non_unique_name() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.non_unique_name)
  if (!has_non_unique_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return non_unique_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_non_unique_name(std::string* non_unique_name) {
  if (non_unique_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  non_unique_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), non_unique_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.non_unique_name)
}

// optional string server_defined_unique_tag = 10;
inline bool SyncEntity::has_server_defined_unique_tag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SyncEntity::clear_server_defined_unique_tag() {
  server_defined_unique_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SyncEntity::server_defined_unique_tag() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.server_defined_unique_tag)
  return server_defined_unique_tag_.GetNoArena();
}
inline void SyncEntity::set_server_defined_unique_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  server_defined_unique_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.server_defined_unique_tag)
}
inline void SyncEntity::set_server_defined_unique_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  server_defined_unique_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.server_defined_unique_tag)
}
inline void SyncEntity::set_server_defined_unique_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  server_defined_unique_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.server_defined_unique_tag)
}
inline void SyncEntity::set_server_defined_unique_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  server_defined_unique_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.server_defined_unique_tag)
}
inline std::string* SyncEntity::mutable_server_defined_unique_tag() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.server_defined_unique_tag)
  return server_defined_unique_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_server_defined_unique_tag() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.server_defined_unique_tag)
  if (!has_server_defined_unique_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return server_defined_unique_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_server_defined_unique_tag(std::string* server_defined_unique_tag) {
  if (server_defined_unique_tag != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  server_defined_unique_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_defined_unique_tag);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.server_defined_unique_tag)
}

// optional int64 position_in_parent = 15 [deprecated = true];
inline bool SyncEntity::has_position_in_parent() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SyncEntity::clear_position_in_parent() {
  position_in_parent_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncEntity::position_in_parent() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.position_in_parent)
  return position_in_parent_;
}
inline void SyncEntity::set_position_in_parent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  position_in_parent_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.position_in_parent)
}

// optional string insert_after_item_id = 16 [deprecated = true];
inline bool SyncEntity::has_insert_after_item_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SyncEntity::clear_insert_after_item_id() {
  insert_after_item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SyncEntity::insert_after_item_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.insert_after_item_id)
  return insert_after_item_id_.GetNoArena();
}
inline void SyncEntity::set_insert_after_item_id(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  insert_after_item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.insert_after_item_id)
}
inline void SyncEntity::set_insert_after_item_id(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  insert_after_item_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.insert_after_item_id)
}
inline void SyncEntity::set_insert_after_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  insert_after_item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.insert_after_item_id)
}
inline void SyncEntity::set_insert_after_item_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  insert_after_item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.insert_after_item_id)
}
inline std::string* SyncEntity::mutable_insert_after_item_id() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.insert_after_item_id)
  return insert_after_item_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_insert_after_item_id() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.insert_after_item_id)
  if (!has_insert_after_item_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return insert_after_item_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_insert_after_item_id(std::string* insert_after_item_id) {
  if (insert_after_item_id != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  insert_after_item_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insert_after_item_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.insert_after_item_id)
}

// optional bool deleted = 18 [default = false];
inline bool SyncEntity::has_deleted() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SyncEntity::clear_deleted() {
  deleted_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool SyncEntity::deleted() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.deleted)
  return deleted_;
}
inline void SyncEntity::set_deleted(bool value) {
  _has_bits_[0] |= 0x00020000u;
  deleted_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.deleted)
}

// optional string originator_cache_guid = 19;
inline bool SyncEntity::has_originator_cache_guid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SyncEntity::clear_originator_cache_guid() {
  originator_cache_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& SyncEntity::originator_cache_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.originator_cache_guid)
  return originator_cache_guid_.GetNoArena();
}
inline void SyncEntity::set_originator_cache_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  originator_cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.originator_cache_guid)
}
inline void SyncEntity::set_originator_cache_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  originator_cache_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.originator_cache_guid)
}
inline void SyncEntity::set_originator_cache_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  originator_cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.originator_cache_guid)
}
inline void SyncEntity::set_originator_cache_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  originator_cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.originator_cache_guid)
}
inline std::string* SyncEntity::mutable_originator_cache_guid() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.originator_cache_guid)
  return originator_cache_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_originator_cache_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.originator_cache_guid)
  if (!has_originator_cache_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return originator_cache_guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_originator_cache_guid(std::string* originator_cache_guid) {
  if (originator_cache_guid != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  originator_cache_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originator_cache_guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.originator_cache_guid)
}

// optional string originator_client_item_id = 20;
inline bool SyncEntity::has_originator_client_item_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SyncEntity::clear_originator_client_item_id() {
  originator_client_item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& SyncEntity::originator_client_item_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.originator_client_item_id)
  return originator_client_item_id_.GetNoArena();
}
inline void SyncEntity::set_originator_client_item_id(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  originator_client_item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.originator_client_item_id)
}
inline void SyncEntity::set_originator_client_item_id(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  originator_client_item_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.originator_client_item_id)
}
inline void SyncEntity::set_originator_client_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  originator_client_item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.originator_client_item_id)
}
inline void SyncEntity::set_originator_client_item_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  originator_client_item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.originator_client_item_id)
}
inline std::string* SyncEntity::mutable_originator_client_item_id() {
  _has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.originator_client_item_id)
  return originator_client_item_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_originator_client_item_id() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.originator_client_item_id)
  if (!has_originator_client_item_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return originator_client_item_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_originator_client_item_id(std::string* originator_client_item_id) {
  if (originator_client_item_id != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  originator_client_item_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originator_client_item_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.originator_client_item_id)
}

// optional .sync_pb.EntitySpecifics specifics = 21;
inline bool SyncEntity::has_specifics() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SyncEntity::clear_specifics() {
  if (specifics_ != nullptr) specifics_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::sync_pb::EntitySpecifics& SyncEntity::specifics() const {
  const ::sync_pb::EntitySpecifics* p = specifics_;
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.specifics)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::EntitySpecifics*>(
      &::sync_pb::_EntitySpecifics_default_instance_);
}
inline ::sync_pb::EntitySpecifics* SyncEntity::release_specifics() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.specifics)
  _has_bits_[0] &= ~0x00000800u;
  ::sync_pb::EntitySpecifics* temp = specifics_;
  specifics_ = nullptr;
  return temp;
}
inline ::sync_pb::EntitySpecifics* SyncEntity::mutable_specifics() {
  _has_bits_[0] |= 0x00000800u;
  if (specifics_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EntitySpecifics>(GetArenaNoVirtual());
    specifics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.specifics)
  return specifics_;
}
inline void SyncEntity::set_allocated_specifics(::sync_pb::EntitySpecifics* specifics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete specifics_;
  }
  if (specifics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      specifics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specifics, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  specifics_ = specifics;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.specifics)
}

// optional bool folder = 22 [default = false];
inline bool SyncEntity::has_folder() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SyncEntity::clear_folder() {
  folder_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool SyncEntity::folder() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.folder)
  return folder_;
}
inline void SyncEntity::set_folder(bool value) {
  _has_bits_[0] |= 0x00040000u;
  folder_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.folder)
}

// optional string client_defined_unique_tag = 23;
inline bool SyncEntity::has_client_defined_unique_tag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SyncEntity::clear_client_defined_unique_tag() {
  client_defined_unique_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& SyncEntity::client_defined_unique_tag() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.client_defined_unique_tag)
  return client_defined_unique_tag_.GetNoArena();
}
inline void SyncEntity::set_client_defined_unique_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  client_defined_unique_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.client_defined_unique_tag)
}
inline void SyncEntity::set_client_defined_unique_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  client_defined_unique_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.client_defined_unique_tag)
}
inline void SyncEntity::set_client_defined_unique_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  client_defined_unique_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.client_defined_unique_tag)
}
inline void SyncEntity::set_client_defined_unique_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  client_defined_unique_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.client_defined_unique_tag)
}
inline std::string* SyncEntity::mutable_client_defined_unique_tag() {
  _has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.client_defined_unique_tag)
  return client_defined_unique_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_client_defined_unique_tag() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.client_defined_unique_tag)
  if (!has_client_defined_unique_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return client_defined_unique_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_client_defined_unique_tag(std::string* client_defined_unique_tag) {
  if (client_defined_unique_tag != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  client_defined_unique_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_defined_unique_tag);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.client_defined_unique_tag)
}

// optional bytes ordinal_in_parent = 24 [deprecated = true];
inline bool SyncEntity::has_ordinal_in_parent() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SyncEntity::clear_ordinal_in_parent() {
  ordinal_in_parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& SyncEntity::ordinal_in_parent() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.ordinal_in_parent)
  return ordinal_in_parent_.GetNoArena();
}
inline void SyncEntity::set_ordinal_in_parent(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  ordinal_in_parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncEntity.ordinal_in_parent)
}
inline void SyncEntity::set_ordinal_in_parent(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  ordinal_in_parent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncEntity.ordinal_in_parent)
}
inline void SyncEntity::set_ordinal_in_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  ordinal_in_parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncEntity.ordinal_in_parent)
}
inline void SyncEntity::set_ordinal_in_parent(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  ordinal_in_parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncEntity.ordinal_in_parent)
}
inline std::string* SyncEntity::mutable_ordinal_in_parent() {
  _has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.ordinal_in_parent)
  return ordinal_in_parent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncEntity::release_ordinal_in_parent() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.ordinal_in_parent)
  if (!has_ordinal_in_parent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return ordinal_in_parent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncEntity::set_allocated_ordinal_in_parent(std::string* ordinal_in_parent) {
  if (ordinal_in_parent != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  ordinal_in_parent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordinal_in_parent);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.ordinal_in_parent)
}

// optional .sync_pb.UniquePosition unique_position = 25;
inline bool SyncEntity::has_unique_position() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::sync_pb::UniquePosition& SyncEntity::unique_position() const {
  const ::sync_pb::UniquePosition* p = unique_position_;
  // @@protoc_insertion_point(field_get:sync_pb.SyncEntity.unique_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::UniquePosition*>(
      &::sync_pb::_UniquePosition_default_instance_);
}
inline ::sync_pb::UniquePosition* SyncEntity::release_unique_position() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncEntity.unique_position)
  _has_bits_[0] &= ~0x00001000u;
  ::sync_pb::UniquePosition* temp = unique_position_;
  unique_position_ = nullptr;
  return temp;
}
inline ::sync_pb::UniquePosition* SyncEntity::mutable_unique_position() {
  _has_bits_[0] |= 0x00001000u;
  if (unique_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::UniquePosition>(GetArenaNoVirtual());
    unique_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncEntity.unique_position)
  return unique_position_;
}
inline void SyncEntity::set_allocated_unique_position(::sync_pb::UniquePosition* unique_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unique_position_);
  }
  if (unique_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unique_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unique_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  unique_position_ = unique_position;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncEntity.unique_position)
}

// -------------------------------------------------------------------

// ChromiumExtensionsActivity

// optional string extension_id = 1;
inline bool ChromiumExtensionsActivity::has_extension_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromiumExtensionsActivity::clear_extension_id() {
  extension_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromiumExtensionsActivity::extension_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.ChromiumExtensionsActivity.extension_id)
  return extension_id_.GetNoArena();
}
inline void ChromiumExtensionsActivity::set_extension_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ChromiumExtensionsActivity.extension_id)
}
inline void ChromiumExtensionsActivity::set_extension_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ChromiumExtensionsActivity.extension_id)
}
inline void ChromiumExtensionsActivity::set_extension_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ChromiumExtensionsActivity.extension_id)
}
inline void ChromiumExtensionsActivity::set_extension_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ChromiumExtensionsActivity.extension_id)
}
inline std::string* ChromiumExtensionsActivity::mutable_extension_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ChromiumExtensionsActivity.extension_id)
  return extension_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromiumExtensionsActivity::release_extension_id() {
  // @@protoc_insertion_point(field_release:sync_pb.ChromiumExtensionsActivity.extension_id)
  if (!has_extension_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return extension_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromiumExtensionsActivity::set_allocated_extension_id(std::string* extension_id) {
  if (extension_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extension_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ChromiumExtensionsActivity.extension_id)
}

// optional uint32 bookmark_writes_since_last_commit = 2;
inline bool ChromiumExtensionsActivity::has_bookmark_writes_since_last_commit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromiumExtensionsActivity::clear_bookmark_writes_since_last_commit() {
  bookmark_writes_since_last_commit_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChromiumExtensionsActivity::bookmark_writes_since_last_commit() const {
  // @@protoc_insertion_point(field_get:sync_pb.ChromiumExtensionsActivity.bookmark_writes_since_last_commit)
  return bookmark_writes_since_last_commit_;
}
inline void ChromiumExtensionsActivity::set_bookmark_writes_since_last_commit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  bookmark_writes_since_last_commit_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ChromiumExtensionsActivity.bookmark_writes_since_last_commit)
}

// -------------------------------------------------------------------

// ClientConfigParams

// repeated int32 enabled_type_ids = 1;
inline int ClientConfigParams::enabled_type_ids_size() const {
  return enabled_type_ids_.size();
}
inline void ClientConfigParams::clear_enabled_type_ids() {
  enabled_type_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientConfigParams::enabled_type_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientConfigParams.enabled_type_ids)
  return enabled_type_ids_.Get(index);
}
inline void ClientConfigParams::set_enabled_type_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  enabled_type_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientConfigParams.enabled_type_ids)
}
inline void ClientConfigParams::add_enabled_type_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  enabled_type_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.ClientConfigParams.enabled_type_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ClientConfigParams::enabled_type_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.ClientConfigParams.enabled_type_ids)
  return enabled_type_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ClientConfigParams::mutable_enabled_type_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.ClientConfigParams.enabled_type_ids)
  return &enabled_type_ids_;
}

// optional bool tabs_datatype_enabled = 2;
inline bool ClientConfigParams::has_tabs_datatype_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientConfigParams::clear_tabs_datatype_enabled() {
  tabs_datatype_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ClientConfigParams::tabs_datatype_enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientConfigParams.tabs_datatype_enabled)
  return tabs_datatype_enabled_;
}
inline void ClientConfigParams::set_tabs_datatype_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  tabs_datatype_enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientConfigParams.tabs_datatype_enabled)
}

// optional bool cookie_jar_mismatch = 3;
inline bool ClientConfigParams::has_cookie_jar_mismatch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientConfigParams::clear_cookie_jar_mismatch() {
  cookie_jar_mismatch_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ClientConfigParams::cookie_jar_mismatch() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientConfigParams.cookie_jar_mismatch)
  return cookie_jar_mismatch_;
}
inline void ClientConfigParams::set_cookie_jar_mismatch(bool value) {
  _has_bits_[0] |= 0x00000002u;
  cookie_jar_mismatch_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientConfigParams.cookie_jar_mismatch)
}

// -------------------------------------------------------------------

// CommitMessage

// repeated .sync_pb.SyncEntity entries = 1;
inline int CommitMessage::entries_size() const {
  return entries_.size();
}
inline void CommitMessage::clear_entries() {
  entries_.Clear();
}
inline ::sync_pb::SyncEntity* CommitMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SyncEntity >*
CommitMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.CommitMessage.entries)
  return &entries_;
}
inline const ::sync_pb::SyncEntity& CommitMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.entries)
  return entries_.Get(index);
}
inline ::sync_pb::SyncEntity* CommitMessage::add_entries() {
  // @@protoc_insertion_point(field_add:sync_pb.CommitMessage.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SyncEntity >&
CommitMessage::entries() const {
  // @@protoc_insertion_point(field_list:sync_pb.CommitMessage.entries)
  return entries_;
}

// optional string cache_guid = 2;
inline bool CommitMessage::has_cache_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitMessage::clear_cache_guid() {
  cache_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommitMessage::cache_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.cache_guid)
  return cache_guid_.GetNoArena();
}
inline void CommitMessage::set_cache_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitMessage.cache_guid)
}
inline void CommitMessage::set_cache_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitMessage.cache_guid)
}
inline void CommitMessage::set_cache_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitMessage.cache_guid)
}
inline void CommitMessage::set_cache_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitMessage.cache_guid)
}
inline std::string* CommitMessage::mutable_cache_guid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.cache_guid)
  return cache_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommitMessage::release_cache_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitMessage.cache_guid)
  if (!has_cache_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cache_guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommitMessage::set_allocated_cache_guid(std::string* cache_guid) {
  if (cache_guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cache_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitMessage.cache_guid)
}

// repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
inline int CommitMessage::extensions_activity_size() const {
  return extensions_activity_.size();
}
inline void CommitMessage::clear_extensions_activity() {
  extensions_activity_.Clear();
}
inline ::sync_pb::ChromiumExtensionsActivity* CommitMessage::mutable_extensions_activity(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.extensions_activity)
  return extensions_activity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::ChromiumExtensionsActivity >*
CommitMessage::mutable_extensions_activity() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.CommitMessage.extensions_activity)
  return &extensions_activity_;
}
inline const ::sync_pb::ChromiumExtensionsActivity& CommitMessage::extensions_activity(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.extensions_activity)
  return extensions_activity_.Get(index);
}
inline ::sync_pb::ChromiumExtensionsActivity* CommitMessage::add_extensions_activity() {
  // @@protoc_insertion_point(field_add:sync_pb.CommitMessage.extensions_activity)
  return extensions_activity_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::ChromiumExtensionsActivity >&
CommitMessage::extensions_activity() const {
  // @@protoc_insertion_point(field_list:sync_pb.CommitMessage.extensions_activity)
  return extensions_activity_;
}

// optional .sync_pb.ClientConfigParams config_params = 4;
inline bool CommitMessage::has_config_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommitMessage::clear_config_params() {
  if (config_params_ != nullptr) config_params_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::ClientConfigParams& CommitMessage::config_params() const {
  const ::sync_pb::ClientConfigParams* p = config_params_;
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.config_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ClientConfigParams*>(
      &::sync_pb::_ClientConfigParams_default_instance_);
}
inline ::sync_pb::ClientConfigParams* CommitMessage::release_config_params() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitMessage.config_params)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::ClientConfigParams* temp = config_params_;
  config_params_ = nullptr;
  return temp;
}
inline ::sync_pb::ClientConfigParams* CommitMessage::mutable_config_params() {
  _has_bits_[0] |= 0x00000004u;
  if (config_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ClientConfigParams>(GetArenaNoVirtual());
    config_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.config_params)
  return config_params_;
}
inline void CommitMessage::set_allocated_config_params(::sync_pb::ClientConfigParams* config_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_params_;
  }
  if (config_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  config_params_ = config_params;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitMessage.config_params)
}

// repeated .sync_pb.DataTypeContext client_contexts = 5;
inline int CommitMessage::client_contexts_size() const {
  return client_contexts_.size();
}
inline void CommitMessage::clear_client_contexts() {
  client_contexts_.Clear();
}
inline ::sync_pb::DataTypeContext* CommitMessage::mutable_client_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.client_contexts)
  return client_contexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >*
CommitMessage::mutable_client_contexts() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.CommitMessage.client_contexts)
  return &client_contexts_;
}
inline const ::sync_pb::DataTypeContext& CommitMessage::client_contexts(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.client_contexts)
  return client_contexts_.Get(index);
}
inline ::sync_pb::DataTypeContext* CommitMessage::add_client_contexts() {
  // @@protoc_insertion_point(field_add:sync_pb.CommitMessage.client_contexts)
  return client_contexts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >&
CommitMessage::client_contexts() const {
  // @@protoc_insertion_point(field_list:sync_pb.CommitMessage.client_contexts)
  return client_contexts_;
}

// optional string padding = 6;
inline bool CommitMessage::has_padding() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommitMessage::clear_padding() {
  padding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommitMessage::padding() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitMessage.padding)
  return padding_.GetNoArena();
}
inline void CommitMessage::set_padding(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  padding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitMessage.padding)
}
inline void CommitMessage::set_padding(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  padding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitMessage.padding)
}
inline void CommitMessage::set_padding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  padding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitMessage.padding)
}
inline void CommitMessage::set_padding(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  padding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitMessage.padding)
}
inline std::string* CommitMessage::mutable_padding() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitMessage.padding)
  return padding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommitMessage::release_padding() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitMessage.padding)
  if (!has_padding()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return padding_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommitMessage::set_allocated_padding(std::string* padding) {
  if (padding != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  padding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), padding);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitMessage.padding)
}

// -------------------------------------------------------------------

// GetUpdateTriggers

// repeated string notification_hint = 1;
inline int GetUpdateTriggers::notification_hint_size() const {
  return notification_hint_.size();
}
inline void GetUpdateTriggers::clear_notification_hint() {
  notification_hint_.Clear();
}
inline const std::string& GetUpdateTriggers::notification_hint(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.notification_hint)
  return notification_hint_.Get(index);
}
inline std::string* GetUpdateTriggers::mutable_notification_hint(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdateTriggers.notification_hint)
  return notification_hint_.Mutable(index);
}
inline void GetUpdateTriggers::set_notification_hint(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.notification_hint)
  notification_hint_.Mutable(index)->assign(value);
}
inline void GetUpdateTriggers::set_notification_hint(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.notification_hint)
  notification_hint_.Mutable(index)->assign(std::move(value));
}
inline void GetUpdateTriggers::set_notification_hint(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_hint_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.GetUpdateTriggers.notification_hint)
}
inline void GetUpdateTriggers::set_notification_hint(int index, const char* value, size_t size) {
  notification_hint_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.GetUpdateTriggers.notification_hint)
}
inline std::string* GetUpdateTriggers::add_notification_hint() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.GetUpdateTriggers.notification_hint)
  return notification_hint_.Add();
}
inline void GetUpdateTriggers::add_notification_hint(const std::string& value) {
  notification_hint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdateTriggers.notification_hint)
}
inline void GetUpdateTriggers::add_notification_hint(std::string&& value) {
  notification_hint_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdateTriggers.notification_hint)
}
inline void GetUpdateTriggers::add_notification_hint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_hint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.GetUpdateTriggers.notification_hint)
}
inline void GetUpdateTriggers::add_notification_hint(const char* value, size_t size) {
  notification_hint_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.GetUpdateTriggers.notification_hint)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetUpdateTriggers::notification_hint() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdateTriggers.notification_hint)
  return notification_hint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetUpdateTriggers::mutable_notification_hint() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdateTriggers.notification_hint)
  return &notification_hint_;
}

// optional bool client_dropped_hints = 2;
inline bool GetUpdateTriggers::has_client_dropped_hints() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetUpdateTriggers::clear_client_dropped_hints() {
  client_dropped_hints_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GetUpdateTriggers::client_dropped_hints() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.client_dropped_hints)
  return client_dropped_hints_;
}
inline void GetUpdateTriggers::set_client_dropped_hints(bool value) {
  _has_bits_[0] |= 0x00000004u;
  client_dropped_hints_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.client_dropped_hints)
}

// optional bool invalidations_out_of_sync = 3;
inline bool GetUpdateTriggers::has_invalidations_out_of_sync() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetUpdateTriggers::clear_invalidations_out_of_sync() {
  invalidations_out_of_sync_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GetUpdateTriggers::invalidations_out_of_sync() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.invalidations_out_of_sync)
  return invalidations_out_of_sync_;
}
inline void GetUpdateTriggers::set_invalidations_out_of_sync(bool value) {
  _has_bits_[0] |= 0x00000008u;
  invalidations_out_of_sync_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.invalidations_out_of_sync)
}

// optional int64 local_modification_nudges = 4;
inline bool GetUpdateTriggers::has_local_modification_nudges() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetUpdateTriggers::clear_local_modification_nudges() {
  local_modification_nudges_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetUpdateTriggers::local_modification_nudges() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.local_modification_nudges)
  return local_modification_nudges_;
}
inline void GetUpdateTriggers::set_local_modification_nudges(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  local_modification_nudges_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.local_modification_nudges)
}

// optional int64 datatype_refresh_nudges = 5;
inline bool GetUpdateTriggers::has_datatype_refresh_nudges() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetUpdateTriggers::clear_datatype_refresh_nudges() {
  datatype_refresh_nudges_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetUpdateTriggers::datatype_refresh_nudges() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.datatype_refresh_nudges)
  return datatype_refresh_nudges_;
}
inline void GetUpdateTriggers::set_datatype_refresh_nudges(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  datatype_refresh_nudges_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.datatype_refresh_nudges)
}

// optional bool server_dropped_hints = 6;
inline bool GetUpdateTriggers::has_server_dropped_hints() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetUpdateTriggers::clear_server_dropped_hints() {
  server_dropped_hints_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GetUpdateTriggers::server_dropped_hints() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.server_dropped_hints)
  return server_dropped_hints_;
}
inline void GetUpdateTriggers::set_server_dropped_hints(bool value) {
  _has_bits_[0] |= 0x00000010u;
  server_dropped_hints_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.server_dropped_hints)
}

// optional bool initial_sync_in_progress = 7;
inline bool GetUpdateTriggers::has_initial_sync_in_progress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetUpdateTriggers::clear_initial_sync_in_progress() {
  initial_sync_in_progress_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool GetUpdateTriggers::initial_sync_in_progress() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.initial_sync_in_progress)
  return initial_sync_in_progress_;
}
inline void GetUpdateTriggers::set_initial_sync_in_progress(bool value) {
  _has_bits_[0] |= 0x00000020u;
  initial_sync_in_progress_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.initial_sync_in_progress)
}

// optional bool sync_for_resolve_conflict_in_progress = 8;
inline bool GetUpdateTriggers::has_sync_for_resolve_conflict_in_progress() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetUpdateTriggers::clear_sync_for_resolve_conflict_in_progress() {
  sync_for_resolve_conflict_in_progress_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool GetUpdateTriggers::sync_for_resolve_conflict_in_progress() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdateTriggers.sync_for_resolve_conflict_in_progress)
  return sync_for_resolve_conflict_in_progress_;
}
inline void GetUpdateTriggers::set_sync_for_resolve_conflict_in_progress(bool value) {
  _has_bits_[0] |= 0x00000040u;
  sync_for_resolve_conflict_in_progress_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdateTriggers.sync_for_resolve_conflict_in_progress)
}

// -------------------------------------------------------------------

// GarbageCollectionDirective

// optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
inline bool GarbageCollectionDirective::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GarbageCollectionDirective::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::GarbageCollectionDirective_Type GarbageCollectionDirective::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.GarbageCollectionDirective.type)
  return static_cast< ::sync_pb::GarbageCollectionDirective_Type >(type_);
}
inline void GarbageCollectionDirective::set_type(::sync_pb::GarbageCollectionDirective_Type value) {
  assert(::sync_pb::GarbageCollectionDirective_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GarbageCollectionDirective.type)
}

// optional int64 version_watermark = 2;
inline bool GarbageCollectionDirective::has_version_watermark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GarbageCollectionDirective::clear_version_watermark() {
  version_watermark_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GarbageCollectionDirective::version_watermark() const {
  // @@protoc_insertion_point(field_get:sync_pb.GarbageCollectionDirective.version_watermark)
  return version_watermark_;
}
inline void GarbageCollectionDirective::set_version_watermark(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  version_watermark_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GarbageCollectionDirective.version_watermark)
}

// optional int32 age_watermark_in_days = 3;
inline bool GarbageCollectionDirective::has_age_watermark_in_days() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GarbageCollectionDirective::clear_age_watermark_in_days() {
  age_watermark_in_days_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GarbageCollectionDirective::age_watermark_in_days() const {
  // @@protoc_insertion_point(field_get:sync_pb.GarbageCollectionDirective.age_watermark_in_days)
  return age_watermark_in_days_;
}
inline void GarbageCollectionDirective::set_age_watermark_in_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  age_watermark_in_days_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GarbageCollectionDirective.age_watermark_in_days)
}

// -------------------------------------------------------------------

// DataTypeProgressMarker

// optional int32 data_type_id = 1;
inline bool DataTypeProgressMarker::has_data_type_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataTypeProgressMarker::clear_data_type_id() {
  data_type_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataTypeProgressMarker::data_type_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.data_type_id)
  return data_type_id_;
}
inline void DataTypeProgressMarker::set_data_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  data_type_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeProgressMarker.data_type_id)
}

// optional bytes token = 2;
inline bool DataTypeProgressMarker::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataTypeProgressMarker::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataTypeProgressMarker::token() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.token)
  return token_.GetNoArena();
}
inline void DataTypeProgressMarker::set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeProgressMarker.token)
}
inline void DataTypeProgressMarker::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DataTypeProgressMarker.token)
}
inline void DataTypeProgressMarker::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DataTypeProgressMarker.token)
}
inline void DataTypeProgressMarker::set_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DataTypeProgressMarker.token)
}
inline std::string* DataTypeProgressMarker::mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataTypeProgressMarker::release_token() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataTypeProgressMarker::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.token)
}

// optional int64 timestamp_token_for_migration = 3 [deprecated = true];
inline bool DataTypeProgressMarker::has_timestamp_token_for_migration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataTypeProgressMarker::clear_timestamp_token_for_migration() {
  timestamp_token_for_migration_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataTypeProgressMarker::timestamp_token_for_migration() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.timestamp_token_for_migration)
  return timestamp_token_for_migration_;
}
inline void DataTypeProgressMarker::set_timestamp_token_for_migration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_token_for_migration_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeProgressMarker.timestamp_token_for_migration)
}

// optional string notification_hint = 4 [deprecated = true];
inline bool DataTypeProgressMarker::has_notification_hint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataTypeProgressMarker::clear_notification_hint() {
  notification_hint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataTypeProgressMarker::notification_hint() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.notification_hint)
  return notification_hint_.GetNoArena();
}
inline void DataTypeProgressMarker::set_notification_hint(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  notification_hint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeProgressMarker.notification_hint)
}
inline void DataTypeProgressMarker::set_notification_hint(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  notification_hint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DataTypeProgressMarker.notification_hint)
}
inline void DataTypeProgressMarker::set_notification_hint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  notification_hint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DataTypeProgressMarker.notification_hint)
}
inline void DataTypeProgressMarker::set_notification_hint(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  notification_hint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DataTypeProgressMarker.notification_hint)
}
inline std::string* DataTypeProgressMarker::mutable_notification_hint() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.notification_hint)
  return notification_hint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataTypeProgressMarker::release_notification_hint() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.notification_hint)
  if (!has_notification_hint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return notification_hint_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataTypeProgressMarker::set_allocated_notification_hint(std::string* notification_hint) {
  if (notification_hint != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  notification_hint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification_hint);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.notification_hint)
}

// optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
inline bool DataTypeProgressMarker::has_get_update_triggers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataTypeProgressMarker::clear_get_update_triggers() {
  if (get_update_triggers_ != nullptr) get_update_triggers_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::GetUpdateTriggers& DataTypeProgressMarker::get_update_triggers() const {
  const ::sync_pb::GetUpdateTriggers* p = get_update_triggers_;
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.get_update_triggers)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GetUpdateTriggers*>(
      &::sync_pb::_GetUpdateTriggers_default_instance_);
}
inline ::sync_pb::GetUpdateTriggers* DataTypeProgressMarker::release_get_update_triggers() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.get_update_triggers)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::GetUpdateTriggers* temp = get_update_triggers_;
  get_update_triggers_ = nullptr;
  return temp;
}
inline ::sync_pb::GetUpdateTriggers* DataTypeProgressMarker::mutable_get_update_triggers() {
  _has_bits_[0] |= 0x00000004u;
  if (get_update_triggers_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GetUpdateTriggers>(GetArenaNoVirtual());
    get_update_triggers_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.get_update_triggers)
  return get_update_triggers_;
}
inline void DataTypeProgressMarker::set_allocated_get_update_triggers(::sync_pb::GetUpdateTriggers* get_update_triggers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_update_triggers_;
  }
  if (get_update_triggers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_update_triggers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_update_triggers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  get_update_triggers_ = get_update_triggers;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.get_update_triggers)
}

// optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
inline bool DataTypeProgressMarker::has_gc_directive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataTypeProgressMarker::clear_gc_directive() {
  if (gc_directive_ != nullptr) gc_directive_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::GarbageCollectionDirective& DataTypeProgressMarker::gc_directive() const {
  const ::sync_pb::GarbageCollectionDirective* p = gc_directive_;
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeProgressMarker.gc_directive)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GarbageCollectionDirective*>(
      &::sync_pb::_GarbageCollectionDirective_default_instance_);
}
inline ::sync_pb::GarbageCollectionDirective* DataTypeProgressMarker::release_gc_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeProgressMarker.gc_directive)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::GarbageCollectionDirective* temp = gc_directive_;
  gc_directive_ = nullptr;
  return temp;
}
inline ::sync_pb::GarbageCollectionDirective* DataTypeProgressMarker::mutable_gc_directive() {
  _has_bits_[0] |= 0x00000008u;
  if (gc_directive_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GarbageCollectionDirective>(GetArenaNoVirtual());
    gc_directive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeProgressMarker.gc_directive)
  return gc_directive_;
}
inline void DataTypeProgressMarker::set_allocated_gc_directive(::sync_pb::GarbageCollectionDirective* gc_directive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gc_directive_;
  }
  if (gc_directive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gc_directive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gc_directive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gc_directive_ = gc_directive;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeProgressMarker.gc_directive)
}

// -------------------------------------------------------------------

// GetUpdatesMessage

// optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
inline bool GetUpdatesMessage::has_caller_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::sync_pb::GetUpdatesCallerInfo& GetUpdatesMessage::caller_info() const {
  const ::sync_pb::GetUpdatesCallerInfo* p = caller_info_;
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.caller_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GetUpdatesCallerInfo*>(
      &::sync_pb::_GetUpdatesCallerInfo_default_instance_);
}
inline ::sync_pb::GetUpdatesCallerInfo* GetUpdatesMessage::release_caller_info() {
  // @@protoc_insertion_point(field_release:sync_pb.GetUpdatesMessage.caller_info)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::GetUpdatesCallerInfo* temp = caller_info_;
  caller_info_ = nullptr;
  return temp;
}
inline ::sync_pb::GetUpdatesCallerInfo* GetUpdatesMessage::mutable_caller_info() {
  _has_bits_[0] |= 0x00000001u;
  if (caller_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GetUpdatesCallerInfo>(GetArenaNoVirtual());
    caller_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesMessage.caller_info)
  return caller_info_;
}
inline void GetUpdatesMessage::set_allocated_caller_info(::sync_pb::GetUpdatesCallerInfo* caller_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(caller_info_);
  }
  if (caller_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      caller_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caller_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caller_info_ = caller_info;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GetUpdatesMessage.caller_info)
}

// optional bool fetch_folders = 3 [default = true];
inline bool GetUpdatesMessage::has_fetch_folders() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetUpdatesMessage::clear_fetch_folders() {
  fetch_folders_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool GetUpdatesMessage::fetch_folders() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.fetch_folders)
  return fetch_folders_;
}
inline void GetUpdatesMessage::set_fetch_folders(bool value) {
  _has_bits_[0] |= 0x00000080u;
  fetch_folders_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.fetch_folders)
}

// optional int32 batch_size = 5;
inline bool GetUpdatesMessage::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetUpdatesMessage::clear_batch_size() {
  batch_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUpdatesMessage::batch_size() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.batch_size)
  return batch_size_;
}
inline void GetUpdatesMessage::set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.batch_size)
}

// repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
inline int GetUpdatesMessage::from_progress_marker_size() const {
  return from_progress_marker_.size();
}
inline void GetUpdatesMessage::clear_from_progress_marker() {
  from_progress_marker_.Clear();
}
inline ::sync_pb::DataTypeProgressMarker* GetUpdatesMessage::mutable_from_progress_marker(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesMessage.from_progress_marker)
  return from_progress_marker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >*
GetUpdatesMessage::mutable_from_progress_marker() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesMessage.from_progress_marker)
  return &from_progress_marker_;
}
inline const ::sync_pb::DataTypeProgressMarker& GetUpdatesMessage::from_progress_marker(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.from_progress_marker)
  return from_progress_marker_.Get(index);
}
inline ::sync_pb::DataTypeProgressMarker* GetUpdatesMessage::add_from_progress_marker() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesMessage.from_progress_marker)
  return from_progress_marker_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >&
GetUpdatesMessage::from_progress_marker() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesMessage.from_progress_marker)
  return from_progress_marker_;
}

// optional bool streaming = 7 [default = false];
inline bool GetUpdatesMessage::has_streaming() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetUpdatesMessage::clear_streaming() {
  streaming_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GetUpdatesMessage::streaming() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.streaming)
  return streaming_;
}
inline void GetUpdatesMessage::set_streaming(bool value) {
  _has_bits_[0] |= 0x00000008u;
  streaming_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.streaming)
}

// optional bool need_encryption_key = 8 [default = false];
inline bool GetUpdatesMessage::has_need_encryption_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetUpdatesMessage::clear_need_encryption_key() {
  need_encryption_key_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GetUpdatesMessage::need_encryption_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.need_encryption_key)
  return need_encryption_key_;
}
inline void GetUpdatesMessage::set_need_encryption_key(bool value) {
  _has_bits_[0] |= 0x00000010u;
  need_encryption_key_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.need_encryption_key)
}

// optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];
inline bool GetUpdatesMessage::has_create_mobile_bookmarks_folder() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetUpdatesMessage::clear_create_mobile_bookmarks_folder() {
  create_mobile_bookmarks_folder_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool GetUpdatesMessage::create_mobile_bookmarks_folder() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.create_mobile_bookmarks_folder)
  return create_mobile_bookmarks_folder_;
}
inline void GetUpdatesMessage::set_create_mobile_bookmarks_folder(bool value) {
  _has_bits_[0] |= 0x00000020u;
  create_mobile_bookmarks_folder_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.create_mobile_bookmarks_folder)
}

// optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
inline bool GetUpdatesMessage::has_get_updates_origin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetUpdatesMessage::clear_get_updates_origin() {
  get_updates_origin_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::SyncEnums_GetUpdatesOrigin GetUpdatesMessage::get_updates_origin() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.get_updates_origin)
  return static_cast< ::sync_pb::SyncEnums_GetUpdatesOrigin >(get_updates_origin_);
}
inline void GetUpdatesMessage::set_get_updates_origin(::sync_pb::SyncEnums_GetUpdatesOrigin value) {
  assert(::sync_pb::SyncEnums_GetUpdatesOrigin_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  get_updates_origin_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.get_updates_origin)
}

// optional bool is_retry = 10 [default = false];
inline bool GetUpdatesMessage::has_is_retry() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetUpdatesMessage::clear_is_retry() {
  is_retry_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool GetUpdatesMessage::is_retry() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.is_retry)
  return is_retry_;
}
inline void GetUpdatesMessage::set_is_retry(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_retry_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesMessage.is_retry)
}

// repeated .sync_pb.DataTypeContext client_contexts = 11;
inline int GetUpdatesMessage::client_contexts_size() const {
  return client_contexts_.size();
}
inline void GetUpdatesMessage::clear_client_contexts() {
  client_contexts_.Clear();
}
inline ::sync_pb::DataTypeContext* GetUpdatesMessage::mutable_client_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesMessage.client_contexts)
  return client_contexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >*
GetUpdatesMessage::mutable_client_contexts() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesMessage.client_contexts)
  return &client_contexts_;
}
inline const ::sync_pb::DataTypeContext& GetUpdatesMessage::client_contexts(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesMessage.client_contexts)
  return client_contexts_.Get(index);
}
inline ::sync_pb::DataTypeContext* GetUpdatesMessage::add_client_contexts() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesMessage.client_contexts)
  return client_contexts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >&
GetUpdatesMessage::client_contexts() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesMessage.client_contexts)
  return client_contexts_;
}

// -------------------------------------------------------------------

// ClearServerDataMessage

// -------------------------------------------------------------------

// ClearServerDataResponse

// -------------------------------------------------------------------

// ChipBag

// optional bytes server_chips = 1;
inline bool ChipBag::has_server_chips() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChipBag::clear_server_chips() {
  server_chips_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChipBag::server_chips() const {
  // @@protoc_insertion_point(field_get:sync_pb.ChipBag.server_chips)
  return server_chips_.GetNoArena();
}
inline void ChipBag::set_server_chips(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  server_chips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ChipBag.server_chips)
}
inline void ChipBag::set_server_chips(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  server_chips_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ChipBag.server_chips)
}
inline void ChipBag::set_server_chips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  server_chips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ChipBag.server_chips)
}
inline void ChipBag::set_server_chips(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  server_chips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ChipBag.server_chips)
}
inline std::string* ChipBag::mutable_server_chips() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ChipBag.server_chips)
  return server_chips_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChipBag::release_server_chips() {
  // @@protoc_insertion_point(field_release:sync_pb.ChipBag.server_chips)
  if (!has_server_chips()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return server_chips_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChipBag::set_allocated_server_chips(std::string* server_chips) {
  if (server_chips != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_chips_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_chips);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ChipBag.server_chips)
}

// -------------------------------------------------------------------

// ClientStatus

// optional bool hierarchy_conflict_detected = 1;
inline bool ClientStatus::has_hierarchy_conflict_detected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientStatus::clear_hierarchy_conflict_detected() {
  hierarchy_conflict_detected_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ClientStatus::hierarchy_conflict_detected() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientStatus.hierarchy_conflict_detected)
  return hierarchy_conflict_detected_;
}
inline void ClientStatus::set_hierarchy_conflict_detected(bool value) {
  _has_bits_[0] |= 0x00000001u;
  hierarchy_conflict_detected_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientStatus.hierarchy_conflict_detected)
}

// optional bool is_sync_feature_enabled = 2;
inline bool ClientStatus::has_is_sync_feature_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientStatus::clear_is_sync_feature_enabled() {
  is_sync_feature_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ClientStatus::is_sync_feature_enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientStatus.is_sync_feature_enabled)
  return is_sync_feature_enabled_;
}
inline void ClientStatus::set_is_sync_feature_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_sync_feature_enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientStatus.is_sync_feature_enabled)
}

// -------------------------------------------------------------------

// DataTypeContext

// optional int32 data_type_id = 1;
inline bool DataTypeContext::has_data_type_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataTypeContext::clear_data_type_id() {
  data_type_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataTypeContext::data_type_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeContext.data_type_id)
  return data_type_id_;
}
inline void DataTypeContext::set_data_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  data_type_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeContext.data_type_id)
}

// optional bytes context = 2;
inline bool DataTypeContext::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataTypeContext::clear_context() {
  context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataTypeContext::context() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeContext.context)
  return context_.GetNoArena();
}
inline void DataTypeContext::set_context(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeContext.context)
}
inline void DataTypeContext::set_context(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  context_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DataTypeContext.context)
}
inline void DataTypeContext::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DataTypeContext.context)
}
inline void DataTypeContext::set_context(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DataTypeContext.context)
}
inline std::string* DataTypeContext::mutable_context() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.DataTypeContext.context)
  return context_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataTypeContext::release_context() {
  // @@protoc_insertion_point(field_release:sync_pb.DataTypeContext.context)
  if (!has_context()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return context_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataTypeContext::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  context_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DataTypeContext.context)
}

// optional int64 version = 3;
inline bool DataTypeContext::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataTypeContext::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataTypeContext::version() const {
  // @@protoc_insertion_point(field_get:sync_pb.DataTypeContext.version)
  return version_;
}
inline void DataTypeContext::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DataTypeContext.version)
}

// -------------------------------------------------------------------

// ClientToServerMessage

// required string share = 1;
inline bool ClientToServerMessage::has_share() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientToServerMessage::clear_share() {
  share_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientToServerMessage::share() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.share)
  return share_.GetNoArena();
}
inline void ClientToServerMessage::set_share(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  share_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.share)
}
inline void ClientToServerMessage::set_share(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  share_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerMessage.share)
}
inline void ClientToServerMessage::set_share(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  share_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerMessage.share)
}
inline void ClientToServerMessage::set_share(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  share_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerMessage.share)
}
inline std::string* ClientToServerMessage::mutable_share() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.share)
  return share_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientToServerMessage::release_share() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.share)
  if (!has_share()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return share_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientToServerMessage::set_allocated_share(std::string* share) {
  if (share != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  share_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), share);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.share)
}

// optional int32 protocol_version = 2 [default = 52];
inline bool ClientToServerMessage::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ClientToServerMessage::clear_protocol_version() {
  protocol_version_ = 52;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientToServerMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.protocol_version)
  return protocol_version_;
}
inline void ClientToServerMessage::set_protocol_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.protocol_version)
}

// required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
inline bool ClientToServerMessage::has_message_contents() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ClientToServerMessage::clear_message_contents() {
  message_contents_ = 1;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::sync_pb::ClientToServerMessage_Contents ClientToServerMessage::message_contents() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.message_contents)
  return static_cast< ::sync_pb::ClientToServerMessage_Contents >(message_contents_);
}
inline void ClientToServerMessage::set_message_contents(::sync_pb::ClientToServerMessage_Contents value) {
  assert(::sync_pb::ClientToServerMessage_Contents_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  message_contents_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.message_contents)
}

// optional .sync_pb.CommitMessage commit = 4;
inline bool ClientToServerMessage::has_commit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientToServerMessage::clear_commit() {
  if (commit_ != nullptr) commit_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::sync_pb::CommitMessage& ClientToServerMessage::commit() const {
  const ::sync_pb::CommitMessage* p = commit_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.commit)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::CommitMessage*>(
      &::sync_pb::_CommitMessage_default_instance_);
}
inline ::sync_pb::CommitMessage* ClientToServerMessage::release_commit() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.commit)
  _has_bits_[0] &= ~0x00000010u;
  ::sync_pb::CommitMessage* temp = commit_;
  commit_ = nullptr;
  return temp;
}
inline ::sync_pb::CommitMessage* ClientToServerMessage::mutable_commit() {
  _has_bits_[0] |= 0x00000010u;
  if (commit_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::CommitMessage>(GetArenaNoVirtual());
    commit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.commit)
  return commit_;
}
inline void ClientToServerMessage::set_allocated_commit(::sync_pb::CommitMessage* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commit_;
  }
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  commit_ = commit;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.commit)
}

// optional .sync_pb.GetUpdatesMessage get_updates = 5;
inline bool ClientToServerMessage::has_get_updates() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientToServerMessage::clear_get_updates() {
  if (get_updates_ != nullptr) get_updates_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::sync_pb::GetUpdatesMessage& ClientToServerMessage::get_updates() const {
  const ::sync_pb::GetUpdatesMessage* p = get_updates_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.get_updates)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GetUpdatesMessage*>(
      &::sync_pb::_GetUpdatesMessage_default_instance_);
}
inline ::sync_pb::GetUpdatesMessage* ClientToServerMessage::release_get_updates() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.get_updates)
  _has_bits_[0] &= ~0x00000020u;
  ::sync_pb::GetUpdatesMessage* temp = get_updates_;
  get_updates_ = nullptr;
  return temp;
}
inline ::sync_pb::GetUpdatesMessage* ClientToServerMessage::mutable_get_updates() {
  _has_bits_[0] |= 0x00000020u;
  if (get_updates_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GetUpdatesMessage>(GetArenaNoVirtual());
    get_updates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.get_updates)
  return get_updates_;
}
inline void ClientToServerMessage::set_allocated_get_updates(::sync_pb::GetUpdatesMessage* get_updates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_updates_;
  }
  if (get_updates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_updates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_updates, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  get_updates_ = get_updates;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.get_updates)
}

// optional string store_birthday = 7;
inline bool ClientToServerMessage::has_store_birthday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientToServerMessage::clear_store_birthday() {
  store_birthday_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientToServerMessage::store_birthday() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.store_birthday)
  return store_birthday_.GetNoArena();
}
inline void ClientToServerMessage::set_store_birthday(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.store_birthday)
}
inline void ClientToServerMessage::set_store_birthday(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerMessage.store_birthday)
}
inline void ClientToServerMessage::set_store_birthday(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerMessage.store_birthday)
}
inline void ClientToServerMessage::set_store_birthday(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerMessage.store_birthday)
}
inline std::string* ClientToServerMessage::mutable_store_birthday() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.store_birthday)
  return store_birthday_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientToServerMessage::release_store_birthday() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.store_birthday)
  if (!has_store_birthday()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return store_birthday_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientToServerMessage::set_allocated_store_birthday(std::string* store_birthday) {
  if (store_birthday != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  store_birthday_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_birthday);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.store_birthday)
}

// optional bool sync_problem_detected = 8 [default = false];
inline bool ClientToServerMessage::has_sync_problem_detected() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ClientToServerMessage::clear_sync_problem_detected() {
  sync_problem_detected_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ClientToServerMessage::sync_problem_detected() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.sync_problem_detected)
  return sync_problem_detected_;
}
inline void ClientToServerMessage::set_sync_problem_detected(bool value) {
  _has_bits_[0] |= 0x00000400u;
  sync_problem_detected_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.sync_problem_detected)
}

// optional .sync_pb.DebugInfo debug_info = 10;
inline bool ClientToServerMessage::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::sync_pb::DebugInfo& ClientToServerMessage::debug_info() const {
  const ::sync_pb::DebugInfo* p = debug_info_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.debug_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::DebugInfo*>(
      &::sync_pb::_DebugInfo_default_instance_);
}
inline ::sync_pb::DebugInfo* ClientToServerMessage::release_debug_info() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.debug_info)
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::DebugInfo* temp = debug_info_;
  debug_info_ = nullptr;
  return temp;
}
inline ::sync_pb::DebugInfo* ClientToServerMessage::mutable_debug_info() {
  _has_bits_[0] |= 0x00000040u;
  if (debug_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::DebugInfo>(GetArenaNoVirtual());
    debug_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.debug_info)
  return debug_info_;
}
inline void ClientToServerMessage::set_allocated_debug_info(::sync_pb::DebugInfo* debug_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_info_);
  }
  if (debug_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  debug_info_ = debug_info;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.debug_info)
}

// optional .sync_pb.ChipBag bag_of_chips = 11;
inline bool ClientToServerMessage::has_bag_of_chips() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClientToServerMessage::clear_bag_of_chips() {
  if (bag_of_chips_ != nullptr) bag_of_chips_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::sync_pb::ChipBag& ClientToServerMessage::bag_of_chips() const {
  const ::sync_pb::ChipBag* p = bag_of_chips_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.bag_of_chips)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ChipBag*>(
      &::sync_pb::_ChipBag_default_instance_);
}
inline ::sync_pb::ChipBag* ClientToServerMessage::release_bag_of_chips() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.bag_of_chips)
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::ChipBag* temp = bag_of_chips_;
  bag_of_chips_ = nullptr;
  return temp;
}
inline ::sync_pb::ChipBag* ClientToServerMessage::mutable_bag_of_chips() {
  _has_bits_[0] |= 0x00000080u;
  if (bag_of_chips_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ChipBag>(GetArenaNoVirtual());
    bag_of_chips_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.bag_of_chips)
  return bag_of_chips_;
}
inline void ClientToServerMessage::set_allocated_bag_of_chips(::sync_pb::ChipBag* bag_of_chips) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bag_of_chips_;
  }
  if (bag_of_chips) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bag_of_chips = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bag_of_chips, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  bag_of_chips_ = bag_of_chips;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.bag_of_chips)
}

// optional string api_key = 12;
inline bool ClientToServerMessage::has_api_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientToServerMessage::clear_api_key() {
  api_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientToServerMessage::api_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.api_key)
  return api_key_.GetNoArena();
}
inline void ClientToServerMessage::set_api_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  api_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.api_key)
}
inline void ClientToServerMessage::set_api_key(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  api_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerMessage.api_key)
}
inline void ClientToServerMessage::set_api_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  api_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerMessage.api_key)
}
inline void ClientToServerMessage::set_api_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  api_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerMessage.api_key)
}
inline std::string* ClientToServerMessage::mutable_api_key() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.api_key)
  return api_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientToServerMessage::release_api_key() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.api_key)
  if (!has_api_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return api_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientToServerMessage::set_allocated_api_key(std::string* api_key) {
  if (api_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  api_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.api_key)
}

// optional .sync_pb.ClientStatus client_status = 13;
inline bool ClientToServerMessage::has_client_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClientToServerMessage::clear_client_status() {
  if (client_status_ != nullptr) client_status_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::sync_pb::ClientStatus& ClientToServerMessage::client_status() const {
  const ::sync_pb::ClientStatus* p = client_status_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.client_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ClientStatus*>(
      &::sync_pb::_ClientStatus_default_instance_);
}
inline ::sync_pb::ClientStatus* ClientToServerMessage::release_client_status() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.client_status)
  _has_bits_[0] &= ~0x00000100u;
  ::sync_pb::ClientStatus* temp = client_status_;
  client_status_ = nullptr;
  return temp;
}
inline ::sync_pb::ClientStatus* ClientToServerMessage::mutable_client_status() {
  _has_bits_[0] |= 0x00000100u;
  if (client_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ClientStatus>(GetArenaNoVirtual());
    client_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.client_status)
  return client_status_;
}
inline void ClientToServerMessage::set_allocated_client_status(::sync_pb::ClientStatus* client_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_status_;
  }
  if (client_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  client_status_ = client_status;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.client_status)
}

// optional string invalidator_client_id = 14;
inline bool ClientToServerMessage::has_invalidator_client_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientToServerMessage::clear_invalidator_client_id() {
  invalidator_client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientToServerMessage::invalidator_client_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.invalidator_client_id)
  return invalidator_client_id_.GetNoArena();
}
inline void ClientToServerMessage::set_invalidator_client_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  invalidator_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerMessage.invalidator_client_id)
}
inline void ClientToServerMessage::set_invalidator_client_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  invalidator_client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerMessage.invalidator_client_id)
}
inline void ClientToServerMessage::set_invalidator_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  invalidator_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerMessage.invalidator_client_id)
}
inline void ClientToServerMessage::set_invalidator_client_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  invalidator_client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerMessage.invalidator_client_id)
}
inline std::string* ClientToServerMessage::mutable_invalidator_client_id() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.invalidator_client_id)
  return invalidator_client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientToServerMessage::release_invalidator_client_id() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.invalidator_client_id)
  if (!has_invalidator_client_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return invalidator_client_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientToServerMessage::set_allocated_invalidator_client_id(std::string* invalidator_client_id) {
  if (invalidator_client_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  invalidator_client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invalidator_client_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.invalidator_client_id)
}

// optional .sync_pb.ClearServerDataMessage clear_server_data = 15;
inline bool ClientToServerMessage::has_clear_server_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClientToServerMessage::clear_clear_server_data() {
  if (clear_server_data_ != nullptr) clear_server_data_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::sync_pb::ClearServerDataMessage& ClientToServerMessage::clear_server_data() const {
  const ::sync_pb::ClearServerDataMessage* p = clear_server_data_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerMessage.clear_server_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ClearServerDataMessage*>(
      &::sync_pb::_ClearServerDataMessage_default_instance_);
}
inline ::sync_pb::ClearServerDataMessage* ClientToServerMessage::release_clear_server_data() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerMessage.clear_server_data)
  _has_bits_[0] &= ~0x00000200u;
  ::sync_pb::ClearServerDataMessage* temp = clear_server_data_;
  clear_server_data_ = nullptr;
  return temp;
}
inline ::sync_pb::ClearServerDataMessage* ClientToServerMessage::mutable_clear_server_data() {
  _has_bits_[0] |= 0x00000200u;
  if (clear_server_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ClearServerDataMessage>(GetArenaNoVirtual());
    clear_server_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerMessage.clear_server_data)
  return clear_server_data_;
}
inline void ClientToServerMessage::set_allocated_clear_server_data(::sync_pb::ClearServerDataMessage* clear_server_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clear_server_data_;
  }
  if (clear_server_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clear_server_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_server_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  clear_server_data_ = clear_server_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerMessage.clear_server_data)
}

// -------------------------------------------------------------------

// GetCrashInfoRequest

// optional string crash_id = 1;
inline bool GetCrashInfoRequest::has_crash_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCrashInfoRequest::clear_crash_id() {
  crash_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetCrashInfoRequest::crash_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetCrashInfoRequest.crash_id)
  return crash_id_.GetNoArena();
}
inline void GetCrashInfoRequest::set_crash_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  crash_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.GetCrashInfoRequest.crash_id)
}
inline void GetCrashInfoRequest::set_crash_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  crash_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.GetCrashInfoRequest.crash_id)
}
inline void GetCrashInfoRequest::set_crash_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  crash_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.GetCrashInfoRequest.crash_id)
}
inline void GetCrashInfoRequest::set_crash_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  crash_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.GetCrashInfoRequest.crash_id)
}
inline std::string* GetCrashInfoRequest::mutable_crash_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.GetCrashInfoRequest.crash_id)
  return crash_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCrashInfoRequest::release_crash_id() {
  // @@protoc_insertion_point(field_release:sync_pb.GetCrashInfoRequest.crash_id)
  if (!has_crash_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return crash_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCrashInfoRequest::set_allocated_crash_id(std::string* crash_id) {
  if (crash_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  crash_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crash_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GetCrashInfoRequest.crash_id)
}

// optional int64 crash_time_millis = 2;
inline bool GetCrashInfoRequest::has_crash_time_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCrashInfoRequest::clear_crash_time_millis() {
  crash_time_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCrashInfoRequest::crash_time_millis() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetCrashInfoRequest.crash_time_millis)
  return crash_time_millis_;
}
inline void GetCrashInfoRequest::set_crash_time_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  crash_time_millis_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetCrashInfoRequest.crash_time_millis)
}

// -------------------------------------------------------------------

// GetCrashInfoResponse

// optional string stack_id = 1;
inline bool GetCrashInfoResponse::has_stack_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCrashInfoResponse::clear_stack_id() {
  stack_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetCrashInfoResponse::stack_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetCrashInfoResponse.stack_id)
  return stack_id_.GetNoArena();
}
inline void GetCrashInfoResponse::set_stack_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stack_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.GetCrashInfoResponse.stack_id)
}
inline void GetCrashInfoResponse::set_stack_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stack_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.GetCrashInfoResponse.stack_id)
}
inline void GetCrashInfoResponse::set_stack_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stack_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.GetCrashInfoResponse.stack_id)
}
inline void GetCrashInfoResponse::set_stack_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stack_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.GetCrashInfoResponse.stack_id)
}
inline std::string* GetCrashInfoResponse::mutable_stack_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.GetCrashInfoResponse.stack_id)
  return stack_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCrashInfoResponse::release_stack_id() {
  // @@protoc_insertion_point(field_release:sync_pb.GetCrashInfoResponse.stack_id)
  if (!has_stack_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stack_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCrashInfoResponse::set_allocated_stack_id(std::string* stack_id) {
  if (stack_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stack_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stack_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GetCrashInfoResponse.stack_id)
}

// optional int64 crash_time_millis = 2;
inline bool GetCrashInfoResponse::has_crash_time_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCrashInfoResponse::clear_crash_time_millis() {
  crash_time_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCrashInfoResponse::crash_time_millis() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetCrashInfoResponse.crash_time_millis)
  return crash_time_millis_;
}
inline void GetCrashInfoResponse::set_crash_time_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  crash_time_millis_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetCrashInfoResponse.crash_time_millis)
}

// -------------------------------------------------------------------

// CommitResponse_EntryResponse_DatatypeSpecificError

// optional .sync_pb.SharingMessageCommitError sharing_message_error = 1;
inline bool CommitResponse_EntryResponse_DatatypeSpecificError::has_sharing_message_error() const {
  return datatype_error_case() == kSharingMessageError;
}
inline void CommitResponse_EntryResponse_DatatypeSpecificError::set_has_sharing_message_error() {
  _oneof_case_[0] = kSharingMessageError;
}
inline ::sync_pb::SharingMessageCommitError* CommitResponse_EntryResponse_DatatypeSpecificError::release_sharing_message_error() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError.sharing_message_error)
  if (has_sharing_message_error()) {
    clear_has_datatype_error();
      ::sync_pb::SharingMessageCommitError* temp = datatype_error_.sharing_message_error_;
    datatype_error_.sharing_message_error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SharingMessageCommitError& CommitResponse_EntryResponse_DatatypeSpecificError::sharing_message_error() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError.sharing_message_error)
  return has_sharing_message_error()
      ? *datatype_error_.sharing_message_error_
      : *reinterpret_cast< ::sync_pb::SharingMessageCommitError*>(&::sync_pb::_SharingMessageCommitError_default_instance_);
}
inline ::sync_pb::SharingMessageCommitError* CommitResponse_EntryResponse_DatatypeSpecificError::mutable_sharing_message_error() {
  if (!has_sharing_message_error()) {
    clear_datatype_error();
    set_has_sharing_message_error();
    datatype_error_.sharing_message_error_ = CreateMaybeMessage< ::sync_pb::SharingMessageCommitError >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError.sharing_message_error)
  return datatype_error_.sharing_message_error_;
}

inline bool CommitResponse_EntryResponse_DatatypeSpecificError::has_datatype_error() const {
  return datatype_error_case() != DATATYPE_ERROR_NOT_SET;
}
inline void CommitResponse_EntryResponse_DatatypeSpecificError::clear_has_datatype_error() {
  _oneof_case_[0] = DATATYPE_ERROR_NOT_SET;
}
inline CommitResponse_EntryResponse_DatatypeSpecificError::DatatypeErrorCase CommitResponse_EntryResponse_DatatypeSpecificError::datatype_error_case() const {
  return CommitResponse_EntryResponse_DatatypeSpecificError::DatatypeErrorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommitResponse_EntryResponse

// required .sync_pb.CommitResponse.ResponseType response_type = 2;
inline bool CommitResponse_EntryResponse::has_response_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommitResponse_EntryResponse::clear_response_type() {
  response_type_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::sync_pb::CommitResponse_ResponseType CommitResponse_EntryResponse::response_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.response_type)
  return static_cast< ::sync_pb::CommitResponse_ResponseType >(response_type_);
}
inline void CommitResponse_EntryResponse::set_response_type(::sync_pb::CommitResponse_ResponseType value) {
  assert(::sync_pb::CommitResponse_ResponseType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  response_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.response_type)
}

// optional string id_string = 3;
inline bool CommitResponse_EntryResponse::has_id_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitResponse_EntryResponse::clear_id_string() {
  id_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommitResponse_EntryResponse::id_string() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.id_string)
  return id_string_.GetNoArena();
}
inline void CommitResponse_EntryResponse::set_id_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.id_string)
}
inline void CommitResponse_EntryResponse::set_id_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitResponse.EntryResponse.id_string)
}
inline void CommitResponse_EntryResponse::set_id_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitResponse.EntryResponse.id_string)
}
inline void CommitResponse_EntryResponse::set_id_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitResponse.EntryResponse.id_string)
}
inline std::string* CommitResponse_EntryResponse::mutable_id_string() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.id_string)
  return id_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommitResponse_EntryResponse::release_id_string() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.id_string)
  if (!has_id_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommitResponse_EntryResponse::set_allocated_id_string(std::string* id_string) {
  if (id_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_string);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.id_string)
}

// optional string parent_id_string = 4;
inline bool CommitResponse_EntryResponse::has_parent_id_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommitResponse_EntryResponse::clear_parent_id_string() {
  parent_id_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommitResponse_EntryResponse::parent_id_string() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.parent_id_string)
  return parent_id_string_.GetNoArena();
}
inline void CommitResponse_EntryResponse::set_parent_id_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  parent_id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.parent_id_string)
}
inline void CommitResponse_EntryResponse::set_parent_id_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  parent_id_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitResponse.EntryResponse.parent_id_string)
}
inline void CommitResponse_EntryResponse::set_parent_id_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  parent_id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitResponse.EntryResponse.parent_id_string)
}
inline void CommitResponse_EntryResponse::set_parent_id_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  parent_id_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitResponse.EntryResponse.parent_id_string)
}
inline std::string* CommitResponse_EntryResponse::mutable_parent_id_string() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.parent_id_string)
  return parent_id_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommitResponse_EntryResponse::release_parent_id_string() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.parent_id_string)
  if (!has_parent_id_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return parent_id_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommitResponse_EntryResponse::set_allocated_parent_id_string(std::string* parent_id_string) {
  if (parent_id_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parent_id_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id_string);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.parent_id_string)
}

// optional int64 version = 6;
inline bool CommitResponse_EntryResponse::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommitResponse_EntryResponse::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommitResponse_EntryResponse::version() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.version)
  return version_;
}
inline void CommitResponse_EntryResponse::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  version_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.version)
}

// optional string name = 7;
inline bool CommitResponse_EntryResponse::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommitResponse_EntryResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CommitResponse_EntryResponse::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.name)
  return name_.GetNoArena();
}
inline void CommitResponse_EntryResponse::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.name)
}
inline void CommitResponse_EntryResponse::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitResponse.EntryResponse.name)
}
inline void CommitResponse_EntryResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitResponse.EntryResponse.name)
}
inline void CommitResponse_EntryResponse::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitResponse.EntryResponse.name)
}
inline std::string* CommitResponse_EntryResponse::mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommitResponse_EntryResponse::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommitResponse_EntryResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.name)
}

// optional string non_unique_name = 8;
inline bool CommitResponse_EntryResponse::has_non_unique_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommitResponse_EntryResponse::clear_non_unique_name() {
  non_unique_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CommitResponse_EntryResponse::non_unique_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.non_unique_name)
  return non_unique_name_.GetNoArena();
}
inline void CommitResponse_EntryResponse::set_non_unique_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  non_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.non_unique_name)
}
inline void CommitResponse_EntryResponse::set_non_unique_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  non_unique_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitResponse.EntryResponse.non_unique_name)
}
inline void CommitResponse_EntryResponse::set_non_unique_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  non_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitResponse.EntryResponse.non_unique_name)
}
inline void CommitResponse_EntryResponse::set_non_unique_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  non_unique_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitResponse.EntryResponse.non_unique_name)
}
inline std::string* CommitResponse_EntryResponse::mutable_non_unique_name() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.non_unique_name)
  return non_unique_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommitResponse_EntryResponse::release_non_unique_name() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.non_unique_name)
  if (!has_non_unique_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return non_unique_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommitResponse_EntryResponse::set_allocated_non_unique_name(std::string* non_unique_name) {
  if (non_unique_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  non_unique_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), non_unique_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.non_unique_name)
}

// optional string error_message = 9;
inline bool CommitResponse_EntryResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommitResponse_EntryResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CommitResponse_EntryResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.error_message)
  return error_message_.GetNoArena();
}
inline void CommitResponse_EntryResponse::set_error_message(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.error_message)
}
inline void CommitResponse_EntryResponse::set_error_message(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  error_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CommitResponse.EntryResponse.error_message)
}
inline void CommitResponse_EntryResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CommitResponse.EntryResponse.error_message)
}
inline void CommitResponse_EntryResponse::set_error_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CommitResponse.EntryResponse.error_message)
}
inline std::string* CommitResponse_EntryResponse::mutable_error_message() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.error_message)
  return error_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommitResponse_EntryResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.error_message)
  if (!has_error_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return error_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommitResponse_EntryResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  error_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.error_message)
}

// optional int64 mtime = 10;
inline bool CommitResponse_EntryResponse::has_mtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommitResponse_EntryResponse::clear_mtime() {
  mtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommitResponse_EntryResponse::mtime() const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.mtime)
  return mtime_;
}
inline void CommitResponse_EntryResponse::set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  mtime_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CommitResponse.EntryResponse.mtime)
}

// optional .sync_pb.CommitResponse.EntryResponse.DatatypeSpecificError datatype_specific_error = 11;
inline bool CommitResponse_EntryResponse::has_datatype_specific_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommitResponse_EntryResponse::clear_datatype_specific_error() {
  if (datatype_specific_error_ != nullptr) datatype_specific_error_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError& CommitResponse_EntryResponse::datatype_specific_error() const {
  const ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* p = datatype_specific_error_;
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.EntryResponse.datatype_specific_error)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError*>(
      &::sync_pb::_CommitResponse_EntryResponse_DatatypeSpecificError_default_instance_);
}
inline ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* CommitResponse_EntryResponse::release_datatype_specific_error() {
  // @@protoc_insertion_point(field_release:sync_pb.CommitResponse.EntryResponse.datatype_specific_error)
  _has_bits_[0] &= ~0x00000020u;
  ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* temp = datatype_specific_error_;
  datatype_specific_error_ = nullptr;
  return temp;
}
inline ::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* CommitResponse_EntryResponse::mutable_datatype_specific_error() {
  _has_bits_[0] |= 0x00000020u;
  if (datatype_specific_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError>(GetArenaNoVirtual());
    datatype_specific_error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.EntryResponse.datatype_specific_error)
  return datatype_specific_error_;
}
inline void CommitResponse_EntryResponse::set_allocated_datatype_specific_error(::sync_pb::CommitResponse_EntryResponse_DatatypeSpecificError* datatype_specific_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete datatype_specific_error_;
  }
  if (datatype_specific_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      datatype_specific_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datatype_specific_error, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  datatype_specific_error_ = datatype_specific_error;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CommitResponse.EntryResponse.datatype_specific_error)
}

// -------------------------------------------------------------------

// CommitResponse

// repeated group EntryResponse = 1 { ... };
inline int CommitResponse::entryresponse_size() const {
  return entryresponse_.size();
}
inline void CommitResponse::clear_entryresponse() {
  entryresponse_.Clear();
}
inline ::sync_pb::CommitResponse_EntryResponse* CommitResponse::mutable_entryresponse(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.CommitResponse.entryresponse)
  return entryresponse_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::CommitResponse_EntryResponse >*
CommitResponse::mutable_entryresponse() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.CommitResponse.entryresponse)
  return &entryresponse_;
}
inline const ::sync_pb::CommitResponse_EntryResponse& CommitResponse::entryresponse(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.CommitResponse.entryresponse)
  return entryresponse_.Get(index);
}
inline ::sync_pb::CommitResponse_EntryResponse* CommitResponse::add_entryresponse() {
  // @@protoc_insertion_point(field_add:sync_pb.CommitResponse.entryresponse)
  return entryresponse_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::CommitResponse_EntryResponse >&
CommitResponse::entryresponse() const {
  // @@protoc_insertion_point(field_list:sync_pb.CommitResponse.entryresponse)
  return entryresponse_;
}

// -------------------------------------------------------------------

// GetUpdatesResponse

// repeated .sync_pb.SyncEntity entries = 1;
inline int GetUpdatesResponse::entries_size() const {
  return entries_.size();
}
inline void GetUpdatesResponse::clear_entries() {
  entries_.Clear();
}
inline ::sync_pb::SyncEntity* GetUpdatesResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesResponse.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SyncEntity >*
GetUpdatesResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesResponse.entries)
  return &entries_;
}
inline const ::sync_pb::SyncEntity& GetUpdatesResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.entries)
  return entries_.Get(index);
}
inline ::sync_pb::SyncEntity* GetUpdatesResponse::add_entries() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesResponse.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SyncEntity >&
GetUpdatesResponse::entries() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesResponse.entries)
  return entries_;
}

// optional int64 changes_remaining = 4;
inline bool GetUpdatesResponse::has_changes_remaining() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetUpdatesResponse::clear_changes_remaining() {
  changes_remaining_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetUpdatesResponse::changes_remaining() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.changes_remaining)
  return changes_remaining_;
}
inline void GetUpdatesResponse::set_changes_remaining(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  changes_remaining_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesResponse.changes_remaining)
}

// repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
inline int GetUpdatesResponse::new_progress_marker_size() const {
  return new_progress_marker_.size();
}
inline void GetUpdatesResponse::clear_new_progress_marker() {
  new_progress_marker_.Clear();
}
inline ::sync_pb::DataTypeProgressMarker* GetUpdatesResponse::mutable_new_progress_marker(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesResponse.new_progress_marker)
  return new_progress_marker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >*
GetUpdatesResponse::mutable_new_progress_marker() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesResponse.new_progress_marker)
  return &new_progress_marker_;
}
inline const ::sync_pb::DataTypeProgressMarker& GetUpdatesResponse::new_progress_marker(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.new_progress_marker)
  return new_progress_marker_.Get(index);
}
inline ::sync_pb::DataTypeProgressMarker* GetUpdatesResponse::add_new_progress_marker() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesResponse.new_progress_marker)
  return new_progress_marker_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeProgressMarker >&
GetUpdatesResponse::new_progress_marker() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesResponse.new_progress_marker)
  return new_progress_marker_;
}

// repeated bytes encryption_keys = 6;
inline int GetUpdatesResponse::encryption_keys_size() const {
  return encryption_keys_.size();
}
inline void GetUpdatesResponse::clear_encryption_keys() {
  encryption_keys_.Clear();
}
inline const std::string& GetUpdatesResponse::encryption_keys(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.encryption_keys)
  return encryption_keys_.Get(index);
}
inline std::string* GetUpdatesResponse::mutable_encryption_keys(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesResponse.encryption_keys)
  return encryption_keys_.Mutable(index);
}
inline void GetUpdatesResponse::set_encryption_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesResponse.encryption_keys)
  encryption_keys_.Mutable(index)->assign(value);
}
inline void GetUpdatesResponse::set_encryption_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesResponse.encryption_keys)
  encryption_keys_.Mutable(index)->assign(std::move(value));
}
inline void GetUpdatesResponse::set_encryption_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  encryption_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.GetUpdatesResponse.encryption_keys)
}
inline void GetUpdatesResponse::set_encryption_keys(int index, const void* value, size_t size) {
  encryption_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.GetUpdatesResponse.encryption_keys)
}
inline std::string* GetUpdatesResponse::add_encryption_keys() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.GetUpdatesResponse.encryption_keys)
  return encryption_keys_.Add();
}
inline void GetUpdatesResponse::add_encryption_keys(const std::string& value) {
  encryption_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesResponse.encryption_keys)
}
inline void GetUpdatesResponse::add_encryption_keys(std::string&& value) {
  encryption_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesResponse.encryption_keys)
}
inline void GetUpdatesResponse::add_encryption_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  encryption_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.GetUpdatesResponse.encryption_keys)
}
inline void GetUpdatesResponse::add_encryption_keys(const void* value, size_t size) {
  encryption_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.GetUpdatesResponse.encryption_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetUpdatesResponse::encryption_keys() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesResponse.encryption_keys)
  return encryption_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetUpdatesResponse::mutable_encryption_keys() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesResponse.encryption_keys)
  return &encryption_keys_;
}

// repeated .sync_pb.DataTypeContext context_mutations = 7;
inline int GetUpdatesResponse::context_mutations_size() const {
  return context_mutations_.size();
}
inline void GetUpdatesResponse::clear_context_mutations() {
  context_mutations_.Clear();
}
inline ::sync_pb::DataTypeContext* GetUpdatesResponse::mutable_context_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.GetUpdatesResponse.context_mutations)
  return context_mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >*
GetUpdatesResponse::mutable_context_mutations() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GetUpdatesResponse.context_mutations)
  return &context_mutations_;
}
inline const ::sync_pb::DataTypeContext& GetUpdatesResponse::context_mutations(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesResponse.context_mutations)
  return context_mutations_.Get(index);
}
inline ::sync_pb::DataTypeContext* GetUpdatesResponse::add_context_mutations() {
  // @@protoc_insertion_point(field_add:sync_pb.GetUpdatesResponse.context_mutations)
  return context_mutations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DataTypeContext >&
GetUpdatesResponse::context_mutations() const {
  // @@protoc_insertion_point(field_list:sync_pb.GetUpdatesResponse.context_mutations)
  return context_mutations_;
}

// -------------------------------------------------------------------

// ClientToServerResponse_Error

// optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
inline bool ClientToServerResponse_Error::has_error_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientToServerResponse_Error::clear_error_type() {
  error_type_ = 100;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::SyncEnums_ErrorType ClientToServerResponse_Error::error_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.Error.error_type)
  return static_cast< ::sync_pb::SyncEnums_ErrorType >(error_type_);
}
inline void ClientToServerResponse_Error::set_error_type(::sync_pb::SyncEnums_ErrorType value) {
  assert(::sync_pb::SyncEnums_ErrorType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  error_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.Error.error_type)
}

// optional string error_description = 2;
inline bool ClientToServerResponse_Error::has_error_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientToServerResponse_Error::clear_error_description() {
  error_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientToServerResponse_Error::error_description() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.Error.error_description)
  return error_description_.GetNoArena();
}
inline void ClientToServerResponse_Error::set_error_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.Error.error_description)
}
inline void ClientToServerResponse_Error::set_error_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerResponse.Error.error_description)
}
inline void ClientToServerResponse_Error::set_error_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerResponse.Error.error_description)
}
inline void ClientToServerResponse_Error::set_error_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerResponse.Error.error_description)
}
inline std::string* ClientToServerResponse_Error::mutable_error_description() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.Error.error_description)
  return error_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientToServerResponse_Error::release_error_description() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.Error.error_description)
  if (!has_error_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientToServerResponse_Error::set_allocated_error_description(std::string* error_description) {
  if (error_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_description);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.Error.error_description)
}

// optional string url = 3;
inline bool ClientToServerResponse_Error::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientToServerResponse_Error::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientToServerResponse_Error::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.Error.url)
  return url_.GetNoArena();
}
inline void ClientToServerResponse_Error::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.Error.url)
}
inline void ClientToServerResponse_Error::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerResponse.Error.url)
}
inline void ClientToServerResponse_Error::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerResponse.Error.url)
}
inline void ClientToServerResponse_Error::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerResponse.Error.url)
}
inline std::string* ClientToServerResponse_Error::mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.Error.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientToServerResponse_Error::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.Error.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientToServerResponse_Error::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.Error.url)
}

// optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
inline bool ClientToServerResponse_Error::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientToServerResponse_Error::clear_action() {
  action_ = 5;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::sync_pb::SyncEnums_Action ClientToServerResponse_Error::action() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.Error.action)
  return static_cast< ::sync_pb::SyncEnums_Action >(action_);
}
inline void ClientToServerResponse_Error::set_action(::sync_pb::SyncEnums_Action value) {
  assert(::sync_pb::SyncEnums_Action_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  action_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.Error.action)
}

// repeated int32 error_data_type_ids = 5;
inline int ClientToServerResponse_Error::error_data_type_ids_size() const {
  return error_data_type_ids_.size();
}
inline void ClientToServerResponse_Error::clear_error_data_type_ids() {
  error_data_type_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientToServerResponse_Error::error_data_type_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.Error.error_data_type_ids)
  return error_data_type_ids_.Get(index);
}
inline void ClientToServerResponse_Error::set_error_data_type_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  error_data_type_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.Error.error_data_type_ids)
}
inline void ClientToServerResponse_Error::add_error_data_type_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  error_data_type_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.ClientToServerResponse.Error.error_data_type_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ClientToServerResponse_Error::error_data_type_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.ClientToServerResponse.Error.error_data_type_ids)
  return error_data_type_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ClientToServerResponse_Error::mutable_error_data_type_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.ClientToServerResponse.Error.error_data_type_ids)
  return &error_data_type_ids_;
}

// -------------------------------------------------------------------

// ClientToServerResponse

// optional .sync_pb.CommitResponse commit = 1;
inline bool ClientToServerResponse::has_commit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientToServerResponse::clear_commit() {
  if (commit_ != nullptr) commit_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::CommitResponse& ClientToServerResponse::commit() const {
  const ::sync_pb::CommitResponse* p = commit_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.commit)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::CommitResponse*>(
      &::sync_pb::_CommitResponse_default_instance_);
}
inline ::sync_pb::CommitResponse* ClientToServerResponse::release_commit() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.commit)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::CommitResponse* temp = commit_;
  commit_ = nullptr;
  return temp;
}
inline ::sync_pb::CommitResponse* ClientToServerResponse::mutable_commit() {
  _has_bits_[0] |= 0x00000004u;
  if (commit_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::CommitResponse>(GetArenaNoVirtual());
    commit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.commit)
  return commit_;
}
inline void ClientToServerResponse::set_allocated_commit(::sync_pb::CommitResponse* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commit_;
  }
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  commit_ = commit;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.commit)
}

// optional .sync_pb.GetUpdatesResponse get_updates = 2;
inline bool ClientToServerResponse::has_get_updates() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientToServerResponse::clear_get_updates() {
  if (get_updates_ != nullptr) get_updates_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::GetUpdatesResponse& ClientToServerResponse::get_updates() const {
  const ::sync_pb::GetUpdatesResponse* p = get_updates_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.get_updates)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GetUpdatesResponse*>(
      &::sync_pb::_GetUpdatesResponse_default_instance_);
}
inline ::sync_pb::GetUpdatesResponse* ClientToServerResponse::release_get_updates() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.get_updates)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::GetUpdatesResponse* temp = get_updates_;
  get_updates_ = nullptr;
  return temp;
}
inline ::sync_pb::GetUpdatesResponse* ClientToServerResponse::mutable_get_updates() {
  _has_bits_[0] |= 0x00000008u;
  if (get_updates_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GetUpdatesResponse>(GetArenaNoVirtual());
    get_updates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.get_updates)
  return get_updates_;
}
inline void ClientToServerResponse::set_allocated_get_updates(::sync_pb::GetUpdatesResponse* get_updates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_updates_;
  }
  if (get_updates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_updates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_updates, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  get_updates_ = get_updates;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.get_updates)
}

// optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
inline bool ClientToServerResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClientToServerResponse::clear_error_code() {
  error_code_ = 100;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::sync_pb::SyncEnums_ErrorType ClientToServerResponse::error_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.error_code)
  return static_cast< ::sync_pb::SyncEnums_ErrorType >(error_code_);
}
inline void ClientToServerResponse::set_error_code(::sync_pb::SyncEnums_ErrorType value) {
  assert(::sync_pb::SyncEnums_ErrorType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  error_code_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.error_code)
}

// optional string error_message = 5;
inline bool ClientToServerResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientToServerResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientToServerResponse::error_message() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.error_message)
  return error_message_.GetNoArena();
}
inline void ClientToServerResponse::set_error_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.error_message)
}
inline void ClientToServerResponse::set_error_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerResponse.error_message)
}
inline void ClientToServerResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerResponse.error_message)
}
inline void ClientToServerResponse::set_error_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerResponse.error_message)
}
inline std::string* ClientToServerResponse::mutable_error_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.error_message)
  return error_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientToServerResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.error_message)
  if (!has_error_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientToServerResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.error_message)
}

// optional string store_birthday = 6;
inline bool ClientToServerResponse::has_store_birthday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientToServerResponse::clear_store_birthday() {
  store_birthday_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientToServerResponse::store_birthday() const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.store_birthday)
  return store_birthday_.GetNoArena();
}
inline void ClientToServerResponse::set_store_birthday(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.store_birthday)
}
inline void ClientToServerResponse::set_store_birthday(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ClientToServerResponse.store_birthday)
}
inline void ClientToServerResponse::set_store_birthday(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ClientToServerResponse.store_birthday)
}
inline void ClientToServerResponse::set_store_birthday(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ClientToServerResponse.store_birthday)
}
inline std::string* ClientToServerResponse::mutable_store_birthday() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.store_birthday)
  return store_birthday_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientToServerResponse::release_store_birthday() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.store_birthday)
  if (!has_store_birthday()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return store_birthday_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientToServerResponse::set_allocated_store_birthday(std::string* store_birthday) {
  if (store_birthday != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  store_birthday_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_birthday);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.store_birthday)
}

// optional .sync_pb.ClientCommand client_command = 7;
inline bool ClientToServerResponse::has_client_command() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::sync_pb::ClientCommand& ClientToServerResponse::client_command() const {
  const ::sync_pb::ClientCommand* p = client_command_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.client_command)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ClientCommand*>(
      &::sync_pb::_ClientCommand_default_instance_);
}
inline ::sync_pb::ClientCommand* ClientToServerResponse::release_client_command() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.client_command)
  _has_bits_[0] &= ~0x00000010u;
  ::sync_pb::ClientCommand* temp = client_command_;
  client_command_ = nullptr;
  return temp;
}
inline ::sync_pb::ClientCommand* ClientToServerResponse::mutable_client_command() {
  _has_bits_[0] |= 0x00000010u;
  if (client_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ClientCommand>(GetArenaNoVirtual());
    client_command_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.client_command)
  return client_command_;
}
inline void ClientToServerResponse::set_allocated_client_command(::sync_pb::ClientCommand* client_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_command_);
  }
  if (client_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  client_command_ = client_command;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.client_command)
}

// optional .sync_pb.ProfilingData profiling_data = 8;
inline bool ClientToServerResponse::has_profiling_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientToServerResponse::clear_profiling_data() {
  if (profiling_data_ != nullptr) profiling_data_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::sync_pb::ProfilingData& ClientToServerResponse::profiling_data() const {
  const ::sync_pb::ProfilingData* p = profiling_data_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.profiling_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ProfilingData*>(
      &::sync_pb::_ProfilingData_default_instance_);
}
inline ::sync_pb::ProfilingData* ClientToServerResponse::release_profiling_data() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.profiling_data)
  _has_bits_[0] &= ~0x00000020u;
  ::sync_pb::ProfilingData* temp = profiling_data_;
  profiling_data_ = nullptr;
  return temp;
}
inline ::sync_pb::ProfilingData* ClientToServerResponse::mutable_profiling_data() {
  _has_bits_[0] |= 0x00000020u;
  if (profiling_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ProfilingData>(GetArenaNoVirtual());
    profiling_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.profiling_data)
  return profiling_data_;
}
inline void ClientToServerResponse::set_allocated_profiling_data(::sync_pb::ProfilingData* profiling_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete profiling_data_;
  }
  if (profiling_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      profiling_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profiling_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  profiling_data_ = profiling_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.profiling_data)
}

// repeated int32 migrated_data_type_id = 12;
inline int ClientToServerResponse::migrated_data_type_id_size() const {
  return migrated_data_type_id_.size();
}
inline void ClientToServerResponse::clear_migrated_data_type_id() {
  migrated_data_type_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientToServerResponse::migrated_data_type_id(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.migrated_data_type_id)
  return migrated_data_type_id_.Get(index);
}
inline void ClientToServerResponse::set_migrated_data_type_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  migrated_data_type_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.ClientToServerResponse.migrated_data_type_id)
}
inline void ClientToServerResponse::add_migrated_data_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  migrated_data_type_id_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.ClientToServerResponse.migrated_data_type_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ClientToServerResponse::migrated_data_type_id() const {
  // @@protoc_insertion_point(field_list:sync_pb.ClientToServerResponse.migrated_data_type_id)
  return migrated_data_type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ClientToServerResponse::mutable_migrated_data_type_id() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.ClientToServerResponse.migrated_data_type_id)
  return &migrated_data_type_id_;
}

// optional .sync_pb.ClientToServerResponse.Error error = 13;
inline bool ClientToServerResponse::has_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientToServerResponse::clear_error() {
  if (error_ != nullptr) error_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::sync_pb::ClientToServerResponse_Error& ClientToServerResponse::error() const {
  const ::sync_pb::ClientToServerResponse_Error* p = error_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.error)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ClientToServerResponse_Error*>(
      &::sync_pb::_ClientToServerResponse_Error_default_instance_);
}
inline ::sync_pb::ClientToServerResponse_Error* ClientToServerResponse::release_error() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.error)
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::ClientToServerResponse_Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::sync_pb::ClientToServerResponse_Error* ClientToServerResponse::mutable_error() {
  _has_bits_[0] |= 0x00000040u;
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ClientToServerResponse_Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.error)
  return error_;
}
inline void ClientToServerResponse::set_allocated_error(::sync_pb::ClientToServerResponse_Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.error)
}

// optional .sync_pb.ChipBag new_bag_of_chips = 14;
inline bool ClientToServerResponse::has_new_bag_of_chips() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClientToServerResponse::clear_new_bag_of_chips() {
  if (new_bag_of_chips_ != nullptr) new_bag_of_chips_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::sync_pb::ChipBag& ClientToServerResponse::new_bag_of_chips() const {
  const ::sync_pb::ChipBag* p = new_bag_of_chips_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.new_bag_of_chips)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ChipBag*>(
      &::sync_pb::_ChipBag_default_instance_);
}
inline ::sync_pb::ChipBag* ClientToServerResponse::release_new_bag_of_chips() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.new_bag_of_chips)
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::ChipBag* temp = new_bag_of_chips_;
  new_bag_of_chips_ = nullptr;
  return temp;
}
inline ::sync_pb::ChipBag* ClientToServerResponse::mutable_new_bag_of_chips() {
  _has_bits_[0] |= 0x00000080u;
  if (new_bag_of_chips_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ChipBag>(GetArenaNoVirtual());
    new_bag_of_chips_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.new_bag_of_chips)
  return new_bag_of_chips_;
}
inline void ClientToServerResponse::set_allocated_new_bag_of_chips(::sync_pb::ChipBag* new_bag_of_chips) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete new_bag_of_chips_;
  }
  if (new_bag_of_chips) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      new_bag_of_chips = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_bag_of_chips, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  new_bag_of_chips_ = new_bag_of_chips;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.new_bag_of_chips)
}

// optional .sync_pb.ClearServerDataResponse clear_server_data = 15;
inline bool ClientToServerResponse::has_clear_server_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClientToServerResponse::clear_clear_server_data() {
  if (clear_server_data_ != nullptr) clear_server_data_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::sync_pb::ClearServerDataResponse& ClientToServerResponse::clear_server_data() const {
  const ::sync_pb::ClearServerDataResponse* p = clear_server_data_;
  // @@protoc_insertion_point(field_get:sync_pb.ClientToServerResponse.clear_server_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ClearServerDataResponse*>(
      &::sync_pb::_ClearServerDataResponse_default_instance_);
}
inline ::sync_pb::ClearServerDataResponse* ClientToServerResponse::release_clear_server_data() {
  // @@protoc_insertion_point(field_release:sync_pb.ClientToServerResponse.clear_server_data)
  _has_bits_[0] &= ~0x00000100u;
  ::sync_pb::ClearServerDataResponse* temp = clear_server_data_;
  clear_server_data_ = nullptr;
  return temp;
}
inline ::sync_pb::ClearServerDataResponse* ClientToServerResponse::mutable_clear_server_data() {
  _has_bits_[0] |= 0x00000100u;
  if (clear_server_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ClearServerDataResponse>(GetArenaNoVirtual());
    clear_server_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ClientToServerResponse.clear_server_data)
  return clear_server_data_;
}
inline void ClientToServerResponse::set_allocated_clear_server_data(::sync_pb::ClearServerDataResponse* clear_server_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clear_server_data_;
  }
  if (clear_server_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clear_server_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_server_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  clear_server_data_ = clear_server_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ClientToServerResponse.clear_server_data)
}

// -------------------------------------------------------------------

// EventRequest

// optional .sync_pb.SyncDisabledEvent sync_disabled = 1;
inline bool EventRequest::has_sync_disabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventRequest::clear_sync_disabled() {
  if (sync_disabled_ != nullptr) sync_disabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sync_pb::SyncDisabledEvent& EventRequest::sync_disabled() const {
  const ::sync_pb::SyncDisabledEvent* p = sync_disabled_;
  // @@protoc_insertion_point(field_get:sync_pb.EventRequest.sync_disabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::SyncDisabledEvent*>(
      &::sync_pb::_SyncDisabledEvent_default_instance_);
}
inline ::sync_pb::SyncDisabledEvent* EventRequest::release_sync_disabled() {
  // @@protoc_insertion_point(field_release:sync_pb.EventRequest.sync_disabled)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::SyncDisabledEvent* temp = sync_disabled_;
  sync_disabled_ = nullptr;
  return temp;
}
inline ::sync_pb::SyncDisabledEvent* EventRequest::mutable_sync_disabled() {
  _has_bits_[0] |= 0x00000001u;
  if (sync_disabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SyncDisabledEvent>(GetArenaNoVirtual());
    sync_disabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.EventRequest.sync_disabled)
  return sync_disabled_;
}
inline void EventRequest::set_allocated_sync_disabled(::sync_pb::SyncDisabledEvent* sync_disabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sync_disabled_;
  }
  if (sync_disabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_disabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_disabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sync_disabled_ = sync_disabled;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EventRequest.sync_disabled)
}

// -------------------------------------------------------------------

// EventResponse

// -------------------------------------------------------------------

// SyncDisabledEvent

// optional string cache_guid = 1;
inline bool SyncDisabledEvent::has_cache_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncDisabledEvent::clear_cache_guid() {
  cache_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncDisabledEvent::cache_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncDisabledEvent.cache_guid)
  return cache_guid_.GetNoArena();
}
inline void SyncDisabledEvent::set_cache_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncDisabledEvent.cache_guid)
}
inline void SyncDisabledEvent::set_cache_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncDisabledEvent.cache_guid)
}
inline void SyncDisabledEvent::set_cache_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncDisabledEvent.cache_guid)
}
inline void SyncDisabledEvent::set_cache_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncDisabledEvent.cache_guid)
}
inline std::string* SyncDisabledEvent::mutable_cache_guid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncDisabledEvent.cache_guid)
  return cache_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncDisabledEvent::release_cache_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncDisabledEvent.cache_guid)
  if (!has_cache_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cache_guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncDisabledEvent::set_allocated_cache_guid(std::string* cache_guid) {
  if (cache_guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cache_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncDisabledEvent.cache_guid)
}

// optional string store_birthday = 2;
inline bool SyncDisabledEvent::has_store_birthday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncDisabledEvent::clear_store_birthday() {
  store_birthday_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SyncDisabledEvent::store_birthday() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncDisabledEvent.store_birthday)
  return store_birthday_.GetNoArena();
}
inline void SyncDisabledEvent::set_store_birthday(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncDisabledEvent.store_birthday)
}
inline void SyncDisabledEvent::set_store_birthday(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SyncDisabledEvent.store_birthday)
}
inline void SyncDisabledEvent::set_store_birthday(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SyncDisabledEvent.store_birthday)
}
inline void SyncDisabledEvent::set_store_birthday(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  store_birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SyncDisabledEvent.store_birthday)
}
inline std::string* SyncDisabledEvent::mutable_store_birthday() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncDisabledEvent.store_birthday)
  return store_birthday_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncDisabledEvent::release_store_birthday() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncDisabledEvent.store_birthday)
  if (!has_store_birthday()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return store_birthday_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncDisabledEvent::set_allocated_store_birthday(std::string* store_birthday) {
  if (store_birthday != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  store_birthday_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_birthday);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncDisabledEvent.store_birthday)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::GarbageCollectionDirective_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::ClientToServerMessage_Contents> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::CommitResponse_ResponseType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sync_2eproto
