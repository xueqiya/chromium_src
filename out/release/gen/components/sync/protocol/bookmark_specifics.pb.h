// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bookmark_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bookmark_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bookmark_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bookmark_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bookmark_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class BookmarkSpecifics;
class BookmarkSpecificsDefaultTypeInternal;
extern BookmarkSpecificsDefaultTypeInternal _BookmarkSpecifics_default_instance_;
class MetaInfo;
class MetaInfoDefaultTypeInternal;
extern MetaInfoDefaultTypeInternal _MetaInfo_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::BookmarkSpecifics* Arena::CreateMaybeMessage<::sync_pb::BookmarkSpecifics>(Arena*);
template<> ::sync_pb::MetaInfo* Arena::CreateMaybeMessage<::sync_pb::MetaInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class MetaInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.MetaInfo) */ {
 public:
  MetaInfo();
  virtual ~MetaInfo();

  MetaInfo(const MetaInfo& from);
  MetaInfo(MetaInfo&& from) noexcept
    : MetaInfo() {
    *this = ::std::move(from);
  }

  inline MetaInfo& operator=(const MetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaInfo& operator=(MetaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MetaInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaInfo* internal_default_instance() {
    return reinterpret_cast<const MetaInfo*>(
               &_MetaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetaInfo& a, MetaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaInfo* New() const final {
    return CreateMaybeMessage<MetaInfo>(nullptr);
  }

  MetaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MetaInfo& from);
  void MergeFrom(const MetaInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetaInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.MetaInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:sync_pb.MetaInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_bookmark_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class BookmarkSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.BookmarkSpecifics) */ {
 public:
  BookmarkSpecifics();
  virtual ~BookmarkSpecifics();

  BookmarkSpecifics(const BookmarkSpecifics& from);
  BookmarkSpecifics(BookmarkSpecifics&& from) noexcept
    : BookmarkSpecifics() {
    *this = ::std::move(from);
  }

  inline BookmarkSpecifics& operator=(const BookmarkSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookmarkSpecifics& operator=(BookmarkSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BookmarkSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BookmarkSpecifics* internal_default_instance() {
    return reinterpret_cast<const BookmarkSpecifics*>(
               &_BookmarkSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BookmarkSpecifics& a, BookmarkSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(BookmarkSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BookmarkSpecifics* New() const final {
    return CreateMaybeMessage<BookmarkSpecifics>(nullptr);
  }

  BookmarkSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BookmarkSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BookmarkSpecifics& from);
  void MergeFrom(const BookmarkSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BookmarkSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.BookmarkSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 6,
    kUrlFieldNumber = 1,
    kFaviconFieldNumber = 2,
    kTitleFieldNumber = 3,
    kIconUrlFieldNumber = 5,
    kGuidFieldNumber = 10,
    kCreationTimeUsFieldNumber = 4,
  };
  // repeated .sync_pb.MetaInfo meta_info = 6;
  int meta_info_size() const;
  void clear_meta_info();
  ::sync_pb::MetaInfo* mutable_meta_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::MetaInfo >*
      mutable_meta_info();
  const ::sync_pb::MetaInfo& meta_info(int index) const;
  ::sync_pb::MetaInfo* add_meta_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::MetaInfo >&
      meta_info() const;

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional bytes favicon = 2;
  bool has_favicon() const;
  void clear_favicon();
  const std::string& favicon() const;
  void set_favicon(const std::string& value);
  void set_favicon(std::string&& value);
  void set_favicon(const char* value);
  void set_favicon(const void* value, size_t size);
  std::string* mutable_favicon();
  std::string* release_favicon();
  void set_allocated_favicon(std::string* favicon);

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string icon_url = 5;
  bool has_icon_url() const;
  void clear_icon_url();
  const std::string& icon_url() const;
  void set_icon_url(const std::string& value);
  void set_icon_url(std::string&& value);
  void set_icon_url(const char* value);
  void set_icon_url(const char* value, size_t size);
  std::string* mutable_icon_url();
  std::string* release_icon_url();
  void set_allocated_icon_url(std::string* icon_url);

  // optional string guid = 10;
  bool has_guid() const;
  void clear_guid();
  const std::string& guid() const;
  void set_guid(const std::string& value);
  void set_guid(std::string&& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  std::string* mutable_guid();
  std::string* release_guid();
  void set_allocated_guid(std::string* guid);

  // optional int64 creation_time_us = 4;
  bool has_creation_time_us() const;
  void clear_creation_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_us() const;
  void set_creation_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.BookmarkSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::MetaInfo > meta_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr favicon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_us_;
  friend struct ::TableStruct_bookmark_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetaInfo

// optional string key = 1;
inline bool MetaInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetaInfo::key() const {
  // @@protoc_insertion_point(field_get:sync_pb.MetaInfo.key)
  return key_.GetNoArena();
}
inline void MetaInfo::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.MetaInfo.key)
}
inline void MetaInfo::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.MetaInfo.key)
}
inline void MetaInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.MetaInfo.key)
}
inline void MetaInfo::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.MetaInfo.key)
}
inline std::string* MetaInfo::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.MetaInfo.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetaInfo::release_key() {
  // @@protoc_insertion_point(field_release:sync_pb.MetaInfo.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetaInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.MetaInfo.key)
}

// optional string value = 2;
inline bool MetaInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaInfo::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MetaInfo::value() const {
  // @@protoc_insertion_point(field_get:sync_pb.MetaInfo.value)
  return value_.GetNoArena();
}
inline void MetaInfo::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.MetaInfo.value)
}
inline void MetaInfo::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.MetaInfo.value)
}
inline void MetaInfo::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.MetaInfo.value)
}
inline void MetaInfo::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.MetaInfo.value)
}
inline std::string* MetaInfo::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.MetaInfo.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetaInfo::release_value() {
  // @@protoc_insertion_point(field_release:sync_pb.MetaInfo.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetaInfo::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.MetaInfo.value)
}

// -------------------------------------------------------------------

// BookmarkSpecifics

// optional string url = 1;
inline bool BookmarkSpecifics::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BookmarkSpecifics::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BookmarkSpecifics::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.url)
  return url_.GetNoArena();
}
inline void BookmarkSpecifics::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.url)
}
inline void BookmarkSpecifics::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.BookmarkSpecifics.url)
}
inline void BookmarkSpecifics::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.BookmarkSpecifics.url)
}
inline void BookmarkSpecifics::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.BookmarkSpecifics.url)
}
inline std::string* BookmarkSpecifics::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BookmarkSpecifics::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BookmarkSpecifics::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.url)
}

// optional bytes favicon = 2;
inline bool BookmarkSpecifics::has_favicon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BookmarkSpecifics::clear_favicon() {
  favicon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BookmarkSpecifics::favicon() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.favicon)
  return favicon_.GetNoArena();
}
inline void BookmarkSpecifics::set_favicon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  favicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.favicon)
}
inline void BookmarkSpecifics::set_favicon(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  favicon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.BookmarkSpecifics.favicon)
}
inline void BookmarkSpecifics::set_favicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  favicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.BookmarkSpecifics.favicon)
}
inline void BookmarkSpecifics::set_favicon(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  favicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.BookmarkSpecifics.favicon)
}
inline std::string* BookmarkSpecifics::mutable_favicon() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.favicon)
  return favicon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BookmarkSpecifics::release_favicon() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.favicon)
  if (!has_favicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return favicon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BookmarkSpecifics::set_allocated_favicon(std::string* favicon) {
  if (favicon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  favicon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), favicon);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.favicon)
}

// optional string title = 3;
inline bool BookmarkSpecifics::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BookmarkSpecifics::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BookmarkSpecifics::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.title)
  return title_.GetNoArena();
}
inline void BookmarkSpecifics::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.title)
}
inline void BookmarkSpecifics::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.BookmarkSpecifics.title)
}
inline void BookmarkSpecifics::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.BookmarkSpecifics.title)
}
inline void BookmarkSpecifics::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.BookmarkSpecifics.title)
}
inline std::string* BookmarkSpecifics::mutable_title() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BookmarkSpecifics::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BookmarkSpecifics::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.title)
}

// optional int64 creation_time_us = 4;
inline bool BookmarkSpecifics::has_creation_time_us() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BookmarkSpecifics::clear_creation_time_us() {
  creation_time_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BookmarkSpecifics::creation_time_us() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.creation_time_us)
  return creation_time_us_;
}
inline void BookmarkSpecifics::set_creation_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  creation_time_us_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.creation_time_us)
}

// optional string icon_url = 5;
inline bool BookmarkSpecifics::has_icon_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BookmarkSpecifics::clear_icon_url() {
  icon_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BookmarkSpecifics::icon_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.icon_url)
  return icon_url_.GetNoArena();
}
inline void BookmarkSpecifics::set_icon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.icon_url)
}
inline void BookmarkSpecifics::set_icon_url(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.BookmarkSpecifics.icon_url)
}
inline void BookmarkSpecifics::set_icon_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  icon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.BookmarkSpecifics.icon_url)
}
inline void BookmarkSpecifics::set_icon_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  icon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.BookmarkSpecifics.icon_url)
}
inline std::string* BookmarkSpecifics::mutable_icon_url() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.icon_url)
  return icon_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BookmarkSpecifics::release_icon_url() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.icon_url)
  if (!has_icon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return icon_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BookmarkSpecifics::set_allocated_icon_url(std::string* icon_url) {
  if (icon_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  icon_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.icon_url)
}

// repeated .sync_pb.MetaInfo meta_info = 6;
inline int BookmarkSpecifics::meta_info_size() const {
  return meta_info_.size();
}
inline void BookmarkSpecifics::clear_meta_info() {
  meta_info_.Clear();
}
inline ::sync_pb::MetaInfo* BookmarkSpecifics::mutable_meta_info(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.meta_info)
  return meta_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::MetaInfo >*
BookmarkSpecifics::mutable_meta_info() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.BookmarkSpecifics.meta_info)
  return &meta_info_;
}
inline const ::sync_pb::MetaInfo& BookmarkSpecifics::meta_info(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.meta_info)
  return meta_info_.Get(index);
}
inline ::sync_pb::MetaInfo* BookmarkSpecifics::add_meta_info() {
  // @@protoc_insertion_point(field_add:sync_pb.BookmarkSpecifics.meta_info)
  return meta_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::MetaInfo >&
BookmarkSpecifics::meta_info() const {
  // @@protoc_insertion_point(field_list:sync_pb.BookmarkSpecifics.meta_info)
  return meta_info_;
}

// optional string guid = 10;
inline bool BookmarkSpecifics::has_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BookmarkSpecifics::clear_guid() {
  guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& BookmarkSpecifics::guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.guid)
  return guid_.GetNoArena();
}
inline void BookmarkSpecifics::set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.guid)
}
inline void BookmarkSpecifics::set_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.BookmarkSpecifics.guid)
}
inline void BookmarkSpecifics::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.BookmarkSpecifics.guid)
}
inline void BookmarkSpecifics::set_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.BookmarkSpecifics.guid)
}
inline std::string* BookmarkSpecifics::mutable_guid() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.guid)
  return guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BookmarkSpecifics::release_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.guid)
  if (!has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BookmarkSpecifics::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.guid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bookmark_5fspecifics_2eproto
