// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: security_event_specifics.proto

#include "security_event_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gaia_5fpassword_5freuse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GaiaPasswordReuse_gaia_5fpassword_5freuse_2eproto;
namespace sync_pb {
class SecurityEventSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecurityEventSpecifics> _instance;
  const ::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event_;
} _SecurityEventSpecifics_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_SecurityEventSpecifics_security_5fevent_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_SecurityEventSpecifics_default_instance_;
    new (ptr) ::sync_pb::SecurityEventSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::SecurityEventSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecurityEventSpecifics_security_5fevent_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecurityEventSpecifics_security_5fevent_5fspecifics_2eproto}, {
      &scc_info_GaiaPasswordReuse_gaia_5fpassword_5freuse_2eproto.base,}};

namespace sync_pb {

// ===================================================================

void SecurityEventSpecifics::InitAsDefaultInstance() {
}
class SecurityEventSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<SecurityEventSpecifics>()._has_bits_);
  static const ::sync_pb::GaiaPasswordReuse& gaia_password_reuse_event(const SecurityEventSpecifics* msg);
  static void set_has_event_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::GaiaPasswordReuse&
SecurityEventSpecifics::_Internal::gaia_password_reuse_event(const SecurityEventSpecifics* msg) {
  return *msg->event_.gaia_password_reuse_event_;
}
void SecurityEventSpecifics::set_allocated_gaia_password_reuse_event(::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (gaia_password_reuse_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gaia_password_reuse_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaia_password_reuse_event, submessage_arena);
    }
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = gaia_password_reuse_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SecurityEventSpecifics.gaia_password_reuse_event)
}
void SecurityEventSpecifics::clear_gaia_password_reuse_event() {
  if (has_gaia_password_reuse_event()) {
    delete event_.gaia_password_reuse_event_;
    clear_has_event();
  }
}
SecurityEventSpecifics::SecurityEventSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SecurityEventSpecifics)
}
SecurityEventSpecifics::SecurityEventSpecifics(const SecurityEventSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_time_usec_ = from.event_time_usec_;
  clear_has_event();
  switch (from.event_case()) {
    case kGaiaPasswordReuseEvent: {
      mutable_gaia_password_reuse_event()->::sync_pb::GaiaPasswordReuse::MergeFrom(from.gaia_password_reuse_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SecurityEventSpecifics)
}

void SecurityEventSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecurityEventSpecifics_security_5fevent_5fspecifics_2eproto.base);
  event_time_usec_ = PROTOBUF_LONGLONG(0);
  clear_has_event();
}

SecurityEventSpecifics::~SecurityEventSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.SecurityEventSpecifics)
  SharedDtor();
}

void SecurityEventSpecifics::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void SecurityEventSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecurityEventSpecifics& SecurityEventSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecurityEventSpecifics_security_5fevent_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void SecurityEventSpecifics::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.SecurityEventSpecifics)
  switch (event_case()) {
    case kGaiaPasswordReuseEvent: {
      delete event_.gaia_password_reuse_event_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void SecurityEventSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SecurityEventSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_time_usec_ = PROTOBUF_LONGLONG(0);
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecurityEventSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_gaia_password_reuse_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 event_time_usec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_time_usec(&has_bits);
          event_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecurityEventSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SecurityEventSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gaia_password_reuse_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 event_time_usec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_event_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SecurityEventSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SecurityEventSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecurityEventSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SecurityEventSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
  if (has_gaia_password_reuse_event()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::gaia_password_reuse_event(this), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 event_time_usec = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->event_time_usec(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SecurityEventSpecifics)
}

size_t SecurityEventSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SecurityEventSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 event_time_usec = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->event_time_usec());
  }

  switch (event_case()) {
    // optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
    case kGaiaPasswordReuseEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.gaia_password_reuse_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityEventSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecurityEventSpecifics*>(
      &from));
}

void SecurityEventSpecifics::MergeFrom(const SecurityEventSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SecurityEventSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event_time_usec()) {
    set_event_time_usec(from.event_time_usec());
  }
  switch (from.event_case()) {
    case kGaiaPasswordReuseEvent: {
      mutable_gaia_password_reuse_event()->::sync_pb::GaiaPasswordReuse::MergeFrom(from.gaia_password_reuse_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void SecurityEventSpecifics::CopyFrom(const SecurityEventSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SecurityEventSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityEventSpecifics::IsInitialized() const {
  return true;
}

void SecurityEventSpecifics::InternalSwap(SecurityEventSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_time_usec_, other->event_time_usec_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SecurityEventSpecifics::GetTypeName() const {
  return "sync_pb.SecurityEventSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::SecurityEventSpecifics* Arena::CreateMaybeMessage< ::sync_pb::SecurityEventSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::SecurityEventSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
