// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: history_delete_directive_specifics.proto

#include "history_delete_directive_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_history_5fdelete_5fdirective_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlobalIdDirective_history_5fdelete_5fdirective_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_history_5fdelete_5fdirective_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeRangeDirective_history_5fdelete_5fdirective_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_history_5fdelete_5fdirective_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UrlDirective_history_5fdelete_5fdirective_5fspecifics_2eproto;
namespace sync_pb {
class HistoryDeleteDirectiveSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryDeleteDirectiveSpecifics> _instance;
} _HistoryDeleteDirectiveSpecifics_default_instance_;
class GlobalIdDirectiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalIdDirective> _instance;
} _GlobalIdDirective_default_instance_;
class TimeRangeDirectiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeRangeDirective> _instance;
} _TimeRangeDirective_default_instance_;
class UrlDirectiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UrlDirective> _instance;
} _UrlDirective_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_GlobalIdDirective_history_5fdelete_5fdirective_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GlobalIdDirective_default_instance_;
    new (ptr) ::sync_pb::GlobalIdDirective();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GlobalIdDirective::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlobalIdDirective_history_5fdelete_5fdirective_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GlobalIdDirective_history_5fdelete_5fdirective_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_HistoryDeleteDirectiveSpecifics_history_5fdelete_5fdirective_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_HistoryDeleteDirectiveSpecifics_default_instance_;
    new (ptr) ::sync_pb::HistoryDeleteDirectiveSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::HistoryDeleteDirectiveSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HistoryDeleteDirectiveSpecifics_history_5fdelete_5fdirective_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_HistoryDeleteDirectiveSpecifics_history_5fdelete_5fdirective_5fspecifics_2eproto}, {
      &scc_info_GlobalIdDirective_history_5fdelete_5fdirective_5fspecifics_2eproto.base,
      &scc_info_TimeRangeDirective_history_5fdelete_5fdirective_5fspecifics_2eproto.base,
      &scc_info_UrlDirective_history_5fdelete_5fdirective_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_TimeRangeDirective_history_5fdelete_5fdirective_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_TimeRangeDirective_default_instance_;
    new (ptr) ::sync_pb::TimeRangeDirective();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::TimeRangeDirective::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeRangeDirective_history_5fdelete_5fdirective_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TimeRangeDirective_history_5fdelete_5fdirective_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_UrlDirective_history_5fdelete_5fdirective_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_UrlDirective_default_instance_;
    new (ptr) ::sync_pb::UrlDirective();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::UrlDirective::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UrlDirective_history_5fdelete_5fdirective_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UrlDirective_history_5fdelete_5fdirective_5fspecifics_2eproto}, {}};

namespace sync_pb {

// ===================================================================

void HistoryDeleteDirectiveSpecifics::InitAsDefaultInstance() {
  ::sync_pb::_HistoryDeleteDirectiveSpecifics_default_instance_._instance.get_mutable()->global_id_directive_ = const_cast< ::sync_pb::GlobalIdDirective*>(
      ::sync_pb::GlobalIdDirective::internal_default_instance());
  ::sync_pb::_HistoryDeleteDirectiveSpecifics_default_instance_._instance.get_mutable()->time_range_directive_ = const_cast< ::sync_pb::TimeRangeDirective*>(
      ::sync_pb::TimeRangeDirective::internal_default_instance());
  ::sync_pb::_HistoryDeleteDirectiveSpecifics_default_instance_._instance.get_mutable()->url_directive_ = const_cast< ::sync_pb::UrlDirective*>(
      ::sync_pb::UrlDirective::internal_default_instance());
}
class HistoryDeleteDirectiveSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoryDeleteDirectiveSpecifics>()._has_bits_);
  static const ::sync_pb::GlobalIdDirective& global_id_directive(const HistoryDeleteDirectiveSpecifics* msg);
  static void set_has_global_id_directive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::TimeRangeDirective& time_range_directive(const HistoryDeleteDirectiveSpecifics* msg);
  static void set_has_time_range_directive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::UrlDirective& url_directive(const HistoryDeleteDirectiveSpecifics* msg);
  static void set_has_url_directive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::GlobalIdDirective&
HistoryDeleteDirectiveSpecifics::_Internal::global_id_directive(const HistoryDeleteDirectiveSpecifics* msg) {
  return *msg->global_id_directive_;
}
const ::sync_pb::TimeRangeDirective&
HistoryDeleteDirectiveSpecifics::_Internal::time_range_directive(const HistoryDeleteDirectiveSpecifics* msg) {
  return *msg->time_range_directive_;
}
const ::sync_pb::UrlDirective&
HistoryDeleteDirectiveSpecifics::_Internal::url_directive(const HistoryDeleteDirectiveSpecifics* msg) {
  return *msg->url_directive_;
}
HistoryDeleteDirectiveSpecifics::HistoryDeleteDirectiveSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.HistoryDeleteDirectiveSpecifics)
}
HistoryDeleteDirectiveSpecifics::HistoryDeleteDirectiveSpecifics(const HistoryDeleteDirectiveSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_global_id_directive()) {
    global_id_directive_ = new ::sync_pb::GlobalIdDirective(*from.global_id_directive_);
  } else {
    global_id_directive_ = nullptr;
  }
  if (from.has_time_range_directive()) {
    time_range_directive_ = new ::sync_pb::TimeRangeDirective(*from.time_range_directive_);
  } else {
    time_range_directive_ = nullptr;
  }
  if (from.has_url_directive()) {
    url_directive_ = new ::sync_pb::UrlDirective(*from.url_directive_);
  } else {
    url_directive_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.HistoryDeleteDirectiveSpecifics)
}

void HistoryDeleteDirectiveSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoryDeleteDirectiveSpecifics_history_5fdelete_5fdirective_5fspecifics_2eproto.base);
  ::memset(&global_id_directive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&url_directive_) -
      reinterpret_cast<char*>(&global_id_directive_)) + sizeof(url_directive_));
}

HistoryDeleteDirectiveSpecifics::~HistoryDeleteDirectiveSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.HistoryDeleteDirectiveSpecifics)
  SharedDtor();
}

void HistoryDeleteDirectiveSpecifics::SharedDtor() {
  if (this != internal_default_instance()) delete global_id_directive_;
  if (this != internal_default_instance()) delete time_range_directive_;
  if (this != internal_default_instance()) delete url_directive_;
}

void HistoryDeleteDirectiveSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryDeleteDirectiveSpecifics& HistoryDeleteDirectiveSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryDeleteDirectiveSpecifics_history_5fdelete_5fdirective_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void HistoryDeleteDirectiveSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(global_id_directive_ != nullptr);
      global_id_directive_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(time_range_directive_ != nullptr);
      time_range_directive_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(url_directive_ != nullptr);
      url_directive_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HistoryDeleteDirectiveSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_global_id_directive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_time_range_directive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UrlDirective url_directive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_url_directive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HistoryDeleteDirectiveSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_id_directive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_range_directive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UrlDirective url_directive = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_url_directive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.HistoryDeleteDirectiveSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.HistoryDeleteDirectiveSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HistoryDeleteDirectiveSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::global_id_directive(this), output);
  }

  // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::time_range_directive(this), output);
  }

  // optional .sync_pb.UrlDirective url_directive = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::url_directive(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.HistoryDeleteDirectiveSpecifics)
}

size_t HistoryDeleteDirectiveSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_id_directive_);
    }

    // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_range_directive_);
    }

    // optional .sync_pb.UrlDirective url_directive = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *url_directive_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryDeleteDirectiveSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HistoryDeleteDirectiveSpecifics*>(
      &from));
}

void HistoryDeleteDirectiveSpecifics::MergeFrom(const HistoryDeleteDirectiveSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_global_id_directive()->::sync_pb::GlobalIdDirective::MergeFrom(from.global_id_directive());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_time_range_directive()->::sync_pb::TimeRangeDirective::MergeFrom(from.time_range_directive());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_url_directive()->::sync_pb::UrlDirective::MergeFrom(from.url_directive());
    }
  }
}

void HistoryDeleteDirectiveSpecifics::CopyFrom(const HistoryDeleteDirectiveSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryDeleteDirectiveSpecifics::IsInitialized() const {
  return true;
}

void HistoryDeleteDirectiveSpecifics::InternalSwap(HistoryDeleteDirectiveSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(global_id_directive_, other->global_id_directive_);
  swap(time_range_directive_, other->time_range_directive_);
  swap(url_directive_, other->url_directive_);
}

std::string HistoryDeleteDirectiveSpecifics::GetTypeName() const {
  return "sync_pb.HistoryDeleteDirectiveSpecifics";
}


// ===================================================================

void GlobalIdDirective::InitAsDefaultInstance() {
}
class GlobalIdDirective::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalIdDirective>()._has_bits_);
  static void set_has_start_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GlobalIdDirective::GlobalIdDirective()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GlobalIdDirective)
}
GlobalIdDirective::GlobalIdDirective(const GlobalIdDirective& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      global_id_(from.global_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_usec_, &from.start_time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_usec_) -
    reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GlobalIdDirective)
}

void GlobalIdDirective::SharedCtor() {
  ::memset(&start_time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_usec_) -
      reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
}

GlobalIdDirective::~GlobalIdDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.GlobalIdDirective)
  SharedDtor();
}

void GlobalIdDirective::SharedDtor() {
}

void GlobalIdDirective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalIdDirective& GlobalIdDirective::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalIdDirective_history_5fdelete_5fdirective_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void GlobalIdDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GlobalIdDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  global_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_usec_) -
        reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalIdDirective::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 global_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_global_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_global_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 start_time_usec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_time_usec(&has_bits);
          start_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 end_time_usec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_end_time_usec(&has_bits);
          end_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalIdDirective::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GlobalIdDirective)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 global_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_global_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_global_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_time_usec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_start_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_time_usec = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_end_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GlobalIdDirective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GlobalIdDirective)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalIdDirective::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GlobalIdDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 global_id = 1;
  for (int i = 0, n = this->global_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      1, this->global_id(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 start_time_usec = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->start_time_usec(), output);
  }

  // optional int64 end_time_usec = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->end_time_usec(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GlobalIdDirective)
}

size_t GlobalIdDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GlobalIdDirective)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 global_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->global_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->global_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 start_time_usec = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_time_usec());
    }

    // optional int64 end_time_usec = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->end_time_usec());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalIdDirective::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalIdDirective*>(
      &from));
}

void GlobalIdDirective::MergeFrom(const GlobalIdDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GlobalIdDirective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  global_id_.MergeFrom(from.global_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_usec_ = from.start_time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_usec_ = from.end_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GlobalIdDirective::CopyFrom(const GlobalIdDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GlobalIdDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalIdDirective::IsInitialized() const {
  return true;
}

void GlobalIdDirective::InternalSwap(GlobalIdDirective* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  global_id_.InternalSwap(&other->global_id_);
  swap(start_time_usec_, other->start_time_usec_);
  swap(end_time_usec_, other->end_time_usec_);
}

std::string GlobalIdDirective::GetTypeName() const {
  return "sync_pb.GlobalIdDirective";
}


// ===================================================================

void TimeRangeDirective::InitAsDefaultInstance() {
}
class TimeRangeDirective::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeRangeDirective>()._has_bits_);
  static void set_has_start_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TimeRangeDirective::TimeRangeDirective()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.TimeRangeDirective)
}
TimeRangeDirective::TimeRangeDirective(const TimeRangeDirective& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_usec_, &from.start_time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_usec_) -
    reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.TimeRangeDirective)
}

void TimeRangeDirective::SharedCtor() {
  ::memset(&start_time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_usec_) -
      reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
}

TimeRangeDirective::~TimeRangeDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.TimeRangeDirective)
  SharedDtor();
}

void TimeRangeDirective::SharedDtor() {
}

void TimeRangeDirective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeRangeDirective& TimeRangeDirective::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeRangeDirective_history_5fdelete_5fdirective_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void TimeRangeDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.TimeRangeDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_usec_) -
        reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeRangeDirective::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 start_time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_time_usec(&has_bits);
          start_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 end_time_usec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_time_usec(&has_bits);
          end_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeRangeDirective::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.TimeRangeDirective)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_time_usec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_time_usec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_end_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.TimeRangeDirective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.TimeRangeDirective)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeRangeDirective::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.TimeRangeDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->start_time_usec(), output);
  }

  // optional int64 end_time_usec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->end_time_usec(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.TimeRangeDirective)
}

size_t TimeRangeDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.TimeRangeDirective)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 start_time_usec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_time_usec());
    }

    // optional int64 end_time_usec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->end_time_usec());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeRangeDirective::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TimeRangeDirective*>(
      &from));
}

void TimeRangeDirective::MergeFrom(const TimeRangeDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.TimeRangeDirective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_usec_ = from.start_time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_usec_ = from.end_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeRangeDirective::CopyFrom(const TimeRangeDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.TimeRangeDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRangeDirective::IsInitialized() const {
  return true;
}

void TimeRangeDirective::InternalSwap(TimeRangeDirective* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_time_usec_, other->start_time_usec_);
  swap(end_time_usec_, other->end_time_usec_);
}

std::string TimeRangeDirective::GetTypeName() const {
  return "sync_pb.TimeRangeDirective";
}


// ===================================================================

void UrlDirective::InitAsDefaultInstance() {
}
class UrlDirective::_Internal {
 public:
  using HasBits = decltype(std::declval<UrlDirective>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UrlDirective::UrlDirective()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UrlDirective)
}
UrlDirective::UrlDirective(const UrlDirective& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  end_time_usec_ = from.end_time_usec_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.UrlDirective)
}

void UrlDirective::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UrlDirective_history_5fdelete_5fdirective_5fspecifics_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_time_usec_ = PROTOBUF_LONGLONG(0);
}

UrlDirective::~UrlDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.UrlDirective)
  SharedDtor();
}

void UrlDirective::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UrlDirective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UrlDirective& UrlDirective::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UrlDirective_history_5fdelete_5fdirective_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void UrlDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UrlDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  end_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UrlDirective::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 end_time_usec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_time_usec(&has_bits);
          end_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UrlDirective::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UrlDirective)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_time_usec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_end_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UrlDirective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UrlDirective)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UrlDirective::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UrlDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int64 end_time_usec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->end_time_usec(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UrlDirective)
}

size_t UrlDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UrlDirective)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int64 end_time_usec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->end_time_usec());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlDirective::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UrlDirective*>(
      &from));
}

void UrlDirective::MergeFrom(const UrlDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UrlDirective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_usec_ = from.end_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UrlDirective::CopyFrom(const UrlDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UrlDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlDirective::IsInitialized() const {
  return true;
}

void UrlDirective::InternalSwap(UrlDirective* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(end_time_usec_, other->end_time_usec_);
}

std::string UrlDirective::GetTypeName() const {
  return "sync_pb.UrlDirective";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::HistoryDeleteDirectiveSpecifics* Arena::CreateMaybeMessage< ::sync_pb::HistoryDeleteDirectiveSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::HistoryDeleteDirectiveSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GlobalIdDirective* Arena::CreateMaybeMessage< ::sync_pb::GlobalIdDirective >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GlobalIdDirective >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::TimeRangeDirective* Arena::CreateMaybeMessage< ::sync_pb::TimeRangeDirective >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::TimeRangeDirective >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::UrlDirective* Arena::CreateMaybeMessage< ::sync_pb::UrlDirective >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::UrlDirective >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
