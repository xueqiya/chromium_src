// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wifi_configuration_specifics.proto

#include "wifi_configuration_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_encryption_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncryptedData_encryption_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wifi_5fconfiguration_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WifiConfigurationSpecificsData_wifi_5fconfiguration_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wifi_5fconfiguration_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WifiConfigurationSpecificsData_ProxyConfiguration_wifi_5fconfiguration_5fspecifics_2eproto;
namespace sync_pb {
class WifiConfigurationSpecificsData_ProxyConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WifiConfigurationSpecificsData_ProxyConfiguration> _instance;
} _WifiConfigurationSpecificsData_ProxyConfiguration_default_instance_;
class WifiConfigurationSpecificsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WifiConfigurationSpecificsData> _instance;
} _WifiConfigurationSpecificsData_default_instance_;
class WifiConfigurationSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WifiConfigurationSpecifics> _instance;
} _WifiConfigurationSpecifics_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_WifiConfigurationSpecifics_wifi_5fconfiguration_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_WifiConfigurationSpecifics_default_instance_;
    new (ptr) ::sync_pb::WifiConfigurationSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::WifiConfigurationSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WifiConfigurationSpecifics_wifi_5fconfiguration_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WifiConfigurationSpecifics_wifi_5fconfiguration_5fspecifics_2eproto}, {
      &scc_info_EncryptedData_encryption_2eproto.base,
      &scc_info_WifiConfigurationSpecificsData_wifi_5fconfiguration_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_WifiConfigurationSpecificsData_wifi_5fconfiguration_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_WifiConfigurationSpecificsData_default_instance_;
    new (ptr) ::sync_pb::WifiConfigurationSpecificsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::WifiConfigurationSpecificsData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WifiConfigurationSpecificsData_wifi_5fconfiguration_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WifiConfigurationSpecificsData_wifi_5fconfiguration_5fspecifics_2eproto}, {
      &scc_info_WifiConfigurationSpecificsData_ProxyConfiguration_wifi_5fconfiguration_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_WifiConfigurationSpecificsData_ProxyConfiguration_wifi_5fconfiguration_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_WifiConfigurationSpecificsData_ProxyConfiguration_default_instance_;
    new (ptr) ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WifiConfigurationSpecificsData_ProxyConfiguration_wifi_5fconfiguration_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WifiConfigurationSpecificsData_ProxyConfiguration_wifi_5fconfiguration_5fspecifics_2eproto}, {}};

namespace sync_pb {
bool WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_strings[5] = {};

static const char WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_names[] =
  "PROXY_OPTION_AUTODISCOVERY"
  "PROXY_OPTION_AUTOMATIC"
  "PROXY_OPTION_DISABLED"
  "PROXY_OPTION_MANUAL"
  "PROXY_OPTION_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_entries[] = {
  { {WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_names + 0, 26}, 3 },
  { {WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_names + 26, 22}, 2 },
  { {WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_names + 48, 21}, 1 },
  { {WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_names + 69, 19}, 4 },
  { {WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_names + 88, 24}, 0 },
};

static const int WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_entries_by_number[] = {
  4, // 0 -> PROXY_OPTION_UNSPECIFIED
  2, // 1 -> PROXY_OPTION_DISABLED
  1, // 2 -> PROXY_OPTION_AUTOMATIC
  0, // 3 -> PROXY_OPTION_AUTODISCOVERY
  3, // 4 -> PROXY_OPTION_MANUAL
};

const std::string& WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_Name(
    WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_entries,
          WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_entries_by_number,
          5, WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_entries,
      WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_strings[idx].get();
}
bool WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_Parse(
    const std::string& name, WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption WifiConfigurationSpecificsData_ProxyConfiguration::PROXY_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption WifiConfigurationSpecificsData_ProxyConfiguration::PROXY_OPTION_DISABLED;
constexpr WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption WifiConfigurationSpecificsData_ProxyConfiguration::PROXY_OPTION_AUTOMATIC;
constexpr WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption WifiConfigurationSpecificsData_ProxyConfiguration::PROXY_OPTION_AUTODISCOVERY;
constexpr WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption WifiConfigurationSpecificsData_ProxyConfiguration::PROXY_OPTION_MANUAL;
constexpr WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption WifiConfigurationSpecificsData_ProxyConfiguration::ProxyOption_MIN;
constexpr WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption WifiConfigurationSpecificsData_ProxyConfiguration::ProxyOption_MAX;
constexpr int WifiConfigurationSpecificsData_ProxyConfiguration::ProxyOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool WifiConfigurationSpecificsData_SecurityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecificsData_SecurityType_strings[4] = {};

static const char WifiConfigurationSpecificsData_SecurityType_names[] =
  "SECURITY_TYPE_NONE"
  "SECURITY_TYPE_PSK"
  "SECURITY_TYPE_UNSPECIFIED"
  "SECURITY_TYPE_WEP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecificsData_SecurityType_entries[] = {
  { {WifiConfigurationSpecificsData_SecurityType_names + 0, 18}, 1 },
  { {WifiConfigurationSpecificsData_SecurityType_names + 18, 17}, 3 },
  { {WifiConfigurationSpecificsData_SecurityType_names + 35, 25}, 0 },
  { {WifiConfigurationSpecificsData_SecurityType_names + 60, 17}, 2 },
};

static const int WifiConfigurationSpecificsData_SecurityType_entries_by_number[] = {
  2, // 0 -> SECURITY_TYPE_UNSPECIFIED
  0, // 1 -> SECURITY_TYPE_NONE
  3, // 2 -> SECURITY_TYPE_WEP
  1, // 3 -> SECURITY_TYPE_PSK
};

const std::string& WifiConfigurationSpecificsData_SecurityType_Name(
    WifiConfigurationSpecificsData_SecurityType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecificsData_SecurityType_entries,
          WifiConfigurationSpecificsData_SecurityType_entries_by_number,
          4, WifiConfigurationSpecificsData_SecurityType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecificsData_SecurityType_entries,
      WifiConfigurationSpecificsData_SecurityType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecificsData_SecurityType_strings[idx].get();
}
bool WifiConfigurationSpecificsData_SecurityType_Parse(
    const std::string& name, WifiConfigurationSpecificsData_SecurityType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecificsData_SecurityType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecificsData_SecurityType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WifiConfigurationSpecificsData_SecurityType WifiConfigurationSpecificsData::SECURITY_TYPE_UNSPECIFIED;
constexpr WifiConfigurationSpecificsData_SecurityType WifiConfigurationSpecificsData::SECURITY_TYPE_NONE;
constexpr WifiConfigurationSpecificsData_SecurityType WifiConfigurationSpecificsData::SECURITY_TYPE_WEP;
constexpr WifiConfigurationSpecificsData_SecurityType WifiConfigurationSpecificsData::SECURITY_TYPE_PSK;
constexpr WifiConfigurationSpecificsData_SecurityType WifiConfigurationSpecificsData::SecurityType_MIN;
constexpr WifiConfigurationSpecificsData_SecurityType WifiConfigurationSpecificsData::SecurityType_MAX;
constexpr int WifiConfigurationSpecificsData::SecurityType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool WifiConfigurationSpecificsData_AutomaticallyConnectOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecificsData_AutomaticallyConnectOption_strings[3] = {};

static const char WifiConfigurationSpecificsData_AutomaticallyConnectOption_names[] =
  "AUTOMATICALLY_CONNECT_DISABLED"
  "AUTOMATICALLY_CONNECT_ENABLED"
  "AUTOMATICALLY_CONNECT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecificsData_AutomaticallyConnectOption_entries[] = {
  { {WifiConfigurationSpecificsData_AutomaticallyConnectOption_names + 0, 30}, 1 },
  { {WifiConfigurationSpecificsData_AutomaticallyConnectOption_names + 30, 29}, 2 },
  { {WifiConfigurationSpecificsData_AutomaticallyConnectOption_names + 59, 33}, 0 },
};

static const int WifiConfigurationSpecificsData_AutomaticallyConnectOption_entries_by_number[] = {
  2, // 0 -> AUTOMATICALLY_CONNECT_UNSPECIFIED
  0, // 1 -> AUTOMATICALLY_CONNECT_DISABLED
  1, // 2 -> AUTOMATICALLY_CONNECT_ENABLED
};

const std::string& WifiConfigurationSpecificsData_AutomaticallyConnectOption_Name(
    WifiConfigurationSpecificsData_AutomaticallyConnectOption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecificsData_AutomaticallyConnectOption_entries,
          WifiConfigurationSpecificsData_AutomaticallyConnectOption_entries_by_number,
          3, WifiConfigurationSpecificsData_AutomaticallyConnectOption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecificsData_AutomaticallyConnectOption_entries,
      WifiConfigurationSpecificsData_AutomaticallyConnectOption_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecificsData_AutomaticallyConnectOption_strings[idx].get();
}
bool WifiConfigurationSpecificsData_AutomaticallyConnectOption_Parse(
    const std::string& name, WifiConfigurationSpecificsData_AutomaticallyConnectOption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecificsData_AutomaticallyConnectOption_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecificsData_AutomaticallyConnectOption>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WifiConfigurationSpecificsData_AutomaticallyConnectOption WifiConfigurationSpecificsData::AUTOMATICALLY_CONNECT_UNSPECIFIED;
constexpr WifiConfigurationSpecificsData_AutomaticallyConnectOption WifiConfigurationSpecificsData::AUTOMATICALLY_CONNECT_DISABLED;
constexpr WifiConfigurationSpecificsData_AutomaticallyConnectOption WifiConfigurationSpecificsData::AUTOMATICALLY_CONNECT_ENABLED;
constexpr WifiConfigurationSpecificsData_AutomaticallyConnectOption WifiConfigurationSpecificsData::AutomaticallyConnectOption_MIN;
constexpr WifiConfigurationSpecificsData_AutomaticallyConnectOption WifiConfigurationSpecificsData::AutomaticallyConnectOption_MAX;
constexpr int WifiConfigurationSpecificsData::AutomaticallyConnectOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool WifiConfigurationSpecificsData_IsPreferredOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecificsData_IsPreferredOption_strings[3] = {};

static const char WifiConfigurationSpecificsData_IsPreferredOption_names[] =
  "IS_PREFERRED_DISABLED"
  "IS_PREFERRED_ENABLED"
  "IS_PREFERRED_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecificsData_IsPreferredOption_entries[] = {
  { {WifiConfigurationSpecificsData_IsPreferredOption_names + 0, 21}, 1 },
  { {WifiConfigurationSpecificsData_IsPreferredOption_names + 21, 20}, 2 },
  { {WifiConfigurationSpecificsData_IsPreferredOption_names + 41, 24}, 0 },
};

static const int WifiConfigurationSpecificsData_IsPreferredOption_entries_by_number[] = {
  2, // 0 -> IS_PREFERRED_UNSPECIFIED
  0, // 1 -> IS_PREFERRED_DISABLED
  1, // 2 -> IS_PREFERRED_ENABLED
};

const std::string& WifiConfigurationSpecificsData_IsPreferredOption_Name(
    WifiConfigurationSpecificsData_IsPreferredOption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecificsData_IsPreferredOption_entries,
          WifiConfigurationSpecificsData_IsPreferredOption_entries_by_number,
          3, WifiConfigurationSpecificsData_IsPreferredOption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecificsData_IsPreferredOption_entries,
      WifiConfigurationSpecificsData_IsPreferredOption_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecificsData_IsPreferredOption_strings[idx].get();
}
bool WifiConfigurationSpecificsData_IsPreferredOption_Parse(
    const std::string& name, WifiConfigurationSpecificsData_IsPreferredOption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecificsData_IsPreferredOption_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecificsData_IsPreferredOption>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WifiConfigurationSpecificsData_IsPreferredOption WifiConfigurationSpecificsData::IS_PREFERRED_UNSPECIFIED;
constexpr WifiConfigurationSpecificsData_IsPreferredOption WifiConfigurationSpecificsData::IS_PREFERRED_DISABLED;
constexpr WifiConfigurationSpecificsData_IsPreferredOption WifiConfigurationSpecificsData::IS_PREFERRED_ENABLED;
constexpr WifiConfigurationSpecificsData_IsPreferredOption WifiConfigurationSpecificsData::IsPreferredOption_MIN;
constexpr WifiConfigurationSpecificsData_IsPreferredOption WifiConfigurationSpecificsData::IsPreferredOption_MAX;
constexpr int WifiConfigurationSpecificsData::IsPreferredOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool WifiConfigurationSpecificsData_MeteredOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecificsData_MeteredOption_strings[4] = {};

static const char WifiConfigurationSpecificsData_MeteredOption_names[] =
  "METERED_OPTION_AUTO"
  "METERED_OPTION_NO"
  "METERED_OPTION_UNSPECIFIED"
  "METERED_OPTION_YES";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecificsData_MeteredOption_entries[] = {
  { {WifiConfigurationSpecificsData_MeteredOption_names + 0, 19}, 3 },
  { {WifiConfigurationSpecificsData_MeteredOption_names + 19, 17}, 1 },
  { {WifiConfigurationSpecificsData_MeteredOption_names + 36, 26}, 0 },
  { {WifiConfigurationSpecificsData_MeteredOption_names + 62, 18}, 2 },
};

static const int WifiConfigurationSpecificsData_MeteredOption_entries_by_number[] = {
  2, // 0 -> METERED_OPTION_UNSPECIFIED
  1, // 1 -> METERED_OPTION_NO
  3, // 2 -> METERED_OPTION_YES
  0, // 3 -> METERED_OPTION_AUTO
};

const std::string& WifiConfigurationSpecificsData_MeteredOption_Name(
    WifiConfigurationSpecificsData_MeteredOption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecificsData_MeteredOption_entries,
          WifiConfigurationSpecificsData_MeteredOption_entries_by_number,
          4, WifiConfigurationSpecificsData_MeteredOption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecificsData_MeteredOption_entries,
      WifiConfigurationSpecificsData_MeteredOption_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecificsData_MeteredOption_strings[idx].get();
}
bool WifiConfigurationSpecificsData_MeteredOption_Parse(
    const std::string& name, WifiConfigurationSpecificsData_MeteredOption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecificsData_MeteredOption_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecificsData_MeteredOption>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WifiConfigurationSpecificsData_MeteredOption WifiConfigurationSpecificsData::METERED_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecificsData_MeteredOption WifiConfigurationSpecificsData::METERED_OPTION_NO;
constexpr WifiConfigurationSpecificsData_MeteredOption WifiConfigurationSpecificsData::METERED_OPTION_YES;
constexpr WifiConfigurationSpecificsData_MeteredOption WifiConfigurationSpecificsData::METERED_OPTION_AUTO;
constexpr WifiConfigurationSpecificsData_MeteredOption WifiConfigurationSpecificsData::MeteredOption_MIN;
constexpr WifiConfigurationSpecificsData_MeteredOption WifiConfigurationSpecificsData::MeteredOption_MAX;
constexpr int WifiConfigurationSpecificsData::MeteredOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void WifiConfigurationSpecificsData_ProxyConfiguration::InitAsDefaultInstance() {
}
class WifiConfigurationSpecificsData_ProxyConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<WifiConfigurationSpecificsData_ProxyConfiguration>()._has_bits_);
  static void set_has_proxy_option(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proxy_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proxy_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WifiConfigurationSpecificsData_ProxyConfiguration::WifiConfigurationSpecificsData_ProxyConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
}
WifiConfigurationSpecificsData_ProxyConfiguration::WifiConfigurationSpecificsData_ProxyConfiguration(const WifiConfigurationSpecificsData_ProxyConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      whitelisted_domains_(from.whitelisted_domains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proxy_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_proxy_url()) {
    proxy_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_url_);
  }
  ::memcpy(&proxy_option_, &from.proxy_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&proxy_port_) -
    reinterpret_cast<char*>(&proxy_option_)) + sizeof(proxy_port_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
}

void WifiConfigurationSpecificsData_ProxyConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WifiConfigurationSpecificsData_ProxyConfiguration_wifi_5fconfiguration_5fspecifics_2eproto.base);
  proxy_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proxy_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proxy_port_) -
      reinterpret_cast<char*>(&proxy_option_)) + sizeof(proxy_port_));
}

WifiConfigurationSpecificsData_ProxyConfiguration::~WifiConfigurationSpecificsData_ProxyConfiguration() {
  // @@protoc_insertion_point(destructor:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
  SharedDtor();
}

void WifiConfigurationSpecificsData_ProxyConfiguration::SharedDtor() {
  proxy_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WifiConfigurationSpecificsData_ProxyConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WifiConfigurationSpecificsData_ProxyConfiguration& WifiConfigurationSpecificsData_ProxyConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WifiConfigurationSpecificsData_ProxyConfiguration_wifi_5fconfiguration_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void WifiConfigurationSpecificsData_ProxyConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  whitelisted_domains_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    proxy_url_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&proxy_option_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proxy_port_) -
        reinterpret_cast<char*>(&proxy_option_)) + sizeof(proxy_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WifiConfigurationSpecificsData_ProxyConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration.ProxyOption proxy_option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_IsValid(val))) {
            set_proxy_option(static_cast<::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string proxy_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_proxy_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 proxy_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_proxy_port(&has_bits);
          proxy_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string whitelisted_domains = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_whitelisted_domains(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WifiConfigurationSpecificsData_ProxyConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration.ProxyOption proxy_option = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption_IsValid(value)) {
            set_proxy_option(static_cast< ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration_ProxyOption >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proxy_url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proxy_port = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_proxy_port(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxy_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string whitelisted_domains = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_whitelisted_domains()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WifiConfigurationSpecificsData_ProxyConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration.ProxyOption proxy_option = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->proxy_option(), output);
  }

  // optional string proxy_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proxy_url(), output);
  }

  // optional int32 proxy_port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->proxy_port(), output);
  }

  // repeated string whitelisted_domains = 4;
  for (int i = 0, n = this->whitelisted_domains_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->whitelisted_domains(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
}

size_t WifiConfigurationSpecificsData_ProxyConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string whitelisted_domains = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->whitelisted_domains_size());
  for (int i = 0, n = this->whitelisted_domains_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->whitelisted_domains(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string proxy_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->proxy_url());
    }

    // optional .sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration.ProxyOption proxy_option = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->proxy_option());
    }

    // optional int32 proxy_port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->proxy_port());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiConfigurationSpecificsData_ProxyConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WifiConfigurationSpecificsData_ProxyConfiguration*>(
      &from));
}

void WifiConfigurationSpecificsData_ProxyConfiguration::MergeFrom(const WifiConfigurationSpecificsData_ProxyConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  whitelisted_domains_.MergeFrom(from.whitelisted_domains_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      proxy_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      proxy_option_ = from.proxy_option_;
    }
    if (cached_has_bits & 0x00000004u) {
      proxy_port_ = from.proxy_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WifiConfigurationSpecificsData_ProxyConfiguration::CopyFrom(const WifiConfigurationSpecificsData_ProxyConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiConfigurationSpecificsData_ProxyConfiguration::IsInitialized() const {
  return true;
}

void WifiConfigurationSpecificsData_ProxyConfiguration::InternalSwap(WifiConfigurationSpecificsData_ProxyConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  whitelisted_domains_.InternalSwap(CastToBase(&other->whitelisted_domains_));
  proxy_url_.Swap(&other->proxy_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(proxy_option_, other->proxy_option_);
  swap(proxy_port_, other->proxy_port_);
}

std::string WifiConfigurationSpecificsData_ProxyConfiguration::GetTypeName() const {
  return "sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration";
}


// ===================================================================

void WifiConfigurationSpecificsData::InitAsDefaultInstance() {
  ::sync_pb::_WifiConfigurationSpecificsData_default_instance_._instance.get_mutable()->proxy_configuration_ = const_cast< ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration*>(
      ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration::internal_default_instance());
}
class WifiConfigurationSpecificsData::_Internal {
 public:
  using HasBits = decltype(std::declval<WifiConfigurationSpecificsData>()._has_bits_);
  static void set_has_hex_ssid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_security_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_passphrase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_automatically_connect(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_preferred(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_metered(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration& proxy_configuration(const WifiConfigurationSpecificsData* msg);
  static void set_has_proxy_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_update_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration&
WifiConfigurationSpecificsData::_Internal::proxy_configuration(const WifiConfigurationSpecificsData* msg) {
  return *msg->proxy_configuration_;
}
WifiConfigurationSpecificsData::WifiConfigurationSpecificsData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.WifiConfigurationSpecificsData)
}
WifiConfigurationSpecificsData::WifiConfigurationSpecificsData(const WifiConfigurationSpecificsData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      custom_dns_(from.custom_dns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hex_ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hex_ssid()) {
    hex_ssid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hex_ssid_);
  }
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_passphrase()) {
    passphrase_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passphrase_);
  }
  if (from.has_proxy_configuration()) {
    proxy_configuration_ = new ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration(*from.proxy_configuration_);
  } else {
    proxy_configuration_ = nullptr;
  }
  ::memcpy(&security_type_, &from.security_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_update_timestamp_) -
    reinterpret_cast<char*>(&security_type_)) + sizeof(last_update_timestamp_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WifiConfigurationSpecificsData)
}

void WifiConfigurationSpecificsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WifiConfigurationSpecificsData_wifi_5fconfiguration_5fspecifics_2eproto.base);
  hex_ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proxy_configuration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_update_timestamp_) -
      reinterpret_cast<char*>(&proxy_configuration_)) + sizeof(last_update_timestamp_));
}

WifiConfigurationSpecificsData::~WifiConfigurationSpecificsData() {
  // @@protoc_insertion_point(destructor:sync_pb.WifiConfigurationSpecificsData)
  SharedDtor();
}

void WifiConfigurationSpecificsData::SharedDtor() {
  hex_ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proxy_configuration_;
}

void WifiConfigurationSpecificsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WifiConfigurationSpecificsData& WifiConfigurationSpecificsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WifiConfigurationSpecificsData_wifi_5fconfiguration_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void WifiConfigurationSpecificsData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WifiConfigurationSpecificsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_dns_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hex_ssid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      passphrase_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(proxy_configuration_ != nullptr);
      proxy_configuration_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&security_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_update_timestamp_) -
        reinterpret_cast<char*>(&security_type_)) + sizeof(last_update_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WifiConfigurationSpecificsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes hex_ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hex_ssid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecificsData.SecurityType security_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecificsData_SecurityType_IsValid(val))) {
            set_security_type(static_cast<::sync_pb::WifiConfigurationSpecificsData_SecurityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes passphrase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_passphrase(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecificsData.AutomaticallyConnectOption automatically_connect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecificsData_AutomaticallyConnectOption_IsValid(val))) {
            set_automatically_connect(static_cast<::sync_pb::WifiConfigurationSpecificsData_AutomaticallyConnectOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecificsData.IsPreferredOption is_preferred = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecificsData_IsPreferredOption_IsValid(val))) {
            set_is_preferred(static_cast<::sync_pb::WifiConfigurationSpecificsData_IsPreferredOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecificsData.MeteredOption metered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecificsData_MeteredOption_IsValid(val))) {
            set_metered(static_cast<::sync_pb::WifiConfigurationSpecificsData_MeteredOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration proxy_configuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_proxy_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string custom_dns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_custom_dns(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional int64 last_update_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_last_update_timestamp(&has_bits);
          last_update_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WifiConfigurationSpecificsData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.WifiConfigurationSpecificsData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes hex_ssid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hex_ssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WifiConfigurationSpecificsData.SecurityType security_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WifiConfigurationSpecificsData_SecurityType_IsValid(value)) {
            set_security_type(static_cast< ::sync_pb::WifiConfigurationSpecificsData_SecurityType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes passphrase = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passphrase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WifiConfigurationSpecificsData.AutomaticallyConnectOption automatically_connect = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WifiConfigurationSpecificsData_AutomaticallyConnectOption_IsValid(value)) {
            set_automatically_connect(static_cast< ::sync_pb::WifiConfigurationSpecificsData_AutomaticallyConnectOption >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WifiConfigurationSpecificsData.IsPreferredOption is_preferred = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WifiConfigurationSpecificsData_IsPreferredOption_IsValid(value)) {
            set_is_preferred(static_cast< ::sync_pb::WifiConfigurationSpecificsData_IsPreferredOption >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WifiConfigurationSpecificsData.MeteredOption metered = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WifiConfigurationSpecificsData_MeteredOption_IsValid(value)) {
            set_metered(static_cast< ::sync_pb::WifiConfigurationSpecificsData_MeteredOption >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration proxy_configuration = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxy_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string custom_dns = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_custom_dns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_update_timestamp = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_last_update_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.WifiConfigurationSpecificsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.WifiConfigurationSpecificsData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WifiConfigurationSpecificsData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.WifiConfigurationSpecificsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes hex_ssid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hex_ssid(), output);
  }

  // optional .sync_pb.WifiConfigurationSpecificsData.SecurityType security_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->security_type(), output);
  }

  // optional bytes passphrase = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->passphrase(), output);
  }

  // optional .sync_pb.WifiConfigurationSpecificsData.AutomaticallyConnectOption automatically_connect = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->automatically_connect(), output);
  }

  // optional .sync_pb.WifiConfigurationSpecificsData.IsPreferredOption is_preferred = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->is_preferred(), output);
  }

  // optional .sync_pb.WifiConfigurationSpecificsData.MeteredOption metered = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->metered(), output);
  }

  // optional .sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration proxy_configuration = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::proxy_configuration(this), output);
  }

  // repeated string custom_dns = 8;
  for (int i = 0, n = this->custom_dns_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      8, this->custom_dns(i), output);
  }

  // optional int64 last_update_timestamp = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->last_update_timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.WifiConfigurationSpecificsData)
}

size_t WifiConfigurationSpecificsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WifiConfigurationSpecificsData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string custom_dns = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->custom_dns_size());
  for (int i = 0, n = this->custom_dns_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->custom_dns(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes hex_ssid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->hex_ssid());
    }

    // optional bytes passphrase = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->passphrase());
    }

    // optional .sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration proxy_configuration = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxy_configuration_);
    }

    // optional .sync_pb.WifiConfigurationSpecificsData.SecurityType security_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->security_type());
    }

    // optional .sync_pb.WifiConfigurationSpecificsData.AutomaticallyConnectOption automatically_connect = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->automatically_connect());
    }

    // optional .sync_pb.WifiConfigurationSpecificsData.IsPreferredOption is_preferred = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->is_preferred());
    }

    // optional .sync_pb.WifiConfigurationSpecificsData.MeteredOption metered = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->metered());
    }

    // optional int64 last_update_timestamp = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_update_timestamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiConfigurationSpecificsData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WifiConfigurationSpecificsData*>(
      &from));
}

void WifiConfigurationSpecificsData::MergeFrom(const WifiConfigurationSpecificsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WifiConfigurationSpecificsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_dns_.MergeFrom(from.custom_dns_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hex_ssid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hex_ssid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      passphrase_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passphrase_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_proxy_configuration()->::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration::MergeFrom(from.proxy_configuration());
    }
    if (cached_has_bits & 0x00000008u) {
      security_type_ = from.security_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      automatically_connect_ = from.automatically_connect_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_preferred_ = from.is_preferred_;
    }
    if (cached_has_bits & 0x00000040u) {
      metered_ = from.metered_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_update_timestamp_ = from.last_update_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WifiConfigurationSpecificsData::CopyFrom(const WifiConfigurationSpecificsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WifiConfigurationSpecificsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiConfigurationSpecificsData::IsInitialized() const {
  return true;
}

void WifiConfigurationSpecificsData::InternalSwap(WifiConfigurationSpecificsData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_dns_.InternalSwap(CastToBase(&other->custom_dns_));
  hex_ssid_.Swap(&other->hex_ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passphrase_.Swap(&other->passphrase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(proxy_configuration_, other->proxy_configuration_);
  swap(security_type_, other->security_type_);
  swap(automatically_connect_, other->automatically_connect_);
  swap(is_preferred_, other->is_preferred_);
  swap(metered_, other->metered_);
  swap(last_update_timestamp_, other->last_update_timestamp_);
}

std::string WifiConfigurationSpecificsData::GetTypeName() const {
  return "sync_pb.WifiConfigurationSpecificsData";
}


// ===================================================================

void WifiConfigurationSpecifics::InitAsDefaultInstance() {
  ::sync_pb::_WifiConfigurationSpecifics_default_instance_._instance.get_mutable()->encrypted_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
  ::sync_pb::_WifiConfigurationSpecifics_default_instance_._instance.get_mutable()->client_only_encrypted_data_ = const_cast< ::sync_pb::WifiConfigurationSpecificsData*>(
      ::sync_pb::WifiConfigurationSpecificsData::internal_default_instance());
}
class WifiConfigurationSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<WifiConfigurationSpecifics>()._has_bits_);
  static const ::sync_pb::EncryptedData& encrypted(const WifiConfigurationSpecifics* msg);
  static void set_has_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::WifiConfigurationSpecificsData& client_only_encrypted_data(const WifiConfigurationSpecifics* msg);
  static void set_has_client_only_encrypted_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::EncryptedData&
WifiConfigurationSpecifics::_Internal::encrypted(const WifiConfigurationSpecifics* msg) {
  return *msg->encrypted_;
}
const ::sync_pb::WifiConfigurationSpecificsData&
WifiConfigurationSpecifics::_Internal::client_only_encrypted_data(const WifiConfigurationSpecifics* msg) {
  return *msg->client_only_encrypted_data_;
}
void WifiConfigurationSpecifics::clear_encrypted() {
  if (encrypted_ != nullptr) encrypted_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
WifiConfigurationSpecifics::WifiConfigurationSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.WifiConfigurationSpecifics)
}
WifiConfigurationSpecifics::WifiConfigurationSpecifics(const WifiConfigurationSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_encrypted()) {
    encrypted_ = new ::sync_pb::EncryptedData(*from.encrypted_);
  } else {
    encrypted_ = nullptr;
  }
  if (from.has_client_only_encrypted_data()) {
    client_only_encrypted_data_ = new ::sync_pb::WifiConfigurationSpecificsData(*from.client_only_encrypted_data_);
  } else {
    client_only_encrypted_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.WifiConfigurationSpecifics)
}

void WifiConfigurationSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WifiConfigurationSpecifics_wifi_5fconfiguration_5fspecifics_2eproto.base);
  ::memset(&encrypted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_only_encrypted_data_) -
      reinterpret_cast<char*>(&encrypted_)) + sizeof(client_only_encrypted_data_));
}

WifiConfigurationSpecifics::~WifiConfigurationSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.WifiConfigurationSpecifics)
  SharedDtor();
}

void WifiConfigurationSpecifics::SharedDtor() {
  if (this != internal_default_instance()) delete encrypted_;
  if (this != internal_default_instance()) delete client_only_encrypted_data_;
}

void WifiConfigurationSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WifiConfigurationSpecifics& WifiConfigurationSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WifiConfigurationSpecifics_wifi_5fconfiguration_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void WifiConfigurationSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WifiConfigurationSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(encrypted_ != nullptr);
      encrypted_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(client_only_encrypted_data_ != nullptr);
      client_only_encrypted_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WifiConfigurationSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.EncryptedData encrypted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_encrypted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecificsData client_only_encrypted_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_client_only_encrypted_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WifiConfigurationSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.WifiConfigurationSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.EncryptedData encrypted = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_encrypted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WifiConfigurationSpecificsData client_only_encrypted_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_client_only_encrypted_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.WifiConfigurationSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.WifiConfigurationSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WifiConfigurationSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.WifiConfigurationSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.EncryptedData encrypted = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::encrypted(this), output);
  }

  // optional .sync_pb.WifiConfigurationSpecificsData client_only_encrypted_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::client_only_encrypted_data(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.WifiConfigurationSpecifics)
}

size_t WifiConfigurationSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WifiConfigurationSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .sync_pb.EncryptedData encrypted = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encrypted_);
    }

    // optional .sync_pb.WifiConfigurationSpecificsData client_only_encrypted_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_only_encrypted_data_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiConfigurationSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WifiConfigurationSpecifics*>(
      &from));
}

void WifiConfigurationSpecifics::MergeFrom(const WifiConfigurationSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WifiConfigurationSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_encrypted()->::sync_pb::EncryptedData::MergeFrom(from.encrypted());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_client_only_encrypted_data()->::sync_pb::WifiConfigurationSpecificsData::MergeFrom(from.client_only_encrypted_data());
    }
  }
}

void WifiConfigurationSpecifics::CopyFrom(const WifiConfigurationSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WifiConfigurationSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiConfigurationSpecifics::IsInitialized() const {
  return true;
}

void WifiConfigurationSpecifics::InternalSwap(WifiConfigurationSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(encrypted_, other->encrypted_);
  swap(client_only_encrypted_data_, other->client_only_encrypted_data_);
}

std::string WifiConfigurationSpecifics::GetTypeName() const {
  return "sync_pb.WifiConfigurationSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration* Arena::CreateMaybeMessage< ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::WifiConfigurationSpecificsData_ProxyConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WifiConfigurationSpecificsData* Arena::CreateMaybeMessage< ::sync_pb::WifiConfigurationSpecificsData >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::WifiConfigurationSpecificsData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WifiConfigurationSpecifics* Arena::CreateMaybeMessage< ::sync_pb::WifiConfigurationSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::WifiConfigurationSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
