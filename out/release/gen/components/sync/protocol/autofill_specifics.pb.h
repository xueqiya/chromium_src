// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autofill_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autofill_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autofill_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autofill_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class AutofillProfileSpecifics;
class AutofillProfileSpecificsDefaultTypeInternal;
extern AutofillProfileSpecificsDefaultTypeInternal _AutofillProfileSpecifics_default_instance_;
class AutofillSpecifics;
class AutofillSpecificsDefaultTypeInternal;
extern AutofillSpecificsDefaultTypeInternal _AutofillSpecifics_default_instance_;
class AutofillWalletSpecifics;
class AutofillWalletSpecificsDefaultTypeInternal;
extern AutofillWalletSpecificsDefaultTypeInternal _AutofillWalletSpecifics_default_instance_;
class CloudTokenData;
class CloudTokenDataDefaultTypeInternal;
extern CloudTokenDataDefaultTypeInternal _CloudTokenData_default_instance_;
class PaymentsCustomerData;
class PaymentsCustomerDataDefaultTypeInternal;
extern PaymentsCustomerDataDefaultTypeInternal _PaymentsCustomerData_default_instance_;
class WalletCreditCardCloudTokenData;
class WalletCreditCardCloudTokenDataDefaultTypeInternal;
extern WalletCreditCardCloudTokenDataDefaultTypeInternal _WalletCreditCardCloudTokenData_default_instance_;
class WalletMaskedCreditCard;
class WalletMaskedCreditCardDefaultTypeInternal;
extern WalletMaskedCreditCardDefaultTypeInternal _WalletMaskedCreditCard_default_instance_;
class WalletMetadataSpecifics;
class WalletMetadataSpecificsDefaultTypeInternal;
extern WalletMetadataSpecificsDefaultTypeInternal _WalletMetadataSpecifics_default_instance_;
class WalletPostalAddress;
class WalletPostalAddressDefaultTypeInternal;
extern WalletPostalAddressDefaultTypeInternal _WalletPostalAddress_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::AutofillProfileSpecifics* Arena::CreateMaybeMessage<::sync_pb::AutofillProfileSpecifics>(Arena*);
template<> ::sync_pb::AutofillSpecifics* Arena::CreateMaybeMessage<::sync_pb::AutofillSpecifics>(Arena*);
template<> ::sync_pb::AutofillWalletSpecifics* Arena::CreateMaybeMessage<::sync_pb::AutofillWalletSpecifics>(Arena*);
template<> ::sync_pb::CloudTokenData* Arena::CreateMaybeMessage<::sync_pb::CloudTokenData>(Arena*);
template<> ::sync_pb::PaymentsCustomerData* Arena::CreateMaybeMessage<::sync_pb::PaymentsCustomerData>(Arena*);
template<> ::sync_pb::WalletCreditCardCloudTokenData* Arena::CreateMaybeMessage<::sync_pb::WalletCreditCardCloudTokenData>(Arena*);
template<> ::sync_pb::WalletMaskedCreditCard* Arena::CreateMaybeMessage<::sync_pb::WalletMaskedCreditCard>(Arena*);
template<> ::sync_pb::WalletMetadataSpecifics* Arena::CreateMaybeMessage<::sync_pb::WalletMetadataSpecifics>(Arena*);
template<> ::sync_pb::WalletPostalAddress* Arena::CreateMaybeMessage<::sync_pb::WalletPostalAddress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum WalletMaskedCreditCard_WalletCardStatus : int {
  WalletMaskedCreditCard_WalletCardStatus_VALID = 0,
  WalletMaskedCreditCard_WalletCardStatus_EXPIRED = 1
};
bool WalletMaskedCreditCard_WalletCardStatus_IsValid(int value);
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MIN = WalletMaskedCreditCard_WalletCardStatus_VALID;
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MAX = WalletMaskedCreditCard_WalletCardStatus_EXPIRED;
constexpr int WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_ARRAYSIZE = WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MAX + 1;

const std::string& WalletMaskedCreditCard_WalletCardStatus_Name(WalletMaskedCreditCard_WalletCardStatus value);
template<typename T>
inline const std::string& WalletMaskedCreditCard_WalletCardStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WalletMaskedCreditCard_WalletCardStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WalletMaskedCreditCard_WalletCardStatus_Name.");
  return WalletMaskedCreditCard_WalletCardStatus_Name(static_cast<WalletMaskedCreditCard_WalletCardStatus>(enum_t_value));
}
bool WalletMaskedCreditCard_WalletCardStatus_Parse(
    const std::string& name, WalletMaskedCreditCard_WalletCardStatus* value);
enum WalletMaskedCreditCard_WalletCardType : int {
  WalletMaskedCreditCard_WalletCardType_UNKNOWN = 0,
  WalletMaskedCreditCard_WalletCardType_AMEX = 1,
  WalletMaskedCreditCard_WalletCardType_DISCOVER = 2,
  WalletMaskedCreditCard_WalletCardType_JCB = 3,
  WalletMaskedCreditCard_WalletCardType_MAESTRO = 4,
  WalletMaskedCreditCard_WalletCardType_MASTER_CARD = 5,
  WalletMaskedCreditCard_WalletCardType_SOLO = 6,
  WalletMaskedCreditCard_WalletCardType_SWITCH = 7,
  WalletMaskedCreditCard_WalletCardType_VISA = 8,
  WalletMaskedCreditCard_WalletCardType_UNIONPAY = 9
};
bool WalletMaskedCreditCard_WalletCardType_IsValid(int value);
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard_WalletCardType_WalletCardType_MIN = WalletMaskedCreditCard_WalletCardType_UNKNOWN;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard_WalletCardType_WalletCardType_MAX = WalletMaskedCreditCard_WalletCardType_UNIONPAY;
constexpr int WalletMaskedCreditCard_WalletCardType_WalletCardType_ARRAYSIZE = WalletMaskedCreditCard_WalletCardType_WalletCardType_MAX + 1;

const std::string& WalletMaskedCreditCard_WalletCardType_Name(WalletMaskedCreditCard_WalletCardType value);
template<typename T>
inline const std::string& WalletMaskedCreditCard_WalletCardType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WalletMaskedCreditCard_WalletCardType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WalletMaskedCreditCard_WalletCardType_Name.");
  return WalletMaskedCreditCard_WalletCardType_Name(static_cast<WalletMaskedCreditCard_WalletCardType>(enum_t_value));
}
bool WalletMaskedCreditCard_WalletCardType_Parse(
    const std::string& name, WalletMaskedCreditCard_WalletCardType* value);
enum AutofillWalletSpecifics_WalletInfoType : int {
  AutofillWalletSpecifics_WalletInfoType_UNKNOWN = 0,
  AutofillWalletSpecifics_WalletInfoType_MASKED_CREDIT_CARD = 1,
  AutofillWalletSpecifics_WalletInfoType_POSTAL_ADDRESS = 2,
  AutofillWalletSpecifics_WalletInfoType_CUSTOMER_DATA = 3,
  AutofillWalletSpecifics_WalletInfoType_CREDIT_CARD_CLOUD_TOKEN_DATA = 4
};
bool AutofillWalletSpecifics_WalletInfoType_IsValid(int value);
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MIN = AutofillWalletSpecifics_WalletInfoType_UNKNOWN;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MAX = AutofillWalletSpecifics_WalletInfoType_CREDIT_CARD_CLOUD_TOKEN_DATA;
constexpr int AutofillWalletSpecifics_WalletInfoType_WalletInfoType_ARRAYSIZE = AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MAX + 1;

const std::string& AutofillWalletSpecifics_WalletInfoType_Name(AutofillWalletSpecifics_WalletInfoType value);
template<typename T>
inline const std::string& AutofillWalletSpecifics_WalletInfoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutofillWalletSpecifics_WalletInfoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutofillWalletSpecifics_WalletInfoType_Name.");
  return AutofillWalletSpecifics_WalletInfoType_Name(static_cast<AutofillWalletSpecifics_WalletInfoType>(enum_t_value));
}
bool AutofillWalletSpecifics_WalletInfoType_Parse(
    const std::string& name, AutofillWalletSpecifics_WalletInfoType* value);
enum WalletMetadataSpecifics_Type : int {
  WalletMetadataSpecifics_Type_UNKNOWN = 0,
  WalletMetadataSpecifics_Type_CARD = 1,
  WalletMetadataSpecifics_Type_ADDRESS = 2
};
bool WalletMetadataSpecifics_Type_IsValid(int value);
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics_Type_Type_MIN = WalletMetadataSpecifics_Type_UNKNOWN;
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics_Type_Type_MAX = WalletMetadataSpecifics_Type_ADDRESS;
constexpr int WalletMetadataSpecifics_Type_Type_ARRAYSIZE = WalletMetadataSpecifics_Type_Type_MAX + 1;

const std::string& WalletMetadataSpecifics_Type_Name(WalletMetadataSpecifics_Type value);
template<typename T>
inline const std::string& WalletMetadataSpecifics_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WalletMetadataSpecifics_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WalletMetadataSpecifics_Type_Name.");
  return WalletMetadataSpecifics_Type_Name(static_cast<WalletMetadataSpecifics_Type>(enum_t_value));
}
bool WalletMetadataSpecifics_Type_Parse(
    const std::string& name, WalletMetadataSpecifics_Type* value);
// ===================================================================

class AutofillProfileSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillProfileSpecifics) */ {
 public:
  AutofillProfileSpecifics();
  virtual ~AutofillProfileSpecifics();

  AutofillProfileSpecifics(const AutofillProfileSpecifics& from);
  AutofillProfileSpecifics(AutofillProfileSpecifics&& from) noexcept
    : AutofillProfileSpecifics() {
    *this = ::std::move(from);
  }

  inline AutofillProfileSpecifics& operator=(const AutofillProfileSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillProfileSpecifics& operator=(AutofillProfileSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AutofillProfileSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutofillProfileSpecifics* internal_default_instance() {
    return reinterpret_cast<const AutofillProfileSpecifics*>(
               &_AutofillProfileSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutofillProfileSpecifics& a, AutofillProfileSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(AutofillProfileSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutofillProfileSpecifics* New() const final {
    return CreateMaybeMessage<AutofillProfileSpecifics>(nullptr);
  }

  AutofillProfileSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutofillProfileSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AutofillProfileSpecifics& from);
  void MergeFrom(const AutofillProfileSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillProfileSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillProfileSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFirstFieldNumber = 2,
    kNameMiddleFieldNumber = 3,
    kNameLastFieldNumber = 4,
    kEmailAddressFieldNumber = 5,
    kPhoneHomeWholeNumberFieldNumber = 13,
    kNameFullFieldNumber = 21,
    kLabelFieldNumber = 1,
    kCompanyNameFieldNumber = 6,
    kAddressHomeLine1FieldNumber = 7,
    kAddressHomeLine2FieldNumber = 8,
    kAddressHomeCityFieldNumber = 9,
    kAddressHomeStateFieldNumber = 10,
    kAddressHomeZipFieldNumber = 11,
    kAddressHomeCountryFieldNumber = 12,
    kPhoneFaxWholeNumberFieldNumber = 14,
    kGuidFieldNumber = 15,
    kOriginFieldNumber = 16,
    kAddressHomeStreetAddressFieldNumber = 17,
    kAddressHomeSortingCodeFieldNumber = 18,
    kAddressHomeDependentLocalityFieldNumber = 19,
    kAddressHomeLanguageCodeFieldNumber = 20,
    kUseCountFieldNumber = 22,
    kUseDateFieldNumber = 23,
    kValidityStateBitfieldFieldNumber = 24,
    kIsClientValidityStatesUpdatedFieldNumber = 25,
  };
  // repeated string name_first = 2;
  int name_first_size() const;
  void clear_name_first();
  const std::string& name_first(int index) const;
  std::string* mutable_name_first(int index);
  void set_name_first(int index, const std::string& value);
  void set_name_first(int index, std::string&& value);
  void set_name_first(int index, const char* value);
  void set_name_first(int index, const char* value, size_t size);
  std::string* add_name_first();
  void add_name_first(const std::string& value);
  void add_name_first(std::string&& value);
  void add_name_first(const char* value);
  void add_name_first(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_first() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_first();

  // repeated string name_middle = 3;
  int name_middle_size() const;
  void clear_name_middle();
  const std::string& name_middle(int index) const;
  std::string* mutable_name_middle(int index);
  void set_name_middle(int index, const std::string& value);
  void set_name_middle(int index, std::string&& value);
  void set_name_middle(int index, const char* value);
  void set_name_middle(int index, const char* value, size_t size);
  std::string* add_name_middle();
  void add_name_middle(const std::string& value);
  void add_name_middle(std::string&& value);
  void add_name_middle(const char* value);
  void add_name_middle(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_middle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_middle();

  // repeated string name_last = 4;
  int name_last_size() const;
  void clear_name_last();
  const std::string& name_last(int index) const;
  std::string* mutable_name_last(int index);
  void set_name_last(int index, const std::string& value);
  void set_name_last(int index, std::string&& value);
  void set_name_last(int index, const char* value);
  void set_name_last(int index, const char* value, size_t size);
  std::string* add_name_last();
  void add_name_last(const std::string& value);
  void add_name_last(std::string&& value);
  void add_name_last(const char* value);
  void add_name_last(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_last() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_last();

  // repeated string email_address = 5;
  int email_address_size() const;
  void clear_email_address();
  const std::string& email_address(int index) const;
  std::string* mutable_email_address(int index);
  void set_email_address(int index, const std::string& value);
  void set_email_address(int index, std::string&& value);
  void set_email_address(int index, const char* value);
  void set_email_address(int index, const char* value, size_t size);
  std::string* add_email_address();
  void add_email_address(const std::string& value);
  void add_email_address(std::string&& value);
  void add_email_address(const char* value);
  void add_email_address(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& email_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_email_address();

  // repeated string phone_home_whole_number = 13;
  int phone_home_whole_number_size() const;
  void clear_phone_home_whole_number();
  const std::string& phone_home_whole_number(int index) const;
  std::string* mutable_phone_home_whole_number(int index);
  void set_phone_home_whole_number(int index, const std::string& value);
  void set_phone_home_whole_number(int index, std::string&& value);
  void set_phone_home_whole_number(int index, const char* value);
  void set_phone_home_whole_number(int index, const char* value, size_t size);
  std::string* add_phone_home_whole_number();
  void add_phone_home_whole_number(const std::string& value);
  void add_phone_home_whole_number(std::string&& value);
  void add_phone_home_whole_number(const char* value);
  void add_phone_home_whole_number(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phone_home_whole_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phone_home_whole_number();

  // repeated string name_full = 21;
  int name_full_size() const;
  void clear_name_full();
  const std::string& name_full(int index) const;
  std::string* mutable_name_full(int index);
  void set_name_full(int index, const std::string& value);
  void set_name_full(int index, std::string&& value);
  void set_name_full(int index, const char* value);
  void set_name_full(int index, const char* value, size_t size);
  std::string* add_name_full();
  void add_name_full(const std::string& value);
  void add_name_full(std::string&& value);
  void add_name_full(const char* value);
  void add_name_full(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_full() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_full();

  // optional string label = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_label() const;
  PROTOBUF_DEPRECATED void clear_label();
  PROTOBUF_DEPRECATED const std::string& label() const;
  PROTOBUF_DEPRECATED void set_label(const std::string& value);
  PROTOBUF_DEPRECATED void set_label(std::string&& value);
  PROTOBUF_DEPRECATED void set_label(const char* value);
  PROTOBUF_DEPRECATED void set_label(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_label();
  PROTOBUF_DEPRECATED std::string* release_label();
  PROTOBUF_DEPRECATED void set_allocated_label(std::string* label);

  // optional string company_name = 6;
  bool has_company_name() const;
  void clear_company_name();
  const std::string& company_name() const;
  void set_company_name(const std::string& value);
  void set_company_name(std::string&& value);
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  std::string* mutable_company_name();
  std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);

  // optional string address_home_line1 = 7;
  bool has_address_home_line1() const;
  void clear_address_home_line1();
  const std::string& address_home_line1() const;
  void set_address_home_line1(const std::string& value);
  void set_address_home_line1(std::string&& value);
  void set_address_home_line1(const char* value);
  void set_address_home_line1(const char* value, size_t size);
  std::string* mutable_address_home_line1();
  std::string* release_address_home_line1();
  void set_allocated_address_home_line1(std::string* address_home_line1);

  // optional string address_home_line2 = 8;
  bool has_address_home_line2() const;
  void clear_address_home_line2();
  const std::string& address_home_line2() const;
  void set_address_home_line2(const std::string& value);
  void set_address_home_line2(std::string&& value);
  void set_address_home_line2(const char* value);
  void set_address_home_line2(const char* value, size_t size);
  std::string* mutable_address_home_line2();
  std::string* release_address_home_line2();
  void set_allocated_address_home_line2(std::string* address_home_line2);

  // optional string address_home_city = 9;
  bool has_address_home_city() const;
  void clear_address_home_city();
  const std::string& address_home_city() const;
  void set_address_home_city(const std::string& value);
  void set_address_home_city(std::string&& value);
  void set_address_home_city(const char* value);
  void set_address_home_city(const char* value, size_t size);
  std::string* mutable_address_home_city();
  std::string* release_address_home_city();
  void set_allocated_address_home_city(std::string* address_home_city);

  // optional string address_home_state = 10;
  bool has_address_home_state() const;
  void clear_address_home_state();
  const std::string& address_home_state() const;
  void set_address_home_state(const std::string& value);
  void set_address_home_state(std::string&& value);
  void set_address_home_state(const char* value);
  void set_address_home_state(const char* value, size_t size);
  std::string* mutable_address_home_state();
  std::string* release_address_home_state();
  void set_allocated_address_home_state(std::string* address_home_state);

  // optional string address_home_zip = 11;
  bool has_address_home_zip() const;
  void clear_address_home_zip();
  const std::string& address_home_zip() const;
  void set_address_home_zip(const std::string& value);
  void set_address_home_zip(std::string&& value);
  void set_address_home_zip(const char* value);
  void set_address_home_zip(const char* value, size_t size);
  std::string* mutable_address_home_zip();
  std::string* release_address_home_zip();
  void set_allocated_address_home_zip(std::string* address_home_zip);

  // optional string address_home_country = 12;
  bool has_address_home_country() const;
  void clear_address_home_country();
  const std::string& address_home_country() const;
  void set_address_home_country(const std::string& value);
  void set_address_home_country(std::string&& value);
  void set_address_home_country(const char* value);
  void set_address_home_country(const char* value, size_t size);
  std::string* mutable_address_home_country();
  std::string* release_address_home_country();
  void set_allocated_address_home_country(std::string* address_home_country);

  // optional string phone_fax_whole_number = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_phone_fax_whole_number() const;
  PROTOBUF_DEPRECATED void clear_phone_fax_whole_number();
  PROTOBUF_DEPRECATED const std::string& phone_fax_whole_number() const;
  PROTOBUF_DEPRECATED void set_phone_fax_whole_number(const std::string& value);
  PROTOBUF_DEPRECATED void set_phone_fax_whole_number(std::string&& value);
  PROTOBUF_DEPRECATED void set_phone_fax_whole_number(const char* value);
  PROTOBUF_DEPRECATED void set_phone_fax_whole_number(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_phone_fax_whole_number();
  PROTOBUF_DEPRECATED std::string* release_phone_fax_whole_number();
  PROTOBUF_DEPRECATED void set_allocated_phone_fax_whole_number(std::string* phone_fax_whole_number);

  // optional string guid = 15;
  bool has_guid() const;
  void clear_guid();
  const std::string& guid() const;
  void set_guid(const std::string& value);
  void set_guid(std::string&& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  std::string* mutable_guid();
  std::string* release_guid();
  void set_allocated_guid(std::string* guid);

  // optional string origin = 16;
  bool has_origin() const;
  void clear_origin();
  const std::string& origin() const;
  void set_origin(const std::string& value);
  void set_origin(std::string&& value);
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  std::string* mutable_origin();
  std::string* release_origin();
  void set_allocated_origin(std::string* origin);

  // optional string address_home_street_address = 17;
  bool has_address_home_street_address() const;
  void clear_address_home_street_address();
  const std::string& address_home_street_address() const;
  void set_address_home_street_address(const std::string& value);
  void set_address_home_street_address(std::string&& value);
  void set_address_home_street_address(const char* value);
  void set_address_home_street_address(const char* value, size_t size);
  std::string* mutable_address_home_street_address();
  std::string* release_address_home_street_address();
  void set_allocated_address_home_street_address(std::string* address_home_street_address);

  // optional string address_home_sorting_code = 18;
  bool has_address_home_sorting_code() const;
  void clear_address_home_sorting_code();
  const std::string& address_home_sorting_code() const;
  void set_address_home_sorting_code(const std::string& value);
  void set_address_home_sorting_code(std::string&& value);
  void set_address_home_sorting_code(const char* value);
  void set_address_home_sorting_code(const char* value, size_t size);
  std::string* mutable_address_home_sorting_code();
  std::string* release_address_home_sorting_code();
  void set_allocated_address_home_sorting_code(std::string* address_home_sorting_code);

  // optional string address_home_dependent_locality = 19;
  bool has_address_home_dependent_locality() const;
  void clear_address_home_dependent_locality();
  const std::string& address_home_dependent_locality() const;
  void set_address_home_dependent_locality(const std::string& value);
  void set_address_home_dependent_locality(std::string&& value);
  void set_address_home_dependent_locality(const char* value);
  void set_address_home_dependent_locality(const char* value, size_t size);
  std::string* mutable_address_home_dependent_locality();
  std::string* release_address_home_dependent_locality();
  void set_allocated_address_home_dependent_locality(std::string* address_home_dependent_locality);

  // optional string address_home_language_code = 20;
  bool has_address_home_language_code() const;
  void clear_address_home_language_code();
  const std::string& address_home_language_code() const;
  void set_address_home_language_code(const std::string& value);
  void set_address_home_language_code(std::string&& value);
  void set_address_home_language_code(const char* value);
  void set_address_home_language_code(const char* value, size_t size);
  std::string* mutable_address_home_language_code();
  std::string* release_address_home_language_code();
  void set_allocated_address_home_language_code(std::string* address_home_language_code);

  // optional int64 use_count = 22;
  bool has_use_count() const;
  void clear_use_count();
  ::PROTOBUF_NAMESPACE_ID::int64 use_count() const;
  void set_use_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 use_date = 23;
  bool has_use_date() const;
  void clear_use_date();
  ::PROTOBUF_NAMESPACE_ID::int64 use_date() const;
  void set_use_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 validity_state_bitfield = 24;
  bool has_validity_state_bitfield() const;
  void clear_validity_state_bitfield();
  ::PROTOBUF_NAMESPACE_ID::int64 validity_state_bitfield() const;
  void set_validity_state_bitfield(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool is_client_validity_states_updated = 25;
  bool has_is_client_validity_states_updated() const;
  void clear_is_client_validity_states_updated();
  bool is_client_validity_states_updated() const;
  void set_is_client_validity_states_updated(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillProfileSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_first_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_middle_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_last_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> email_address_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phone_home_whole_number_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_full_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_line1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_line2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_zip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_fax_whole_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_street_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_sorting_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_dependent_locality_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_language_code_;
  ::PROTOBUF_NAMESPACE_ID::int64 use_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 use_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 validity_state_bitfield_;
  bool is_client_validity_states_updated_;
  friend struct ::TableStruct_autofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillSpecifics) */ {
 public:
  AutofillSpecifics();
  virtual ~AutofillSpecifics();

  AutofillSpecifics(const AutofillSpecifics& from);
  AutofillSpecifics(AutofillSpecifics&& from) noexcept
    : AutofillSpecifics() {
    *this = ::std::move(from);
  }

  inline AutofillSpecifics& operator=(const AutofillSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillSpecifics& operator=(AutofillSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AutofillSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutofillSpecifics* internal_default_instance() {
    return reinterpret_cast<const AutofillSpecifics*>(
               &_AutofillSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutofillSpecifics& a, AutofillSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(AutofillSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutofillSpecifics* New() const final {
    return CreateMaybeMessage<AutofillSpecifics>(nullptr);
  }

  AutofillSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutofillSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AutofillSpecifics& from);
  void MergeFrom(const AutofillSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsageTimestampFieldNumber = 3,
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kProfileFieldNumber = 4,
  };
  // repeated int64 usage_timestamp = 3;
  int usage_timestamp_size() const;
  void clear_usage_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 usage_timestamp(int index) const;
  void set_usage_timestamp(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_usage_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      usage_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_usage_timestamp();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // optional .sync_pb.AutofillProfileSpecifics profile = 4;
  bool has_profile() const;
  void clear_profile();
  const ::sync_pb::AutofillProfileSpecifics& profile() const;
  ::sync_pb::AutofillProfileSpecifics* release_profile();
  ::sync_pb::AutofillProfileSpecifics* mutable_profile();
  void set_allocated_profile(::sync_pb::AutofillProfileSpecifics* profile);

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > usage_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::sync_pb::AutofillProfileSpecifics* profile_;
  friend struct ::TableStruct_autofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class CloudTokenData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.CloudTokenData) */ {
 public:
  CloudTokenData();
  virtual ~CloudTokenData();

  CloudTokenData(const CloudTokenData& from);
  CloudTokenData(CloudTokenData&& from) noexcept
    : CloudTokenData() {
    *this = ::std::move(from);
  }

  inline CloudTokenData& operator=(const CloudTokenData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudTokenData& operator=(CloudTokenData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CloudTokenData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudTokenData* internal_default_instance() {
    return reinterpret_cast<const CloudTokenData*>(
               &_CloudTokenData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloudTokenData& a, CloudTokenData& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudTokenData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloudTokenData* New() const final {
    return CreateMaybeMessage<CloudTokenData>(nullptr);
  }

  CloudTokenData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloudTokenData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CloudTokenData& from);
  void MergeFrom(const CloudTokenData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloudTokenData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.CloudTokenData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuffixFieldNumber = 1,
    kArtFifeUrlFieldNumber = 4,
    kInstrumentTokenFieldNumber = 5,
    kExpMonthFieldNumber = 2,
    kExpYearFieldNumber = 3,
  };
  // optional string suffix = 1;
  bool has_suffix() const;
  void clear_suffix();
  const std::string& suffix() const;
  void set_suffix(const std::string& value);
  void set_suffix(std::string&& value);
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);

  // optional string art_fife_url = 4;
  bool has_art_fife_url() const;
  void clear_art_fife_url();
  const std::string& art_fife_url() const;
  void set_art_fife_url(const std::string& value);
  void set_art_fife_url(std::string&& value);
  void set_art_fife_url(const char* value);
  void set_art_fife_url(const char* value, size_t size);
  std::string* mutable_art_fife_url();
  std::string* release_art_fife_url();
  void set_allocated_art_fife_url(std::string* art_fife_url);

  // optional string instrument_token = 5;
  bool has_instrument_token() const;
  void clear_instrument_token();
  const std::string& instrument_token() const;
  void set_instrument_token(const std::string& value);
  void set_instrument_token(std::string&& value);
  void set_instrument_token(const char* value);
  void set_instrument_token(const char* value, size_t size);
  std::string* mutable_instrument_token();
  std::string* release_instrument_token();
  void set_allocated_instrument_token(std::string* instrument_token);

  // optional int32 exp_month = 2;
  bool has_exp_month() const;
  void clear_exp_month();
  ::PROTOBUF_NAMESPACE_ID::int32 exp_month() const;
  void set_exp_month(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 exp_year = 3;
  bool has_exp_year() const;
  void clear_exp_year();
  ::PROTOBUF_NAMESPACE_ID::int32 exp_year() const;
  void set_exp_year(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.CloudTokenData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr art_fife_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_month_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_year_;
  friend struct ::TableStruct_autofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WalletMaskedCreditCard :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WalletMaskedCreditCard) */ {
 public:
  WalletMaskedCreditCard();
  virtual ~WalletMaskedCreditCard();

  WalletMaskedCreditCard(const WalletMaskedCreditCard& from);
  WalletMaskedCreditCard(WalletMaskedCreditCard&& from) noexcept
    : WalletMaskedCreditCard() {
    *this = ::std::move(from);
  }

  inline WalletMaskedCreditCard& operator=(const WalletMaskedCreditCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletMaskedCreditCard& operator=(WalletMaskedCreditCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WalletMaskedCreditCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WalletMaskedCreditCard* internal_default_instance() {
    return reinterpret_cast<const WalletMaskedCreditCard*>(
               &_WalletMaskedCreditCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WalletMaskedCreditCard& a, WalletMaskedCreditCard& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletMaskedCreditCard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalletMaskedCreditCard* New() const final {
    return CreateMaybeMessage<WalletMaskedCreditCard>(nullptr);
  }

  WalletMaskedCreditCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalletMaskedCreditCard>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WalletMaskedCreditCard& from);
  void MergeFrom(const WalletMaskedCreditCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletMaskedCreditCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WalletMaskedCreditCard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WalletMaskedCreditCard_WalletCardStatus WalletCardStatus;
  static constexpr WalletCardStatus VALID =
    WalletMaskedCreditCard_WalletCardStatus_VALID;
  static constexpr WalletCardStatus EXPIRED =
    WalletMaskedCreditCard_WalletCardStatus_EXPIRED;
  static inline bool WalletCardStatus_IsValid(int value) {
    return WalletMaskedCreditCard_WalletCardStatus_IsValid(value);
  }
  static constexpr WalletCardStatus WalletCardStatus_MIN =
    WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MIN;
  static constexpr WalletCardStatus WalletCardStatus_MAX =
    WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MAX;
  static constexpr int WalletCardStatus_ARRAYSIZE =
    WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WalletCardStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WalletCardStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WalletCardStatus_Name.");
    return WalletMaskedCreditCard_WalletCardStatus_Name(enum_t_value);
  }
  static inline bool WalletCardStatus_Parse(const std::string& name,
      WalletCardStatus* value) {
    return WalletMaskedCreditCard_WalletCardStatus_Parse(name, value);
  }

  typedef WalletMaskedCreditCard_WalletCardType WalletCardType;
  static constexpr WalletCardType UNKNOWN =
    WalletMaskedCreditCard_WalletCardType_UNKNOWN;
  static constexpr WalletCardType AMEX =
    WalletMaskedCreditCard_WalletCardType_AMEX;
  static constexpr WalletCardType DISCOVER =
    WalletMaskedCreditCard_WalletCardType_DISCOVER;
  static constexpr WalletCardType JCB =
    WalletMaskedCreditCard_WalletCardType_JCB;
  static constexpr WalletCardType MAESTRO =
    WalletMaskedCreditCard_WalletCardType_MAESTRO;
  static constexpr WalletCardType MASTER_CARD =
    WalletMaskedCreditCard_WalletCardType_MASTER_CARD;
  static constexpr WalletCardType SOLO =
    WalletMaskedCreditCard_WalletCardType_SOLO;
  static constexpr WalletCardType SWITCH =
    WalletMaskedCreditCard_WalletCardType_SWITCH;
  static constexpr WalletCardType VISA =
    WalletMaskedCreditCard_WalletCardType_VISA;
  static constexpr WalletCardType UNIONPAY =
    WalletMaskedCreditCard_WalletCardType_UNIONPAY;
  static inline bool WalletCardType_IsValid(int value) {
    return WalletMaskedCreditCard_WalletCardType_IsValid(value);
  }
  static constexpr WalletCardType WalletCardType_MIN =
    WalletMaskedCreditCard_WalletCardType_WalletCardType_MIN;
  static constexpr WalletCardType WalletCardType_MAX =
    WalletMaskedCreditCard_WalletCardType_WalletCardType_MAX;
  static constexpr int WalletCardType_ARRAYSIZE =
    WalletMaskedCreditCard_WalletCardType_WalletCardType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WalletCardType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WalletCardType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WalletCardType_Name.");
    return WalletMaskedCreditCard_WalletCardType_Name(enum_t_value);
  }
  static inline bool WalletCardType_Parse(const std::string& name,
      WalletCardType* value) {
    return WalletMaskedCreditCard_WalletCardType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameOnCardFieldNumber = 3,
    kLastFourFieldNumber = 5,
    kBillingAddressIdFieldNumber = 8,
    kBankNameFieldNumber = 10,
    kCloudTokenDataFieldNumber = 11,
    kStatusFieldNumber = 2,
    kTypeFieldNumber = 4,
    kExpMonthFieldNumber = 6,
    kExpYearFieldNumber = 7,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string name_on_card = 3;
  bool has_name_on_card() const;
  void clear_name_on_card();
  const std::string& name_on_card() const;
  void set_name_on_card(const std::string& value);
  void set_name_on_card(std::string&& value);
  void set_name_on_card(const char* value);
  void set_name_on_card(const char* value, size_t size);
  std::string* mutable_name_on_card();
  std::string* release_name_on_card();
  void set_allocated_name_on_card(std::string* name_on_card);

  // optional string last_four = 5;
  bool has_last_four() const;
  void clear_last_four();
  const std::string& last_four() const;
  void set_last_four(const std::string& value);
  void set_last_four(std::string&& value);
  void set_last_four(const char* value);
  void set_last_four(const char* value, size_t size);
  std::string* mutable_last_four();
  std::string* release_last_four();
  void set_allocated_last_four(std::string* last_four);

  // optional string billing_address_id = 8;
  bool has_billing_address_id() const;
  void clear_billing_address_id();
  const std::string& billing_address_id() const;
  void set_billing_address_id(const std::string& value);
  void set_billing_address_id(std::string&& value);
  void set_billing_address_id(const char* value);
  void set_billing_address_id(const char* value, size_t size);
  std::string* mutable_billing_address_id();
  std::string* release_billing_address_id();
  void set_allocated_billing_address_id(std::string* billing_address_id);

  // optional string bank_name = 10;
  bool has_bank_name() const;
  void clear_bank_name();
  const std::string& bank_name() const;
  void set_bank_name(const std::string& value);
  void set_bank_name(std::string&& value);
  void set_bank_name(const char* value);
  void set_bank_name(const char* value, size_t size);
  std::string* mutable_bank_name();
  std::string* release_bank_name();
  void set_allocated_bank_name(std::string* bank_name);

  // optional .sync_pb.CloudTokenData cloud_token_data = 11;
  bool has_cloud_token_data() const;
  void clear_cloud_token_data();
  const ::sync_pb::CloudTokenData& cloud_token_data() const;
  ::sync_pb::CloudTokenData* release_cloud_token_data();
  ::sync_pb::CloudTokenData* mutable_cloud_token_data();
  void set_allocated_cloud_token_data(::sync_pb::CloudTokenData* cloud_token_data);

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
  bool has_status() const;
  void clear_status();
  ::sync_pb::WalletMaskedCreditCard_WalletCardStatus status() const;
  void set_status(::sync_pb::WalletMaskedCreditCard_WalletCardStatus value);

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
  bool has_type() const;
  void clear_type();
  ::sync_pb::WalletMaskedCreditCard_WalletCardType type() const;
  void set_type(::sync_pb::WalletMaskedCreditCard_WalletCardType value);

  // optional int32 exp_month = 6;
  bool has_exp_month() const;
  void clear_exp_month();
  ::PROTOBUF_NAMESPACE_ID::int32 exp_month() const;
  void set_exp_month(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 exp_year = 7;
  bool has_exp_year() const;
  void clear_exp_year();
  ::PROTOBUF_NAMESPACE_ID::int32 exp_year() const;
  void set_exp_year(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.WalletMaskedCreditCard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_on_card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_four_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_address_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_name_;
  ::sync_pb::CloudTokenData* cloud_token_data_;
  int status_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_month_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_year_;
  friend struct ::TableStruct_autofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WalletPostalAddress :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WalletPostalAddress) */ {
 public:
  WalletPostalAddress();
  virtual ~WalletPostalAddress();

  WalletPostalAddress(const WalletPostalAddress& from);
  WalletPostalAddress(WalletPostalAddress&& from) noexcept
    : WalletPostalAddress() {
    *this = ::std::move(from);
  }

  inline WalletPostalAddress& operator=(const WalletPostalAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletPostalAddress& operator=(WalletPostalAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WalletPostalAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WalletPostalAddress* internal_default_instance() {
    return reinterpret_cast<const WalletPostalAddress*>(
               &_WalletPostalAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WalletPostalAddress& a, WalletPostalAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletPostalAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalletPostalAddress* New() const final {
    return CreateMaybeMessage<WalletPostalAddress>(nullptr);
  }

  WalletPostalAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalletPostalAddress>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WalletPostalAddress& from);
  void MergeFrom(const WalletPostalAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletPostalAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WalletPostalAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreetAddressFieldNumber = 3,
    kIdFieldNumber = 1,
    kCompanyNameFieldNumber = 2,
    kAddress1FieldNumber = 4,
    kAddress2FieldNumber = 5,
    kAddress3FieldNumber = 6,
    kAddress4FieldNumber = 7,
    kPostalCodeFieldNumber = 8,
    kSortingCodeFieldNumber = 9,
    kCountryCodeFieldNumber = 10,
    kLanguageCodeFieldNumber = 11,
    kRecipientNameFieldNumber = 12,
    kPhoneNumberFieldNumber = 13,
  };
  // repeated string street_address = 3;
  int street_address_size() const;
  void clear_street_address();
  const std::string& street_address(int index) const;
  std::string* mutable_street_address(int index);
  void set_street_address(int index, const std::string& value);
  void set_street_address(int index, std::string&& value);
  void set_street_address(int index, const char* value);
  void set_street_address(int index, const char* value, size_t size);
  std::string* add_street_address();
  void add_street_address(const std::string& value);
  void add_street_address(std::string&& value);
  void add_street_address(const char* value);
  void add_street_address(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& street_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_street_address();

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string company_name = 2;
  bool has_company_name() const;
  void clear_company_name();
  const std::string& company_name() const;
  void set_company_name(const std::string& value);
  void set_company_name(std::string&& value);
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  std::string* mutable_company_name();
  std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);

  // optional string address_1 = 4;
  bool has_address_1() const;
  void clear_address_1();
  const std::string& address_1() const;
  void set_address_1(const std::string& value);
  void set_address_1(std::string&& value);
  void set_address_1(const char* value);
  void set_address_1(const char* value, size_t size);
  std::string* mutable_address_1();
  std::string* release_address_1();
  void set_allocated_address_1(std::string* address_1);

  // optional string address_2 = 5;
  bool has_address_2() const;
  void clear_address_2();
  const std::string& address_2() const;
  void set_address_2(const std::string& value);
  void set_address_2(std::string&& value);
  void set_address_2(const char* value);
  void set_address_2(const char* value, size_t size);
  std::string* mutable_address_2();
  std::string* release_address_2();
  void set_allocated_address_2(std::string* address_2);

  // optional string address_3 = 6;
  bool has_address_3() const;
  void clear_address_3();
  const std::string& address_3() const;
  void set_address_3(const std::string& value);
  void set_address_3(std::string&& value);
  void set_address_3(const char* value);
  void set_address_3(const char* value, size_t size);
  std::string* mutable_address_3();
  std::string* release_address_3();
  void set_allocated_address_3(std::string* address_3);

  // optional string address_4 = 7;
  bool has_address_4() const;
  void clear_address_4();
  const std::string& address_4() const;
  void set_address_4(const std::string& value);
  void set_address_4(std::string&& value);
  void set_address_4(const char* value);
  void set_address_4(const char* value, size_t size);
  std::string* mutable_address_4();
  std::string* release_address_4();
  void set_allocated_address_4(std::string* address_4);

  // optional string postal_code = 8;
  bool has_postal_code() const;
  void clear_postal_code();
  const std::string& postal_code() const;
  void set_postal_code(const std::string& value);
  void set_postal_code(std::string&& value);
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  std::string* mutable_postal_code();
  std::string* release_postal_code();
  void set_allocated_postal_code(std::string* postal_code);

  // optional string sorting_code = 9;
  bool has_sorting_code() const;
  void clear_sorting_code();
  const std::string& sorting_code() const;
  void set_sorting_code(const std::string& value);
  void set_sorting_code(std::string&& value);
  void set_sorting_code(const char* value);
  void set_sorting_code(const char* value, size_t size);
  std::string* mutable_sorting_code();
  std::string* release_sorting_code();
  void set_allocated_sorting_code(std::string* sorting_code);

  // optional string country_code = 10;
  bool has_country_code() const;
  void clear_country_code();
  const std::string& country_code() const;
  void set_country_code(const std::string& value);
  void set_country_code(std::string&& value);
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  std::string* mutable_country_code();
  std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);

  // optional string language_code = 11;
  bool has_language_code() const;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);

  // optional string recipient_name = 12;
  bool has_recipient_name() const;
  void clear_recipient_name();
  const std::string& recipient_name() const;
  void set_recipient_name(const std::string& value);
  void set_recipient_name(std::string&& value);
  void set_recipient_name(const char* value);
  void set_recipient_name(const char* value, size_t size);
  std::string* mutable_recipient_name();
  std::string* release_recipient_name();
  void set_allocated_recipient_name(std::string* recipient_name);

  // optional string phone_number = 13;
  bool has_phone_number() const;
  void clear_phone_number();
  const std::string& phone_number() const;
  void set_phone_number(const std::string& value);
  void set_phone_number(std::string&& value);
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  std::string* mutable_phone_number();
  std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);

  // @@protoc_insertion_point(class_scope:sync_pb.WalletPostalAddress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> street_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sorting_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  friend struct ::TableStruct_autofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PaymentsCustomerData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PaymentsCustomerData) */ {
 public:
  PaymentsCustomerData();
  virtual ~PaymentsCustomerData();

  PaymentsCustomerData(const PaymentsCustomerData& from);
  PaymentsCustomerData(PaymentsCustomerData&& from) noexcept
    : PaymentsCustomerData() {
    *this = ::std::move(from);
  }

  inline PaymentsCustomerData& operator=(const PaymentsCustomerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentsCustomerData& operator=(PaymentsCustomerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PaymentsCustomerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaymentsCustomerData* internal_default_instance() {
    return reinterpret_cast<const PaymentsCustomerData*>(
               &_PaymentsCustomerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PaymentsCustomerData& a, PaymentsCustomerData& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentsCustomerData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentsCustomerData* New() const final {
    return CreateMaybeMessage<PaymentsCustomerData>(nullptr);
  }

  PaymentsCustomerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentsCustomerData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PaymentsCustomerData& from);
  void MergeFrom(const PaymentsCustomerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaymentsCustomerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PaymentsCustomerData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:sync_pb.PaymentsCustomerData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_autofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WalletCreditCardCloudTokenData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WalletCreditCardCloudTokenData) */ {
 public:
  WalletCreditCardCloudTokenData();
  virtual ~WalletCreditCardCloudTokenData();

  WalletCreditCardCloudTokenData(const WalletCreditCardCloudTokenData& from);
  WalletCreditCardCloudTokenData(WalletCreditCardCloudTokenData&& from) noexcept
    : WalletCreditCardCloudTokenData() {
    *this = ::std::move(from);
  }

  inline WalletCreditCardCloudTokenData& operator=(const WalletCreditCardCloudTokenData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletCreditCardCloudTokenData& operator=(WalletCreditCardCloudTokenData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WalletCreditCardCloudTokenData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WalletCreditCardCloudTokenData* internal_default_instance() {
    return reinterpret_cast<const WalletCreditCardCloudTokenData*>(
               &_WalletCreditCardCloudTokenData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WalletCreditCardCloudTokenData& a, WalletCreditCardCloudTokenData& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletCreditCardCloudTokenData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalletCreditCardCloudTokenData* New() const final {
    return CreateMaybeMessage<WalletCreditCardCloudTokenData>(nullptr);
  }

  WalletCreditCardCloudTokenData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalletCreditCardCloudTokenData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WalletCreditCardCloudTokenData& from);
  void MergeFrom(const WalletCreditCardCloudTokenData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletCreditCardCloudTokenData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WalletCreditCardCloudTokenData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskedCardIdFieldNumber = 1,
    kSuffixFieldNumber = 2,
    kArtFifeUrlFieldNumber = 5,
    kInstrumentTokenFieldNumber = 6,
    kExpMonthFieldNumber = 3,
    kExpYearFieldNumber = 4,
  };
  // optional string masked_card_id = 1;
  bool has_masked_card_id() const;
  void clear_masked_card_id();
  const std::string& masked_card_id() const;
  void set_masked_card_id(const std::string& value);
  void set_masked_card_id(std::string&& value);
  void set_masked_card_id(const char* value);
  void set_masked_card_id(const char* value, size_t size);
  std::string* mutable_masked_card_id();
  std::string* release_masked_card_id();
  void set_allocated_masked_card_id(std::string* masked_card_id);

  // optional string suffix = 2;
  bool has_suffix() const;
  void clear_suffix();
  const std::string& suffix() const;
  void set_suffix(const std::string& value);
  void set_suffix(std::string&& value);
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);

  // optional string art_fife_url = 5;
  bool has_art_fife_url() const;
  void clear_art_fife_url();
  const std::string& art_fife_url() const;
  void set_art_fife_url(const std::string& value);
  void set_art_fife_url(std::string&& value);
  void set_art_fife_url(const char* value);
  void set_art_fife_url(const char* value, size_t size);
  std::string* mutable_art_fife_url();
  std::string* release_art_fife_url();
  void set_allocated_art_fife_url(std::string* art_fife_url);

  // optional string instrument_token = 6;
  bool has_instrument_token() const;
  void clear_instrument_token();
  const std::string& instrument_token() const;
  void set_instrument_token(const std::string& value);
  void set_instrument_token(std::string&& value);
  void set_instrument_token(const char* value);
  void set_instrument_token(const char* value, size_t size);
  std::string* mutable_instrument_token();
  std::string* release_instrument_token();
  void set_allocated_instrument_token(std::string* instrument_token);

  // optional int32 exp_month = 3;
  bool has_exp_month() const;
  void clear_exp_month();
  ::PROTOBUF_NAMESPACE_ID::int32 exp_month() const;
  void set_exp_month(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 exp_year = 4;
  bool has_exp_year() const;
  void clear_exp_year();
  ::PROTOBUF_NAMESPACE_ID::int32 exp_year() const;
  void set_exp_year(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.WalletCreditCardCloudTokenData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr masked_card_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr art_fife_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_month_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_year_;
  friend struct ::TableStruct_autofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillWalletSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillWalletSpecifics) */ {
 public:
  AutofillWalletSpecifics();
  virtual ~AutofillWalletSpecifics();

  AutofillWalletSpecifics(const AutofillWalletSpecifics& from);
  AutofillWalletSpecifics(AutofillWalletSpecifics&& from) noexcept
    : AutofillWalletSpecifics() {
    *this = ::std::move(from);
  }

  inline AutofillWalletSpecifics& operator=(const AutofillWalletSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillWalletSpecifics& operator=(AutofillWalletSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AutofillWalletSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutofillWalletSpecifics* internal_default_instance() {
    return reinterpret_cast<const AutofillWalletSpecifics*>(
               &_AutofillWalletSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AutofillWalletSpecifics& a, AutofillWalletSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(AutofillWalletSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutofillWalletSpecifics* New() const final {
    return CreateMaybeMessage<AutofillWalletSpecifics>(nullptr);
  }

  AutofillWalletSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutofillWalletSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AutofillWalletSpecifics& from);
  void MergeFrom(const AutofillWalletSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillWalletSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillWalletSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutofillWalletSpecifics_WalletInfoType WalletInfoType;
  static constexpr WalletInfoType UNKNOWN =
    AutofillWalletSpecifics_WalletInfoType_UNKNOWN;
  static constexpr WalletInfoType MASKED_CREDIT_CARD =
    AutofillWalletSpecifics_WalletInfoType_MASKED_CREDIT_CARD;
  static constexpr WalletInfoType POSTAL_ADDRESS =
    AutofillWalletSpecifics_WalletInfoType_POSTAL_ADDRESS;
  static constexpr WalletInfoType CUSTOMER_DATA =
    AutofillWalletSpecifics_WalletInfoType_CUSTOMER_DATA;
  static constexpr WalletInfoType CREDIT_CARD_CLOUD_TOKEN_DATA =
    AutofillWalletSpecifics_WalletInfoType_CREDIT_CARD_CLOUD_TOKEN_DATA;
  static inline bool WalletInfoType_IsValid(int value) {
    return AutofillWalletSpecifics_WalletInfoType_IsValid(value);
  }
  static constexpr WalletInfoType WalletInfoType_MIN =
    AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MIN;
  static constexpr WalletInfoType WalletInfoType_MAX =
    AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MAX;
  static constexpr int WalletInfoType_ARRAYSIZE =
    AutofillWalletSpecifics_WalletInfoType_WalletInfoType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WalletInfoType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WalletInfoType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WalletInfoType_Name.");
    return AutofillWalletSpecifics_WalletInfoType_Name(enum_t_value);
  }
  static inline bool WalletInfoType_Parse(const std::string& name,
      WalletInfoType* value) {
    return AutofillWalletSpecifics_WalletInfoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMaskedCardFieldNumber = 2,
    kAddressFieldNumber = 3,
    kCustomerDataFieldNumber = 4,
    kCloudTokenDataFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
  bool has_masked_card() const;
  void clear_masked_card();
  const ::sync_pb::WalletMaskedCreditCard& masked_card() const;
  ::sync_pb::WalletMaskedCreditCard* release_masked_card();
  ::sync_pb::WalletMaskedCreditCard* mutable_masked_card();
  void set_allocated_masked_card(::sync_pb::WalletMaskedCreditCard* masked_card);

  // optional .sync_pb.WalletPostalAddress address = 3;
  bool has_address() const;
  void clear_address();
  const ::sync_pb::WalletPostalAddress& address() const;
  ::sync_pb::WalletPostalAddress* release_address();
  ::sync_pb::WalletPostalAddress* mutable_address();
  void set_allocated_address(::sync_pb::WalletPostalAddress* address);

  // optional .sync_pb.PaymentsCustomerData customer_data = 4;
  bool has_customer_data() const;
  void clear_customer_data();
  const ::sync_pb::PaymentsCustomerData& customer_data() const;
  ::sync_pb::PaymentsCustomerData* release_customer_data();
  ::sync_pb::PaymentsCustomerData* mutable_customer_data();
  void set_allocated_customer_data(::sync_pb::PaymentsCustomerData* customer_data);

  // optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
  bool has_cloud_token_data() const;
  void clear_cloud_token_data();
  const ::sync_pb::WalletCreditCardCloudTokenData& cloud_token_data() const;
  ::sync_pb::WalletCreditCardCloudTokenData* release_cloud_token_data();
  ::sync_pb::WalletCreditCardCloudTokenData* mutable_cloud_token_data();
  void set_allocated_cloud_token_data(::sync_pb::WalletCreditCardCloudTokenData* cloud_token_data);

  // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
  bool has_type() const;
  void clear_type();
  ::sync_pb::AutofillWalletSpecifics_WalletInfoType type() const;
  void set_type(::sync_pb::AutofillWalletSpecifics_WalletInfoType value);

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillWalletSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::WalletMaskedCreditCard* masked_card_;
  ::sync_pb::WalletPostalAddress* address_;
  ::sync_pb::PaymentsCustomerData* customer_data_;
  ::sync_pb::WalletCreditCardCloudTokenData* cloud_token_data_;
  int type_;
  friend struct ::TableStruct_autofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WalletMetadataSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WalletMetadataSpecifics) */ {
 public:
  WalletMetadataSpecifics();
  virtual ~WalletMetadataSpecifics();

  WalletMetadataSpecifics(const WalletMetadataSpecifics& from);
  WalletMetadataSpecifics(WalletMetadataSpecifics&& from) noexcept
    : WalletMetadataSpecifics() {
    *this = ::std::move(from);
  }

  inline WalletMetadataSpecifics& operator=(const WalletMetadataSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletMetadataSpecifics& operator=(WalletMetadataSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WalletMetadataSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WalletMetadataSpecifics* internal_default_instance() {
    return reinterpret_cast<const WalletMetadataSpecifics*>(
               &_WalletMetadataSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WalletMetadataSpecifics& a, WalletMetadataSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletMetadataSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalletMetadataSpecifics* New() const final {
    return CreateMaybeMessage<WalletMetadataSpecifics>(nullptr);
  }

  WalletMetadataSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalletMetadataSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WalletMetadataSpecifics& from);
  void MergeFrom(const WalletMetadataSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletMetadataSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WalletMetadataSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WalletMetadataSpecifics_Type Type;
  static constexpr Type UNKNOWN =
    WalletMetadataSpecifics_Type_UNKNOWN;
  static constexpr Type CARD =
    WalletMetadataSpecifics_Type_CARD;
  static constexpr Type ADDRESS =
    WalletMetadataSpecifics_Type_ADDRESS;
  static inline bool Type_IsValid(int value) {
    return WalletMetadataSpecifics_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    WalletMetadataSpecifics_Type_Type_MIN;
  static constexpr Type Type_MAX =
    WalletMetadataSpecifics_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    WalletMetadataSpecifics_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return WalletMetadataSpecifics_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return WalletMetadataSpecifics_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kCardBillingAddressIdFieldNumber = 5,
    kUseCountFieldNumber = 3,
    kTypeFieldNumber = 1,
    kAddressHasConvertedFieldNumber = 6,
    kUseDateFieldNumber = 4,
  };
  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string card_billing_address_id = 5;
  bool has_card_billing_address_id() const;
  void clear_card_billing_address_id();
  const std::string& card_billing_address_id() const;
  void set_card_billing_address_id(const std::string& value);
  void set_card_billing_address_id(std::string&& value);
  void set_card_billing_address_id(const char* value);
  void set_card_billing_address_id(const char* value, size_t size);
  std::string* mutable_card_billing_address_id();
  std::string* release_card_billing_address_id();
  void set_allocated_card_billing_address_id(std::string* card_billing_address_id);

  // optional int64 use_count = 3;
  bool has_use_count() const;
  void clear_use_count();
  ::PROTOBUF_NAMESPACE_ID::int64 use_count() const;
  void set_use_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
  bool has_type() const;
  void clear_type();
  ::sync_pb::WalletMetadataSpecifics_Type type() const;
  void set_type(::sync_pb::WalletMetadataSpecifics_Type value);

  // optional bool address_has_converted = 6;
  bool has_address_has_converted() const;
  void clear_address_has_converted();
  bool address_has_converted() const;
  void set_address_has_converted(bool value);

  // optional int64 use_date = 4;
  bool has_use_date() const;
  void clear_use_date();
  ::PROTOBUF_NAMESPACE_ID::int64 use_date() const;
  void set_use_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.WalletMetadataSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_billing_address_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 use_count_;
  int type_;
  bool address_has_converted_;
  ::PROTOBUF_NAMESPACE_ID::int64 use_date_;
  friend struct ::TableStruct_autofill_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutofillProfileSpecifics

// optional string guid = 15;
inline bool AutofillProfileSpecifics::has_guid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AutofillProfileSpecifics::clear_guid() {
  guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& AutofillProfileSpecifics::guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.guid)
  return guid_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.guid)
}
inline void AutofillProfileSpecifics::set_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.guid)
}
inline void AutofillProfileSpecifics::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.guid)
}
inline void AutofillProfileSpecifics::set_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.guid)
}
inline std::string* AutofillProfileSpecifics::mutable_guid() {
  _has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.guid)
  return guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.guid)
  if (!has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.guid)
}

// optional string origin = 16;
inline bool AutofillProfileSpecifics::has_origin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AutofillProfileSpecifics::clear_origin() {
  origin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& AutofillProfileSpecifics::origin() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.origin)
  return origin_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.origin)
}
inline void AutofillProfileSpecifics::set_origin(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  origin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.origin)
}
inline void AutofillProfileSpecifics::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.origin)
}
inline void AutofillProfileSpecifics::set_origin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.origin)
}
inline std::string* AutofillProfileSpecifics::mutable_origin() {
  _has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.origin)
  return origin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_origin() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.origin)
  if (!has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return origin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  origin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.origin)
}

// optional int64 use_count = 22;
inline bool AutofillProfileSpecifics::has_use_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AutofillProfileSpecifics::clear_use_count() {
  use_count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AutofillProfileSpecifics::use_count() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.use_count)
  return use_count_;
}
inline void AutofillProfileSpecifics::set_use_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  use_count_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.use_count)
}

// optional int64 use_date = 23;
inline bool AutofillProfileSpecifics::has_use_date() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AutofillProfileSpecifics::clear_use_date() {
  use_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AutofillProfileSpecifics::use_date() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.use_date)
  return use_date_;
}
inline void AutofillProfileSpecifics::set_use_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  use_date_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.use_date)
}

// repeated string name_first = 2;
inline int AutofillProfileSpecifics::name_first_size() const {
  return name_first_.size();
}
inline void AutofillProfileSpecifics::clear_name_first() {
  name_first_.Clear();
}
inline const std::string& AutofillProfileSpecifics::name_first(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_first)
  return name_first_.Get(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_first(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_first)
  return name_first_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_first(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_first)
  name_first_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_first(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_first)
  name_first_.Mutable(index)->assign(std::move(value));
}
inline void AutofillProfileSpecifics::set_name_first(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_first_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_first)
}
inline void AutofillProfileSpecifics::set_name_first(int index, const char* value, size_t size) {
  name_first_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_first)
}
inline std::string* AutofillProfileSpecifics::add_name_first() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_first)
  return name_first_.Add();
}
inline void AutofillProfileSpecifics::add_name_first(const std::string& value) {
  name_first_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_first)
}
inline void AutofillProfileSpecifics::add_name_first(std::string&& value) {
  name_first_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_first)
}
inline void AutofillProfileSpecifics::add_name_first(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_first_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_first)
}
inline void AutofillProfileSpecifics::add_name_first(const char* value, size_t size) {
  name_first_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_first)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_first() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_first)
  return name_first_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_first() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_first)
  return &name_first_;
}

// repeated string name_middle = 3;
inline int AutofillProfileSpecifics::name_middle_size() const {
  return name_middle_.size();
}
inline void AutofillProfileSpecifics::clear_name_middle() {
  name_middle_.Clear();
}
inline const std::string& AutofillProfileSpecifics::name_middle(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_middle)
  return name_middle_.Get(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_middle(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_middle)
  return name_middle_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_middle(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_middle)
  name_middle_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_middle(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_middle)
  name_middle_.Mutable(index)->assign(std::move(value));
}
inline void AutofillProfileSpecifics::set_name_middle(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_middle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline void AutofillProfileSpecifics::set_name_middle(int index, const char* value, size_t size) {
  name_middle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline std::string* AutofillProfileSpecifics::add_name_middle() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_middle)
  return name_middle_.Add();
}
inline void AutofillProfileSpecifics::add_name_middle(const std::string& value) {
  name_middle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline void AutofillProfileSpecifics::add_name_middle(std::string&& value) {
  name_middle_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline void AutofillProfileSpecifics::add_name_middle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_middle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline void AutofillProfileSpecifics::add_name_middle(const char* value, size_t size) {
  name_middle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_middle() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_middle)
  return name_middle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_middle() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_middle)
  return &name_middle_;
}

// repeated string name_last = 4;
inline int AutofillProfileSpecifics::name_last_size() const {
  return name_last_.size();
}
inline void AutofillProfileSpecifics::clear_name_last() {
  name_last_.Clear();
}
inline const std::string& AutofillProfileSpecifics::name_last(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_last)
  return name_last_.Get(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_last(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_last)
  return name_last_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_last(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last)
  name_last_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_last(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last)
  name_last_.Mutable(index)->assign(std::move(value));
}
inline void AutofillProfileSpecifics::set_name_last(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_last_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_last)
}
inline void AutofillProfileSpecifics::set_name_last(int index, const char* value, size_t size) {
  name_last_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_last)
}
inline std::string* AutofillProfileSpecifics::add_name_last() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_last)
  return name_last_.Add();
}
inline void AutofillProfileSpecifics::add_name_last(const std::string& value) {
  name_last_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last)
}
inline void AutofillProfileSpecifics::add_name_last(std::string&& value) {
  name_last_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last)
}
inline void AutofillProfileSpecifics::add_name_last(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_last_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_last)
}
inline void AutofillProfileSpecifics::add_name_last(const char* value, size_t size) {
  name_last_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_last)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_last() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_last)
  return name_last_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_last() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_last)
  return &name_last_;
}

// repeated string name_full = 21;
inline int AutofillProfileSpecifics::name_full_size() const {
  return name_full_.size();
}
inline void AutofillProfileSpecifics::clear_name_full() {
  name_full_.Clear();
}
inline const std::string& AutofillProfileSpecifics::name_full(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_full)
  return name_full_.Get(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_full(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_full)
  return name_full_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_full(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_full)
  name_full_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_name_full(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_full)
  name_full_.Mutable(index)->assign(std::move(value));
}
inline void AutofillProfileSpecifics::set_name_full(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_full_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_full)
}
inline void AutofillProfileSpecifics::set_name_full(int index, const char* value, size_t size) {
  name_full_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_full)
}
inline std::string* AutofillProfileSpecifics::add_name_full() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_full)
  return name_full_.Add();
}
inline void AutofillProfileSpecifics::add_name_full(const std::string& value) {
  name_full_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_full)
}
inline void AutofillProfileSpecifics::add_name_full(std::string&& value) {
  name_full_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_full)
}
inline void AutofillProfileSpecifics::add_name_full(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_full_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_full)
}
inline void AutofillProfileSpecifics::add_name_full(const char* value, size_t size) {
  name_full_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_full)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_full() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_full)
  return name_full_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_full() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_full)
  return &name_full_;
}

// repeated string email_address = 5;
inline int AutofillProfileSpecifics::email_address_size() const {
  return email_address_.size();
}
inline void AutofillProfileSpecifics::clear_email_address() {
  email_address_.Clear();
}
inline const std::string& AutofillProfileSpecifics::email_address(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.email_address)
  return email_address_.Get(index);
}
inline std::string* AutofillProfileSpecifics::mutable_email_address(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.email_address)
  return email_address_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_email_address(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.email_address)
  email_address_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_email_address(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.email_address)
  email_address_.Mutable(index)->assign(std::move(value));
}
inline void AutofillProfileSpecifics::set_email_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  email_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.email_address)
}
inline void AutofillProfileSpecifics::set_email_address(int index, const char* value, size_t size) {
  email_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.email_address)
}
inline std::string* AutofillProfileSpecifics::add_email_address() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.email_address)
  return email_address_.Add();
}
inline void AutofillProfileSpecifics::add_email_address(const std::string& value) {
  email_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.email_address)
}
inline void AutofillProfileSpecifics::add_email_address(std::string&& value) {
  email_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.email_address)
}
inline void AutofillProfileSpecifics::add_email_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  email_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.email_address)
}
inline void AutofillProfileSpecifics::add_email_address(const char* value, size_t size) {
  email_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.email_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::email_address() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.email_address)
  return email_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_email_address() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.email_address)
  return &email_address_;
}

// optional string company_name = 6;
inline bool AutofillProfileSpecifics::has_company_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutofillProfileSpecifics::clear_company_name() {
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AutofillProfileSpecifics::company_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.company_name)
  return company_name_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_company_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.company_name)
}
inline void AutofillProfileSpecifics::set_company_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  company_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.company_name)
}
inline void AutofillProfileSpecifics::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.company_name)
}
inline void AutofillProfileSpecifics::set_company_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.company_name)
}
inline std::string* AutofillProfileSpecifics::mutable_company_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.company_name)
  return company_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_company_name() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.company_name)
  if (!has_company_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return company_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  company_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.company_name)
}

// optional string address_home_line1 = 7;
inline bool AutofillProfileSpecifics::has_address_home_line1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutofillProfileSpecifics::clear_address_home_line1() {
  address_home_line1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AutofillProfileSpecifics::address_home_line1() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_line1)
  return address_home_line1_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_address_home_line1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  address_home_line1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_line1)
}
inline void AutofillProfileSpecifics::set_address_home_line1(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  address_home_line1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.address_home_line1)
}
inline void AutofillProfileSpecifics::set_address_home_line1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  address_home_line1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.address_home_line1)
}
inline void AutofillProfileSpecifics::set_address_home_line1(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  address_home_line1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.address_home_line1)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_line1() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_line1)
  return address_home_line1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_address_home_line1() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_line1)
  if (!has_address_home_line1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return address_home_line1_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_address_home_line1(std::string* address_home_line1) {
  if (address_home_line1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  address_home_line1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_home_line1);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_line1)
}

// optional string address_home_line2 = 8;
inline bool AutofillProfileSpecifics::has_address_home_line2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutofillProfileSpecifics::clear_address_home_line2() {
  address_home_line2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AutofillProfileSpecifics::address_home_line2() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_line2)
  return address_home_line2_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_address_home_line2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  address_home_line2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_line2)
}
inline void AutofillProfileSpecifics::set_address_home_line2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  address_home_line2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.address_home_line2)
}
inline void AutofillProfileSpecifics::set_address_home_line2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  address_home_line2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.address_home_line2)
}
inline void AutofillProfileSpecifics::set_address_home_line2(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  address_home_line2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.address_home_line2)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_line2() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_line2)
  return address_home_line2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_address_home_line2() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_line2)
  if (!has_address_home_line2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return address_home_line2_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_address_home_line2(std::string* address_home_line2) {
  if (address_home_line2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  address_home_line2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_home_line2);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_line2)
}

// optional string address_home_city = 9;
inline bool AutofillProfileSpecifics::has_address_home_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AutofillProfileSpecifics::clear_address_home_city() {
  address_home_city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AutofillProfileSpecifics::address_home_city() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_city)
  return address_home_city_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_address_home_city(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  address_home_city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_city)
}
inline void AutofillProfileSpecifics::set_address_home_city(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  address_home_city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.address_home_city)
}
inline void AutofillProfileSpecifics::set_address_home_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  address_home_city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.address_home_city)
}
inline void AutofillProfileSpecifics::set_address_home_city(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  address_home_city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.address_home_city)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_city() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_city)
  return address_home_city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_address_home_city() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_city)
  if (!has_address_home_city()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return address_home_city_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_address_home_city(std::string* address_home_city) {
  if (address_home_city != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  address_home_city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_home_city);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_city)
}

// optional string address_home_state = 10;
inline bool AutofillProfileSpecifics::has_address_home_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AutofillProfileSpecifics::clear_address_home_state() {
  address_home_state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AutofillProfileSpecifics::address_home_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_state)
  return address_home_state_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_address_home_state(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  address_home_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_state)
}
inline void AutofillProfileSpecifics::set_address_home_state(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  address_home_state_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.address_home_state)
}
inline void AutofillProfileSpecifics::set_address_home_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  address_home_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.address_home_state)
}
inline void AutofillProfileSpecifics::set_address_home_state(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  address_home_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.address_home_state)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_state() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_state)
  return address_home_state_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_address_home_state() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_state)
  if (!has_address_home_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return address_home_state_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_address_home_state(std::string* address_home_state) {
  if (address_home_state != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  address_home_state_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_home_state);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_state)
}

// optional string address_home_zip = 11;
inline bool AutofillProfileSpecifics::has_address_home_zip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AutofillProfileSpecifics::clear_address_home_zip() {
  address_home_zip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AutofillProfileSpecifics::address_home_zip() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_zip)
  return address_home_zip_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_address_home_zip(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  address_home_zip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_zip)
}
inline void AutofillProfileSpecifics::set_address_home_zip(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  address_home_zip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.address_home_zip)
}
inline void AutofillProfileSpecifics::set_address_home_zip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  address_home_zip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.address_home_zip)
}
inline void AutofillProfileSpecifics::set_address_home_zip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  address_home_zip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.address_home_zip)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_zip() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_zip)
  return address_home_zip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_address_home_zip() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_zip)
  if (!has_address_home_zip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return address_home_zip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_address_home_zip(std::string* address_home_zip) {
  if (address_home_zip != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  address_home_zip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_home_zip);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_zip)
}

// optional string address_home_country = 12;
inline bool AutofillProfileSpecifics::has_address_home_country() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AutofillProfileSpecifics::clear_address_home_country() {
  address_home_country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& AutofillProfileSpecifics::address_home_country() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_country)
  return address_home_country_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_address_home_country(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  address_home_country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_country)
}
inline void AutofillProfileSpecifics::set_address_home_country(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  address_home_country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.address_home_country)
}
inline void AutofillProfileSpecifics::set_address_home_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  address_home_country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.address_home_country)
}
inline void AutofillProfileSpecifics::set_address_home_country(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  address_home_country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.address_home_country)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_country() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_country)
  return address_home_country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_address_home_country() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_country)
  if (!has_address_home_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return address_home_country_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_address_home_country(std::string* address_home_country) {
  if (address_home_country != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  address_home_country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_home_country);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_country)
}

// optional string address_home_street_address = 17;
inline bool AutofillProfileSpecifics::has_address_home_street_address() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AutofillProfileSpecifics::clear_address_home_street_address() {
  address_home_street_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& AutofillProfileSpecifics::address_home_street_address() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_street_address)
  return address_home_street_address_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_address_home_street_address(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  address_home_street_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_street_address)
}
inline void AutofillProfileSpecifics::set_address_home_street_address(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  address_home_street_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.address_home_street_address)
}
inline void AutofillProfileSpecifics::set_address_home_street_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  address_home_street_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.address_home_street_address)
}
inline void AutofillProfileSpecifics::set_address_home_street_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  address_home_street_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.address_home_street_address)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_street_address() {
  _has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_street_address)
  return address_home_street_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_address_home_street_address() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_street_address)
  if (!has_address_home_street_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return address_home_street_address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_address_home_street_address(std::string* address_home_street_address) {
  if (address_home_street_address != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  address_home_street_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_home_street_address);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_street_address)
}

// optional string address_home_sorting_code = 18;
inline bool AutofillProfileSpecifics::has_address_home_sorting_code() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AutofillProfileSpecifics::clear_address_home_sorting_code() {
  address_home_sorting_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_sorting_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
  return address_home_sorting_code_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_address_home_sorting_code(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  address_home_sorting_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
}
inline void AutofillProfileSpecifics::set_address_home_sorting_code(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  address_home_sorting_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
}
inline void AutofillProfileSpecifics::set_address_home_sorting_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  address_home_sorting_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
}
inline void AutofillProfileSpecifics::set_address_home_sorting_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  address_home_sorting_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_sorting_code() {
  _has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
  return address_home_sorting_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_address_home_sorting_code() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
  if (!has_address_home_sorting_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return address_home_sorting_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_address_home_sorting_code(std::string* address_home_sorting_code) {
  if (address_home_sorting_code != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  address_home_sorting_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_home_sorting_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
}

// optional string address_home_dependent_locality = 19;
inline bool AutofillProfileSpecifics::has_address_home_dependent_locality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AutofillProfileSpecifics::clear_address_home_dependent_locality() {
  address_home_dependent_locality_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_dependent_locality() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
  return address_home_dependent_locality_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_address_home_dependent_locality(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  address_home_dependent_locality_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
}
inline void AutofillProfileSpecifics::set_address_home_dependent_locality(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  address_home_dependent_locality_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
}
inline void AutofillProfileSpecifics::set_address_home_dependent_locality(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  address_home_dependent_locality_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
}
inline void AutofillProfileSpecifics::set_address_home_dependent_locality(const char* value, size_t size) {
  _has_bits_[0] |= 0x00002000u;
  address_home_dependent_locality_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_dependent_locality() {
  _has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
  return address_home_dependent_locality_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_address_home_dependent_locality() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
  if (!has_address_home_dependent_locality()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return address_home_dependent_locality_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_address_home_dependent_locality(std::string* address_home_dependent_locality) {
  if (address_home_dependent_locality != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  address_home_dependent_locality_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_home_dependent_locality);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
}

// optional string address_home_language_code = 20;
inline bool AutofillProfileSpecifics::has_address_home_language_code() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AutofillProfileSpecifics::clear_address_home_language_code() {
  address_home_language_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_language_code)
  return address_home_language_code_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_address_home_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  address_home_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_language_code)
}
inline void AutofillProfileSpecifics::set_address_home_language_code(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  address_home_language_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.address_home_language_code)
}
inline void AutofillProfileSpecifics::set_address_home_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  address_home_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.address_home_language_code)
}
inline void AutofillProfileSpecifics::set_address_home_language_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00004000u;
  address_home_language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.address_home_language_code)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_language_code() {
  _has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_language_code)
  return address_home_language_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_address_home_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_language_code)
  if (!has_address_home_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return address_home_language_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_address_home_language_code(std::string* address_home_language_code) {
  if (address_home_language_code != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  address_home_language_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_home_language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_language_code)
}

// repeated string phone_home_whole_number = 13;
inline int AutofillProfileSpecifics::phone_home_whole_number_size() const {
  return phone_home_whole_number_.size();
}
inline void AutofillProfileSpecifics::clear_phone_home_whole_number() {
  phone_home_whole_number_.Clear();
}
inline const std::string& AutofillProfileSpecifics::phone_home_whole_number(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  return phone_home_whole_number_.Get(index);
}
inline std::string* AutofillProfileSpecifics::mutable_phone_home_whole_number(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  return phone_home_whole_number_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  phone_home_whole_number_.Mutable(index)->assign(value);
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  phone_home_whole_number_.Mutable(index)->assign(std::move(value));
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phone_home_whole_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, const char* value, size_t size) {
  phone_home_whole_number_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline std::string* AutofillProfileSpecifics::add_phone_home_whole_number() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  return phone_home_whole_number_.Add();
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(const std::string& value) {
  phone_home_whole_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(std::string&& value) {
  phone_home_whole_number_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phone_home_whole_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(const char* value, size_t size) {
  phone_home_whole_number_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::phone_home_whole_number() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  return phone_home_whole_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_phone_home_whole_number() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  return &phone_home_whole_number_;
}

// optional int64 validity_state_bitfield = 24;
inline bool AutofillProfileSpecifics::has_validity_state_bitfield() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AutofillProfileSpecifics::clear_validity_state_bitfield() {
  validity_state_bitfield_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AutofillProfileSpecifics::validity_state_bitfield() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.validity_state_bitfield)
  return validity_state_bitfield_;
}
inline void AutofillProfileSpecifics::set_validity_state_bitfield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  validity_state_bitfield_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.validity_state_bitfield)
}

// optional bool is_client_validity_states_updated = 25;
inline bool AutofillProfileSpecifics::has_is_client_validity_states_updated() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AutofillProfileSpecifics::clear_is_client_validity_states_updated() {
  is_client_validity_states_updated_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool AutofillProfileSpecifics::is_client_validity_states_updated() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.is_client_validity_states_updated)
  return is_client_validity_states_updated_;
}
inline void AutofillProfileSpecifics::set_is_client_validity_states_updated(bool value) {
  _has_bits_[0] |= 0x00040000u;
  is_client_validity_states_updated_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.is_client_validity_states_updated)
}

// optional string label = 1 [deprecated = true];
inline bool AutofillProfileSpecifics::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutofillProfileSpecifics::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillProfileSpecifics::label() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.label)
  return label_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.label)
}
inline void AutofillProfileSpecifics::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.label)
}
inline void AutofillProfileSpecifics::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.label)
}
inline void AutofillProfileSpecifics::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.label)
}
inline std::string* AutofillProfileSpecifics::mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_label() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.label)
  if (!has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.label)
}

// optional string phone_fax_whole_number = 14 [deprecated = true];
inline bool AutofillProfileSpecifics::has_phone_fax_whole_number() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AutofillProfileSpecifics::clear_phone_fax_whole_number() {
  phone_fax_whole_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& AutofillProfileSpecifics::phone_fax_whole_number() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
  return phone_fax_whole_number_.GetNoArena();
}
inline void AutofillProfileSpecifics::set_phone_fax_whole_number(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  phone_fax_whole_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
}
inline void AutofillProfileSpecifics::set_phone_fax_whole_number(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  phone_fax_whole_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
}
inline void AutofillProfileSpecifics::set_phone_fax_whole_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  phone_fax_whole_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
}
inline void AutofillProfileSpecifics::set_phone_fax_whole_number(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  phone_fax_whole_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
}
inline std::string* AutofillProfileSpecifics::mutable_phone_fax_whole_number() {
  _has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
  return phone_fax_whole_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillProfileSpecifics::release_phone_fax_whole_number() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
  if (!has_phone_fax_whole_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return phone_fax_whole_number_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillProfileSpecifics::set_allocated_phone_fax_whole_number(std::string* phone_fax_whole_number) {
  if (phone_fax_whole_number != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  phone_fax_whole_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_fax_whole_number);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
}

// -------------------------------------------------------------------

// AutofillSpecifics

// optional string name = 1;
inline bool AutofillSpecifics::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutofillSpecifics::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillSpecifics::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillSpecifics.name)
  return name_.GetNoArena();
}
inline void AutofillSpecifics::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillSpecifics.name)
}
inline void AutofillSpecifics::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillSpecifics.name)
}
inline void AutofillSpecifics::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillSpecifics.name)
}
inline void AutofillSpecifics::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillSpecifics.name)
}
inline std::string* AutofillSpecifics::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillSpecifics.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillSpecifics::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillSpecifics.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillSpecifics::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillSpecifics.name)
}

// optional string value = 2;
inline bool AutofillSpecifics::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutofillSpecifics::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AutofillSpecifics::value() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillSpecifics.value)
  return value_.GetNoArena();
}
inline void AutofillSpecifics::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillSpecifics.value)
}
inline void AutofillSpecifics::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AutofillSpecifics.value)
}
inline void AutofillSpecifics::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillSpecifics.value)
}
inline void AutofillSpecifics::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillSpecifics.value)
}
inline std::string* AutofillSpecifics::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillSpecifics.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AutofillSpecifics::release_value() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillSpecifics.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AutofillSpecifics::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillSpecifics.value)
}

// repeated int64 usage_timestamp = 3;
inline int AutofillSpecifics::usage_timestamp_size() const {
  return usage_timestamp_.size();
}
inline void AutofillSpecifics::clear_usage_timestamp() {
  usage_timestamp_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AutofillSpecifics::usage_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillSpecifics.usage_timestamp)
  return usage_timestamp_.Get(index);
}
inline void AutofillSpecifics::set_usage_timestamp(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  usage_timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillSpecifics.usage_timestamp)
}
inline void AutofillSpecifics::add_usage_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  usage_timestamp_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillSpecifics.usage_timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AutofillSpecifics::usage_timestamp() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillSpecifics.usage_timestamp)
  return usage_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AutofillSpecifics::mutable_usage_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillSpecifics.usage_timestamp)
  return &usage_timestamp_;
}

// optional .sync_pb.AutofillProfileSpecifics profile = 4;
inline bool AutofillSpecifics::has_profile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutofillSpecifics::clear_profile() {
  if (profile_ != nullptr) profile_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::AutofillProfileSpecifics& AutofillSpecifics::profile() const {
  const ::sync_pb::AutofillProfileSpecifics* p = profile_;
  // @@protoc_insertion_point(field_get:sync_pb.AutofillSpecifics.profile)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::AutofillProfileSpecifics*>(
      &::sync_pb::_AutofillProfileSpecifics_default_instance_);
}
inline ::sync_pb::AutofillProfileSpecifics* AutofillSpecifics::release_profile() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillSpecifics.profile)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::AutofillProfileSpecifics* temp = profile_;
  profile_ = nullptr;
  return temp;
}
inline ::sync_pb::AutofillProfileSpecifics* AutofillSpecifics::mutable_profile() {
  _has_bits_[0] |= 0x00000004u;
  if (profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::AutofillProfileSpecifics>(GetArenaNoVirtual());
    profile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillSpecifics.profile)
  return profile_;
}
inline void AutofillSpecifics::set_allocated_profile(::sync_pb::AutofillProfileSpecifics* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete profile_;
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillSpecifics.profile)
}

// -------------------------------------------------------------------

// CloudTokenData

// optional string suffix = 1;
inline bool CloudTokenData::has_suffix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloudTokenData::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloudTokenData::suffix() const {
  // @@protoc_insertion_point(field_get:sync_pb.CloudTokenData.suffix)
  return suffix_.GetNoArena();
}
inline void CloudTokenData::set_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CloudTokenData.suffix)
}
inline void CloudTokenData::set_suffix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  suffix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CloudTokenData.suffix)
}
inline void CloudTokenData::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CloudTokenData.suffix)
}
inline void CloudTokenData::set_suffix(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CloudTokenData.suffix)
}
inline std::string* CloudTokenData::mutable_suffix() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.CloudTokenData.suffix)
  return suffix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloudTokenData::release_suffix() {
  // @@protoc_insertion_point(field_release:sync_pb.CloudTokenData.suffix)
  if (!has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return suffix_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloudTokenData::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  suffix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CloudTokenData.suffix)
}

// optional int32 exp_month = 2;
inline bool CloudTokenData::has_exp_month() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloudTokenData::clear_exp_month() {
  exp_month_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloudTokenData::exp_month() const {
  // @@protoc_insertion_point(field_get:sync_pb.CloudTokenData.exp_month)
  return exp_month_;
}
inline void CloudTokenData::set_exp_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  exp_month_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CloudTokenData.exp_month)
}

// optional int32 exp_year = 3;
inline bool CloudTokenData::has_exp_year() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloudTokenData::clear_exp_year() {
  exp_year_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloudTokenData::exp_year() const {
  // @@protoc_insertion_point(field_get:sync_pb.CloudTokenData.exp_year)
  return exp_year_;
}
inline void CloudTokenData::set_exp_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  exp_year_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.CloudTokenData.exp_year)
}

// optional string art_fife_url = 4;
inline bool CloudTokenData::has_art_fife_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloudTokenData::clear_art_fife_url() {
  art_fife_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CloudTokenData::art_fife_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.CloudTokenData.art_fife_url)
  return art_fife_url_.GetNoArena();
}
inline void CloudTokenData::set_art_fife_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  art_fife_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CloudTokenData.art_fife_url)
}
inline void CloudTokenData::set_art_fife_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  art_fife_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CloudTokenData.art_fife_url)
}
inline void CloudTokenData::set_art_fife_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  art_fife_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CloudTokenData.art_fife_url)
}
inline void CloudTokenData::set_art_fife_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  art_fife_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CloudTokenData.art_fife_url)
}
inline std::string* CloudTokenData::mutable_art_fife_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.CloudTokenData.art_fife_url)
  return art_fife_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloudTokenData::release_art_fife_url() {
  // @@protoc_insertion_point(field_release:sync_pb.CloudTokenData.art_fife_url)
  if (!has_art_fife_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return art_fife_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloudTokenData::set_allocated_art_fife_url(std::string* art_fife_url) {
  if (art_fife_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  art_fife_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), art_fife_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CloudTokenData.art_fife_url)
}

// optional string instrument_token = 5;
inline bool CloudTokenData::has_instrument_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloudTokenData::clear_instrument_token() {
  instrument_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CloudTokenData::instrument_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.CloudTokenData.instrument_token)
  return instrument_token_.GetNoArena();
}
inline void CloudTokenData::set_instrument_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  instrument_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.CloudTokenData.instrument_token)
}
inline void CloudTokenData::set_instrument_token(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  instrument_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.CloudTokenData.instrument_token)
}
inline void CloudTokenData::set_instrument_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  instrument_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.CloudTokenData.instrument_token)
}
inline void CloudTokenData::set_instrument_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  instrument_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.CloudTokenData.instrument_token)
}
inline std::string* CloudTokenData::mutable_instrument_token() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.CloudTokenData.instrument_token)
  return instrument_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloudTokenData::release_instrument_token() {
  // @@protoc_insertion_point(field_release:sync_pb.CloudTokenData.instrument_token)
  if (!has_instrument_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return instrument_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloudTokenData::set_allocated_instrument_token(std::string* instrument_token) {
  if (instrument_token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  instrument_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_token);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CloudTokenData.instrument_token)
}

// -------------------------------------------------------------------

// WalletMaskedCreditCard

// optional string id = 1;
inline bool WalletMaskedCreditCard::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WalletMaskedCreditCard::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WalletMaskedCreditCard::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.id)
  return id_.GetNoArena();
}
inline void WalletMaskedCreditCard::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.id)
}
inline void WalletMaskedCreditCard::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletMaskedCreditCard.id)
}
inline void WalletMaskedCreditCard::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletMaskedCreditCard.id)
}
inline void WalletMaskedCreditCard::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletMaskedCreditCard.id)
}
inline std::string* WalletMaskedCreditCard::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletMaskedCreditCard::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletMaskedCreditCard::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.id)
}

// optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
inline bool WalletMaskedCreditCard::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WalletMaskedCreditCard::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::sync_pb::WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.status)
  return static_cast< ::sync_pb::WalletMaskedCreditCard_WalletCardStatus >(status_);
}
inline void WalletMaskedCreditCard::set_status(::sync_pb::WalletMaskedCreditCard_WalletCardStatus value) {
  assert(::sync_pb::WalletMaskedCreditCard_WalletCardStatus_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.status)
}

// optional string name_on_card = 3;
inline bool WalletMaskedCreditCard::has_name_on_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WalletMaskedCreditCard::clear_name_on_card() {
  name_on_card_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WalletMaskedCreditCard::name_on_card() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.name_on_card)
  return name_on_card_.GetNoArena();
}
inline void WalletMaskedCreditCard::set_name_on_card(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_on_card_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.name_on_card)
}
inline void WalletMaskedCreditCard::set_name_on_card(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_on_card_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletMaskedCreditCard.name_on_card)
}
inline void WalletMaskedCreditCard::set_name_on_card(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_on_card_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletMaskedCreditCard.name_on_card)
}
inline void WalletMaskedCreditCard::set_name_on_card(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_on_card_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletMaskedCreditCard.name_on_card)
}
inline std::string* WalletMaskedCreditCard::mutable_name_on_card() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.name_on_card)
  return name_on_card_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletMaskedCreditCard::release_name_on_card() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.name_on_card)
  if (!has_name_on_card()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_on_card_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletMaskedCreditCard::set_allocated_name_on_card(std::string* name_on_card) {
  if (name_on_card != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_on_card_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_on_card);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.name_on_card)
}

// optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
inline bool WalletMaskedCreditCard::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WalletMaskedCreditCard::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::sync_pb::WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.type)
  return static_cast< ::sync_pb::WalletMaskedCreditCard_WalletCardType >(type_);
}
inline void WalletMaskedCreditCard::set_type(::sync_pb::WalletMaskedCreditCard_WalletCardType value) {
  assert(::sync_pb::WalletMaskedCreditCard_WalletCardType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.type)
}

// optional string last_four = 5;
inline bool WalletMaskedCreditCard::has_last_four() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WalletMaskedCreditCard::clear_last_four() {
  last_four_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WalletMaskedCreditCard::last_four() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.last_four)
  return last_four_.GetNoArena();
}
inline void WalletMaskedCreditCard::set_last_four(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  last_four_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.last_four)
}
inline void WalletMaskedCreditCard::set_last_four(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  last_four_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletMaskedCreditCard.last_four)
}
inline void WalletMaskedCreditCard::set_last_four(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  last_four_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletMaskedCreditCard.last_four)
}
inline void WalletMaskedCreditCard::set_last_four(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  last_four_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletMaskedCreditCard.last_four)
}
inline std::string* WalletMaskedCreditCard::mutable_last_four() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.last_four)
  return last_four_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletMaskedCreditCard::release_last_four() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.last_four)
  if (!has_last_four()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return last_four_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletMaskedCreditCard::set_allocated_last_four(std::string* last_four) {
  if (last_four != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  last_four_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_four);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.last_four)
}

// optional int32 exp_month = 6;
inline bool WalletMaskedCreditCard::has_exp_month() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WalletMaskedCreditCard::clear_exp_month() {
  exp_month_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WalletMaskedCreditCard::exp_month() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.exp_month)
  return exp_month_;
}
inline void WalletMaskedCreditCard::set_exp_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  exp_month_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.exp_month)
}

// optional int32 exp_year = 7;
inline bool WalletMaskedCreditCard::has_exp_year() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WalletMaskedCreditCard::clear_exp_year() {
  exp_year_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WalletMaskedCreditCard::exp_year() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.exp_year)
  return exp_year_;
}
inline void WalletMaskedCreditCard::set_exp_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  exp_year_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.exp_year)
}

// optional string billing_address_id = 8;
inline bool WalletMaskedCreditCard::has_billing_address_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WalletMaskedCreditCard::clear_billing_address_id() {
  billing_address_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WalletMaskedCreditCard::billing_address_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.billing_address_id)
  return billing_address_id_.GetNoArena();
}
inline void WalletMaskedCreditCard::set_billing_address_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  billing_address_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.billing_address_id)
}
inline void WalletMaskedCreditCard::set_billing_address_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  billing_address_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletMaskedCreditCard.billing_address_id)
}
inline void WalletMaskedCreditCard::set_billing_address_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  billing_address_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletMaskedCreditCard.billing_address_id)
}
inline void WalletMaskedCreditCard::set_billing_address_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  billing_address_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletMaskedCreditCard.billing_address_id)
}
inline std::string* WalletMaskedCreditCard::mutable_billing_address_id() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.billing_address_id)
  return billing_address_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletMaskedCreditCard::release_billing_address_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.billing_address_id)
  if (!has_billing_address_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return billing_address_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletMaskedCreditCard::set_allocated_billing_address_id(std::string* billing_address_id) {
  if (billing_address_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  billing_address_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), billing_address_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.billing_address_id)
}

// optional string bank_name = 10;
inline bool WalletMaskedCreditCard::has_bank_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WalletMaskedCreditCard::clear_bank_name() {
  bank_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& WalletMaskedCreditCard::bank_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.bank_name)
  return bank_name_.GetNoArena();
}
inline void WalletMaskedCreditCard::set_bank_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  bank_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.bank_name)
}
inline void WalletMaskedCreditCard::set_bank_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  bank_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletMaskedCreditCard.bank_name)
}
inline void WalletMaskedCreditCard::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  bank_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletMaskedCreditCard.bank_name)
}
inline void WalletMaskedCreditCard::set_bank_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  bank_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletMaskedCreditCard.bank_name)
}
inline std::string* WalletMaskedCreditCard::mutable_bank_name() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.bank_name)
  return bank_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletMaskedCreditCard::release_bank_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.bank_name)
  if (!has_bank_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return bank_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletMaskedCreditCard::set_allocated_bank_name(std::string* bank_name) {
  if (bank_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bank_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.bank_name)
}

// optional .sync_pb.CloudTokenData cloud_token_data = 11;
inline bool WalletMaskedCreditCard::has_cloud_token_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WalletMaskedCreditCard::clear_cloud_token_data() {
  if (cloud_token_data_ != nullptr) cloud_token_data_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::sync_pb::CloudTokenData& WalletMaskedCreditCard::cloud_token_data() const {
  const ::sync_pb::CloudTokenData* p = cloud_token_data_;
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.cloud_token_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::CloudTokenData*>(
      &::sync_pb::_CloudTokenData_default_instance_);
}
inline ::sync_pb::CloudTokenData* WalletMaskedCreditCard::release_cloud_token_data() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.cloud_token_data)
  _has_bits_[0] &= ~0x00000020u;
  ::sync_pb::CloudTokenData* temp = cloud_token_data_;
  cloud_token_data_ = nullptr;
  return temp;
}
inline ::sync_pb::CloudTokenData* WalletMaskedCreditCard::mutable_cloud_token_data() {
  _has_bits_[0] |= 0x00000020u;
  if (cloud_token_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::CloudTokenData>(GetArenaNoVirtual());
    cloud_token_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.cloud_token_data)
  return cloud_token_data_;
}
inline void WalletMaskedCreditCard::set_allocated_cloud_token_data(::sync_pb::CloudTokenData* cloud_token_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cloud_token_data_;
  }
  if (cloud_token_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cloud_token_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud_token_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  cloud_token_data_ = cloud_token_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.cloud_token_data)
}

// -------------------------------------------------------------------

// WalletPostalAddress

// optional string id = 1;
inline bool WalletPostalAddress::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WalletPostalAddress::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WalletPostalAddress::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.id)
  return id_.GetNoArena();
}
inline void WalletPostalAddress::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.id)
}
inline void WalletPostalAddress::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.id)
}
inline void WalletPostalAddress::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.id)
}
inline void WalletPostalAddress::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.id)
}
inline std::string* WalletPostalAddress::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.id)
}

// optional string recipient_name = 12;
inline bool WalletPostalAddress::has_recipient_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WalletPostalAddress::clear_recipient_name() {
  recipient_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& WalletPostalAddress::recipient_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.recipient_name)
  return recipient_name_.GetNoArena();
}
inline void WalletPostalAddress::set_recipient_name(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  recipient_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.recipient_name)
}
inline void WalletPostalAddress::set_recipient_name(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  recipient_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.recipient_name)
}
inline void WalletPostalAddress::set_recipient_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  recipient_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.recipient_name)
}
inline void WalletPostalAddress::set_recipient_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  recipient_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.recipient_name)
}
inline std::string* WalletPostalAddress::mutable_recipient_name() {
  _has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.recipient_name)
  return recipient_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_recipient_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.recipient_name)
  if (!has_recipient_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return recipient_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_recipient_name(std::string* recipient_name) {
  if (recipient_name != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  recipient_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.recipient_name)
}

// optional string company_name = 2;
inline bool WalletPostalAddress::has_company_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WalletPostalAddress::clear_company_name() {
  company_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WalletPostalAddress::company_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.company_name)
  return company_name_.GetNoArena();
}
inline void WalletPostalAddress::set_company_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.company_name)
}
inline void WalletPostalAddress::set_company_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  company_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.company_name)
}
inline void WalletPostalAddress::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.company_name)
}
inline void WalletPostalAddress::set_company_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  company_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.company_name)
}
inline std::string* WalletPostalAddress::mutable_company_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.company_name)
  return company_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_company_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.company_name)
  if (!has_company_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return company_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  company_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.company_name)
}

// repeated string street_address = 3;
inline int WalletPostalAddress::street_address_size() const {
  return street_address_.size();
}
inline void WalletPostalAddress::clear_street_address() {
  street_address_.Clear();
}
inline const std::string& WalletPostalAddress::street_address(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.street_address)
  return street_address_.Get(index);
}
inline std::string* WalletPostalAddress::mutable_street_address(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.street_address)
  return street_address_.Mutable(index);
}
inline void WalletPostalAddress::set_street_address(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.street_address)
  street_address_.Mutable(index)->assign(value);
}
inline void WalletPostalAddress::set_street_address(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.street_address)
  street_address_.Mutable(index)->assign(std::move(value));
}
inline void WalletPostalAddress::set_street_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  street_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.street_address)
}
inline void WalletPostalAddress::set_street_address(int index, const char* value, size_t size) {
  street_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.street_address)
}
inline std::string* WalletPostalAddress::add_street_address() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.WalletPostalAddress.street_address)
  return street_address_.Add();
}
inline void WalletPostalAddress::add_street_address(const std::string& value) {
  street_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.WalletPostalAddress.street_address)
}
inline void WalletPostalAddress::add_street_address(std::string&& value) {
  street_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.WalletPostalAddress.street_address)
}
inline void WalletPostalAddress::add_street_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  street_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.WalletPostalAddress.street_address)
}
inline void WalletPostalAddress::add_street_address(const char* value, size_t size) {
  street_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.WalletPostalAddress.street_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WalletPostalAddress::street_address() const {
  // @@protoc_insertion_point(field_list:sync_pb.WalletPostalAddress.street_address)
  return street_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WalletPostalAddress::mutable_street_address() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WalletPostalAddress.street_address)
  return &street_address_;
}

// optional string address_1 = 4;
inline bool WalletPostalAddress::has_address_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WalletPostalAddress::clear_address_1() {
  address_1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WalletPostalAddress::address_1() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.address_1)
  return address_1_.GetNoArena();
}
inline void WalletPostalAddress::set_address_1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  address_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.address_1)
}
inline void WalletPostalAddress::set_address_1(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  address_1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.address_1)
}
inline void WalletPostalAddress::set_address_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  address_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.address_1)
}
inline void WalletPostalAddress::set_address_1(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  address_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.address_1)
}
inline std::string* WalletPostalAddress::mutable_address_1() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.address_1)
  return address_1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_address_1() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.address_1)
  if (!has_address_1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return address_1_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_address_1(std::string* address_1) {
  if (address_1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  address_1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_1);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.address_1)
}

// optional string address_2 = 5;
inline bool WalletPostalAddress::has_address_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WalletPostalAddress::clear_address_2() {
  address_2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WalletPostalAddress::address_2() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.address_2)
  return address_2_.GetNoArena();
}
inline void WalletPostalAddress::set_address_2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  address_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.address_2)
}
inline void WalletPostalAddress::set_address_2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  address_2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.address_2)
}
inline void WalletPostalAddress::set_address_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  address_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.address_2)
}
inline void WalletPostalAddress::set_address_2(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  address_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.address_2)
}
inline std::string* WalletPostalAddress::mutable_address_2() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.address_2)
  return address_2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_address_2() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.address_2)
  if (!has_address_2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return address_2_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_address_2(std::string* address_2) {
  if (address_2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  address_2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_2);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.address_2)
}

// optional string address_3 = 6;
inline bool WalletPostalAddress::has_address_3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WalletPostalAddress::clear_address_3() {
  address_3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& WalletPostalAddress::address_3() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.address_3)
  return address_3_.GetNoArena();
}
inline void WalletPostalAddress::set_address_3(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  address_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.address_3)
}
inline void WalletPostalAddress::set_address_3(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  address_3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.address_3)
}
inline void WalletPostalAddress::set_address_3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  address_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.address_3)
}
inline void WalletPostalAddress::set_address_3(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  address_3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.address_3)
}
inline std::string* WalletPostalAddress::mutable_address_3() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.address_3)
  return address_3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_address_3() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.address_3)
  if (!has_address_3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return address_3_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_address_3(std::string* address_3) {
  if (address_3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  address_3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_3);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.address_3)
}

// optional string address_4 = 7;
inline bool WalletPostalAddress::has_address_4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WalletPostalAddress::clear_address_4() {
  address_4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& WalletPostalAddress::address_4() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.address_4)
  return address_4_.GetNoArena();
}
inline void WalletPostalAddress::set_address_4(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  address_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.address_4)
}
inline void WalletPostalAddress::set_address_4(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  address_4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.address_4)
}
inline void WalletPostalAddress::set_address_4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  address_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.address_4)
}
inline void WalletPostalAddress::set_address_4(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  address_4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.address_4)
}
inline std::string* WalletPostalAddress::mutable_address_4() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.address_4)
  return address_4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_address_4() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.address_4)
  if (!has_address_4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return address_4_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_address_4(std::string* address_4) {
  if (address_4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  address_4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_4);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.address_4)
}

// optional string postal_code = 8;
inline bool WalletPostalAddress::has_postal_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WalletPostalAddress::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& WalletPostalAddress::postal_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.postal_code)
  return postal_code_.GetNoArena();
}
inline void WalletPostalAddress::set_postal_code(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.postal_code)
}
inline void WalletPostalAddress::set_postal_code(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  postal_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.postal_code)
}
inline void WalletPostalAddress::set_postal_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.postal_code)
}
inline void WalletPostalAddress::set_postal_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.postal_code)
}
inline std::string* WalletPostalAddress::mutable_postal_code() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.postal_code)
  return postal_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_postal_code() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.postal_code)
  if (!has_postal_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return postal_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_postal_code(std::string* postal_code) {
  if (postal_code != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  postal_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.postal_code)
}

// optional string sorting_code = 9;
inline bool WalletPostalAddress::has_sorting_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WalletPostalAddress::clear_sorting_code() {
  sorting_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& WalletPostalAddress::sorting_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.sorting_code)
  return sorting_code_.GetNoArena();
}
inline void WalletPostalAddress::set_sorting_code(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  sorting_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.sorting_code)
}
inline void WalletPostalAddress::set_sorting_code(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  sorting_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.sorting_code)
}
inline void WalletPostalAddress::set_sorting_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  sorting_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.sorting_code)
}
inline void WalletPostalAddress::set_sorting_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  sorting_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.sorting_code)
}
inline std::string* WalletPostalAddress::mutable_sorting_code() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.sorting_code)
  return sorting_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_sorting_code() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.sorting_code)
  if (!has_sorting_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return sorting_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_sorting_code(std::string* sorting_code) {
  if (sorting_code != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sorting_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sorting_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.sorting_code)
}

// optional string country_code = 10;
inline bool WalletPostalAddress::has_country_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WalletPostalAddress::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& WalletPostalAddress::country_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.country_code)
  return country_code_.GetNoArena();
}
inline void WalletPostalAddress::set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.country_code)
}
inline void WalletPostalAddress::set_country_code(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  country_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.country_code)
}
inline void WalletPostalAddress::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.country_code)
}
inline void WalletPostalAddress::set_country_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.country_code)
}
inline std::string* WalletPostalAddress::mutable_country_code() {
  _has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.country_code)
  return country_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_country_code() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.country_code)
  if (!has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return country_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  country_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.country_code)
}

// optional string language_code = 11;
inline bool WalletPostalAddress::has_language_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WalletPostalAddress::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& WalletPostalAddress::language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.language_code)
  return language_code_.GetNoArena();
}
inline void WalletPostalAddress::set_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.language_code)
}
inline void WalletPostalAddress::set_language_code(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  language_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.language_code)
}
inline void WalletPostalAddress::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.language_code)
}
inline void WalletPostalAddress::set_language_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  language_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.language_code)
}
inline std::string* WalletPostalAddress::mutable_language_code() {
  _has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.language_code)
  return language_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.language_code)
  if (!has_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return language_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  language_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.language_code)
}

// optional string phone_number = 13;
inline bool WalletPostalAddress::has_phone_number() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WalletPostalAddress::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& WalletPostalAddress::phone_number() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.phone_number)
  return phone_number_.GetNoArena();
}
inline void WalletPostalAddress::set_phone_number(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.phone_number)
}
inline void WalletPostalAddress::set_phone_number(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  phone_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletPostalAddress.phone_number)
}
inline void WalletPostalAddress::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.phone_number)
}
inline void WalletPostalAddress::set_phone_number(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.phone_number)
}
inline std::string* WalletPostalAddress::mutable_phone_number() {
  _has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.phone_number)
  return phone_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletPostalAddress::release_phone_number() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.phone_number)
  if (!has_phone_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return phone_number_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletPostalAddress::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  phone_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.phone_number)
}

// -------------------------------------------------------------------

// PaymentsCustomerData

// optional string id = 1;
inline bool PaymentsCustomerData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaymentsCustomerData::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PaymentsCustomerData::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.PaymentsCustomerData.id)
  return id_.GetNoArena();
}
inline void PaymentsCustomerData::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PaymentsCustomerData.id)
}
inline void PaymentsCustomerData::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PaymentsCustomerData.id)
}
inline void PaymentsCustomerData::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PaymentsCustomerData.id)
}
inline void PaymentsCustomerData::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PaymentsCustomerData.id)
}
inline std::string* PaymentsCustomerData::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PaymentsCustomerData.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentsCustomerData::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.PaymentsCustomerData.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentsCustomerData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PaymentsCustomerData.id)
}

// -------------------------------------------------------------------

// WalletCreditCardCloudTokenData

// optional string masked_card_id = 1;
inline bool WalletCreditCardCloudTokenData::has_masked_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WalletCreditCardCloudTokenData::clear_masked_card_id() {
  masked_card_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WalletCreditCardCloudTokenData::masked_card_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
  return masked_card_id_.GetNoArena();
}
inline void WalletCreditCardCloudTokenData::set_masked_card_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  masked_card_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
}
inline void WalletCreditCardCloudTokenData::set_masked_card_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  masked_card_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
}
inline void WalletCreditCardCloudTokenData::set_masked_card_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  masked_card_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
}
inline void WalletCreditCardCloudTokenData::set_masked_card_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  masked_card_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
}
inline std::string* WalletCreditCardCloudTokenData::mutable_masked_card_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
  return masked_card_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletCreditCardCloudTokenData::release_masked_card_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
  if (!has_masked_card_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return masked_card_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletCreditCardCloudTokenData::set_allocated_masked_card_id(std::string* masked_card_id) {
  if (masked_card_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  masked_card_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), masked_card_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
}

// optional string suffix = 2;
inline bool WalletCreditCardCloudTokenData::has_suffix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WalletCreditCardCloudTokenData::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WalletCreditCardCloudTokenData::suffix() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.suffix)
  return suffix_.GetNoArena();
}
inline void WalletCreditCardCloudTokenData::set_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.suffix)
}
inline void WalletCreditCardCloudTokenData::set_suffix(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  suffix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletCreditCardCloudTokenData.suffix)
}
inline void WalletCreditCardCloudTokenData::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletCreditCardCloudTokenData.suffix)
}
inline void WalletCreditCardCloudTokenData::set_suffix(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletCreditCardCloudTokenData.suffix)
}
inline std::string* WalletCreditCardCloudTokenData::mutable_suffix() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletCreditCardCloudTokenData.suffix)
  return suffix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletCreditCardCloudTokenData::release_suffix() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletCreditCardCloudTokenData.suffix)
  if (!has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return suffix_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletCreditCardCloudTokenData::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  suffix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletCreditCardCloudTokenData.suffix)
}

// optional int32 exp_month = 3;
inline bool WalletCreditCardCloudTokenData::has_exp_month() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WalletCreditCardCloudTokenData::clear_exp_month() {
  exp_month_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WalletCreditCardCloudTokenData::exp_month() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.exp_month)
  return exp_month_;
}
inline void WalletCreditCardCloudTokenData::set_exp_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  exp_month_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.exp_month)
}

// optional int32 exp_year = 4;
inline bool WalletCreditCardCloudTokenData::has_exp_year() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WalletCreditCardCloudTokenData::clear_exp_year() {
  exp_year_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WalletCreditCardCloudTokenData::exp_year() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.exp_year)
  return exp_year_;
}
inline void WalletCreditCardCloudTokenData::set_exp_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  exp_year_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.exp_year)
}

// optional string art_fife_url = 5;
inline bool WalletCreditCardCloudTokenData::has_art_fife_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WalletCreditCardCloudTokenData::clear_art_fife_url() {
  art_fife_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WalletCreditCardCloudTokenData::art_fife_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
  return art_fife_url_.GetNoArena();
}
inline void WalletCreditCardCloudTokenData::set_art_fife_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  art_fife_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
}
inline void WalletCreditCardCloudTokenData::set_art_fife_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  art_fife_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
}
inline void WalletCreditCardCloudTokenData::set_art_fife_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  art_fife_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
}
inline void WalletCreditCardCloudTokenData::set_art_fife_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  art_fife_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
}
inline std::string* WalletCreditCardCloudTokenData::mutable_art_fife_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
  return art_fife_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletCreditCardCloudTokenData::release_art_fife_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
  if (!has_art_fife_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return art_fife_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletCreditCardCloudTokenData::set_allocated_art_fife_url(std::string* art_fife_url) {
  if (art_fife_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  art_fife_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), art_fife_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
}

// optional string instrument_token = 6;
inline bool WalletCreditCardCloudTokenData::has_instrument_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WalletCreditCardCloudTokenData::clear_instrument_token() {
  instrument_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WalletCreditCardCloudTokenData::instrument_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
  return instrument_token_.GetNoArena();
}
inline void WalletCreditCardCloudTokenData::set_instrument_token(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  instrument_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
}
inline void WalletCreditCardCloudTokenData::set_instrument_token(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  instrument_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
}
inline void WalletCreditCardCloudTokenData::set_instrument_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  instrument_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
}
inline void WalletCreditCardCloudTokenData::set_instrument_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  instrument_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
}
inline std::string* WalletCreditCardCloudTokenData::mutable_instrument_token() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
  return instrument_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletCreditCardCloudTokenData::release_instrument_token() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
  if (!has_instrument_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return instrument_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletCreditCardCloudTokenData::set_allocated_instrument_token(std::string* instrument_token) {
  if (instrument_token != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  instrument_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_token);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
}

// -------------------------------------------------------------------

// AutofillWalletSpecifics

// optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
inline bool AutofillWalletSpecifics::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AutofillWalletSpecifics::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::sync_pb::AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletSpecifics.type)
  return static_cast< ::sync_pb::AutofillWalletSpecifics_WalletInfoType >(type_);
}
inline void AutofillWalletSpecifics::set_type(::sync_pb::AutofillWalletSpecifics_WalletInfoType value) {
  assert(::sync_pb::AutofillWalletSpecifics_WalletInfoType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.AutofillWalletSpecifics.type)
}

// optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
inline bool AutofillWalletSpecifics::has_masked_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutofillWalletSpecifics::clear_masked_card() {
  if (masked_card_ != nullptr) masked_card_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sync_pb::WalletMaskedCreditCard& AutofillWalletSpecifics::masked_card() const {
  const ::sync_pb::WalletMaskedCreditCard* p = masked_card_;
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletSpecifics.masked_card)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::WalletMaskedCreditCard*>(
      &::sync_pb::_WalletMaskedCreditCard_default_instance_);
}
inline ::sync_pb::WalletMaskedCreditCard* AutofillWalletSpecifics::release_masked_card() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletSpecifics.masked_card)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::WalletMaskedCreditCard* temp = masked_card_;
  masked_card_ = nullptr;
  return temp;
}
inline ::sync_pb::WalletMaskedCreditCard* AutofillWalletSpecifics::mutable_masked_card() {
  _has_bits_[0] |= 0x00000001u;
  if (masked_card_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WalletMaskedCreditCard>(GetArenaNoVirtual());
    masked_card_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletSpecifics.masked_card)
  return masked_card_;
}
inline void AutofillWalletSpecifics::set_allocated_masked_card(::sync_pb::WalletMaskedCreditCard* masked_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete masked_card_;
  }
  if (masked_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      masked_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, masked_card, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  masked_card_ = masked_card;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletSpecifics.masked_card)
}

// optional .sync_pb.WalletPostalAddress address = 3;
inline bool AutofillWalletSpecifics::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutofillWalletSpecifics::clear_address() {
  if (address_ != nullptr) address_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::WalletPostalAddress& AutofillWalletSpecifics::address() const {
  const ::sync_pb::WalletPostalAddress* p = address_;
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletSpecifics.address)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::WalletPostalAddress*>(
      &::sync_pb::_WalletPostalAddress_default_instance_);
}
inline ::sync_pb::WalletPostalAddress* AutofillWalletSpecifics::release_address() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletSpecifics.address)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::WalletPostalAddress* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::sync_pb::WalletPostalAddress* AutofillWalletSpecifics::mutable_address() {
  _has_bits_[0] |= 0x00000002u;
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WalletPostalAddress>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletSpecifics.address)
  return address_;
}
inline void AutofillWalletSpecifics::set_allocated_address(::sync_pb::WalletPostalAddress* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletSpecifics.address)
}

// optional .sync_pb.PaymentsCustomerData customer_data = 4;
inline bool AutofillWalletSpecifics::has_customer_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutofillWalletSpecifics::clear_customer_data() {
  if (customer_data_ != nullptr) customer_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::PaymentsCustomerData& AutofillWalletSpecifics::customer_data() const {
  const ::sync_pb::PaymentsCustomerData* p = customer_data_;
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletSpecifics.customer_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::PaymentsCustomerData*>(
      &::sync_pb::_PaymentsCustomerData_default_instance_);
}
inline ::sync_pb::PaymentsCustomerData* AutofillWalletSpecifics::release_customer_data() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletSpecifics.customer_data)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::PaymentsCustomerData* temp = customer_data_;
  customer_data_ = nullptr;
  return temp;
}
inline ::sync_pb::PaymentsCustomerData* AutofillWalletSpecifics::mutable_customer_data() {
  _has_bits_[0] |= 0x00000004u;
  if (customer_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PaymentsCustomerData>(GetArenaNoVirtual());
    customer_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletSpecifics.customer_data)
  return customer_data_;
}
inline void AutofillWalletSpecifics::set_allocated_customer_data(::sync_pb::PaymentsCustomerData* customer_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete customer_data_;
  }
  if (customer_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      customer_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  customer_data_ = customer_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletSpecifics.customer_data)
}

// optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
inline bool AutofillWalletSpecifics::has_cloud_token_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutofillWalletSpecifics::clear_cloud_token_data() {
  if (cloud_token_data_ != nullptr) cloud_token_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::WalletCreditCardCloudTokenData& AutofillWalletSpecifics::cloud_token_data() const {
  const ::sync_pb::WalletCreditCardCloudTokenData* p = cloud_token_data_;
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletSpecifics.cloud_token_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::WalletCreditCardCloudTokenData*>(
      &::sync_pb::_WalletCreditCardCloudTokenData_default_instance_);
}
inline ::sync_pb::WalletCreditCardCloudTokenData* AutofillWalletSpecifics::release_cloud_token_data() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletSpecifics.cloud_token_data)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::WalletCreditCardCloudTokenData* temp = cloud_token_data_;
  cloud_token_data_ = nullptr;
  return temp;
}
inline ::sync_pb::WalletCreditCardCloudTokenData* AutofillWalletSpecifics::mutable_cloud_token_data() {
  _has_bits_[0] |= 0x00000008u;
  if (cloud_token_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WalletCreditCardCloudTokenData>(GetArenaNoVirtual());
    cloud_token_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletSpecifics.cloud_token_data)
  return cloud_token_data_;
}
inline void AutofillWalletSpecifics::set_allocated_cloud_token_data(::sync_pb::WalletCreditCardCloudTokenData* cloud_token_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cloud_token_data_;
  }
  if (cloud_token_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cloud_token_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud_token_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cloud_token_data_ = cloud_token_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletSpecifics.cloud_token_data)
}

// -------------------------------------------------------------------

// WalletMetadataSpecifics

// optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
inline bool WalletMetadataSpecifics::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WalletMetadataSpecifics::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::sync_pb::WalletMetadataSpecifics_Type WalletMetadataSpecifics::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.type)
  return static_cast< ::sync_pb::WalletMetadataSpecifics_Type >(type_);
}
inline void WalletMetadataSpecifics::set_type(::sync_pb::WalletMetadataSpecifics_Type value) {
  assert(::sync_pb::WalletMetadataSpecifics_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.type)
}

// optional string id = 2;
inline bool WalletMetadataSpecifics::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WalletMetadataSpecifics::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WalletMetadataSpecifics::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.id)
  return id_.GetNoArena();
}
inline void WalletMetadataSpecifics::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.id)
}
inline void WalletMetadataSpecifics::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletMetadataSpecifics.id)
}
inline void WalletMetadataSpecifics::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletMetadataSpecifics.id)
}
inline void WalletMetadataSpecifics::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletMetadataSpecifics.id)
}
inline std::string* WalletMetadataSpecifics::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMetadataSpecifics.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletMetadataSpecifics::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMetadataSpecifics.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletMetadataSpecifics::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMetadataSpecifics.id)
}

// optional int64 use_count = 3;
inline bool WalletMetadataSpecifics::has_use_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WalletMetadataSpecifics::clear_use_count() {
  use_count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletMetadataSpecifics::use_count() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.use_count)
  return use_count_;
}
inline void WalletMetadataSpecifics::set_use_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  use_count_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.use_count)
}

// optional int64 use_date = 4;
inline bool WalletMetadataSpecifics::has_use_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WalletMetadataSpecifics::clear_use_date() {
  use_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletMetadataSpecifics::use_date() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.use_date)
  return use_date_;
}
inline void WalletMetadataSpecifics::set_use_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  use_date_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.use_date)
}

// optional string card_billing_address_id = 5;
inline bool WalletMetadataSpecifics::has_card_billing_address_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WalletMetadataSpecifics::clear_card_billing_address_id() {
  card_billing_address_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WalletMetadataSpecifics::card_billing_address_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
  return card_billing_address_id_.GetNoArena();
}
inline void WalletMetadataSpecifics::set_card_billing_address_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  card_billing_address_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
}
inline void WalletMetadataSpecifics::set_card_billing_address_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  card_billing_address_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
}
inline void WalletMetadataSpecifics::set_card_billing_address_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  card_billing_address_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
}
inline void WalletMetadataSpecifics::set_card_billing_address_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  card_billing_address_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
}
inline std::string* WalletMetadataSpecifics::mutable_card_billing_address_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
  return card_billing_address_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WalletMetadataSpecifics::release_card_billing_address_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
  if (!has_card_billing_address_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return card_billing_address_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WalletMetadataSpecifics::set_allocated_card_billing_address_id(std::string* card_billing_address_id) {
  if (card_billing_address_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  card_billing_address_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_billing_address_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
}

// optional bool address_has_converted = 6;
inline bool WalletMetadataSpecifics::has_address_has_converted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WalletMetadataSpecifics::clear_address_has_converted() {
  address_has_converted_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool WalletMetadataSpecifics::address_has_converted() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.address_has_converted)
  return address_has_converted_;
}
inline void WalletMetadataSpecifics::set_address_has_converted(bool value) {
  _has_bits_[0] |= 0x00000010u;
  address_has_converted_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.address_has_converted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::WalletMaskedCreditCard_WalletCardStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WalletMaskedCreditCard_WalletCardType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::AutofillWalletSpecifics_WalletInfoType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WalletMetadataSpecifics_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autofill_5fspecifics_2eproto
