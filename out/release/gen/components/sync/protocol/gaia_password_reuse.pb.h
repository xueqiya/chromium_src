// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gaia_password_reuse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gaia_5fpassword_5freuse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gaia_5fpassword_5freuse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gaia_5fpassword_5freuse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gaia_5fpassword_5freuse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class GaiaPasswordReuse;
class GaiaPasswordReuseDefaultTypeInternal;
extern GaiaPasswordReuseDefaultTypeInternal _GaiaPasswordReuse_default_instance_;
class GaiaPasswordReuse_PasswordCaptured;
class GaiaPasswordReuse_PasswordCapturedDefaultTypeInternal;
extern GaiaPasswordReuse_PasswordCapturedDefaultTypeInternal _GaiaPasswordReuse_PasswordCaptured_default_instance_;
class GaiaPasswordReuse_PasswordReuseDetected;
class GaiaPasswordReuse_PasswordReuseDetectedDefaultTypeInternal;
extern GaiaPasswordReuse_PasswordReuseDetectedDefaultTypeInternal _GaiaPasswordReuse_PasswordReuseDetected_default_instance_;
class GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus;
class GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatusDefaultTypeInternal;
extern GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatusDefaultTypeInternal _GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_default_instance_;
class GaiaPasswordReuse_PasswordReuseDialogInteraction;
class GaiaPasswordReuse_PasswordReuseDialogInteractionDefaultTypeInternal;
extern GaiaPasswordReuse_PasswordReuseDialogInteractionDefaultTypeInternal _GaiaPasswordReuse_PasswordReuseDialogInteraction_default_instance_;
class GaiaPasswordReuse_PasswordReuseLookup;
class GaiaPasswordReuse_PasswordReuseLookupDefaultTypeInternal;
extern GaiaPasswordReuse_PasswordReuseLookupDefaultTypeInternal _GaiaPasswordReuse_PasswordReuseLookup_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::GaiaPasswordReuse* Arena::CreateMaybeMessage<::sync_pb::GaiaPasswordReuse>(Arena*);
template<> ::sync_pb::GaiaPasswordReuse_PasswordCaptured* Arena::CreateMaybeMessage<::sync_pb::GaiaPasswordReuse_PasswordCaptured>(Arena*);
template<> ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* Arena::CreateMaybeMessage<::sync_pb::GaiaPasswordReuse_PasswordReuseDetected>(Arena*);
template<> ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* Arena::CreateMaybeMessage<::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus>(Arena*);
template<> ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* Arena::CreateMaybeMessage<::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction>(Arena*);
template<> ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* Arena::CreateMaybeMessage<::sync_pb::GaiaPasswordReuse_PasswordReuseLookup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation : int {
  GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_REPORTING_POPULATION_UNSPECIFIED = 0,
  GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_NONE = 1,
  GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_EXTENDED_REPORTING = 2,
  GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_SCOUT = 3
};
bool GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(int value);
constexpr GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_MIN = GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_REPORTING_POPULATION_UNSPECIFIED;
constexpr GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_MAX = GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_SCOUT;
constexpr int GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_ARRAYSIZE = GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_MAX + 1;

const std::string& GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_Name(GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation value);
template<typename T>
inline const std::string& GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_Name.");
  return GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_Name(static_cast<GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation>(enum_t_value));
}
bool GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_Parse(
    const std::string& name, GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation* value);
enum GaiaPasswordReuse_PasswordReuseLookup_LookupResult : int {
  GaiaPasswordReuse_PasswordReuseLookup_LookupResult_UNSPECIFIED = 0,
  GaiaPasswordReuse_PasswordReuseLookup_LookupResult_WHITELIST_HIT = 1,
  GaiaPasswordReuse_PasswordReuseLookup_LookupResult_CACHE_HIT = 2,
  GaiaPasswordReuse_PasswordReuseLookup_LookupResult_REQUEST_SUCCESS = 3,
  GaiaPasswordReuse_PasswordReuseLookup_LookupResult_REQUEST_FAILURE = 4,
  GaiaPasswordReuse_PasswordReuseLookup_LookupResult_URL_UNSUPPORTED = 5,
  GaiaPasswordReuse_PasswordReuseLookup_LookupResult_ENTERPRISE_WHITELIST_HIT = 6,
  GaiaPasswordReuse_PasswordReuseLookup_LookupResult_TURNED_OFF_BY_POLICY = 7
};
bool GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(int value);
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_MIN = GaiaPasswordReuse_PasswordReuseLookup_LookupResult_UNSPECIFIED;
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_MAX = GaiaPasswordReuse_PasswordReuseLookup_LookupResult_TURNED_OFF_BY_POLICY;
constexpr int GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_ARRAYSIZE = GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_MAX + 1;

const std::string& GaiaPasswordReuse_PasswordReuseLookup_LookupResult_Name(GaiaPasswordReuse_PasswordReuseLookup_LookupResult value);
template<typename T>
inline const std::string& GaiaPasswordReuse_PasswordReuseLookup_LookupResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GaiaPasswordReuse_PasswordReuseLookup_LookupResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GaiaPasswordReuse_PasswordReuseLookup_LookupResult_Name.");
  return GaiaPasswordReuse_PasswordReuseLookup_LookupResult_Name(static_cast<GaiaPasswordReuse_PasswordReuseLookup_LookupResult>(enum_t_value));
}
bool GaiaPasswordReuse_PasswordReuseLookup_LookupResult_Parse(
    const std::string& name, GaiaPasswordReuse_PasswordReuseLookup_LookupResult* value);
enum GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict : int {
  GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_VERDICT_UNSPECIFIED = 0,
  GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_SAFE = 1,
  GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_LOW_REPUTATION = 2,
  GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_PHISHING = 3
};
bool GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(int value);
constexpr GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_MIN = GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_VERDICT_UNSPECIFIED;
constexpr GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_MAX = GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_PHISHING;
constexpr int GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_ARRAYSIZE = GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_MAX + 1;

const std::string& GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_Name(GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict value);
template<typename T>
inline const std::string& GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_Name.");
  return GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_Name(static_cast<GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict>(enum_t_value));
}
bool GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_Parse(
    const std::string& name, GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict* value);
enum GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult : int {
  GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_UNSPECIFIED = 0,
  GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_TAKEN = 1,
  GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_IGNORED = 2,
  GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_UI_IGNORED = 3,
  GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_TAKEN_ON_SETTINGS = 4
};
bool GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(int value);
constexpr GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_MIN = GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_UNSPECIFIED;
constexpr GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_MAX = GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_TAKEN_ON_SETTINGS;
constexpr int GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_ARRAYSIZE = GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_MAX + 1;

const std::string& GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_Name(GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult value);
template<typename T>
inline const std::string& GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_Name.");
  return GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_Name(static_cast<GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult>(enum_t_value));
}
bool GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_Parse(
    const std::string& name, GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult* value);
enum GaiaPasswordReuse_PasswordCaptured_EventTrigger : int {
  GaiaPasswordReuse_PasswordCaptured_EventTrigger_UNSPECIFIED = 0,
  GaiaPasswordReuse_PasswordCaptured_EventTrigger_USER_LOGGED_IN = 1,
  GaiaPasswordReuse_PasswordCaptured_EventTrigger_EXPIRED_28D_TIMER = 2
};
bool GaiaPasswordReuse_PasswordCaptured_EventTrigger_IsValid(int value);
constexpr GaiaPasswordReuse_PasswordCaptured_EventTrigger GaiaPasswordReuse_PasswordCaptured_EventTrigger_EventTrigger_MIN = GaiaPasswordReuse_PasswordCaptured_EventTrigger_UNSPECIFIED;
constexpr GaiaPasswordReuse_PasswordCaptured_EventTrigger GaiaPasswordReuse_PasswordCaptured_EventTrigger_EventTrigger_MAX = GaiaPasswordReuse_PasswordCaptured_EventTrigger_EXPIRED_28D_TIMER;
constexpr int GaiaPasswordReuse_PasswordCaptured_EventTrigger_EventTrigger_ARRAYSIZE = GaiaPasswordReuse_PasswordCaptured_EventTrigger_EventTrigger_MAX + 1;

const std::string& GaiaPasswordReuse_PasswordCaptured_EventTrigger_Name(GaiaPasswordReuse_PasswordCaptured_EventTrigger value);
template<typename T>
inline const std::string& GaiaPasswordReuse_PasswordCaptured_EventTrigger_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GaiaPasswordReuse_PasswordCaptured_EventTrigger>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GaiaPasswordReuse_PasswordCaptured_EventTrigger_Name.");
  return GaiaPasswordReuse_PasswordCaptured_EventTrigger_Name(static_cast<GaiaPasswordReuse_PasswordCaptured_EventTrigger>(enum_t_value));
}
bool GaiaPasswordReuse_PasswordCaptured_EventTrigger_Parse(
    const std::string& name, GaiaPasswordReuse_PasswordCaptured_EventTrigger* value);
// ===================================================================

class GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus) */ {
 public:
  GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus();
  virtual ~GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus();

  GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus(const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from);
  GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus(GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus&& from) noexcept
    : GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus() {
    *this = ::std::move(from);
  }

  inline GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& operator=(const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& operator=(GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* internal_default_instance() {
    return reinterpret_cast<const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus*>(
               &_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& a, GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* New() const final {
    return CreateMaybeMessage<GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus>(nullptr);
  }

  GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from);
  void MergeFrom(const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation ReportingPopulation;
  static constexpr ReportingPopulation REPORTING_POPULATION_UNSPECIFIED =
    GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_REPORTING_POPULATION_UNSPECIFIED;
  static constexpr ReportingPopulation NONE =
    GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_NONE;
  static constexpr ReportingPopulation EXTENDED_REPORTING =
    GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_EXTENDED_REPORTING;
  static constexpr ReportingPopulation SCOUT =
    GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_SCOUT;
  static inline bool ReportingPopulation_IsValid(int value) {
    return GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(value);
  }
  static constexpr ReportingPopulation ReportingPopulation_MIN =
    GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_MIN;
  static constexpr ReportingPopulation ReportingPopulation_MAX =
    GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_MAX;
  static constexpr int ReportingPopulation_ARRAYSIZE =
    GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_ReportingPopulation_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ReportingPopulation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReportingPopulation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReportingPopulation_Name.");
    return GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_Name(enum_t_value);
  }
  static inline bool ReportingPopulation_Parse(const std::string& name,
      ReportingPopulation* value) {
    return GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kSafeBrowsingReportingPopulationFieldNumber = 2,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
  bool has_safe_browsing_reporting_population() const;
  void clear_safe_browsing_reporting_population();
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation safe_browsing_reporting_population() const;
  void set_safe_browsing_reporting_population(::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation value);

  // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  int safe_browsing_reporting_population_;
  friend struct ::TableStruct_gaia_5fpassword_5freuse_2eproto;
};
// -------------------------------------------------------------------

class GaiaPasswordReuse_PasswordReuseDetected :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GaiaPasswordReuse.PasswordReuseDetected) */ {
 public:
  GaiaPasswordReuse_PasswordReuseDetected();
  virtual ~GaiaPasswordReuse_PasswordReuseDetected();

  GaiaPasswordReuse_PasswordReuseDetected(const GaiaPasswordReuse_PasswordReuseDetected& from);
  GaiaPasswordReuse_PasswordReuseDetected(GaiaPasswordReuse_PasswordReuseDetected&& from) noexcept
    : GaiaPasswordReuse_PasswordReuseDetected() {
    *this = ::std::move(from);
  }

  inline GaiaPasswordReuse_PasswordReuseDetected& operator=(const GaiaPasswordReuse_PasswordReuseDetected& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaiaPasswordReuse_PasswordReuseDetected& operator=(GaiaPasswordReuse_PasswordReuseDetected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GaiaPasswordReuse_PasswordReuseDetected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GaiaPasswordReuse_PasswordReuseDetected* internal_default_instance() {
    return reinterpret_cast<const GaiaPasswordReuse_PasswordReuseDetected*>(
               &_GaiaPasswordReuse_PasswordReuseDetected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GaiaPasswordReuse_PasswordReuseDetected& a, GaiaPasswordReuse_PasswordReuseDetected& b) {
    a.Swap(&b);
  }
  inline void Swap(GaiaPasswordReuse_PasswordReuseDetected* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GaiaPasswordReuse_PasswordReuseDetected* New() const final {
    return CreateMaybeMessage<GaiaPasswordReuse_PasswordReuseDetected>(nullptr);
  }

  GaiaPasswordReuse_PasswordReuseDetected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GaiaPasswordReuse_PasswordReuseDetected>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GaiaPasswordReuse_PasswordReuseDetected& from);
  void MergeFrom(const GaiaPasswordReuse_PasswordReuseDetected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GaiaPasswordReuse_PasswordReuseDetected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GaiaPasswordReuse.PasswordReuseDetected";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus SafeBrowsingStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
  bool has_status() const;
  void clear_status();
  const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& status() const;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* release_status();
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* mutable_status();
  void set_allocated_status(::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* status);

  // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* status_;
  friend struct ::TableStruct_gaia_5fpassword_5freuse_2eproto;
};
// -------------------------------------------------------------------

class GaiaPasswordReuse_PasswordReuseLookup :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GaiaPasswordReuse.PasswordReuseLookup) */ {
 public:
  GaiaPasswordReuse_PasswordReuseLookup();
  virtual ~GaiaPasswordReuse_PasswordReuseLookup();

  GaiaPasswordReuse_PasswordReuseLookup(const GaiaPasswordReuse_PasswordReuseLookup& from);
  GaiaPasswordReuse_PasswordReuseLookup(GaiaPasswordReuse_PasswordReuseLookup&& from) noexcept
    : GaiaPasswordReuse_PasswordReuseLookup() {
    *this = ::std::move(from);
  }

  inline GaiaPasswordReuse_PasswordReuseLookup& operator=(const GaiaPasswordReuse_PasswordReuseLookup& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaiaPasswordReuse_PasswordReuseLookup& operator=(GaiaPasswordReuse_PasswordReuseLookup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GaiaPasswordReuse_PasswordReuseLookup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GaiaPasswordReuse_PasswordReuseLookup* internal_default_instance() {
    return reinterpret_cast<const GaiaPasswordReuse_PasswordReuseLookup*>(
               &_GaiaPasswordReuse_PasswordReuseLookup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GaiaPasswordReuse_PasswordReuseLookup& a, GaiaPasswordReuse_PasswordReuseLookup& b) {
    a.Swap(&b);
  }
  inline void Swap(GaiaPasswordReuse_PasswordReuseLookup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GaiaPasswordReuse_PasswordReuseLookup* New() const final {
    return CreateMaybeMessage<GaiaPasswordReuse_PasswordReuseLookup>(nullptr);
  }

  GaiaPasswordReuse_PasswordReuseLookup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GaiaPasswordReuse_PasswordReuseLookup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GaiaPasswordReuse_PasswordReuseLookup& from);
  void MergeFrom(const GaiaPasswordReuse_PasswordReuseLookup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GaiaPasswordReuse_PasswordReuseLookup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GaiaPasswordReuse.PasswordReuseLookup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GaiaPasswordReuse_PasswordReuseLookup_LookupResult LookupResult;
  static constexpr LookupResult UNSPECIFIED =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_UNSPECIFIED;
  static constexpr LookupResult WHITELIST_HIT =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_WHITELIST_HIT;
  static constexpr LookupResult CACHE_HIT =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_CACHE_HIT;
  static constexpr LookupResult REQUEST_SUCCESS =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_REQUEST_SUCCESS;
  static constexpr LookupResult REQUEST_FAILURE =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_REQUEST_FAILURE;
  static constexpr LookupResult URL_UNSUPPORTED =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_URL_UNSUPPORTED;
  static constexpr LookupResult ENTERPRISE_WHITELIST_HIT =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_ENTERPRISE_WHITELIST_HIT;
  static constexpr LookupResult TURNED_OFF_BY_POLICY =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_TURNED_OFF_BY_POLICY;
  static inline bool LookupResult_IsValid(int value) {
    return GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(value);
  }
  static constexpr LookupResult LookupResult_MIN =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_MIN;
  static constexpr LookupResult LookupResult_MAX =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_MAX;
  static constexpr int LookupResult_ARRAYSIZE =
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult_LookupResult_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LookupResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LookupResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LookupResult_Name.");
    return GaiaPasswordReuse_PasswordReuseLookup_LookupResult_Name(enum_t_value);
  }
  static inline bool LookupResult_Parse(const std::string& name,
      LookupResult* value) {
    return GaiaPasswordReuse_PasswordReuseLookup_LookupResult_Parse(name, value);
  }

  typedef GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict ReputationVerdict;
  static constexpr ReputationVerdict VERDICT_UNSPECIFIED =
    GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_VERDICT_UNSPECIFIED;
  static constexpr ReputationVerdict SAFE =
    GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_SAFE;
  static constexpr ReputationVerdict LOW_REPUTATION =
    GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_LOW_REPUTATION;
  static constexpr ReputationVerdict PHISHING =
    GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_PHISHING;
  static inline bool ReputationVerdict_IsValid(int value) {
    return GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(value);
  }
  static constexpr ReputationVerdict ReputationVerdict_MIN =
    GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_MIN;
  static constexpr ReputationVerdict ReputationVerdict_MAX =
    GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_MAX;
  static constexpr int ReputationVerdict_ARRAYSIZE =
    GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_ReputationVerdict_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ReputationVerdict_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReputationVerdict>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReputationVerdict_Name.");
    return GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_Name(enum_t_value);
  }
  static inline bool ReputationVerdict_Parse(const std::string& name,
      ReputationVerdict* value) {
    return GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVerdictTokenFieldNumber = 3,
    kLookupResultFieldNumber = 1,
    kVerdictFieldNumber = 2,
  };
  // optional bytes verdict_token = 3;
  bool has_verdict_token() const;
  void clear_verdict_token();
  const std::string& verdict_token() const;
  void set_verdict_token(const std::string& value);
  void set_verdict_token(std::string&& value);
  void set_verdict_token(const char* value);
  void set_verdict_token(const void* value, size_t size);
  std::string* mutable_verdict_token();
  std::string* release_verdict_token();
  void set_allocated_verdict_token(std::string* verdict_token);

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
  bool has_lookup_result() const;
  void clear_lookup_result();
  ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult lookup_result() const;
  void set_lookup_result(::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult value);

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
  bool has_verdict() const;
  void clear_verdict();
  ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict verdict() const;
  void set_verdict(::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict value);

  // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verdict_token_;
  int lookup_result_;
  int verdict_;
  friend struct ::TableStruct_gaia_5fpassword_5freuse_2eproto;
};
// -------------------------------------------------------------------

class GaiaPasswordReuse_PasswordReuseDialogInteraction :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction) */ {
 public:
  GaiaPasswordReuse_PasswordReuseDialogInteraction();
  virtual ~GaiaPasswordReuse_PasswordReuseDialogInteraction();

  GaiaPasswordReuse_PasswordReuseDialogInteraction(const GaiaPasswordReuse_PasswordReuseDialogInteraction& from);
  GaiaPasswordReuse_PasswordReuseDialogInteraction(GaiaPasswordReuse_PasswordReuseDialogInteraction&& from) noexcept
    : GaiaPasswordReuse_PasswordReuseDialogInteraction() {
    *this = ::std::move(from);
  }

  inline GaiaPasswordReuse_PasswordReuseDialogInteraction& operator=(const GaiaPasswordReuse_PasswordReuseDialogInteraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaiaPasswordReuse_PasswordReuseDialogInteraction& operator=(GaiaPasswordReuse_PasswordReuseDialogInteraction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GaiaPasswordReuse_PasswordReuseDialogInteraction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GaiaPasswordReuse_PasswordReuseDialogInteraction* internal_default_instance() {
    return reinterpret_cast<const GaiaPasswordReuse_PasswordReuseDialogInteraction*>(
               &_GaiaPasswordReuse_PasswordReuseDialogInteraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GaiaPasswordReuse_PasswordReuseDialogInteraction& a, GaiaPasswordReuse_PasswordReuseDialogInteraction& b) {
    a.Swap(&b);
  }
  inline void Swap(GaiaPasswordReuse_PasswordReuseDialogInteraction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GaiaPasswordReuse_PasswordReuseDialogInteraction* New() const final {
    return CreateMaybeMessage<GaiaPasswordReuse_PasswordReuseDialogInteraction>(nullptr);
  }

  GaiaPasswordReuse_PasswordReuseDialogInteraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GaiaPasswordReuse_PasswordReuseDialogInteraction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GaiaPasswordReuse_PasswordReuseDialogInteraction& from);
  void MergeFrom(const GaiaPasswordReuse_PasswordReuseDialogInteraction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GaiaPasswordReuse_PasswordReuseDialogInteraction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult InteractionResult;
  static constexpr InteractionResult UNSPECIFIED =
    GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_UNSPECIFIED;
  static constexpr InteractionResult WARNING_ACTION_TAKEN =
    GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_TAKEN;
  static constexpr InteractionResult WARNING_ACTION_IGNORED =
    GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_IGNORED;
  static constexpr InteractionResult WARNING_UI_IGNORED =
    GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_UI_IGNORED;
  static constexpr InteractionResult WARNING_ACTION_TAKEN_ON_SETTINGS =
    GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_WARNING_ACTION_TAKEN_ON_SETTINGS;
  static inline bool InteractionResult_IsValid(int value) {
    return GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(value);
  }
  static constexpr InteractionResult InteractionResult_MIN =
    GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_MIN;
  static constexpr InteractionResult InteractionResult_MAX =
    GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_MAX;
  static constexpr int InteractionResult_ARRAYSIZE =
    GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_InteractionResult_ARRAYSIZE;
  template<typename T>
  static inline const std::string& InteractionResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InteractionResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InteractionResult_Name.");
    return GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_Name(enum_t_value);
  }
  static inline bool InteractionResult_Parse(const std::string& name,
      InteractionResult* value) {
    return GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInteractionResultFieldNumber = 1,
  };
  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
  bool has_interaction_result() const;
  void clear_interaction_result();
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult interaction_result() const;
  void set_interaction_result(::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult value);

  // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int interaction_result_;
  friend struct ::TableStruct_gaia_5fpassword_5freuse_2eproto;
};
// -------------------------------------------------------------------

class GaiaPasswordReuse_PasswordCaptured :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GaiaPasswordReuse.PasswordCaptured) */ {
 public:
  GaiaPasswordReuse_PasswordCaptured();
  virtual ~GaiaPasswordReuse_PasswordCaptured();

  GaiaPasswordReuse_PasswordCaptured(const GaiaPasswordReuse_PasswordCaptured& from);
  GaiaPasswordReuse_PasswordCaptured(GaiaPasswordReuse_PasswordCaptured&& from) noexcept
    : GaiaPasswordReuse_PasswordCaptured() {
    *this = ::std::move(from);
  }

  inline GaiaPasswordReuse_PasswordCaptured& operator=(const GaiaPasswordReuse_PasswordCaptured& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaiaPasswordReuse_PasswordCaptured& operator=(GaiaPasswordReuse_PasswordCaptured&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GaiaPasswordReuse_PasswordCaptured& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GaiaPasswordReuse_PasswordCaptured* internal_default_instance() {
    return reinterpret_cast<const GaiaPasswordReuse_PasswordCaptured*>(
               &_GaiaPasswordReuse_PasswordCaptured_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GaiaPasswordReuse_PasswordCaptured& a, GaiaPasswordReuse_PasswordCaptured& b) {
    a.Swap(&b);
  }
  inline void Swap(GaiaPasswordReuse_PasswordCaptured* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GaiaPasswordReuse_PasswordCaptured* New() const final {
    return CreateMaybeMessage<GaiaPasswordReuse_PasswordCaptured>(nullptr);
  }

  GaiaPasswordReuse_PasswordCaptured* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GaiaPasswordReuse_PasswordCaptured>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GaiaPasswordReuse_PasswordCaptured& from);
  void MergeFrom(const GaiaPasswordReuse_PasswordCaptured& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GaiaPasswordReuse_PasswordCaptured* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GaiaPasswordReuse.PasswordCaptured";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GaiaPasswordReuse_PasswordCaptured_EventTrigger EventTrigger;
  static constexpr EventTrigger UNSPECIFIED =
    GaiaPasswordReuse_PasswordCaptured_EventTrigger_UNSPECIFIED;
  static constexpr EventTrigger USER_LOGGED_IN =
    GaiaPasswordReuse_PasswordCaptured_EventTrigger_USER_LOGGED_IN;
  static constexpr EventTrigger EXPIRED_28D_TIMER =
    GaiaPasswordReuse_PasswordCaptured_EventTrigger_EXPIRED_28D_TIMER;
  static inline bool EventTrigger_IsValid(int value) {
    return GaiaPasswordReuse_PasswordCaptured_EventTrigger_IsValid(value);
  }
  static constexpr EventTrigger EventTrigger_MIN =
    GaiaPasswordReuse_PasswordCaptured_EventTrigger_EventTrigger_MIN;
  static constexpr EventTrigger EventTrigger_MAX =
    GaiaPasswordReuse_PasswordCaptured_EventTrigger_EventTrigger_MAX;
  static constexpr int EventTrigger_ARRAYSIZE =
    GaiaPasswordReuse_PasswordCaptured_EventTrigger_EventTrigger_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EventTrigger_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventTrigger>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventTrigger_Name.");
    return GaiaPasswordReuse_PasswordCaptured_EventTrigger_Name(enum_t_value);
  }
  static inline bool EventTrigger_Parse(const std::string& name,
      EventTrigger* value) {
    return GaiaPasswordReuse_PasswordCaptured_EventTrigger_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventTriggerFieldNumber = 1,
  };
  // optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;
  bool has_event_trigger() const;
  void clear_event_trigger();
  ::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger event_trigger() const;
  void set_event_trigger(::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger value);

  // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordCaptured)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int event_trigger_;
  friend struct ::TableStruct_gaia_5fpassword_5freuse_2eproto;
};
// -------------------------------------------------------------------

class GaiaPasswordReuse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GaiaPasswordReuse) */ {
 public:
  GaiaPasswordReuse();
  virtual ~GaiaPasswordReuse();

  GaiaPasswordReuse(const GaiaPasswordReuse& from);
  GaiaPasswordReuse(GaiaPasswordReuse&& from) noexcept
    : GaiaPasswordReuse() {
    *this = ::std::move(from);
  }

  inline GaiaPasswordReuse& operator=(const GaiaPasswordReuse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaiaPasswordReuse& operator=(GaiaPasswordReuse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GaiaPasswordReuse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GaiaPasswordReuse* internal_default_instance() {
    return reinterpret_cast<const GaiaPasswordReuse*>(
               &_GaiaPasswordReuse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GaiaPasswordReuse& a, GaiaPasswordReuse& b) {
    a.Swap(&b);
  }
  inline void Swap(GaiaPasswordReuse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GaiaPasswordReuse* New() const final {
    return CreateMaybeMessage<GaiaPasswordReuse>(nullptr);
  }

  GaiaPasswordReuse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GaiaPasswordReuse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GaiaPasswordReuse& from);
  void MergeFrom(const GaiaPasswordReuse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GaiaPasswordReuse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GaiaPasswordReuse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GaiaPasswordReuse_PasswordReuseDetected PasswordReuseDetected;
  typedef GaiaPasswordReuse_PasswordReuseLookup PasswordReuseLookup;
  typedef GaiaPasswordReuse_PasswordReuseDialogInteraction PasswordReuseDialogInteraction;
  typedef GaiaPasswordReuse_PasswordCaptured PasswordCaptured;

  // accessors -------------------------------------------------------

  enum : int {
    kReuseDetectedFieldNumber = 1,
    kReuseLookupFieldNumber = 2,
    kDialogInteractionFieldNumber = 3,
    kPasswordCapturedFieldNumber = 4,
  };
  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
  bool has_reuse_detected() const;
  void clear_reuse_detected();
  const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected& reuse_detected() const;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* release_reuse_detected();
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* mutable_reuse_detected();
  void set_allocated_reuse_detected(::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* reuse_detected);

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
  bool has_reuse_lookup() const;
  void clear_reuse_lookup();
  const ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup& reuse_lookup() const;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* release_reuse_lookup();
  ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* mutable_reuse_lookup();
  void set_allocated_reuse_lookup(::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* reuse_lookup);

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
  bool has_dialog_interaction() const;
  void clear_dialog_interaction();
  const ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction& dialog_interaction() const;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* release_dialog_interaction();
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* mutable_dialog_interaction();
  void set_allocated_dialog_interaction(::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* dialog_interaction);

  // optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;
  bool has_password_captured() const;
  void clear_password_captured();
  const ::sync_pb::GaiaPasswordReuse_PasswordCaptured& password_captured() const;
  ::sync_pb::GaiaPasswordReuse_PasswordCaptured* release_password_captured();
  ::sync_pb::GaiaPasswordReuse_PasswordCaptured* mutable_password_captured();
  void set_allocated_password_captured(::sync_pb::GaiaPasswordReuse_PasswordCaptured* password_captured);

  // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* reuse_detected_;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* reuse_lookup_;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* dialog_interaction_;
  ::sync_pb::GaiaPasswordReuse_PasswordCaptured* password_captured_;
  friend struct ::TableStruct_gaia_5fpassword_5freuse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus

// optional bool enabled = 1;
inline bool GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.enabled)
  return enabled_;
}
inline void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.enabled)
}

// optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
inline bool GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::has_safe_browsing_reporting_population() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::clear_safe_browsing_reporting_population() {
  safe_browsing_reporting_population_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::safe_browsing_reporting_population() const {
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.safe_browsing_reporting_population)
  return static_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation >(safe_browsing_reporting_population_);
}
inline void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::set_safe_browsing_reporting_population(::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation value) {
  assert(::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  safe_browsing_reporting_population_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.safe_browsing_reporting_population)
}

// -------------------------------------------------------------------

// GaiaPasswordReuse_PasswordReuseDetected

// optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
inline bool GaiaPasswordReuse_PasswordReuseDetected::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GaiaPasswordReuse_PasswordReuseDetected::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& GaiaPasswordReuse_PasswordReuseDetected::status() const {
  const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* p = status_;
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus*>(
      &::sync_pb::_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_default_instance_);
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* GaiaPasswordReuse_PasswordReuseDetected::release_status() {
  // @@protoc_insertion_point(field_release:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.status)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* GaiaPasswordReuse_PasswordReuseDetected::mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.status)
  return status_;
}
inline void GaiaPasswordReuse_PasswordReuseDetected::set_allocated_status(::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.status)
}

// -------------------------------------------------------------------

// GaiaPasswordReuse_PasswordReuseLookup

// optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
inline bool GaiaPasswordReuse_PasswordReuseLookup::has_lookup_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GaiaPasswordReuse_PasswordReuseLookup::clear_lookup_result() {
  lookup_result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::lookup_result() const {
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.lookup_result)
  return static_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult >(lookup_result_);
}
inline void GaiaPasswordReuse_PasswordReuseLookup::set_lookup_result(::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult value) {
  assert(::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  lookup_result_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.lookup_result)
}

// optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
inline bool GaiaPasswordReuse_PasswordReuseLookup::has_verdict() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GaiaPasswordReuse_PasswordReuseLookup::clear_verdict() {
  verdict_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict GaiaPasswordReuse_PasswordReuseLookup::verdict() const {
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict)
  return static_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict >(verdict_);
}
inline void GaiaPasswordReuse_PasswordReuseLookup::set_verdict(::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict value) {
  assert(::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  verdict_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict)
}

// optional bytes verdict_token = 3;
inline bool GaiaPasswordReuse_PasswordReuseLookup::has_verdict_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GaiaPasswordReuse_PasswordReuseLookup::clear_verdict_token() {
  verdict_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GaiaPasswordReuse_PasswordReuseLookup::verdict_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
  return verdict_token_.GetNoArena();
}
inline void GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  verdict_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
inline void GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  verdict_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
inline void GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  verdict_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
inline void GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  verdict_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
inline std::string* GaiaPasswordReuse_PasswordReuseLookup::mutable_verdict_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
  return verdict_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GaiaPasswordReuse_PasswordReuseLookup::release_verdict_token() {
  // @@protoc_insertion_point(field_release:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
  if (!has_verdict_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return verdict_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GaiaPasswordReuse_PasswordReuseLookup::set_allocated_verdict_token(std::string* verdict_token) {
  if (verdict_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verdict_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verdict_token);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}

// -------------------------------------------------------------------

// GaiaPasswordReuse_PasswordReuseDialogInteraction

// optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
inline bool GaiaPasswordReuse_PasswordReuseDialogInteraction::has_interaction_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GaiaPasswordReuse_PasswordReuseDialogInteraction::clear_interaction_result() {
  interaction_result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult GaiaPasswordReuse_PasswordReuseDialogInteraction::interaction_result() const {
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.interaction_result)
  return static_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult >(interaction_result_);
}
inline void GaiaPasswordReuse_PasswordReuseDialogInteraction::set_interaction_result(::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult value) {
  assert(::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  interaction_result_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.interaction_result)
}

// -------------------------------------------------------------------

// GaiaPasswordReuse_PasswordCaptured

// optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;
inline bool GaiaPasswordReuse_PasswordCaptured::has_event_trigger() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GaiaPasswordReuse_PasswordCaptured::clear_event_trigger() {
  event_trigger_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger GaiaPasswordReuse_PasswordCaptured::event_trigger() const {
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.PasswordCaptured.event_trigger)
  return static_cast< ::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger >(event_trigger_);
}
inline void GaiaPasswordReuse_PasswordCaptured::set_event_trigger(::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger value) {
  assert(::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  event_trigger_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GaiaPasswordReuse.PasswordCaptured.event_trigger)
}

// -------------------------------------------------------------------

// GaiaPasswordReuse

// optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
inline bool GaiaPasswordReuse::has_reuse_detected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GaiaPasswordReuse::clear_reuse_detected() {
  if (reuse_detected_ != nullptr) reuse_detected_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected& GaiaPasswordReuse::reuse_detected() const {
  const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* p = reuse_detected_;
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.reuse_detected)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected*>(
      &::sync_pb::_GaiaPasswordReuse_PasswordReuseDetected_default_instance_);
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* GaiaPasswordReuse::release_reuse_detected() {
  // @@protoc_insertion_point(field_release:sync_pb.GaiaPasswordReuse.reuse_detected)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* temp = reuse_detected_;
  reuse_detected_ = nullptr;
  return temp;
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* GaiaPasswordReuse::mutable_reuse_detected() {
  _has_bits_[0] |= 0x00000001u;
  if (reuse_detected_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GaiaPasswordReuse_PasswordReuseDetected>(GetArenaNoVirtual());
    reuse_detected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.GaiaPasswordReuse.reuse_detected)
  return reuse_detected_;
}
inline void GaiaPasswordReuse::set_allocated_reuse_detected(::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* reuse_detected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reuse_detected_;
  }
  if (reuse_detected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reuse_detected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reuse_detected, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reuse_detected_ = reuse_detected;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GaiaPasswordReuse.reuse_detected)
}

// optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
inline bool GaiaPasswordReuse::has_reuse_lookup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GaiaPasswordReuse::clear_reuse_lookup() {
  if (reuse_lookup_ != nullptr) reuse_lookup_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup& GaiaPasswordReuse::reuse_lookup() const {
  const ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* p = reuse_lookup_;
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.reuse_lookup)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup*>(
      &::sync_pb::_GaiaPasswordReuse_PasswordReuseLookup_default_instance_);
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* GaiaPasswordReuse::release_reuse_lookup() {
  // @@protoc_insertion_point(field_release:sync_pb.GaiaPasswordReuse.reuse_lookup)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* temp = reuse_lookup_;
  reuse_lookup_ = nullptr;
  return temp;
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* GaiaPasswordReuse::mutable_reuse_lookup() {
  _has_bits_[0] |= 0x00000002u;
  if (reuse_lookup_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GaiaPasswordReuse_PasswordReuseLookup>(GetArenaNoVirtual());
    reuse_lookup_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.GaiaPasswordReuse.reuse_lookup)
  return reuse_lookup_;
}
inline void GaiaPasswordReuse::set_allocated_reuse_lookup(::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* reuse_lookup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reuse_lookup_;
  }
  if (reuse_lookup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reuse_lookup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reuse_lookup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reuse_lookup_ = reuse_lookup;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GaiaPasswordReuse.reuse_lookup)
}

// optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
inline bool GaiaPasswordReuse::has_dialog_interaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GaiaPasswordReuse::clear_dialog_interaction() {
  if (dialog_interaction_ != nullptr) dialog_interaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction& GaiaPasswordReuse::dialog_interaction() const {
  const ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* p = dialog_interaction_;
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.dialog_interaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction*>(
      &::sync_pb::_GaiaPasswordReuse_PasswordReuseDialogInteraction_default_instance_);
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* GaiaPasswordReuse::release_dialog_interaction() {
  // @@protoc_insertion_point(field_release:sync_pb.GaiaPasswordReuse.dialog_interaction)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* temp = dialog_interaction_;
  dialog_interaction_ = nullptr;
  return temp;
}
inline ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* GaiaPasswordReuse::mutable_dialog_interaction() {
  _has_bits_[0] |= 0x00000004u;
  if (dialog_interaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction>(GetArenaNoVirtual());
    dialog_interaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.GaiaPasswordReuse.dialog_interaction)
  return dialog_interaction_;
}
inline void GaiaPasswordReuse::set_allocated_dialog_interaction(::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* dialog_interaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dialog_interaction_;
  }
  if (dialog_interaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dialog_interaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dialog_interaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dialog_interaction_ = dialog_interaction;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GaiaPasswordReuse.dialog_interaction)
}

// optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;
inline bool GaiaPasswordReuse::has_password_captured() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GaiaPasswordReuse::clear_password_captured() {
  if (password_captured_ != nullptr) password_captured_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::GaiaPasswordReuse_PasswordCaptured& GaiaPasswordReuse::password_captured() const {
  const ::sync_pb::GaiaPasswordReuse_PasswordCaptured* p = password_captured_;
  // @@protoc_insertion_point(field_get:sync_pb.GaiaPasswordReuse.password_captured)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GaiaPasswordReuse_PasswordCaptured*>(
      &::sync_pb::_GaiaPasswordReuse_PasswordCaptured_default_instance_);
}
inline ::sync_pb::GaiaPasswordReuse_PasswordCaptured* GaiaPasswordReuse::release_password_captured() {
  // @@protoc_insertion_point(field_release:sync_pb.GaiaPasswordReuse.password_captured)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::GaiaPasswordReuse_PasswordCaptured* temp = password_captured_;
  password_captured_ = nullptr;
  return temp;
}
inline ::sync_pb::GaiaPasswordReuse_PasswordCaptured* GaiaPasswordReuse::mutable_password_captured() {
  _has_bits_[0] |= 0x00000008u;
  if (password_captured_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GaiaPasswordReuse_PasswordCaptured>(GetArenaNoVirtual());
    password_captured_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.GaiaPasswordReuse.password_captured)
  return password_captured_;
}
inline void GaiaPasswordReuse::set_allocated_password_captured(::sync_pb::GaiaPasswordReuse_PasswordCaptured* password_captured) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete password_captured_;
  }
  if (password_captured) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      password_captured = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password_captured, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  password_captured_ = password_captured;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.GaiaPasswordReuse.password_captured)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gaia_5fpassword_5freuse_2eproto
