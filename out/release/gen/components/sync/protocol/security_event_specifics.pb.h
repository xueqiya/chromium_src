// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: security_event_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_security_5fevent_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_security_5fevent_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "gaia_password_reuse.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_security_5fevent_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_security_5fevent_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class SecurityEventSpecifics;
class SecurityEventSpecificsDefaultTypeInternal;
extern SecurityEventSpecificsDefaultTypeInternal _SecurityEventSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::SecurityEventSpecifics* Arena::CreateMaybeMessage<::sync_pb::SecurityEventSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class SecurityEventSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SecurityEventSpecifics) */ {
 public:
  SecurityEventSpecifics();
  virtual ~SecurityEventSpecifics();

  SecurityEventSpecifics(const SecurityEventSpecifics& from);
  SecurityEventSpecifics(SecurityEventSpecifics&& from) noexcept
    : SecurityEventSpecifics() {
    *this = ::std::move(from);
  }

  inline SecurityEventSpecifics& operator=(const SecurityEventSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityEventSpecifics& operator=(SecurityEventSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SecurityEventSpecifics& default_instance();

  enum EventCase {
    kGaiaPasswordReuseEvent = 1,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityEventSpecifics* internal_default_instance() {
    return reinterpret_cast<const SecurityEventSpecifics*>(
               &_SecurityEventSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SecurityEventSpecifics& a, SecurityEventSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityEventSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityEventSpecifics* New() const final {
    return CreateMaybeMessage<SecurityEventSpecifics>(nullptr);
  }

  SecurityEventSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityEventSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SecurityEventSpecifics& from);
  void MergeFrom(const SecurityEventSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SecurityEventSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SecurityEventSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTimeUsecFieldNumber = 2,
    kGaiaPasswordReuseEventFieldNumber = 1,
  };
  // optional int64 event_time_usec = 2;
  bool has_event_time_usec() const;
  void clear_event_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 event_time_usec() const;
  void set_event_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
  bool has_gaia_password_reuse_event() const;
  void clear_gaia_password_reuse_event();
  const ::sync_pb::GaiaPasswordReuse& gaia_password_reuse_event() const;
  ::sync_pb::GaiaPasswordReuse* release_gaia_password_reuse_event();
  ::sync_pb::GaiaPasswordReuse* mutable_gaia_password_reuse_event();
  void set_allocated_gaia_password_reuse_event(::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event);

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.SecurityEventSpecifics)
 private:
  class _Internal;
  void set_has_gaia_password_reuse_event();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 event_time_usec_;
  union EventUnion {
    EventUnion() {}
    ::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event_;
  } event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_security_5fevent_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SecurityEventSpecifics

// optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
inline bool SecurityEventSpecifics::has_gaia_password_reuse_event() const {
  return event_case() == kGaiaPasswordReuseEvent;
}
inline void SecurityEventSpecifics::set_has_gaia_password_reuse_event() {
  _oneof_case_[0] = kGaiaPasswordReuseEvent;
}
inline ::sync_pb::GaiaPasswordReuse* SecurityEventSpecifics::release_gaia_password_reuse_event() {
  // @@protoc_insertion_point(field_release:sync_pb.SecurityEventSpecifics.gaia_password_reuse_event)
  if (has_gaia_password_reuse_event()) {
    clear_has_event();
      ::sync_pb::GaiaPasswordReuse* temp = event_.gaia_password_reuse_event_;
    event_.gaia_password_reuse_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::GaiaPasswordReuse& SecurityEventSpecifics::gaia_password_reuse_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityEventSpecifics.gaia_password_reuse_event)
  return has_gaia_password_reuse_event()
      ? *event_.gaia_password_reuse_event_
      : *reinterpret_cast< ::sync_pb::GaiaPasswordReuse*>(&::sync_pb::_GaiaPasswordReuse_default_instance_);
}
inline ::sync_pb::GaiaPasswordReuse* SecurityEventSpecifics::mutable_gaia_password_reuse_event() {
  if (!has_gaia_password_reuse_event()) {
    clear_event();
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = CreateMaybeMessage< ::sync_pb::GaiaPasswordReuse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityEventSpecifics.gaia_password_reuse_event)
  return event_.gaia_password_reuse_event_;
}

// optional int64 event_time_usec = 2;
inline bool SecurityEventSpecifics::has_event_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityEventSpecifics::clear_event_time_usec() {
  event_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SecurityEventSpecifics::event_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityEventSpecifics.event_time_usec)
  return event_time_usec_;
}
inline void SecurityEventSpecifics::set_event_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  event_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SecurityEventSpecifics.event_time_usec)
}

inline bool SecurityEventSpecifics::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void SecurityEventSpecifics::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SecurityEventSpecifics::EventCase SecurityEventSpecifics::event_case() const {
  return SecurityEventSpecifics::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_security_5fevent_5fspecifics_2eproto
