// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: theme_specifics.proto

#include "theme_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_theme_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThemeSpecifics_AutogeneratedTheme_theme_5fspecifics_2eproto;
namespace sync_pb {
class ThemeSpecifics_AutogeneratedThemeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThemeSpecifics_AutogeneratedTheme> _instance;
} _ThemeSpecifics_AutogeneratedTheme_default_instance_;
class ThemeSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThemeSpecifics> _instance;
} _ThemeSpecifics_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_ThemeSpecifics_theme_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ThemeSpecifics_default_instance_;
    new (ptr) ::sync_pb::ThemeSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ThemeSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThemeSpecifics_theme_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ThemeSpecifics_theme_5fspecifics_2eproto}, {
      &scc_info_ThemeSpecifics_AutogeneratedTheme_theme_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_ThemeSpecifics_AutogeneratedTheme_theme_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ThemeSpecifics_AutogeneratedTheme_default_instance_;
    new (ptr) ::sync_pb::ThemeSpecifics_AutogeneratedTheme();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ThemeSpecifics_AutogeneratedTheme::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThemeSpecifics_AutogeneratedTheme_theme_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ThemeSpecifics_AutogeneratedTheme_theme_5fspecifics_2eproto}, {}};

namespace sync_pb {

// ===================================================================

void ThemeSpecifics_AutogeneratedTheme::InitAsDefaultInstance() {
}
class ThemeSpecifics_AutogeneratedTheme::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeSpecifics_AutogeneratedTheme>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ThemeSpecifics_AutogeneratedTheme::ThemeSpecifics_AutogeneratedTheme()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ThemeSpecifics.AutogeneratedTheme)
}
ThemeSpecifics_AutogeneratedTheme::ThemeSpecifics_AutogeneratedTheme(const ThemeSpecifics_AutogeneratedTheme& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ThemeSpecifics.AutogeneratedTheme)
}

void ThemeSpecifics_AutogeneratedTheme::SharedCtor() {
  color_ = 0u;
}

ThemeSpecifics_AutogeneratedTheme::~ThemeSpecifics_AutogeneratedTheme() {
  // @@protoc_insertion_point(destructor:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  SharedDtor();
}

void ThemeSpecifics_AutogeneratedTheme::SharedDtor() {
}

void ThemeSpecifics_AutogeneratedTheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThemeSpecifics_AutogeneratedTheme& ThemeSpecifics_AutogeneratedTheme::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThemeSpecifics_AutogeneratedTheme_theme_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void ThemeSpecifics_AutogeneratedTheme::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ThemeSpecifics_AutogeneratedTheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ThemeSpecifics_AutogeneratedTheme::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_color(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ThemeSpecifics_AutogeneratedTheme::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ThemeSpecifics.AutogeneratedTheme)
}

size_t ThemeSpecifics_AutogeneratedTheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 color = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThemeSpecifics_AutogeneratedTheme::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ThemeSpecifics_AutogeneratedTheme*>(
      &from));
}

void ThemeSpecifics_AutogeneratedTheme::MergeFrom(const ThemeSpecifics_AutogeneratedTheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_color()) {
    set_color(from.color());
  }
}

void ThemeSpecifics_AutogeneratedTheme::CopyFrom(const ThemeSpecifics_AutogeneratedTheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeSpecifics_AutogeneratedTheme::IsInitialized() const {
  return true;
}

void ThemeSpecifics_AutogeneratedTheme::InternalSwap(ThemeSpecifics_AutogeneratedTheme* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(color_, other->color_);
}

std::string ThemeSpecifics_AutogeneratedTheme::GetTypeName() const {
  return "sync_pb.ThemeSpecifics.AutogeneratedTheme";
}


// ===================================================================

void ThemeSpecifics::InitAsDefaultInstance() {
  ::sync_pb::_ThemeSpecifics_default_instance_._instance.get_mutable()->autogenerated_theme_ = const_cast< ::sync_pb::ThemeSpecifics_AutogeneratedTheme*>(
      ::sync_pb::ThemeSpecifics_AutogeneratedTheme::internal_default_instance());
}
class ThemeSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeSpecifics>()._has_bits_);
  static void set_has_use_custom_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_system_theme_by_default(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_custom_theme_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_theme_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_theme_update_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::ThemeSpecifics_AutogeneratedTheme& autogenerated_theme(const ThemeSpecifics* msg);
  static void set_has_autogenerated_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sync_pb::ThemeSpecifics_AutogeneratedTheme&
ThemeSpecifics::_Internal::autogenerated_theme(const ThemeSpecifics* msg) {
  return *msg->autogenerated_theme_;
}
ThemeSpecifics::ThemeSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ThemeSpecifics)
}
ThemeSpecifics::ThemeSpecifics(const ThemeSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_theme_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_theme_name()) {
    custom_theme_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_theme_name_);
  }
  custom_theme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_theme_id()) {
    custom_theme_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_theme_id_);
  }
  custom_theme_update_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_theme_update_url()) {
    custom_theme_update_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_theme_update_url_);
  }
  if (from.has_autogenerated_theme()) {
    autogenerated_theme_ = new ::sync_pb::ThemeSpecifics_AutogeneratedTheme(*from.autogenerated_theme_);
  } else {
    autogenerated_theme_ = nullptr;
  }
  ::memcpy(&use_custom_theme_, &from.use_custom_theme_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_system_theme_by_default_) -
    reinterpret_cast<char*>(&use_custom_theme_)) + sizeof(use_system_theme_by_default_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ThemeSpecifics)
}

void ThemeSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThemeSpecifics_theme_5fspecifics_2eproto.base);
  custom_theme_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_theme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_theme_update_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&autogenerated_theme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_system_theme_by_default_) -
      reinterpret_cast<char*>(&autogenerated_theme_)) + sizeof(use_system_theme_by_default_));
}

ThemeSpecifics::~ThemeSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.ThemeSpecifics)
  SharedDtor();
}

void ThemeSpecifics::SharedDtor() {
  custom_theme_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_theme_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_theme_update_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete autogenerated_theme_;
}

void ThemeSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThemeSpecifics& ThemeSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThemeSpecifics_theme_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void ThemeSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ThemeSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      custom_theme_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      custom_theme_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      custom_theme_update_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(autogenerated_theme_ != nullptr);
      autogenerated_theme_->Clear();
    }
  }
  ::memset(&use_custom_theme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_system_theme_by_default_) -
      reinterpret_cast<char*>(&use_custom_theme_)) + sizeof(use_system_theme_by_default_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ThemeSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_custom_theme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_custom_theme(&has_bits);
          use_custom_theme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_system_theme_by_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_system_theme_by_default(&has_bits);
          use_system_theme_by_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_theme_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_custom_theme_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_theme_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_custom_theme_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_theme_update_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_custom_theme_update_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.ThemeSpecifics.AutogeneratedTheme autogenerated_theme = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_autogenerated_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ThemeSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ThemeSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_custom_theme = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_use_custom_theme(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_custom_theme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_system_theme_by_default = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_use_system_theme_by_default(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_system_theme_by_default_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_theme_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_theme_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_theme_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_theme_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_theme_update_url = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_theme_update_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ThemeSpecifics.AutogeneratedTheme autogenerated_theme = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autogenerated_theme()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ThemeSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ThemeSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ThemeSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ThemeSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_custom_theme = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->use_custom_theme(), output);
  }

  // optional bool use_system_theme_by_default = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->use_system_theme_by_default(), output);
  }

  // optional string custom_theme_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->custom_theme_name(), output);
  }

  // optional string custom_theme_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->custom_theme_id(), output);
  }

  // optional string custom_theme_update_url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->custom_theme_update_url(), output);
  }

  // optional .sync_pb.ThemeSpecifics.AutogeneratedTheme autogenerated_theme = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::autogenerated_theme(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ThemeSpecifics)
}

size_t ThemeSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ThemeSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string custom_theme_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->custom_theme_name());
    }

    // optional string custom_theme_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->custom_theme_id());
    }

    // optional string custom_theme_update_url = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->custom_theme_update_url());
    }

    // optional .sync_pb.ThemeSpecifics.AutogeneratedTheme autogenerated_theme = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autogenerated_theme_);
    }

    // optional bool use_custom_theme = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool use_system_theme_by_default = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThemeSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ThemeSpecifics*>(
      &from));
}

void ThemeSpecifics::MergeFrom(const ThemeSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ThemeSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      custom_theme_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_theme_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      custom_theme_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_theme_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      custom_theme_update_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_theme_update_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_autogenerated_theme()->::sync_pb::ThemeSpecifics_AutogeneratedTheme::MergeFrom(from.autogenerated_theme());
    }
    if (cached_has_bits & 0x00000010u) {
      use_custom_theme_ = from.use_custom_theme_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_system_theme_by_default_ = from.use_system_theme_by_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ThemeSpecifics::CopyFrom(const ThemeSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ThemeSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeSpecifics::IsInitialized() const {
  return true;
}

void ThemeSpecifics::InternalSwap(ThemeSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_theme_name_.Swap(&other->custom_theme_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_theme_id_.Swap(&other->custom_theme_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_theme_update_url_.Swap(&other->custom_theme_update_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(autogenerated_theme_, other->autogenerated_theme_);
  swap(use_custom_theme_, other->use_custom_theme_);
  swap(use_system_theme_by_default_, other->use_system_theme_by_default_);
}

std::string ThemeSpecifics::GetTypeName() const {
  return "sync_pb.ThemeSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::ThemeSpecifics_AutogeneratedTheme* Arena::CreateMaybeMessage< ::sync_pb::ThemeSpecifics_AutogeneratedTheme >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ThemeSpecifics_AutogeneratedTheme >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ThemeSpecifics* Arena::CreateMaybeMessage< ::sync_pb::ThemeSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ThemeSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
