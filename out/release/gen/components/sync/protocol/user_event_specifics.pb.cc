// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_event_specifics.proto

#include "user_event_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gaia_5fpassword_5freuse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GaiaPasswordReuse_gaia_5fpassword_5freuse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_ArcBackupAndRestoreConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_ArcGoogleLocationServiceConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_ArcMetricsAndUsageConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_ArcPlayTermsOfServiceConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_SyncConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserConsentTypes_UnifiedConsent_user_5fconsent_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fevent_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEventSpecifics_FieldTrial_user_5fevent_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fevent_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEventSpecifics_GaiaPasswordCaptured_user_5fevent_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fevent_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserEventSpecifics_LanguageDetection_user_5fevent_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fevent_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEventSpecifics_LanguageDetection_Language_user_5fevent_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fevent_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEventSpecifics_Test_user_5fevent_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fevent_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEventSpecifics_Translation_user_5fevent_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_5fevent_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_UserEventSpecifics_UserConsent_user_5fevent_5fspecifics_2eproto;
namespace sync_pb {
class UserEventSpecifics_TestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEventSpecifics_Test> _instance;
} _UserEventSpecifics_Test_default_instance_;
class UserEventSpecifics_FieldTrialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEventSpecifics_FieldTrial> _instance;
} _UserEventSpecifics_FieldTrial_default_instance_;
class UserEventSpecifics_LanguageDetection_LanguageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEventSpecifics_LanguageDetection_Language> _instance;
} _UserEventSpecifics_LanguageDetection_Language_default_instance_;
class UserEventSpecifics_LanguageDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEventSpecifics_LanguageDetection> _instance;
} _UserEventSpecifics_LanguageDetection_default_instance_;
class UserEventSpecifics_TranslationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEventSpecifics_Translation> _instance;
} _UserEventSpecifics_Translation_default_instance_;
class UserEventSpecifics_UserConsentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEventSpecifics_UserConsent> _instance;
  const ::sync_pb::UserConsentTypes_SyncConsent* sync_consent_;
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent_;
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent_;
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent_;
  const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent_;
  const ::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent_;
} _UserEventSpecifics_UserConsent_default_instance_;
class UserEventSpecifics_GaiaPasswordCapturedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEventSpecifics_GaiaPasswordCaptured> _instance;
} _UserEventSpecifics_GaiaPasswordCaptured_default_instance_;
class UserEventSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEventSpecifics> _instance;
  const ::sync_pb::UserEventSpecifics_Test* test_event_;
  const ::sync_pb::UserEventSpecifics_FieldTrial* field_trial_event_;
  const ::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event_;
  const ::sync_pb::UserEventSpecifics_Translation* translation_event_;
  const ::sync_pb::UserEventSpecifics_UserConsent* user_consent_;
  const ::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event_;
  const ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* gaia_password_captured_event_;
} _UserEventSpecifics_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_UserEventSpecifics_user_5fevent_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_UserEventSpecifics_default_instance_;
    new (ptr) ::sync_pb::UserEventSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::UserEventSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_UserEventSpecifics_user_5fevent_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_UserEventSpecifics_user_5fevent_5fspecifics_2eproto}, {
      &scc_info_UserEventSpecifics_Test_user_5fevent_5fspecifics_2eproto.base,
      &scc_info_UserEventSpecifics_FieldTrial_user_5fevent_5fspecifics_2eproto.base,
      &scc_info_UserEventSpecifics_LanguageDetection_user_5fevent_5fspecifics_2eproto.base,
      &scc_info_UserEventSpecifics_Translation_user_5fevent_5fspecifics_2eproto.base,
      &scc_info_UserEventSpecifics_UserConsent_user_5fevent_5fspecifics_2eproto.base,
      &scc_info_GaiaPasswordReuse_gaia_5fpassword_5freuse_2eproto.base,
      &scc_info_UserEventSpecifics_GaiaPasswordCaptured_user_5fevent_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_UserEventSpecifics_FieldTrial_user_5fevent_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_UserEventSpecifics_FieldTrial_default_instance_;
    new (ptr) ::sync_pb::UserEventSpecifics_FieldTrial();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::UserEventSpecifics_FieldTrial::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEventSpecifics_FieldTrial_user_5fevent_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserEventSpecifics_FieldTrial_user_5fevent_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_UserEventSpecifics_GaiaPasswordCaptured_user_5fevent_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_UserEventSpecifics_GaiaPasswordCaptured_default_instance_;
    new (ptr) ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEventSpecifics_GaiaPasswordCaptured_user_5fevent_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserEventSpecifics_GaiaPasswordCaptured_user_5fevent_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_UserEventSpecifics_LanguageDetection_user_5fevent_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_UserEventSpecifics_LanguageDetection_default_instance_;
    new (ptr) ::sync_pb::UserEventSpecifics_LanguageDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::UserEventSpecifics_LanguageDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserEventSpecifics_LanguageDetection_user_5fevent_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UserEventSpecifics_LanguageDetection_user_5fevent_5fspecifics_2eproto}, {
      &scc_info_UserEventSpecifics_LanguageDetection_Language_user_5fevent_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_UserEventSpecifics_LanguageDetection_Language_user_5fevent_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_UserEventSpecifics_LanguageDetection_Language_default_instance_;
    new (ptr) ::sync_pb::UserEventSpecifics_LanguageDetection_Language();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::UserEventSpecifics_LanguageDetection_Language::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEventSpecifics_LanguageDetection_Language_user_5fevent_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserEventSpecifics_LanguageDetection_Language_user_5fevent_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_UserEventSpecifics_Test_user_5fevent_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_UserEventSpecifics_Test_default_instance_;
    new (ptr) ::sync_pb::UserEventSpecifics_Test();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::UserEventSpecifics_Test::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEventSpecifics_Test_user_5fevent_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserEventSpecifics_Test_user_5fevent_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_UserEventSpecifics_Translation_user_5fevent_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_UserEventSpecifics_Translation_default_instance_;
    new (ptr) ::sync_pb::UserEventSpecifics_Translation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::UserEventSpecifics_Translation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserEventSpecifics_Translation_user_5fevent_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserEventSpecifics_Translation_user_5fevent_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_UserEventSpecifics_UserConsent_user_5fevent_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_UserEventSpecifics_UserConsent_default_instance_;
    new (ptr) ::sync_pb::UserEventSpecifics_UserConsent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::UserEventSpecifics_UserConsent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_UserEventSpecifics_UserConsent_user_5fevent_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_UserEventSpecifics_UserConsent_user_5fevent_5fspecifics_2eproto}, {
      &scc_info_UserConsentTypes_SyncConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_ArcBackupAndRestoreConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_ArcGoogleLocationServiceConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_ArcPlayTermsOfServiceConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_ArcMetricsAndUsageConsent_user_5fconsent_5ftypes_2eproto.base,
      &scc_info_UserConsentTypes_UnifiedConsent_user_5fconsent_5ftypes_2eproto.base,}};

namespace sync_pb {
bool UserEventSpecifics_Translation_Interaction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UserEventSpecifics_Translation_Interaction_strings[10] = {};

static const char UserEventSpecifics_Translation_Interaction_names[] =
  "ACCEPT"
  "AUTO_TRANSLATION_BY_LINK"
  "AUTO_TRANSLATION_BY_PREF"
  "DECLINE"
  "DISMISSED"
  "IGNORED"
  "INITIALIZATION_ERROR"
  "MANUAL"
  "TRANSLATION_REVERTED"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UserEventSpecifics_Translation_Interaction_entries[] = {
  { {UserEventSpecifics_Translation_Interaction_names + 0, 6}, 1 },
  { {UserEventSpecifics_Translation_Interaction_names + 6, 24}, 8 },
  { {UserEventSpecifics_Translation_Interaction_names + 30, 24}, 7 },
  { {UserEventSpecifics_Translation_Interaction_names + 54, 7}, 2 },
  { {UserEventSpecifics_Translation_Interaction_names + 61, 9}, 4 },
  { {UserEventSpecifics_Translation_Interaction_names + 70, 7}, 3 },
  { {UserEventSpecifics_Translation_Interaction_names + 77, 20}, 9 },
  { {UserEventSpecifics_Translation_Interaction_names + 97, 6}, 5 },
  { {UserEventSpecifics_Translation_Interaction_names + 103, 20}, 6 },
  { {UserEventSpecifics_Translation_Interaction_names + 123, 7}, 0 },
};

static const int UserEventSpecifics_Translation_Interaction_entries_by_number[] = {
  9, // 0 -> UNKNOWN
  0, // 1 -> ACCEPT
  3, // 2 -> DECLINE
  5, // 3 -> IGNORED
  4, // 4 -> DISMISSED
  7, // 5 -> MANUAL
  8, // 6 -> TRANSLATION_REVERTED
  2, // 7 -> AUTO_TRANSLATION_BY_PREF
  1, // 8 -> AUTO_TRANSLATION_BY_LINK
  6, // 9 -> INITIALIZATION_ERROR
};

const std::string& UserEventSpecifics_Translation_Interaction_Name(
    UserEventSpecifics_Translation_Interaction value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UserEventSpecifics_Translation_Interaction_entries,
          UserEventSpecifics_Translation_Interaction_entries_by_number,
          10, UserEventSpecifics_Translation_Interaction_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UserEventSpecifics_Translation_Interaction_entries,
      UserEventSpecifics_Translation_Interaction_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UserEventSpecifics_Translation_Interaction_strings[idx].get();
}
bool UserEventSpecifics_Translation_Interaction_Parse(
    const std::string& name, UserEventSpecifics_Translation_Interaction* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UserEventSpecifics_Translation_Interaction_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<UserEventSpecifics_Translation_Interaction>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::UNKNOWN;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::ACCEPT;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::DECLINE;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::IGNORED;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::DISMISSED;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::MANUAL;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::TRANSLATION_REVERTED;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::AUTO_TRANSLATION_BY_PREF;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::AUTO_TRANSLATION_BY_LINK;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::INITIALIZATION_ERROR;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::Interaction_MIN;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::Interaction_MAX;
constexpr int UserEventSpecifics_Translation::Interaction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool UserEventSpecifics_UserConsent_Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UserEventSpecifics_UserConsent_Feature_strings[7] = {};

static const char UserEventSpecifics_UserConsent_Feature_names[] =
  "ASSISTANT_ACTIVITY_CONTROL"
  "BACKUP_AND_RESTORE"
  "CHROME_SYNC"
  "CHROME_UNIFIED_CONSENT"
  "FEATURE_UNSPECIFIED"
  "GOOGLE_LOCATION_SERVICE"
  "PLAY_STORE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UserEventSpecifics_UserConsent_Feature_entries[] = {
  { {UserEventSpecifics_UserConsent_Feature_names + 0, 26}, 6 },
  { {UserEventSpecifics_UserConsent_Feature_names + 26, 18}, 3 },
  { {UserEventSpecifics_UserConsent_Feature_names + 44, 11}, 1 },
  { {UserEventSpecifics_UserConsent_Feature_names + 55, 22}, 5 },
  { {UserEventSpecifics_UserConsent_Feature_names + 77, 19}, 0 },
  { {UserEventSpecifics_UserConsent_Feature_names + 96, 23}, 4 },
  { {UserEventSpecifics_UserConsent_Feature_names + 119, 10}, 2 },
};

static const int UserEventSpecifics_UserConsent_Feature_entries_by_number[] = {
  4, // 0 -> FEATURE_UNSPECIFIED
  2, // 1 -> CHROME_SYNC
  6, // 2 -> PLAY_STORE
  1, // 3 -> BACKUP_AND_RESTORE
  5, // 4 -> GOOGLE_LOCATION_SERVICE
  3, // 5 -> CHROME_UNIFIED_CONSENT
  0, // 6 -> ASSISTANT_ACTIVITY_CONTROL
};

const std::string& UserEventSpecifics_UserConsent_Feature_Name(
    UserEventSpecifics_UserConsent_Feature value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UserEventSpecifics_UserConsent_Feature_entries,
          UserEventSpecifics_UserConsent_Feature_entries_by_number,
          7, UserEventSpecifics_UserConsent_Feature_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UserEventSpecifics_UserConsent_Feature_entries,
      UserEventSpecifics_UserConsent_Feature_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UserEventSpecifics_UserConsent_Feature_strings[idx].get();
}
bool UserEventSpecifics_UserConsent_Feature_Parse(
    const std::string& name, UserEventSpecifics_UserConsent_Feature* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UserEventSpecifics_UserConsent_Feature_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<UserEventSpecifics_UserConsent_Feature>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::FEATURE_UNSPECIFIED;
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::CHROME_SYNC;
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::PLAY_STORE;
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::BACKUP_AND_RESTORE;
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::GOOGLE_LOCATION_SERVICE;
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::CHROME_UNIFIED_CONSENT;
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::ASSISTANT_ACTIVITY_CONTROL;
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::Feature_MIN;
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::Feature_MAX;
constexpr int UserEventSpecifics_UserConsent::Feature_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_strings[3] = {};

static const char UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_names[] =
  "EXPIRED_28D_TIMER"
  "UNSPECIFIED"
  "USER_LOGGED_IN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_entries[] = {
  { {UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_names + 0, 17}, 2 },
  { {UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_names + 17, 11}, 0 },
  { {UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_names + 28, 14}, 1 },
};

static const int UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_entries_by_number[] = {
  1, // 0 -> UNSPECIFIED
  2, // 1 -> USER_LOGGED_IN
  0, // 2 -> EXPIRED_28D_TIMER
};

const std::string& UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name(
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_entries,
          UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_entries_by_number,
          3, UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_entries,
      UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_strings[idx].get();
}
bool UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Parse(
    const std::string& name, UserEventSpecifics_GaiaPasswordCaptured_EventTrigger* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<UserEventSpecifics_GaiaPasswordCaptured_EventTrigger>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured::UNSPECIFIED;
constexpr UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured::USER_LOGGED_IN;
constexpr UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured::EXPIRED_28D_TIMER;
constexpr UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured::EventTrigger_MIN;
constexpr UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured::EventTrigger_MAX;
constexpr int UserEventSpecifics_GaiaPasswordCaptured::EventTrigger_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void UserEventSpecifics_Test::InitAsDefaultInstance() {
}
class UserEventSpecifics_Test::_Internal {
 public:
  using HasBits = decltype(std::declval<UserEventSpecifics_Test>()._has_bits_);
};

UserEventSpecifics_Test::UserEventSpecifics_Test()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.Test)
}
UserEventSpecifics_Test::UserEventSpecifics_Test(const UserEventSpecifics_Test& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.Test)
}

void UserEventSpecifics_Test::SharedCtor() {
}

UserEventSpecifics_Test::~UserEventSpecifics_Test() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.Test)
  SharedDtor();
}

void UserEventSpecifics_Test::SharedDtor() {
}

void UserEventSpecifics_Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEventSpecifics_Test& UserEventSpecifics_Test::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEventSpecifics_Test_user_5fevent_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void UserEventSpecifics_Test::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserEventSpecifics_Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserEventSpecifics_Test::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.Test)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.Test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.Test)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserEventSpecifics_Test::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.Test)
}

size_t UserEventSpecifics_Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.Test)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEventSpecifics_Test::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserEventSpecifics_Test*>(
      &from));
}

void UserEventSpecifics_Test::MergeFrom(const UserEventSpecifics_Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserEventSpecifics_Test::CopyFrom(const UserEventSpecifics_Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_Test::IsInitialized() const {
  return true;
}

void UserEventSpecifics_Test::InternalSwap(UserEventSpecifics_Test* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string UserEventSpecifics_Test::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.Test";
}


// ===================================================================

void UserEventSpecifics_FieldTrial::InitAsDefaultInstance() {
}
class UserEventSpecifics_FieldTrial::_Internal {
 public:
  using HasBits = decltype(std::declval<UserEventSpecifics_FieldTrial>()._has_bits_);
};

UserEventSpecifics_FieldTrial::UserEventSpecifics_FieldTrial()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.FieldTrial)
}
UserEventSpecifics_FieldTrial::UserEventSpecifics_FieldTrial(const UserEventSpecifics_FieldTrial& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      variation_ids_(from.variation_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.FieldTrial)
}

void UserEventSpecifics_FieldTrial::SharedCtor() {
}

UserEventSpecifics_FieldTrial::~UserEventSpecifics_FieldTrial() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.FieldTrial)
  SharedDtor();
}

void UserEventSpecifics_FieldTrial::SharedDtor() {
}

void UserEventSpecifics_FieldTrial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEventSpecifics_FieldTrial& UserEventSpecifics_FieldTrial::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEventSpecifics_FieldTrial_user_5fevent_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void UserEventSpecifics_FieldTrial::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.FieldTrial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variation_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserEventSpecifics_FieldTrial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed32 variation_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_variation_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 13);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(mutable_variation_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserEventSpecifics_FieldTrial::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.FieldTrial)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 variation_ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13u, input, this->mutable_variation_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_variation_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.FieldTrial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.FieldTrial)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserEventSpecifics_FieldTrial::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.FieldTrial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 variation_ids = 1;
  for (int i = 0, n = this->variation_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(
      1, this->variation_ids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.FieldTrial)
}

size_t UserEventSpecifics_FieldTrial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.FieldTrial)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 variation_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variation_ids_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->variation_ids_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEventSpecifics_FieldTrial::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserEventSpecifics_FieldTrial*>(
      &from));
}

void UserEventSpecifics_FieldTrial::MergeFrom(const UserEventSpecifics_FieldTrial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.FieldTrial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variation_ids_.MergeFrom(from.variation_ids_);
}

void UserEventSpecifics_FieldTrial::CopyFrom(const UserEventSpecifics_FieldTrial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.FieldTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_FieldTrial::IsInitialized() const {
  return true;
}

void UserEventSpecifics_FieldTrial::InternalSwap(UserEventSpecifics_FieldTrial* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  variation_ids_.InternalSwap(&other->variation_ids_);
}

std::string UserEventSpecifics_FieldTrial::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.FieldTrial";
}


// ===================================================================

void UserEventSpecifics_LanguageDetection_Language::InitAsDefaultInstance() {
}
class UserEventSpecifics_LanguageDetection_Language::_Internal {
 public:
  using HasBits = decltype(std::declval<UserEventSpecifics_LanguageDetection_Language>()._has_bits_);
  static void set_has_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_reliable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserEventSpecifics_LanguageDetection_Language::UserEventSpecifics_LanguageDetection_Language()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.LanguageDetection.Language)
}
UserEventSpecifics_LanguageDetection_Language::UserEventSpecifics_LanguageDetection_Language(const UserEventSpecifics_LanguageDetection_Language& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_language_code()) {
    language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  is_reliable_ = from.is_reliable_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.LanguageDetection.Language)
}

void UserEventSpecifics_LanguageDetection_Language::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserEventSpecifics_LanguageDetection_Language_user_5fevent_5fspecifics_2eproto.base);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_reliable_ = false;
}

UserEventSpecifics_LanguageDetection_Language::~UserEventSpecifics_LanguageDetection_Language() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  SharedDtor();
}

void UserEventSpecifics_LanguageDetection_Language::SharedDtor() {
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserEventSpecifics_LanguageDetection_Language::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEventSpecifics_LanguageDetection_Language& UserEventSpecifics_LanguageDetection_Language::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEventSpecifics_LanguageDetection_Language_user_5fevent_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void UserEventSpecifics_LanguageDetection_Language::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_code_.ClearNonDefaultToEmptyNoArena();
  }
  is_reliable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserEventSpecifics_LanguageDetection_Language::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_language_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_reliable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_reliable(&has_bits);
          is_reliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserEventSpecifics_LanguageDetection_Language::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_reliable = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_reliable(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reliable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserEventSpecifics_LanguageDetection_Language::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  // optional bool is_reliable = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_reliable(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.LanguageDetection.Language)
}

size_t UserEventSpecifics_LanguageDetection_Language::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->language_code());
    }

    // optional bool is_reliable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEventSpecifics_LanguageDetection_Language::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserEventSpecifics_LanguageDetection_Language*>(
      &from));
}

void UserEventSpecifics_LanguageDetection_Language::MergeFrom(const UserEventSpecifics_LanguageDetection_Language& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_reliable_ = from.is_reliable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserEventSpecifics_LanguageDetection_Language::CopyFrom(const UserEventSpecifics_LanguageDetection_Language& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_LanguageDetection_Language::IsInitialized() const {
  return true;
}

void UserEventSpecifics_LanguageDetection_Language::InternalSwap(UserEventSpecifics_LanguageDetection_Language* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_reliable_, other->is_reliable_);
}

std::string UserEventSpecifics_LanguageDetection_Language::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.LanguageDetection.Language";
}


// ===================================================================

void UserEventSpecifics_LanguageDetection::InitAsDefaultInstance() {
}
class UserEventSpecifics_LanguageDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<UserEventSpecifics_LanguageDetection>()._has_bits_);
  static void set_has_adopted_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserEventSpecifics_LanguageDetection::UserEventSpecifics_LanguageDetection()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.LanguageDetection)
}
UserEventSpecifics_LanguageDetection::UserEventSpecifics_LanguageDetection(const UserEventSpecifics_LanguageDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      detected_languages_(from.detected_languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adopted_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_adopted_language_code()) {
    adopted_language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.adopted_language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.LanguageDetection)
}

void UserEventSpecifics_LanguageDetection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserEventSpecifics_LanguageDetection_user_5fevent_5fspecifics_2eproto.base);
  adopted_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserEventSpecifics_LanguageDetection::~UserEventSpecifics_LanguageDetection() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.LanguageDetection)
  SharedDtor();
}

void UserEventSpecifics_LanguageDetection::SharedDtor() {
  adopted_language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserEventSpecifics_LanguageDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEventSpecifics_LanguageDetection& UserEventSpecifics_LanguageDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEventSpecifics_LanguageDetection_user_5fevent_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void UserEventSpecifics_LanguageDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.LanguageDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detected_languages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    adopted_language_code_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserEventSpecifics_LanguageDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_detected_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional string adopted_language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_adopted_language_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserEventSpecifics_LanguageDetection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.LanguageDetection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_detected_languages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string adopted_language_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_adopted_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.LanguageDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.LanguageDetection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserEventSpecifics_LanguageDetection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.LanguageDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detected_languages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->detected_languages(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string adopted_language_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->adopted_language_code(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.LanguageDetection)
}

size_t UserEventSpecifics_LanguageDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.LanguageDetection)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->detected_languages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->detected_languages(static_cast<int>(i)));
    }
  }

  // optional string adopted_language_code = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->adopted_language_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEventSpecifics_LanguageDetection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserEventSpecifics_LanguageDetection*>(
      &from));
}

void UserEventSpecifics_LanguageDetection::MergeFrom(const UserEventSpecifics_LanguageDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.LanguageDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detected_languages_.MergeFrom(from.detected_languages_);
  if (from.has_adopted_language_code()) {
    _has_bits_[0] |= 0x00000001u;
    adopted_language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.adopted_language_code_);
  }
}

void UserEventSpecifics_LanguageDetection::CopyFrom(const UserEventSpecifics_LanguageDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.LanguageDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_LanguageDetection::IsInitialized() const {
  return true;
}

void UserEventSpecifics_LanguageDetection::InternalSwap(UserEventSpecifics_LanguageDetection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&detected_languages_)->InternalSwap(CastToBase(&other->detected_languages_));
  adopted_language_code_.Swap(&other->adopted_language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string UserEventSpecifics_LanguageDetection::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.LanguageDetection";
}


// ===================================================================

void UserEventSpecifics_Translation::InitAsDefaultInstance() {
}
class UserEventSpecifics_Translation::_Internal {
 public:
  using HasBits = decltype(std::declval<UserEventSpecifics_Translation>()._has_bits_);
  static void set_has_from_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_interaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UserEventSpecifics_Translation::UserEventSpecifics_Translation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.Translation)
}
UserEventSpecifics_Translation::UserEventSpecifics_Translation(const UserEventSpecifics_Translation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_language_code()) {
    from_language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_language_code_);
  }
  to_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_language_code()) {
    to_language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_language_code_);
  }
  interaction_ = from.interaction_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.Translation)
}

void UserEventSpecifics_Translation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserEventSpecifics_Translation_user_5fevent_5fspecifics_2eproto.base);
  from_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interaction_ = 0;
}

UserEventSpecifics_Translation::~UserEventSpecifics_Translation() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.Translation)
  SharedDtor();
}

void UserEventSpecifics_Translation::SharedDtor() {
  from_language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserEventSpecifics_Translation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEventSpecifics_Translation& UserEventSpecifics_Translation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEventSpecifics_Translation_user_5fevent_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void UserEventSpecifics_Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.Translation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      from_language_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      to_language_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  interaction_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserEventSpecifics_Translation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string from_language_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_from_language_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_to_language_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::UserEventSpecifics_Translation_Interaction_IsValid(val))) {
            set_interaction(static_cast<::sync_pb::UserEventSpecifics_Translation_Interaction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserEventSpecifics_Translation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.Translation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_language_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_from_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_language_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_to_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserEventSpecifics_Translation_Interaction_IsValid(value)) {
            set_interaction(static_cast< ::sync_pb::UserEventSpecifics_Translation_Interaction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.Translation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.Translation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserEventSpecifics_Translation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.Translation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_language_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_language_code(), output);
  }

  // optional string to_language_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to_language_code(), output);
  }

  // optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->interaction(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.Translation)
}

size_t UserEventSpecifics_Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.Translation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string from_language_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->from_language_code());
    }

    // optional string to_language_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->to_language_code());
    }

    // optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->interaction());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEventSpecifics_Translation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserEventSpecifics_Translation*>(
      &from));
}

void UserEventSpecifics_Translation::MergeFrom(const UserEventSpecifics_Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      from_language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_language_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      to_language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_language_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      interaction_ = from.interaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserEventSpecifics_Translation::CopyFrom(const UserEventSpecifics_Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_Translation::IsInitialized() const {
  return true;
}

void UserEventSpecifics_Translation::InternalSwap(UserEventSpecifics_Translation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_language_code_.Swap(&other->from_language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_language_code_.Swap(&other->to_language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(interaction_, other->interaction_);
}

std::string UserEventSpecifics_Translation::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.Translation";
}


// ===================================================================

void UserEventSpecifics_UserConsent::InitAsDefaultInstance() {
}
class UserEventSpecifics_UserConsent::_Internal {
 public:
  using HasBits = decltype(std::declval<UserEventSpecifics_UserConsent>()._has_bits_);
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_consent_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sync_pb::UserConsentTypes_SyncConsent& sync_consent(const UserEventSpecifics_UserConsent* msg);
  static const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& arc_backup_and_restore_consent(const UserEventSpecifics_UserConsent* msg);
  static const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& arc_location_service_consent(const UserEventSpecifics_UserConsent* msg);
  static const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& arc_play_terms_of_service_consent(const UserEventSpecifics_UserConsent* msg);
  static const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent& arc_metrics_and_usage_consent(const UserEventSpecifics_UserConsent* msg);
  static const ::sync_pb::UserConsentTypes_UnifiedConsent& unified_consent(const UserEventSpecifics_UserConsent* msg);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_confirmation_grd_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::sync_pb::UserConsentTypes_SyncConsent&
UserEventSpecifics_UserConsent::_Internal::sync_consent(const UserEventSpecifics_UserConsent* msg) {
  return *msg->consent_.sync_consent_;
}
const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent&
UserEventSpecifics_UserConsent::_Internal::arc_backup_and_restore_consent(const UserEventSpecifics_UserConsent* msg) {
  return *msg->consent_.arc_backup_and_restore_consent_;
}
const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent&
UserEventSpecifics_UserConsent::_Internal::arc_location_service_consent(const UserEventSpecifics_UserConsent* msg) {
  return *msg->consent_.arc_location_service_consent_;
}
const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent&
UserEventSpecifics_UserConsent::_Internal::arc_play_terms_of_service_consent(const UserEventSpecifics_UserConsent* msg) {
  return *msg->consent_.arc_play_terms_of_service_consent_;
}
const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent&
UserEventSpecifics_UserConsent::_Internal::arc_metrics_and_usage_consent(const UserEventSpecifics_UserConsent* msg) {
  return *msg->consent_.arc_metrics_and_usage_consent_;
}
const ::sync_pb::UserConsentTypes_UnifiedConsent&
UserEventSpecifics_UserConsent::_Internal::unified_consent(const UserEventSpecifics_UserConsent* msg) {
  return *msg->consent_.unified_consent_;
}
void UserEventSpecifics_UserConsent::set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (sync_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_consent, submessage_arena);
    }
    set_has_sync_consent();
    consent_.sync_consent_ = sync_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
}
void UserEventSpecifics_UserConsent::clear_sync_consent() {
  if (has_sync_consent()) {
    delete consent_.sync_consent_;
    clear_has_consent();
  }
}
void UserEventSpecifics_UserConsent::set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (arc_backup_and_restore_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc_backup_and_restore_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_backup_and_restore_consent, submessage_arena);
    }
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = arc_backup_and_restore_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
}
void UserEventSpecifics_UserConsent::clear_arc_backup_and_restore_consent() {
  if (has_arc_backup_and_restore_consent()) {
    delete consent_.arc_backup_and_restore_consent_;
    clear_has_consent();
  }
}
void UserEventSpecifics_UserConsent::set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (arc_location_service_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc_location_service_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_location_service_consent, submessage_arena);
    }
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = arc_location_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
}
void UserEventSpecifics_UserConsent::clear_arc_location_service_consent() {
  if (has_arc_location_service_consent()) {
    delete consent_.arc_location_service_consent_;
    clear_has_consent();
  }
}
void UserEventSpecifics_UserConsent::set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (arc_play_terms_of_service_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc_play_terms_of_service_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_play_terms_of_service_consent, submessage_arena);
    }
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = arc_play_terms_of_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
}
void UserEventSpecifics_UserConsent::clear_arc_play_terms_of_service_consent() {
  if (has_arc_play_terms_of_service_consent()) {
    delete consent_.arc_play_terms_of_service_consent_;
    clear_has_consent();
  }
}
void UserEventSpecifics_UserConsent::set_allocated_arc_metrics_and_usage_consent(::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (arc_metrics_and_usage_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc_metrics_and_usage_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc_metrics_and_usage_consent, submessage_arena);
    }
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = arc_metrics_and_usage_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
}
void UserEventSpecifics_UserConsent::clear_arc_metrics_and_usage_consent() {
  if (has_arc_metrics_and_usage_consent()) {
    delete consent_.arc_metrics_and_usage_consent_;
    clear_has_consent();
  }
}
void UserEventSpecifics_UserConsent::set_allocated_unified_consent(::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_consent();
  if (unified_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unified_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unified_consent, submessage_arena);
    }
    set_has_unified_consent();
    consent_.unified_consent_ = unified_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.unified_consent)
}
void UserEventSpecifics_UserConsent::clear_unified_consent() {
  if (has_unified_consent()) {
    delete consent_.unified_consent_;
    clear_has_consent();
  }
}
UserEventSpecifics_UserConsent::UserEventSpecifics_UserConsent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.UserConsent)
}
UserEventSpecifics_UserConsent::UserEventSpecifics_UserConsent(const UserEventSpecifics_UserConsent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      description_grd_ids_(from.description_grd_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_locale()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_id()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  ::memcpy(&feature_, &from.feature_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_consent_time_usec_) -
    reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  clear_has_consent();
  switch (from.consent_case()) {
    case kSyncConsent: {
      mutable_sync_consent()->::sync_pb::UserConsentTypes_SyncConsent::MergeFrom(from.sync_consent());
      break;
    }
    case kArcBackupAndRestoreConsent: {
      mutable_arc_backup_and_restore_consent()->::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(from.arc_backup_and_restore_consent());
      break;
    }
    case kArcLocationServiceConsent: {
      mutable_arc_location_service_consent()->::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(from.arc_location_service_consent());
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      mutable_arc_play_terms_of_service_consent()->::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(from.arc_play_terms_of_service_consent());
      break;
    }
    case kArcMetricsAndUsageConsent: {
      mutable_arc_metrics_and_usage_consent()->::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::MergeFrom(from.arc_metrics_and_usage_consent());
      break;
    }
    case kUnifiedConsent: {
      mutable_unified_consent()->::sync_pb::UserConsentTypes_UnifiedConsent::MergeFrom(from.unified_consent());
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.UserConsent)
}

void UserEventSpecifics_UserConsent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserEventSpecifics_UserConsent_user_5fevent_5fspecifics_2eproto.base);
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_consent_time_usec_) -
      reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  clear_has_consent();
}

UserEventSpecifics_UserConsent::~UserEventSpecifics_UserConsent() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.UserConsent)
  SharedDtor();
}

void UserEventSpecifics_UserConsent::SharedDtor() {
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_consent()) {
    clear_consent();
  }
}

void UserEventSpecifics_UserConsent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEventSpecifics_UserConsent& UserEventSpecifics_UserConsent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEventSpecifics_UserConsent_user_5fevent_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void UserEventSpecifics_UserConsent::clear_consent() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.UserEventSpecifics.UserConsent)
  switch (consent_case()) {
    case kSyncConsent: {
      delete consent_.sync_consent_;
      break;
    }
    case kArcBackupAndRestoreConsent: {
      delete consent_.arc_backup_and_restore_consent_;
      break;
    }
    case kArcLocationServiceConsent: {
      delete consent_.arc_location_service_consent_;
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      delete consent_.arc_play_terms_of_service_consent_;
      break;
    }
    case kArcMetricsAndUsageConsent: {
      delete consent_.arc_metrics_and_usage_consent_;
      break;
    }
    case kUnifiedConsent: {
      delete consent_.unified_consent_;
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSENT_NOT_SET;
}


void UserEventSpecifics_UserConsent::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.UserConsent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_grd_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      locale_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&feature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_consent_time_usec_) -
        reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  }
  clear_consent();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserEventSpecifics_UserConsent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::UserEventSpecifics_UserConsent_Feature_IsValid(val))) {
            set_feature(static_cast<::sync_pb::UserEventSpecifics_UserConsent_Feature>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int32 description_grd_ids = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_description_grd_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 confirmation_grd_id = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_confirmation_grd_id(&has_bits);
          confirmation_grd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string locale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_locale(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(val))) {
            set_status(static_cast<::sync_pb::UserConsentTypes_ConsentStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_sync_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_arc_backup_and_restore_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_arc_location_service_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_arc_play_terms_of_service_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_arc_metrics_and_usage_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 client_consent_time_usec = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_client_consent_time_usec(&has_bits);
          client_consent_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_unified_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserEventSpecifics_UserConsent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.UserConsent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserEventSpecifics_UserConsent_Feature_IsValid(value)) {
            set_feature(static_cast< ::sync_pb::UserEventSpecifics_UserConsent_Feature >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 description_grd_ids = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_description_grd_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_description_grd_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 confirmation_grd_id = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_confirmation_grd_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmation_grd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string locale = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_locale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arc_backup_and_restore_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arc_location_service_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arc_play_terms_of_service_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arc_metrics_and_usage_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 client_consent_time_usec = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_client_consent_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_consent_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unified_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.UserConsent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.UserConsent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserEventSpecifics_UserConsent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.UserConsent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->feature(), output);
  }

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  for (int i = 0, n = this->description_grd_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->description_grd_ids(i), output);
  }

  // optional int32 confirmation_grd_id = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->confirmation_grd_id(), output);
  }

  // optional string locale = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->locale(), output);
  }

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional string account_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account_id(), output);
  }

  switch (consent_case()) {
    case kSyncConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        7, _Internal::sync_consent(this), output);
      break;
    case kArcBackupAndRestoreConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        8, _Internal::arc_backup_and_restore_consent(this), output);
      break;
    case kArcLocationServiceConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        9, _Internal::arc_location_service_consent(this), output);
      break;
    case kArcPlayTermsOfServiceConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        10, _Internal::arc_play_terms_of_service_consent(this), output);
      break;
    case kArcMetricsAndUsageConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        11, _Internal::arc_metrics_and_usage_consent(this), output);
      break;
    default: ;
  }
  // optional int64 client_consent_time_usec = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->client_consent_time_usec(), output);
  }

  // optional .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
  if (has_unified_consent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::unified_consent(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.UserConsent)
}

size_t UserEventSpecifics_UserConsent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.UserConsent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->description_grd_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->description_grd_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string locale = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->locale());
    }

    // optional string account_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->account_id());
    }

    // optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->feature());
    }

    // optional int32 confirmation_grd_id = 3 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->confirmation_grd_id());
    }

    // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int64 client_consent_time_usec = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->client_consent_time_usec());
    }

  }
  switch (consent_case()) {
    // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
    case kSyncConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.sync_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
    case kArcBackupAndRestoreConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_backup_and_restore_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
    case kArcLocationServiceConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_location_service_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
    case kArcPlayTermsOfServiceConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_play_terms_of_service_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
    case kArcMetricsAndUsageConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.arc_metrics_and_usage_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
    case kUnifiedConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consent_.unified_consent_);
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEventSpecifics_UserConsent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserEventSpecifics_UserConsent*>(
      &from));
}

void UserEventSpecifics_UserConsent::MergeFrom(const UserEventSpecifics_UserConsent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.UserConsent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_grd_ids_.MergeFrom(from.description_grd_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      feature_ = from.feature_;
    }
    if (cached_has_bits & 0x00000008u) {
      confirmation_grd_id_ = from.confirmation_grd_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_consent_time_usec_ = from.client_consent_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.consent_case()) {
    case kSyncConsent: {
      mutable_sync_consent()->::sync_pb::UserConsentTypes_SyncConsent::MergeFrom(from.sync_consent());
      break;
    }
    case kArcBackupAndRestoreConsent: {
      mutable_arc_backup_and_restore_consent()->::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(from.arc_backup_and_restore_consent());
      break;
    }
    case kArcLocationServiceConsent: {
      mutable_arc_location_service_consent()->::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(from.arc_location_service_consent());
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      mutable_arc_play_terms_of_service_consent()->::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(from.arc_play_terms_of_service_consent());
      break;
    }
    case kArcMetricsAndUsageConsent: {
      mutable_arc_metrics_and_usage_consent()->::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::MergeFrom(from.arc_metrics_and_usage_consent());
      break;
    }
    case kUnifiedConsent: {
      mutable_unified_consent()->::sync_pb::UserConsentTypes_UnifiedConsent::MergeFrom(from.unified_consent());
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
}

void UserEventSpecifics_UserConsent::CopyFrom(const UserEventSpecifics_UserConsent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.UserConsent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_UserConsent::IsInitialized() const {
  return true;
}

void UserEventSpecifics_UserConsent::InternalSwap(UserEventSpecifics_UserConsent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_grd_ids_.InternalSwap(&other->description_grd_ids_);
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(feature_, other->feature_);
  swap(confirmation_grd_id_, other->confirmation_grd_id_);
  swap(status_, other->status_);
  swap(client_consent_time_usec_, other->client_consent_time_usec_);
  swap(consent_, other->consent_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string UserEventSpecifics_UserConsent::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.UserConsent";
}


// ===================================================================

void UserEventSpecifics_GaiaPasswordCaptured::InitAsDefaultInstance() {
}
class UserEventSpecifics_GaiaPasswordCaptured::_Internal {
 public:
  using HasBits = decltype(std::declval<UserEventSpecifics_GaiaPasswordCaptured>()._has_bits_);
  static void set_has_event_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserEventSpecifics_GaiaPasswordCaptured::UserEventSpecifics_GaiaPasswordCaptured()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
}
UserEventSpecifics_GaiaPasswordCaptured::UserEventSpecifics_GaiaPasswordCaptured(const UserEventSpecifics_GaiaPasswordCaptured& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_trigger_ = from.event_trigger_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
}

void UserEventSpecifics_GaiaPasswordCaptured::SharedCtor() {
  event_trigger_ = 0;
}

UserEventSpecifics_GaiaPasswordCaptured::~UserEventSpecifics_GaiaPasswordCaptured() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
  SharedDtor();
}

void UserEventSpecifics_GaiaPasswordCaptured::SharedDtor() {
}

void UserEventSpecifics_GaiaPasswordCaptured::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEventSpecifics_GaiaPasswordCaptured& UserEventSpecifics_GaiaPasswordCaptured::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEventSpecifics_GaiaPasswordCaptured_user_5fevent_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void UserEventSpecifics_GaiaPasswordCaptured::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_trigger_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserEventSpecifics_GaiaPasswordCaptured::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured.EventTrigger event_trigger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_IsValid(val))) {
            set_event_trigger(static_cast<::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserEventSpecifics_GaiaPasswordCaptured::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured.EventTrigger event_trigger = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_IsValid(value)) {
            set_event_trigger(static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserEventSpecifics_GaiaPasswordCaptured::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured.EventTrigger event_trigger = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->event_trigger(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
}

size_t UserEventSpecifics_GaiaPasswordCaptured::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured.EventTrigger event_trigger = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event_trigger());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEventSpecifics_GaiaPasswordCaptured::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserEventSpecifics_GaiaPasswordCaptured*>(
      &from));
}

void UserEventSpecifics_GaiaPasswordCaptured::MergeFrom(const UserEventSpecifics_GaiaPasswordCaptured& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event_trigger()) {
    set_event_trigger(from.event_trigger());
  }
}

void UserEventSpecifics_GaiaPasswordCaptured::CopyFrom(const UserEventSpecifics_GaiaPasswordCaptured& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_GaiaPasswordCaptured::IsInitialized() const {
  return true;
}

void UserEventSpecifics_GaiaPasswordCaptured::InternalSwap(UserEventSpecifics_GaiaPasswordCaptured* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_trigger_, other->event_trigger_);
}

std::string UserEventSpecifics_GaiaPasswordCaptured::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.GaiaPasswordCaptured";
}


// ===================================================================

void UserEventSpecifics::InitAsDefaultInstance() {
}
class UserEventSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<UserEventSpecifics>()._has_bits_);
  static void set_has_event_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_navigation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::UserEventSpecifics_Test& test_event(const UserEventSpecifics* msg);
  static const ::sync_pb::UserEventSpecifics_FieldTrial& field_trial_event(const UserEventSpecifics* msg);
  static const ::sync_pb::UserEventSpecifics_LanguageDetection& language_detection_event(const UserEventSpecifics* msg);
  static const ::sync_pb::UserEventSpecifics_Translation& translation_event(const UserEventSpecifics* msg);
  static const ::sync_pb::UserEventSpecifics_UserConsent& user_consent(const UserEventSpecifics* msg);
  static const ::sync_pb::GaiaPasswordReuse& gaia_password_reuse_event(const UserEventSpecifics* msg);
  static const ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured& gaia_password_captured_event(const UserEventSpecifics* msg);
};

const ::sync_pb::UserEventSpecifics_Test&
UserEventSpecifics::_Internal::test_event(const UserEventSpecifics* msg) {
  return *msg->event_.test_event_;
}
const ::sync_pb::UserEventSpecifics_FieldTrial&
UserEventSpecifics::_Internal::field_trial_event(const UserEventSpecifics* msg) {
  return *msg->event_.field_trial_event_;
}
const ::sync_pb::UserEventSpecifics_LanguageDetection&
UserEventSpecifics::_Internal::language_detection_event(const UserEventSpecifics* msg) {
  return *msg->event_.language_detection_event_;
}
const ::sync_pb::UserEventSpecifics_Translation&
UserEventSpecifics::_Internal::translation_event(const UserEventSpecifics* msg) {
  return *msg->event_.translation_event_;
}
const ::sync_pb::UserEventSpecifics_UserConsent&
UserEventSpecifics::_Internal::user_consent(const UserEventSpecifics* msg) {
  return *msg->event_.user_consent_;
}
const ::sync_pb::GaiaPasswordReuse&
UserEventSpecifics::_Internal::gaia_password_reuse_event(const UserEventSpecifics* msg) {
  return *msg->event_.gaia_password_reuse_event_;
}
const ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured&
UserEventSpecifics::_Internal::gaia_password_captured_event(const UserEventSpecifics* msg) {
  return *msg->event_.gaia_password_captured_event_;
}
void UserEventSpecifics::set_allocated_test_event(::sync_pb::UserEventSpecifics_Test* test_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (test_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      test_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_event, submessage_arena);
    }
    set_has_test_event();
    event_.test_event_ = test_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.test_event)
}
void UserEventSpecifics::set_allocated_field_trial_event(::sync_pb::UserEventSpecifics_FieldTrial* field_trial_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (field_trial_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      field_trial_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field_trial_event, submessage_arena);
    }
    set_has_field_trial_event();
    event_.field_trial_event_ = field_trial_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.field_trial_event)
}
void UserEventSpecifics::set_allocated_language_detection_event(::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (language_detection_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      language_detection_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, language_detection_event, submessage_arena);
    }
    set_has_language_detection_event();
    event_.language_detection_event_ = language_detection_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.language_detection_event)
}
void UserEventSpecifics::set_allocated_translation_event(::sync_pb::UserEventSpecifics_Translation* translation_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (translation_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      translation_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation_event, submessage_arena);
    }
    set_has_translation_event();
    event_.translation_event_ = translation_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.translation_event)
}
void UserEventSpecifics::set_allocated_user_consent(::sync_pb::UserEventSpecifics_UserConsent* user_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (user_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_consent, submessage_arena);
    }
    set_has_user_consent();
    event_.user_consent_ = user_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.user_consent)
}
void UserEventSpecifics::set_allocated_gaia_password_reuse_event(::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (gaia_password_reuse_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gaia_password_reuse_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaia_password_reuse_event, submessage_arena);
    }
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = gaia_password_reuse_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
}
void UserEventSpecifics::clear_gaia_password_reuse_event() {
  if (has_gaia_password_reuse_event()) {
    delete event_.gaia_password_reuse_event_;
    clear_has_event();
  }
}
void UserEventSpecifics::set_allocated_gaia_password_captured_event(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* gaia_password_captured_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (gaia_password_captured_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gaia_password_captured_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaia_password_captured_event, submessage_arena);
    }
    set_has_gaia_password_captured_event();
    event_.gaia_password_captured_event_ = gaia_password_captured_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.gaia_password_captured_event)
}
UserEventSpecifics::UserEventSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics)
}
UserEventSpecifics::UserEventSpecifics(const UserEventSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_time_usec_, &from.event_time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&event_time_usec_)) + sizeof(session_id_));
  clear_has_event();
  switch (from.event_case()) {
    case kTestEvent: {
      mutable_test_event()->::sync_pb::UserEventSpecifics_Test::MergeFrom(from.test_event());
      break;
    }
    case kFieldTrialEvent: {
      mutable_field_trial_event()->::sync_pb::UserEventSpecifics_FieldTrial::MergeFrom(from.field_trial_event());
      break;
    }
    case kLanguageDetectionEvent: {
      mutable_language_detection_event()->::sync_pb::UserEventSpecifics_LanguageDetection::MergeFrom(from.language_detection_event());
      break;
    }
    case kTranslationEvent: {
      mutable_translation_event()->::sync_pb::UserEventSpecifics_Translation::MergeFrom(from.translation_event());
      break;
    }
    case kUserConsent: {
      mutable_user_consent()->::sync_pb::UserEventSpecifics_UserConsent::MergeFrom(from.user_consent());
      break;
    }
    case kGaiaPasswordReuseEvent: {
      mutable_gaia_password_reuse_event()->::sync_pb::GaiaPasswordReuse::MergeFrom(from.gaia_password_reuse_event());
      break;
    }
    case kGaiaPasswordCapturedEvent: {
      mutable_gaia_password_captured_event()->::sync_pb::UserEventSpecifics_GaiaPasswordCaptured::MergeFrom(from.gaia_password_captured_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics)
}

void UserEventSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserEventSpecifics_user_5fevent_5fspecifics_2eproto.base);
  ::memset(&event_time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&event_time_usec_)) + sizeof(session_id_));
  clear_has_event();
}

UserEventSpecifics::~UserEventSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics)
  SharedDtor();
}

void UserEventSpecifics::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void UserEventSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEventSpecifics& UserEventSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEventSpecifics_user_5fevent_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void UserEventSpecifics::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.UserEventSpecifics)
  switch (event_case()) {
    case kTestEvent: {
      delete event_.test_event_;
      break;
    }
    case kFieldTrialEvent: {
      delete event_.field_trial_event_;
      break;
    }
    case kLanguageDetectionEvent: {
      delete event_.language_detection_event_;
      break;
    }
    case kTranslationEvent: {
      delete event_.translation_event_;
      break;
    }
    case kUserConsent: {
      delete event_.user_consent_;
      break;
    }
    case kGaiaPasswordReuseEvent: {
      delete event_.gaia_password_reuse_event_;
      break;
    }
    case kGaiaPasswordCapturedEvent: {
      delete event_.gaia_password_captured_event_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void UserEventSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&event_time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_id_) -
        reinterpret_cast<char*>(&event_time_usec_)) + sizeof(session_id_));
  }
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserEventSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 event_time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_time_usec(&has_bits);
          event_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 navigation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_navigation_id(&has_bits);
          navigation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserEventSpecifics.Test test_event = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_test_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserEventSpecifics.FieldTrial field_trial_event = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_field_trial_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_language_detection_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserEventSpecifics.Translation translation_event = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_translation_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserEventSpecifics.UserConsent user_consent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_user_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured gaia_password_captured_event = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_gaia_password_captured_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_gaia_password_reuse_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserEventSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 event_time_usec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_event_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 navigation_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_navigation_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &navigation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 session_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_session_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.Test test_event = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_test_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.FieldTrial field_trial_event = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_field_trial_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_language_detection_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.Translation translation_event = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_translation_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.UserConsent user_consent = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured gaia_password_captured_event = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gaia_password_captured_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gaia_password_reuse_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserEventSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 event_time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->event_time_usec(), output);
  }

  // optional int64 navigation_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->navigation_id(), output);
  }

  // optional fixed64 session_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(3, this->session_id(), output);
  }

  switch (event_case()) {
    case kTestEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        8, _Internal::test_event(this), output);
      break;
    case kFieldTrialEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        9, _Internal::field_trial_event(this), output);
      break;
    case kLanguageDetectionEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        10, _Internal::language_detection_event(this), output);
      break;
    case kTranslationEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        11, _Internal::translation_event(this), output);
      break;
    case kUserConsent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        12, _Internal::user_consent(this), output);
      break;
    case kGaiaPasswordCapturedEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        15, _Internal::gaia_password_captured_event(this), output);
      break;
    case kGaiaPasswordReuseEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        104, _Internal::gaia_password_reuse_event(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics)
}

size_t UserEventSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 event_time_usec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->event_time_usec());
    }

    // optional int64 navigation_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->navigation_id());
    }

    // optional fixed64 session_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  switch (event_case()) {
    // optional .sync_pb.UserEventSpecifics.Test test_event = 8;
    case kTestEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.test_event_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics.FieldTrial field_trial_event = 9;
    case kFieldTrialEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.field_trial_event_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10;
    case kLanguageDetectionEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.language_detection_event_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics.Translation translation_event = 11;
    case kTranslationEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.translation_event_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics.UserConsent user_consent = 12;
    case kUserConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.user_consent_);
      break;
    }
    // optional .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 104;
    case kGaiaPasswordReuseEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.gaia_password_reuse_event_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured gaia_password_captured_event = 15;
    case kGaiaPasswordCapturedEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.gaia_password_captured_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEventSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserEventSpecifics*>(
      &from));
}

void UserEventSpecifics::MergeFrom(const UserEventSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_time_usec_ = from.event_time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      navigation_id_ = from.navigation_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.event_case()) {
    case kTestEvent: {
      mutable_test_event()->::sync_pb::UserEventSpecifics_Test::MergeFrom(from.test_event());
      break;
    }
    case kFieldTrialEvent: {
      mutable_field_trial_event()->::sync_pb::UserEventSpecifics_FieldTrial::MergeFrom(from.field_trial_event());
      break;
    }
    case kLanguageDetectionEvent: {
      mutable_language_detection_event()->::sync_pb::UserEventSpecifics_LanguageDetection::MergeFrom(from.language_detection_event());
      break;
    }
    case kTranslationEvent: {
      mutable_translation_event()->::sync_pb::UserEventSpecifics_Translation::MergeFrom(from.translation_event());
      break;
    }
    case kUserConsent: {
      mutable_user_consent()->::sync_pb::UserEventSpecifics_UserConsent::MergeFrom(from.user_consent());
      break;
    }
    case kGaiaPasswordReuseEvent: {
      mutable_gaia_password_reuse_event()->::sync_pb::GaiaPasswordReuse::MergeFrom(from.gaia_password_reuse_event());
      break;
    }
    case kGaiaPasswordCapturedEvent: {
      mutable_gaia_password_captured_event()->::sync_pb::UserEventSpecifics_GaiaPasswordCaptured::MergeFrom(from.gaia_password_captured_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void UserEventSpecifics::CopyFrom(const UserEventSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics::IsInitialized() const {
  return true;
}

void UserEventSpecifics::InternalSwap(UserEventSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_time_usec_, other->event_time_usec_);
  swap(navigation_id_, other->navigation_id_);
  swap(session_id_, other->session_id_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string UserEventSpecifics::GetTypeName() const {
  return "sync_pb.UserEventSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::UserEventSpecifics_Test* Arena::CreateMaybeMessage< ::sync_pb::UserEventSpecifics_Test >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::UserEventSpecifics_Test >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::UserEventSpecifics_FieldTrial* Arena::CreateMaybeMessage< ::sync_pb::UserEventSpecifics_FieldTrial >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::UserEventSpecifics_FieldTrial >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::UserEventSpecifics_LanguageDetection_Language* Arena::CreateMaybeMessage< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::UserEventSpecifics_LanguageDetection* Arena::CreateMaybeMessage< ::sync_pb::UserEventSpecifics_LanguageDetection >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::UserEventSpecifics_LanguageDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::UserEventSpecifics_Translation* Arena::CreateMaybeMessage< ::sync_pb::UserEventSpecifics_Translation >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::UserEventSpecifics_Translation >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::UserEventSpecifics_UserConsent* Arena::CreateMaybeMessage< ::sync_pb::UserEventSpecifics_UserConsent >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::UserEventSpecifics_UserConsent >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* Arena::CreateMaybeMessage< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::UserEventSpecifics* Arena::CreateMaybeMessage< ::sync_pb::UserEventSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::UserEventSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
