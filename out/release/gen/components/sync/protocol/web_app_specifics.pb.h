// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: web_app_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_web_5fapp_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_web_5fapp_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_web_5fapp_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_web_5fapp_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class WebAppSpecifics;
class WebAppSpecificsDefaultTypeInternal;
extern WebAppSpecificsDefaultTypeInternal _WebAppSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::WebAppSpecifics* Arena::CreateMaybeMessage<::sync_pb::WebAppSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum WebAppSpecifics_UserDisplayMode : int {
  WebAppSpecifics_UserDisplayMode_BROWSER = 1,
  WebAppSpecifics_UserDisplayMode_STANDALONE = 3
};
bool WebAppSpecifics_UserDisplayMode_IsValid(int value);
constexpr WebAppSpecifics_UserDisplayMode WebAppSpecifics_UserDisplayMode_UserDisplayMode_MIN = WebAppSpecifics_UserDisplayMode_BROWSER;
constexpr WebAppSpecifics_UserDisplayMode WebAppSpecifics_UserDisplayMode_UserDisplayMode_MAX = WebAppSpecifics_UserDisplayMode_STANDALONE;
constexpr int WebAppSpecifics_UserDisplayMode_UserDisplayMode_ARRAYSIZE = WebAppSpecifics_UserDisplayMode_UserDisplayMode_MAX + 1;

const std::string& WebAppSpecifics_UserDisplayMode_Name(WebAppSpecifics_UserDisplayMode value);
template<typename T>
inline const std::string& WebAppSpecifics_UserDisplayMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WebAppSpecifics_UserDisplayMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WebAppSpecifics_UserDisplayMode_Name.");
  return WebAppSpecifics_UserDisplayMode_Name(static_cast<WebAppSpecifics_UserDisplayMode>(enum_t_value));
}
bool WebAppSpecifics_UserDisplayMode_Parse(
    const std::string& name, WebAppSpecifics_UserDisplayMode* value);
// ===================================================================

class WebAppSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WebAppSpecifics) */ {
 public:
  WebAppSpecifics();
  virtual ~WebAppSpecifics();

  WebAppSpecifics(const WebAppSpecifics& from);
  WebAppSpecifics(WebAppSpecifics&& from) noexcept
    : WebAppSpecifics() {
    *this = ::std::move(from);
  }

  inline WebAppSpecifics& operator=(const WebAppSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebAppSpecifics& operator=(WebAppSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WebAppSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebAppSpecifics* internal_default_instance() {
    return reinterpret_cast<const WebAppSpecifics*>(
               &_WebAppSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebAppSpecifics& a, WebAppSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(WebAppSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebAppSpecifics* New() const final {
    return CreateMaybeMessage<WebAppSpecifics>(nullptr);
  }

  WebAppSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebAppSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WebAppSpecifics& from);
  void MergeFrom(const WebAppSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebAppSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WebAppSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WebAppSpecifics_UserDisplayMode UserDisplayMode;
  static constexpr UserDisplayMode BROWSER =
    WebAppSpecifics_UserDisplayMode_BROWSER;
  static constexpr UserDisplayMode STANDALONE =
    WebAppSpecifics_UserDisplayMode_STANDALONE;
  static inline bool UserDisplayMode_IsValid(int value) {
    return WebAppSpecifics_UserDisplayMode_IsValid(value);
  }
  static constexpr UserDisplayMode UserDisplayMode_MIN =
    WebAppSpecifics_UserDisplayMode_UserDisplayMode_MIN;
  static constexpr UserDisplayMode UserDisplayMode_MAX =
    WebAppSpecifics_UserDisplayMode_UserDisplayMode_MAX;
  static constexpr int UserDisplayMode_ARRAYSIZE =
    WebAppSpecifics_UserDisplayMode_UserDisplayMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UserDisplayMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserDisplayMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserDisplayMode_Name.");
    return WebAppSpecifics_UserDisplayMode_Name(enum_t_value);
  }
  static inline bool UserDisplayMode_Parse(const std::string& name,
      UserDisplayMode* value) {
    return WebAppSpecifics_UserDisplayMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLaunchUrlFieldNumber = 1,
    kNameFieldNumber = 2,
    kThemeColorFieldNumber = 4,
    kUserDisplayModeFieldNumber = 3,
  };
  // optional string launch_url = 1;
  bool has_launch_url() const;
  void clear_launch_url();
  const std::string& launch_url() const;
  void set_launch_url(const std::string& value);
  void set_launch_url(std::string&& value);
  void set_launch_url(const char* value);
  void set_launch_url(const char* value, size_t size);
  std::string* mutable_launch_url();
  std::string* release_launch_url();
  void set_allocated_launch_url(std::string* launch_url);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional uint32 theme_color = 4;
  bool has_theme_color() const;
  void clear_theme_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 theme_color() const;
  void set_theme_color(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .sync_pb.WebAppSpecifics.UserDisplayMode user_display_mode = 3;
  bool has_user_display_mode() const;
  void clear_user_display_mode();
  ::sync_pb::WebAppSpecifics_UserDisplayMode user_display_mode() const;
  void set_user_display_mode(::sync_pb::WebAppSpecifics_UserDisplayMode value);

  // @@protoc_insertion_point(class_scope:sync_pb.WebAppSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 theme_color_;
  int user_display_mode_;
  friend struct ::TableStruct_web_5fapp_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebAppSpecifics

// optional string launch_url = 1;
inline bool WebAppSpecifics::has_launch_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebAppSpecifics::clear_launch_url() {
  launch_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebAppSpecifics::launch_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.launch_url)
  return launch_url_.GetNoArena();
}
inline void WebAppSpecifics::set_launch_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  launch_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.launch_url)
}
inline void WebAppSpecifics::set_launch_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  launch_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WebAppSpecifics.launch_url)
}
inline void WebAppSpecifics::set_launch_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  launch_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WebAppSpecifics.launch_url)
}
inline void WebAppSpecifics::set_launch_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  launch_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WebAppSpecifics.launch_url)
}
inline std::string* WebAppSpecifics::mutable_launch_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WebAppSpecifics.launch_url)
  return launch_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebAppSpecifics::release_launch_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WebAppSpecifics.launch_url)
  if (!has_launch_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return launch_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebAppSpecifics::set_allocated_launch_url(std::string* launch_url) {
  if (launch_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  launch_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launch_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebAppSpecifics.launch_url)
}

// optional string name = 2;
inline bool WebAppSpecifics::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebAppSpecifics::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebAppSpecifics::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.name)
  return name_.GetNoArena();
}
inline void WebAppSpecifics::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.name)
}
inline void WebAppSpecifics::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WebAppSpecifics.name)
}
inline void WebAppSpecifics::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WebAppSpecifics.name)
}
inline void WebAppSpecifics::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WebAppSpecifics.name)
}
inline std::string* WebAppSpecifics::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WebAppSpecifics.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebAppSpecifics::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WebAppSpecifics.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebAppSpecifics::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebAppSpecifics.name)
}

// optional .sync_pb.WebAppSpecifics.UserDisplayMode user_display_mode = 3;
inline bool WebAppSpecifics::has_user_display_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WebAppSpecifics::clear_user_display_mode() {
  user_display_mode_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::sync_pb::WebAppSpecifics_UserDisplayMode WebAppSpecifics::user_display_mode() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.user_display_mode)
  return static_cast< ::sync_pb::WebAppSpecifics_UserDisplayMode >(user_display_mode_);
}
inline void WebAppSpecifics::set_user_display_mode(::sync_pb::WebAppSpecifics_UserDisplayMode value) {
  assert(::sync_pb::WebAppSpecifics_UserDisplayMode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  user_display_mode_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.user_display_mode)
}

// optional uint32 theme_color = 4;
inline bool WebAppSpecifics::has_theme_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WebAppSpecifics::clear_theme_color() {
  theme_color_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WebAppSpecifics::theme_color() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebAppSpecifics.theme_color)
  return theme_color_;
}
inline void WebAppSpecifics::set_theme_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  theme_color_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WebAppSpecifics.theme_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::WebAppSpecifics_UserDisplayMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_web_5fapp_5fspecifics_2eproto
