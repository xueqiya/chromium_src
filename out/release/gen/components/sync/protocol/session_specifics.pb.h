// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_session_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_session_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "sync_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_session_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_session_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class NavigationRedirect;
class NavigationRedirectDefaultTypeInternal;
extern NavigationRedirectDefaultTypeInternal _NavigationRedirect_default_instance_;
class ReplacedNavigation;
class ReplacedNavigationDefaultTypeInternal;
extern ReplacedNavigationDefaultTypeInternal _ReplacedNavigation_default_instance_;
class SessionHeader;
class SessionHeaderDefaultTypeInternal;
extern SessionHeaderDefaultTypeInternal _SessionHeader_default_instance_;
class SessionSpecifics;
class SessionSpecificsDefaultTypeInternal;
extern SessionSpecificsDefaultTypeInternal _SessionSpecifics_default_instance_;
class SessionTab;
class SessionTabDefaultTypeInternal;
extern SessionTabDefaultTypeInternal _SessionTab_default_instance_;
class SessionWindow;
class SessionWindowDefaultTypeInternal;
extern SessionWindowDefaultTypeInternal _SessionWindow_default_instance_;
class TabNavigation;
class TabNavigationDefaultTypeInternal;
extern TabNavigationDefaultTypeInternal _TabNavigation_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::NavigationRedirect* Arena::CreateMaybeMessage<::sync_pb::NavigationRedirect>(Arena*);
template<> ::sync_pb::ReplacedNavigation* Arena::CreateMaybeMessage<::sync_pb::ReplacedNavigation>(Arena*);
template<> ::sync_pb::SessionHeader* Arena::CreateMaybeMessage<::sync_pb::SessionHeader>(Arena*);
template<> ::sync_pb::SessionSpecifics* Arena::CreateMaybeMessage<::sync_pb::SessionSpecifics>(Arena*);
template<> ::sync_pb::SessionTab* Arena::CreateMaybeMessage<::sync_pb::SessionTab>(Arena*);
template<> ::sync_pb::SessionWindow* Arena::CreateMaybeMessage<::sync_pb::SessionWindow>(Arena*);
template<> ::sync_pb::TabNavigation* Arena::CreateMaybeMessage<::sync_pb::TabNavigation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum SessionWindow_BrowserType : int {
  SessionWindow_BrowserType_TYPE_TABBED = 1,
  SessionWindow_BrowserType_TYPE_POPUP = 2,
  SessionWindow_BrowserType_TYPE_CUSTOM_TAB = 3
};
bool SessionWindow_BrowserType_IsValid(int value);
constexpr SessionWindow_BrowserType SessionWindow_BrowserType_BrowserType_MIN = SessionWindow_BrowserType_TYPE_TABBED;
constexpr SessionWindow_BrowserType SessionWindow_BrowserType_BrowserType_MAX = SessionWindow_BrowserType_TYPE_CUSTOM_TAB;
constexpr int SessionWindow_BrowserType_BrowserType_ARRAYSIZE = SessionWindow_BrowserType_BrowserType_MAX + 1;

const std::string& SessionWindow_BrowserType_Name(SessionWindow_BrowserType value);
template<typename T>
inline const std::string& SessionWindow_BrowserType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionWindow_BrowserType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionWindow_BrowserType_Name.");
  return SessionWindow_BrowserType_Name(static_cast<SessionWindow_BrowserType>(enum_t_value));
}
bool SessionWindow_BrowserType_Parse(
    const std::string& name, SessionWindow_BrowserType* value);
enum SessionTab_FaviconType : int {
  SessionTab_FaviconType_TYPE_WEB_FAVICON = 1
};
bool SessionTab_FaviconType_IsValid(int value);
constexpr SessionTab_FaviconType SessionTab_FaviconType_FaviconType_MIN = SessionTab_FaviconType_TYPE_WEB_FAVICON;
constexpr SessionTab_FaviconType SessionTab_FaviconType_FaviconType_MAX = SessionTab_FaviconType_TYPE_WEB_FAVICON;
constexpr int SessionTab_FaviconType_FaviconType_ARRAYSIZE = SessionTab_FaviconType_FaviconType_MAX + 1;

const std::string& SessionTab_FaviconType_Name(SessionTab_FaviconType value);
template<typename T>
inline const std::string& SessionTab_FaviconType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionTab_FaviconType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionTab_FaviconType_Name.");
  return SessionTab_FaviconType_Name(static_cast<SessionTab_FaviconType>(enum_t_value));
}
bool SessionTab_FaviconType_Parse(
    const std::string& name, SessionTab_FaviconType* value);
enum TabNavigation_BlockedState : int {
  TabNavigation_BlockedState_STATE_ALLOWED = 1,
  TabNavigation_BlockedState_STATE_BLOCKED = 2
};
bool TabNavigation_BlockedState_IsValid(int value);
constexpr TabNavigation_BlockedState TabNavigation_BlockedState_BlockedState_MIN = TabNavigation_BlockedState_STATE_ALLOWED;
constexpr TabNavigation_BlockedState TabNavigation_BlockedState_BlockedState_MAX = TabNavigation_BlockedState_STATE_BLOCKED;
constexpr int TabNavigation_BlockedState_BlockedState_ARRAYSIZE = TabNavigation_BlockedState_BlockedState_MAX + 1;

const std::string& TabNavigation_BlockedState_Name(TabNavigation_BlockedState value);
template<typename T>
inline const std::string& TabNavigation_BlockedState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TabNavigation_BlockedState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TabNavigation_BlockedState_Name.");
  return TabNavigation_BlockedState_Name(static_cast<TabNavigation_BlockedState>(enum_t_value));
}
bool TabNavigation_BlockedState_Parse(
    const std::string& name, TabNavigation_BlockedState* value);
enum TabNavigation_PasswordState : int {
  TabNavigation_PasswordState_PASSWORD_STATE_UNKNOWN = 0,
  TabNavigation_PasswordState_NO_PASSWORD_FIELD = 1,
  TabNavigation_PasswordState_HAS_PASSWORD_FIELD = 2
};
bool TabNavigation_PasswordState_IsValid(int value);
constexpr TabNavigation_PasswordState TabNavigation_PasswordState_PasswordState_MIN = TabNavigation_PasswordState_PASSWORD_STATE_UNKNOWN;
constexpr TabNavigation_PasswordState TabNavigation_PasswordState_PasswordState_MAX = TabNavigation_PasswordState_HAS_PASSWORD_FIELD;
constexpr int TabNavigation_PasswordState_PasswordState_ARRAYSIZE = TabNavigation_PasswordState_PasswordState_MAX + 1;

const std::string& TabNavigation_PasswordState_Name(TabNavigation_PasswordState value);
template<typename T>
inline const std::string& TabNavigation_PasswordState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TabNavigation_PasswordState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TabNavigation_PasswordState_Name.");
  return TabNavigation_PasswordState_Name(static_cast<TabNavigation_PasswordState>(enum_t_value));
}
bool TabNavigation_PasswordState_Parse(
    const std::string& name, TabNavigation_PasswordState* value);
// ===================================================================

class SessionSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SessionSpecifics) */ {
 public:
  SessionSpecifics();
  virtual ~SessionSpecifics();

  SessionSpecifics(const SessionSpecifics& from);
  SessionSpecifics(SessionSpecifics&& from) noexcept
    : SessionSpecifics() {
    *this = ::std::move(from);
  }

  inline SessionSpecifics& operator=(const SessionSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionSpecifics& operator=(SessionSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SessionSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionSpecifics* internal_default_instance() {
    return reinterpret_cast<const SessionSpecifics*>(
               &_SessionSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionSpecifics& a, SessionSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionSpecifics* New() const final {
    return CreateMaybeMessage<SessionSpecifics>(nullptr);
  }

  SessionSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SessionSpecifics& from);
  void MergeFrom(const SessionSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SessionSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionTagFieldNumber = 1,
    kHeaderFieldNumber = 2,
    kTabFieldNumber = 3,
    kTabNodeIdFieldNumber = 4,
  };
  // optional string session_tag = 1;
  bool has_session_tag() const;
  void clear_session_tag();
  const std::string& session_tag() const;
  void set_session_tag(const std::string& value);
  void set_session_tag(std::string&& value);
  void set_session_tag(const char* value);
  void set_session_tag(const char* value, size_t size);
  std::string* mutable_session_tag();
  std::string* release_session_tag();
  void set_allocated_session_tag(std::string* session_tag);

  // optional .sync_pb.SessionHeader header = 2;
  bool has_header() const;
  void clear_header();
  const ::sync_pb::SessionHeader& header() const;
  ::sync_pb::SessionHeader* release_header();
  ::sync_pb::SessionHeader* mutable_header();
  void set_allocated_header(::sync_pb::SessionHeader* header);

  // optional .sync_pb.SessionTab tab = 3;
  bool has_tab() const;
  void clear_tab();
  const ::sync_pb::SessionTab& tab() const;
  ::sync_pb::SessionTab* release_tab();
  ::sync_pb::SessionTab* mutable_tab();
  void set_allocated_tab(::sync_pb::SessionTab* tab);

  // optional int32 tab_node_id = 4 [default = -1];
  bool has_tab_node_id() const;
  void clear_tab_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 tab_node_id() const;
  void set_tab_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.SessionSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_tag_;
  ::sync_pb::SessionHeader* header_;
  ::sync_pb::SessionTab* tab_;
  ::PROTOBUF_NAMESPACE_ID::int32 tab_node_id_;
  friend struct ::TableStruct_session_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class SessionHeader :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SessionHeader) */ {
 public:
  SessionHeader();
  virtual ~SessionHeader();

  SessionHeader(const SessionHeader& from);
  SessionHeader(SessionHeader&& from) noexcept
    : SessionHeader() {
    *this = ::std::move(from);
  }

  inline SessionHeader& operator=(const SessionHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionHeader& operator=(SessionHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SessionHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionHeader* internal_default_instance() {
    return reinterpret_cast<const SessionHeader*>(
               &_SessionHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SessionHeader& a, SessionHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionHeader* New() const final {
    return CreateMaybeMessage<SessionHeader>(nullptr);
  }

  SessionHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SessionHeader& from);
  void MergeFrom(const SessionHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SessionHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowFieldNumber = 2,
    kClientNameFieldNumber = 3,
    kDeviceTypeFieldNumber = 4,
  };
  // repeated .sync_pb.SessionWindow window = 2;
  int window_size() const;
  void clear_window();
  ::sync_pb::SessionWindow* mutable_window(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SessionWindow >*
      mutable_window();
  const ::sync_pb::SessionWindow& window(int index) const;
  ::sync_pb::SessionWindow* add_window();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SessionWindow >&
      window() const;

  // optional string client_name = 3;
  bool has_client_name() const;
  void clear_client_name();
  const std::string& client_name() const;
  void set_client_name(const std::string& value);
  void set_client_name(std::string&& value);
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  std::string* mutable_client_name();
  std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);

  // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
  bool has_device_type() const;
  void clear_device_type();
  ::sync_pb::SyncEnums_DeviceType device_type() const;
  void set_device_type(::sync_pb::SyncEnums_DeviceType value);

  // @@protoc_insertion_point(class_scope:sync_pb.SessionHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SessionWindow > window_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  int device_type_;
  friend struct ::TableStruct_session_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class SessionWindow :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SessionWindow) */ {
 public:
  SessionWindow();
  virtual ~SessionWindow();

  SessionWindow(const SessionWindow& from);
  SessionWindow(SessionWindow&& from) noexcept
    : SessionWindow() {
    *this = ::std::move(from);
  }

  inline SessionWindow& operator=(const SessionWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionWindow& operator=(SessionWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SessionWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionWindow* internal_default_instance() {
    return reinterpret_cast<const SessionWindow*>(
               &_SessionWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SessionWindow& a, SessionWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionWindow* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionWindow* New() const final {
    return CreateMaybeMessage<SessionWindow>(nullptr);
  }

  SessionWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionWindow>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SessionWindow& from);
  void MergeFrom(const SessionWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionWindow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SessionWindow";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SessionWindow_BrowserType BrowserType;
  static constexpr BrowserType TYPE_TABBED =
    SessionWindow_BrowserType_TYPE_TABBED;
  static constexpr BrowserType TYPE_POPUP =
    SessionWindow_BrowserType_TYPE_POPUP;
  static constexpr BrowserType TYPE_CUSTOM_TAB =
    SessionWindow_BrowserType_TYPE_CUSTOM_TAB;
  static inline bool BrowserType_IsValid(int value) {
    return SessionWindow_BrowserType_IsValid(value);
  }
  static constexpr BrowserType BrowserType_MIN =
    SessionWindow_BrowserType_BrowserType_MIN;
  static constexpr BrowserType BrowserType_MAX =
    SessionWindow_BrowserType_BrowserType_MAX;
  static constexpr int BrowserType_ARRAYSIZE =
    SessionWindow_BrowserType_BrowserType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BrowserType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BrowserType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BrowserType_Name.");
    return SessionWindow_BrowserType_Name(enum_t_value);
  }
  static inline bool BrowserType_Parse(const std::string& name,
      BrowserType* value) {
    return SessionWindow_BrowserType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTabFieldNumber = 4,
    kWindowIdFieldNumber = 1,
    kSelectedTabIndexFieldNumber = 2,
    kBrowserTypeFieldNumber = 3,
  };
  // repeated int32 tab = 4;
  int tab_size() const;
  void clear_tab();
  ::PROTOBUF_NAMESPACE_ID::int32 tab(int index) const;
  void set_tab(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_tab(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      tab() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tab();

  // optional int32 window_id = 1;
  bool has_window_id() const;
  void clear_window_id();
  ::PROTOBUF_NAMESPACE_ID::int32 window_id() const;
  void set_window_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 selected_tab_index = 2 [default = -1];
  bool has_selected_tab_index() const;
  void clear_selected_tab_index();
  ::PROTOBUF_NAMESPACE_ID::int32 selected_tab_index() const;
  void set_selected_tab_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
  bool has_browser_type() const;
  void clear_browser_type();
  ::sync_pb::SessionWindow_BrowserType browser_type() const;
  void set_browser_type(::sync_pb::SessionWindow_BrowserType value);

  // @@protoc_insertion_point(class_scope:sync_pb.SessionWindow)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > tab_;
  ::PROTOBUF_NAMESPACE_ID::int32 window_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 selected_tab_index_;
  int browser_type_;
  friend struct ::TableStruct_session_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class SessionTab :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SessionTab) */ {
 public:
  SessionTab();
  virtual ~SessionTab();

  SessionTab(const SessionTab& from);
  SessionTab(SessionTab&& from) noexcept
    : SessionTab() {
    *this = ::std::move(from);
  }

  inline SessionTab& operator=(const SessionTab& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionTab& operator=(SessionTab&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SessionTab& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionTab* internal_default_instance() {
    return reinterpret_cast<const SessionTab*>(
               &_SessionTab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SessionTab& a, SessionTab& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionTab* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionTab* New() const final {
    return CreateMaybeMessage<SessionTab>(nullptr);
  }

  SessionTab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionTab>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SessionTab& from);
  void MergeFrom(const SessionTab& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionTab* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SessionTab";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SessionTab_FaviconType FaviconType;
  static constexpr FaviconType TYPE_WEB_FAVICON =
    SessionTab_FaviconType_TYPE_WEB_FAVICON;
  static inline bool FaviconType_IsValid(int value) {
    return SessionTab_FaviconType_IsValid(value);
  }
  static constexpr FaviconType FaviconType_MIN =
    SessionTab_FaviconType_FaviconType_MIN;
  static constexpr FaviconType FaviconType_MAX =
    SessionTab_FaviconType_FaviconType_MAX;
  static constexpr int FaviconType_ARRAYSIZE =
    SessionTab_FaviconType_FaviconType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FaviconType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FaviconType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FaviconType_Name.");
    return SessionTab_FaviconType_Name(enum_t_value);
  }
  static inline bool FaviconType_Parse(const std::string& name,
      FaviconType* value) {
    return SessionTab_FaviconType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNavigationFieldNumber = 7,
    kVariationIdFieldNumber = 12,
    kExtensionAppIdFieldNumber = 6,
    kFaviconFieldNumber = 8,
    kFaviconSourceFieldNumber = 11,
    kWindowIdFieldNumber = 2,
    kPinnedFieldNumber = 5,
    kTabIdFieldNumber = 1,
    kTabVisualIndexFieldNumber = 3,
    kCurrentNavigationIndexFieldNumber = 4,
    kFaviconTypeFieldNumber = 9,
  };
  // repeated .sync_pb.TabNavigation navigation = 7;
  int navigation_size() const;
  void clear_navigation();
  ::sync_pb::TabNavigation* mutable_navigation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::TabNavigation >*
      mutable_navigation();
  const ::sync_pb::TabNavigation& navigation(int index) const;
  ::sync_pb::TabNavigation* add_navigation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::TabNavigation >&
      navigation() const;

  // repeated uint64 variation_id = 12 [deprecated = true];
  PROTOBUF_DEPRECATED int variation_id_size() const;
  PROTOBUF_DEPRECATED void clear_variation_id();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 variation_id(int index) const;
  PROTOBUF_DEPRECATED void set_variation_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  PROTOBUF_DEPRECATED void add_variation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      variation_id() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_variation_id();

  // optional string extension_app_id = 6;
  bool has_extension_app_id() const;
  void clear_extension_app_id();
  const std::string& extension_app_id() const;
  void set_extension_app_id(const std::string& value);
  void set_extension_app_id(std::string&& value);
  void set_extension_app_id(const char* value);
  void set_extension_app_id(const char* value, size_t size);
  std::string* mutable_extension_app_id();
  std::string* release_extension_app_id();
  void set_allocated_extension_app_id(std::string* extension_app_id);

  // optional bytes favicon = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_favicon() const;
  PROTOBUF_DEPRECATED void clear_favicon();
  PROTOBUF_DEPRECATED const std::string& favicon() const;
  PROTOBUF_DEPRECATED void set_favicon(const std::string& value);
  PROTOBUF_DEPRECATED void set_favicon(std::string&& value);
  PROTOBUF_DEPRECATED void set_favicon(const char* value);
  PROTOBUF_DEPRECATED void set_favicon(const void* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_favicon();
  PROTOBUF_DEPRECATED std::string* release_favicon();
  PROTOBUF_DEPRECATED void set_allocated_favicon(std::string* favicon);

  // optional string favicon_source = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_favicon_source() const;
  PROTOBUF_DEPRECATED void clear_favicon_source();
  PROTOBUF_DEPRECATED const std::string& favicon_source() const;
  PROTOBUF_DEPRECATED void set_favicon_source(const std::string& value);
  PROTOBUF_DEPRECATED void set_favicon_source(std::string&& value);
  PROTOBUF_DEPRECATED void set_favicon_source(const char* value);
  PROTOBUF_DEPRECATED void set_favicon_source(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_favicon_source();
  PROTOBUF_DEPRECATED std::string* release_favicon_source();
  PROTOBUF_DEPRECATED void set_allocated_favicon_source(std::string* favicon_source);

  // optional int32 window_id = 2;
  bool has_window_id() const;
  void clear_window_id();
  ::PROTOBUF_NAMESPACE_ID::int32 window_id() const;
  void set_window_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool pinned = 5 [default = false];
  bool has_pinned() const;
  void clear_pinned();
  bool pinned() const;
  void set_pinned(bool value);

  // optional int32 tab_id = 1 [default = -1];
  bool has_tab_id() const;
  void clear_tab_id();
  ::PROTOBUF_NAMESPACE_ID::int32 tab_id() const;
  void set_tab_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tab_visual_index = 3 [default = -1];
  bool has_tab_visual_index() const;
  void clear_tab_visual_index();
  ::PROTOBUF_NAMESPACE_ID::int32 tab_visual_index() const;
  void set_tab_visual_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 current_navigation_index = 4 [default = -1];
  bool has_current_navigation_index() const;
  void clear_current_navigation_index();
  ::PROTOBUF_NAMESPACE_ID::int32 current_navigation_index() const;
  void set_current_navigation_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_favicon_type() const;
  PROTOBUF_DEPRECATED void clear_favicon_type();
  PROTOBUF_DEPRECATED ::sync_pb::SessionTab_FaviconType favicon_type() const;
  PROTOBUF_DEPRECATED void set_favicon_type(::sync_pb::SessionTab_FaviconType value);

  // @@protoc_insertion_point(class_scope:sync_pb.SessionTab)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::TabNavigation > navigation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > variation_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr favicon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr favicon_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 window_id_;
  bool pinned_;
  ::PROTOBUF_NAMESPACE_ID::int32 tab_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 tab_visual_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_navigation_index_;
  int favicon_type_;
  friend struct ::TableStruct_session_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class TabNavigation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.TabNavigation) */ {
 public:
  TabNavigation();
  virtual ~TabNavigation();

  TabNavigation(const TabNavigation& from);
  TabNavigation(TabNavigation&& from) noexcept
    : TabNavigation() {
    *this = ::std::move(from);
  }

  inline TabNavigation& operator=(const TabNavigation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabNavigation& operator=(TabNavigation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TabNavigation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TabNavigation* internal_default_instance() {
    return reinterpret_cast<const TabNavigation*>(
               &_TabNavigation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TabNavigation& a, TabNavigation& b) {
    a.Swap(&b);
  }
  inline void Swap(TabNavigation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TabNavigation* New() const final {
    return CreateMaybeMessage<TabNavigation>(nullptr);
  }

  TabNavigation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TabNavigation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TabNavigation& from);
  void MergeFrom(const TabNavigation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TabNavigation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.TabNavigation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TabNavigation_BlockedState BlockedState;
  static constexpr BlockedState STATE_ALLOWED =
    TabNavigation_BlockedState_STATE_ALLOWED;
  static constexpr BlockedState STATE_BLOCKED =
    TabNavigation_BlockedState_STATE_BLOCKED;
  static inline bool BlockedState_IsValid(int value) {
    return TabNavigation_BlockedState_IsValid(value);
  }
  static constexpr BlockedState BlockedState_MIN =
    TabNavigation_BlockedState_BlockedState_MIN;
  static constexpr BlockedState BlockedState_MAX =
    TabNavigation_BlockedState_BlockedState_MAX;
  static constexpr int BlockedState_ARRAYSIZE =
    TabNavigation_BlockedState_BlockedState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BlockedState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BlockedState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BlockedState_Name.");
    return TabNavigation_BlockedState_Name(enum_t_value);
  }
  static inline bool BlockedState_Parse(const std::string& name,
      BlockedState* value) {
    return TabNavigation_BlockedState_Parse(name, value);
  }

  typedef TabNavigation_PasswordState PasswordState;
  static constexpr PasswordState PASSWORD_STATE_UNKNOWN =
    TabNavigation_PasswordState_PASSWORD_STATE_UNKNOWN;
  static constexpr PasswordState NO_PASSWORD_FIELD =
    TabNavigation_PasswordState_NO_PASSWORD_FIELD;
  static constexpr PasswordState HAS_PASSWORD_FIELD =
    TabNavigation_PasswordState_HAS_PASSWORD_FIELD;
  static inline bool PasswordState_IsValid(int value) {
    return TabNavigation_PasswordState_IsValid(value);
  }
  static constexpr PasswordState PasswordState_MIN =
    TabNavigation_PasswordState_PasswordState_MIN;
  static constexpr PasswordState PasswordState_MAX =
    TabNavigation_PasswordState_PasswordState_MAX;
  static constexpr int PasswordState_ARRAYSIZE =
    TabNavigation_PasswordState_PasswordState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PasswordState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PasswordState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PasswordState_Name.");
    return TabNavigation_PasswordState_Name(enum_t_value);
  }
  static inline bool PasswordState_Parse(const std::string& name,
      PasswordState* value) {
    return TabNavigation_PasswordState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentPackCategoriesFieldNumber = 19,
    kNavigationRedirectFieldNumber = 23,
    kAncestorTaskIdFieldNumber = 28,
    kVirtualUrlFieldNumber = 2,
    kReferrerFieldNumber = 3,
    kTitleFieldNumber = 4,
    kSearchTermsFieldNumber = 16,
    kFaviconUrlFieldNumber = 17,
    kLastNavigationRedirectUrlFieldNumber = 24,
    kPageLanguageFieldNumber = 30,
    kReplacedNavigationFieldNumber = 29,
    kPageTransitionFieldNumber = 6,
    kUniqueIdFieldNumber = 8,
    kTimestampMsecFieldNumber = 9,
    kNavigationForwardBackFieldNumber = 10,
    kNavigationFromAddressBarFieldNumber = 11,
    kNavigationHomePageFieldNumber = 12,
    kNavigationChainStartFieldNumber = 13,
    kNavigationChainEndFieldNumber = 14,
    kIsRestoredFieldNumber = 22,
    kGlobalIdFieldNumber = 15,
    kHttpStatusCodeFieldNumber = 20,
    kObsoleteReferrerPolicyFieldNumber = 21,
    kTaskIdFieldNumber = 27,
    kPasswordStateFieldNumber = 26,
    kCorrectReferrerPolicyFieldNumber = 25,
    kRedirectTypeFieldNumber = 7,
    kBlockedStateFieldNumber = 18,
  };
  // repeated string content_pack_categories = 19;
  int content_pack_categories_size() const;
  void clear_content_pack_categories();
  const std::string& content_pack_categories(int index) const;
  std::string* mutable_content_pack_categories(int index);
  void set_content_pack_categories(int index, const std::string& value);
  void set_content_pack_categories(int index, std::string&& value);
  void set_content_pack_categories(int index, const char* value);
  void set_content_pack_categories(int index, const char* value, size_t size);
  std::string* add_content_pack_categories();
  void add_content_pack_categories(const std::string& value);
  void add_content_pack_categories(std::string&& value);
  void add_content_pack_categories(const char* value);
  void add_content_pack_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& content_pack_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_content_pack_categories();

  // repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
  int navigation_redirect_size() const;
  void clear_navigation_redirect();
  ::sync_pb::NavigationRedirect* mutable_navigation_redirect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::NavigationRedirect >*
      mutable_navigation_redirect();
  const ::sync_pb::NavigationRedirect& navigation_redirect(int index) const;
  ::sync_pb::NavigationRedirect* add_navigation_redirect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::NavigationRedirect >&
      navigation_redirect() const;

  // repeated int64 ancestor_task_id = 28;
  int ancestor_task_id_size() const;
  void clear_ancestor_task_id();
  ::PROTOBUF_NAMESPACE_ID::int64 ancestor_task_id(int index) const;
  void set_ancestor_task_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_ancestor_task_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      ancestor_task_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_ancestor_task_id();

  // optional string virtual_url = 2;
  bool has_virtual_url() const;
  void clear_virtual_url();
  const std::string& virtual_url() const;
  void set_virtual_url(const std::string& value);
  void set_virtual_url(std::string&& value);
  void set_virtual_url(const char* value);
  void set_virtual_url(const char* value, size_t size);
  std::string* mutable_virtual_url();
  std::string* release_virtual_url();
  void set_allocated_virtual_url(std::string* virtual_url);

  // optional string referrer = 3;
  bool has_referrer() const;
  void clear_referrer();
  const std::string& referrer() const;
  void set_referrer(const std::string& value);
  void set_referrer(std::string&& value);
  void set_referrer(const char* value);
  void set_referrer(const char* value, size_t size);
  std::string* mutable_referrer();
  std::string* release_referrer();
  void set_allocated_referrer(std::string* referrer);

  // optional string title = 4;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string search_terms = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_search_terms() const;
  PROTOBUF_DEPRECATED void clear_search_terms();
  PROTOBUF_DEPRECATED const std::string& search_terms() const;
  PROTOBUF_DEPRECATED void set_search_terms(const std::string& value);
  PROTOBUF_DEPRECATED void set_search_terms(std::string&& value);
  PROTOBUF_DEPRECATED void set_search_terms(const char* value);
  PROTOBUF_DEPRECATED void set_search_terms(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_search_terms();
  PROTOBUF_DEPRECATED std::string* release_search_terms();
  PROTOBUF_DEPRECATED void set_allocated_search_terms(std::string* search_terms);

  // optional string favicon_url = 17;
  bool has_favicon_url() const;
  void clear_favicon_url();
  const std::string& favicon_url() const;
  void set_favicon_url(const std::string& value);
  void set_favicon_url(std::string&& value);
  void set_favicon_url(const char* value);
  void set_favicon_url(const char* value, size_t size);
  std::string* mutable_favicon_url();
  std::string* release_favicon_url();
  void set_allocated_favicon_url(std::string* favicon_url);

  // optional string last_navigation_redirect_url = 24;
  bool has_last_navigation_redirect_url() const;
  void clear_last_navigation_redirect_url();
  const std::string& last_navigation_redirect_url() const;
  void set_last_navigation_redirect_url(const std::string& value);
  void set_last_navigation_redirect_url(std::string&& value);
  void set_last_navigation_redirect_url(const char* value);
  void set_last_navigation_redirect_url(const char* value, size_t size);
  std::string* mutable_last_navigation_redirect_url();
  std::string* release_last_navigation_redirect_url();
  void set_allocated_last_navigation_redirect_url(std::string* last_navigation_redirect_url);

  // optional string page_language = 30;
  bool has_page_language() const;
  void clear_page_language();
  const std::string& page_language() const;
  void set_page_language(const std::string& value);
  void set_page_language(std::string&& value);
  void set_page_language(const char* value);
  void set_page_language(const char* value, size_t size);
  std::string* mutable_page_language();
  std::string* release_page_language();
  void set_allocated_page_language(std::string* page_language);

  // optional .sync_pb.ReplacedNavigation replaced_navigation = 29;
  bool has_replaced_navigation() const;
  void clear_replaced_navigation();
  const ::sync_pb::ReplacedNavigation& replaced_navigation() const;
  ::sync_pb::ReplacedNavigation* release_replaced_navigation();
  ::sync_pb::ReplacedNavigation* mutable_replaced_navigation();
  void set_allocated_replaced_navigation(::sync_pb::ReplacedNavigation* replaced_navigation);

  // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = LINK];
  bool has_page_transition() const;
  void clear_page_transition();
  ::sync_pb::SyncEnums_PageTransition page_transition() const;
  void set_page_transition(::sync_pb::SyncEnums_PageTransition value);

  // optional int32 unique_id = 8;
  bool has_unique_id() const;
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 timestamp_msec = 9;
  bool has_timestamp_msec() const;
  void clear_timestamp_msec();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_msec() const;
  void set_timestamp_msec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool navigation_forward_back = 10;
  bool has_navigation_forward_back() const;
  void clear_navigation_forward_back();
  bool navigation_forward_back() const;
  void set_navigation_forward_back(bool value);

  // optional bool navigation_from_address_bar = 11;
  bool has_navigation_from_address_bar() const;
  void clear_navigation_from_address_bar();
  bool navigation_from_address_bar() const;
  void set_navigation_from_address_bar(bool value);

  // optional bool navigation_home_page = 12;
  bool has_navigation_home_page() const;
  void clear_navigation_home_page();
  bool navigation_home_page() const;
  void set_navigation_home_page(bool value);

  // optional bool navigation_chain_start = 13;
  bool has_navigation_chain_start() const;
  void clear_navigation_chain_start();
  bool navigation_chain_start() const;
  void set_navigation_chain_start(bool value);

  // optional bool navigation_chain_end = 14;
  bool has_navigation_chain_end() const;
  void clear_navigation_chain_end();
  bool navigation_chain_end() const;
  void set_navigation_chain_end(bool value);

  // optional bool is_restored = 22;
  bool has_is_restored() const;
  void clear_is_restored();
  bool is_restored() const;
  void set_is_restored(bool value);

  // optional int64 global_id = 15;
  bool has_global_id() const;
  void clear_global_id();
  ::PROTOBUF_NAMESPACE_ID::int64 global_id() const;
  void set_global_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 http_status_code = 20;
  bool has_http_status_code() const;
  void clear_http_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 http_status_code() const;
  void set_http_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 obsolete_referrer_policy = 21 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_referrer_policy() const;
  PROTOBUF_DEPRECATED void clear_obsolete_referrer_policy();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 obsolete_referrer_policy() const;
  PROTOBUF_DEPRECATED void set_obsolete_referrer_policy(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 task_id = 27;
  bool has_task_id() const;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int64 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .sync_pb.TabNavigation.PasswordState password_state = 26;
  bool has_password_state() const;
  void clear_password_state();
  ::sync_pb::TabNavigation_PasswordState password_state() const;
  void set_password_state(::sync_pb::TabNavigation_PasswordState value);

  // optional int32 correct_referrer_policy = 25 [default = 1];
  bool has_correct_referrer_policy() const;
  void clear_correct_referrer_policy();
  ::PROTOBUF_NAMESPACE_ID::int32 correct_referrer_policy() const;
  void set_correct_referrer_policy(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
  bool has_redirect_type() const;
  void clear_redirect_type();
  ::sync_pb::SyncEnums_PageTransitionRedirectType redirect_type() const;
  void set_redirect_type(::sync_pb::SyncEnums_PageTransitionRedirectType value);

  // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
  bool has_blocked_state() const;
  void clear_blocked_state();
  ::sync_pb::TabNavigation_BlockedState blocked_state() const;
  void set_blocked_state(::sync_pb::TabNavigation_BlockedState value);

  // @@protoc_insertion_point(class_scope:sync_pb.TabNavigation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> content_pack_categories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::NavigationRedirect > navigation_redirect_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > ancestor_task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_terms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr favicon_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_navigation_redirect_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_language_;
  ::sync_pb::ReplacedNavigation* replaced_navigation_;
  int page_transition_;
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_msec_;
  bool navigation_forward_back_;
  bool navigation_from_address_bar_;
  bool navigation_home_page_;
  bool navigation_chain_start_;
  bool navigation_chain_end_;
  bool is_restored_;
  ::PROTOBUF_NAMESPACE_ID::int64 global_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 http_status_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 obsolete_referrer_policy_;
  ::PROTOBUF_NAMESPACE_ID::int64 task_id_;
  int password_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 correct_referrer_policy_;
  int redirect_type_;
  int blocked_state_;
  friend struct ::TableStruct_session_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class NavigationRedirect :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.NavigationRedirect) */ {
 public:
  NavigationRedirect();
  virtual ~NavigationRedirect();

  NavigationRedirect(const NavigationRedirect& from);
  NavigationRedirect(NavigationRedirect&& from) noexcept
    : NavigationRedirect() {
    *this = ::std::move(from);
  }

  inline NavigationRedirect& operator=(const NavigationRedirect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationRedirect& operator=(NavigationRedirect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NavigationRedirect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationRedirect* internal_default_instance() {
    return reinterpret_cast<const NavigationRedirect*>(
               &_NavigationRedirect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NavigationRedirect& a, NavigationRedirect& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationRedirect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationRedirect* New() const final {
    return CreateMaybeMessage<NavigationRedirect>(nullptr);
  }

  NavigationRedirect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationRedirect>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NavigationRedirect& from);
  void MergeFrom(const NavigationRedirect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NavigationRedirect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.NavigationRedirect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // @@protoc_insertion_point(class_scope:sync_pb.NavigationRedirect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_session_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class ReplacedNavigation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ReplacedNavigation) */ {
 public:
  ReplacedNavigation();
  virtual ~ReplacedNavigation();

  ReplacedNavigation(const ReplacedNavigation& from);
  ReplacedNavigation(ReplacedNavigation&& from) noexcept
    : ReplacedNavigation() {
    *this = ::std::move(from);
  }

  inline ReplacedNavigation& operator=(const ReplacedNavigation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplacedNavigation& operator=(ReplacedNavigation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReplacedNavigation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplacedNavigation* internal_default_instance() {
    return reinterpret_cast<const ReplacedNavigation*>(
               &_ReplacedNavigation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReplacedNavigation& a, ReplacedNavigation& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplacedNavigation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplacedNavigation* New() const final {
    return CreateMaybeMessage<ReplacedNavigation>(nullptr);
  }

  ReplacedNavigation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplacedNavigation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReplacedNavigation& from);
  void MergeFrom(const ReplacedNavigation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReplacedNavigation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ReplacedNavigation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstCommittedUrlFieldNumber = 1,
    kFirstTimestampMsecFieldNumber = 2,
    kFirstPageTransitionFieldNumber = 3,
  };
  // optional string first_committed_url = 1;
  bool has_first_committed_url() const;
  void clear_first_committed_url();
  const std::string& first_committed_url() const;
  void set_first_committed_url(const std::string& value);
  void set_first_committed_url(std::string&& value);
  void set_first_committed_url(const char* value);
  void set_first_committed_url(const char* value, size_t size);
  std::string* mutable_first_committed_url();
  std::string* release_first_committed_url();
  void set_allocated_first_committed_url(std::string* first_committed_url);

  // optional int64 first_timestamp_msec = 2;
  bool has_first_timestamp_msec() const;
  void clear_first_timestamp_msec();
  ::PROTOBUF_NAMESPACE_ID::int64 first_timestamp_msec() const;
  void set_first_timestamp_msec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .sync_pb.SyncEnums.PageTransition first_page_transition = 3;
  bool has_first_page_transition() const;
  void clear_first_page_transition();
  ::sync_pb::SyncEnums_PageTransition first_page_transition() const;
  void set_first_page_transition(::sync_pb::SyncEnums_PageTransition value);

  // @@protoc_insertion_point(class_scope:sync_pb.ReplacedNavigation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_committed_url_;
  ::PROTOBUF_NAMESPACE_ID::int64 first_timestamp_msec_;
  int first_page_transition_;
  friend struct ::TableStruct_session_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionSpecifics

// optional string session_tag = 1;
inline bool SessionSpecifics::has_session_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionSpecifics::clear_session_tag() {
  session_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionSpecifics::session_tag() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.session_tag)
  return session_tag_.GetNoArena();
}
inline void SessionSpecifics::set_session_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionSpecifics.session_tag)
}
inline void SessionSpecifics::set_session_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SessionSpecifics.session_tag)
}
inline void SessionSpecifics::set_session_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SessionSpecifics.session_tag)
}
inline void SessionSpecifics::set_session_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionSpecifics.session_tag)
}
inline std::string* SessionSpecifics::mutable_session_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionSpecifics.session_tag)
  return session_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionSpecifics::release_session_tag() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionSpecifics.session_tag)
  if (!has_session_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionSpecifics::set_allocated_session_tag(std::string* session_tag) {
  if (session_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_tag);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionSpecifics.session_tag)
}

// optional .sync_pb.SessionHeader header = 2;
inline bool SessionSpecifics::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionSpecifics::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::SessionHeader& SessionSpecifics::header() const {
  const ::sync_pb::SessionHeader* p = header_;
  // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::SessionHeader*>(
      &::sync_pb::_SessionHeader_default_instance_);
}
inline ::sync_pb::SessionHeader* SessionSpecifics::release_header() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionSpecifics.header)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::SessionHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::sync_pb::SessionHeader* SessionSpecifics::mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SessionHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionSpecifics.header)
  return header_;
}
inline void SessionSpecifics::set_allocated_header(::sync_pb::SessionHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionSpecifics.header)
}

// optional .sync_pb.SessionTab tab = 3;
inline bool SessionSpecifics::has_tab() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionSpecifics::clear_tab() {
  if (tab_ != nullptr) tab_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::SessionTab& SessionSpecifics::tab() const {
  const ::sync_pb::SessionTab* p = tab_;
  // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.tab)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::SessionTab*>(
      &::sync_pb::_SessionTab_default_instance_);
}
inline ::sync_pb::SessionTab* SessionSpecifics::release_tab() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionSpecifics.tab)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::SessionTab* temp = tab_;
  tab_ = nullptr;
  return temp;
}
inline ::sync_pb::SessionTab* SessionSpecifics::mutable_tab() {
  _has_bits_[0] |= 0x00000004u;
  if (tab_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SessionTab>(GetArenaNoVirtual());
    tab_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionSpecifics.tab)
  return tab_;
}
inline void SessionSpecifics::set_allocated_tab(::sync_pb::SessionTab* tab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tab_;
  }
  if (tab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tab, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tab_ = tab;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionSpecifics.tab)
}

// optional int32 tab_node_id = 4 [default = -1];
inline bool SessionSpecifics::has_tab_node_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionSpecifics::clear_tab_node_id() {
  tab_node_id_ = -1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionSpecifics::tab_node_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.tab_node_id)
  return tab_node_id_;
}
inline void SessionSpecifics::set_tab_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  tab_node_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionSpecifics.tab_node_id)
}

// -------------------------------------------------------------------

// SessionHeader

// repeated .sync_pb.SessionWindow window = 2;
inline int SessionHeader::window_size() const {
  return window_.size();
}
inline void SessionHeader::clear_window() {
  window_.Clear();
}
inline ::sync_pb::SessionWindow* SessionHeader::mutable_window(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionHeader.window)
  return window_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SessionWindow >*
SessionHeader::mutable_window() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionHeader.window)
  return &window_;
}
inline const ::sync_pb::SessionWindow& SessionHeader::window(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionHeader.window)
  return window_.Get(index);
}
inline ::sync_pb::SessionWindow* SessionHeader::add_window() {
  // @@protoc_insertion_point(field_add:sync_pb.SessionHeader.window)
  return window_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::SessionWindow >&
SessionHeader::window() const {
  // @@protoc_insertion_point(field_list:sync_pb.SessionHeader.window)
  return window_;
}

// optional string client_name = 3;
inline bool SessionHeader::has_client_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionHeader::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionHeader::client_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionHeader.client_name)
  return client_name_.GetNoArena();
}
inline void SessionHeader::set_client_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionHeader.client_name)
}
inline void SessionHeader::set_client_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SessionHeader.client_name)
}
inline void SessionHeader::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SessionHeader.client_name)
}
inline void SessionHeader::set_client_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionHeader.client_name)
}
inline std::string* SessionHeader::mutable_client_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionHeader.client_name)
  return client_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionHeader::release_client_name() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionHeader.client_name)
  if (!has_client_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionHeader::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionHeader.client_name)
}

// optional .sync_pb.SyncEnums.DeviceType device_type = 4;
inline bool SessionHeader::has_device_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionHeader::clear_device_type() {
  device_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::SyncEnums_DeviceType SessionHeader::device_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionHeader.device_type)
  return static_cast< ::sync_pb::SyncEnums_DeviceType >(device_type_);
}
inline void SessionHeader::set_device_type(::sync_pb::SyncEnums_DeviceType value) {
  assert(::sync_pb::SyncEnums_DeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  device_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionHeader.device_type)
}

// -------------------------------------------------------------------

// SessionWindow

// optional int32 window_id = 1;
inline bool SessionWindow::has_window_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionWindow::clear_window_id() {
  window_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionWindow::window_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.window_id)
  return window_id_;
}
inline void SessionWindow::set_window_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  window_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.window_id)
}

// optional int32 selected_tab_index = 2 [default = -1];
inline bool SessionWindow::has_selected_tab_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionWindow::clear_selected_tab_index() {
  selected_tab_index_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionWindow::selected_tab_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.selected_tab_index)
  return selected_tab_index_;
}
inline void SessionWindow::set_selected_tab_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  selected_tab_index_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.selected_tab_index)
}

// optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
inline bool SessionWindow::has_browser_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionWindow::clear_browser_type() {
  browser_type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::SessionWindow_BrowserType SessionWindow::browser_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.browser_type)
  return static_cast< ::sync_pb::SessionWindow_BrowserType >(browser_type_);
}
inline void SessionWindow::set_browser_type(::sync_pb::SessionWindow_BrowserType value) {
  assert(::sync_pb::SessionWindow_BrowserType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  browser_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.browser_type)
}

// repeated int32 tab = 4;
inline int SessionWindow::tab_size() const {
  return tab_.size();
}
inline void SessionWindow::clear_tab() {
  tab_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionWindow::tab(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.tab)
  return tab_.Get(index);
}
inline void SessionWindow::set_tab(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tab_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.tab)
}
inline void SessionWindow::add_tab(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tab_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.SessionWindow.tab)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SessionWindow::tab() const {
  // @@protoc_insertion_point(field_list:sync_pb.SessionWindow.tab)
  return tab_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SessionWindow::mutable_tab() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionWindow.tab)
  return &tab_;
}

// -------------------------------------------------------------------

// SessionTab

// optional int32 tab_id = 1 [default = -1];
inline bool SessionTab::has_tab_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SessionTab::clear_tab_id() {
  tab_id_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionTab::tab_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.tab_id)
  return tab_id_;
}
inline void SessionTab::set_tab_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  tab_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.tab_id)
}

// optional int32 window_id = 2;
inline bool SessionTab::has_window_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionTab::clear_window_id() {
  window_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionTab::window_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.window_id)
  return window_id_;
}
inline void SessionTab::set_window_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  window_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.window_id)
}

// optional int32 tab_visual_index = 3 [default = -1];
inline bool SessionTab::has_tab_visual_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SessionTab::clear_tab_visual_index() {
  tab_visual_index_ = -1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionTab::tab_visual_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.tab_visual_index)
  return tab_visual_index_;
}
inline void SessionTab::set_tab_visual_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  tab_visual_index_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.tab_visual_index)
}

// optional int32 current_navigation_index = 4 [default = -1];
inline bool SessionTab::has_current_navigation_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SessionTab::clear_current_navigation_index() {
  current_navigation_index_ = -1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionTab::current_navigation_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.current_navigation_index)
  return current_navigation_index_;
}
inline void SessionTab::set_current_navigation_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  current_navigation_index_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.current_navigation_index)
}

// optional bool pinned = 5 [default = false];
inline bool SessionTab::has_pinned() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionTab::clear_pinned() {
  pinned_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SessionTab::pinned() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.pinned)
  return pinned_;
}
inline void SessionTab::set_pinned(bool value) {
  _has_bits_[0] |= 0x00000010u;
  pinned_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.pinned)
}

// optional string extension_app_id = 6;
inline bool SessionTab::has_extension_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionTab::clear_extension_app_id() {
  extension_app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionTab::extension_app_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.extension_app_id)
  return extension_app_id_.GetNoArena();
}
inline void SessionTab::set_extension_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  extension_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.extension_app_id)
}
inline void SessionTab::set_extension_app_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  extension_app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SessionTab.extension_app_id)
}
inline void SessionTab::set_extension_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  extension_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SessionTab.extension_app_id)
}
inline void SessionTab::set_extension_app_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  extension_app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionTab.extension_app_id)
}
inline std::string* SessionTab::mutable_extension_app_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.extension_app_id)
  return extension_app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionTab::release_extension_app_id() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionTab.extension_app_id)
  if (!has_extension_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return extension_app_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionTab::set_allocated_extension_app_id(std::string* extension_app_id) {
  if (extension_app_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extension_app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension_app_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionTab.extension_app_id)
}

// repeated .sync_pb.TabNavigation navigation = 7;
inline int SessionTab::navigation_size() const {
  return navigation_.size();
}
inline void SessionTab::clear_navigation() {
  navigation_.Clear();
}
inline ::sync_pb::TabNavigation* SessionTab::mutable_navigation(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.navigation)
  return navigation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::TabNavigation >*
SessionTab::mutable_navigation() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionTab.navigation)
  return &navigation_;
}
inline const ::sync_pb::TabNavigation& SessionTab::navigation(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.navigation)
  return navigation_.Get(index);
}
inline ::sync_pb::TabNavigation* SessionTab::add_navigation() {
  // @@protoc_insertion_point(field_add:sync_pb.SessionTab.navigation)
  return navigation_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::TabNavigation >&
SessionTab::navigation() const {
  // @@protoc_insertion_point(field_list:sync_pb.SessionTab.navigation)
  return navigation_;
}

// optional bytes favicon = 8 [deprecated = true];
inline bool SessionTab::has_favicon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionTab::clear_favicon() {
  favicon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SessionTab::favicon() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.favicon)
  return favicon_.GetNoArena();
}
inline void SessionTab::set_favicon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  favicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.favicon)
}
inline void SessionTab::set_favicon(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  favicon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SessionTab.favicon)
}
inline void SessionTab::set_favicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  favicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SessionTab.favicon)
}
inline void SessionTab::set_favicon(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  favicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionTab.favicon)
}
inline std::string* SessionTab::mutable_favicon() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.favicon)
  return favicon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionTab::release_favicon() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionTab.favicon)
  if (!has_favicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return favicon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionTab::set_allocated_favicon(std::string* favicon) {
  if (favicon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  favicon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), favicon);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionTab.favicon)
}

// optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];
inline bool SessionTab::has_favicon_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SessionTab::clear_favicon_type() {
  favicon_type_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::sync_pb::SessionTab_FaviconType SessionTab::favicon_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.favicon_type)
  return static_cast< ::sync_pb::SessionTab_FaviconType >(favicon_type_);
}
inline void SessionTab::set_favicon_type(::sync_pb::SessionTab_FaviconType value) {
  assert(::sync_pb::SessionTab_FaviconType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  favicon_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.favicon_type)
}

// optional string favicon_source = 11 [deprecated = true];
inline bool SessionTab::has_favicon_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionTab::clear_favicon_source() {
  favicon_source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SessionTab::favicon_source() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.favicon_source)
  return favicon_source_.GetNoArena();
}
inline void SessionTab::set_favicon_source(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  favicon_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.favicon_source)
}
inline void SessionTab::set_favicon_source(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  favicon_source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SessionTab.favicon_source)
}
inline void SessionTab::set_favicon_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  favicon_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SessionTab.favicon_source)
}
inline void SessionTab::set_favicon_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  favicon_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionTab.favicon_source)
}
inline std::string* SessionTab::mutable_favicon_source() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.favicon_source)
  return favicon_source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionTab::release_favicon_source() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionTab.favicon_source)
  if (!has_favicon_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return favicon_source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionTab::set_allocated_favicon_source(std::string* favicon_source) {
  if (favicon_source != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  favicon_source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), favicon_source);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionTab.favicon_source)
}

// repeated uint64 variation_id = 12 [deprecated = true];
inline int SessionTab::variation_id_size() const {
  return variation_id_.size();
}
inline void SessionTab::clear_variation_id() {
  variation_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionTab::variation_id(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.variation_id)
  return variation_id_.Get(index);
}
inline void SessionTab::set_variation_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  variation_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.variation_id)
}
inline void SessionTab::add_variation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  variation_id_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.SessionTab.variation_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SessionTab::variation_id() const {
  // @@protoc_insertion_point(field_list:sync_pb.SessionTab.variation_id)
  return variation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SessionTab::mutable_variation_id() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionTab.variation_id)
  return &variation_id_;
}

// -------------------------------------------------------------------

// TabNavigation

// optional string virtual_url = 2;
inline bool TabNavigation::has_virtual_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TabNavigation::clear_virtual_url() {
  virtual_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TabNavigation::virtual_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.virtual_url)
  return virtual_url_.GetNoArena();
}
inline void TabNavigation::set_virtual_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  virtual_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.virtual_url)
}
inline void TabNavigation::set_virtual_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  virtual_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.virtual_url)
}
inline void TabNavigation::set_virtual_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  virtual_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.virtual_url)
}
inline void TabNavigation::set_virtual_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  virtual_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.virtual_url)
}
inline std::string* TabNavigation::mutable_virtual_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.virtual_url)
  return virtual_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TabNavigation::release_virtual_url() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.virtual_url)
  if (!has_virtual_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return virtual_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_virtual_url(std::string* virtual_url) {
  if (virtual_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  virtual_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.virtual_url)
}

// optional string referrer = 3;
inline bool TabNavigation::has_referrer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TabNavigation::clear_referrer() {
  referrer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TabNavigation::referrer() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.referrer)
  return referrer_.GetNoArena();
}
inline void TabNavigation::set_referrer(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  referrer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.referrer)
}
inline void TabNavigation::set_referrer(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  referrer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.referrer)
}
inline void TabNavigation::set_referrer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  referrer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.referrer)
}
inline void TabNavigation::set_referrer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  referrer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.referrer)
}
inline std::string* TabNavigation::mutable_referrer() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.referrer)
  return referrer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TabNavigation::release_referrer() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.referrer)
  if (!has_referrer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return referrer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_referrer(std::string* referrer) {
  if (referrer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  referrer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.referrer)
}

// optional string title = 4;
inline bool TabNavigation::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TabNavigation::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TabNavigation::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.title)
  return title_.GetNoArena();
}
inline void TabNavigation::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.title)
}
inline void TabNavigation::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.title)
}
inline void TabNavigation::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.title)
}
inline void TabNavigation::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.title)
}
inline std::string* TabNavigation::mutable_title() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TabNavigation::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.title)
}

// optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = LINK];
inline bool TabNavigation::has_page_transition() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TabNavigation::clear_page_transition() {
  page_transition_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::sync_pb::SyncEnums_PageTransition TabNavigation::page_transition() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.page_transition)
  return static_cast< ::sync_pb::SyncEnums_PageTransition >(page_transition_);
}
inline void TabNavigation::set_page_transition(::sync_pb::SyncEnums_PageTransition value) {
  assert(::sync_pb::SyncEnums_PageTransition_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  page_transition_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.page_transition)
}

// optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
inline bool TabNavigation::has_redirect_type() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TabNavigation::clear_redirect_type() {
  redirect_type_ = 1;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::sync_pb::SyncEnums_PageTransitionRedirectType TabNavigation::redirect_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.redirect_type)
  return static_cast< ::sync_pb::SyncEnums_PageTransitionRedirectType >(redirect_type_);
}
inline void TabNavigation::set_redirect_type(::sync_pb::SyncEnums_PageTransitionRedirectType value) {
  assert(::sync_pb::SyncEnums_PageTransitionRedirectType_IsValid(value));
  _has_bits_[0] |= 0x00800000u;
  redirect_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.redirect_type)
}

// optional int32 unique_id = 8;
inline bool TabNavigation::has_unique_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TabNavigation::clear_unique_id() {
  unique_id_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TabNavigation::unique_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.unique_id)
  return unique_id_;
}
inline void TabNavigation::set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  unique_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.unique_id)
}

// optional int64 timestamp_msec = 9;
inline bool TabNavigation::has_timestamp_msec() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TabNavigation::clear_timestamp_msec() {
  timestamp_msec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TabNavigation::timestamp_msec() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.timestamp_msec)
  return timestamp_msec_;
}
inline void TabNavigation::set_timestamp_msec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  timestamp_msec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.timestamp_msec)
}

// optional bool navigation_forward_back = 10;
inline bool TabNavigation::has_navigation_forward_back() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TabNavigation::clear_navigation_forward_back() {
  navigation_forward_back_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TabNavigation::navigation_forward_back() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_forward_back)
  return navigation_forward_back_;
}
inline void TabNavigation::set_navigation_forward_back(bool value) {
  _has_bits_[0] |= 0x00000800u;
  navigation_forward_back_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_forward_back)
}

// optional bool navigation_from_address_bar = 11;
inline bool TabNavigation::has_navigation_from_address_bar() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TabNavigation::clear_navigation_from_address_bar() {
  navigation_from_address_bar_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool TabNavigation::navigation_from_address_bar() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_from_address_bar)
  return navigation_from_address_bar_;
}
inline void TabNavigation::set_navigation_from_address_bar(bool value) {
  _has_bits_[0] |= 0x00001000u;
  navigation_from_address_bar_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_from_address_bar)
}

// optional bool navigation_home_page = 12;
inline bool TabNavigation::has_navigation_home_page() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TabNavigation::clear_navigation_home_page() {
  navigation_home_page_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool TabNavigation::navigation_home_page() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_home_page)
  return navigation_home_page_;
}
inline void TabNavigation::set_navigation_home_page(bool value) {
  _has_bits_[0] |= 0x00002000u;
  navigation_home_page_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_home_page)
}

// optional bool navigation_chain_start = 13;
inline bool TabNavigation::has_navigation_chain_start() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TabNavigation::clear_navigation_chain_start() {
  navigation_chain_start_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool TabNavigation::navigation_chain_start() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_chain_start)
  return navigation_chain_start_;
}
inline void TabNavigation::set_navigation_chain_start(bool value) {
  _has_bits_[0] |= 0x00004000u;
  navigation_chain_start_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_chain_start)
}

// optional bool navigation_chain_end = 14;
inline bool TabNavigation::has_navigation_chain_end() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TabNavigation::clear_navigation_chain_end() {
  navigation_chain_end_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool TabNavigation::navigation_chain_end() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_chain_end)
  return navigation_chain_end_;
}
inline void TabNavigation::set_navigation_chain_end(bool value) {
  _has_bits_[0] |= 0x00008000u;
  navigation_chain_end_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_chain_end)
}

// optional int64 global_id = 15;
inline bool TabNavigation::has_global_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TabNavigation::clear_global_id() {
  global_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TabNavigation::global_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.global_id)
  return global_id_;
}
inline void TabNavigation::set_global_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  global_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.global_id)
}

// optional string search_terms = 16 [deprecated = true];
inline bool TabNavigation::has_search_terms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TabNavigation::clear_search_terms() {
  search_terms_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TabNavigation::search_terms() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.search_terms)
  return search_terms_.GetNoArena();
}
inline void TabNavigation::set_search_terms(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  search_terms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.search_terms)
}
inline void TabNavigation::set_search_terms(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  search_terms_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.search_terms)
}
inline void TabNavigation::set_search_terms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  search_terms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.search_terms)
}
inline void TabNavigation::set_search_terms(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  search_terms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.search_terms)
}
inline std::string* TabNavigation::mutable_search_terms() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.search_terms)
  return search_terms_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TabNavigation::release_search_terms() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.search_terms)
  if (!has_search_terms()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return search_terms_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_search_terms(std::string* search_terms) {
  if (search_terms != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  search_terms_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_terms);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.search_terms)
}

// optional string favicon_url = 17;
inline bool TabNavigation::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TabNavigation::clear_favicon_url() {
  favicon_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TabNavigation::favicon_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.favicon_url)
  return favicon_url_.GetNoArena();
}
inline void TabNavigation::set_favicon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  favicon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.favicon_url)
}
inline void TabNavigation::set_favicon_url(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  favicon_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.favicon_url)
}
inline void TabNavigation::set_favicon_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  favicon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.favicon_url)
}
inline void TabNavigation::set_favicon_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  favicon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.favicon_url)
}
inline std::string* TabNavigation::mutable_favicon_url() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.favicon_url)
  return favicon_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TabNavigation::release_favicon_url() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.favicon_url)
  if (!has_favicon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return favicon_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_favicon_url(std::string* favicon_url) {
  if (favicon_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  favicon_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), favicon_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.favicon_url)
}

// optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
inline bool TabNavigation::has_blocked_state() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TabNavigation::clear_blocked_state() {
  blocked_state_ = 1;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::sync_pb::TabNavigation_BlockedState TabNavigation::blocked_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.blocked_state)
  return static_cast< ::sync_pb::TabNavigation_BlockedState >(blocked_state_);
}
inline void TabNavigation::set_blocked_state(::sync_pb::TabNavigation_BlockedState value) {
  assert(::sync_pb::TabNavigation_BlockedState_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  blocked_state_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.blocked_state)
}

// repeated string content_pack_categories = 19;
inline int TabNavigation::content_pack_categories_size() const {
  return content_pack_categories_.size();
}
inline void TabNavigation::clear_content_pack_categories() {
  content_pack_categories_.Clear();
}
inline const std::string& TabNavigation::content_pack_categories(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.content_pack_categories)
  return content_pack_categories_.Get(index);
}
inline std::string* TabNavigation::mutable_content_pack_categories(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.content_pack_categories)
  return content_pack_categories_.Mutable(index);
}
inline void TabNavigation::set_content_pack_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.content_pack_categories)
  content_pack_categories_.Mutable(index)->assign(value);
}
inline void TabNavigation::set_content_pack_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.content_pack_categories)
  content_pack_categories_.Mutable(index)->assign(std::move(value));
}
inline void TabNavigation::set_content_pack_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_pack_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.content_pack_categories)
}
inline void TabNavigation::set_content_pack_categories(int index, const char* value, size_t size) {
  content_pack_categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.content_pack_categories)
}
inline std::string* TabNavigation::add_content_pack_categories() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.TabNavigation.content_pack_categories)
  return content_pack_categories_.Add();
}
inline void TabNavigation::add_content_pack_categories(const std::string& value) {
  content_pack_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.TabNavigation.content_pack_categories)
}
inline void TabNavigation::add_content_pack_categories(std::string&& value) {
  content_pack_categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.TabNavigation.content_pack_categories)
}
inline void TabNavigation::add_content_pack_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_pack_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.TabNavigation.content_pack_categories)
}
inline void TabNavigation::add_content_pack_categories(const char* value, size_t size) {
  content_pack_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.TabNavigation.content_pack_categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TabNavigation::content_pack_categories() const {
  // @@protoc_insertion_point(field_list:sync_pb.TabNavigation.content_pack_categories)
  return content_pack_categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TabNavigation::mutable_content_pack_categories() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.TabNavigation.content_pack_categories)
  return &content_pack_categories_;
}

// optional int32 http_status_code = 20;
inline bool TabNavigation::has_http_status_code() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TabNavigation::clear_http_status_code() {
  http_status_code_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TabNavigation::http_status_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.http_status_code)
  return http_status_code_;
}
inline void TabNavigation::set_http_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  http_status_code_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.http_status_code)
}

// optional int32 obsolete_referrer_policy = 21 [deprecated = true];
inline bool TabNavigation::has_obsolete_referrer_policy() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TabNavigation::clear_obsolete_referrer_policy() {
  obsolete_referrer_policy_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TabNavigation::obsolete_referrer_policy() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.obsolete_referrer_policy)
  return obsolete_referrer_policy_;
}
inline void TabNavigation::set_obsolete_referrer_policy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  obsolete_referrer_policy_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.obsolete_referrer_policy)
}

// optional bool is_restored = 22;
inline bool TabNavigation::has_is_restored() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TabNavigation::clear_is_restored() {
  is_restored_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool TabNavigation::is_restored() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.is_restored)
  return is_restored_;
}
inline void TabNavigation::set_is_restored(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_restored_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.is_restored)
}

// repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
inline int TabNavigation::navigation_redirect_size() const {
  return navigation_redirect_.size();
}
inline void TabNavigation::clear_navigation_redirect() {
  navigation_redirect_.Clear();
}
inline ::sync_pb::NavigationRedirect* TabNavigation::mutable_navigation_redirect(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.navigation_redirect)
  return navigation_redirect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::NavigationRedirect >*
TabNavigation::mutable_navigation_redirect() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.TabNavigation.navigation_redirect)
  return &navigation_redirect_;
}
inline const ::sync_pb::NavigationRedirect& TabNavigation::navigation_redirect(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_redirect)
  return navigation_redirect_.Get(index);
}
inline ::sync_pb::NavigationRedirect* TabNavigation::add_navigation_redirect() {
  // @@protoc_insertion_point(field_add:sync_pb.TabNavigation.navigation_redirect)
  return navigation_redirect_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::NavigationRedirect >&
TabNavigation::navigation_redirect() const {
  // @@protoc_insertion_point(field_list:sync_pb.TabNavigation.navigation_redirect)
  return navigation_redirect_;
}

// optional string last_navigation_redirect_url = 24;
inline bool TabNavigation::has_last_navigation_redirect_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TabNavigation::clear_last_navigation_redirect_url() {
  last_navigation_redirect_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TabNavigation::last_navigation_redirect_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.last_navigation_redirect_url)
  return last_navigation_redirect_url_.GetNoArena();
}
inline void TabNavigation::set_last_navigation_redirect_url(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  last_navigation_redirect_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.last_navigation_redirect_url)
}
inline void TabNavigation::set_last_navigation_redirect_url(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  last_navigation_redirect_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.last_navigation_redirect_url)
}
inline void TabNavigation::set_last_navigation_redirect_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  last_navigation_redirect_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.last_navigation_redirect_url)
}
inline void TabNavigation::set_last_navigation_redirect_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  last_navigation_redirect_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.last_navigation_redirect_url)
}
inline std::string* TabNavigation::mutable_last_navigation_redirect_url() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.last_navigation_redirect_url)
  return last_navigation_redirect_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TabNavigation::release_last_navigation_redirect_url() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.last_navigation_redirect_url)
  if (!has_last_navigation_redirect_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return last_navigation_redirect_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_last_navigation_redirect_url(std::string* last_navigation_redirect_url) {
  if (last_navigation_redirect_url != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  last_navigation_redirect_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_navigation_redirect_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.last_navigation_redirect_url)
}

// optional int32 correct_referrer_policy = 25 [default = 1];
inline bool TabNavigation::has_correct_referrer_policy() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TabNavigation::clear_correct_referrer_policy() {
  correct_referrer_policy_ = 1;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TabNavigation::correct_referrer_policy() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.correct_referrer_policy)
  return correct_referrer_policy_;
}
inline void TabNavigation::set_correct_referrer_policy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  correct_referrer_policy_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.correct_referrer_policy)
}

// optional .sync_pb.TabNavigation.PasswordState password_state = 26;
inline bool TabNavigation::has_password_state() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TabNavigation::clear_password_state() {
  password_state_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::sync_pb::TabNavigation_PasswordState TabNavigation::password_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.password_state)
  return static_cast< ::sync_pb::TabNavigation_PasswordState >(password_state_);
}
inline void TabNavigation::set_password_state(::sync_pb::TabNavigation_PasswordState value) {
  assert(::sync_pb::TabNavigation_PasswordState_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  password_state_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.password_state)
}

// optional int64 task_id = 27;
inline bool TabNavigation::has_task_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TabNavigation::clear_task_id() {
  task_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TabNavigation::task_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.task_id)
  return task_id_;
}
inline void TabNavigation::set_task_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00100000u;
  task_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.task_id)
}

// repeated int64 ancestor_task_id = 28;
inline int TabNavigation::ancestor_task_id_size() const {
  return ancestor_task_id_.size();
}
inline void TabNavigation::clear_ancestor_task_id() {
  ancestor_task_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TabNavigation::ancestor_task_id(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.ancestor_task_id)
  return ancestor_task_id_.Get(index);
}
inline void TabNavigation::set_ancestor_task_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  ancestor_task_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.ancestor_task_id)
}
inline void TabNavigation::add_ancestor_task_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  ancestor_task_id_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.TabNavigation.ancestor_task_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TabNavigation::ancestor_task_id() const {
  // @@protoc_insertion_point(field_list:sync_pb.TabNavigation.ancestor_task_id)
  return ancestor_task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TabNavigation::mutable_ancestor_task_id() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.TabNavigation.ancestor_task_id)
  return &ancestor_task_id_;
}

// optional .sync_pb.ReplacedNavigation replaced_navigation = 29;
inline bool TabNavigation::has_replaced_navigation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TabNavigation::clear_replaced_navigation() {
  if (replaced_navigation_ != nullptr) replaced_navigation_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::sync_pb::ReplacedNavigation& TabNavigation::replaced_navigation() const {
  const ::sync_pb::ReplacedNavigation* p = replaced_navigation_;
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.replaced_navigation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::ReplacedNavigation*>(
      &::sync_pb::_ReplacedNavigation_default_instance_);
}
inline ::sync_pb::ReplacedNavigation* TabNavigation::release_replaced_navigation() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.replaced_navigation)
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::ReplacedNavigation* temp = replaced_navigation_;
  replaced_navigation_ = nullptr;
  return temp;
}
inline ::sync_pb::ReplacedNavigation* TabNavigation::mutable_replaced_navigation() {
  _has_bits_[0] |= 0x00000080u;
  if (replaced_navigation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ReplacedNavigation>(GetArenaNoVirtual());
    replaced_navigation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.replaced_navigation)
  return replaced_navigation_;
}
inline void TabNavigation::set_allocated_replaced_navigation(::sync_pb::ReplacedNavigation* replaced_navigation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete replaced_navigation_;
  }
  if (replaced_navigation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      replaced_navigation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replaced_navigation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  replaced_navigation_ = replaced_navigation;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.replaced_navigation)
}

// optional string page_language = 30;
inline bool TabNavigation::has_page_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TabNavigation::clear_page_language() {
  page_language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TabNavigation::page_language() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.page_language)
  return page_language_.GetNoArena();
}
inline void TabNavigation::set_page_language(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  page_language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.page_language)
}
inline void TabNavigation::set_page_language(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  page_language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.page_language)
}
inline void TabNavigation::set_page_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  page_language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.page_language)
}
inline void TabNavigation::set_page_language(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  page_language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.page_language)
}
inline std::string* TabNavigation::mutable_page_language() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.page_language)
  return page_language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TabNavigation::release_page_language() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.page_language)
  if (!has_page_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return page_language_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_page_language(std::string* page_language) {
  if (page_language != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  page_language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_language);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.page_language)
}

// -------------------------------------------------------------------

// NavigationRedirect

// optional string url = 1;
inline bool NavigationRedirect::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationRedirect::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NavigationRedirect::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.NavigationRedirect.url)
  return url_.GetNoArena();
}
inline void NavigationRedirect::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.NavigationRedirect.url)
}
inline void NavigationRedirect::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.NavigationRedirect.url)
}
inline void NavigationRedirect::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.NavigationRedirect.url)
}
inline void NavigationRedirect::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.NavigationRedirect.url)
}
inline std::string* NavigationRedirect::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.NavigationRedirect.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NavigationRedirect::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.NavigationRedirect.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NavigationRedirect::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NavigationRedirect.url)
}

// -------------------------------------------------------------------

// ReplacedNavigation

// optional string first_committed_url = 1;
inline bool ReplacedNavigation::has_first_committed_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplacedNavigation::clear_first_committed_url() {
  first_committed_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReplacedNavigation::first_committed_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReplacedNavigation.first_committed_url)
  return first_committed_url_.GetNoArena();
}
inline void ReplacedNavigation::set_first_committed_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  first_committed_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ReplacedNavigation.first_committed_url)
}
inline void ReplacedNavigation::set_first_committed_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  first_committed_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ReplacedNavigation.first_committed_url)
}
inline void ReplacedNavigation::set_first_committed_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  first_committed_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ReplacedNavigation.first_committed_url)
}
inline void ReplacedNavigation::set_first_committed_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  first_committed_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ReplacedNavigation.first_committed_url)
}
inline std::string* ReplacedNavigation::mutable_first_committed_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ReplacedNavigation.first_committed_url)
  return first_committed_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReplacedNavigation::release_first_committed_url() {
  // @@protoc_insertion_point(field_release:sync_pb.ReplacedNavigation.first_committed_url)
  if (!has_first_committed_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return first_committed_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReplacedNavigation::set_allocated_first_committed_url(std::string* first_committed_url) {
  if (first_committed_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  first_committed_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_committed_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ReplacedNavigation.first_committed_url)
}

// optional int64 first_timestamp_msec = 2;
inline bool ReplacedNavigation::has_first_timestamp_msec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplacedNavigation::clear_first_timestamp_msec() {
  first_timestamp_msec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplacedNavigation::first_timestamp_msec() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReplacedNavigation.first_timestamp_msec)
  return first_timestamp_msec_;
}
inline void ReplacedNavigation::set_first_timestamp_msec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  first_timestamp_msec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ReplacedNavigation.first_timestamp_msec)
}

// optional .sync_pb.SyncEnums.PageTransition first_page_transition = 3;
inline bool ReplacedNavigation::has_first_page_transition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplacedNavigation::clear_first_page_transition() {
  first_page_transition_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::SyncEnums_PageTransition ReplacedNavigation::first_page_transition() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReplacedNavigation.first_page_transition)
  return static_cast< ::sync_pb::SyncEnums_PageTransition >(first_page_transition_);
}
inline void ReplacedNavigation::set_first_page_transition(::sync_pb::SyncEnums_PageTransition value) {
  assert(::sync_pb::SyncEnums_PageTransition_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  first_page_transition_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ReplacedNavigation.first_page_transition)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::SessionWindow_BrowserType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::SessionTab_FaviconType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::TabNavigation_BlockedState> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::TabNavigation_PasswordState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_session_5fspecifics_2eproto
