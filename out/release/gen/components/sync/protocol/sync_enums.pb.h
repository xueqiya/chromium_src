// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sync_5fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sync_5fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sync_5fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sync_5fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class SyncEnums;
class SyncEnumsDefaultTypeInternal;
extern SyncEnumsDefaultTypeInternal _SyncEnums_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::SyncEnums* Arena::CreateMaybeMessage<::sync_pb::SyncEnums>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum SyncEnums_SingletonDebugEventType : int {
  SyncEnums_SingletonDebugEventType_CONNECTION_STATUS_CHANGE = 1,
  SyncEnums_SingletonDebugEventType_UPDATED_TOKEN = 2,
  SyncEnums_SingletonDebugEventType_PASSPHRASE_REQUIRED = 3,
  SyncEnums_SingletonDebugEventType_PASSPHRASE_ACCEPTED = 4,
  SyncEnums_SingletonDebugEventType_INITIALIZATION_COMPLETE = 5,
  SyncEnums_SingletonDebugEventType_STOP_SYNCING_PERMANENTLY = 6,
  SyncEnums_SingletonDebugEventType_ENCRYPTION_COMPLETE = 7,
  SyncEnums_SingletonDebugEventType_ACTIONABLE_ERROR = 8,
  SyncEnums_SingletonDebugEventType_ENCRYPTED_TYPES_CHANGED = 9,
  SyncEnums_SingletonDebugEventType_PASSPHRASE_TYPE_CHANGED = 10,
  SyncEnums_SingletonDebugEventType_KEYSTORE_TOKEN_UPDATED = 11,
  SyncEnums_SingletonDebugEventType_CONFIGURE_COMPLETE = 12,
  SyncEnums_SingletonDebugEventType_BOOTSTRAP_TOKEN_UPDATED = 13,
  SyncEnums_SingletonDebugEventType_TRUSTED_VAULT_KEY_REQUIRED = 14,
  SyncEnums_SingletonDebugEventType_TRUSTED_VAULT_KEY_ACCEPTED = 15
};
bool SyncEnums_SingletonDebugEventType_IsValid(int value);
constexpr SyncEnums_SingletonDebugEventType SyncEnums_SingletonDebugEventType_SingletonDebugEventType_MIN = SyncEnums_SingletonDebugEventType_CONNECTION_STATUS_CHANGE;
constexpr SyncEnums_SingletonDebugEventType SyncEnums_SingletonDebugEventType_SingletonDebugEventType_MAX = SyncEnums_SingletonDebugEventType_TRUSTED_VAULT_KEY_ACCEPTED;
constexpr int SyncEnums_SingletonDebugEventType_SingletonDebugEventType_ARRAYSIZE = SyncEnums_SingletonDebugEventType_SingletonDebugEventType_MAX + 1;

const std::string& SyncEnums_SingletonDebugEventType_Name(SyncEnums_SingletonDebugEventType value);
template<typename T>
inline const std::string& SyncEnums_SingletonDebugEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncEnums_SingletonDebugEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncEnums_SingletonDebugEventType_Name.");
  return SyncEnums_SingletonDebugEventType_Name(static_cast<SyncEnums_SingletonDebugEventType>(enum_t_value));
}
bool SyncEnums_SingletonDebugEventType_Parse(
    const std::string& name, SyncEnums_SingletonDebugEventType* value);
enum SyncEnums_PageTransition : int {
  SyncEnums_PageTransition_LINK = 0,
  SyncEnums_PageTransition_TYPED = 1,
  SyncEnums_PageTransition_AUTO_BOOKMARK = 2,
  SyncEnums_PageTransition_AUTO_SUBFRAME = 3,
  SyncEnums_PageTransition_MANUAL_SUBFRAME = 4,
  SyncEnums_PageTransition_GENERATED = 5,
  SyncEnums_PageTransition_AUTO_TOPLEVEL = 6,
  SyncEnums_PageTransition_FORM_SUBMIT = 7,
  SyncEnums_PageTransition_RELOAD = 8,
  SyncEnums_PageTransition_KEYWORD = 9,
  SyncEnums_PageTransition_KEYWORD_GENERATED = 10
};
bool SyncEnums_PageTransition_IsValid(int value);
constexpr SyncEnums_PageTransition SyncEnums_PageTransition_PageTransition_MIN = SyncEnums_PageTransition_LINK;
constexpr SyncEnums_PageTransition SyncEnums_PageTransition_PageTransition_MAX = SyncEnums_PageTransition_KEYWORD_GENERATED;
constexpr int SyncEnums_PageTransition_PageTransition_ARRAYSIZE = SyncEnums_PageTransition_PageTransition_MAX + 1;

const std::string& SyncEnums_PageTransition_Name(SyncEnums_PageTransition value);
template<typename T>
inline const std::string& SyncEnums_PageTransition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncEnums_PageTransition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncEnums_PageTransition_Name.");
  return SyncEnums_PageTransition_Name(static_cast<SyncEnums_PageTransition>(enum_t_value));
}
bool SyncEnums_PageTransition_Parse(
    const std::string& name, SyncEnums_PageTransition* value);
enum SyncEnums_PageTransitionRedirectType : int {
  SyncEnums_PageTransitionRedirectType_CLIENT_REDIRECT = 1,
  SyncEnums_PageTransitionRedirectType_SERVER_REDIRECT = 2
};
bool SyncEnums_PageTransitionRedirectType_IsValid(int value);
constexpr SyncEnums_PageTransitionRedirectType SyncEnums_PageTransitionRedirectType_PageTransitionRedirectType_MIN = SyncEnums_PageTransitionRedirectType_CLIENT_REDIRECT;
constexpr SyncEnums_PageTransitionRedirectType SyncEnums_PageTransitionRedirectType_PageTransitionRedirectType_MAX = SyncEnums_PageTransitionRedirectType_SERVER_REDIRECT;
constexpr int SyncEnums_PageTransitionRedirectType_PageTransitionRedirectType_ARRAYSIZE = SyncEnums_PageTransitionRedirectType_PageTransitionRedirectType_MAX + 1;

const std::string& SyncEnums_PageTransitionRedirectType_Name(SyncEnums_PageTransitionRedirectType value);
template<typename T>
inline const std::string& SyncEnums_PageTransitionRedirectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncEnums_PageTransitionRedirectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncEnums_PageTransitionRedirectType_Name.");
  return SyncEnums_PageTransitionRedirectType_Name(static_cast<SyncEnums_PageTransitionRedirectType>(enum_t_value));
}
bool SyncEnums_PageTransitionRedirectType_Parse(
    const std::string& name, SyncEnums_PageTransitionRedirectType* value);
enum SyncEnums_ErrorType : int {
  SyncEnums_ErrorType_SUCCESS = 0,
  SyncEnums_ErrorType_DEPRECATED_ACCESS_DENIED = 1,
  SyncEnums_ErrorType_NOT_MY_BIRTHDAY = 2,
  SyncEnums_ErrorType_THROTTLED = 3,
  SyncEnums_ErrorType_DEPRECATED_AUTH_EXPIRED = 4,
  SyncEnums_ErrorType_DEPRECATED_USER_NOT_ACTIVATED = 5,
  SyncEnums_ErrorType_DEPRECATED_AUTH_INVALID = 6,
  SyncEnums_ErrorType_CLEAR_PENDING = 7,
  SyncEnums_ErrorType_TRANSIENT_ERROR = 8,
  SyncEnums_ErrorType_MIGRATION_DONE = 9,
  SyncEnums_ErrorType_DISABLED_BY_ADMIN = 10,
  SyncEnums_ErrorType_DEPRECATED_USER_ROLLBACK = 11,
  SyncEnums_ErrorType_PARTIAL_FAILURE = 12,
  SyncEnums_ErrorType_CLIENT_DATA_OBSOLETE = 13,
  SyncEnums_ErrorType_UNKNOWN = 100
};
bool SyncEnums_ErrorType_IsValid(int value);
constexpr SyncEnums_ErrorType SyncEnums_ErrorType_ErrorType_MIN = SyncEnums_ErrorType_SUCCESS;
constexpr SyncEnums_ErrorType SyncEnums_ErrorType_ErrorType_MAX = SyncEnums_ErrorType_UNKNOWN;
constexpr int SyncEnums_ErrorType_ErrorType_ARRAYSIZE = SyncEnums_ErrorType_ErrorType_MAX + 1;

const std::string& SyncEnums_ErrorType_Name(SyncEnums_ErrorType value);
template<typename T>
inline const std::string& SyncEnums_ErrorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncEnums_ErrorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncEnums_ErrorType_Name.");
  return SyncEnums_ErrorType_Name(static_cast<SyncEnums_ErrorType>(enum_t_value));
}
bool SyncEnums_ErrorType_Parse(
    const std::string& name, SyncEnums_ErrorType* value);
enum SyncEnums_Action : int {
  SyncEnums_Action_UPGRADE_CLIENT = 0,
  SyncEnums_Action_DEPRECATED_CLEAR_USER_DATA_AND_RESYNC = 1,
  SyncEnums_Action_DEPRECATED_ENABLE_SYNC_ON_ACCOUNT = 2,
  SyncEnums_Action_DEPRECATED_STOP_AND_RESTART_SYNC = 3,
  SyncEnums_Action_DEPRECATED_DISABLE_SYNC_ON_CLIENT = 4,
  SyncEnums_Action_UNKNOWN_ACTION = 5
};
bool SyncEnums_Action_IsValid(int value);
constexpr SyncEnums_Action SyncEnums_Action_Action_MIN = SyncEnums_Action_UPGRADE_CLIENT;
constexpr SyncEnums_Action SyncEnums_Action_Action_MAX = SyncEnums_Action_UNKNOWN_ACTION;
constexpr int SyncEnums_Action_Action_ARRAYSIZE = SyncEnums_Action_Action_MAX + 1;

const std::string& SyncEnums_Action_Name(SyncEnums_Action value);
template<typename T>
inline const std::string& SyncEnums_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncEnums_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncEnums_Action_Name.");
  return SyncEnums_Action_Name(static_cast<SyncEnums_Action>(enum_t_value));
}
bool SyncEnums_Action_Parse(
    const std::string& name, SyncEnums_Action* value);
enum SyncEnums_DeviceType : int {
  SyncEnums_DeviceType_TYPE_UNSET = 0,
  SyncEnums_DeviceType_TYPE_WIN = 1,
  SyncEnums_DeviceType_TYPE_MAC = 2,
  SyncEnums_DeviceType_TYPE_LINUX = 3,
  SyncEnums_DeviceType_TYPE_CROS = 4,
  SyncEnums_DeviceType_TYPE_OTHER = 5,
  SyncEnums_DeviceType_TYPE_PHONE = 6,
  SyncEnums_DeviceType_TYPE_TABLET = 7
};
bool SyncEnums_DeviceType_IsValid(int value);
constexpr SyncEnums_DeviceType SyncEnums_DeviceType_DeviceType_MIN = SyncEnums_DeviceType_TYPE_UNSET;
constexpr SyncEnums_DeviceType SyncEnums_DeviceType_DeviceType_MAX = SyncEnums_DeviceType_TYPE_TABLET;
constexpr int SyncEnums_DeviceType_DeviceType_ARRAYSIZE = SyncEnums_DeviceType_DeviceType_MAX + 1;

const std::string& SyncEnums_DeviceType_Name(SyncEnums_DeviceType value);
template<typename T>
inline const std::string& SyncEnums_DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncEnums_DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncEnums_DeviceType_Name.");
  return SyncEnums_DeviceType_Name(static_cast<SyncEnums_DeviceType>(enum_t_value));
}
bool SyncEnums_DeviceType_Parse(
    const std::string& name, SyncEnums_DeviceType* value);
enum SyncEnums_GetUpdatesOrigin : int {
  SyncEnums_GetUpdatesOrigin_UNKNOWN_ORIGIN = 0,
  SyncEnums_GetUpdatesOrigin_PERIODIC = 4,
  SyncEnums_GetUpdatesOrigin_NEWLY_SUPPORTED_DATATYPE = 7,
  SyncEnums_GetUpdatesOrigin_MIGRATION = 8,
  SyncEnums_GetUpdatesOrigin_NEW_CLIENT = 9,
  SyncEnums_GetUpdatesOrigin_RECONFIGURATION = 10,
  SyncEnums_GetUpdatesOrigin_GU_TRIGGER = 12,
  SyncEnums_GetUpdatesOrigin_RETRY = 13,
  SyncEnums_GetUpdatesOrigin_PROGRAMMATIC = 14
};
bool SyncEnums_GetUpdatesOrigin_IsValid(int value);
constexpr SyncEnums_GetUpdatesOrigin SyncEnums_GetUpdatesOrigin_GetUpdatesOrigin_MIN = SyncEnums_GetUpdatesOrigin_UNKNOWN_ORIGIN;
constexpr SyncEnums_GetUpdatesOrigin SyncEnums_GetUpdatesOrigin_GetUpdatesOrigin_MAX = SyncEnums_GetUpdatesOrigin_PROGRAMMATIC;
constexpr int SyncEnums_GetUpdatesOrigin_GetUpdatesOrigin_ARRAYSIZE = SyncEnums_GetUpdatesOrigin_GetUpdatesOrigin_MAX + 1;

const std::string& SyncEnums_GetUpdatesOrigin_Name(SyncEnums_GetUpdatesOrigin value);
template<typename T>
inline const std::string& SyncEnums_GetUpdatesOrigin_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncEnums_GetUpdatesOrigin>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncEnums_GetUpdatesOrigin_Name.");
  return SyncEnums_GetUpdatesOrigin_Name(static_cast<SyncEnums_GetUpdatesOrigin>(enum_t_value));
}
bool SyncEnums_GetUpdatesOrigin_Parse(
    const std::string& name, SyncEnums_GetUpdatesOrigin* value);
// ===================================================================

class SyncEnums :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SyncEnums) */ {
 public:
  SyncEnums();
  virtual ~SyncEnums();

  SyncEnums(const SyncEnums& from);
  SyncEnums(SyncEnums&& from) noexcept
    : SyncEnums() {
    *this = ::std::move(from);
  }

  inline SyncEnums& operator=(const SyncEnums& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncEnums& operator=(SyncEnums&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SyncEnums& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncEnums* internal_default_instance() {
    return reinterpret_cast<const SyncEnums*>(
               &_SyncEnums_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncEnums& a, SyncEnums& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncEnums* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncEnums* New() const final {
    return CreateMaybeMessage<SyncEnums>(nullptr);
  }

  SyncEnums* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncEnums>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SyncEnums& from);
  void MergeFrom(const SyncEnums& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyncEnums* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SyncEnums";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SyncEnums_SingletonDebugEventType SingletonDebugEventType;
  static constexpr SingletonDebugEventType CONNECTION_STATUS_CHANGE =
    SyncEnums_SingletonDebugEventType_CONNECTION_STATUS_CHANGE;
  static constexpr SingletonDebugEventType UPDATED_TOKEN =
    SyncEnums_SingletonDebugEventType_UPDATED_TOKEN;
  static constexpr SingletonDebugEventType PASSPHRASE_REQUIRED =
    SyncEnums_SingletonDebugEventType_PASSPHRASE_REQUIRED;
  static constexpr SingletonDebugEventType PASSPHRASE_ACCEPTED =
    SyncEnums_SingletonDebugEventType_PASSPHRASE_ACCEPTED;
  static constexpr SingletonDebugEventType INITIALIZATION_COMPLETE =
    SyncEnums_SingletonDebugEventType_INITIALIZATION_COMPLETE;
  static constexpr SingletonDebugEventType STOP_SYNCING_PERMANENTLY =
    SyncEnums_SingletonDebugEventType_STOP_SYNCING_PERMANENTLY;
  static constexpr SingletonDebugEventType ENCRYPTION_COMPLETE =
    SyncEnums_SingletonDebugEventType_ENCRYPTION_COMPLETE;
  static constexpr SingletonDebugEventType ACTIONABLE_ERROR =
    SyncEnums_SingletonDebugEventType_ACTIONABLE_ERROR;
  static constexpr SingletonDebugEventType ENCRYPTED_TYPES_CHANGED =
    SyncEnums_SingletonDebugEventType_ENCRYPTED_TYPES_CHANGED;
  static constexpr SingletonDebugEventType PASSPHRASE_TYPE_CHANGED =
    SyncEnums_SingletonDebugEventType_PASSPHRASE_TYPE_CHANGED;
  static constexpr SingletonDebugEventType KEYSTORE_TOKEN_UPDATED =
    SyncEnums_SingletonDebugEventType_KEYSTORE_TOKEN_UPDATED;
  static constexpr SingletonDebugEventType CONFIGURE_COMPLETE =
    SyncEnums_SingletonDebugEventType_CONFIGURE_COMPLETE;
  static constexpr SingletonDebugEventType BOOTSTRAP_TOKEN_UPDATED =
    SyncEnums_SingletonDebugEventType_BOOTSTRAP_TOKEN_UPDATED;
  static constexpr SingletonDebugEventType TRUSTED_VAULT_KEY_REQUIRED =
    SyncEnums_SingletonDebugEventType_TRUSTED_VAULT_KEY_REQUIRED;
  static constexpr SingletonDebugEventType TRUSTED_VAULT_KEY_ACCEPTED =
    SyncEnums_SingletonDebugEventType_TRUSTED_VAULT_KEY_ACCEPTED;
  static inline bool SingletonDebugEventType_IsValid(int value) {
    return SyncEnums_SingletonDebugEventType_IsValid(value);
  }
  static constexpr SingletonDebugEventType SingletonDebugEventType_MIN =
    SyncEnums_SingletonDebugEventType_SingletonDebugEventType_MIN;
  static constexpr SingletonDebugEventType SingletonDebugEventType_MAX =
    SyncEnums_SingletonDebugEventType_SingletonDebugEventType_MAX;
  static constexpr int SingletonDebugEventType_ARRAYSIZE =
    SyncEnums_SingletonDebugEventType_SingletonDebugEventType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SingletonDebugEventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SingletonDebugEventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SingletonDebugEventType_Name.");
    return SyncEnums_SingletonDebugEventType_Name(enum_t_value);
  }
  static inline bool SingletonDebugEventType_Parse(const std::string& name,
      SingletonDebugEventType* value) {
    return SyncEnums_SingletonDebugEventType_Parse(name, value);
  }

  typedef SyncEnums_PageTransition PageTransition;
  static constexpr PageTransition LINK =
    SyncEnums_PageTransition_LINK;
  static constexpr PageTransition TYPED =
    SyncEnums_PageTransition_TYPED;
  static constexpr PageTransition AUTO_BOOKMARK =
    SyncEnums_PageTransition_AUTO_BOOKMARK;
  static constexpr PageTransition AUTO_SUBFRAME =
    SyncEnums_PageTransition_AUTO_SUBFRAME;
  static constexpr PageTransition MANUAL_SUBFRAME =
    SyncEnums_PageTransition_MANUAL_SUBFRAME;
  static constexpr PageTransition GENERATED =
    SyncEnums_PageTransition_GENERATED;
  static constexpr PageTransition AUTO_TOPLEVEL =
    SyncEnums_PageTransition_AUTO_TOPLEVEL;
  static constexpr PageTransition FORM_SUBMIT =
    SyncEnums_PageTransition_FORM_SUBMIT;
  static constexpr PageTransition RELOAD =
    SyncEnums_PageTransition_RELOAD;
  static constexpr PageTransition KEYWORD =
    SyncEnums_PageTransition_KEYWORD;
  static constexpr PageTransition KEYWORD_GENERATED =
    SyncEnums_PageTransition_KEYWORD_GENERATED;
  static inline bool PageTransition_IsValid(int value) {
    return SyncEnums_PageTransition_IsValid(value);
  }
  static constexpr PageTransition PageTransition_MIN =
    SyncEnums_PageTransition_PageTransition_MIN;
  static constexpr PageTransition PageTransition_MAX =
    SyncEnums_PageTransition_PageTransition_MAX;
  static constexpr int PageTransition_ARRAYSIZE =
    SyncEnums_PageTransition_PageTransition_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PageTransition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PageTransition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PageTransition_Name.");
    return SyncEnums_PageTransition_Name(enum_t_value);
  }
  static inline bool PageTransition_Parse(const std::string& name,
      PageTransition* value) {
    return SyncEnums_PageTransition_Parse(name, value);
  }

  typedef SyncEnums_PageTransitionRedirectType PageTransitionRedirectType;
  static constexpr PageTransitionRedirectType CLIENT_REDIRECT =
    SyncEnums_PageTransitionRedirectType_CLIENT_REDIRECT;
  static constexpr PageTransitionRedirectType SERVER_REDIRECT =
    SyncEnums_PageTransitionRedirectType_SERVER_REDIRECT;
  static inline bool PageTransitionRedirectType_IsValid(int value) {
    return SyncEnums_PageTransitionRedirectType_IsValid(value);
  }
  static constexpr PageTransitionRedirectType PageTransitionRedirectType_MIN =
    SyncEnums_PageTransitionRedirectType_PageTransitionRedirectType_MIN;
  static constexpr PageTransitionRedirectType PageTransitionRedirectType_MAX =
    SyncEnums_PageTransitionRedirectType_PageTransitionRedirectType_MAX;
  static constexpr int PageTransitionRedirectType_ARRAYSIZE =
    SyncEnums_PageTransitionRedirectType_PageTransitionRedirectType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PageTransitionRedirectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PageTransitionRedirectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PageTransitionRedirectType_Name.");
    return SyncEnums_PageTransitionRedirectType_Name(enum_t_value);
  }
  static inline bool PageTransitionRedirectType_Parse(const std::string& name,
      PageTransitionRedirectType* value) {
    return SyncEnums_PageTransitionRedirectType_Parse(name, value);
  }

  typedef SyncEnums_ErrorType ErrorType;
  static constexpr ErrorType SUCCESS =
    SyncEnums_ErrorType_SUCCESS;
  static constexpr ErrorType DEPRECATED_ACCESS_DENIED =
    SyncEnums_ErrorType_DEPRECATED_ACCESS_DENIED;
  static constexpr ErrorType NOT_MY_BIRTHDAY =
    SyncEnums_ErrorType_NOT_MY_BIRTHDAY;
  static constexpr ErrorType THROTTLED =
    SyncEnums_ErrorType_THROTTLED;
  static constexpr ErrorType DEPRECATED_AUTH_EXPIRED =
    SyncEnums_ErrorType_DEPRECATED_AUTH_EXPIRED;
  static constexpr ErrorType DEPRECATED_USER_NOT_ACTIVATED =
    SyncEnums_ErrorType_DEPRECATED_USER_NOT_ACTIVATED;
  static constexpr ErrorType DEPRECATED_AUTH_INVALID =
    SyncEnums_ErrorType_DEPRECATED_AUTH_INVALID;
  static constexpr ErrorType CLEAR_PENDING =
    SyncEnums_ErrorType_CLEAR_PENDING;
  static constexpr ErrorType TRANSIENT_ERROR =
    SyncEnums_ErrorType_TRANSIENT_ERROR;
  static constexpr ErrorType MIGRATION_DONE =
    SyncEnums_ErrorType_MIGRATION_DONE;
  static constexpr ErrorType DISABLED_BY_ADMIN =
    SyncEnums_ErrorType_DISABLED_BY_ADMIN;
  static constexpr ErrorType DEPRECATED_USER_ROLLBACK =
    SyncEnums_ErrorType_DEPRECATED_USER_ROLLBACK;
  static constexpr ErrorType PARTIAL_FAILURE =
    SyncEnums_ErrorType_PARTIAL_FAILURE;
  static constexpr ErrorType CLIENT_DATA_OBSOLETE =
    SyncEnums_ErrorType_CLIENT_DATA_OBSOLETE;
  static constexpr ErrorType UNKNOWN =
    SyncEnums_ErrorType_UNKNOWN;
  static inline bool ErrorType_IsValid(int value) {
    return SyncEnums_ErrorType_IsValid(value);
  }
  static constexpr ErrorType ErrorType_MIN =
    SyncEnums_ErrorType_ErrorType_MIN;
  static constexpr ErrorType ErrorType_MAX =
    SyncEnums_ErrorType_ErrorType_MAX;
  static constexpr int ErrorType_ARRAYSIZE =
    SyncEnums_ErrorType_ErrorType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ErrorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorType_Name.");
    return SyncEnums_ErrorType_Name(enum_t_value);
  }
  static inline bool ErrorType_Parse(const std::string& name,
      ErrorType* value) {
    return SyncEnums_ErrorType_Parse(name, value);
  }

  typedef SyncEnums_Action Action;
  static constexpr Action UPGRADE_CLIENT =
    SyncEnums_Action_UPGRADE_CLIENT;
  static constexpr Action DEPRECATED_CLEAR_USER_DATA_AND_RESYNC =
    SyncEnums_Action_DEPRECATED_CLEAR_USER_DATA_AND_RESYNC;
  static constexpr Action DEPRECATED_ENABLE_SYNC_ON_ACCOUNT =
    SyncEnums_Action_DEPRECATED_ENABLE_SYNC_ON_ACCOUNT;
  static constexpr Action DEPRECATED_STOP_AND_RESTART_SYNC =
    SyncEnums_Action_DEPRECATED_STOP_AND_RESTART_SYNC;
  static constexpr Action DEPRECATED_DISABLE_SYNC_ON_CLIENT =
    SyncEnums_Action_DEPRECATED_DISABLE_SYNC_ON_CLIENT;
  static constexpr Action UNKNOWN_ACTION =
    SyncEnums_Action_UNKNOWN_ACTION;
  static inline bool Action_IsValid(int value) {
    return SyncEnums_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    SyncEnums_Action_Action_MIN;
  static constexpr Action Action_MAX =
    SyncEnums_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    SyncEnums_Action_Action_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return SyncEnums_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(const std::string& name,
      Action* value) {
    return SyncEnums_Action_Parse(name, value);
  }

  typedef SyncEnums_DeviceType DeviceType;
  static constexpr DeviceType TYPE_UNSET =
    SyncEnums_DeviceType_TYPE_UNSET;
  static constexpr DeviceType TYPE_WIN =
    SyncEnums_DeviceType_TYPE_WIN;
  static constexpr DeviceType TYPE_MAC =
    SyncEnums_DeviceType_TYPE_MAC;
  static constexpr DeviceType TYPE_LINUX =
    SyncEnums_DeviceType_TYPE_LINUX;
  static constexpr DeviceType TYPE_CROS =
    SyncEnums_DeviceType_TYPE_CROS;
  static constexpr DeviceType TYPE_OTHER =
    SyncEnums_DeviceType_TYPE_OTHER;
  static constexpr DeviceType TYPE_PHONE =
    SyncEnums_DeviceType_TYPE_PHONE;
  static constexpr DeviceType TYPE_TABLET =
    SyncEnums_DeviceType_TYPE_TABLET;
  static inline bool DeviceType_IsValid(int value) {
    return SyncEnums_DeviceType_IsValid(value);
  }
  static constexpr DeviceType DeviceType_MIN =
    SyncEnums_DeviceType_DeviceType_MIN;
  static constexpr DeviceType DeviceType_MAX =
    SyncEnums_DeviceType_DeviceType_MAX;
  static constexpr int DeviceType_ARRAYSIZE =
    SyncEnums_DeviceType_DeviceType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceType_Name.");
    return SyncEnums_DeviceType_Name(enum_t_value);
  }
  static inline bool DeviceType_Parse(const std::string& name,
      DeviceType* value) {
    return SyncEnums_DeviceType_Parse(name, value);
  }

  typedef SyncEnums_GetUpdatesOrigin GetUpdatesOrigin;
  static constexpr GetUpdatesOrigin UNKNOWN_ORIGIN =
    SyncEnums_GetUpdatesOrigin_UNKNOWN_ORIGIN;
  static constexpr GetUpdatesOrigin PERIODIC =
    SyncEnums_GetUpdatesOrigin_PERIODIC;
  static constexpr GetUpdatesOrigin NEWLY_SUPPORTED_DATATYPE =
    SyncEnums_GetUpdatesOrigin_NEWLY_SUPPORTED_DATATYPE;
  static constexpr GetUpdatesOrigin MIGRATION =
    SyncEnums_GetUpdatesOrigin_MIGRATION;
  static constexpr GetUpdatesOrigin NEW_CLIENT =
    SyncEnums_GetUpdatesOrigin_NEW_CLIENT;
  static constexpr GetUpdatesOrigin RECONFIGURATION =
    SyncEnums_GetUpdatesOrigin_RECONFIGURATION;
  static constexpr GetUpdatesOrigin GU_TRIGGER =
    SyncEnums_GetUpdatesOrigin_GU_TRIGGER;
  static constexpr GetUpdatesOrigin RETRY =
    SyncEnums_GetUpdatesOrigin_RETRY;
  static constexpr GetUpdatesOrigin PROGRAMMATIC =
    SyncEnums_GetUpdatesOrigin_PROGRAMMATIC;
  static inline bool GetUpdatesOrigin_IsValid(int value) {
    return SyncEnums_GetUpdatesOrigin_IsValid(value);
  }
  static constexpr GetUpdatesOrigin GetUpdatesOrigin_MIN =
    SyncEnums_GetUpdatesOrigin_GetUpdatesOrigin_MIN;
  static constexpr GetUpdatesOrigin GetUpdatesOrigin_MAX =
    SyncEnums_GetUpdatesOrigin_GetUpdatesOrigin_MAX;
  static constexpr int GetUpdatesOrigin_ARRAYSIZE =
    SyncEnums_GetUpdatesOrigin_GetUpdatesOrigin_ARRAYSIZE;
  template<typename T>
  static inline const std::string& GetUpdatesOrigin_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GetUpdatesOrigin>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GetUpdatesOrigin_Name.");
    return SyncEnums_GetUpdatesOrigin_Name(enum_t_value);
  }
  static inline bool GetUpdatesOrigin_Parse(const std::string& name,
      GetUpdatesOrigin* value) {
    return SyncEnums_GetUpdatesOrigin_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.SyncEnums)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_5fenums_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncEnums

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::SyncEnums_SingletonDebugEventType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::SyncEnums_PageTransition> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::SyncEnums_PageTransitionRedirectType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::SyncEnums_ErrorType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::SyncEnums_Action> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::SyncEnums_DeviceType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::SyncEnums_GetUpdatesOrigin> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sync_5fenums_2eproto
