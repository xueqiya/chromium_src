// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiments_specifics.proto

#include "experiments_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillCullingFlags_experiments_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnhancedBookmarksFlags_experiments_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaviconSyncFlags_experiments_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcmChannelFlags_experiments_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcmInvalidationsFlags_experiments_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoryDeleteDirectives_experiments_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeystoreEncryptionFlags_experiments_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreCommitUpdateAvoidanceFlags_experiments_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletSyncFlags_experiments_5fspecifics_2eproto;
namespace sync_pb {
class KeystoreEncryptionFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeystoreEncryptionFlags> _instance;
} _KeystoreEncryptionFlags_default_instance_;
class HistoryDeleteDirectivesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryDeleteDirectives> _instance;
} _HistoryDeleteDirectives_default_instance_;
class AutofillCullingFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillCullingFlags> _instance;
} _AutofillCullingFlags_default_instance_;
class FaviconSyncFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaviconSyncFlags> _instance;
} _FaviconSyncFlags_default_instance_;
class PreCommitUpdateAvoidanceFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreCommitUpdateAvoidanceFlags> _instance;
} _PreCommitUpdateAvoidanceFlags_default_instance_;
class GcmChannelFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcmChannelFlags> _instance;
} _GcmChannelFlags_default_instance_;
class EnhancedBookmarksFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnhancedBookmarksFlags> _instance;
} _EnhancedBookmarksFlags_default_instance_;
class GcmInvalidationsFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GcmInvalidationsFlags> _instance;
} _GcmInvalidationsFlags_default_instance_;
class WalletSyncFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletSyncFlags> _instance;
} _WalletSyncFlags_default_instance_;
class ExperimentsSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExperimentsSpecifics> _instance;
} _ExperimentsSpecifics_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_AutofillCullingFlags_experiments_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_AutofillCullingFlags_default_instance_;
    new (ptr) ::sync_pb::AutofillCullingFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::AutofillCullingFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillCullingFlags_experiments_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutofillCullingFlags_experiments_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_EnhancedBookmarksFlags_experiments_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_EnhancedBookmarksFlags_default_instance_;
    new (ptr) ::sync_pb::EnhancedBookmarksFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::EnhancedBookmarksFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnhancedBookmarksFlags_experiments_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnhancedBookmarksFlags_experiments_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_ExperimentsSpecifics_experiments_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ExperimentsSpecifics_default_instance_;
    new (ptr) ::sync_pb::ExperimentsSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ExperimentsSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ExperimentsSpecifics_experiments_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsscc_info_ExperimentsSpecifics_experiments_5fspecifics_2eproto}, {
      &scc_info_KeystoreEncryptionFlags_experiments_5fspecifics_2eproto.base,
      &scc_info_HistoryDeleteDirectives_experiments_5fspecifics_2eproto.base,
      &scc_info_AutofillCullingFlags_experiments_5fspecifics_2eproto.base,
      &scc_info_FaviconSyncFlags_experiments_5fspecifics_2eproto.base,
      &scc_info_PreCommitUpdateAvoidanceFlags_experiments_5fspecifics_2eproto.base,
      &scc_info_GcmChannelFlags_experiments_5fspecifics_2eproto.base,
      &scc_info_EnhancedBookmarksFlags_experiments_5fspecifics_2eproto.base,
      &scc_info_GcmInvalidationsFlags_experiments_5fspecifics_2eproto.base,
      &scc_info_WalletSyncFlags_experiments_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_FaviconSyncFlags_experiments_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_FaviconSyncFlags_default_instance_;
    new (ptr) ::sync_pb::FaviconSyncFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::FaviconSyncFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaviconSyncFlags_experiments_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaviconSyncFlags_experiments_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_GcmChannelFlags_experiments_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GcmChannelFlags_default_instance_;
    new (ptr) ::sync_pb::GcmChannelFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GcmChannelFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcmChannelFlags_experiments_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GcmChannelFlags_experiments_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_GcmInvalidationsFlags_experiments_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GcmInvalidationsFlags_default_instance_;
    new (ptr) ::sync_pb::GcmInvalidationsFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GcmInvalidationsFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GcmInvalidationsFlags_experiments_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GcmInvalidationsFlags_experiments_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_HistoryDeleteDirectives_experiments_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_HistoryDeleteDirectives_default_instance_;
    new (ptr) ::sync_pb::HistoryDeleteDirectives();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::HistoryDeleteDirectives::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoryDeleteDirectives_experiments_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HistoryDeleteDirectives_experiments_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_KeystoreEncryptionFlags_experiments_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_KeystoreEncryptionFlags_default_instance_;
    new (ptr) ::sync_pb::KeystoreEncryptionFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::KeystoreEncryptionFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeystoreEncryptionFlags_experiments_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_KeystoreEncryptionFlags_experiments_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_PreCommitUpdateAvoidanceFlags_experiments_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_PreCommitUpdateAvoidanceFlags_default_instance_;
    new (ptr) ::sync_pb::PreCommitUpdateAvoidanceFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::PreCommitUpdateAvoidanceFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreCommitUpdateAvoidanceFlags_experiments_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PreCommitUpdateAvoidanceFlags_experiments_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_WalletSyncFlags_experiments_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_WalletSyncFlags_default_instance_;
    new (ptr) ::sync_pb::WalletSyncFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::WalletSyncFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletSyncFlags_experiments_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WalletSyncFlags_experiments_5fspecifics_2eproto}, {}};

namespace sync_pb {

// ===================================================================

void KeystoreEncryptionFlags::InitAsDefaultInstance() {
}
class KeystoreEncryptionFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<KeystoreEncryptionFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KeystoreEncryptionFlags::KeystoreEncryptionFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.KeystoreEncryptionFlags)
}
KeystoreEncryptionFlags::KeystoreEncryptionFlags(const KeystoreEncryptionFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.KeystoreEncryptionFlags)
}

void KeystoreEncryptionFlags::SharedCtor() {
  enabled_ = false;
}

KeystoreEncryptionFlags::~KeystoreEncryptionFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.KeystoreEncryptionFlags)
  SharedDtor();
}

void KeystoreEncryptionFlags::SharedDtor() {
}

void KeystoreEncryptionFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeystoreEncryptionFlags& KeystoreEncryptionFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeystoreEncryptionFlags_experiments_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void KeystoreEncryptionFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.KeystoreEncryptionFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KeystoreEncryptionFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KeystoreEncryptionFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.KeystoreEncryptionFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.KeystoreEncryptionFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.KeystoreEncryptionFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KeystoreEncryptionFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.KeystoreEncryptionFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.KeystoreEncryptionFlags)
}

size_t KeystoreEncryptionFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.KeystoreEncryptionFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeystoreEncryptionFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KeystoreEncryptionFlags*>(
      &from));
}

void KeystoreEncryptionFlags::MergeFrom(const KeystoreEncryptionFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.KeystoreEncryptionFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void KeystoreEncryptionFlags::CopyFrom(const KeystoreEncryptionFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.KeystoreEncryptionFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystoreEncryptionFlags::IsInitialized() const {
  return true;
}

void KeystoreEncryptionFlags::InternalSwap(KeystoreEncryptionFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string KeystoreEncryptionFlags::GetTypeName() const {
  return "sync_pb.KeystoreEncryptionFlags";
}


// ===================================================================

void HistoryDeleteDirectives::InitAsDefaultInstance() {
}
class HistoryDeleteDirectives::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoryDeleteDirectives>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HistoryDeleteDirectives::HistoryDeleteDirectives()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.HistoryDeleteDirectives)
}
HistoryDeleteDirectives::HistoryDeleteDirectives(const HistoryDeleteDirectives& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.HistoryDeleteDirectives)
}

void HistoryDeleteDirectives::SharedCtor() {
  enabled_ = false;
}

HistoryDeleteDirectives::~HistoryDeleteDirectives() {
  // @@protoc_insertion_point(destructor:sync_pb.HistoryDeleteDirectives)
  SharedDtor();
}

void HistoryDeleteDirectives::SharedDtor() {
}

void HistoryDeleteDirectives::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryDeleteDirectives& HistoryDeleteDirectives::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryDeleteDirectives_experiments_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void HistoryDeleteDirectives::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.HistoryDeleteDirectives)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HistoryDeleteDirectives::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HistoryDeleteDirectives::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.HistoryDeleteDirectives)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.HistoryDeleteDirectives)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.HistoryDeleteDirectives)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HistoryDeleteDirectives::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.HistoryDeleteDirectives)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.HistoryDeleteDirectives)
}

size_t HistoryDeleteDirectives::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.HistoryDeleteDirectives)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryDeleteDirectives::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HistoryDeleteDirectives*>(
      &from));
}

void HistoryDeleteDirectives::MergeFrom(const HistoryDeleteDirectives& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistoryDeleteDirectives)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void HistoryDeleteDirectives::CopyFrom(const HistoryDeleteDirectives& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistoryDeleteDirectives)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryDeleteDirectives::IsInitialized() const {
  return true;
}

void HistoryDeleteDirectives::InternalSwap(HistoryDeleteDirectives* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string HistoryDeleteDirectives::GetTypeName() const {
  return "sync_pb.HistoryDeleteDirectives";
}


// ===================================================================

void AutofillCullingFlags::InitAsDefaultInstance() {
}
class AutofillCullingFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillCullingFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillCullingFlags::AutofillCullingFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.AutofillCullingFlags)
}
AutofillCullingFlags::AutofillCullingFlags(const AutofillCullingFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillCullingFlags)
}

void AutofillCullingFlags::SharedCtor() {
  enabled_ = false;
}

AutofillCullingFlags::~AutofillCullingFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillCullingFlags)
  SharedDtor();
}

void AutofillCullingFlags::SharedDtor() {
}

void AutofillCullingFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillCullingFlags& AutofillCullingFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillCullingFlags_experiments_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void AutofillCullingFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillCullingFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillCullingFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillCullingFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.AutofillCullingFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.AutofillCullingFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.AutofillCullingFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillCullingFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.AutofillCullingFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.AutofillCullingFlags)
}

size_t AutofillCullingFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillCullingFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillCullingFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillCullingFlags*>(
      &from));
}

void AutofillCullingFlags::MergeFrom(const AutofillCullingFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillCullingFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void AutofillCullingFlags::CopyFrom(const AutofillCullingFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillCullingFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillCullingFlags::IsInitialized() const {
  return true;
}

void AutofillCullingFlags::InternalSwap(AutofillCullingFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string AutofillCullingFlags::GetTypeName() const {
  return "sync_pb.AutofillCullingFlags";
}


// ===================================================================

void FaviconSyncFlags::InitAsDefaultInstance() {
}
class FaviconSyncFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<FaviconSyncFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_favicon_sync_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FaviconSyncFlags::FaviconSyncFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.FaviconSyncFlags)
}
FaviconSyncFlags::FaviconSyncFlags(const FaviconSyncFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&favicon_sync_limit_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(favicon_sync_limit_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.FaviconSyncFlags)
}

void FaviconSyncFlags::SharedCtor() {
  enabled_ = false;
  favicon_sync_limit_ = 200;
}

FaviconSyncFlags::~FaviconSyncFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.FaviconSyncFlags)
  SharedDtor();
}

void FaviconSyncFlags::SharedDtor() {
}

void FaviconSyncFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaviconSyncFlags& FaviconSyncFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaviconSyncFlags_experiments_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void FaviconSyncFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.FaviconSyncFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    enabled_ = false;
    favicon_sync_limit_ = 200;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaviconSyncFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 favicon_sync_limit = 2 [default = 200];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_favicon_sync_limit(&has_bits);
          favicon_sync_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaviconSyncFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.FaviconSyncFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 favicon_sync_limit = 2 [default = 200];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_favicon_sync_limit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &favicon_sync_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.FaviconSyncFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.FaviconSyncFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaviconSyncFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.FaviconSyncFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional int32 favicon_sync_limit = 2 [default = 200];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->favicon_sync_limit(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.FaviconSyncFlags)
}

size_t FaviconSyncFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.FaviconSyncFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 favicon_sync_limit = 2 [default = 200];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->favicon_sync_limit());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaviconSyncFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FaviconSyncFlags*>(
      &from));
}

void FaviconSyncFlags::MergeFrom(const FaviconSyncFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.FaviconSyncFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      favicon_sync_limit_ = from.favicon_sync_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FaviconSyncFlags::CopyFrom(const FaviconSyncFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.FaviconSyncFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaviconSyncFlags::IsInitialized() const {
  return true;
}

void FaviconSyncFlags::InternalSwap(FaviconSyncFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(favicon_sync_limit_, other->favicon_sync_limit_);
}

std::string FaviconSyncFlags::GetTypeName() const {
  return "sync_pb.FaviconSyncFlags";
}


// ===================================================================

void PreCommitUpdateAvoidanceFlags::InitAsDefaultInstance() {
}
class PreCommitUpdateAvoidanceFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<PreCommitUpdateAvoidanceFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PreCommitUpdateAvoidanceFlags::PreCommitUpdateAvoidanceFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.PreCommitUpdateAvoidanceFlags)
}
PreCommitUpdateAvoidanceFlags::PreCommitUpdateAvoidanceFlags(const PreCommitUpdateAvoidanceFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.PreCommitUpdateAvoidanceFlags)
}

void PreCommitUpdateAvoidanceFlags::SharedCtor() {
  enabled_ = false;
}

PreCommitUpdateAvoidanceFlags::~PreCommitUpdateAvoidanceFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.PreCommitUpdateAvoidanceFlags)
  SharedDtor();
}

void PreCommitUpdateAvoidanceFlags::SharedDtor() {
}

void PreCommitUpdateAvoidanceFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreCommitUpdateAvoidanceFlags& PreCommitUpdateAvoidanceFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreCommitUpdateAvoidanceFlags_experiments_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void PreCommitUpdateAvoidanceFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PreCommitUpdateAvoidanceFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PreCommitUpdateAvoidanceFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.PreCommitUpdateAvoidanceFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.PreCommitUpdateAvoidanceFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PreCommitUpdateAvoidanceFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.PreCommitUpdateAvoidanceFlags)
}

size_t PreCommitUpdateAvoidanceFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreCommitUpdateAvoidanceFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PreCommitUpdateAvoidanceFlags*>(
      &from));
}

void PreCommitUpdateAvoidanceFlags::MergeFrom(const PreCommitUpdateAvoidanceFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void PreCommitUpdateAvoidanceFlags::CopyFrom(const PreCommitUpdateAvoidanceFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreCommitUpdateAvoidanceFlags::IsInitialized() const {
  return true;
}

void PreCommitUpdateAvoidanceFlags::InternalSwap(PreCommitUpdateAvoidanceFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string PreCommitUpdateAvoidanceFlags::GetTypeName() const {
  return "sync_pb.PreCommitUpdateAvoidanceFlags";
}


// ===================================================================

void GcmChannelFlags::InitAsDefaultInstance() {
}
class GcmChannelFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<GcmChannelFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GcmChannelFlags::GcmChannelFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GcmChannelFlags)
}
GcmChannelFlags::GcmChannelFlags(const GcmChannelFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GcmChannelFlags)
}

void GcmChannelFlags::SharedCtor() {
  enabled_ = false;
}

GcmChannelFlags::~GcmChannelFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.GcmChannelFlags)
  SharedDtor();
}

void GcmChannelFlags::SharedDtor() {
}

void GcmChannelFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GcmChannelFlags& GcmChannelFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GcmChannelFlags_experiments_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void GcmChannelFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GcmChannelFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GcmChannelFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GcmChannelFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GcmChannelFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GcmChannelFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GcmChannelFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GcmChannelFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GcmChannelFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GcmChannelFlags)
}

size_t GcmChannelFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GcmChannelFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcmChannelFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GcmChannelFlags*>(
      &from));
}

void GcmChannelFlags::MergeFrom(const GcmChannelFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GcmChannelFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void GcmChannelFlags::CopyFrom(const GcmChannelFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GcmChannelFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmChannelFlags::IsInitialized() const {
  return true;
}

void GcmChannelFlags::InternalSwap(GcmChannelFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string GcmChannelFlags::GetTypeName() const {
  return "sync_pb.GcmChannelFlags";
}


// ===================================================================

void EnhancedBookmarksFlags::InitAsDefaultInstance() {
}
class EnhancedBookmarksFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<EnhancedBookmarksFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extension_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnhancedBookmarksFlags::EnhancedBookmarksFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.EnhancedBookmarksFlags)
}
EnhancedBookmarksFlags::EnhancedBookmarksFlags(const EnhancedBookmarksFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_id()) {
    extension_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.EnhancedBookmarksFlags)
}

void EnhancedBookmarksFlags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnhancedBookmarksFlags_experiments_5fspecifics_2eproto.base);
  extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
}

EnhancedBookmarksFlags::~EnhancedBookmarksFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.EnhancedBookmarksFlags)
  SharedDtor();
}

void EnhancedBookmarksFlags::SharedDtor() {
  extension_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnhancedBookmarksFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnhancedBookmarksFlags& EnhancedBookmarksFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnhancedBookmarksFlags_experiments_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void EnhancedBookmarksFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EnhancedBookmarksFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    extension_id_.ClearNonDefaultToEmptyNoArena();
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnhancedBookmarksFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string extension_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extension_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnhancedBookmarksFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.EnhancedBookmarksFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extension_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.EnhancedBookmarksFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.EnhancedBookmarksFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnhancedBookmarksFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.EnhancedBookmarksFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional string extension_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extension_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.EnhancedBookmarksFlags)
}

size_t EnhancedBookmarksFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EnhancedBookmarksFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string extension_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->extension_id());
    }

    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnhancedBookmarksFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnhancedBookmarksFlags*>(
      &from));
}

void EnhancedBookmarksFlags::MergeFrom(const EnhancedBookmarksFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EnhancedBookmarksFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extension_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnhancedBookmarksFlags::CopyFrom(const EnhancedBookmarksFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EnhancedBookmarksFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnhancedBookmarksFlags::IsInitialized() const {
  return true;
}

void EnhancedBookmarksFlags::InternalSwap(EnhancedBookmarksFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extension_id_.Swap(&other->extension_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enabled_, other->enabled_);
}

std::string EnhancedBookmarksFlags::GetTypeName() const {
  return "sync_pb.EnhancedBookmarksFlags";
}


// ===================================================================

void GcmInvalidationsFlags::InitAsDefaultInstance() {
}
class GcmInvalidationsFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<GcmInvalidationsFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GcmInvalidationsFlags::GcmInvalidationsFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GcmInvalidationsFlags)
}
GcmInvalidationsFlags::GcmInvalidationsFlags(const GcmInvalidationsFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GcmInvalidationsFlags)
}

void GcmInvalidationsFlags::SharedCtor() {
  enabled_ = false;
}

GcmInvalidationsFlags::~GcmInvalidationsFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.GcmInvalidationsFlags)
  SharedDtor();
}

void GcmInvalidationsFlags::SharedDtor() {
}

void GcmInvalidationsFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GcmInvalidationsFlags& GcmInvalidationsFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GcmInvalidationsFlags_experiments_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void GcmInvalidationsFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GcmInvalidationsFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GcmInvalidationsFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GcmInvalidationsFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GcmInvalidationsFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GcmInvalidationsFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GcmInvalidationsFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GcmInvalidationsFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GcmInvalidationsFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GcmInvalidationsFlags)
}

size_t GcmInvalidationsFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GcmInvalidationsFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcmInvalidationsFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GcmInvalidationsFlags*>(
      &from));
}

void GcmInvalidationsFlags::MergeFrom(const GcmInvalidationsFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GcmInvalidationsFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void GcmInvalidationsFlags::CopyFrom(const GcmInvalidationsFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GcmInvalidationsFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmInvalidationsFlags::IsInitialized() const {
  return true;
}

void GcmInvalidationsFlags::InternalSwap(GcmInvalidationsFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string GcmInvalidationsFlags::GetTypeName() const {
  return "sync_pb.GcmInvalidationsFlags";
}


// ===================================================================

void WalletSyncFlags::InitAsDefaultInstance() {
}
class WalletSyncFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<WalletSyncFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WalletSyncFlags::WalletSyncFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.WalletSyncFlags)
}
WalletSyncFlags::WalletSyncFlags(const WalletSyncFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.WalletSyncFlags)
}

void WalletSyncFlags::SharedCtor() {
  enabled_ = false;
}

WalletSyncFlags::~WalletSyncFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.WalletSyncFlags)
  SharedDtor();
}

void WalletSyncFlags::SharedDtor() {
}

void WalletSyncFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletSyncFlags& WalletSyncFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WalletSyncFlags_experiments_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void WalletSyncFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WalletSyncFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WalletSyncFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WalletSyncFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.WalletSyncFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.WalletSyncFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.WalletSyncFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WalletSyncFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.WalletSyncFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.WalletSyncFlags)
}

size_t WalletSyncFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletSyncFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletSyncFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WalletSyncFlags*>(
      &from));
}

void WalletSyncFlags::MergeFrom(const WalletSyncFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletSyncFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void WalletSyncFlags::CopyFrom(const WalletSyncFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletSyncFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletSyncFlags::IsInitialized() const {
  return true;
}

void WalletSyncFlags::InternalSwap(WalletSyncFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string WalletSyncFlags::GetTypeName() const {
  return "sync_pb.WalletSyncFlags";
}


// ===================================================================

void ExperimentsSpecifics::InitAsDefaultInstance() {
  ::sync_pb::_ExperimentsSpecifics_default_instance_._instance.get_mutable()->keystore_encryption_ = const_cast< ::sync_pb::KeystoreEncryptionFlags*>(
      ::sync_pb::KeystoreEncryptionFlags::internal_default_instance());
  ::sync_pb::_ExperimentsSpecifics_default_instance_._instance.get_mutable()->history_delete_directives_ = const_cast< ::sync_pb::HistoryDeleteDirectives*>(
      ::sync_pb::HistoryDeleteDirectives::internal_default_instance());
  ::sync_pb::_ExperimentsSpecifics_default_instance_._instance.get_mutable()->autofill_culling_ = const_cast< ::sync_pb::AutofillCullingFlags*>(
      ::sync_pb::AutofillCullingFlags::internal_default_instance());
  ::sync_pb::_ExperimentsSpecifics_default_instance_._instance.get_mutable()->favicon_sync_ = const_cast< ::sync_pb::FaviconSyncFlags*>(
      ::sync_pb::FaviconSyncFlags::internal_default_instance());
  ::sync_pb::_ExperimentsSpecifics_default_instance_._instance.get_mutable()->pre_commit_update_avoidance_ = const_cast< ::sync_pb::PreCommitUpdateAvoidanceFlags*>(
      ::sync_pb::PreCommitUpdateAvoidanceFlags::internal_default_instance());
  ::sync_pb::_ExperimentsSpecifics_default_instance_._instance.get_mutable()->gcm_channel_ = const_cast< ::sync_pb::GcmChannelFlags*>(
      ::sync_pb::GcmChannelFlags::internal_default_instance());
  ::sync_pb::_ExperimentsSpecifics_default_instance_._instance.get_mutable()->obsolete_enhanced_bookmarks_ = const_cast< ::sync_pb::EnhancedBookmarksFlags*>(
      ::sync_pb::EnhancedBookmarksFlags::internal_default_instance());
  ::sync_pb::_ExperimentsSpecifics_default_instance_._instance.get_mutable()->gcm_invalidations_ = const_cast< ::sync_pb::GcmInvalidationsFlags*>(
      ::sync_pb::GcmInvalidationsFlags::internal_default_instance());
  ::sync_pb::_ExperimentsSpecifics_default_instance_._instance.get_mutable()->obsolete_wallet_sync_ = const_cast< ::sync_pb::WalletSyncFlags*>(
      ::sync_pb::WalletSyncFlags::internal_default_instance());
}
class ExperimentsSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<ExperimentsSpecifics>()._has_bits_);
  static const ::sync_pb::KeystoreEncryptionFlags& keystore_encryption(const ExperimentsSpecifics* msg);
  static void set_has_keystore_encryption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::HistoryDeleteDirectives& history_delete_directives(const ExperimentsSpecifics* msg);
  static void set_has_history_delete_directives(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::AutofillCullingFlags& autofill_culling(const ExperimentsSpecifics* msg);
  static void set_has_autofill_culling(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::FaviconSyncFlags& favicon_sync(const ExperimentsSpecifics* msg);
  static void set_has_favicon_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sync_pb::PreCommitUpdateAvoidanceFlags& pre_commit_update_avoidance(const ExperimentsSpecifics* msg);
  static void set_has_pre_commit_update_avoidance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::GcmChannelFlags& gcm_channel(const ExperimentsSpecifics* msg);
  static void set_has_gcm_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sync_pb::EnhancedBookmarksFlags& obsolete_enhanced_bookmarks(const ExperimentsSpecifics* msg);
  static void set_has_obsolete_enhanced_bookmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::GcmInvalidationsFlags& gcm_invalidations(const ExperimentsSpecifics* msg);
  static void set_has_gcm_invalidations(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::sync_pb::WalletSyncFlags& obsolete_wallet_sync(const ExperimentsSpecifics* msg);
  static void set_has_obsolete_wallet_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::sync_pb::KeystoreEncryptionFlags&
ExperimentsSpecifics::_Internal::keystore_encryption(const ExperimentsSpecifics* msg) {
  return *msg->keystore_encryption_;
}
const ::sync_pb::HistoryDeleteDirectives&
ExperimentsSpecifics::_Internal::history_delete_directives(const ExperimentsSpecifics* msg) {
  return *msg->history_delete_directives_;
}
const ::sync_pb::AutofillCullingFlags&
ExperimentsSpecifics::_Internal::autofill_culling(const ExperimentsSpecifics* msg) {
  return *msg->autofill_culling_;
}
const ::sync_pb::FaviconSyncFlags&
ExperimentsSpecifics::_Internal::favicon_sync(const ExperimentsSpecifics* msg) {
  return *msg->favicon_sync_;
}
const ::sync_pb::PreCommitUpdateAvoidanceFlags&
ExperimentsSpecifics::_Internal::pre_commit_update_avoidance(const ExperimentsSpecifics* msg) {
  return *msg->pre_commit_update_avoidance_;
}
const ::sync_pb::GcmChannelFlags&
ExperimentsSpecifics::_Internal::gcm_channel(const ExperimentsSpecifics* msg) {
  return *msg->gcm_channel_;
}
const ::sync_pb::EnhancedBookmarksFlags&
ExperimentsSpecifics::_Internal::obsolete_enhanced_bookmarks(const ExperimentsSpecifics* msg) {
  return *msg->obsolete_enhanced_bookmarks_;
}
const ::sync_pb::GcmInvalidationsFlags&
ExperimentsSpecifics::_Internal::gcm_invalidations(const ExperimentsSpecifics* msg) {
  return *msg->gcm_invalidations_;
}
const ::sync_pb::WalletSyncFlags&
ExperimentsSpecifics::_Internal::obsolete_wallet_sync(const ExperimentsSpecifics* msg) {
  return *msg->obsolete_wallet_sync_;
}
ExperimentsSpecifics::ExperimentsSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ExperimentsSpecifics)
}
ExperimentsSpecifics::ExperimentsSpecifics(const ExperimentsSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keystore_encryption()) {
    keystore_encryption_ = new ::sync_pb::KeystoreEncryptionFlags(*from.keystore_encryption_);
  } else {
    keystore_encryption_ = nullptr;
  }
  if (from.has_history_delete_directives()) {
    history_delete_directives_ = new ::sync_pb::HistoryDeleteDirectives(*from.history_delete_directives_);
  } else {
    history_delete_directives_ = nullptr;
  }
  if (from.has_autofill_culling()) {
    autofill_culling_ = new ::sync_pb::AutofillCullingFlags(*from.autofill_culling_);
  } else {
    autofill_culling_ = nullptr;
  }
  if (from.has_favicon_sync()) {
    favicon_sync_ = new ::sync_pb::FaviconSyncFlags(*from.favicon_sync_);
  } else {
    favicon_sync_ = nullptr;
  }
  if (from.has_pre_commit_update_avoidance()) {
    pre_commit_update_avoidance_ = new ::sync_pb::PreCommitUpdateAvoidanceFlags(*from.pre_commit_update_avoidance_);
  } else {
    pre_commit_update_avoidance_ = nullptr;
  }
  if (from.has_gcm_channel()) {
    gcm_channel_ = new ::sync_pb::GcmChannelFlags(*from.gcm_channel_);
  } else {
    gcm_channel_ = nullptr;
  }
  if (from.has_obsolete_enhanced_bookmarks()) {
    obsolete_enhanced_bookmarks_ = new ::sync_pb::EnhancedBookmarksFlags(*from.obsolete_enhanced_bookmarks_);
  } else {
    obsolete_enhanced_bookmarks_ = nullptr;
  }
  if (from.has_gcm_invalidations()) {
    gcm_invalidations_ = new ::sync_pb::GcmInvalidationsFlags(*from.gcm_invalidations_);
  } else {
    gcm_invalidations_ = nullptr;
  }
  if (from.has_obsolete_wallet_sync()) {
    obsolete_wallet_sync_ = new ::sync_pb::WalletSyncFlags(*from.obsolete_wallet_sync_);
  } else {
    obsolete_wallet_sync_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.ExperimentsSpecifics)
}

void ExperimentsSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExperimentsSpecifics_experiments_5fspecifics_2eproto.base);
  ::memset(&keystore_encryption_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obsolete_wallet_sync_) -
      reinterpret_cast<char*>(&keystore_encryption_)) + sizeof(obsolete_wallet_sync_));
}

ExperimentsSpecifics::~ExperimentsSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.ExperimentsSpecifics)
  SharedDtor();
}

void ExperimentsSpecifics::SharedDtor() {
  if (this != internal_default_instance()) delete keystore_encryption_;
  if (this != internal_default_instance()) delete history_delete_directives_;
  if (this != internal_default_instance()) delete autofill_culling_;
  if (this != internal_default_instance()) delete favicon_sync_;
  if (this != internal_default_instance()) delete pre_commit_update_avoidance_;
  if (this != internal_default_instance()) delete gcm_channel_;
  if (this != internal_default_instance()) delete obsolete_enhanced_bookmarks_;
  if (this != internal_default_instance()) delete gcm_invalidations_;
  if (this != internal_default_instance()) delete obsolete_wallet_sync_;
}

void ExperimentsSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExperimentsSpecifics& ExperimentsSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExperimentsSpecifics_experiments_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void ExperimentsSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ExperimentsSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(keystore_encryption_ != nullptr);
      keystore_encryption_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(history_delete_directives_ != nullptr);
      history_delete_directives_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(autofill_culling_ != nullptr);
      autofill_culling_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(favicon_sync_ != nullptr);
      favicon_sync_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pre_commit_update_avoidance_ != nullptr);
      pre_commit_update_avoidance_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gcm_channel_ != nullptr);
      gcm_channel_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(obsolete_enhanced_bookmarks_ != nullptr);
      obsolete_enhanced_bookmarks_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(gcm_invalidations_ != nullptr);
      gcm_invalidations_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(obsolete_wallet_sync_ != nullptr);
    obsolete_wallet_sync_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExperimentsSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_keystore_encryption(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_history_delete_directives(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_autofill_culling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_favicon_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_pre_commit_update_avoidance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_gcm_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_obsolete_enhanced_bookmarks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_gcm_invalidations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_obsolete_wallet_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExperimentsSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ExperimentsSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keystore_encryption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_history_delete_directives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofill_culling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_favicon_sync()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pre_commit_update_avoidance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gcm_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_obsolete_enhanced_bookmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gcm_invalidations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_obsolete_wallet_sync()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ExperimentsSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ExperimentsSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExperimentsSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ExperimentsSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::keystore_encryption(this), output);
  }

  // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::history_delete_directives(this), output);
  }

  // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::autofill_culling(this), output);
  }

  // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::favicon_sync(this), output);
  }

  // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::pre_commit_update_avoidance(this), output);
  }

  // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::gcm_channel(this), output);
  }

  // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::obsolete_enhanced_bookmarks(this), output);
  }

  // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::gcm_invalidations(this), output);
  }

  // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::obsolete_wallet_sync(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ExperimentsSpecifics)
}

size_t ExperimentsSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ExperimentsSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keystore_encryption_);
    }

    // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *history_delete_directives_);
    }

    // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autofill_culling_);
    }

    // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *favicon_sync_);
    }

    // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pre_commit_update_avoidance_);
    }

    // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gcm_channel_);
    }

    // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obsolete_enhanced_bookmarks_);
    }

    // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gcm_invalidations_);
    }

  }
  // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obsolete_wallet_sync_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExperimentsSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExperimentsSpecifics*>(
      &from));
}

void ExperimentsSpecifics::MergeFrom(const ExperimentsSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ExperimentsSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_keystore_encryption()->::sync_pb::KeystoreEncryptionFlags::MergeFrom(from.keystore_encryption());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_history_delete_directives()->::sync_pb::HistoryDeleteDirectives::MergeFrom(from.history_delete_directives());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_autofill_culling()->::sync_pb::AutofillCullingFlags::MergeFrom(from.autofill_culling());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_favicon_sync()->::sync_pb::FaviconSyncFlags::MergeFrom(from.favicon_sync());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_pre_commit_update_avoidance()->::sync_pb::PreCommitUpdateAvoidanceFlags::MergeFrom(from.pre_commit_update_avoidance());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_gcm_channel()->::sync_pb::GcmChannelFlags::MergeFrom(from.gcm_channel());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_obsolete_enhanced_bookmarks()->::sync_pb::EnhancedBookmarksFlags::MergeFrom(from.obsolete_enhanced_bookmarks());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_gcm_invalidations()->::sync_pb::GcmInvalidationsFlags::MergeFrom(from.gcm_invalidations());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_obsolete_wallet_sync()->::sync_pb::WalletSyncFlags::MergeFrom(from.obsolete_wallet_sync());
  }
}

void ExperimentsSpecifics::CopyFrom(const ExperimentsSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ExperimentsSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperimentsSpecifics::IsInitialized() const {
  return true;
}

void ExperimentsSpecifics::InternalSwap(ExperimentsSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(keystore_encryption_, other->keystore_encryption_);
  swap(history_delete_directives_, other->history_delete_directives_);
  swap(autofill_culling_, other->autofill_culling_);
  swap(favicon_sync_, other->favicon_sync_);
  swap(pre_commit_update_avoidance_, other->pre_commit_update_avoidance_);
  swap(gcm_channel_, other->gcm_channel_);
  swap(obsolete_enhanced_bookmarks_, other->obsolete_enhanced_bookmarks_);
  swap(gcm_invalidations_, other->gcm_invalidations_);
  swap(obsolete_wallet_sync_, other->obsolete_wallet_sync_);
}

std::string ExperimentsSpecifics::GetTypeName() const {
  return "sync_pb.ExperimentsSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::KeystoreEncryptionFlags* Arena::CreateMaybeMessage< ::sync_pb::KeystoreEncryptionFlags >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::KeystoreEncryptionFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::HistoryDeleteDirectives* Arena::CreateMaybeMessage< ::sync_pb::HistoryDeleteDirectives >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::HistoryDeleteDirectives >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillCullingFlags* Arena::CreateMaybeMessage< ::sync_pb::AutofillCullingFlags >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::AutofillCullingFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::FaviconSyncFlags* Arena::CreateMaybeMessage< ::sync_pb::FaviconSyncFlags >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::FaviconSyncFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::PreCommitUpdateAvoidanceFlags* Arena::CreateMaybeMessage< ::sync_pb::PreCommitUpdateAvoidanceFlags >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::PreCommitUpdateAvoidanceFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GcmChannelFlags* Arena::CreateMaybeMessage< ::sync_pb::GcmChannelFlags >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GcmChannelFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::EnhancedBookmarksFlags* Arena::CreateMaybeMessage< ::sync_pb::EnhancedBookmarksFlags >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::EnhancedBookmarksFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GcmInvalidationsFlags* Arena::CreateMaybeMessage< ::sync_pb::GcmInvalidationsFlags >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GcmInvalidationsFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WalletSyncFlags* Arena::CreateMaybeMessage< ::sync_pb::WalletSyncFlags >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::WalletSyncFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ExperimentsSpecifics* Arena::CreateMaybeMessage< ::sync_pb::ExperimentsSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ExperimentsSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
