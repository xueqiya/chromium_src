// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gaia_password_reuse.proto

#include "gaia_password_reuse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gaia_5fpassword_5freuse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaiaPasswordReuse_PasswordCaptured_gaia_5fpassword_5freuse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gaia_5fpassword_5freuse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GaiaPasswordReuse_PasswordReuseDetected_gaia_5fpassword_5freuse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gaia_5fpassword_5freuse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_gaia_5fpassword_5freuse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gaia_5fpassword_5freuse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaiaPasswordReuse_PasswordReuseDialogInteraction_gaia_5fpassword_5freuse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gaia_5fpassword_5freuse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaiaPasswordReuse_PasswordReuseLookup_gaia_5fpassword_5freuse_2eproto;
namespace sync_pb {
class GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus> _instance;
} _GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_default_instance_;
class GaiaPasswordReuse_PasswordReuseDetectedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GaiaPasswordReuse_PasswordReuseDetected> _instance;
} _GaiaPasswordReuse_PasswordReuseDetected_default_instance_;
class GaiaPasswordReuse_PasswordReuseLookupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GaiaPasswordReuse_PasswordReuseLookup> _instance;
} _GaiaPasswordReuse_PasswordReuseLookup_default_instance_;
class GaiaPasswordReuse_PasswordReuseDialogInteractionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GaiaPasswordReuse_PasswordReuseDialogInteraction> _instance;
} _GaiaPasswordReuse_PasswordReuseDialogInteraction_default_instance_;
class GaiaPasswordReuse_PasswordCapturedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GaiaPasswordReuse_PasswordCaptured> _instance;
} _GaiaPasswordReuse_PasswordCaptured_default_instance_;
class GaiaPasswordReuseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GaiaPasswordReuse> _instance;
} _GaiaPasswordReuse_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_GaiaPasswordReuse_gaia_5fpassword_5freuse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GaiaPasswordReuse_default_instance_;
    new (ptr) ::sync_pb::GaiaPasswordReuse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GaiaPasswordReuse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GaiaPasswordReuse_gaia_5fpassword_5freuse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_GaiaPasswordReuse_gaia_5fpassword_5freuse_2eproto}, {
      &scc_info_GaiaPasswordReuse_PasswordReuseDetected_gaia_5fpassword_5freuse_2eproto.base,
      &scc_info_GaiaPasswordReuse_PasswordReuseLookup_gaia_5fpassword_5freuse_2eproto.base,
      &scc_info_GaiaPasswordReuse_PasswordReuseDialogInteraction_gaia_5fpassword_5freuse_2eproto.base,
      &scc_info_GaiaPasswordReuse_PasswordCaptured_gaia_5fpassword_5freuse_2eproto.base,}};

static void InitDefaultsscc_info_GaiaPasswordReuse_PasswordCaptured_gaia_5fpassword_5freuse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GaiaPasswordReuse_PasswordCaptured_default_instance_;
    new (ptr) ::sync_pb::GaiaPasswordReuse_PasswordCaptured();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GaiaPasswordReuse_PasswordCaptured::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaiaPasswordReuse_PasswordCaptured_gaia_5fpassword_5freuse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GaiaPasswordReuse_PasswordCaptured_gaia_5fpassword_5freuse_2eproto}, {}};

static void InitDefaultsscc_info_GaiaPasswordReuse_PasswordReuseDetected_gaia_5fpassword_5freuse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GaiaPasswordReuse_PasswordReuseDetected_default_instance_;
    new (ptr) ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GaiaPasswordReuse_PasswordReuseDetected_gaia_5fpassword_5freuse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GaiaPasswordReuse_PasswordReuseDetected_gaia_5fpassword_5freuse_2eproto}, {
      &scc_info_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_gaia_5fpassword_5freuse_2eproto.base,}};

static void InitDefaultsscc_info_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_gaia_5fpassword_5freuse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_default_instance_;
    new (ptr) ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_gaia_5fpassword_5freuse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_gaia_5fpassword_5freuse_2eproto}, {}};

static void InitDefaultsscc_info_GaiaPasswordReuse_PasswordReuseDialogInteraction_gaia_5fpassword_5freuse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GaiaPasswordReuse_PasswordReuseDialogInteraction_default_instance_;
    new (ptr) ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaiaPasswordReuse_PasswordReuseDialogInteraction_gaia_5fpassword_5freuse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GaiaPasswordReuse_PasswordReuseDialogInteraction_gaia_5fpassword_5freuse_2eproto}, {}};

static void InitDefaultsscc_info_GaiaPasswordReuse_PasswordReuseLookup_gaia_5fpassword_5freuse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_GaiaPasswordReuse_PasswordReuseLookup_default_instance_;
    new (ptr) ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GaiaPasswordReuse_PasswordReuseLookup_gaia_5fpassword_5freuse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GaiaPasswordReuse_PasswordReuseLookup_gaia_5fpassword_5freuse_2eproto}, {}};

namespace sync_pb {
bool GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_strings[4] = {};

static const char GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_names[] =
  "EXTENDED_REPORTING"
  "NONE"
  "REPORTING_POPULATION_UNSPECIFIED"
  "SCOUT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_entries[] = {
  { {GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_names + 0, 18}, 2 },
  { {GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_names + 18, 4}, 1 },
  { {GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_names + 22, 32}, 0 },
  { {GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_names + 54, 5}, 3 },
};

static const int GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_entries_by_number[] = {
  2, // 0 -> REPORTING_POPULATION_UNSPECIFIED
  1, // 1 -> NONE
  0, // 2 -> EXTENDED_REPORTING
  3, // 3 -> SCOUT
};

const std::string& GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_Name(
    GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_entries,
          GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_entries_by_number,
          4, GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_entries,
      GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_strings[idx].get();
}
bool GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_Parse(
    const std::string& name, GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::REPORTING_POPULATION_UNSPECIFIED;
constexpr GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::NONE;
constexpr GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::EXTENDED_REPORTING;
constexpr GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::SCOUT;
constexpr GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::ReportingPopulation_MIN;
constexpr GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::ReportingPopulation_MAX;
constexpr int GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::ReportingPopulation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GaiaPasswordReuse_PasswordReuseLookup_LookupResult_strings[8] = {};

static const char GaiaPasswordReuse_PasswordReuseLookup_LookupResult_names[] =
  "CACHE_HIT"
  "ENTERPRISE_WHITELIST_HIT"
  "REQUEST_FAILURE"
  "REQUEST_SUCCESS"
  "TURNED_OFF_BY_POLICY"
  "UNSPECIFIED"
  "URL_UNSUPPORTED"
  "WHITELIST_HIT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GaiaPasswordReuse_PasswordReuseLookup_LookupResult_entries[] = {
  { {GaiaPasswordReuse_PasswordReuseLookup_LookupResult_names + 0, 9}, 2 },
  { {GaiaPasswordReuse_PasswordReuseLookup_LookupResult_names + 9, 24}, 6 },
  { {GaiaPasswordReuse_PasswordReuseLookup_LookupResult_names + 33, 15}, 4 },
  { {GaiaPasswordReuse_PasswordReuseLookup_LookupResult_names + 48, 15}, 3 },
  { {GaiaPasswordReuse_PasswordReuseLookup_LookupResult_names + 63, 20}, 7 },
  { {GaiaPasswordReuse_PasswordReuseLookup_LookupResult_names + 83, 11}, 0 },
  { {GaiaPasswordReuse_PasswordReuseLookup_LookupResult_names + 94, 15}, 5 },
  { {GaiaPasswordReuse_PasswordReuseLookup_LookupResult_names + 109, 13}, 1 },
};

static const int GaiaPasswordReuse_PasswordReuseLookup_LookupResult_entries_by_number[] = {
  5, // 0 -> UNSPECIFIED
  7, // 1 -> WHITELIST_HIT
  0, // 2 -> CACHE_HIT
  3, // 3 -> REQUEST_SUCCESS
  2, // 4 -> REQUEST_FAILURE
  6, // 5 -> URL_UNSUPPORTED
  1, // 6 -> ENTERPRISE_WHITELIST_HIT
  4, // 7 -> TURNED_OFF_BY_POLICY
};

const std::string& GaiaPasswordReuse_PasswordReuseLookup_LookupResult_Name(
    GaiaPasswordReuse_PasswordReuseLookup_LookupResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GaiaPasswordReuse_PasswordReuseLookup_LookupResult_entries,
          GaiaPasswordReuse_PasswordReuseLookup_LookupResult_entries_by_number,
          8, GaiaPasswordReuse_PasswordReuseLookup_LookupResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GaiaPasswordReuse_PasswordReuseLookup_LookupResult_entries,
      GaiaPasswordReuse_PasswordReuseLookup_LookupResult_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GaiaPasswordReuse_PasswordReuseLookup_LookupResult_strings[idx].get();
}
bool GaiaPasswordReuse_PasswordReuseLookup_LookupResult_Parse(
    const std::string& name, GaiaPasswordReuse_PasswordReuseLookup_LookupResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GaiaPasswordReuse_PasswordReuseLookup_LookupResult_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<GaiaPasswordReuse_PasswordReuseLookup_LookupResult>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::UNSPECIFIED;
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::WHITELIST_HIT;
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::CACHE_HIT;
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::REQUEST_SUCCESS;
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::REQUEST_FAILURE;
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::URL_UNSUPPORTED;
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::ENTERPRISE_WHITELIST_HIT;
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::TURNED_OFF_BY_POLICY;
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::LookupResult_MIN;
constexpr GaiaPasswordReuse_PasswordReuseLookup_LookupResult GaiaPasswordReuse_PasswordReuseLookup::LookupResult_MAX;
constexpr int GaiaPasswordReuse_PasswordReuseLookup::LookupResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_strings[4] = {};

static const char GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_names[] =
  "LOW_REPUTATION"
  "PHISHING"
  "SAFE"
  "VERDICT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_entries[] = {
  { {GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_names + 0, 14}, 2 },
  { {GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_names + 14, 8}, 3 },
  { {GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_names + 22, 4}, 1 },
  { {GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_names + 26, 19}, 0 },
};

static const int GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_entries_by_number[] = {
  3, // 0 -> VERDICT_UNSPECIFIED
  2, // 1 -> SAFE
  0, // 2 -> LOW_REPUTATION
  1, // 3 -> PHISHING
};

const std::string& GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_Name(
    GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_entries,
          GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_entries_by_number,
          4, GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_entries,
      GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_strings[idx].get();
}
bool GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_Parse(
    const std::string& name, GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict GaiaPasswordReuse_PasswordReuseLookup::VERDICT_UNSPECIFIED;
constexpr GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict GaiaPasswordReuse_PasswordReuseLookup::SAFE;
constexpr GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict GaiaPasswordReuse_PasswordReuseLookup::LOW_REPUTATION;
constexpr GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict GaiaPasswordReuse_PasswordReuseLookup::PHISHING;
constexpr GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict GaiaPasswordReuse_PasswordReuseLookup::ReputationVerdict_MIN;
constexpr GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict GaiaPasswordReuse_PasswordReuseLookup::ReputationVerdict_MAX;
constexpr int GaiaPasswordReuse_PasswordReuseLookup::ReputationVerdict_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_strings[5] = {};

static const char GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_names[] =
  "UNSPECIFIED"
  "WARNING_ACTION_IGNORED"
  "WARNING_ACTION_TAKEN"
  "WARNING_ACTION_TAKEN_ON_SETTINGS"
  "WARNING_UI_IGNORED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_entries[] = {
  { {GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_names + 0, 11}, 0 },
  { {GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_names + 11, 22}, 2 },
  { {GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_names + 33, 20}, 1 },
  { {GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_names + 53, 32}, 4 },
  { {GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_names + 85, 18}, 3 },
};

static const int GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_entries_by_number[] = {
  0, // 0 -> UNSPECIFIED
  2, // 1 -> WARNING_ACTION_TAKEN
  1, // 2 -> WARNING_ACTION_IGNORED
  4, // 3 -> WARNING_UI_IGNORED
  3, // 4 -> WARNING_ACTION_TAKEN_ON_SETTINGS
};

const std::string& GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_Name(
    GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_entries,
          GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_entries_by_number,
          5, GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_entries,
      GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_strings[idx].get();
}
bool GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_Parse(
    const std::string& name, GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult GaiaPasswordReuse_PasswordReuseDialogInteraction::UNSPECIFIED;
constexpr GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult GaiaPasswordReuse_PasswordReuseDialogInteraction::WARNING_ACTION_TAKEN;
constexpr GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult GaiaPasswordReuse_PasswordReuseDialogInteraction::WARNING_ACTION_IGNORED;
constexpr GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult GaiaPasswordReuse_PasswordReuseDialogInteraction::WARNING_UI_IGNORED;
constexpr GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult GaiaPasswordReuse_PasswordReuseDialogInteraction::WARNING_ACTION_TAKEN_ON_SETTINGS;
constexpr GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult GaiaPasswordReuse_PasswordReuseDialogInteraction::InteractionResult_MIN;
constexpr GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult GaiaPasswordReuse_PasswordReuseDialogInteraction::InteractionResult_MAX;
constexpr int GaiaPasswordReuse_PasswordReuseDialogInteraction::InteractionResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GaiaPasswordReuse_PasswordCaptured_EventTrigger_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GaiaPasswordReuse_PasswordCaptured_EventTrigger_strings[3] = {};

static const char GaiaPasswordReuse_PasswordCaptured_EventTrigger_names[] =
  "EXPIRED_28D_TIMER"
  "UNSPECIFIED"
  "USER_LOGGED_IN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GaiaPasswordReuse_PasswordCaptured_EventTrigger_entries[] = {
  { {GaiaPasswordReuse_PasswordCaptured_EventTrigger_names + 0, 17}, 2 },
  { {GaiaPasswordReuse_PasswordCaptured_EventTrigger_names + 17, 11}, 0 },
  { {GaiaPasswordReuse_PasswordCaptured_EventTrigger_names + 28, 14}, 1 },
};

static const int GaiaPasswordReuse_PasswordCaptured_EventTrigger_entries_by_number[] = {
  1, // 0 -> UNSPECIFIED
  2, // 1 -> USER_LOGGED_IN
  0, // 2 -> EXPIRED_28D_TIMER
};

const std::string& GaiaPasswordReuse_PasswordCaptured_EventTrigger_Name(
    GaiaPasswordReuse_PasswordCaptured_EventTrigger value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GaiaPasswordReuse_PasswordCaptured_EventTrigger_entries,
          GaiaPasswordReuse_PasswordCaptured_EventTrigger_entries_by_number,
          3, GaiaPasswordReuse_PasswordCaptured_EventTrigger_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GaiaPasswordReuse_PasswordCaptured_EventTrigger_entries,
      GaiaPasswordReuse_PasswordCaptured_EventTrigger_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GaiaPasswordReuse_PasswordCaptured_EventTrigger_strings[idx].get();
}
bool GaiaPasswordReuse_PasswordCaptured_EventTrigger_Parse(
    const std::string& name, GaiaPasswordReuse_PasswordCaptured_EventTrigger* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GaiaPasswordReuse_PasswordCaptured_EventTrigger_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<GaiaPasswordReuse_PasswordCaptured_EventTrigger>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GaiaPasswordReuse_PasswordCaptured_EventTrigger GaiaPasswordReuse_PasswordCaptured::UNSPECIFIED;
constexpr GaiaPasswordReuse_PasswordCaptured_EventTrigger GaiaPasswordReuse_PasswordCaptured::USER_LOGGED_IN;
constexpr GaiaPasswordReuse_PasswordCaptured_EventTrigger GaiaPasswordReuse_PasswordCaptured::EXPIRED_28D_TIMER;
constexpr GaiaPasswordReuse_PasswordCaptured_EventTrigger GaiaPasswordReuse_PasswordCaptured::EventTrigger_MIN;
constexpr GaiaPasswordReuse_PasswordCaptured_EventTrigger GaiaPasswordReuse_PasswordCaptured::EventTrigger_MAX;
constexpr int GaiaPasswordReuse_PasswordCaptured::EventTrigger_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::InitAsDefaultInstance() {
}
class GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_safe_browsing_reporting_population(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
}
GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus(const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&safe_browsing_reporting_population_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(safe_browsing_reporting_population_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
}

void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_browsing_reporting_population_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(safe_browsing_reporting_population_));
}

GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::~GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus() {
  // @@protoc_insertion_point(destructor:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  SharedDtor();
}

void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::SharedDtor() {
}

void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_gaia_5fpassword_5freuse_2eproto.base);
  return *internal_default_instance();
}


void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&safe_browsing_reporting_population_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(safe_browsing_reporting_population_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(val))) {
            set_safe_browsing_reporting_population(static_cast<::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(value)) {
            set_safe_browsing_reporting_population(static_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->safe_browsing_reporting_population(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
}

size_t GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->safe_browsing_reporting_population());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus*>(
      &from));
}

void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::MergeFrom(const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      safe_browsing_reporting_population_ = from.safe_browsing_reporting_population_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::CopyFrom(const GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::IsInitialized() const {
  return true;
}

void GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::InternalSwap(GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(safe_browsing_reporting_population_, other->safe_browsing_reporting_population_);
}

std::string GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::GetTypeName() const {
  return "sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus";
}


// ===================================================================

void GaiaPasswordReuse_PasswordReuseDetected::InitAsDefaultInstance() {
  ::sync_pb::_GaiaPasswordReuse_PasswordReuseDetected_default_instance_._instance.get_mutable()->status_ = const_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus*>(
      ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::internal_default_instance());
}
class GaiaPasswordReuse_PasswordReuseDetected::_Internal {
 public:
  using HasBits = decltype(std::declval<GaiaPasswordReuse_PasswordReuseDetected>()._has_bits_);
  static const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& status(const GaiaPasswordReuse_PasswordReuseDetected* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus&
GaiaPasswordReuse_PasswordReuseDetected::_Internal::status(const GaiaPasswordReuse_PasswordReuseDetected* msg) {
  return *msg->status_;
}
GaiaPasswordReuse_PasswordReuseDetected::GaiaPasswordReuse_PasswordReuseDetected()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
}
GaiaPasswordReuse_PasswordReuseDetected::GaiaPasswordReuse_PasswordReuseDetected(const GaiaPasswordReuse_PasswordReuseDetected& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
}

void GaiaPasswordReuse_PasswordReuseDetected::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GaiaPasswordReuse_PasswordReuseDetected_gaia_5fpassword_5freuse_2eproto.base);
  status_ = nullptr;
}

GaiaPasswordReuse_PasswordReuseDetected::~GaiaPasswordReuse_PasswordReuseDetected() {
  // @@protoc_insertion_point(destructor:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
  SharedDtor();
}

void GaiaPasswordReuse_PasswordReuseDetected::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GaiaPasswordReuse_PasswordReuseDetected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GaiaPasswordReuse_PasswordReuseDetected& GaiaPasswordReuse_PasswordReuseDetected::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GaiaPasswordReuse_PasswordReuseDetected_gaia_5fpassword_5freuse_2eproto.base);
  return *internal_default_instance();
}


void GaiaPasswordReuse_PasswordReuseDetected::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GaiaPasswordReuse_PasswordReuseDetected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GaiaPasswordReuse_PasswordReuseDetected::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GaiaPasswordReuse_PasswordReuseDetected::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
}

size_t GaiaPasswordReuse_PasswordReuseDetected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GaiaPasswordReuse_PasswordReuseDetected::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GaiaPasswordReuse_PasswordReuseDetected*>(
      &from));
}

void GaiaPasswordReuse_PasswordReuseDetected::MergeFrom(const GaiaPasswordReuse_PasswordReuseDetected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::MergeFrom(from.status());
  }
}

void GaiaPasswordReuse_PasswordReuseDetected::CopyFrom(const GaiaPasswordReuse_PasswordReuseDetected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaiaPasswordReuse_PasswordReuseDetected::IsInitialized() const {
  return true;
}

void GaiaPasswordReuse_PasswordReuseDetected::InternalSwap(GaiaPasswordReuse_PasswordReuseDetected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

std::string GaiaPasswordReuse_PasswordReuseDetected::GetTypeName() const {
  return "sync_pb.GaiaPasswordReuse.PasswordReuseDetected";
}


// ===================================================================

void GaiaPasswordReuse_PasswordReuseLookup::InitAsDefaultInstance() {
}
class GaiaPasswordReuse_PasswordReuseLookup::_Internal {
 public:
  using HasBits = decltype(std::declval<GaiaPasswordReuse_PasswordReuseLookup>()._has_bits_);
  static void set_has_lookup_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verdict(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_verdict_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GaiaPasswordReuse_PasswordReuseLookup::GaiaPasswordReuse_PasswordReuseLookup()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
}
GaiaPasswordReuse_PasswordReuseLookup::GaiaPasswordReuse_PasswordReuseLookup(const GaiaPasswordReuse_PasswordReuseLookup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  verdict_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_verdict_token()) {
    verdict_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verdict_token_);
  }
  ::memcpy(&lookup_result_, &from.lookup_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&verdict_) -
    reinterpret_cast<char*>(&lookup_result_)) + sizeof(verdict_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
}

void GaiaPasswordReuse_PasswordReuseLookup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GaiaPasswordReuse_PasswordReuseLookup_gaia_5fpassword_5freuse_2eproto.base);
  verdict_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lookup_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verdict_) -
      reinterpret_cast<char*>(&lookup_result_)) + sizeof(verdict_));
}

GaiaPasswordReuse_PasswordReuseLookup::~GaiaPasswordReuse_PasswordReuseLookup() {
  // @@protoc_insertion_point(destructor:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
  SharedDtor();
}

void GaiaPasswordReuse_PasswordReuseLookup::SharedDtor() {
  verdict_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GaiaPasswordReuse_PasswordReuseLookup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GaiaPasswordReuse_PasswordReuseLookup& GaiaPasswordReuse_PasswordReuseLookup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GaiaPasswordReuse_PasswordReuseLookup_gaia_5fpassword_5freuse_2eproto.base);
  return *internal_default_instance();
}


void GaiaPasswordReuse_PasswordReuseLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    verdict_token_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&lookup_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&verdict_) -
        reinterpret_cast<char*>(&lookup_result_)) + sizeof(verdict_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GaiaPasswordReuse_PasswordReuseLookup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(val))) {
            set_lookup_result(static_cast<::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(val))) {
            set_verdict(static_cast<::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes verdict_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_verdict_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GaiaPasswordReuse_PasswordReuseLookup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(value)) {
            set_lookup_result(static_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_LookupResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(value)) {
            set_verdict(static_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes verdict_token = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verdict_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GaiaPasswordReuse_PasswordReuseLookup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->lookup_result(), output);
  }

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->verdict(), output);
  }

  // optional bytes verdict_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->verdict_token(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
}

size_t GaiaPasswordReuse_PasswordReuseLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes verdict_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->verdict_token());
    }

    // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->lookup_result());
    }

    // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->verdict());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GaiaPasswordReuse_PasswordReuseLookup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GaiaPasswordReuse_PasswordReuseLookup*>(
      &from));
}

void GaiaPasswordReuse_PasswordReuseLookup::MergeFrom(const GaiaPasswordReuse_PasswordReuseLookup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      verdict_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verdict_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      lookup_result_ = from.lookup_result_;
    }
    if (cached_has_bits & 0x00000004u) {
      verdict_ = from.verdict_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GaiaPasswordReuse_PasswordReuseLookup::CopyFrom(const GaiaPasswordReuse_PasswordReuseLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaiaPasswordReuse_PasswordReuseLookup::IsInitialized() const {
  return true;
}

void GaiaPasswordReuse_PasswordReuseLookup::InternalSwap(GaiaPasswordReuse_PasswordReuseLookup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  verdict_token_.Swap(&other->verdict_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lookup_result_, other->lookup_result_);
  swap(verdict_, other->verdict_);
}

std::string GaiaPasswordReuse_PasswordReuseLookup::GetTypeName() const {
  return "sync_pb.GaiaPasswordReuse.PasswordReuseLookup";
}


// ===================================================================

void GaiaPasswordReuse_PasswordReuseDialogInteraction::InitAsDefaultInstance() {
}
class GaiaPasswordReuse_PasswordReuseDialogInteraction::_Internal {
 public:
  using HasBits = decltype(std::declval<GaiaPasswordReuse_PasswordReuseDialogInteraction>()._has_bits_);
  static void set_has_interaction_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GaiaPasswordReuse_PasswordReuseDialogInteraction::GaiaPasswordReuse_PasswordReuseDialogInteraction()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
}
GaiaPasswordReuse_PasswordReuseDialogInteraction::GaiaPasswordReuse_PasswordReuseDialogInteraction(const GaiaPasswordReuse_PasswordReuseDialogInteraction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interaction_result_ = from.interaction_result_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
}

void GaiaPasswordReuse_PasswordReuseDialogInteraction::SharedCtor() {
  interaction_result_ = 0;
}

GaiaPasswordReuse_PasswordReuseDialogInteraction::~GaiaPasswordReuse_PasswordReuseDialogInteraction() {
  // @@protoc_insertion_point(destructor:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  SharedDtor();
}

void GaiaPasswordReuse_PasswordReuseDialogInteraction::SharedDtor() {
}

void GaiaPasswordReuse_PasswordReuseDialogInteraction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GaiaPasswordReuse_PasswordReuseDialogInteraction& GaiaPasswordReuse_PasswordReuseDialogInteraction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GaiaPasswordReuse_PasswordReuseDialogInteraction_gaia_5fpassword_5freuse_2eproto.base);
  return *internal_default_instance();
}


void GaiaPasswordReuse_PasswordReuseDialogInteraction::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interaction_result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GaiaPasswordReuse_PasswordReuseDialogInteraction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(val))) {
            set_interaction_result(static_cast<::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GaiaPasswordReuse_PasswordReuseDialogInteraction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(value)) {
            set_interaction_result(static_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GaiaPasswordReuse_PasswordReuseDialogInteraction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->interaction_result(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
}

size_t GaiaPasswordReuse_PasswordReuseDialogInteraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->interaction_result());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GaiaPasswordReuse_PasswordReuseDialogInteraction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GaiaPasswordReuse_PasswordReuseDialogInteraction*>(
      &from));
}

void GaiaPasswordReuse_PasswordReuseDialogInteraction::MergeFrom(const GaiaPasswordReuse_PasswordReuseDialogInteraction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interaction_result()) {
    set_interaction_result(from.interaction_result());
  }
}

void GaiaPasswordReuse_PasswordReuseDialogInteraction::CopyFrom(const GaiaPasswordReuse_PasswordReuseDialogInteraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaiaPasswordReuse_PasswordReuseDialogInteraction::IsInitialized() const {
  return true;
}

void GaiaPasswordReuse_PasswordReuseDialogInteraction::InternalSwap(GaiaPasswordReuse_PasswordReuseDialogInteraction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(interaction_result_, other->interaction_result_);
}

std::string GaiaPasswordReuse_PasswordReuseDialogInteraction::GetTypeName() const {
  return "sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction";
}


// ===================================================================

void GaiaPasswordReuse_PasswordCaptured::InitAsDefaultInstance() {
}
class GaiaPasswordReuse_PasswordCaptured::_Internal {
 public:
  using HasBits = decltype(std::declval<GaiaPasswordReuse_PasswordCaptured>()._has_bits_);
  static void set_has_event_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GaiaPasswordReuse_PasswordCaptured::GaiaPasswordReuse_PasswordCaptured()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GaiaPasswordReuse.PasswordCaptured)
}
GaiaPasswordReuse_PasswordCaptured::GaiaPasswordReuse_PasswordCaptured(const GaiaPasswordReuse_PasswordCaptured& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_trigger_ = from.event_trigger_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GaiaPasswordReuse.PasswordCaptured)
}

void GaiaPasswordReuse_PasswordCaptured::SharedCtor() {
  event_trigger_ = 0;
}

GaiaPasswordReuse_PasswordCaptured::~GaiaPasswordReuse_PasswordCaptured() {
  // @@protoc_insertion_point(destructor:sync_pb.GaiaPasswordReuse.PasswordCaptured)
  SharedDtor();
}

void GaiaPasswordReuse_PasswordCaptured::SharedDtor() {
}

void GaiaPasswordReuse_PasswordCaptured::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GaiaPasswordReuse_PasswordCaptured& GaiaPasswordReuse_PasswordCaptured::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GaiaPasswordReuse_PasswordCaptured_gaia_5fpassword_5freuse_2eproto.base);
  return *internal_default_instance();
}


void GaiaPasswordReuse_PasswordCaptured::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GaiaPasswordReuse.PasswordCaptured)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_trigger_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GaiaPasswordReuse_PasswordCaptured::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger_IsValid(val))) {
            set_event_trigger(static_cast<::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GaiaPasswordReuse_PasswordCaptured::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GaiaPasswordReuse.PasswordCaptured)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger_IsValid(value)) {
            set_event_trigger(static_cast< ::sync_pb::GaiaPasswordReuse_PasswordCaptured_EventTrigger >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GaiaPasswordReuse.PasswordCaptured)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GaiaPasswordReuse.PasswordCaptured)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GaiaPasswordReuse_PasswordCaptured::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GaiaPasswordReuse.PasswordCaptured)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->event_trigger(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GaiaPasswordReuse.PasswordCaptured)
}

size_t GaiaPasswordReuse_PasswordCaptured::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GaiaPasswordReuse.PasswordCaptured)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event_trigger());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GaiaPasswordReuse_PasswordCaptured::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GaiaPasswordReuse_PasswordCaptured*>(
      &from));
}

void GaiaPasswordReuse_PasswordCaptured::MergeFrom(const GaiaPasswordReuse_PasswordCaptured& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GaiaPasswordReuse.PasswordCaptured)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event_trigger()) {
    set_event_trigger(from.event_trigger());
  }
}

void GaiaPasswordReuse_PasswordCaptured::CopyFrom(const GaiaPasswordReuse_PasswordCaptured& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GaiaPasswordReuse.PasswordCaptured)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaiaPasswordReuse_PasswordCaptured::IsInitialized() const {
  return true;
}

void GaiaPasswordReuse_PasswordCaptured::InternalSwap(GaiaPasswordReuse_PasswordCaptured* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_trigger_, other->event_trigger_);
}

std::string GaiaPasswordReuse_PasswordCaptured::GetTypeName() const {
  return "sync_pb.GaiaPasswordReuse.PasswordCaptured";
}


// ===================================================================

void GaiaPasswordReuse::InitAsDefaultInstance() {
  ::sync_pb::_GaiaPasswordReuse_default_instance_._instance.get_mutable()->reuse_detected_ = const_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected*>(
      ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected::internal_default_instance());
  ::sync_pb::_GaiaPasswordReuse_default_instance_._instance.get_mutable()->reuse_lookup_ = const_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup*>(
      ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup::internal_default_instance());
  ::sync_pb::_GaiaPasswordReuse_default_instance_._instance.get_mutable()->dialog_interaction_ = const_cast< ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction*>(
      ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction::internal_default_instance());
  ::sync_pb::_GaiaPasswordReuse_default_instance_._instance.get_mutable()->password_captured_ = const_cast< ::sync_pb::GaiaPasswordReuse_PasswordCaptured*>(
      ::sync_pb::GaiaPasswordReuse_PasswordCaptured::internal_default_instance());
}
class GaiaPasswordReuse::_Internal {
 public:
  using HasBits = decltype(std::declval<GaiaPasswordReuse>()._has_bits_);
  static const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected& reuse_detected(const GaiaPasswordReuse* msg);
  static void set_has_reuse_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup& reuse_lookup(const GaiaPasswordReuse* msg);
  static void set_has_reuse_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction& dialog_interaction(const GaiaPasswordReuse* msg);
  static void set_has_dialog_interaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::GaiaPasswordReuse_PasswordCaptured& password_captured(const GaiaPasswordReuse* msg);
  static void set_has_password_captured(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected&
GaiaPasswordReuse::_Internal::reuse_detected(const GaiaPasswordReuse* msg) {
  return *msg->reuse_detected_;
}
const ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup&
GaiaPasswordReuse::_Internal::reuse_lookup(const GaiaPasswordReuse* msg) {
  return *msg->reuse_lookup_;
}
const ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction&
GaiaPasswordReuse::_Internal::dialog_interaction(const GaiaPasswordReuse* msg) {
  return *msg->dialog_interaction_;
}
const ::sync_pb::GaiaPasswordReuse_PasswordCaptured&
GaiaPasswordReuse::_Internal::password_captured(const GaiaPasswordReuse* msg) {
  return *msg->password_captured_;
}
GaiaPasswordReuse::GaiaPasswordReuse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.GaiaPasswordReuse)
}
GaiaPasswordReuse::GaiaPasswordReuse(const GaiaPasswordReuse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reuse_detected()) {
    reuse_detected_ = new ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected(*from.reuse_detected_);
  } else {
    reuse_detected_ = nullptr;
  }
  if (from.has_reuse_lookup()) {
    reuse_lookup_ = new ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup(*from.reuse_lookup_);
  } else {
    reuse_lookup_ = nullptr;
  }
  if (from.has_dialog_interaction()) {
    dialog_interaction_ = new ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction(*from.dialog_interaction_);
  } else {
    dialog_interaction_ = nullptr;
  }
  if (from.has_password_captured()) {
    password_captured_ = new ::sync_pb::GaiaPasswordReuse_PasswordCaptured(*from.password_captured_);
  } else {
    password_captured_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.GaiaPasswordReuse)
}

void GaiaPasswordReuse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GaiaPasswordReuse_gaia_5fpassword_5freuse_2eproto.base);
  ::memset(&reuse_detected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_captured_) -
      reinterpret_cast<char*>(&reuse_detected_)) + sizeof(password_captured_));
}

GaiaPasswordReuse::~GaiaPasswordReuse() {
  // @@protoc_insertion_point(destructor:sync_pb.GaiaPasswordReuse)
  SharedDtor();
}

void GaiaPasswordReuse::SharedDtor() {
  if (this != internal_default_instance()) delete reuse_detected_;
  if (this != internal_default_instance()) delete reuse_lookup_;
  if (this != internal_default_instance()) delete dialog_interaction_;
  if (this != internal_default_instance()) delete password_captured_;
}

void GaiaPasswordReuse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GaiaPasswordReuse& GaiaPasswordReuse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GaiaPasswordReuse_gaia_5fpassword_5freuse_2eproto.base);
  return *internal_default_instance();
}


void GaiaPasswordReuse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GaiaPasswordReuse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(reuse_detected_ != nullptr);
      reuse_detected_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reuse_lookup_ != nullptr);
      reuse_lookup_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dialog_interaction_ != nullptr);
      dialog_interaction_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(password_captured_ != nullptr);
      password_captured_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GaiaPasswordReuse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_reuse_detected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_reuse_lookup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_dialog_interaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_password_captured(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GaiaPasswordReuse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.GaiaPasswordReuse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reuse_detected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reuse_lookup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dialog_interaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_password_captured()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.GaiaPasswordReuse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.GaiaPasswordReuse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GaiaPasswordReuse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.GaiaPasswordReuse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::reuse_detected(this), output);
  }

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::reuse_lookup(this), output);
  }

  // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::dialog_interaction(this), output);
  }

  // optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::password_captured(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.GaiaPasswordReuse)
}

size_t GaiaPasswordReuse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GaiaPasswordReuse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reuse_detected_);
    }

    // optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reuse_lookup_);
    }

    // optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dialog_interaction_);
    }

    // optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *password_captured_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GaiaPasswordReuse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GaiaPasswordReuse*>(
      &from));
}

void GaiaPasswordReuse::MergeFrom(const GaiaPasswordReuse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GaiaPasswordReuse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reuse_detected()->::sync_pb::GaiaPasswordReuse_PasswordReuseDetected::MergeFrom(from.reuse_detected());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reuse_lookup()->::sync_pb::GaiaPasswordReuse_PasswordReuseLookup::MergeFrom(from.reuse_lookup());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dialog_interaction()->::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction::MergeFrom(from.dialog_interaction());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_password_captured()->::sync_pb::GaiaPasswordReuse_PasswordCaptured::MergeFrom(from.password_captured());
    }
  }
}

void GaiaPasswordReuse::CopyFrom(const GaiaPasswordReuse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GaiaPasswordReuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaiaPasswordReuse::IsInitialized() const {
  return true;
}

void GaiaPasswordReuse::InternalSwap(GaiaPasswordReuse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reuse_detected_, other->reuse_detected_);
  swap(reuse_lookup_, other->reuse_lookup_);
  swap(dialog_interaction_, other->dialog_interaction_);
  swap(password_captured_, other->password_captured_);
}

std::string GaiaPasswordReuse::GetTypeName() const {
  return "sync_pb.GaiaPasswordReuse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* Arena::CreateMaybeMessage< ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected* Arena::CreateMaybeMessage< ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GaiaPasswordReuse_PasswordReuseDetected >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup* Arena::CreateMaybeMessage< ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GaiaPasswordReuse_PasswordReuseLookup >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction* Arena::CreateMaybeMessage< ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GaiaPasswordReuse_PasswordReuseDialogInteraction >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GaiaPasswordReuse_PasswordCaptured* Arena::CreateMaybeMessage< ::sync_pb::GaiaPasswordReuse_PasswordCaptured >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GaiaPasswordReuse_PasswordCaptured >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GaiaPasswordReuse* Arena::CreateMaybeMessage< ::sync_pb::GaiaPasswordReuse >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::GaiaPasswordReuse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
