// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_list_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_5flist_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_5flist_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_5flist_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_5flist_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class AppListSpecifics;
class AppListSpecificsDefaultTypeInternal;
extern AppListSpecificsDefaultTypeInternal _AppListSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::AppListSpecifics* Arena::CreateMaybeMessage<::sync_pb::AppListSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum AppListSpecifics_AppListItemType : int {
  AppListSpecifics_AppListItemType_TYPE_APP = 1,
  AppListSpecifics_AppListItemType_TYPE_REMOVE_DEFAULT_APP = 2,
  AppListSpecifics_AppListItemType_TYPE_FOLDER = 3,
  AppListSpecifics_AppListItemType_TYPE_OBSOLETE_URL = 4,
  AppListSpecifics_AppListItemType_TYPE_PAGE_BREAK = 5
};
bool AppListSpecifics_AppListItemType_IsValid(int value);
constexpr AppListSpecifics_AppListItemType AppListSpecifics_AppListItemType_AppListItemType_MIN = AppListSpecifics_AppListItemType_TYPE_APP;
constexpr AppListSpecifics_AppListItemType AppListSpecifics_AppListItemType_AppListItemType_MAX = AppListSpecifics_AppListItemType_TYPE_PAGE_BREAK;
constexpr int AppListSpecifics_AppListItemType_AppListItemType_ARRAYSIZE = AppListSpecifics_AppListItemType_AppListItemType_MAX + 1;

const std::string& AppListSpecifics_AppListItemType_Name(AppListSpecifics_AppListItemType value);
template<typename T>
inline const std::string& AppListSpecifics_AppListItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AppListSpecifics_AppListItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AppListSpecifics_AppListItemType_Name.");
  return AppListSpecifics_AppListItemType_Name(static_cast<AppListSpecifics_AppListItemType>(enum_t_value));
}
bool AppListSpecifics_AppListItemType_Parse(
    const std::string& name, AppListSpecifics_AppListItemType* value);
// ===================================================================

class AppListSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AppListSpecifics) */ {
 public:
  AppListSpecifics();
  virtual ~AppListSpecifics();

  AppListSpecifics(const AppListSpecifics& from);
  AppListSpecifics(AppListSpecifics&& from) noexcept
    : AppListSpecifics() {
    *this = ::std::move(from);
  }

  inline AppListSpecifics& operator=(const AppListSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppListSpecifics& operator=(AppListSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppListSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppListSpecifics* internal_default_instance() {
    return reinterpret_cast<const AppListSpecifics*>(
               &_AppListSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppListSpecifics& a, AppListSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(AppListSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppListSpecifics* New() const final {
    return CreateMaybeMessage<AppListSpecifics>(nullptr);
  }

  AppListSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppListSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppListSpecifics& from);
  void MergeFrom(const AppListSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppListSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AppListSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AppListSpecifics_AppListItemType AppListItemType;
  static constexpr AppListItemType TYPE_APP =
    AppListSpecifics_AppListItemType_TYPE_APP;
  static constexpr AppListItemType TYPE_REMOVE_DEFAULT_APP =
    AppListSpecifics_AppListItemType_TYPE_REMOVE_DEFAULT_APP;
  static constexpr AppListItemType TYPE_FOLDER =
    AppListSpecifics_AppListItemType_TYPE_FOLDER;
  static constexpr AppListItemType TYPE_OBSOLETE_URL =
    AppListSpecifics_AppListItemType_TYPE_OBSOLETE_URL;
  static constexpr AppListItemType TYPE_PAGE_BREAK =
    AppListSpecifics_AppListItemType_TYPE_PAGE_BREAK;
  static inline bool AppListItemType_IsValid(int value) {
    return AppListSpecifics_AppListItemType_IsValid(value);
  }
  static constexpr AppListItemType AppListItemType_MIN =
    AppListSpecifics_AppListItemType_AppListItemType_MIN;
  static constexpr AppListItemType AppListItemType_MAX =
    AppListSpecifics_AppListItemType_AppListItemType_MAX;
  static constexpr int AppListItemType_ARRAYSIZE =
    AppListSpecifics_AppListItemType_AppListItemType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AppListItemType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AppListItemType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AppListItemType_Name.");
    return AppListSpecifics_AppListItemType_Name(enum_t_value);
  }
  static inline bool AppListItemType_Parse(const std::string& name,
      AppListItemType* value) {
    return AppListSpecifics_AppListItemType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kItemNameFieldNumber = 3,
    kParentIdFieldNumber = 4,
    kOBSOLETEPageOrdinalFieldNumber = 5,
    kItemOrdinalFieldNumber = 6,
    kItemPinOrdinalFieldNumber = 7,
    kItemTypeFieldNumber = 2,
  };
  // optional string item_id = 1;
  bool has_item_id() const;
  void clear_item_id();
  const std::string& item_id() const;
  void set_item_id(const std::string& value);
  void set_item_id(std::string&& value);
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  std::string* mutable_item_id();
  std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);

  // optional string item_name = 3;
  bool has_item_name() const;
  void clear_item_name();
  const std::string& item_name() const;
  void set_item_name(const std::string& value);
  void set_item_name(std::string&& value);
  void set_item_name(const char* value);
  void set_item_name(const char* value, size_t size);
  std::string* mutable_item_name();
  std::string* release_item_name();
  void set_allocated_item_name(std::string* item_name);

  // optional string parent_id = 4;
  bool has_parent_id() const;
  void clear_parent_id();
  const std::string& parent_id() const;
  void set_parent_id(const std::string& value);
  void set_parent_id(std::string&& value);
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  std::string* mutable_parent_id();
  std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);

  // optional string OBSOLETE_page_ordinal = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_page_ordinal() const;
  PROTOBUF_DEPRECATED void clear_obsolete_page_ordinal();
  PROTOBUF_DEPRECATED const std::string& obsolete_page_ordinal() const;
  PROTOBUF_DEPRECATED void set_obsolete_page_ordinal(const std::string& value);
  PROTOBUF_DEPRECATED void set_obsolete_page_ordinal(std::string&& value);
  PROTOBUF_DEPRECATED void set_obsolete_page_ordinal(const char* value);
  PROTOBUF_DEPRECATED void set_obsolete_page_ordinal(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_page_ordinal();
  PROTOBUF_DEPRECATED std::string* release_obsolete_page_ordinal();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_page_ordinal(std::string* obsolete_page_ordinal);

  // optional string item_ordinal = 6;
  bool has_item_ordinal() const;
  void clear_item_ordinal();
  const std::string& item_ordinal() const;
  void set_item_ordinal(const std::string& value);
  void set_item_ordinal(std::string&& value);
  void set_item_ordinal(const char* value);
  void set_item_ordinal(const char* value, size_t size);
  std::string* mutable_item_ordinal();
  std::string* release_item_ordinal();
  void set_allocated_item_ordinal(std::string* item_ordinal);

  // optional string item_pin_ordinal = 7;
  bool has_item_pin_ordinal() const;
  void clear_item_pin_ordinal();
  const std::string& item_pin_ordinal() const;
  void set_item_pin_ordinal(const std::string& value);
  void set_item_pin_ordinal(std::string&& value);
  void set_item_pin_ordinal(const char* value);
  void set_item_pin_ordinal(const char* value, size_t size);
  std::string* mutable_item_pin_ordinal();
  std::string* release_item_pin_ordinal();
  void set_allocated_item_pin_ordinal(std::string* item_pin_ordinal);

  // optional .sync_pb.AppListSpecifics.AppListItemType item_type = 2;
  bool has_item_type() const;
  void clear_item_type();
  ::sync_pb::AppListSpecifics_AppListItemType item_type() const;
  void set_item_type(::sync_pb::AppListSpecifics_AppListItemType value);

  // @@protoc_insertion_point(class_scope:sync_pb.AppListSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_page_ordinal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_ordinal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_pin_ordinal_;
  int item_type_;
  friend struct ::TableStruct_app_5flist_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppListSpecifics

// optional string item_id = 1;
inline bool AppListSpecifics::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppListSpecifics::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppListSpecifics::item_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_id)
  return item_id_.GetNoArena();
}
inline void AppListSpecifics::set_item_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.item_id)
}
inline void AppListSpecifics::set_item_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppListSpecifics.item_id)
}
inline void AppListSpecifics::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppListSpecifics.item_id)
}
inline void AppListSpecifics::set_item_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppListSpecifics.item_id)
}
inline std::string* AppListSpecifics::mutable_item_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.item_id)
  return item_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppListSpecifics::release_item_id() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.item_id)
  if (!has_item_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return item_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppListSpecifics::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  item_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.item_id)
}

// optional .sync_pb.AppListSpecifics.AppListItemType item_type = 2;
inline bool AppListSpecifics::has_item_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppListSpecifics::clear_item_type() {
  item_type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::sync_pb::AppListSpecifics_AppListItemType AppListSpecifics::item_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_type)
  return static_cast< ::sync_pb::AppListSpecifics_AppListItemType >(item_type_);
}
inline void AppListSpecifics::set_item_type(::sync_pb::AppListSpecifics_AppListItemType value) {
  assert(::sync_pb::AppListSpecifics_AppListItemType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  item_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.item_type)
}

// optional string item_name = 3;
inline bool AppListSpecifics::has_item_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppListSpecifics::clear_item_name() {
  item_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppListSpecifics::item_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_name)
  return item_name_.GetNoArena();
}
inline void AppListSpecifics::set_item_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  item_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.item_name)
}
inline void AppListSpecifics::set_item_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  item_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppListSpecifics.item_name)
}
inline void AppListSpecifics::set_item_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  item_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppListSpecifics.item_name)
}
inline void AppListSpecifics::set_item_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  item_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppListSpecifics.item_name)
}
inline std::string* AppListSpecifics::mutable_item_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.item_name)
  return item_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppListSpecifics::release_item_name() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.item_name)
  if (!has_item_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return item_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppListSpecifics::set_allocated_item_name(std::string* item_name) {
  if (item_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  item_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.item_name)
}

// optional string parent_id = 4;
inline bool AppListSpecifics::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppListSpecifics::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppListSpecifics::parent_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.parent_id)
  return parent_id_.GetNoArena();
}
inline void AppListSpecifics::set_parent_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.parent_id)
}
inline void AppListSpecifics::set_parent_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  parent_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppListSpecifics.parent_id)
}
inline void AppListSpecifics::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppListSpecifics.parent_id)
}
inline void AppListSpecifics::set_parent_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  parent_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppListSpecifics.parent_id)
}
inline std::string* AppListSpecifics::mutable_parent_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.parent_id)
  return parent_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppListSpecifics::release_parent_id() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.parent_id)
  if (!has_parent_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return parent_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppListSpecifics::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parent_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.parent_id)
}

// optional string OBSOLETE_page_ordinal = 5 [deprecated = true];
inline bool AppListSpecifics::has_obsolete_page_ordinal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppListSpecifics::clear_obsolete_page_ordinal() {
  obsolete_page_ordinal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AppListSpecifics::obsolete_page_ordinal() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
  return obsolete_page_ordinal_.GetNoArena();
}
inline void AppListSpecifics::set_obsolete_page_ordinal(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  obsolete_page_ordinal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
}
inline void AppListSpecifics::set_obsolete_page_ordinal(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  obsolete_page_ordinal_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
}
inline void AppListSpecifics::set_obsolete_page_ordinal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  obsolete_page_ordinal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
}
inline void AppListSpecifics::set_obsolete_page_ordinal(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  obsolete_page_ordinal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
}
inline std::string* AppListSpecifics::mutable_obsolete_page_ordinal() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
  return obsolete_page_ordinal_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppListSpecifics::release_obsolete_page_ordinal() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
  if (!has_obsolete_page_ordinal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return obsolete_page_ordinal_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppListSpecifics::set_allocated_obsolete_page_ordinal(std::string* obsolete_page_ordinal) {
  if (obsolete_page_ordinal != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  obsolete_page_ordinal_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obsolete_page_ordinal);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
}

// optional string item_ordinal = 6;
inline bool AppListSpecifics::has_item_ordinal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppListSpecifics::clear_item_ordinal() {
  item_ordinal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AppListSpecifics::item_ordinal() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_ordinal)
  return item_ordinal_.GetNoArena();
}
inline void AppListSpecifics::set_item_ordinal(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  item_ordinal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.item_ordinal)
}
inline void AppListSpecifics::set_item_ordinal(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  item_ordinal_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppListSpecifics.item_ordinal)
}
inline void AppListSpecifics::set_item_ordinal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  item_ordinal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppListSpecifics.item_ordinal)
}
inline void AppListSpecifics::set_item_ordinal(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  item_ordinal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppListSpecifics.item_ordinal)
}
inline std::string* AppListSpecifics::mutable_item_ordinal() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.item_ordinal)
  return item_ordinal_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppListSpecifics::release_item_ordinal() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.item_ordinal)
  if (!has_item_ordinal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return item_ordinal_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppListSpecifics::set_allocated_item_ordinal(std::string* item_ordinal) {
  if (item_ordinal != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  item_ordinal_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_ordinal);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.item_ordinal)
}

// optional string item_pin_ordinal = 7;
inline bool AppListSpecifics::has_item_pin_ordinal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppListSpecifics::clear_item_pin_ordinal() {
  item_pin_ordinal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AppListSpecifics::item_pin_ordinal() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_pin_ordinal)
  return item_pin_ordinal_.GetNoArena();
}
inline void AppListSpecifics::set_item_pin_ordinal(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  item_pin_ordinal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.item_pin_ordinal)
}
inline void AppListSpecifics::set_item_pin_ordinal(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  item_pin_ordinal_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppListSpecifics.item_pin_ordinal)
}
inline void AppListSpecifics::set_item_pin_ordinal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  item_pin_ordinal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppListSpecifics.item_pin_ordinal)
}
inline void AppListSpecifics::set_item_pin_ordinal(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  item_pin_ordinal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppListSpecifics.item_pin_ordinal)
}
inline std::string* AppListSpecifics::mutable_item_pin_ordinal() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.item_pin_ordinal)
  return item_pin_ordinal_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppListSpecifics::release_item_pin_ordinal() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.item_pin_ordinal)
  if (!has_item_pin_ordinal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return item_pin_ordinal_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppListSpecifics::set_allocated_item_pin_ordinal(std::string* item_pin_ordinal) {
  if (item_pin_ordinal != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  item_pin_ordinal_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_pin_ordinal);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.item_pin_ordinal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::AppListSpecifics_AppListItemType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_5flist_5fspecifics_2eproto
