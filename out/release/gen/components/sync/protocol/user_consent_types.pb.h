// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_consent_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5fconsent_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5fconsent_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5fconsent_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5fconsent_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class UserConsentTypes;
class UserConsentTypesDefaultTypeInternal;
extern UserConsentTypesDefaultTypeInternal _UserConsentTypes_default_instance_;
class UserConsentTypes_ArcBackupAndRestoreConsent;
class UserConsentTypes_ArcBackupAndRestoreConsentDefaultTypeInternal;
extern UserConsentTypes_ArcBackupAndRestoreConsentDefaultTypeInternal _UserConsentTypes_ArcBackupAndRestoreConsent_default_instance_;
class UserConsentTypes_ArcGoogleLocationServiceConsent;
class UserConsentTypes_ArcGoogleLocationServiceConsentDefaultTypeInternal;
extern UserConsentTypes_ArcGoogleLocationServiceConsentDefaultTypeInternal _UserConsentTypes_ArcGoogleLocationServiceConsent_default_instance_;
class UserConsentTypes_ArcMetricsAndUsageConsent;
class UserConsentTypes_ArcMetricsAndUsageConsentDefaultTypeInternal;
extern UserConsentTypes_ArcMetricsAndUsageConsentDefaultTypeInternal _UserConsentTypes_ArcMetricsAndUsageConsent_default_instance_;
class UserConsentTypes_ArcPlayTermsOfServiceConsent;
class UserConsentTypes_ArcPlayTermsOfServiceConsentDefaultTypeInternal;
extern UserConsentTypes_ArcPlayTermsOfServiceConsentDefaultTypeInternal _UserConsentTypes_ArcPlayTermsOfServiceConsent_default_instance_;
class UserConsentTypes_AssistantActivityControlConsent;
class UserConsentTypes_AssistantActivityControlConsentDefaultTypeInternal;
extern UserConsentTypes_AssistantActivityControlConsentDefaultTypeInternal _UserConsentTypes_AssistantActivityControlConsent_default_instance_;
class UserConsentTypes_SyncConsent;
class UserConsentTypes_SyncConsentDefaultTypeInternal;
extern UserConsentTypes_SyncConsentDefaultTypeInternal _UserConsentTypes_SyncConsent_default_instance_;
class UserConsentTypes_UnifiedConsent;
class UserConsentTypes_UnifiedConsentDefaultTypeInternal;
extern UserConsentTypes_UnifiedConsentDefaultTypeInternal _UserConsentTypes_UnifiedConsent_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::UserConsentTypes* Arena::CreateMaybeMessage<::sync_pb::UserConsentTypes>(Arena*);
template<> ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* Arena::CreateMaybeMessage<::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent>(Arena*);
template<> ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* Arena::CreateMaybeMessage<::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent>(Arena*);
template<> ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* Arena::CreateMaybeMessage<::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent>(Arena*);
template<> ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* Arena::CreateMaybeMessage<::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent>(Arena*);
template<> ::sync_pb::UserConsentTypes_AssistantActivityControlConsent* Arena::CreateMaybeMessage<::sync_pb::UserConsentTypes_AssistantActivityControlConsent>(Arena*);
template<> ::sync_pb::UserConsentTypes_SyncConsent* Arena::CreateMaybeMessage<::sync_pb::UserConsentTypes_SyncConsent>(Arena*);
template<> ::sync_pb::UserConsentTypes_UnifiedConsent* Arena::CreateMaybeMessage<::sync_pb::UserConsentTypes_UnifiedConsent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow : int {
  UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_SETUP = 1,
  UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_SETTING_CHANGE = 2
};
bool UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_IsValid(int value);
constexpr UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_ConsentFlow_MIN = UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_SETUP;
constexpr UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_ConsentFlow_MAX = UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_SETTING_CHANGE;
constexpr int UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_ConsentFlow_ARRAYSIZE = UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_ConsentFlow_MAX + 1;

const std::string& UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_Name(UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow value);
template<typename T>
inline const std::string& UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_Name.");
  return UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_Name(static_cast<UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow>(enum_t_value));
}
bool UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_Parse(
    const std::string& name, UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow* value);
enum UserConsentTypes_ConsentStatus : int {
  UserConsentTypes_ConsentStatus_CONSENT_STATUS_UNSPECIFIED = 0,
  UserConsentTypes_ConsentStatus_NOT_GIVEN = 1,
  UserConsentTypes_ConsentStatus_GIVEN = 2
};
bool UserConsentTypes_ConsentStatus_IsValid(int value);
constexpr UserConsentTypes_ConsentStatus UserConsentTypes_ConsentStatus_ConsentStatus_MIN = UserConsentTypes_ConsentStatus_CONSENT_STATUS_UNSPECIFIED;
constexpr UserConsentTypes_ConsentStatus UserConsentTypes_ConsentStatus_ConsentStatus_MAX = UserConsentTypes_ConsentStatus_GIVEN;
constexpr int UserConsentTypes_ConsentStatus_ConsentStatus_ARRAYSIZE = UserConsentTypes_ConsentStatus_ConsentStatus_MAX + 1;

const std::string& UserConsentTypes_ConsentStatus_Name(UserConsentTypes_ConsentStatus value);
template<typename T>
inline const std::string& UserConsentTypes_ConsentStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserConsentTypes_ConsentStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserConsentTypes_ConsentStatus_Name.");
  return UserConsentTypes_ConsentStatus_Name(static_cast<UserConsentTypes_ConsentStatus>(enum_t_value));
}
bool UserConsentTypes_ConsentStatus_Parse(
    const std::string& name, UserConsentTypes_ConsentStatus* value);
// ===================================================================

class UserConsentTypes_ArcBackupAndRestoreConsent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent) */ {
 public:
  UserConsentTypes_ArcBackupAndRestoreConsent();
  virtual ~UserConsentTypes_ArcBackupAndRestoreConsent();

  UserConsentTypes_ArcBackupAndRestoreConsent(const UserConsentTypes_ArcBackupAndRestoreConsent& from);
  UserConsentTypes_ArcBackupAndRestoreConsent(UserConsentTypes_ArcBackupAndRestoreConsent&& from) noexcept
    : UserConsentTypes_ArcBackupAndRestoreConsent() {
    *this = ::std::move(from);
  }

  inline UserConsentTypes_ArcBackupAndRestoreConsent& operator=(const UserConsentTypes_ArcBackupAndRestoreConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConsentTypes_ArcBackupAndRestoreConsent& operator=(UserConsentTypes_ArcBackupAndRestoreConsent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_ArcBackupAndRestoreConsent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConsentTypes_ArcBackupAndRestoreConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_ArcBackupAndRestoreConsent*>(
               &_UserConsentTypes_ArcBackupAndRestoreConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserConsentTypes_ArcBackupAndRestoreConsent& a, UserConsentTypes_ArcBackupAndRestoreConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConsentTypes_ArcBackupAndRestoreConsent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConsentTypes_ArcBackupAndRestoreConsent* New() const final {
    return CreateMaybeMessage<UserConsentTypes_ArcBackupAndRestoreConsent>(nullptr);
  }

  UserConsentTypes_ArcBackupAndRestoreConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConsentTypes_ArcBackupAndRestoreConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserConsentTypes_ArcBackupAndRestoreConsent& from);
  void MergeFrom(const UserConsentTypes_ArcBackupAndRestoreConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_ArcBackupAndRestoreConsent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionGrdIdsFieldNumber = 1,
    kConfirmationGrdIdFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // repeated int32 description_grd_ids = 1;
  int description_grd_ids_size() const;
  void clear_description_grd_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 description_grd_ids(int index) const;
  void set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      description_grd_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_description_grd_ids();

  // optional int32 confirmation_grd_id = 2;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  bool has_status() const;
  void clear_status();
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > description_grd_ids_;
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id_;
  int status_;
  friend struct ::TableStruct_user_5fconsent_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class UserConsentTypes_ArcGoogleLocationServiceConsent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent) */ {
 public:
  UserConsentTypes_ArcGoogleLocationServiceConsent();
  virtual ~UserConsentTypes_ArcGoogleLocationServiceConsent();

  UserConsentTypes_ArcGoogleLocationServiceConsent(const UserConsentTypes_ArcGoogleLocationServiceConsent& from);
  UserConsentTypes_ArcGoogleLocationServiceConsent(UserConsentTypes_ArcGoogleLocationServiceConsent&& from) noexcept
    : UserConsentTypes_ArcGoogleLocationServiceConsent() {
    *this = ::std::move(from);
  }

  inline UserConsentTypes_ArcGoogleLocationServiceConsent& operator=(const UserConsentTypes_ArcGoogleLocationServiceConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConsentTypes_ArcGoogleLocationServiceConsent& operator=(UserConsentTypes_ArcGoogleLocationServiceConsent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_ArcGoogleLocationServiceConsent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConsentTypes_ArcGoogleLocationServiceConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_ArcGoogleLocationServiceConsent*>(
               &_UserConsentTypes_ArcGoogleLocationServiceConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserConsentTypes_ArcGoogleLocationServiceConsent& a, UserConsentTypes_ArcGoogleLocationServiceConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConsentTypes_ArcGoogleLocationServiceConsent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConsentTypes_ArcGoogleLocationServiceConsent* New() const final {
    return CreateMaybeMessage<UserConsentTypes_ArcGoogleLocationServiceConsent>(nullptr);
  }

  UserConsentTypes_ArcGoogleLocationServiceConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConsentTypes_ArcGoogleLocationServiceConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserConsentTypes_ArcGoogleLocationServiceConsent& from);
  void MergeFrom(const UserConsentTypes_ArcGoogleLocationServiceConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_ArcGoogleLocationServiceConsent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionGrdIdsFieldNumber = 1,
    kConfirmationGrdIdFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // repeated int32 description_grd_ids = 1;
  int description_grd_ids_size() const;
  void clear_description_grd_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 description_grd_ids(int index) const;
  void set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      description_grd_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_description_grd_ids();

  // optional int32 confirmation_grd_id = 2;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  bool has_status() const;
  void clear_status();
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > description_grd_ids_;
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id_;
  int status_;
  friend struct ::TableStruct_user_5fconsent_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class UserConsentTypes_ArcMetricsAndUsageConsent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent) */ {
 public:
  UserConsentTypes_ArcMetricsAndUsageConsent();
  virtual ~UserConsentTypes_ArcMetricsAndUsageConsent();

  UserConsentTypes_ArcMetricsAndUsageConsent(const UserConsentTypes_ArcMetricsAndUsageConsent& from);
  UserConsentTypes_ArcMetricsAndUsageConsent(UserConsentTypes_ArcMetricsAndUsageConsent&& from) noexcept
    : UserConsentTypes_ArcMetricsAndUsageConsent() {
    *this = ::std::move(from);
  }

  inline UserConsentTypes_ArcMetricsAndUsageConsent& operator=(const UserConsentTypes_ArcMetricsAndUsageConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConsentTypes_ArcMetricsAndUsageConsent& operator=(UserConsentTypes_ArcMetricsAndUsageConsent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_ArcMetricsAndUsageConsent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConsentTypes_ArcMetricsAndUsageConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_ArcMetricsAndUsageConsent*>(
               &_UserConsentTypes_ArcMetricsAndUsageConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserConsentTypes_ArcMetricsAndUsageConsent& a, UserConsentTypes_ArcMetricsAndUsageConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConsentTypes_ArcMetricsAndUsageConsent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConsentTypes_ArcMetricsAndUsageConsent* New() const final {
    return CreateMaybeMessage<UserConsentTypes_ArcMetricsAndUsageConsent>(nullptr);
  }

  UserConsentTypes_ArcMetricsAndUsageConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConsentTypes_ArcMetricsAndUsageConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserConsentTypes_ArcMetricsAndUsageConsent& from);
  void MergeFrom(const UserConsentTypes_ArcMetricsAndUsageConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_ArcMetricsAndUsageConsent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionGrdIdsFieldNumber = 1,
    kConfirmationGrdIdFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // repeated int32 description_grd_ids = 1;
  int description_grd_ids_size() const;
  void clear_description_grd_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 description_grd_ids(int index) const;
  void set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      description_grd_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_description_grd_ids();

  // optional int32 confirmation_grd_id = 2;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  bool has_status() const;
  void clear_status();
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > description_grd_ids_;
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id_;
  int status_;
  friend struct ::TableStruct_user_5fconsent_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class UserConsentTypes_ArcPlayTermsOfServiceConsent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent) */ {
 public:
  UserConsentTypes_ArcPlayTermsOfServiceConsent();
  virtual ~UserConsentTypes_ArcPlayTermsOfServiceConsent();

  UserConsentTypes_ArcPlayTermsOfServiceConsent(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from);
  UserConsentTypes_ArcPlayTermsOfServiceConsent(UserConsentTypes_ArcPlayTermsOfServiceConsent&& from) noexcept
    : UserConsentTypes_ArcPlayTermsOfServiceConsent() {
    *this = ::std::move(from);
  }

  inline UserConsentTypes_ArcPlayTermsOfServiceConsent& operator=(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConsentTypes_ArcPlayTermsOfServiceConsent& operator=(UserConsentTypes_ArcPlayTermsOfServiceConsent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_ArcPlayTermsOfServiceConsent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConsentTypes_ArcPlayTermsOfServiceConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_ArcPlayTermsOfServiceConsent*>(
               &_UserConsentTypes_ArcPlayTermsOfServiceConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserConsentTypes_ArcPlayTermsOfServiceConsent& a, UserConsentTypes_ArcPlayTermsOfServiceConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConsentTypes_ArcPlayTermsOfServiceConsent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConsentTypes_ArcPlayTermsOfServiceConsent* New() const final {
    return CreateMaybeMessage<UserConsentTypes_ArcPlayTermsOfServiceConsent>(nullptr);
  }

  UserConsentTypes_ArcPlayTermsOfServiceConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConsentTypes_ArcPlayTermsOfServiceConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from);
  void MergeFrom(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_ArcPlayTermsOfServiceConsent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow ConsentFlow;
  static constexpr ConsentFlow SETUP =
    UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_SETUP;
  static constexpr ConsentFlow SETTING_CHANGE =
    UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_SETTING_CHANGE;
  static inline bool ConsentFlow_IsValid(int value) {
    return UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_IsValid(value);
  }
  static constexpr ConsentFlow ConsentFlow_MIN =
    UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_ConsentFlow_MIN;
  static constexpr ConsentFlow ConsentFlow_MAX =
    UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_ConsentFlow_MAX;
  static constexpr int ConsentFlow_ARRAYSIZE =
    UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_ConsentFlow_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ConsentFlow_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConsentFlow>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConsentFlow_Name.");
    return UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_Name(enum_t_value);
  }
  static inline bool ConsentFlow_Parse(const std::string& name,
      ConsentFlow* value) {
    return UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionGrdIdsFieldNumber = 5,
    kPlayTermsOfServiceHashFieldNumber = 2,
    kPlayTermsOfServiceTextLengthFieldNumber = 1,
    kConfirmationGrdIdFieldNumber = 3,
    kStatusFieldNumber = 4,
    kConsentFlowFieldNumber = 6,
  };
  // repeated int32 description_grd_ids = 5;
  int description_grd_ids_size() const;
  void clear_description_grd_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 description_grd_ids(int index) const;
  void set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      description_grd_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_description_grd_ids();

  // optional bytes play_terms_of_service_hash = 2;
  bool has_play_terms_of_service_hash() const;
  void clear_play_terms_of_service_hash();
  const std::string& play_terms_of_service_hash() const;
  void set_play_terms_of_service_hash(const std::string& value);
  void set_play_terms_of_service_hash(std::string&& value);
  void set_play_terms_of_service_hash(const char* value);
  void set_play_terms_of_service_hash(const void* value, size_t size);
  std::string* mutable_play_terms_of_service_hash();
  std::string* release_play_terms_of_service_hash();
  void set_allocated_play_terms_of_service_hash(std::string* play_terms_of_service_hash);

  // optional int32 play_terms_of_service_text_length = 1;
  bool has_play_terms_of_service_text_length() const;
  void clear_play_terms_of_service_text_length();
  ::PROTOBUF_NAMESPACE_ID::int32 play_terms_of_service_text_length() const;
  void set_play_terms_of_service_text_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 confirmation_grd_id = 3;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;
  bool has_status() const;
  void clear_status();
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;
  bool has_consent_flow() const;
  void clear_consent_flow();
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow consent_flow() const;
  void set_consent_flow(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > description_grd_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr play_terms_of_service_hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 play_terms_of_service_text_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id_;
  int status_;
  int consent_flow_;
  friend struct ::TableStruct_user_5fconsent_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class UserConsentTypes_SyncConsent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.SyncConsent) */ {
 public:
  UserConsentTypes_SyncConsent();
  virtual ~UserConsentTypes_SyncConsent();

  UserConsentTypes_SyncConsent(const UserConsentTypes_SyncConsent& from);
  UserConsentTypes_SyncConsent(UserConsentTypes_SyncConsent&& from) noexcept
    : UserConsentTypes_SyncConsent() {
    *this = ::std::move(from);
  }

  inline UserConsentTypes_SyncConsent& operator=(const UserConsentTypes_SyncConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConsentTypes_SyncConsent& operator=(UserConsentTypes_SyncConsent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_SyncConsent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConsentTypes_SyncConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_SyncConsent*>(
               &_UserConsentTypes_SyncConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserConsentTypes_SyncConsent& a, UserConsentTypes_SyncConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConsentTypes_SyncConsent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConsentTypes_SyncConsent* New() const final {
    return CreateMaybeMessage<UserConsentTypes_SyncConsent>(nullptr);
  }

  UserConsentTypes_SyncConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConsentTypes_SyncConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserConsentTypes_SyncConsent& from);
  void MergeFrom(const UserConsentTypes_SyncConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_SyncConsent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserConsentTypes.SyncConsent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionGrdIdsFieldNumber = 1,
    kConfirmationGrdIdFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // repeated int32 description_grd_ids = 1;
  int description_grd_ids_size() const;
  void clear_description_grd_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 description_grd_ids(int index) const;
  void set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      description_grd_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_description_grd_ids();

  // optional int32 confirmation_grd_id = 2;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  bool has_status() const;
  void clear_status();
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.SyncConsent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > description_grd_ids_;
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id_;
  int status_;
  friend struct ::TableStruct_user_5fconsent_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class UserConsentTypes_UnifiedConsent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.UnifiedConsent) */ {
 public:
  UserConsentTypes_UnifiedConsent();
  virtual ~UserConsentTypes_UnifiedConsent();

  UserConsentTypes_UnifiedConsent(const UserConsentTypes_UnifiedConsent& from);
  UserConsentTypes_UnifiedConsent(UserConsentTypes_UnifiedConsent&& from) noexcept
    : UserConsentTypes_UnifiedConsent() {
    *this = ::std::move(from);
  }

  inline UserConsentTypes_UnifiedConsent& operator=(const UserConsentTypes_UnifiedConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConsentTypes_UnifiedConsent& operator=(UserConsentTypes_UnifiedConsent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_UnifiedConsent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConsentTypes_UnifiedConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_UnifiedConsent*>(
               &_UserConsentTypes_UnifiedConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserConsentTypes_UnifiedConsent& a, UserConsentTypes_UnifiedConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConsentTypes_UnifiedConsent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConsentTypes_UnifiedConsent* New() const final {
    return CreateMaybeMessage<UserConsentTypes_UnifiedConsent>(nullptr);
  }

  UserConsentTypes_UnifiedConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConsentTypes_UnifiedConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserConsentTypes_UnifiedConsent& from);
  void MergeFrom(const UserConsentTypes_UnifiedConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_UnifiedConsent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserConsentTypes.UnifiedConsent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionGrdIdsFieldNumber = 1,
    kConfirmationGrdIdFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // repeated int32 description_grd_ids = 1;
  int description_grd_ids_size() const;
  void clear_description_grd_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 description_grd_ids(int index) const;
  void set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      description_grd_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_description_grd_ids();

  // optional int32 confirmation_grd_id = 2;
  bool has_confirmation_grd_id() const;
  void clear_confirmation_grd_id();
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id() const;
  void set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  bool has_status() const;
  void clear_status();
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.UnifiedConsent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > description_grd_ids_;
  ::PROTOBUF_NAMESPACE_ID::int32 confirmation_grd_id_;
  int status_;
  friend struct ::TableStruct_user_5fconsent_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class UserConsentTypes_AssistantActivityControlConsent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes.AssistantActivityControlConsent) */ {
 public:
  UserConsentTypes_AssistantActivityControlConsent();
  virtual ~UserConsentTypes_AssistantActivityControlConsent();

  UserConsentTypes_AssistantActivityControlConsent(const UserConsentTypes_AssistantActivityControlConsent& from);
  UserConsentTypes_AssistantActivityControlConsent(UserConsentTypes_AssistantActivityControlConsent&& from) noexcept
    : UserConsentTypes_AssistantActivityControlConsent() {
    *this = ::std::move(from);
  }

  inline UserConsentTypes_AssistantActivityControlConsent& operator=(const UserConsentTypes_AssistantActivityControlConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConsentTypes_AssistantActivityControlConsent& operator=(UserConsentTypes_AssistantActivityControlConsent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes_AssistantActivityControlConsent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConsentTypes_AssistantActivityControlConsent* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes_AssistantActivityControlConsent*>(
               &_UserConsentTypes_AssistantActivityControlConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserConsentTypes_AssistantActivityControlConsent& a, UserConsentTypes_AssistantActivityControlConsent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConsentTypes_AssistantActivityControlConsent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConsentTypes_AssistantActivityControlConsent* New() const final {
    return CreateMaybeMessage<UserConsentTypes_AssistantActivityControlConsent>(nullptr);
  }

  UserConsentTypes_AssistantActivityControlConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConsentTypes_AssistantActivityControlConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserConsentTypes_AssistantActivityControlConsent& from);
  void MergeFrom(const UserConsentTypes_AssistantActivityControlConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes_AssistantActivityControlConsent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserConsentTypes.AssistantActivityControlConsent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiAuditKeyFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional bytes ui_audit_key = 1;
  bool has_ui_audit_key() const;
  void clear_ui_audit_key();
  const std::string& ui_audit_key() const;
  void set_ui_audit_key(const std::string& value);
  void set_ui_audit_key(std::string&& value);
  void set_ui_audit_key(const char* value);
  void set_ui_audit_key(const void* value, size_t size);
  std::string* mutable_ui_audit_key();
  std::string* release_ui_audit_key();
  void set_allocated_ui_audit_key(std::string* ui_audit_key);

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;
  bool has_status() const;
  void clear_status();
  ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.AssistantActivityControlConsent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ui_audit_key_;
  int status_;
  friend struct ::TableStruct_user_5fconsent_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class UserConsentTypes :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserConsentTypes) */ {
 public:
  UserConsentTypes();
  virtual ~UserConsentTypes();

  UserConsentTypes(const UserConsentTypes& from);
  UserConsentTypes(UserConsentTypes&& from) noexcept
    : UserConsentTypes() {
    *this = ::std::move(from);
  }

  inline UserConsentTypes& operator=(const UserConsentTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserConsentTypes& operator=(UserConsentTypes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserConsentTypes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserConsentTypes* internal_default_instance() {
    return reinterpret_cast<const UserConsentTypes*>(
               &_UserConsentTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserConsentTypes& a, UserConsentTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(UserConsentTypes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserConsentTypes* New() const final {
    return CreateMaybeMessage<UserConsentTypes>(nullptr);
  }

  UserConsentTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserConsentTypes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserConsentTypes& from);
  void MergeFrom(const UserConsentTypes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserConsentTypes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserConsentTypes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserConsentTypes_ArcBackupAndRestoreConsent ArcBackupAndRestoreConsent;
  typedef UserConsentTypes_ArcGoogleLocationServiceConsent ArcGoogleLocationServiceConsent;
  typedef UserConsentTypes_ArcMetricsAndUsageConsent ArcMetricsAndUsageConsent;
  typedef UserConsentTypes_ArcPlayTermsOfServiceConsent ArcPlayTermsOfServiceConsent;
  typedef UserConsentTypes_SyncConsent SyncConsent;
  typedef UserConsentTypes_UnifiedConsent UnifiedConsent;
  typedef UserConsentTypes_AssistantActivityControlConsent AssistantActivityControlConsent;

  typedef UserConsentTypes_ConsentStatus ConsentStatus;
  static constexpr ConsentStatus CONSENT_STATUS_UNSPECIFIED =
    UserConsentTypes_ConsentStatus_CONSENT_STATUS_UNSPECIFIED;
  static constexpr ConsentStatus NOT_GIVEN =
    UserConsentTypes_ConsentStatus_NOT_GIVEN;
  static constexpr ConsentStatus GIVEN =
    UserConsentTypes_ConsentStatus_GIVEN;
  static inline bool ConsentStatus_IsValid(int value) {
    return UserConsentTypes_ConsentStatus_IsValid(value);
  }
  static constexpr ConsentStatus ConsentStatus_MIN =
    UserConsentTypes_ConsentStatus_ConsentStatus_MIN;
  static constexpr ConsentStatus ConsentStatus_MAX =
    UserConsentTypes_ConsentStatus_ConsentStatus_MAX;
  static constexpr int ConsentStatus_ARRAYSIZE =
    UserConsentTypes_ConsentStatus_ConsentStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ConsentStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConsentStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConsentStatus_Name.");
    return UserConsentTypes_ConsentStatus_Name(enum_t_value);
  }
  static inline bool ConsentStatus_Parse(const std::string& name,
      ConsentStatus* value) {
    return UserConsentTypes_ConsentStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fconsent_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserConsentTypes_ArcBackupAndRestoreConsent

// repeated int32 description_grd_ids = 1;
inline int UserConsentTypes_ArcBackupAndRestoreConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_ArcBackupAndRestoreConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserConsentTypes_ArcBackupAndRestoreConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserConsentTypes_ArcBackupAndRestoreConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
inline bool UserConsentTypes_ArcBackupAndRestoreConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_ArcBackupAndRestoreConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
inline bool UserConsentTypes_ArcBackupAndRestoreConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcBackupAndRestoreConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_ArcBackupAndRestoreConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes_ArcGoogleLocationServiceConsent

// repeated int32 description_grd_ids = 1;
inline int UserConsentTypes_ArcGoogleLocationServiceConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_ArcGoogleLocationServiceConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserConsentTypes_ArcGoogleLocationServiceConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserConsentTypes_ArcGoogleLocationServiceConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
inline bool UserConsentTypes_ArcGoogleLocationServiceConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_ArcGoogleLocationServiceConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
inline bool UserConsentTypes_ArcGoogleLocationServiceConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcGoogleLocationServiceConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_ArcGoogleLocationServiceConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes_ArcMetricsAndUsageConsent

// repeated int32 description_grd_ids = 1;
inline int UserConsentTypes_ArcMetricsAndUsageConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_ArcMetricsAndUsageConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserConsentTypes_ArcMetricsAndUsageConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserConsentTypes_ArcMetricsAndUsageConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
inline bool UserConsentTypes_ArcMetricsAndUsageConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_ArcMetricsAndUsageConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
inline bool UserConsentTypes_ArcMetricsAndUsageConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcMetricsAndUsageConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_ArcMetricsAndUsageConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes_ArcPlayTermsOfServiceConsent

// optional int32 play_terms_of_service_text_length = 1;
inline bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_play_terms_of_service_text_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_play_terms_of_service_text_length() {
  play_terms_of_service_text_length_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_ArcPlayTermsOfServiceConsent::play_terms_of_service_text_length() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_text_length)
  return play_terms_of_service_text_length_;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_text_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  play_terms_of_service_text_length_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_text_length)
}

// optional bytes play_terms_of_service_hash = 2;
inline bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_play_terms_of_service_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_play_terms_of_service_hash() {
  play_terms_of_service_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserConsentTypes_ArcPlayTermsOfServiceConsent::play_terms_of_service_hash() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
  return play_terms_of_service_hash_.GetNoArena();
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  play_terms_of_service_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  play_terms_of_service_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  play_terms_of_service_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  play_terms_of_service_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
inline std::string* UserConsentTypes_ArcPlayTermsOfServiceConsent::mutable_play_terms_of_service_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
  return play_terms_of_service_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserConsentTypes_ArcPlayTermsOfServiceConsent::release_play_terms_of_service_hash() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
  if (!has_play_terms_of_service_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return play_terms_of_service_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_allocated_play_terms_of_service_hash(std::string* play_terms_of_service_hash) {
  if (play_terms_of_service_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  play_terms_of_service_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), play_terms_of_service_hash);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}

// repeated int32 description_grd_ids = 5;
inline int UserConsentTypes_ArcPlayTermsOfServiceConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_ArcPlayTermsOfServiceConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.description_grd_ids)
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.description_grd_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserConsentTypes_ArcPlayTermsOfServiceConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserConsentTypes_ArcPlayTermsOfServiceConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 3;
inline bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_ArcPlayTermsOfServiceConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;
inline bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcPlayTermsOfServiceConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.status)
}

// optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;
inline bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_consent_flow() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_consent_flow() {
  consent_flow_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow UserConsentTypes_ArcPlayTermsOfServiceConsent::consent_flow() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.consent_flow)
  return static_cast< ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow >(consent_flow_);
}
inline void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_consent_flow(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow value) {
  assert(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  consent_flow_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.consent_flow)
}

// -------------------------------------------------------------------

// UserConsentTypes_SyncConsent

// repeated int32 description_grd_ids = 1;
inline int UserConsentTypes_SyncConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentTypes_SyncConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_SyncConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentTypes_SyncConsent::set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
}
inline void UserConsentTypes_SyncConsent::add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserConsentTypes_SyncConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserConsentTypes_SyncConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
inline bool UserConsentTypes_SyncConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_SyncConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_SyncConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.SyncConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_SyncConsent::set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.SyncConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
inline bool UserConsentTypes_SyncConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_SyncConsent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_SyncConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.SyncConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_SyncConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.SyncConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes_UnifiedConsent

// repeated int32 description_grd_ids = 1;
inline int UserConsentTypes_UnifiedConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline void UserConsentTypes_UnifiedConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_UnifiedConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.UnifiedConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
inline void UserConsentTypes_UnifiedConsent::set_description_grd_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.UnifiedConsent.description_grd_ids)
}
inline void UserConsentTypes_UnifiedConsent::add_description_grd_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.UnifiedConsent.description_grd_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserConsentTypes_UnifiedConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.UnifiedConsent.description_grd_ids)
  return description_grd_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserConsentTypes_UnifiedConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.UnifiedConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
inline bool UserConsentTypes_UnifiedConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_UnifiedConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserConsentTypes_UnifiedConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.UnifiedConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
inline void UserConsentTypes_UnifiedConsent::set_confirmation_grd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.UnifiedConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
inline bool UserConsentTypes_UnifiedConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_UnifiedConsent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_UnifiedConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.UnifiedConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_UnifiedConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.UnifiedConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes_AssistantActivityControlConsent

// optional bytes ui_audit_key = 1;
inline bool UserConsentTypes_AssistantActivityControlConsent::has_ui_audit_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserConsentTypes_AssistantActivityControlConsent::clear_ui_audit_key() {
  ui_audit_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserConsentTypes_AssistantActivityControlConsent::ui_audit_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.AssistantActivityControlConsent.ui_audit_key)
  return ui_audit_key_.GetNoArena();
}
inline void UserConsentTypes_AssistantActivityControlConsent::set_ui_audit_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ui_audit_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.AssistantActivityControlConsent.ui_audit_key)
}
inline void UserConsentTypes_AssistantActivityControlConsent::set_ui_audit_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ui_audit_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserConsentTypes.AssistantActivityControlConsent.ui_audit_key)
}
inline void UserConsentTypes_AssistantActivityControlConsent::set_ui_audit_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ui_audit_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserConsentTypes.AssistantActivityControlConsent.ui_audit_key)
}
inline void UserConsentTypes_AssistantActivityControlConsent::set_ui_audit_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ui_audit_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserConsentTypes.AssistantActivityControlConsent.ui_audit_key)
}
inline std::string* UserConsentTypes_AssistantActivityControlConsent::mutable_ui_audit_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentTypes.AssistantActivityControlConsent.ui_audit_key)
  return ui_audit_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserConsentTypes_AssistantActivityControlConsent::release_ui_audit_key() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentTypes.AssistantActivityControlConsent.ui_audit_key)
  if (!has_ui_audit_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ui_audit_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserConsentTypes_AssistantActivityControlConsent::set_allocated_ui_audit_key(std::string* ui_audit_key) {
  if (ui_audit_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ui_audit_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ui_audit_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentTypes.AssistantActivityControlConsent.ui_audit_key)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;
inline bool UserConsentTypes_AssistantActivityControlConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserConsentTypes_AssistantActivityControlConsent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_AssistantActivityControlConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.AssistantActivityControlConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline void UserConsentTypes_AssistantActivityControlConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.AssistantActivityControlConsent.status)
}

// -------------------------------------------------------------------

// UserConsentTypes

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent_ConsentFlow> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserConsentTypes_ConsentStatus> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5fconsent_5ftypes_2eproto
