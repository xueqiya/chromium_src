// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiments_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_experiments_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_experiments_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_experiments_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_experiments_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class AutofillCullingFlags;
class AutofillCullingFlagsDefaultTypeInternal;
extern AutofillCullingFlagsDefaultTypeInternal _AutofillCullingFlags_default_instance_;
class EnhancedBookmarksFlags;
class EnhancedBookmarksFlagsDefaultTypeInternal;
extern EnhancedBookmarksFlagsDefaultTypeInternal _EnhancedBookmarksFlags_default_instance_;
class ExperimentsSpecifics;
class ExperimentsSpecificsDefaultTypeInternal;
extern ExperimentsSpecificsDefaultTypeInternal _ExperimentsSpecifics_default_instance_;
class FaviconSyncFlags;
class FaviconSyncFlagsDefaultTypeInternal;
extern FaviconSyncFlagsDefaultTypeInternal _FaviconSyncFlags_default_instance_;
class GcmChannelFlags;
class GcmChannelFlagsDefaultTypeInternal;
extern GcmChannelFlagsDefaultTypeInternal _GcmChannelFlags_default_instance_;
class GcmInvalidationsFlags;
class GcmInvalidationsFlagsDefaultTypeInternal;
extern GcmInvalidationsFlagsDefaultTypeInternal _GcmInvalidationsFlags_default_instance_;
class HistoryDeleteDirectives;
class HistoryDeleteDirectivesDefaultTypeInternal;
extern HistoryDeleteDirectivesDefaultTypeInternal _HistoryDeleteDirectives_default_instance_;
class KeystoreEncryptionFlags;
class KeystoreEncryptionFlagsDefaultTypeInternal;
extern KeystoreEncryptionFlagsDefaultTypeInternal _KeystoreEncryptionFlags_default_instance_;
class PreCommitUpdateAvoidanceFlags;
class PreCommitUpdateAvoidanceFlagsDefaultTypeInternal;
extern PreCommitUpdateAvoidanceFlagsDefaultTypeInternal _PreCommitUpdateAvoidanceFlags_default_instance_;
class WalletSyncFlags;
class WalletSyncFlagsDefaultTypeInternal;
extern WalletSyncFlagsDefaultTypeInternal _WalletSyncFlags_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::AutofillCullingFlags* Arena::CreateMaybeMessage<::sync_pb::AutofillCullingFlags>(Arena*);
template<> ::sync_pb::EnhancedBookmarksFlags* Arena::CreateMaybeMessage<::sync_pb::EnhancedBookmarksFlags>(Arena*);
template<> ::sync_pb::ExperimentsSpecifics* Arena::CreateMaybeMessage<::sync_pb::ExperimentsSpecifics>(Arena*);
template<> ::sync_pb::FaviconSyncFlags* Arena::CreateMaybeMessage<::sync_pb::FaviconSyncFlags>(Arena*);
template<> ::sync_pb::GcmChannelFlags* Arena::CreateMaybeMessage<::sync_pb::GcmChannelFlags>(Arena*);
template<> ::sync_pb::GcmInvalidationsFlags* Arena::CreateMaybeMessage<::sync_pb::GcmInvalidationsFlags>(Arena*);
template<> ::sync_pb::HistoryDeleteDirectives* Arena::CreateMaybeMessage<::sync_pb::HistoryDeleteDirectives>(Arena*);
template<> ::sync_pb::KeystoreEncryptionFlags* Arena::CreateMaybeMessage<::sync_pb::KeystoreEncryptionFlags>(Arena*);
template<> ::sync_pb::PreCommitUpdateAvoidanceFlags* Arena::CreateMaybeMessage<::sync_pb::PreCommitUpdateAvoidanceFlags>(Arena*);
template<> ::sync_pb::WalletSyncFlags* Arena::CreateMaybeMessage<::sync_pb::WalletSyncFlags>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class KeystoreEncryptionFlags :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.KeystoreEncryptionFlags) */ {
 public:
  KeystoreEncryptionFlags();
  virtual ~KeystoreEncryptionFlags();

  KeystoreEncryptionFlags(const KeystoreEncryptionFlags& from);
  KeystoreEncryptionFlags(KeystoreEncryptionFlags&& from) noexcept
    : KeystoreEncryptionFlags() {
    *this = ::std::move(from);
  }

  inline KeystoreEncryptionFlags& operator=(const KeystoreEncryptionFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeystoreEncryptionFlags& operator=(KeystoreEncryptionFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const KeystoreEncryptionFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeystoreEncryptionFlags* internal_default_instance() {
    return reinterpret_cast<const KeystoreEncryptionFlags*>(
               &_KeystoreEncryptionFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeystoreEncryptionFlags& a, KeystoreEncryptionFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(KeystoreEncryptionFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeystoreEncryptionFlags* New() const final {
    return CreateMaybeMessage<KeystoreEncryptionFlags>(nullptr);
  }

  KeystoreEncryptionFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeystoreEncryptionFlags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KeystoreEncryptionFlags& from);
  void MergeFrom(const KeystoreEncryptionFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeystoreEncryptionFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.KeystoreEncryptionFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.KeystoreEncryptionFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_experiments_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class HistoryDeleteDirectives :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.HistoryDeleteDirectives) */ {
 public:
  HistoryDeleteDirectives();
  virtual ~HistoryDeleteDirectives();

  HistoryDeleteDirectives(const HistoryDeleteDirectives& from);
  HistoryDeleteDirectives(HistoryDeleteDirectives&& from) noexcept
    : HistoryDeleteDirectives() {
    *this = ::std::move(from);
  }

  inline HistoryDeleteDirectives& operator=(const HistoryDeleteDirectives& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryDeleteDirectives& operator=(HistoryDeleteDirectives&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HistoryDeleteDirectives& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryDeleteDirectives* internal_default_instance() {
    return reinterpret_cast<const HistoryDeleteDirectives*>(
               &_HistoryDeleteDirectives_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HistoryDeleteDirectives& a, HistoryDeleteDirectives& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryDeleteDirectives* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryDeleteDirectives* New() const final {
    return CreateMaybeMessage<HistoryDeleteDirectives>(nullptr);
  }

  HistoryDeleteDirectives* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryDeleteDirectives>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HistoryDeleteDirectives& from);
  void MergeFrom(const HistoryDeleteDirectives& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HistoryDeleteDirectives* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.HistoryDeleteDirectives";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.HistoryDeleteDirectives)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_experiments_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillCullingFlags :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillCullingFlags) */ {
 public:
  AutofillCullingFlags();
  virtual ~AutofillCullingFlags();

  AutofillCullingFlags(const AutofillCullingFlags& from);
  AutofillCullingFlags(AutofillCullingFlags&& from) noexcept
    : AutofillCullingFlags() {
    *this = ::std::move(from);
  }

  inline AutofillCullingFlags& operator=(const AutofillCullingFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillCullingFlags& operator=(AutofillCullingFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AutofillCullingFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutofillCullingFlags* internal_default_instance() {
    return reinterpret_cast<const AutofillCullingFlags*>(
               &_AutofillCullingFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AutofillCullingFlags& a, AutofillCullingFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(AutofillCullingFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutofillCullingFlags* New() const final {
    return CreateMaybeMessage<AutofillCullingFlags>(nullptr);
  }

  AutofillCullingFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutofillCullingFlags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AutofillCullingFlags& from);
  void MergeFrom(const AutofillCullingFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillCullingFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillCullingFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillCullingFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_experiments_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class FaviconSyncFlags :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.FaviconSyncFlags) */ {
 public:
  FaviconSyncFlags();
  virtual ~FaviconSyncFlags();

  FaviconSyncFlags(const FaviconSyncFlags& from);
  FaviconSyncFlags(FaviconSyncFlags&& from) noexcept
    : FaviconSyncFlags() {
    *this = ::std::move(from);
  }

  inline FaviconSyncFlags& operator=(const FaviconSyncFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaviconSyncFlags& operator=(FaviconSyncFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FaviconSyncFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaviconSyncFlags* internal_default_instance() {
    return reinterpret_cast<const FaviconSyncFlags*>(
               &_FaviconSyncFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FaviconSyncFlags& a, FaviconSyncFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(FaviconSyncFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaviconSyncFlags* New() const final {
    return CreateMaybeMessage<FaviconSyncFlags>(nullptr);
  }

  FaviconSyncFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaviconSyncFlags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FaviconSyncFlags& from);
  void MergeFrom(const FaviconSyncFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaviconSyncFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.FaviconSyncFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kFaviconSyncLimitFieldNumber = 2,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional int32 favicon_sync_limit = 2 [default = 200];
  bool has_favicon_sync_limit() const;
  void clear_favicon_sync_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 favicon_sync_limit() const;
  void set_favicon_sync_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.FaviconSyncFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 favicon_sync_limit_;
  friend struct ::TableStruct_experiments_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PreCommitUpdateAvoidanceFlags :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PreCommitUpdateAvoidanceFlags) */ {
 public:
  PreCommitUpdateAvoidanceFlags();
  virtual ~PreCommitUpdateAvoidanceFlags();

  PreCommitUpdateAvoidanceFlags(const PreCommitUpdateAvoidanceFlags& from);
  PreCommitUpdateAvoidanceFlags(PreCommitUpdateAvoidanceFlags&& from) noexcept
    : PreCommitUpdateAvoidanceFlags() {
    *this = ::std::move(from);
  }

  inline PreCommitUpdateAvoidanceFlags& operator=(const PreCommitUpdateAvoidanceFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreCommitUpdateAvoidanceFlags& operator=(PreCommitUpdateAvoidanceFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PreCommitUpdateAvoidanceFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreCommitUpdateAvoidanceFlags* internal_default_instance() {
    return reinterpret_cast<const PreCommitUpdateAvoidanceFlags*>(
               &_PreCommitUpdateAvoidanceFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PreCommitUpdateAvoidanceFlags& a, PreCommitUpdateAvoidanceFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(PreCommitUpdateAvoidanceFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreCommitUpdateAvoidanceFlags* New() const final {
    return CreateMaybeMessage<PreCommitUpdateAvoidanceFlags>(nullptr);
  }

  PreCommitUpdateAvoidanceFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreCommitUpdateAvoidanceFlags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PreCommitUpdateAvoidanceFlags& from);
  void MergeFrom(const PreCommitUpdateAvoidanceFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PreCommitUpdateAvoidanceFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PreCommitUpdateAvoidanceFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.PreCommitUpdateAvoidanceFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_experiments_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class GcmChannelFlags :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GcmChannelFlags) */ {
 public:
  GcmChannelFlags();
  virtual ~GcmChannelFlags();

  GcmChannelFlags(const GcmChannelFlags& from);
  GcmChannelFlags(GcmChannelFlags&& from) noexcept
    : GcmChannelFlags() {
    *this = ::std::move(from);
  }

  inline GcmChannelFlags& operator=(const GcmChannelFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline GcmChannelFlags& operator=(GcmChannelFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GcmChannelFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcmChannelFlags* internal_default_instance() {
    return reinterpret_cast<const GcmChannelFlags*>(
               &_GcmChannelFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GcmChannelFlags& a, GcmChannelFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(GcmChannelFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GcmChannelFlags* New() const final {
    return CreateMaybeMessage<GcmChannelFlags>(nullptr);
  }

  GcmChannelFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GcmChannelFlags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GcmChannelFlags& from);
  void MergeFrom(const GcmChannelFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GcmChannelFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GcmChannelFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.GcmChannelFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_experiments_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class EnhancedBookmarksFlags :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.EnhancedBookmarksFlags) */ {
 public:
  EnhancedBookmarksFlags();
  virtual ~EnhancedBookmarksFlags();

  EnhancedBookmarksFlags(const EnhancedBookmarksFlags& from);
  EnhancedBookmarksFlags(EnhancedBookmarksFlags&& from) noexcept
    : EnhancedBookmarksFlags() {
    *this = ::std::move(from);
  }

  inline EnhancedBookmarksFlags& operator=(const EnhancedBookmarksFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnhancedBookmarksFlags& operator=(EnhancedBookmarksFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EnhancedBookmarksFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnhancedBookmarksFlags* internal_default_instance() {
    return reinterpret_cast<const EnhancedBookmarksFlags*>(
               &_EnhancedBookmarksFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EnhancedBookmarksFlags& a, EnhancedBookmarksFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(EnhancedBookmarksFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnhancedBookmarksFlags* New() const final {
    return CreateMaybeMessage<EnhancedBookmarksFlags>(nullptr);
  }

  EnhancedBookmarksFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnhancedBookmarksFlags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EnhancedBookmarksFlags& from);
  void MergeFrom(const EnhancedBookmarksFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnhancedBookmarksFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.EnhancedBookmarksFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionIdFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // optional string extension_id = 2;
  bool has_extension_id() const;
  void clear_extension_id();
  const std::string& extension_id() const;
  void set_extension_id(const std::string& value);
  void set_extension_id(std::string&& value);
  void set_extension_id(const char* value);
  void set_extension_id(const char* value, size_t size);
  std::string* mutable_extension_id();
  std::string* release_extension_id();
  void set_allocated_extension_id(std::string* extension_id);

  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.EnhancedBookmarksFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_id_;
  bool enabled_;
  friend struct ::TableStruct_experiments_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class GcmInvalidationsFlags :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GcmInvalidationsFlags) */ {
 public:
  GcmInvalidationsFlags();
  virtual ~GcmInvalidationsFlags();

  GcmInvalidationsFlags(const GcmInvalidationsFlags& from);
  GcmInvalidationsFlags(GcmInvalidationsFlags&& from) noexcept
    : GcmInvalidationsFlags() {
    *this = ::std::move(from);
  }

  inline GcmInvalidationsFlags& operator=(const GcmInvalidationsFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline GcmInvalidationsFlags& operator=(GcmInvalidationsFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GcmInvalidationsFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcmInvalidationsFlags* internal_default_instance() {
    return reinterpret_cast<const GcmInvalidationsFlags*>(
               &_GcmInvalidationsFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GcmInvalidationsFlags& a, GcmInvalidationsFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(GcmInvalidationsFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GcmInvalidationsFlags* New() const final {
    return CreateMaybeMessage<GcmInvalidationsFlags>(nullptr);
  }

  GcmInvalidationsFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GcmInvalidationsFlags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GcmInvalidationsFlags& from);
  void MergeFrom(const GcmInvalidationsFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GcmInvalidationsFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GcmInvalidationsFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.GcmInvalidationsFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_experiments_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WalletSyncFlags :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WalletSyncFlags) */ {
 public:
  WalletSyncFlags();
  virtual ~WalletSyncFlags();

  WalletSyncFlags(const WalletSyncFlags& from);
  WalletSyncFlags(WalletSyncFlags&& from) noexcept
    : WalletSyncFlags() {
    *this = ::std::move(from);
  }

  inline WalletSyncFlags& operator=(const WalletSyncFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletSyncFlags& operator=(WalletSyncFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WalletSyncFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WalletSyncFlags* internal_default_instance() {
    return reinterpret_cast<const WalletSyncFlags*>(
               &_WalletSyncFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WalletSyncFlags& a, WalletSyncFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletSyncFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalletSyncFlags* New() const final {
    return CreateMaybeMessage<WalletSyncFlags>(nullptr);
  }

  WalletSyncFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalletSyncFlags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WalletSyncFlags& from);
  void MergeFrom(const WalletSyncFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletSyncFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WalletSyncFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.WalletSyncFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  friend struct ::TableStruct_experiments_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class ExperimentsSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ExperimentsSpecifics) */ {
 public:
  ExperimentsSpecifics();
  virtual ~ExperimentsSpecifics();

  ExperimentsSpecifics(const ExperimentsSpecifics& from);
  ExperimentsSpecifics(ExperimentsSpecifics&& from) noexcept
    : ExperimentsSpecifics() {
    *this = ::std::move(from);
  }

  inline ExperimentsSpecifics& operator=(const ExperimentsSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExperimentsSpecifics& operator=(ExperimentsSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ExperimentsSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExperimentsSpecifics* internal_default_instance() {
    return reinterpret_cast<const ExperimentsSpecifics*>(
               &_ExperimentsSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ExperimentsSpecifics& a, ExperimentsSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(ExperimentsSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExperimentsSpecifics* New() const final {
    return CreateMaybeMessage<ExperimentsSpecifics>(nullptr);
  }

  ExperimentsSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExperimentsSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ExperimentsSpecifics& from);
  void MergeFrom(const ExperimentsSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExperimentsSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ExperimentsSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeystoreEncryptionFieldNumber = 1,
    kHistoryDeleteDirectivesFieldNumber = 2,
    kAutofillCullingFieldNumber = 3,
    kFaviconSyncFieldNumber = 4,
    kPreCommitUpdateAvoidanceFieldNumber = 5,
    kGcmChannelFieldNumber = 6,
    kObsoleteEnhancedBookmarksFieldNumber = 7,
    kGcmInvalidationsFieldNumber = 8,
    kObsoleteWalletSyncFieldNumber = 9,
  };
  // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
  bool has_keystore_encryption() const;
  void clear_keystore_encryption();
  const ::sync_pb::KeystoreEncryptionFlags& keystore_encryption() const;
  ::sync_pb::KeystoreEncryptionFlags* release_keystore_encryption();
  ::sync_pb::KeystoreEncryptionFlags* mutable_keystore_encryption();
  void set_allocated_keystore_encryption(::sync_pb::KeystoreEncryptionFlags* keystore_encryption);

  // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
  bool has_history_delete_directives() const;
  void clear_history_delete_directives();
  const ::sync_pb::HistoryDeleteDirectives& history_delete_directives() const;
  ::sync_pb::HistoryDeleteDirectives* release_history_delete_directives();
  ::sync_pb::HistoryDeleteDirectives* mutable_history_delete_directives();
  void set_allocated_history_delete_directives(::sync_pb::HistoryDeleteDirectives* history_delete_directives);

  // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
  bool has_autofill_culling() const;
  void clear_autofill_culling();
  const ::sync_pb::AutofillCullingFlags& autofill_culling() const;
  ::sync_pb::AutofillCullingFlags* release_autofill_culling();
  ::sync_pb::AutofillCullingFlags* mutable_autofill_culling();
  void set_allocated_autofill_culling(::sync_pb::AutofillCullingFlags* autofill_culling);

  // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
  bool has_favicon_sync() const;
  void clear_favicon_sync();
  const ::sync_pb::FaviconSyncFlags& favicon_sync() const;
  ::sync_pb::FaviconSyncFlags* release_favicon_sync();
  ::sync_pb::FaviconSyncFlags* mutable_favicon_sync();
  void set_allocated_favicon_sync(::sync_pb::FaviconSyncFlags* favicon_sync);

  // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
  bool has_pre_commit_update_avoidance() const;
  void clear_pre_commit_update_avoidance();
  const ::sync_pb::PreCommitUpdateAvoidanceFlags& pre_commit_update_avoidance() const;
  ::sync_pb::PreCommitUpdateAvoidanceFlags* release_pre_commit_update_avoidance();
  ::sync_pb::PreCommitUpdateAvoidanceFlags* mutable_pre_commit_update_avoidance();
  void set_allocated_pre_commit_update_avoidance(::sync_pb::PreCommitUpdateAvoidanceFlags* pre_commit_update_avoidance);

  // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
  bool has_gcm_channel() const;
  void clear_gcm_channel();
  const ::sync_pb::GcmChannelFlags& gcm_channel() const;
  ::sync_pb::GcmChannelFlags* release_gcm_channel();
  ::sync_pb::GcmChannelFlags* mutable_gcm_channel();
  void set_allocated_gcm_channel(::sync_pb::GcmChannelFlags* gcm_channel);

  // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
  bool has_obsolete_enhanced_bookmarks() const;
  void clear_obsolete_enhanced_bookmarks();
  const ::sync_pb::EnhancedBookmarksFlags& obsolete_enhanced_bookmarks() const;
  ::sync_pb::EnhancedBookmarksFlags* release_obsolete_enhanced_bookmarks();
  ::sync_pb::EnhancedBookmarksFlags* mutable_obsolete_enhanced_bookmarks();
  void set_allocated_obsolete_enhanced_bookmarks(::sync_pb::EnhancedBookmarksFlags* obsolete_enhanced_bookmarks);

  // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
  bool has_gcm_invalidations() const;
  void clear_gcm_invalidations();
  const ::sync_pb::GcmInvalidationsFlags& gcm_invalidations() const;
  ::sync_pb::GcmInvalidationsFlags* release_gcm_invalidations();
  ::sync_pb::GcmInvalidationsFlags* mutable_gcm_invalidations();
  void set_allocated_gcm_invalidations(::sync_pb::GcmInvalidationsFlags* gcm_invalidations);

  // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
  bool has_obsolete_wallet_sync() const;
  void clear_obsolete_wallet_sync();
  const ::sync_pb::WalletSyncFlags& obsolete_wallet_sync() const;
  ::sync_pb::WalletSyncFlags* release_obsolete_wallet_sync();
  ::sync_pb::WalletSyncFlags* mutable_obsolete_wallet_sync();
  void set_allocated_obsolete_wallet_sync(::sync_pb::WalletSyncFlags* obsolete_wallet_sync);

  // @@protoc_insertion_point(class_scope:sync_pb.ExperimentsSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::KeystoreEncryptionFlags* keystore_encryption_;
  ::sync_pb::HistoryDeleteDirectives* history_delete_directives_;
  ::sync_pb::AutofillCullingFlags* autofill_culling_;
  ::sync_pb::FaviconSyncFlags* favicon_sync_;
  ::sync_pb::PreCommitUpdateAvoidanceFlags* pre_commit_update_avoidance_;
  ::sync_pb::GcmChannelFlags* gcm_channel_;
  ::sync_pb::EnhancedBookmarksFlags* obsolete_enhanced_bookmarks_;
  ::sync_pb::GcmInvalidationsFlags* gcm_invalidations_;
  ::sync_pb::WalletSyncFlags* obsolete_wallet_sync_;
  friend struct ::TableStruct_experiments_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeystoreEncryptionFlags

// optional bool enabled = 1;
inline bool KeystoreEncryptionFlags::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeystoreEncryptionFlags::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool KeystoreEncryptionFlags::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.KeystoreEncryptionFlags.enabled)
  return enabled_;
}
inline void KeystoreEncryptionFlags::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.KeystoreEncryptionFlags.enabled)
}

// -------------------------------------------------------------------

// HistoryDeleteDirectives

// optional bool enabled = 1;
inline bool HistoryDeleteDirectives::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HistoryDeleteDirectives::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool HistoryDeleteDirectives::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistoryDeleteDirectives.enabled)
  return enabled_;
}
inline void HistoryDeleteDirectives::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.HistoryDeleteDirectives.enabled)
}

// -------------------------------------------------------------------

// AutofillCullingFlags

// optional bool enabled = 1;
inline bool AutofillCullingFlags::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutofillCullingFlags::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AutofillCullingFlags::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillCullingFlags.enabled)
  return enabled_;
}
inline void AutofillCullingFlags::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.AutofillCullingFlags.enabled)
}

// -------------------------------------------------------------------

// FaviconSyncFlags

// optional bool enabled = 1;
inline bool FaviconSyncFlags::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaviconSyncFlags::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FaviconSyncFlags::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.FaviconSyncFlags.enabled)
  return enabled_;
}
inline void FaviconSyncFlags::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.FaviconSyncFlags.enabled)
}

// optional int32 favicon_sync_limit = 2 [default = 200];
inline bool FaviconSyncFlags::has_favicon_sync_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaviconSyncFlags::clear_favicon_sync_limit() {
  favicon_sync_limit_ = 200;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaviconSyncFlags::favicon_sync_limit() const {
  // @@protoc_insertion_point(field_get:sync_pb.FaviconSyncFlags.favicon_sync_limit)
  return favicon_sync_limit_;
}
inline void FaviconSyncFlags::set_favicon_sync_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  favicon_sync_limit_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.FaviconSyncFlags.favicon_sync_limit)
}

// -------------------------------------------------------------------

// PreCommitUpdateAvoidanceFlags

// optional bool enabled = 1;
inline bool PreCommitUpdateAvoidanceFlags::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PreCommitUpdateAvoidanceFlags::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PreCommitUpdateAvoidanceFlags::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.PreCommitUpdateAvoidanceFlags.enabled)
  return enabled_;
}
inline void PreCommitUpdateAvoidanceFlags::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PreCommitUpdateAvoidanceFlags.enabled)
}

// -------------------------------------------------------------------

// GcmChannelFlags

// optional bool enabled = 1;
inline bool GcmChannelFlags::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GcmChannelFlags::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool GcmChannelFlags::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.GcmChannelFlags.enabled)
  return enabled_;
}
inline void GcmChannelFlags::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GcmChannelFlags.enabled)
}

// -------------------------------------------------------------------

// EnhancedBookmarksFlags

// optional bool enabled = 1;
inline bool EnhancedBookmarksFlags::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnhancedBookmarksFlags::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool EnhancedBookmarksFlags::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.EnhancedBookmarksFlags.enabled)
  return enabled_;
}
inline void EnhancedBookmarksFlags::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.EnhancedBookmarksFlags.enabled)
}

// optional string extension_id = 2;
inline bool EnhancedBookmarksFlags::has_extension_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnhancedBookmarksFlags::clear_extension_id() {
  extension_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnhancedBookmarksFlags::extension_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.EnhancedBookmarksFlags.extension_id)
  return extension_id_.GetNoArena();
}
inline void EnhancedBookmarksFlags::set_extension_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.EnhancedBookmarksFlags.extension_id)
}
inline void EnhancedBookmarksFlags::set_extension_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.EnhancedBookmarksFlags.extension_id)
}
inline void EnhancedBookmarksFlags::set_extension_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.EnhancedBookmarksFlags.extension_id)
}
inline void EnhancedBookmarksFlags::set_extension_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.EnhancedBookmarksFlags.extension_id)
}
inline std::string* EnhancedBookmarksFlags::mutable_extension_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.EnhancedBookmarksFlags.extension_id)
  return extension_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnhancedBookmarksFlags::release_extension_id() {
  // @@protoc_insertion_point(field_release:sync_pb.EnhancedBookmarksFlags.extension_id)
  if (!has_extension_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return extension_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnhancedBookmarksFlags::set_allocated_extension_id(std::string* extension_id) {
  if (extension_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extension_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EnhancedBookmarksFlags.extension_id)
}

// -------------------------------------------------------------------

// GcmInvalidationsFlags

// optional bool enabled = 1;
inline bool GcmInvalidationsFlags::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GcmInvalidationsFlags::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool GcmInvalidationsFlags::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.GcmInvalidationsFlags.enabled)
  return enabled_;
}
inline void GcmInvalidationsFlags::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GcmInvalidationsFlags.enabled)
}

// -------------------------------------------------------------------

// WalletSyncFlags

// optional bool enabled = 1;
inline bool WalletSyncFlags::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WalletSyncFlags::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool WalletSyncFlags::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletSyncFlags.enabled)
  return enabled_;
}
inline void WalletSyncFlags::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WalletSyncFlags.enabled)
}

// -------------------------------------------------------------------

// ExperimentsSpecifics

// optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
inline bool ExperimentsSpecifics::has_keystore_encryption() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExperimentsSpecifics::clear_keystore_encryption() {
  if (keystore_encryption_ != nullptr) keystore_encryption_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sync_pb::KeystoreEncryptionFlags& ExperimentsSpecifics::keystore_encryption() const {
  const ::sync_pb::KeystoreEncryptionFlags* p = keystore_encryption_;
  // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.keystore_encryption)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::KeystoreEncryptionFlags*>(
      &::sync_pb::_KeystoreEncryptionFlags_default_instance_);
}
inline ::sync_pb::KeystoreEncryptionFlags* ExperimentsSpecifics::release_keystore_encryption() {
  // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.keystore_encryption)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::KeystoreEncryptionFlags* temp = keystore_encryption_;
  keystore_encryption_ = nullptr;
  return temp;
}
inline ::sync_pb::KeystoreEncryptionFlags* ExperimentsSpecifics::mutable_keystore_encryption() {
  _has_bits_[0] |= 0x00000001u;
  if (keystore_encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::KeystoreEncryptionFlags>(GetArenaNoVirtual());
    keystore_encryption_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.keystore_encryption)
  return keystore_encryption_;
}
inline void ExperimentsSpecifics::set_allocated_keystore_encryption(::sync_pb::KeystoreEncryptionFlags* keystore_encryption) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete keystore_encryption_;
  }
  if (keystore_encryption) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keystore_encryption = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keystore_encryption, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keystore_encryption_ = keystore_encryption;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.keystore_encryption)
}

// optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
inline bool ExperimentsSpecifics::has_history_delete_directives() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExperimentsSpecifics::clear_history_delete_directives() {
  if (history_delete_directives_ != nullptr) history_delete_directives_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::HistoryDeleteDirectives& ExperimentsSpecifics::history_delete_directives() const {
  const ::sync_pb::HistoryDeleteDirectives* p = history_delete_directives_;
  // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.history_delete_directives)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::HistoryDeleteDirectives*>(
      &::sync_pb::_HistoryDeleteDirectives_default_instance_);
}
inline ::sync_pb::HistoryDeleteDirectives* ExperimentsSpecifics::release_history_delete_directives() {
  // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.history_delete_directives)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::HistoryDeleteDirectives* temp = history_delete_directives_;
  history_delete_directives_ = nullptr;
  return temp;
}
inline ::sync_pb::HistoryDeleteDirectives* ExperimentsSpecifics::mutable_history_delete_directives() {
  _has_bits_[0] |= 0x00000002u;
  if (history_delete_directives_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::HistoryDeleteDirectives>(GetArenaNoVirtual());
    history_delete_directives_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.history_delete_directives)
  return history_delete_directives_;
}
inline void ExperimentsSpecifics::set_allocated_history_delete_directives(::sync_pb::HistoryDeleteDirectives* history_delete_directives) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete history_delete_directives_;
  }
  if (history_delete_directives) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      history_delete_directives = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history_delete_directives, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  history_delete_directives_ = history_delete_directives;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.history_delete_directives)
}

// optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
inline bool ExperimentsSpecifics::has_autofill_culling() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExperimentsSpecifics::clear_autofill_culling() {
  if (autofill_culling_ != nullptr) autofill_culling_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::AutofillCullingFlags& ExperimentsSpecifics::autofill_culling() const {
  const ::sync_pb::AutofillCullingFlags* p = autofill_culling_;
  // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.autofill_culling)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::AutofillCullingFlags*>(
      &::sync_pb::_AutofillCullingFlags_default_instance_);
}
inline ::sync_pb::AutofillCullingFlags* ExperimentsSpecifics::release_autofill_culling() {
  // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.autofill_culling)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::AutofillCullingFlags* temp = autofill_culling_;
  autofill_culling_ = nullptr;
  return temp;
}
inline ::sync_pb::AutofillCullingFlags* ExperimentsSpecifics::mutable_autofill_culling() {
  _has_bits_[0] |= 0x00000004u;
  if (autofill_culling_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::AutofillCullingFlags>(GetArenaNoVirtual());
    autofill_culling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.autofill_culling)
  return autofill_culling_;
}
inline void ExperimentsSpecifics::set_allocated_autofill_culling(::sync_pb::AutofillCullingFlags* autofill_culling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete autofill_culling_;
  }
  if (autofill_culling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autofill_culling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill_culling, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  autofill_culling_ = autofill_culling;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.autofill_culling)
}

// optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
inline bool ExperimentsSpecifics::has_favicon_sync() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExperimentsSpecifics::clear_favicon_sync() {
  if (favicon_sync_ != nullptr) favicon_sync_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::FaviconSyncFlags& ExperimentsSpecifics::favicon_sync() const {
  const ::sync_pb::FaviconSyncFlags* p = favicon_sync_;
  // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.favicon_sync)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::FaviconSyncFlags*>(
      &::sync_pb::_FaviconSyncFlags_default_instance_);
}
inline ::sync_pb::FaviconSyncFlags* ExperimentsSpecifics::release_favicon_sync() {
  // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.favicon_sync)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::FaviconSyncFlags* temp = favicon_sync_;
  favicon_sync_ = nullptr;
  return temp;
}
inline ::sync_pb::FaviconSyncFlags* ExperimentsSpecifics::mutable_favicon_sync() {
  _has_bits_[0] |= 0x00000008u;
  if (favicon_sync_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::FaviconSyncFlags>(GetArenaNoVirtual());
    favicon_sync_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.favicon_sync)
  return favicon_sync_;
}
inline void ExperimentsSpecifics::set_allocated_favicon_sync(::sync_pb::FaviconSyncFlags* favicon_sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete favicon_sync_;
  }
  if (favicon_sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      favicon_sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon_sync, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  favicon_sync_ = favicon_sync;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.favicon_sync)
}

// optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
inline bool ExperimentsSpecifics::has_pre_commit_update_avoidance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExperimentsSpecifics::clear_pre_commit_update_avoidance() {
  if (pre_commit_update_avoidance_ != nullptr) pre_commit_update_avoidance_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::sync_pb::PreCommitUpdateAvoidanceFlags& ExperimentsSpecifics::pre_commit_update_avoidance() const {
  const ::sync_pb::PreCommitUpdateAvoidanceFlags* p = pre_commit_update_avoidance_;
  // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.pre_commit_update_avoidance)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::PreCommitUpdateAvoidanceFlags*>(
      &::sync_pb::_PreCommitUpdateAvoidanceFlags_default_instance_);
}
inline ::sync_pb::PreCommitUpdateAvoidanceFlags* ExperimentsSpecifics::release_pre_commit_update_avoidance() {
  // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.pre_commit_update_avoidance)
  _has_bits_[0] &= ~0x00000010u;
  ::sync_pb::PreCommitUpdateAvoidanceFlags* temp = pre_commit_update_avoidance_;
  pre_commit_update_avoidance_ = nullptr;
  return temp;
}
inline ::sync_pb::PreCommitUpdateAvoidanceFlags* ExperimentsSpecifics::mutable_pre_commit_update_avoidance() {
  _has_bits_[0] |= 0x00000010u;
  if (pre_commit_update_avoidance_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PreCommitUpdateAvoidanceFlags>(GetArenaNoVirtual());
    pre_commit_update_avoidance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.pre_commit_update_avoidance)
  return pre_commit_update_avoidance_;
}
inline void ExperimentsSpecifics::set_allocated_pre_commit_update_avoidance(::sync_pb::PreCommitUpdateAvoidanceFlags* pre_commit_update_avoidance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pre_commit_update_avoidance_;
  }
  if (pre_commit_update_avoidance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pre_commit_update_avoidance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre_commit_update_avoidance, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pre_commit_update_avoidance_ = pre_commit_update_avoidance;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.pre_commit_update_avoidance)
}

// optional .sync_pb.GcmChannelFlags gcm_channel = 6;
inline bool ExperimentsSpecifics::has_gcm_channel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExperimentsSpecifics::clear_gcm_channel() {
  if (gcm_channel_ != nullptr) gcm_channel_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::sync_pb::GcmChannelFlags& ExperimentsSpecifics::gcm_channel() const {
  const ::sync_pb::GcmChannelFlags* p = gcm_channel_;
  // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.gcm_channel)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GcmChannelFlags*>(
      &::sync_pb::_GcmChannelFlags_default_instance_);
}
inline ::sync_pb::GcmChannelFlags* ExperimentsSpecifics::release_gcm_channel() {
  // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.gcm_channel)
  _has_bits_[0] &= ~0x00000020u;
  ::sync_pb::GcmChannelFlags* temp = gcm_channel_;
  gcm_channel_ = nullptr;
  return temp;
}
inline ::sync_pb::GcmChannelFlags* ExperimentsSpecifics::mutable_gcm_channel() {
  _has_bits_[0] |= 0x00000020u;
  if (gcm_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GcmChannelFlags>(GetArenaNoVirtual());
    gcm_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.gcm_channel)
  return gcm_channel_;
}
inline void ExperimentsSpecifics::set_allocated_gcm_channel(::sync_pb::GcmChannelFlags* gcm_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gcm_channel_;
  }
  if (gcm_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gcm_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gcm_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  gcm_channel_ = gcm_channel;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.gcm_channel)
}

// optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
inline bool ExperimentsSpecifics::has_obsolete_enhanced_bookmarks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExperimentsSpecifics::clear_obsolete_enhanced_bookmarks() {
  if (obsolete_enhanced_bookmarks_ != nullptr) obsolete_enhanced_bookmarks_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::sync_pb::EnhancedBookmarksFlags& ExperimentsSpecifics::obsolete_enhanced_bookmarks() const {
  const ::sync_pb::EnhancedBookmarksFlags* p = obsolete_enhanced_bookmarks_;
  // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.obsolete_enhanced_bookmarks)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::EnhancedBookmarksFlags*>(
      &::sync_pb::_EnhancedBookmarksFlags_default_instance_);
}
inline ::sync_pb::EnhancedBookmarksFlags* ExperimentsSpecifics::release_obsolete_enhanced_bookmarks() {
  // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.obsolete_enhanced_bookmarks)
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::EnhancedBookmarksFlags* temp = obsolete_enhanced_bookmarks_;
  obsolete_enhanced_bookmarks_ = nullptr;
  return temp;
}
inline ::sync_pb::EnhancedBookmarksFlags* ExperimentsSpecifics::mutable_obsolete_enhanced_bookmarks() {
  _has_bits_[0] |= 0x00000040u;
  if (obsolete_enhanced_bookmarks_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EnhancedBookmarksFlags>(GetArenaNoVirtual());
    obsolete_enhanced_bookmarks_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.obsolete_enhanced_bookmarks)
  return obsolete_enhanced_bookmarks_;
}
inline void ExperimentsSpecifics::set_allocated_obsolete_enhanced_bookmarks(::sync_pb::EnhancedBookmarksFlags* obsolete_enhanced_bookmarks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obsolete_enhanced_bookmarks_;
  }
  if (obsolete_enhanced_bookmarks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obsolete_enhanced_bookmarks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsolete_enhanced_bookmarks, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  obsolete_enhanced_bookmarks_ = obsolete_enhanced_bookmarks;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.obsolete_enhanced_bookmarks)
}

// optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
inline bool ExperimentsSpecifics::has_gcm_invalidations() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExperimentsSpecifics::clear_gcm_invalidations() {
  if (gcm_invalidations_ != nullptr) gcm_invalidations_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::sync_pb::GcmInvalidationsFlags& ExperimentsSpecifics::gcm_invalidations() const {
  const ::sync_pb::GcmInvalidationsFlags* p = gcm_invalidations_;
  // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.gcm_invalidations)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GcmInvalidationsFlags*>(
      &::sync_pb::_GcmInvalidationsFlags_default_instance_);
}
inline ::sync_pb::GcmInvalidationsFlags* ExperimentsSpecifics::release_gcm_invalidations() {
  // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.gcm_invalidations)
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::GcmInvalidationsFlags* temp = gcm_invalidations_;
  gcm_invalidations_ = nullptr;
  return temp;
}
inline ::sync_pb::GcmInvalidationsFlags* ExperimentsSpecifics::mutable_gcm_invalidations() {
  _has_bits_[0] |= 0x00000080u;
  if (gcm_invalidations_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GcmInvalidationsFlags>(GetArenaNoVirtual());
    gcm_invalidations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.gcm_invalidations)
  return gcm_invalidations_;
}
inline void ExperimentsSpecifics::set_allocated_gcm_invalidations(::sync_pb::GcmInvalidationsFlags* gcm_invalidations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gcm_invalidations_;
  }
  if (gcm_invalidations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gcm_invalidations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gcm_invalidations, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  gcm_invalidations_ = gcm_invalidations;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.gcm_invalidations)
}

// optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
inline bool ExperimentsSpecifics::has_obsolete_wallet_sync() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExperimentsSpecifics::clear_obsolete_wallet_sync() {
  if (obsolete_wallet_sync_ != nullptr) obsolete_wallet_sync_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::sync_pb::WalletSyncFlags& ExperimentsSpecifics::obsolete_wallet_sync() const {
  const ::sync_pb::WalletSyncFlags* p = obsolete_wallet_sync_;
  // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.obsolete_wallet_sync)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::WalletSyncFlags*>(
      &::sync_pb::_WalletSyncFlags_default_instance_);
}
inline ::sync_pb::WalletSyncFlags* ExperimentsSpecifics::release_obsolete_wallet_sync() {
  // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.obsolete_wallet_sync)
  _has_bits_[0] &= ~0x00000100u;
  ::sync_pb::WalletSyncFlags* temp = obsolete_wallet_sync_;
  obsolete_wallet_sync_ = nullptr;
  return temp;
}
inline ::sync_pb::WalletSyncFlags* ExperimentsSpecifics::mutable_obsolete_wallet_sync() {
  _has_bits_[0] |= 0x00000100u;
  if (obsolete_wallet_sync_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WalletSyncFlags>(GetArenaNoVirtual());
    obsolete_wallet_sync_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.obsolete_wallet_sync)
  return obsolete_wallet_sync_;
}
inline void ExperimentsSpecifics::set_allocated_obsolete_wallet_sync(::sync_pb::WalletSyncFlags* obsolete_wallet_sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obsolete_wallet_sync_;
  }
  if (obsolete_wallet_sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obsolete_wallet_sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsolete_wallet_sync, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  obsolete_wallet_sync_ = obsolete_wallet_sync;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.obsolete_wallet_sync)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_experiments_5fspecifics_2eproto
