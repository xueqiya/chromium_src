// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bookmark_model_metadata.proto

#include "bookmark_model_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bookmark_5fmodel_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BookmarkMetadata_bookmark_5fmodel_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_entity_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntityMetadata_entity_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5ftype_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelTypeState_model_5ftype_5fstate_2eproto;
namespace sync_pb {
class BookmarkMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BookmarkMetadata> _instance;
} _BookmarkMetadata_default_instance_;
class BookmarkModelMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BookmarkModelMetadata> _instance;
} _BookmarkModelMetadata_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_BookmarkMetadata_bookmark_5fmodel_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_BookmarkMetadata_default_instance_;
    new (ptr) ::sync_pb::BookmarkMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::BookmarkMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BookmarkMetadata_bookmark_5fmodel_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BookmarkMetadata_bookmark_5fmodel_5fmetadata_2eproto}, {
      &scc_info_EntityMetadata_entity_5fmetadata_2eproto.base,}};

static void InitDefaultsscc_info_BookmarkModelMetadata_bookmark_5fmodel_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_BookmarkModelMetadata_default_instance_;
    new (ptr) ::sync_pb::BookmarkModelMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::BookmarkModelMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BookmarkModelMetadata_bookmark_5fmodel_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BookmarkModelMetadata_bookmark_5fmodel_5fmetadata_2eproto}, {
      &scc_info_ModelTypeState_model_5ftype_5fstate_2eproto.base,
      &scc_info_BookmarkMetadata_bookmark_5fmodel_5fmetadata_2eproto.base,}};

namespace sync_pb {

// ===================================================================

void BookmarkMetadata::InitAsDefaultInstance() {
  ::sync_pb::_BookmarkMetadata_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::sync_pb::EntityMetadata*>(
      ::sync_pb::EntityMetadata::internal_default_instance());
}
class BookmarkMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<BookmarkMetadata>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::EntityMetadata& metadata(const BookmarkMetadata* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::EntityMetadata&
BookmarkMetadata::_Internal::metadata(const BookmarkMetadata* msg) {
  return *msg->metadata_;
}
void BookmarkMetadata::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BookmarkMetadata::BookmarkMetadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.BookmarkMetadata)
}
BookmarkMetadata::BookmarkMetadata(const BookmarkMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::sync_pb::EntityMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.BookmarkMetadata)
}

void BookmarkMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BookmarkMetadata_bookmark_5fmodel_5fmetadata_2eproto.base);
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(id_));
}

BookmarkMetadata::~BookmarkMetadata() {
  // @@protoc_insertion_point(destructor:sync_pb.BookmarkMetadata)
  SharedDtor();
}

void BookmarkMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
}

void BookmarkMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BookmarkMetadata& BookmarkMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BookmarkMetadata_bookmark_5fmodel_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void BookmarkMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.BookmarkMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BookmarkMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.EntityMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BookmarkMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.BookmarkMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.EntityMetadata metadata = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.BookmarkMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.BookmarkMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BookmarkMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.BookmarkMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .sync_pb.EntityMetadata metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::metadata(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.BookmarkMetadata)
}

size_t BookmarkMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.BookmarkMetadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .sync_pb.EntityMetadata metadata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BookmarkMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BookmarkMetadata*>(
      &from));
}

void BookmarkMetadata::MergeFrom(const BookmarkMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.BookmarkMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_metadata()->::sync_pb::EntityMetadata::MergeFrom(from.metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BookmarkMetadata::CopyFrom(const BookmarkMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.BookmarkMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookmarkMetadata::IsInitialized() const {
  return true;
}

void BookmarkMetadata::InternalSwap(BookmarkMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(metadata_, other->metadata_);
  swap(id_, other->id_);
}

std::string BookmarkMetadata::GetTypeName() const {
  return "sync_pb.BookmarkMetadata";
}


// ===================================================================

void BookmarkModelMetadata::InitAsDefaultInstance() {
  ::sync_pb::_BookmarkModelMetadata_default_instance_._instance.get_mutable()->model_type_state_ = const_cast< ::sync_pb::ModelTypeState*>(
      ::sync_pb::ModelTypeState::internal_default_instance());
}
class BookmarkModelMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<BookmarkModelMetadata>()._has_bits_);
  static const ::sync_pb::ModelTypeState& model_type_state(const BookmarkModelMetadata* msg);
  static void set_has_model_type_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::ModelTypeState&
BookmarkModelMetadata::_Internal::model_type_state(const BookmarkModelMetadata* msg) {
  return *msg->model_type_state_;
}
void BookmarkModelMetadata::clear_model_type_state() {
  if (model_type_state_ != nullptr) model_type_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BookmarkModelMetadata::BookmarkModelMetadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.BookmarkModelMetadata)
}
BookmarkModelMetadata::BookmarkModelMetadata(const BookmarkModelMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bookmarks_metadata_(from.bookmarks_metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_model_type_state()) {
    model_type_state_ = new ::sync_pb::ModelTypeState(*from.model_type_state_);
  } else {
    model_type_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.BookmarkModelMetadata)
}

void BookmarkModelMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BookmarkModelMetadata_bookmark_5fmodel_5fmetadata_2eproto.base);
  model_type_state_ = nullptr;
}

BookmarkModelMetadata::~BookmarkModelMetadata() {
  // @@protoc_insertion_point(destructor:sync_pb.BookmarkModelMetadata)
  SharedDtor();
}

void BookmarkModelMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete model_type_state_;
}

void BookmarkModelMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BookmarkModelMetadata& BookmarkModelMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BookmarkModelMetadata_bookmark_5fmodel_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void BookmarkModelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.BookmarkModelMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bookmarks_metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(model_type_state_ != nullptr);
    model_type_state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BookmarkModelMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.ModelTypeState model_type_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_model_type_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_bookmarks_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BookmarkModelMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.BookmarkModelMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.ModelTypeState model_type_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_model_type_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_bookmarks_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.BookmarkModelMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.BookmarkModelMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BookmarkModelMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.BookmarkModelMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.ModelTypeState model_type_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::model_type_state(this), output);
  }

  // repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bookmarks_metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->bookmarks_metadata(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.BookmarkModelMetadata)
}

size_t BookmarkModelMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.BookmarkModelMetadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->bookmarks_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->bookmarks_metadata(static_cast<int>(i)));
    }
  }

  // optional .sync_pb.ModelTypeState model_type_state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_type_state_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BookmarkModelMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BookmarkModelMetadata*>(
      &from));
}

void BookmarkModelMetadata::MergeFrom(const BookmarkModelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.BookmarkModelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bookmarks_metadata_.MergeFrom(from.bookmarks_metadata_);
  if (from.has_model_type_state()) {
    mutable_model_type_state()->::sync_pb::ModelTypeState::MergeFrom(from.model_type_state());
  }
}

void BookmarkModelMetadata::CopyFrom(const BookmarkModelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.BookmarkModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookmarkModelMetadata::IsInitialized() const {
  return true;
}

void BookmarkModelMetadata::InternalSwap(BookmarkModelMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&bookmarks_metadata_)->InternalSwap(CastToBase(&other->bookmarks_metadata_));
  swap(model_type_state_, other->model_type_state_);
}

std::string BookmarkModelMetadata::GetTypeName() const {
  return "sync_pb.BookmarkModelMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::BookmarkMetadata* Arena::CreateMaybeMessage< ::sync_pb::BookmarkMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::BookmarkMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::BookmarkModelMetadata* Arena::CreateMaybeMessage< ::sync_pb::BookmarkModelMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::BookmarkModelMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
