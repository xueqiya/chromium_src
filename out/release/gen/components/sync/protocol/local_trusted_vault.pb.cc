// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: local_trusted_vault.proto

#include "local_trusted_vault.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_local_5ftrusted_5fvault_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalTrustedVaultKey_local_5ftrusted_5fvault_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_local_5ftrusted_5fvault_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalTrustedVaultPerUser_local_5ftrusted_5fvault_2eproto;
namespace sync_pb {
class LocalTrustedVaultKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalTrustedVaultKey> _instance;
} _LocalTrustedVaultKey_default_instance_;
class LocalTrustedVaultPerUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalTrustedVaultPerUser> _instance;
} _LocalTrustedVaultPerUser_default_instance_;
class LocalTrustedVaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalTrustedVault> _instance;
} _LocalTrustedVault_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_LocalTrustedVault_local_5ftrusted_5fvault_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_LocalTrustedVault_default_instance_;
    new (ptr) ::sync_pb::LocalTrustedVault();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::LocalTrustedVault::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalTrustedVault_local_5ftrusted_5fvault_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LocalTrustedVault_local_5ftrusted_5fvault_2eproto}, {
      &scc_info_LocalTrustedVaultPerUser_local_5ftrusted_5fvault_2eproto.base,}};

static void InitDefaultsscc_info_LocalTrustedVaultKey_local_5ftrusted_5fvault_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_LocalTrustedVaultKey_default_instance_;
    new (ptr) ::sync_pb::LocalTrustedVaultKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::LocalTrustedVaultKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalTrustedVaultKey_local_5ftrusted_5fvault_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LocalTrustedVaultKey_local_5ftrusted_5fvault_2eproto}, {}};

static void InitDefaultsscc_info_LocalTrustedVaultPerUser_local_5ftrusted_5fvault_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_LocalTrustedVaultPerUser_default_instance_;
    new (ptr) ::sync_pb::LocalTrustedVaultPerUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::LocalTrustedVaultPerUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalTrustedVaultPerUser_local_5ftrusted_5fvault_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LocalTrustedVaultPerUser_local_5ftrusted_5fvault_2eproto}, {
      &scc_info_LocalTrustedVaultKey_local_5ftrusted_5fvault_2eproto.base,}};

namespace sync_pb {

// ===================================================================

void LocalTrustedVaultKey::InitAsDefaultInstance() {
}
class LocalTrustedVaultKey::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrustedVaultKey>()._has_bits_);
  static void set_has_key_material(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LocalTrustedVaultKey::LocalTrustedVaultKey()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.LocalTrustedVaultKey)
}
LocalTrustedVaultKey::LocalTrustedVaultKey(const LocalTrustedVaultKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_material()) {
    key_material_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_material_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.LocalTrustedVaultKey)
}

void LocalTrustedVaultKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalTrustedVaultKey_local_5ftrusted_5fvault_2eproto.base);
  key_material_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LocalTrustedVaultKey::~LocalTrustedVaultKey() {
  // @@protoc_insertion_point(destructor:sync_pb.LocalTrustedVaultKey)
  SharedDtor();
}

void LocalTrustedVaultKey::SharedDtor() {
  key_material_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocalTrustedVaultKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalTrustedVaultKey& LocalTrustedVaultKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalTrustedVaultKey_local_5ftrusted_5fvault_2eproto.base);
  return *internal_default_instance();
}


void LocalTrustedVaultKey::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LocalTrustedVaultKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_material_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalTrustedVaultKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes key_material = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key_material(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalTrustedVaultKey::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.LocalTrustedVaultKey)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key_material = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_material()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.LocalTrustedVaultKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.LocalTrustedVaultKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalTrustedVaultKey::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.LocalTrustedVaultKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key_material = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key_material(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.LocalTrustedVaultKey)
}

size_t LocalTrustedVaultKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LocalTrustedVaultKey)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes key_material = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key_material());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTrustedVaultKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LocalTrustedVaultKey*>(
      &from));
}

void LocalTrustedVaultKey::MergeFrom(const LocalTrustedVaultKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LocalTrustedVaultKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key_material()) {
    _has_bits_[0] |= 0x00000001u;
    key_material_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_material_);
  }
}

void LocalTrustedVaultKey::CopyFrom(const LocalTrustedVaultKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LocalTrustedVaultKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrustedVaultKey::IsInitialized() const {
  return true;
}

void LocalTrustedVaultKey::InternalSwap(LocalTrustedVaultKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_material_.Swap(&other->key_material_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string LocalTrustedVaultKey::GetTypeName() const {
  return "sync_pb.LocalTrustedVaultKey";
}


// ===================================================================

void LocalTrustedVaultPerUser::InitAsDefaultInstance() {
}
class LocalTrustedVaultPerUser::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrustedVaultPerUser>()._has_bits_);
  static void set_has_gaia_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_key_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LocalTrustedVaultPerUser::LocalTrustedVaultPerUser()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.LocalTrustedVaultPerUser)
}
LocalTrustedVaultPerUser::LocalTrustedVaultPerUser(const LocalTrustedVaultPerUser& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      key_(from.key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gaia_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_gaia_id()) {
    gaia_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gaia_id_);
  }
  last_key_version_ = from.last_key_version_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.LocalTrustedVaultPerUser)
}

void LocalTrustedVaultPerUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalTrustedVaultPerUser_local_5ftrusted_5fvault_2eproto.base);
  gaia_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_key_version_ = 0;
}

LocalTrustedVaultPerUser::~LocalTrustedVaultPerUser() {
  // @@protoc_insertion_point(destructor:sync_pb.LocalTrustedVaultPerUser)
  SharedDtor();
}

void LocalTrustedVaultPerUser::SharedDtor() {
  gaia_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocalTrustedVaultPerUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalTrustedVaultPerUser& LocalTrustedVaultPerUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalTrustedVaultPerUser_local_5ftrusted_5fvault_2eproto.base);
  return *internal_default_instance();
}


void LocalTrustedVaultPerUser::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LocalTrustedVaultPerUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gaia_id_.ClearNonDefaultToEmptyNoArena();
  }
  last_key_version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalTrustedVaultPerUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes gaia_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_gaia_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.LocalTrustedVaultKey key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional int32 last_key_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_key_version(&has_bits);
          last_key_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalTrustedVaultPerUser::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.LocalTrustedVaultPerUser)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes gaia_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gaia_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.LocalTrustedVaultKey key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_key_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_last_key_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_key_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.LocalTrustedVaultPerUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.LocalTrustedVaultPerUser)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalTrustedVaultPerUser::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.LocalTrustedVaultPerUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes gaia_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gaia_id(), output);
  }

  // repeated .sync_pb.LocalTrustedVaultKey key = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->key(static_cast<int>(i)),
      output);
  }

  // optional int32 last_key_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->last_key_version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.LocalTrustedVaultPerUser)
}

size_t LocalTrustedVaultPerUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LocalTrustedVaultPerUser)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.LocalTrustedVaultKey key = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->key_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->key(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes gaia_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->gaia_id());
    }

    // optional int32 last_key_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_key_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTrustedVaultPerUser::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LocalTrustedVaultPerUser*>(
      &from));
}

void LocalTrustedVaultPerUser::MergeFrom(const LocalTrustedVaultPerUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LocalTrustedVaultPerUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      gaia_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gaia_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      last_key_version_ = from.last_key_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalTrustedVaultPerUser::CopyFrom(const LocalTrustedVaultPerUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LocalTrustedVaultPerUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrustedVaultPerUser::IsInitialized() const {
  return true;
}

void LocalTrustedVaultPerUser::InternalSwap(LocalTrustedVaultPerUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&key_)->InternalSwap(CastToBase(&other->key_));
  gaia_id_.Swap(&other->gaia_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_key_version_, other->last_key_version_);
}

std::string LocalTrustedVaultPerUser::GetTypeName() const {
  return "sync_pb.LocalTrustedVaultPerUser";
}


// ===================================================================

void LocalTrustedVault::InitAsDefaultInstance() {
}
class LocalTrustedVault::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrustedVault>()._has_bits_);
};

LocalTrustedVault::LocalTrustedVault()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.LocalTrustedVault)
}
LocalTrustedVault::LocalTrustedVault(const LocalTrustedVault& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      user_(from.user_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.LocalTrustedVault)
}

void LocalTrustedVault::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalTrustedVault_local_5ftrusted_5fvault_2eproto.base);
}

LocalTrustedVault::~LocalTrustedVault() {
  // @@protoc_insertion_point(destructor:sync_pb.LocalTrustedVault)
  SharedDtor();
}

void LocalTrustedVault::SharedDtor() {
}

void LocalTrustedVault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalTrustedVault& LocalTrustedVault::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalTrustedVault_local_5ftrusted_5fvault_2eproto.base);
  return *internal_default_instance();
}


void LocalTrustedVault::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LocalTrustedVault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalTrustedVault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalTrustedVault::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.LocalTrustedVault)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.LocalTrustedVault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.LocalTrustedVault)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalTrustedVault::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.LocalTrustedVault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->user(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.LocalTrustedVault)
}

size_t LocalTrustedVault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LocalTrustedVault)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->user_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTrustedVault::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LocalTrustedVault*>(
      &from));
}

void LocalTrustedVault::MergeFrom(const LocalTrustedVault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LocalTrustedVault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
}

void LocalTrustedVault::CopyFrom(const LocalTrustedVault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LocalTrustedVault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrustedVault::IsInitialized() const {
  return true;
}

void LocalTrustedVault::InternalSwap(LocalTrustedVault* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&user_)->InternalSwap(CastToBase(&other->user_));
}

std::string LocalTrustedVault::GetTypeName() const {
  return "sync_pb.LocalTrustedVault";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::LocalTrustedVaultKey* Arena::CreateMaybeMessage< ::sync_pb::LocalTrustedVaultKey >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::LocalTrustedVaultKey >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::LocalTrustedVaultPerUser* Arena::CreateMaybeMessage< ::sync_pb::LocalTrustedVaultPerUser >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::LocalTrustedVaultPerUser >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::LocalTrustedVault* Arena::CreateMaybeMessage< ::sync_pb::LocalTrustedVault >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::LocalTrustedVault >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
