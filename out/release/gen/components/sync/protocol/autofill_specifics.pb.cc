// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autofill_specifics.proto

#include "autofill_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillProfileSpecifics_autofill_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloudTokenData_autofill_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentsCustomerData_autofill_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletCreditCardCloudTokenData_autofill_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WalletMaskedCreditCard_autofill_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autofill_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletPostalAddress_autofill_5fspecifics_2eproto;
namespace sync_pb {
class AutofillProfileSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillProfileSpecifics> _instance;
} _AutofillProfileSpecifics_default_instance_;
class AutofillSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillSpecifics> _instance;
} _AutofillSpecifics_default_instance_;
class CloudTokenDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudTokenData> _instance;
} _CloudTokenData_default_instance_;
class WalletMaskedCreditCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletMaskedCreditCard> _instance;
} _WalletMaskedCreditCard_default_instance_;
class WalletPostalAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletPostalAddress> _instance;
} _WalletPostalAddress_default_instance_;
class PaymentsCustomerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentsCustomerData> _instance;
} _PaymentsCustomerData_default_instance_;
class WalletCreditCardCloudTokenDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletCreditCardCloudTokenData> _instance;
} _WalletCreditCardCloudTokenData_default_instance_;
class AutofillWalletSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutofillWalletSpecifics> _instance;
} _AutofillWalletSpecifics_default_instance_;
class WalletMetadataSpecificsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletMetadataSpecifics> _instance;
} _WalletMetadataSpecifics_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_AutofillProfileSpecifics_autofill_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_AutofillProfileSpecifics_default_instance_;
    new (ptr) ::sync_pb::AutofillProfileSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::AutofillProfileSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutofillProfileSpecifics_autofill_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutofillProfileSpecifics_autofill_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_AutofillSpecifics_autofill_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_AutofillSpecifics_default_instance_;
    new (ptr) ::sync_pb::AutofillSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::AutofillSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutofillSpecifics_autofill_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AutofillSpecifics_autofill_5fspecifics_2eproto}, {
      &scc_info_AutofillProfileSpecifics_autofill_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_AutofillWalletSpecifics_autofill_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_AutofillWalletSpecifics_default_instance_;
    new (ptr) ::sync_pb::AutofillWalletSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::AutofillWalletSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AutofillWalletSpecifics_autofill_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_AutofillWalletSpecifics_autofill_5fspecifics_2eproto}, {
      &scc_info_WalletMaskedCreditCard_autofill_5fspecifics_2eproto.base,
      &scc_info_WalletPostalAddress_autofill_5fspecifics_2eproto.base,
      &scc_info_PaymentsCustomerData_autofill_5fspecifics_2eproto.base,
      &scc_info_WalletCreditCardCloudTokenData_autofill_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_CloudTokenData_autofill_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_CloudTokenData_default_instance_;
    new (ptr) ::sync_pb::CloudTokenData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::CloudTokenData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloudTokenData_autofill_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CloudTokenData_autofill_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_PaymentsCustomerData_autofill_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_PaymentsCustomerData_default_instance_;
    new (ptr) ::sync_pb::PaymentsCustomerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::PaymentsCustomerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentsCustomerData_autofill_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PaymentsCustomerData_autofill_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_WalletCreditCardCloudTokenData_autofill_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_WalletCreditCardCloudTokenData_default_instance_;
    new (ptr) ::sync_pb::WalletCreditCardCloudTokenData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::WalletCreditCardCloudTokenData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletCreditCardCloudTokenData_autofill_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WalletCreditCardCloudTokenData_autofill_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_WalletMaskedCreditCard_autofill_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_WalletMaskedCreditCard_default_instance_;
    new (ptr) ::sync_pb::WalletMaskedCreditCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::WalletMaskedCreditCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WalletMaskedCreditCard_autofill_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WalletMaskedCreditCard_autofill_5fspecifics_2eproto}, {
      &scc_info_CloudTokenData_autofill_5fspecifics_2eproto.base,}};

static void InitDefaultsscc_info_WalletMetadataSpecifics_autofill_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_WalletMetadataSpecifics_default_instance_;
    new (ptr) ::sync_pb::WalletMetadataSpecifics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::WalletMetadataSpecifics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletMetadataSpecifics_autofill_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WalletMetadataSpecifics_autofill_5fspecifics_2eproto}, {}};

static void InitDefaultsscc_info_WalletPostalAddress_autofill_5fspecifics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_WalletPostalAddress_default_instance_;
    new (ptr) ::sync_pb::WalletPostalAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::WalletPostalAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletPostalAddress_autofill_5fspecifics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WalletPostalAddress_autofill_5fspecifics_2eproto}, {}};

namespace sync_pb {
bool WalletMaskedCreditCard_WalletCardStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WalletMaskedCreditCard_WalletCardStatus_strings[2] = {};

static const char WalletMaskedCreditCard_WalletCardStatus_names[] =
  "EXPIRED"
  "VALID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WalletMaskedCreditCard_WalletCardStatus_entries[] = {
  { {WalletMaskedCreditCard_WalletCardStatus_names + 0, 7}, 1 },
  { {WalletMaskedCreditCard_WalletCardStatus_names + 7, 5}, 0 },
};

static const int WalletMaskedCreditCard_WalletCardStatus_entries_by_number[] = {
  1, // 0 -> VALID
  0, // 1 -> EXPIRED
};

const std::string& WalletMaskedCreditCard_WalletCardStatus_Name(
    WalletMaskedCreditCard_WalletCardStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WalletMaskedCreditCard_WalletCardStatus_entries,
          WalletMaskedCreditCard_WalletCardStatus_entries_by_number,
          2, WalletMaskedCreditCard_WalletCardStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WalletMaskedCreditCard_WalletCardStatus_entries,
      WalletMaskedCreditCard_WalletCardStatus_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WalletMaskedCreditCard_WalletCardStatus_strings[idx].get();
}
bool WalletMaskedCreditCard_WalletCardStatus_Parse(
    const std::string& name, WalletMaskedCreditCard_WalletCardStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WalletMaskedCreditCard_WalletCardStatus_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<WalletMaskedCreditCard_WalletCardStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::VALID;
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::EXPIRED;
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::WalletCardStatus_MIN;
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::WalletCardStatus_MAX;
constexpr int WalletMaskedCreditCard::WalletCardStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool WalletMaskedCreditCard_WalletCardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WalletMaskedCreditCard_WalletCardType_strings[10] = {};

static const char WalletMaskedCreditCard_WalletCardType_names[] =
  "AMEX"
  "DISCOVER"
  "JCB"
  "MAESTRO"
  "MASTER_CARD"
  "SOLO"
  "SWITCH"
  "UNIONPAY"
  "UNKNOWN"
  "VISA";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WalletMaskedCreditCard_WalletCardType_entries[] = {
  { {WalletMaskedCreditCard_WalletCardType_names + 0, 4}, 1 },
  { {WalletMaskedCreditCard_WalletCardType_names + 4, 8}, 2 },
  { {WalletMaskedCreditCard_WalletCardType_names + 12, 3}, 3 },
  { {WalletMaskedCreditCard_WalletCardType_names + 15, 7}, 4 },
  { {WalletMaskedCreditCard_WalletCardType_names + 22, 11}, 5 },
  { {WalletMaskedCreditCard_WalletCardType_names + 33, 4}, 6 },
  { {WalletMaskedCreditCard_WalletCardType_names + 37, 6}, 7 },
  { {WalletMaskedCreditCard_WalletCardType_names + 43, 8}, 9 },
  { {WalletMaskedCreditCard_WalletCardType_names + 51, 7}, 0 },
  { {WalletMaskedCreditCard_WalletCardType_names + 58, 4}, 8 },
};

static const int WalletMaskedCreditCard_WalletCardType_entries_by_number[] = {
  8, // 0 -> UNKNOWN
  0, // 1 -> AMEX
  1, // 2 -> DISCOVER
  2, // 3 -> JCB
  3, // 4 -> MAESTRO
  4, // 5 -> MASTER_CARD
  5, // 6 -> SOLO
  6, // 7 -> SWITCH
  9, // 8 -> VISA
  7, // 9 -> UNIONPAY
};

const std::string& WalletMaskedCreditCard_WalletCardType_Name(
    WalletMaskedCreditCard_WalletCardType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WalletMaskedCreditCard_WalletCardType_entries,
          WalletMaskedCreditCard_WalletCardType_entries_by_number,
          10, WalletMaskedCreditCard_WalletCardType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WalletMaskedCreditCard_WalletCardType_entries,
      WalletMaskedCreditCard_WalletCardType_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WalletMaskedCreditCard_WalletCardType_strings[idx].get();
}
bool WalletMaskedCreditCard_WalletCardType_Parse(
    const std::string& name, WalletMaskedCreditCard_WalletCardType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WalletMaskedCreditCard_WalletCardType_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<WalletMaskedCreditCard_WalletCardType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::UNKNOWN;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::AMEX;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::DISCOVER;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::JCB;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::MAESTRO;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::MASTER_CARD;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::SOLO;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::SWITCH;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::VISA;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::UNIONPAY;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::WalletCardType_MIN;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::WalletCardType_MAX;
constexpr int WalletMaskedCreditCard::WalletCardType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AutofillWalletSpecifics_WalletInfoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AutofillWalletSpecifics_WalletInfoType_strings[5] = {};

static const char AutofillWalletSpecifics_WalletInfoType_names[] =
  "CREDIT_CARD_CLOUD_TOKEN_DATA"
  "CUSTOMER_DATA"
  "MASKED_CREDIT_CARD"
  "POSTAL_ADDRESS"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AutofillWalletSpecifics_WalletInfoType_entries[] = {
  { {AutofillWalletSpecifics_WalletInfoType_names + 0, 28}, 4 },
  { {AutofillWalletSpecifics_WalletInfoType_names + 28, 13}, 3 },
  { {AutofillWalletSpecifics_WalletInfoType_names + 41, 18}, 1 },
  { {AutofillWalletSpecifics_WalletInfoType_names + 59, 14}, 2 },
  { {AutofillWalletSpecifics_WalletInfoType_names + 73, 7}, 0 },
};

static const int AutofillWalletSpecifics_WalletInfoType_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  2, // 1 -> MASKED_CREDIT_CARD
  3, // 2 -> POSTAL_ADDRESS
  1, // 3 -> CUSTOMER_DATA
  0, // 4 -> CREDIT_CARD_CLOUD_TOKEN_DATA
};

const std::string& AutofillWalletSpecifics_WalletInfoType_Name(
    AutofillWalletSpecifics_WalletInfoType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AutofillWalletSpecifics_WalletInfoType_entries,
          AutofillWalletSpecifics_WalletInfoType_entries_by_number,
          5, AutofillWalletSpecifics_WalletInfoType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AutofillWalletSpecifics_WalletInfoType_entries,
      AutofillWalletSpecifics_WalletInfoType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AutofillWalletSpecifics_WalletInfoType_strings[idx].get();
}
bool AutofillWalletSpecifics_WalletInfoType_Parse(
    const std::string& name, AutofillWalletSpecifics_WalletInfoType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AutofillWalletSpecifics_WalletInfoType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<AutofillWalletSpecifics_WalletInfoType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::UNKNOWN;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::MASKED_CREDIT_CARD;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::POSTAL_ADDRESS;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::CUSTOMER_DATA;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::CREDIT_CARD_CLOUD_TOKEN_DATA;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::WalletInfoType_MIN;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::WalletInfoType_MAX;
constexpr int AutofillWalletSpecifics::WalletInfoType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool WalletMetadataSpecifics_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WalletMetadataSpecifics_Type_strings[3] = {};

static const char WalletMetadataSpecifics_Type_names[] =
  "ADDRESS"
  "CARD"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WalletMetadataSpecifics_Type_entries[] = {
  { {WalletMetadataSpecifics_Type_names + 0, 7}, 2 },
  { {WalletMetadataSpecifics_Type_names + 7, 4}, 1 },
  { {WalletMetadataSpecifics_Type_names + 11, 7}, 0 },
};

static const int WalletMetadataSpecifics_Type_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  1, // 1 -> CARD
  0, // 2 -> ADDRESS
};

const std::string& WalletMetadataSpecifics_Type_Name(
    WalletMetadataSpecifics_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WalletMetadataSpecifics_Type_entries,
          WalletMetadataSpecifics_Type_entries_by_number,
          3, WalletMetadataSpecifics_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WalletMetadataSpecifics_Type_entries,
      WalletMetadataSpecifics_Type_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WalletMetadataSpecifics_Type_strings[idx].get();
}
bool WalletMetadataSpecifics_Type_Parse(
    const std::string& name, WalletMetadataSpecifics_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WalletMetadataSpecifics_Type_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<WalletMetadataSpecifics_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics::UNKNOWN;
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics::CARD;
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics::ADDRESS;
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics::Type_MIN;
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics::Type_MAX;
constexpr int WalletMetadataSpecifics::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AutofillProfileSpecifics::InitAsDefaultInstance() {
}
class AutofillProfileSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillProfileSpecifics>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_use_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_use_date(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_company_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_address_home_line1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_address_home_line2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_address_home_city(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_address_home_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_address_home_zip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_address_home_country(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_address_home_street_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_address_home_sorting_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_address_home_dependent_locality(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_address_home_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_validity_state_bitfield(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_is_client_validity_states_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phone_fax_whole_number(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

AutofillProfileSpecifics::AutofillProfileSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.AutofillProfileSpecifics)
}
AutofillProfileSpecifics::AutofillProfileSpecifics(const AutofillProfileSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      name_first_(from.name_first_),
      name_middle_(from.name_middle_),
      name_last_(from.name_last_),
      email_address_(from.email_address_),
      phone_home_whole_number_(from.phone_home_whole_number_),
      name_full_(from.name_full_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_company_name()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  address_home_line1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_home_line1()) {
    address_home_line1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_line1_);
  }
  address_home_line2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_home_line2()) {
    address_home_line2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_line2_);
  }
  address_home_city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_home_city()) {
    address_home_city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_city_);
  }
  address_home_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_home_state()) {
    address_home_state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_state_);
  }
  address_home_zip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_home_zip()) {
    address_home_zip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_zip_);
  }
  address_home_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_home_country()) {
    address_home_country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_country_);
  }
  phone_fax_whole_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_phone_fax_whole_number()) {
    phone_fax_whole_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_fax_whole_number_);
  }
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_guid()) {
    guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_origin()) {
    origin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  address_home_street_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_home_street_address()) {
    address_home_street_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_street_address_);
  }
  address_home_sorting_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_home_sorting_code()) {
    address_home_sorting_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_sorting_code_);
  }
  address_home_dependent_locality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_home_dependent_locality()) {
    address_home_dependent_locality_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_dependent_locality_);
  }
  address_home_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_home_language_code()) {
    address_home_language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_language_code_);
  }
  ::memcpy(&use_count_, &from.use_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_client_validity_states_updated_) -
    reinterpret_cast<char*>(&use_count_)) + sizeof(is_client_validity_states_updated_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillProfileSpecifics)
}

void AutofillProfileSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillProfileSpecifics_autofill_5fspecifics_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_line1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_line2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_zip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_fax_whole_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_street_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_sorting_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_dependent_locality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_client_validity_states_updated_) -
      reinterpret_cast<char*>(&use_count_)) + sizeof(is_client_validity_states_updated_));
}

AutofillProfileSpecifics::~AutofillProfileSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillProfileSpecifics)
  SharedDtor();
}

void AutofillProfileSpecifics::SharedDtor() {
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_line1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_line2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_zip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_fax_whole_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_street_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_sorting_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_dependent_locality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_home_language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutofillProfileSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillProfileSpecifics& AutofillProfileSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillProfileSpecifics_autofill_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void AutofillProfileSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillProfileSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_first_.Clear();
  name_middle_.Clear();
  name_last_.Clear();
  email_address_.Clear();
  phone_home_whole_number_.Clear();
  name_full_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      company_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      address_home_line1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      address_home_line2_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      address_home_city_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      address_home_state_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      address_home_zip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      address_home_country_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      phone_fax_whole_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      origin_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      address_home_street_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      address_home_sorting_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      address_home_dependent_locality_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      address_home_language_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  use_count_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x00070000u) {
    ::memset(&use_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_client_validity_states_updated_) -
        reinterpret_cast<char*>(&use_date_)) + sizeof(is_client_validity_states_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillProfileSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string label = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_label(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string name_first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_name_first(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated string name_middle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_name_middle(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated string name_last = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_name_last(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated string email_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_email_address(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional string company_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_company_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_home_line1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_home_line1(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_home_line2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_home_line2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_home_city = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_home_city(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_home_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_home_state(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_home_zip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_home_zip(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_home_country = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_home_country(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string phone_home_whole_number = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_phone_home_whole_number(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // optional string phone_fax_whole_number = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_phone_fax_whole_number(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string origin = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_origin(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_home_street_address = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_home_street_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_home_sorting_code = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_home_sorting_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_home_dependent_locality = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_home_dependent_locality(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_home_language_code = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_home_language_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string name_full = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_name_full(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 426);
        } else goto handle_unusual;
        continue;
      // optional int64 use_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_use_count(&has_bits);
          use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 use_date = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_use_date(&has_bits);
          use_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 validity_state_bitfield = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_validity_state_bitfield(&has_bits);
          validity_state_bitfield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_client_validity_states_updated = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_is_client_validity_states_updated(&has_bits);
          is_client_validity_states_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillProfileSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.AutofillProfileSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string name_first = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_name_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string name_middle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_name_middle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string name_last = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_name_last()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string email_address = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_email_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string company_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_company_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_home_line1 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_line1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_home_line2 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_line2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_home_city = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_city()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_home_state = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_home_zip = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_zip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_home_country = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_country()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string phone_home_whole_number = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_phone_home_whole_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phone_fax_whole_number = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_fax_whole_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guid = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string origin = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_home_street_address = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_street_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_home_sorting_code = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_sorting_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_home_dependent_locality = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_dependent_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_home_language_code = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string name_full = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_name_full()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 use_count = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_use_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 use_date = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_use_date(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 validity_state_bitfield = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_validity_state_bitfield(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &validity_state_bitfield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_client_validity_states_updated = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          _Internal::set_has_is_client_validity_states_updated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_client_validity_states_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.AutofillProfileSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.AutofillProfileSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillProfileSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.AutofillProfileSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // repeated string name_first = 2;
  for (int i = 0, n = this->name_first_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->name_first(i), output);
  }

  // repeated string name_middle = 3;
  for (int i = 0, n = this->name_middle_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->name_middle(i), output);
  }

  // repeated string name_last = 4;
  for (int i = 0, n = this->name_last_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->name_last(i), output);
  }

  // repeated string email_address = 5;
  for (int i = 0, n = this->email_address_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->email_address(i), output);
  }

  // optional string company_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->company_name(), output);
  }

  // optional string address_home_line1 = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->address_home_line1(), output);
  }

  // optional string address_home_line2 = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->address_home_line2(), output);
  }

  // optional string address_home_city = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->address_home_city(), output);
  }

  // optional string address_home_state = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->address_home_state(), output);
  }

  // optional string address_home_zip = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->address_home_zip(), output);
  }

  // optional string address_home_country = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->address_home_country(), output);
  }

  // repeated string phone_home_whole_number = 13;
  for (int i = 0, n = this->phone_home_whole_number_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      13, this->phone_home_whole_number(i), output);
  }

  // optional string phone_fax_whole_number = 14 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->phone_fax_whole_number(), output);
  }

  // optional string guid = 15;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->guid(), output);
  }

  // optional string origin = 16;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->origin(), output);
  }

  // optional string address_home_street_address = 17;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->address_home_street_address(), output);
  }

  // optional string address_home_sorting_code = 18;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->address_home_sorting_code(), output);
  }

  // optional string address_home_dependent_locality = 19;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->address_home_dependent_locality(), output);
  }

  // optional string address_home_language_code = 20;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->address_home_language_code(), output);
  }

  // repeated string name_full = 21;
  for (int i = 0, n = this->name_full_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      21, this->name_full(i), output);
  }

  // optional int64 use_count = 22;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(22, this->use_count(), output);
  }

  // optional int64 use_date = 23;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(23, this->use_date(), output);
  }

  // optional int64 validity_state_bitfield = 24;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(24, this->validity_state_bitfield(), output);
  }

  // optional bool is_client_validity_states_updated = 25;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(25, this->is_client_validity_states_updated(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.AutofillProfileSpecifics)
}

size_t AutofillProfileSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillProfileSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name_first = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->name_first_size());
  for (int i = 0, n = this->name_first_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->name_first(i));
  }

  // repeated string name_middle = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->name_middle_size());
  for (int i = 0, n = this->name_middle_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->name_middle(i));
  }

  // repeated string name_last = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->name_last_size());
  for (int i = 0, n = this->name_last_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->name_last(i));
  }

  // repeated string email_address = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->email_address_size());
  for (int i = 0, n = this->email_address_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->email_address(i));
  }

  // repeated string phone_home_whole_number = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->phone_home_whole_number_size());
  for (int i = 0, n = this->phone_home_whole_number_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->phone_home_whole_number(i));
  }

  // repeated string name_full = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->name_full_size());
  for (int i = 0, n = this->name_full_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->name_full(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string label = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string company_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->company_name());
    }

    // optional string address_home_line1 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_home_line1());
    }

    // optional string address_home_line2 = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_home_line2());
    }

    // optional string address_home_city = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_home_city());
    }

    // optional string address_home_state = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_home_state());
    }

    // optional string address_home_zip = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_home_zip());
    }

    // optional string address_home_country = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_home_country());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string phone_fax_whole_number = 14 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->phone_fax_whole_number());
    }

    // optional string guid = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string origin = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional string address_home_street_address = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_home_street_address());
    }

    // optional string address_home_sorting_code = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_home_sorting_code());
    }

    // optional string address_home_dependent_locality = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_home_dependent_locality());
    }

    // optional string address_home_language_code = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_home_language_code());
    }

    // optional int64 use_count = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->use_count());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int64 use_date = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->use_date());
    }

    // optional int64 validity_state_bitfield = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->validity_state_bitfield());
    }

    // optional bool is_client_validity_states_updated = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillProfileSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillProfileSpecifics*>(
      &from));
}

void AutofillProfileSpecifics::MergeFrom(const AutofillProfileSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillProfileSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_first_.MergeFrom(from.name_first_);
  name_middle_.MergeFrom(from.name_middle_);
  name_last_.MergeFrom(from.name_last_);
  email_address_.MergeFrom(from.email_address_);
  phone_home_whole_number_.MergeFrom(from.phone_home_whole_number_);
  name_full_.MergeFrom(from.name_full_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      address_home_line1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_line1_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      address_home_line2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_line2_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      address_home_city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_city_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      address_home_state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_state_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      address_home_zip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_zip_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      address_home_country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_country_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      phone_fax_whole_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_fax_whole_number_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guid_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      origin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.origin_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      address_home_street_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_street_address_);
    }
    if (cached_has_bits & 0x00001000u) {
      _has_bits_[0] |= 0x00001000u;
      address_home_sorting_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_sorting_code_);
    }
    if (cached_has_bits & 0x00002000u) {
      _has_bits_[0] |= 0x00002000u;
      address_home_dependent_locality_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_dependent_locality_);
    }
    if (cached_has_bits & 0x00004000u) {
      _has_bits_[0] |= 0x00004000u;
      address_home_language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_home_language_code_);
    }
    if (cached_has_bits & 0x00008000u) {
      use_count_ = from.use_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      use_date_ = from.use_date_;
    }
    if (cached_has_bits & 0x00020000u) {
      validity_state_bitfield_ = from.validity_state_bitfield_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_client_validity_states_updated_ = from.is_client_validity_states_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillProfileSpecifics::CopyFrom(const AutofillProfileSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillProfileSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillProfileSpecifics::IsInitialized() const {
  return true;
}

void AutofillProfileSpecifics::InternalSwap(AutofillProfileSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_first_.InternalSwap(CastToBase(&other->name_first_));
  name_middle_.InternalSwap(CastToBase(&other->name_middle_));
  name_last_.InternalSwap(CastToBase(&other->name_last_));
  email_address_.InternalSwap(CastToBase(&other->email_address_));
  phone_home_whole_number_.InternalSwap(CastToBase(&other->phone_home_whole_number_));
  name_full_.InternalSwap(CastToBase(&other->name_full_));
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_home_line1_.Swap(&other->address_home_line1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_home_line2_.Swap(&other->address_home_line2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_home_city_.Swap(&other->address_home_city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_home_state_.Swap(&other->address_home_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_home_zip_.Swap(&other->address_home_zip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_home_country_.Swap(&other->address_home_country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_fax_whole_number_.Swap(&other->phone_fax_whole_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guid_.Swap(&other->guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  origin_.Swap(&other->origin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_home_street_address_.Swap(&other->address_home_street_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_home_sorting_code_.Swap(&other->address_home_sorting_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_home_dependent_locality_.Swap(&other->address_home_dependent_locality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_home_language_code_.Swap(&other->address_home_language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(use_count_, other->use_count_);
  swap(use_date_, other->use_date_);
  swap(validity_state_bitfield_, other->validity_state_bitfield_);
  swap(is_client_validity_states_updated_, other->is_client_validity_states_updated_);
}

std::string AutofillProfileSpecifics::GetTypeName() const {
  return "sync_pb.AutofillProfileSpecifics";
}


// ===================================================================

void AutofillSpecifics::InitAsDefaultInstance() {
  ::sync_pb::_AutofillSpecifics_default_instance_._instance.get_mutable()->profile_ = const_cast< ::sync_pb::AutofillProfileSpecifics*>(
      ::sync_pb::AutofillProfileSpecifics::internal_default_instance());
}
class AutofillSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillSpecifics>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::AutofillProfileSpecifics& profile(const AutofillSpecifics* msg);
  static void set_has_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::AutofillProfileSpecifics&
AutofillSpecifics::_Internal::profile(const AutofillSpecifics* msg) {
  return *msg->profile_;
}
AutofillSpecifics::AutofillSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.AutofillSpecifics)
}
AutofillSpecifics::AutofillSpecifics(const AutofillSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      usage_timestamp_(from.usage_timestamp_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_profile()) {
    profile_ = new ::sync_pb::AutofillProfileSpecifics(*from.profile_);
  } else {
    profile_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillSpecifics)
}

void AutofillSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillSpecifics_autofill_5fspecifics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profile_ = nullptr;
}

AutofillSpecifics::~AutofillSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillSpecifics)
  SharedDtor();
}

void AutofillSpecifics::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete profile_;
}

void AutofillSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillSpecifics& AutofillSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillSpecifics_autofill_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void AutofillSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usage_timestamp_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(profile_ != nullptr);
      profile_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 usage_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_usage_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_usage_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillProfileSpecifics profile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_profile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.AutofillSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 usage_timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_usage_timestamp())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_usage_timestamp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.AutofillProfileSpecifics profile = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.AutofillSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.AutofillSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.AutofillSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // repeated int64 usage_timestamp = 3;
  for (int i = 0, n = this->usage_timestamp_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      3, this->usage_timestamp(i), output);
  }

  // optional .sync_pb.AutofillProfileSpecifics profile = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::profile(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.AutofillSpecifics)
}

size_t AutofillSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 usage_timestamp = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->usage_timestamp_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->usage_timestamp_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .sync_pb.AutofillProfileSpecifics profile = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profile_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillSpecifics*>(
      &from));
}

void AutofillSpecifics::MergeFrom(const AutofillSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usage_timestamp_.MergeFrom(from.usage_timestamp_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_profile()->::sync_pb::AutofillProfileSpecifics::MergeFrom(from.profile());
    }
  }
}

void AutofillSpecifics::CopyFrom(const AutofillSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillSpecifics::IsInitialized() const {
  return true;
}

void AutofillSpecifics::InternalSwap(AutofillSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  usage_timestamp_.InternalSwap(&other->usage_timestamp_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(profile_, other->profile_);
}

std::string AutofillSpecifics::GetTypeName() const {
  return "sync_pb.AutofillSpecifics";
}


// ===================================================================

void CloudTokenData::InitAsDefaultInstance() {
}
class CloudTokenData::_Internal {
 public:
  using HasBits = decltype(std::declval<CloudTokenData>()._has_bits_);
  static void set_has_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exp_month(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_exp_year(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_art_fife_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_instrument_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CloudTokenData::CloudTokenData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.CloudTokenData)
}
CloudTokenData::CloudTokenData(const CloudTokenData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_suffix()) {
    suffix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  art_fife_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_art_fife_url()) {
    art_fife_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.art_fife_url_);
  }
  instrument_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_instrument_token()) {
    instrument_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrument_token_);
  }
  ::memcpy(&exp_month_, &from.exp_month_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_year_) -
    reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.CloudTokenData)
}

void CloudTokenData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloudTokenData_autofill_5fspecifics_2eproto.base);
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  art_fife_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exp_month_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_year_) -
      reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
}

CloudTokenData::~CloudTokenData() {
  // @@protoc_insertion_point(destructor:sync_pb.CloudTokenData)
  SharedDtor();
}

void CloudTokenData::SharedDtor() {
  suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  art_fife_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloudTokenData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudTokenData& CloudTokenData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudTokenData_autofill_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void CloudTokenData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CloudTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      suffix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      art_fife_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      instrument_token_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&exp_month_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_year_) -
        reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudTokenData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string suffix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_suffix(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exp_month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_exp_month(&has_bits);
          exp_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exp_year = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_exp_year(&has_bits);
          exp_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string art_fife_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_art_fife_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string instrument_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_instrument_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudTokenData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.CloudTokenData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string suffix = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exp_month = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_exp_month(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exp_year = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_exp_year(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string art_fife_url = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_art_fife_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string instrument_token = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.CloudTokenData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.CloudTokenData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudTokenData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.CloudTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string suffix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suffix(), output);
  }

  // optional int32 exp_month = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->exp_month(), output);
  }

  // optional int32 exp_year = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->exp_year(), output);
  }

  // optional string art_fife_url = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->art_fife_url(), output);
  }

  // optional string instrument_token = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->instrument_token(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.CloudTokenData)
}

size_t CloudTokenData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CloudTokenData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string suffix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional string art_fife_url = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->art_fife_url());
    }

    // optional string instrument_token = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->instrument_token());
    }

    // optional int32 exp_month = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->exp_month());
    }

    // optional int32 exp_year = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->exp_year());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudTokenData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CloudTokenData*>(
      &from));
}

void CloudTokenData::MergeFrom(const CloudTokenData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CloudTokenData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      suffix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.suffix_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      art_fife_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.art_fife_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      instrument_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrument_token_);
    }
    if (cached_has_bits & 0x00000008u) {
      exp_month_ = from.exp_month_;
    }
    if (cached_has_bits & 0x00000010u) {
      exp_year_ = from.exp_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloudTokenData::CopyFrom(const CloudTokenData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CloudTokenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudTokenData::IsInitialized() const {
  return true;
}

void CloudTokenData::InternalSwap(CloudTokenData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  suffix_.Swap(&other->suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  art_fife_url_.Swap(&other->art_fife_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instrument_token_.Swap(&other->instrument_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exp_month_, other->exp_month_);
  swap(exp_year_, other->exp_year_);
}

std::string CloudTokenData::GetTypeName() const {
  return "sync_pb.CloudTokenData";
}


// ===================================================================

void WalletMaskedCreditCard::InitAsDefaultInstance() {
  ::sync_pb::_WalletMaskedCreditCard_default_instance_._instance.get_mutable()->cloud_token_data_ = const_cast< ::sync_pb::CloudTokenData*>(
      ::sync_pb::CloudTokenData::internal_default_instance());
}
class WalletMaskedCreditCard::_Internal {
 public:
  using HasBits = decltype(std::declval<WalletMaskedCreditCard>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name_on_card(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_four(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exp_month(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_exp_year(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_billing_address_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bank_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::CloudTokenData& cloud_token_data(const WalletMaskedCreditCard* msg);
  static void set_has_cloud_token_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::sync_pb::CloudTokenData&
WalletMaskedCreditCard::_Internal::cloud_token_data(const WalletMaskedCreditCard* msg) {
  return *msg->cloud_token_data_;
}
WalletMaskedCreditCard::WalletMaskedCreditCard()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.WalletMaskedCreditCard)
}
WalletMaskedCreditCard::WalletMaskedCreditCard(const WalletMaskedCreditCard& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_on_card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name_on_card()) {
    name_on_card_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_on_card_);
  }
  last_four_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_four()) {
    last_four_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_four_);
  }
  billing_address_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_billing_address_id()) {
    billing_address_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.billing_address_id_);
  }
  bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_bank_name()) {
    bank_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bank_name_);
  }
  if (from.has_cloud_token_data()) {
    cloud_token_data_ = new ::sync_pb::CloudTokenData(*from.cloud_token_data_);
  } else {
    cloud_token_data_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_year_) -
    reinterpret_cast<char*>(&status_)) + sizeof(exp_year_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WalletMaskedCreditCard)
}

void WalletMaskedCreditCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WalletMaskedCreditCard_autofill_5fspecifics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_on_card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_four_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  billing_address_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cloud_token_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_year_) -
      reinterpret_cast<char*>(&cloud_token_data_)) + sizeof(exp_year_));
}

WalletMaskedCreditCard::~WalletMaskedCreditCard() {
  // @@protoc_insertion_point(destructor:sync_pb.WalletMaskedCreditCard)
  SharedDtor();
}

void WalletMaskedCreditCard::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_on_card_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_four_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  billing_address_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cloud_token_data_;
}

void WalletMaskedCreditCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletMaskedCreditCard& WalletMaskedCreditCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WalletMaskedCreditCard_autofill_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void WalletMaskedCreditCard::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WalletMaskedCreditCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_on_card_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      last_four_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      billing_address_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      bank_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cloud_token_data_ != nullptr);
      cloud_token_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&status_)) + sizeof(type_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&exp_month_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_year_) -
        reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WalletMaskedCreditCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WalletMaskedCreditCard_WalletCardStatus_IsValid(val))) {
            set_status(static_cast<::sync_pb::WalletMaskedCreditCard_WalletCardStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string name_on_card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name_on_card(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WalletMaskedCreditCard_WalletCardType_IsValid(val))) {
            set_type(static_cast<::sync_pb::WalletMaskedCreditCard_WalletCardType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string last_four = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_last_four(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exp_month = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_exp_month(&has_bits);
          exp_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exp_year = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_exp_year(&has_bits);
          exp_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string billing_address_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_billing_address_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bank_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_bank_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.CloudTokenData cloud_token_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_cloud_token_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WalletMaskedCreditCard::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.WalletMaskedCreditCard)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WalletMaskedCreditCard_WalletCardStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::WalletMaskedCreditCard_WalletCardStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name_on_card = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name_on_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WalletMaskedCreditCard_WalletCardType_IsValid(value)) {
            set_type(static_cast< ::sync_pb::WalletMaskedCreditCard_WalletCardType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_four = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_four()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exp_month = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_exp_month(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exp_year = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_exp_year(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string billing_address_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_billing_address_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bank_name = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.CloudTokenData cloud_token_data = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cloud_token_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.WalletMaskedCreditCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.WalletMaskedCreditCard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WalletMaskedCreditCard::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.WalletMaskedCreditCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional string name_on_card = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name_on_card(), output);
  }

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string last_four = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->last_four(), output);
  }

  // optional int32 exp_month = 6;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->exp_month(), output);
  }

  // optional int32 exp_year = 7;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->exp_year(), output);
  }

  // optional string billing_address_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->billing_address_id(), output);
  }

  // optional string bank_name = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->bank_name(), output);
  }

  // optional .sync_pb.CloudTokenData cloud_token_data = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::cloud_token_data(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.WalletMaskedCreditCard)
}

size_t WalletMaskedCreditCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletMaskedCreditCard)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name_on_card = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name_on_card());
    }

    // optional string last_four = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->last_four());
    }

    // optional string billing_address_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->billing_address_id());
    }

    // optional string bank_name = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->bank_name());
    }

    // optional .sync_pb.CloudTokenData cloud_token_data = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloud_token_data_);
    }

    // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 exp_month = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->exp_month());
    }

    // optional int32 exp_year = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->exp_year());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletMaskedCreditCard::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WalletMaskedCreditCard*>(
      &from));
}

void WalletMaskedCreditCard::MergeFrom(const WalletMaskedCreditCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletMaskedCreditCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_on_card_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_on_card_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      last_four_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_four_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      billing_address_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.billing_address_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      bank_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bank_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_cloud_token_data()->::sync_pb::CloudTokenData::MergeFrom(from.cloud_token_data());
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      exp_month_ = from.exp_month_;
    }
    if (cached_has_bits & 0x00000200u) {
      exp_year_ = from.exp_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WalletMaskedCreditCard::CopyFrom(const WalletMaskedCreditCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletMaskedCreditCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletMaskedCreditCard::IsInitialized() const {
  return true;
}

void WalletMaskedCreditCard::InternalSwap(WalletMaskedCreditCard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_on_card_.Swap(&other->name_on_card_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_four_.Swap(&other->last_four_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  billing_address_id_.Swap(&other->billing_address_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_name_.Swap(&other->bank_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cloud_token_data_, other->cloud_token_data_);
  swap(status_, other->status_);
  swap(type_, other->type_);
  swap(exp_month_, other->exp_month_);
  swap(exp_year_, other->exp_year_);
}

std::string WalletMaskedCreditCard::GetTypeName() const {
  return "sync_pb.WalletMaskedCreditCard";
}


// ===================================================================

void WalletPostalAddress::InitAsDefaultInstance() {
}
class WalletPostalAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<WalletPostalAddress>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recipient_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_company_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_address_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_address_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_address_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_address_4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_postal_code(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sorting_code(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_phone_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

WalletPostalAddress::WalletPostalAddress()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.WalletPostalAddress)
}
WalletPostalAddress::WalletPostalAddress(const WalletPostalAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      street_address_(from.street_address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_company_name()) {
    company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  address_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_1()) {
    address_1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_1_);
  }
  address_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_2()) {
    address_2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_2_);
  }
  address_3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_3()) {
    address_3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_3_);
  }
  address_4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_address_4()) {
    address_4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_4_);
  }
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_postal_code()) {
    postal_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  sorting_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sorting_code()) {
    sorting_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sorting_code_);
  }
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_language_code()) {
    language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  recipient_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_recipient_name()) {
    recipient_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_name_);
  }
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_phone_number()) {
    phone_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_number_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.WalletPostalAddress)
}

void WalletPostalAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WalletPostalAddress_autofill_5fspecifics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sorting_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WalletPostalAddress::~WalletPostalAddress() {
  // @@protoc_insertion_point(destructor:sync_pb.WalletPostalAddress)
  SharedDtor();
}

void WalletPostalAddress::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sorting_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WalletPostalAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletPostalAddress& WalletPostalAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WalletPostalAddress_autofill_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void WalletPostalAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WalletPostalAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  street_address_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      company_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      address_1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      address_2_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      address_3_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      address_4_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      postal_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      sorting_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      language_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      recipient_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      phone_number_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WalletPostalAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string company_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_company_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string street_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_street_address(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional string address_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_1(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_3(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address_4(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string postal_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_postal_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sorting_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sorting_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_country_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_language_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string recipient_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_recipient_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string phone_number = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_phone_number(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WalletPostalAddress::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.WalletPostalAddress)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string company_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_company_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string street_address = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_street_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_1 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_2 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_3 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string address_4 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address_4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string postal_code = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sorting_code = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sorting_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language_code = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string recipient_name = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_recipient_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phone_number = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.WalletPostalAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.WalletPostalAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WalletPostalAddress::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.WalletPostalAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string company_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->company_name(), output);
  }

  // repeated string street_address = 3;
  for (int i = 0, n = this->street_address_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->street_address(i), output);
  }

  // optional string address_1 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address_1(), output);
  }

  // optional string address_2 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->address_2(), output);
  }

  // optional string address_3 = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->address_3(), output);
  }

  // optional string address_4 = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->address_4(), output);
  }

  // optional string postal_code = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->postal_code(), output);
  }

  // optional string sorting_code = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sorting_code(), output);
  }

  // optional string country_code = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->country_code(), output);
  }

  // optional string language_code = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->language_code(), output);
  }

  // optional string recipient_name = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->recipient_name(), output);
  }

  // optional string phone_number = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->phone_number(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.WalletPostalAddress)
}

size_t WalletPostalAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletPostalAddress)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string street_address = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->street_address_size());
  for (int i = 0, n = this->street_address_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->street_address(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string company_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->company_name());
    }

    // optional string address_1 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_1());
    }

    // optional string address_2 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_2());
    }

    // optional string address_3 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_3());
    }

    // optional string address_4 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->address_4());
    }

    // optional string postal_code = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->postal_code());
    }

    // optional string sorting_code = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->sorting_code());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional string country_code = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string language_code = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->language_code());
    }

    // optional string recipient_name = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->recipient_name());
    }

    // optional string phone_number = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->phone_number());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletPostalAddress::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WalletPostalAddress*>(
      &from));
}

void WalletPostalAddress::MergeFrom(const WalletPostalAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletPostalAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  street_address_.MergeFrom(from.street_address_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      company_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.company_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      address_1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_1_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      address_2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_2_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      address_3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_3_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      address_4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_4_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      postal_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      sorting_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sorting_code_);
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      country_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      recipient_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_name_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      phone_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_number_);
    }
  }
}

void WalletPostalAddress::CopyFrom(const WalletPostalAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletPostalAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletPostalAddress::IsInitialized() const {
  return true;
}

void WalletPostalAddress::InternalSwap(WalletPostalAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  street_address_.InternalSwap(CastToBase(&other->street_address_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_1_.Swap(&other->address_1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_2_.Swap(&other->address_2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_3_.Swap(&other->address_3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_4_.Swap(&other->address_4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  postal_code_.Swap(&other->postal_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sorting_code_.Swap(&other->sorting_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recipient_name_.Swap(&other->recipient_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_number_.Swap(&other->phone_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string WalletPostalAddress::GetTypeName() const {
  return "sync_pb.WalletPostalAddress";
}


// ===================================================================

void PaymentsCustomerData::InitAsDefaultInstance() {
}
class PaymentsCustomerData::_Internal {
 public:
  using HasBits = decltype(std::declval<PaymentsCustomerData>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PaymentsCustomerData::PaymentsCustomerData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.PaymentsCustomerData)
}
PaymentsCustomerData::PaymentsCustomerData(const PaymentsCustomerData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.PaymentsCustomerData)
}

void PaymentsCustomerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentsCustomerData_autofill_5fspecifics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PaymentsCustomerData::~PaymentsCustomerData() {
  // @@protoc_insertion_point(destructor:sync_pb.PaymentsCustomerData)
  SharedDtor();
}

void PaymentsCustomerData::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaymentsCustomerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentsCustomerData& PaymentsCustomerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentsCustomerData_autofill_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void PaymentsCustomerData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.PaymentsCustomerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PaymentsCustomerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PaymentsCustomerData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.PaymentsCustomerData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.PaymentsCustomerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.PaymentsCustomerData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PaymentsCustomerData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.PaymentsCustomerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.PaymentsCustomerData)
}

size_t PaymentsCustomerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.PaymentsCustomerData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentsCustomerData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PaymentsCustomerData*>(
      &from));
}

void PaymentsCustomerData::MergeFrom(const PaymentsCustomerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PaymentsCustomerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _has_bits_[0] |= 0x00000001u;
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void PaymentsCustomerData::CopyFrom(const PaymentsCustomerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PaymentsCustomerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentsCustomerData::IsInitialized() const {
  return true;
}

void PaymentsCustomerData::InternalSwap(PaymentsCustomerData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string PaymentsCustomerData::GetTypeName() const {
  return "sync_pb.PaymentsCustomerData";
}


// ===================================================================

void WalletCreditCardCloudTokenData::InitAsDefaultInstance() {
}
class WalletCreditCardCloudTokenData::_Internal {
 public:
  using HasBits = decltype(std::declval<WalletCreditCardCloudTokenData>()._has_bits_);
  static void set_has_masked_card_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exp_month(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_exp_year(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_art_fife_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_instrument_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

WalletCreditCardCloudTokenData::WalletCreditCardCloudTokenData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.WalletCreditCardCloudTokenData)
}
WalletCreditCardCloudTokenData::WalletCreditCardCloudTokenData(const WalletCreditCardCloudTokenData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  masked_card_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_masked_card_id()) {
    masked_card_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.masked_card_id_);
  }
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_suffix()) {
    suffix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  art_fife_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_art_fife_url()) {
    art_fife_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.art_fife_url_);
  }
  instrument_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_instrument_token()) {
    instrument_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrument_token_);
  }
  ::memcpy(&exp_month_, &from.exp_month_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_year_) -
    reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WalletCreditCardCloudTokenData)
}

void WalletCreditCardCloudTokenData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WalletCreditCardCloudTokenData_autofill_5fspecifics_2eproto.base);
  masked_card_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  art_fife_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exp_month_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_year_) -
      reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
}

WalletCreditCardCloudTokenData::~WalletCreditCardCloudTokenData() {
  // @@protoc_insertion_point(destructor:sync_pb.WalletCreditCardCloudTokenData)
  SharedDtor();
}

void WalletCreditCardCloudTokenData::SharedDtor() {
  masked_card_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  art_fife_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WalletCreditCardCloudTokenData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletCreditCardCloudTokenData& WalletCreditCardCloudTokenData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WalletCreditCardCloudTokenData_autofill_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void WalletCreditCardCloudTokenData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WalletCreditCardCloudTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      masked_card_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      suffix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      art_fife_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      instrument_token_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&exp_month_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_year_) -
        reinterpret_cast<char*>(&exp_month_)) + sizeof(exp_year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WalletCreditCardCloudTokenData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string masked_card_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_masked_card_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string suffix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_suffix(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exp_month = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_exp_month(&has_bits);
          exp_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exp_year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_exp_year(&has_bits);
          exp_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string art_fife_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_art_fife_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string instrument_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_instrument_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WalletCreditCardCloudTokenData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.WalletCreditCardCloudTokenData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string masked_card_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_masked_card_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string suffix = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exp_month = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_exp_month(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exp_year = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_exp_year(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string art_fife_url = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_art_fife_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string instrument_token = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.WalletCreditCardCloudTokenData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.WalletCreditCardCloudTokenData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WalletCreditCardCloudTokenData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.WalletCreditCardCloudTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string masked_card_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->masked_card_id(), output);
  }

  // optional string suffix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->suffix(), output);
  }

  // optional int32 exp_month = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->exp_month(), output);
  }

  // optional int32 exp_year = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->exp_year(), output);
  }

  // optional string art_fife_url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->art_fife_url(), output);
  }

  // optional string instrument_token = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->instrument_token(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.WalletCreditCardCloudTokenData)
}

size_t WalletCreditCardCloudTokenData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletCreditCardCloudTokenData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string masked_card_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->masked_card_id());
    }

    // optional string suffix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional string art_fife_url = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->art_fife_url());
    }

    // optional string instrument_token = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->instrument_token());
    }

    // optional int32 exp_month = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->exp_month());
    }

    // optional int32 exp_year = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->exp_year());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletCreditCardCloudTokenData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WalletCreditCardCloudTokenData*>(
      &from));
}

void WalletCreditCardCloudTokenData::MergeFrom(const WalletCreditCardCloudTokenData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletCreditCardCloudTokenData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      masked_card_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.masked_card_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      suffix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.suffix_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      art_fife_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.art_fife_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      instrument_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrument_token_);
    }
    if (cached_has_bits & 0x00000010u) {
      exp_month_ = from.exp_month_;
    }
    if (cached_has_bits & 0x00000020u) {
      exp_year_ = from.exp_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WalletCreditCardCloudTokenData::CopyFrom(const WalletCreditCardCloudTokenData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletCreditCardCloudTokenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletCreditCardCloudTokenData::IsInitialized() const {
  return true;
}

void WalletCreditCardCloudTokenData::InternalSwap(WalletCreditCardCloudTokenData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  masked_card_id_.Swap(&other->masked_card_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  suffix_.Swap(&other->suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  art_fife_url_.Swap(&other->art_fife_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instrument_token_.Swap(&other->instrument_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exp_month_, other->exp_month_);
  swap(exp_year_, other->exp_year_);
}

std::string WalletCreditCardCloudTokenData::GetTypeName() const {
  return "sync_pb.WalletCreditCardCloudTokenData";
}


// ===================================================================

void AutofillWalletSpecifics::InitAsDefaultInstance() {
  ::sync_pb::_AutofillWalletSpecifics_default_instance_._instance.get_mutable()->masked_card_ = const_cast< ::sync_pb::WalletMaskedCreditCard*>(
      ::sync_pb::WalletMaskedCreditCard::internal_default_instance());
  ::sync_pb::_AutofillWalletSpecifics_default_instance_._instance.get_mutable()->address_ = const_cast< ::sync_pb::WalletPostalAddress*>(
      ::sync_pb::WalletPostalAddress::internal_default_instance());
  ::sync_pb::_AutofillWalletSpecifics_default_instance_._instance.get_mutable()->customer_data_ = const_cast< ::sync_pb::PaymentsCustomerData*>(
      ::sync_pb::PaymentsCustomerData::internal_default_instance());
  ::sync_pb::_AutofillWalletSpecifics_default_instance_._instance.get_mutable()->cloud_token_data_ = const_cast< ::sync_pb::WalletCreditCardCloudTokenData*>(
      ::sync_pb::WalletCreditCardCloudTokenData::internal_default_instance());
}
class AutofillWalletSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillWalletSpecifics>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::WalletMaskedCreditCard& masked_card(const AutofillWalletSpecifics* msg);
  static void set_has_masked_card(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::WalletPostalAddress& address(const AutofillWalletSpecifics* msg);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::PaymentsCustomerData& customer_data(const AutofillWalletSpecifics* msg);
  static void set_has_customer_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::WalletCreditCardCloudTokenData& cloud_token_data(const AutofillWalletSpecifics* msg);
  static void set_has_cloud_token_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sync_pb::WalletMaskedCreditCard&
AutofillWalletSpecifics::_Internal::masked_card(const AutofillWalletSpecifics* msg) {
  return *msg->masked_card_;
}
const ::sync_pb::WalletPostalAddress&
AutofillWalletSpecifics::_Internal::address(const AutofillWalletSpecifics* msg) {
  return *msg->address_;
}
const ::sync_pb::PaymentsCustomerData&
AutofillWalletSpecifics::_Internal::customer_data(const AutofillWalletSpecifics* msg) {
  return *msg->customer_data_;
}
const ::sync_pb::WalletCreditCardCloudTokenData&
AutofillWalletSpecifics::_Internal::cloud_token_data(const AutofillWalletSpecifics* msg) {
  return *msg->cloud_token_data_;
}
AutofillWalletSpecifics::AutofillWalletSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.AutofillWalletSpecifics)
}
AutofillWalletSpecifics::AutofillWalletSpecifics(const AutofillWalletSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_masked_card()) {
    masked_card_ = new ::sync_pb::WalletMaskedCreditCard(*from.masked_card_);
  } else {
    masked_card_ = nullptr;
  }
  if (from.has_address()) {
    address_ = new ::sync_pb::WalletPostalAddress(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from.has_customer_data()) {
    customer_data_ = new ::sync_pb::PaymentsCustomerData(*from.customer_data_);
  } else {
    customer_data_ = nullptr;
  }
  if (from.has_cloud_token_data()) {
    cloud_token_data_ = new ::sync_pb::WalletCreditCardCloudTokenData(*from.cloud_token_data_);
  } else {
    cloud_token_data_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillWalletSpecifics)
}

void AutofillWalletSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutofillWalletSpecifics_autofill_5fspecifics_2eproto.base);
  ::memset(&masked_card_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&masked_card_)) + sizeof(type_));
}

AutofillWalletSpecifics::~AutofillWalletSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillWalletSpecifics)
  SharedDtor();
}

void AutofillWalletSpecifics::SharedDtor() {
  if (this != internal_default_instance()) delete masked_card_;
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete customer_data_;
  if (this != internal_default_instance()) delete cloud_token_data_;
}

void AutofillWalletSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutofillWalletSpecifics& AutofillWalletSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutofillWalletSpecifics_autofill_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void AutofillWalletSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillWalletSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(masked_card_ != nullptr);
      masked_card_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(address_ != nullptr);
      address_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(customer_data_ != nullptr);
      customer_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cloud_token_data_ != nullptr);
      cloud_token_data_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutofillWalletSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AutofillWalletSpecifics_WalletInfoType_IsValid(val))) {
            set_type(static_cast<::sync_pb::AutofillWalletSpecifics_WalletInfoType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_masked_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WalletPostalAddress address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.PaymentsCustomerData customer_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_customer_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cloud_token_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutofillWalletSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.AutofillWalletSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::AutofillWalletSpecifics_WalletInfoType_IsValid(value)) {
            set_type(static_cast< ::sync_pb::AutofillWalletSpecifics_WalletInfoType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_masked_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WalletPostalAddress address = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PaymentsCustomerData customer_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_customer_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cloud_token_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.AutofillWalletSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.AutofillWalletSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutofillWalletSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.AutofillWalletSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::masked_card(this), output);
  }

  // optional .sync_pb.WalletPostalAddress address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::address(this), output);
  }

  // optional .sync_pb.PaymentsCustomerData customer_data = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::customer_data(this), output);
  }

  // optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::cloud_token_data(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.AutofillWalletSpecifics)
}

size_t AutofillWalletSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillWalletSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *masked_card_);
    }

    // optional .sync_pb.WalletPostalAddress address = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_);
    }

    // optional .sync_pb.PaymentsCustomerData customer_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_data_);
    }

    // optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloud_token_data_);
    }

    // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillWalletSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AutofillWalletSpecifics*>(
      &from));
}

void AutofillWalletSpecifics::MergeFrom(const AutofillWalletSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillWalletSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_masked_card()->::sync_pb::WalletMaskedCreditCard::MergeFrom(from.masked_card());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_address()->::sync_pb::WalletPostalAddress::MergeFrom(from.address());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_customer_data()->::sync_pb::PaymentsCustomerData::MergeFrom(from.customer_data());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_cloud_token_data()->::sync_pb::WalletCreditCardCloudTokenData::MergeFrom(from.cloud_token_data());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutofillWalletSpecifics::CopyFrom(const AutofillWalletSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillWalletSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillWalletSpecifics::IsInitialized() const {
  return true;
}

void AutofillWalletSpecifics::InternalSwap(AutofillWalletSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(masked_card_, other->masked_card_);
  swap(address_, other->address_);
  swap(customer_data_, other->customer_data_);
  swap(cloud_token_data_, other->cloud_token_data_);
  swap(type_, other->type_);
}

std::string AutofillWalletSpecifics::GetTypeName() const {
  return "sync_pb.AutofillWalletSpecifics";
}


// ===================================================================

void WalletMetadataSpecifics::InitAsDefaultInstance() {
}
class WalletMetadataSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<WalletMetadataSpecifics>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_card_billing_address_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_address_has_converted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

WalletMetadataSpecifics::WalletMetadataSpecifics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.WalletMetadataSpecifics)
}
WalletMetadataSpecifics::WalletMetadataSpecifics(const WalletMetadataSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  card_billing_address_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_billing_address_id()) {
    card_billing_address_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.card_billing_address_id_);
  }
  ::memcpy(&use_count_, &from.use_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_date_) -
    reinterpret_cast<char*>(&use_count_)) + sizeof(use_date_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WalletMetadataSpecifics)
}

void WalletMetadataSpecifics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WalletMetadataSpecifics_autofill_5fspecifics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_billing_address_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_date_) -
      reinterpret_cast<char*>(&use_count_)) + sizeof(use_date_));
}

WalletMetadataSpecifics::~WalletMetadataSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.WalletMetadataSpecifics)
  SharedDtor();
}

void WalletMetadataSpecifics::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_billing_address_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WalletMetadataSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletMetadataSpecifics& WalletMetadataSpecifics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WalletMetadataSpecifics_autofill_5fspecifics_2eproto.base);
  return *internal_default_instance();
}


void WalletMetadataSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WalletMetadataSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      card_billing_address_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&use_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_date_) -
        reinterpret_cast<char*>(&use_count_)) + sizeof(use_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WalletMetadataSpecifics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WalletMetadataSpecifics_Type_IsValid(val))) {
            set_type(static_cast<::sync_pb::WalletMetadataSpecifics_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 use_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_count(&has_bits);
          use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 use_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_date(&has_bits);
          use_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string card_billing_address_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_card_billing_address_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool address_has_converted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_address_has_converted(&has_bits);
          address_has_converted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WalletMetadataSpecifics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.WalletMetadataSpecifics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::WalletMetadataSpecifics_Type_IsValid(value)) {
            set_type(static_cast< ::sync_pb::WalletMetadataSpecifics_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 use_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_use_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 use_date = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_use_date(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string card_billing_address_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_card_billing_address_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool address_has_converted = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_address_has_converted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &address_has_converted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.WalletMetadataSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.WalletMetadataSpecifics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WalletMetadataSpecifics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.WalletMetadataSpecifics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional int64 use_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->use_count(), output);
  }

  // optional int64 use_date = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->use_date(), output);
  }

  // optional string card_billing_address_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->card_billing_address_id(), output);
  }

  // optional bool address_has_converted = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->address_has_converted(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.WalletMetadataSpecifics)
}

size_t WalletMetadataSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletMetadataSpecifics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string card_billing_address_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->card_billing_address_id());
    }

    // optional int64 use_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->use_count());
    }

    // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool address_has_converted = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int64 use_date = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->use_date());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletMetadataSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WalletMetadataSpecifics*>(
      &from));
}

void WalletMetadataSpecifics::MergeFrom(const WalletMetadataSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletMetadataSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      card_billing_address_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.card_billing_address_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      use_count_ = from.use_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      address_has_converted_ = from.address_has_converted_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_date_ = from.use_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WalletMetadataSpecifics::CopyFrom(const WalletMetadataSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletMetadataSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletMetadataSpecifics::IsInitialized() const {
  return true;
}

void WalletMetadataSpecifics::InternalSwap(WalletMetadataSpecifics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  card_billing_address_id_.Swap(&other->card_billing_address_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(use_count_, other->use_count_);
  swap(type_, other->type_);
  swap(address_has_converted_, other->address_has_converted_);
  swap(use_date_, other->use_date_);
}

std::string WalletMetadataSpecifics::GetTypeName() const {
  return "sync_pb.WalletMetadataSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillProfileSpecifics* Arena::CreateMaybeMessage< ::sync_pb::AutofillProfileSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::AutofillProfileSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillSpecifics* Arena::CreateMaybeMessage< ::sync_pb::AutofillSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::AutofillSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::CloudTokenData* Arena::CreateMaybeMessage< ::sync_pb::CloudTokenData >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::CloudTokenData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WalletMaskedCreditCard* Arena::CreateMaybeMessage< ::sync_pb::WalletMaskedCreditCard >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::WalletMaskedCreditCard >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WalletPostalAddress* Arena::CreateMaybeMessage< ::sync_pb::WalletPostalAddress >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::WalletPostalAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::PaymentsCustomerData* Arena::CreateMaybeMessage< ::sync_pb::PaymentsCustomerData >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::PaymentsCustomerData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WalletCreditCardCloudTokenData* Arena::CreateMaybeMessage< ::sync_pb::WalletCreditCardCloudTokenData >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::WalletCreditCardCloudTokenData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillWalletSpecifics* Arena::CreateMaybeMessage< ::sync_pb::AutofillWalletSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::AutofillWalletSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WalletMetadataSpecifics* Arena::CreateMaybeMessage< ::sync_pb::WalletMetadataSpecifics >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::WalletMetadataSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
