// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loopback_server.proto

#include "loopback_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_loopback_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoopbackServerEntity_loopback_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SyncEntity_sync_2eproto;
namespace sync_pb {
class LoopbackServerEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoopbackServerEntity> _instance;
} _LoopbackServerEntity_default_instance_;
class LoopbackServerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoopbackServerProto> _instance;
} _LoopbackServerProto_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_LoopbackServerEntity_loopback_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_LoopbackServerEntity_default_instance_;
    new (ptr) ::sync_pb::LoopbackServerEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::LoopbackServerEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoopbackServerEntity_loopback_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LoopbackServerEntity_loopback_5fserver_2eproto}, {
      &scc_info_SyncEntity_sync_2eproto.base,}};

static void InitDefaultsscc_info_LoopbackServerProto_loopback_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_LoopbackServerProto_default_instance_;
    new (ptr) ::sync_pb::LoopbackServerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::LoopbackServerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoopbackServerProto_loopback_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LoopbackServerProto_loopback_5fserver_2eproto}, {
      &scc_info_LoopbackServerEntity_loopback_5fserver_2eproto.base,}};

namespace sync_pb {
bool LoopbackServerEntity_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoopbackServerEntity_Type_strings[5] = {};

static const char LoopbackServerEntity_Type_names[] =
  "BOOKMARK"
  "PERMANENT"
  "TOMBSTONE"
  "UNIQUE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoopbackServerEntity_Type_entries[] = {
  { {LoopbackServerEntity_Type_names + 0, 8}, 1 },
  { {LoopbackServerEntity_Type_names + 8, 9}, 2 },
  { {LoopbackServerEntity_Type_names + 17, 9}, 3 },
  { {LoopbackServerEntity_Type_names + 26, 6}, 4 },
  { {LoopbackServerEntity_Type_names + 32, 7}, 0 },
};

static const int LoopbackServerEntity_Type_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  0, // 1 -> BOOKMARK
  1, // 2 -> PERMANENT
  2, // 3 -> TOMBSTONE
  3, // 4 -> UNIQUE
};

const std::string& LoopbackServerEntity_Type_Name(
    LoopbackServerEntity_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoopbackServerEntity_Type_entries,
          LoopbackServerEntity_Type_entries_by_number,
          5, LoopbackServerEntity_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoopbackServerEntity_Type_entries,
      LoopbackServerEntity_Type_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoopbackServerEntity_Type_strings[idx].get();
}
bool LoopbackServerEntity_Type_Parse(
    const std::string& name, LoopbackServerEntity_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoopbackServerEntity_Type_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<LoopbackServerEntity_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoopbackServerEntity_Type LoopbackServerEntity::UNKNOWN;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::BOOKMARK;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::PERMANENT;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::TOMBSTONE;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::UNIQUE;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::Type_MIN;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::Type_MAX;
constexpr int LoopbackServerEntity::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LoopbackServerEntity::InitAsDefaultInstance() {
  ::sync_pb::_LoopbackServerEntity_default_instance_._instance.get_mutable()->entity_ = const_cast< ::sync_pb::SyncEntity*>(
      ::sync_pb::SyncEntity::internal_default_instance());
}
class LoopbackServerEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopbackServerEntity>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::SyncEntity& entity(const LoopbackServerEntity* msg);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::SyncEntity&
LoopbackServerEntity::_Internal::entity(const LoopbackServerEntity* msg) {
  return *msg->entity_;
}
void LoopbackServerEntity::clear_entity() {
  if (entity_ != nullptr) entity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LoopbackServerEntity::LoopbackServerEntity()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.LoopbackServerEntity)
}
LoopbackServerEntity::LoopbackServerEntity(const LoopbackServerEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity()) {
    entity_ = new ::sync_pb::SyncEntity(*from.entity_);
  } else {
    entity_ = nullptr;
  }
  ::memcpy(&model_type_, &from.model_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&model_type_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.LoopbackServerEntity)
}

void LoopbackServerEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoopbackServerEntity_loopback_5fserver_2eproto.base);
  ::memset(&entity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&entity_)) + sizeof(type_));
}

LoopbackServerEntity::~LoopbackServerEntity() {
  // @@protoc_insertion_point(destructor:sync_pb.LoopbackServerEntity)
  SharedDtor();
}

void LoopbackServerEntity::SharedDtor() {
  if (this != internal_default_instance()) delete entity_;
}

void LoopbackServerEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoopbackServerEntity& LoopbackServerEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoopbackServerEntity_loopback_5fserver_2eproto.base);
  return *internal_default_instance();
}


void LoopbackServerEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LoopbackServerEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_ != nullptr);
    entity_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&model_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&model_type_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoopbackServerEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.LoopbackServerEntity.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::LoopbackServerEntity_Type_IsValid(val))) {
            set_type(static_cast<::sync_pb::LoopbackServerEntity_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_entity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 model_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_model_type(&has_bits);
          model_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoopbackServerEntity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.LoopbackServerEntity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.LoopbackServerEntity.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::LoopbackServerEntity_Type_IsValid(value)) {
            set_type(static_cast< ::sync_pb::LoopbackServerEntity_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEntity entity = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 model_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_model_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &model_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.LoopbackServerEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.LoopbackServerEntity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoopbackServerEntity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.LoopbackServerEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.LoopbackServerEntity.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .sync_pb.SyncEntity entity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::entity(this), output);
  }

  // optional int64 model_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->model_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.LoopbackServerEntity)
}

size_t LoopbackServerEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LoopbackServerEntity)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .sync_pb.SyncEntity entity = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_);
    }

    // optional int64 model_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->model_type());
    }

    // optional .sync_pb.LoopbackServerEntity.Type type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoopbackServerEntity::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoopbackServerEntity*>(
      &from));
}

void LoopbackServerEntity::MergeFrom(const LoopbackServerEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LoopbackServerEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_entity()->::sync_pb::SyncEntity::MergeFrom(from.entity());
    }
    if (cached_has_bits & 0x00000002u) {
      model_type_ = from.model_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoopbackServerEntity::CopyFrom(const LoopbackServerEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LoopbackServerEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopbackServerEntity::IsInitialized() const {
  return true;
}

void LoopbackServerEntity::InternalSwap(LoopbackServerEntity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entity_, other->entity_);
  swap(model_type_, other->model_type_);
  swap(type_, other->type_);
}

std::string LoopbackServerEntity::GetTypeName() const {
  return "sync_pb.LoopbackServerEntity";
}


// ===================================================================

void LoopbackServerProto::InitAsDefaultInstance() {
}
class LoopbackServerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopbackServerProto>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_store_birthday(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_version_assigned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LoopbackServerProto::LoopbackServerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.LoopbackServerProto)
}
LoopbackServerProto::LoopbackServerProto(const LoopbackServerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entities_(from.entities_),
      keystore_keys_(from.keystore_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_version_assigned_) -
    reinterpret_cast<char*>(&version_)) + sizeof(last_version_assigned_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.LoopbackServerProto)
}

void LoopbackServerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoopbackServerProto_loopback_5fserver_2eproto.base);
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_version_assigned_) -
      reinterpret_cast<char*>(&version_)) + sizeof(last_version_assigned_));
}

LoopbackServerProto::~LoopbackServerProto() {
  // @@protoc_insertion_point(destructor:sync_pb.LoopbackServerProto)
  SharedDtor();
}

void LoopbackServerProto::SharedDtor() {
}

void LoopbackServerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoopbackServerProto& LoopbackServerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoopbackServerProto_loopback_5fserver_2eproto.base);
  return *internal_default_instance();
}


void LoopbackServerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LoopbackServerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  keystore_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_version_assigned_) -
        reinterpret_cast<char*>(&version_)) + sizeof(last_version_assigned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoopbackServerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 store_birthday = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_store_birthday(&has_bits);
          store_birthday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.LoopbackServerEntity entities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated bytes keystore_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_keystore_keys(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional int64 last_version_assigned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_version_assigned(&has_bits);
          last_version_assigned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoopbackServerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.LoopbackServerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 store_birthday = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_store_birthday(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &store_birthday_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.LoopbackServerEntity entities = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes keystore_keys = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_keystore_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_version_assigned = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_last_version_assigned(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_version_assigned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.LoopbackServerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.LoopbackServerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoopbackServerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.LoopbackServerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // optional int64 store_birthday = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->store_birthday(), output);
  }

  // repeated .sync_pb.LoopbackServerEntity entities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->entities(static_cast<int>(i)),
      output);
  }

  // repeated bytes keystore_keys = 4;
  for (int i = 0, n = this->keystore_keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      4, this->keystore_keys(i), output);
  }

  // optional int64 last_version_assigned = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->last_version_assigned(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.LoopbackServerProto)
}

size_t LoopbackServerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LoopbackServerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.LoopbackServerEntity entities = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->entities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entities(static_cast<int>(i)));
    }
  }

  // repeated bytes keystore_keys = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->keystore_keys_size());
  for (int i = 0, n = this->keystore_keys_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->keystore_keys(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int64 store_birthday = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->store_birthday());
    }

    // optional int64 last_version_assigned = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_version_assigned());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoopbackServerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoopbackServerProto*>(
      &from));
}

void LoopbackServerProto::MergeFrom(const LoopbackServerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LoopbackServerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  keystore_keys_.MergeFrom(from.keystore_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      store_birthday_ = from.store_birthday_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_version_assigned_ = from.last_version_assigned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoopbackServerProto::CopyFrom(const LoopbackServerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LoopbackServerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopbackServerProto::IsInitialized() const {
  return true;
}

void LoopbackServerProto::InternalSwap(LoopbackServerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entities_)->InternalSwap(CastToBase(&other->entities_));
  keystore_keys_.InternalSwap(CastToBase(&other->keystore_keys_));
  swap(version_, other->version_);
  swap(store_birthday_, other->store_birthday_);
  swap(last_version_assigned_, other->last_version_assigned_);
}

std::string LoopbackServerProto::GetTypeName() const {
  return "sync_pb.LoopbackServerProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::LoopbackServerEntity* Arena::CreateMaybeMessage< ::sync_pb::LoopbackServerEntity >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::LoopbackServerEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::LoopbackServerProto* Arena::CreateMaybeMessage< ::sync_pb::LoopbackServerProto >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::LoopbackServerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
