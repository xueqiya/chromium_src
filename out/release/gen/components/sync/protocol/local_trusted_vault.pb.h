// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: local_trusted_vault.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_local_5ftrusted_5fvault_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_local_5ftrusted_5fvault_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_local_5ftrusted_5fvault_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_local_5ftrusted_5fvault_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class LocalTrustedVault;
class LocalTrustedVaultDefaultTypeInternal;
extern LocalTrustedVaultDefaultTypeInternal _LocalTrustedVault_default_instance_;
class LocalTrustedVaultKey;
class LocalTrustedVaultKeyDefaultTypeInternal;
extern LocalTrustedVaultKeyDefaultTypeInternal _LocalTrustedVaultKey_default_instance_;
class LocalTrustedVaultPerUser;
class LocalTrustedVaultPerUserDefaultTypeInternal;
extern LocalTrustedVaultPerUserDefaultTypeInternal _LocalTrustedVaultPerUser_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::LocalTrustedVault* Arena::CreateMaybeMessage<::sync_pb::LocalTrustedVault>(Arena*);
template<> ::sync_pb::LocalTrustedVaultKey* Arena::CreateMaybeMessage<::sync_pb::LocalTrustedVaultKey>(Arena*);
template<> ::sync_pb::LocalTrustedVaultPerUser* Arena::CreateMaybeMessage<::sync_pb::LocalTrustedVaultPerUser>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class LocalTrustedVaultKey :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LocalTrustedVaultKey) */ {
 public:
  LocalTrustedVaultKey();
  virtual ~LocalTrustedVaultKey();

  LocalTrustedVaultKey(const LocalTrustedVaultKey& from);
  LocalTrustedVaultKey(LocalTrustedVaultKey&& from) noexcept
    : LocalTrustedVaultKey() {
    *this = ::std::move(from);
  }

  inline LocalTrustedVaultKey& operator=(const LocalTrustedVaultKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTrustedVaultKey& operator=(LocalTrustedVaultKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LocalTrustedVaultKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalTrustedVaultKey* internal_default_instance() {
    return reinterpret_cast<const LocalTrustedVaultKey*>(
               &_LocalTrustedVaultKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocalTrustedVaultKey& a, LocalTrustedVaultKey& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalTrustedVaultKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalTrustedVaultKey* New() const final {
    return CreateMaybeMessage<LocalTrustedVaultKey>(nullptr);
  }

  LocalTrustedVaultKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalTrustedVaultKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LocalTrustedVaultKey& from);
  void MergeFrom(const LocalTrustedVaultKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalTrustedVaultKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LocalTrustedVaultKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyMaterialFieldNumber = 1,
  };
  // optional bytes key_material = 1;
  bool has_key_material() const;
  void clear_key_material();
  const std::string& key_material() const;
  void set_key_material(const std::string& value);
  void set_key_material(std::string&& value);
  void set_key_material(const char* value);
  void set_key_material(const void* value, size_t size);
  std::string* mutable_key_material();
  std::string* release_key_material();
  void set_allocated_key_material(std::string* key_material);

  // @@protoc_insertion_point(class_scope:sync_pb.LocalTrustedVaultKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_material_;
  friend struct ::TableStruct_local_5ftrusted_5fvault_2eproto;
};
// -------------------------------------------------------------------

class LocalTrustedVaultPerUser :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LocalTrustedVaultPerUser) */ {
 public:
  LocalTrustedVaultPerUser();
  virtual ~LocalTrustedVaultPerUser();

  LocalTrustedVaultPerUser(const LocalTrustedVaultPerUser& from);
  LocalTrustedVaultPerUser(LocalTrustedVaultPerUser&& from) noexcept
    : LocalTrustedVaultPerUser() {
    *this = ::std::move(from);
  }

  inline LocalTrustedVaultPerUser& operator=(const LocalTrustedVaultPerUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTrustedVaultPerUser& operator=(LocalTrustedVaultPerUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LocalTrustedVaultPerUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalTrustedVaultPerUser* internal_default_instance() {
    return reinterpret_cast<const LocalTrustedVaultPerUser*>(
               &_LocalTrustedVaultPerUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalTrustedVaultPerUser& a, LocalTrustedVaultPerUser& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalTrustedVaultPerUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalTrustedVaultPerUser* New() const final {
    return CreateMaybeMessage<LocalTrustedVaultPerUser>(nullptr);
  }

  LocalTrustedVaultPerUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalTrustedVaultPerUser>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LocalTrustedVaultPerUser& from);
  void MergeFrom(const LocalTrustedVaultPerUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalTrustedVaultPerUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LocalTrustedVaultPerUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kGaiaIdFieldNumber = 1,
    kLastKeyVersionFieldNumber = 3,
  };
  // repeated .sync_pb.LocalTrustedVaultKey key = 2;
  int key_size() const;
  void clear_key();
  ::sync_pb::LocalTrustedVaultKey* mutable_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultKey >*
      mutable_key();
  const ::sync_pb::LocalTrustedVaultKey& key(int index) const;
  ::sync_pb::LocalTrustedVaultKey* add_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultKey >&
      key() const;

  // optional bytes gaia_id = 1;
  bool has_gaia_id() const;
  void clear_gaia_id();
  const std::string& gaia_id() const;
  void set_gaia_id(const std::string& value);
  void set_gaia_id(std::string&& value);
  void set_gaia_id(const char* value);
  void set_gaia_id(const void* value, size_t size);
  std::string* mutable_gaia_id();
  std::string* release_gaia_id();
  void set_allocated_gaia_id(std::string* gaia_id);

  // optional int32 last_key_version = 3;
  bool has_last_key_version() const;
  void clear_last_key_version();
  ::PROTOBUF_NAMESPACE_ID::int32 last_key_version() const;
  void set_last_key_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.LocalTrustedVaultPerUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultKey > key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gaia_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_key_version_;
  friend struct ::TableStruct_local_5ftrusted_5fvault_2eproto;
};
// -------------------------------------------------------------------

class LocalTrustedVault :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LocalTrustedVault) */ {
 public:
  LocalTrustedVault();
  virtual ~LocalTrustedVault();

  LocalTrustedVault(const LocalTrustedVault& from);
  LocalTrustedVault(LocalTrustedVault&& from) noexcept
    : LocalTrustedVault() {
    *this = ::std::move(from);
  }

  inline LocalTrustedVault& operator=(const LocalTrustedVault& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTrustedVault& operator=(LocalTrustedVault&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LocalTrustedVault& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalTrustedVault* internal_default_instance() {
    return reinterpret_cast<const LocalTrustedVault*>(
               &_LocalTrustedVault_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalTrustedVault& a, LocalTrustedVault& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalTrustedVault* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalTrustedVault* New() const final {
    return CreateMaybeMessage<LocalTrustedVault>(nullptr);
  }

  LocalTrustedVault* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalTrustedVault>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LocalTrustedVault& from);
  void MergeFrom(const LocalTrustedVault& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalTrustedVault* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LocalTrustedVault";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
  int user_size() const;
  void clear_user();
  ::sync_pb::LocalTrustedVaultPerUser* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultPerUser >*
      mutable_user();
  const ::sync_pb::LocalTrustedVaultPerUser& user(int index) const;
  ::sync_pb::LocalTrustedVaultPerUser* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultPerUser >&
      user() const;

  // @@protoc_insertion_point(class_scope:sync_pb.LocalTrustedVault)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultPerUser > user_;
  friend struct ::TableStruct_local_5ftrusted_5fvault_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalTrustedVaultKey

// optional bytes key_material = 1;
inline bool LocalTrustedVaultKey::has_key_material() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalTrustedVaultKey::clear_key_material() {
  key_material_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalTrustedVaultKey::key_material() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultKey.key_material)
  return key_material_.GetNoArena();
}
inline void LocalTrustedVaultKey::set_key_material(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultKey.key_material)
}
inline void LocalTrustedVaultKey::set_key_material(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_material_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.LocalTrustedVaultKey.key_material)
}
inline void LocalTrustedVaultKey::set_key_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.LocalTrustedVaultKey.key_material)
}
inline void LocalTrustedVaultKey::set_key_material(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.LocalTrustedVaultKey.key_material)
}
inline std::string* LocalTrustedVaultKey::mutable_key_material() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalTrustedVaultKey.key_material)
  return key_material_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LocalTrustedVaultKey::release_key_material() {
  // @@protoc_insertion_point(field_release:sync_pb.LocalTrustedVaultKey.key_material)
  if (!has_key_material()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_material_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LocalTrustedVaultKey::set_allocated_key_material(std::string* key_material) {
  if (key_material != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_material_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_material);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.LocalTrustedVaultKey.key_material)
}

// -------------------------------------------------------------------

// LocalTrustedVaultPerUser

// optional bytes gaia_id = 1;
inline bool LocalTrustedVaultPerUser::has_gaia_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalTrustedVaultPerUser::clear_gaia_id() {
  gaia_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalTrustedVaultPerUser::gaia_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.gaia_id)
  return gaia_id_.GetNoArena();
}
inline void LocalTrustedVaultPerUser::set_gaia_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gaia_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultPerUser.gaia_id)
}
inline void LocalTrustedVaultPerUser::set_gaia_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gaia_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.LocalTrustedVaultPerUser.gaia_id)
}
inline void LocalTrustedVaultPerUser::set_gaia_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gaia_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.LocalTrustedVaultPerUser.gaia_id)
}
inline void LocalTrustedVaultPerUser::set_gaia_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gaia_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.LocalTrustedVaultPerUser.gaia_id)
}
inline std::string* LocalTrustedVaultPerUser::mutable_gaia_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalTrustedVaultPerUser.gaia_id)
  return gaia_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LocalTrustedVaultPerUser::release_gaia_id() {
  // @@protoc_insertion_point(field_release:sync_pb.LocalTrustedVaultPerUser.gaia_id)
  if (!has_gaia_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gaia_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LocalTrustedVaultPerUser::set_allocated_gaia_id(std::string* gaia_id) {
  if (gaia_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gaia_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gaia_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.LocalTrustedVaultPerUser.gaia_id)
}

// repeated .sync_pb.LocalTrustedVaultKey key = 2;
inline int LocalTrustedVaultPerUser::key_size() const {
  return key_.size();
}
inline void LocalTrustedVaultPerUser::clear_key() {
  key_.Clear();
}
inline ::sync_pb::LocalTrustedVaultKey* LocalTrustedVaultPerUser::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalTrustedVaultPerUser.key)
  return key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultKey >*
LocalTrustedVaultPerUser::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.LocalTrustedVaultPerUser.key)
  return &key_;
}
inline const ::sync_pb::LocalTrustedVaultKey& LocalTrustedVaultPerUser::key(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.key)
  return key_.Get(index);
}
inline ::sync_pb::LocalTrustedVaultKey* LocalTrustedVaultPerUser::add_key() {
  // @@protoc_insertion_point(field_add:sync_pb.LocalTrustedVaultPerUser.key)
  return key_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultKey >&
LocalTrustedVaultPerUser::key() const {
  // @@protoc_insertion_point(field_list:sync_pb.LocalTrustedVaultPerUser.key)
  return key_;
}

// optional int32 last_key_version = 3;
inline bool LocalTrustedVaultPerUser::has_last_key_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalTrustedVaultPerUser::clear_last_key_version() {
  last_key_version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalTrustedVaultPerUser::last_key_version() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.last_key_version)
  return last_key_version_;
}
inline void LocalTrustedVaultPerUser::set_last_key_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  last_key_version_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultPerUser.last_key_version)
}

// -------------------------------------------------------------------

// LocalTrustedVault

// repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
inline int LocalTrustedVault::user_size() const {
  return user_.size();
}
inline void LocalTrustedVault::clear_user() {
  user_.Clear();
}
inline ::sync_pb::LocalTrustedVaultPerUser* LocalTrustedVault::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalTrustedVault.user)
  return user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultPerUser >*
LocalTrustedVault::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.LocalTrustedVault.user)
  return &user_;
}
inline const ::sync_pb::LocalTrustedVaultPerUser& LocalTrustedVault::user(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVault.user)
  return user_.Get(index);
}
inline ::sync_pb::LocalTrustedVaultPerUser* LocalTrustedVault::add_user() {
  // @@protoc_insertion_point(field_add:sync_pb.LocalTrustedVault.user)
  return user_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultPerUser >&
LocalTrustedVault::user() const {
  // @@protoc_insertion_point(field_list:sync_pb.LocalTrustedVault.user)
  return user_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_local_5ftrusted_5fvault_2eproto
