// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_info_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_5finfo_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_device_5finfo_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "sync_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_device_5finfo_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_5finfo_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class DeviceInfoSpecifics;
class DeviceInfoSpecificsDefaultTypeInternal;
extern DeviceInfoSpecificsDefaultTypeInternal _DeviceInfoSpecifics_default_instance_;
class FeatureSpecificFields;
class FeatureSpecificFieldsDefaultTypeInternal;
extern FeatureSpecificFieldsDefaultTypeInternal _FeatureSpecificFields_default_instance_;
class SharingSpecificFields;
class SharingSpecificFieldsDefaultTypeInternal;
extern SharingSpecificFieldsDefaultTypeInternal _SharingSpecificFields_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::DeviceInfoSpecifics* Arena::CreateMaybeMessage<::sync_pb::DeviceInfoSpecifics>(Arena*);
template<> ::sync_pb::FeatureSpecificFields* Arena::CreateMaybeMessage<::sync_pb::FeatureSpecificFields>(Arena*);
template<> ::sync_pb::SharingSpecificFields* Arena::CreateMaybeMessage<::sync_pb::SharingSpecificFields>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum SharingSpecificFields_EnabledFeatures : int {
  SharingSpecificFields_EnabledFeatures_UNKNOWN = 0,
  SharingSpecificFields_EnabledFeatures_CLICK_TO_CALL_VAPID = 1,
  SharingSpecificFields_EnabledFeatures_SHARED_CLIPBOARD_VAPID = 2,
  SharingSpecificFields_EnabledFeatures_SMS_FETCHER = 3,
  SharingSpecificFields_EnabledFeatures_REMOTE_COPY = 4,
  SharingSpecificFields_EnabledFeatures_PEER_CONNECTION = 5,
  SharingSpecificFields_EnabledFeatures_DISCOVERY = 6,
  SharingSpecificFields_EnabledFeatures_CLICK_TO_CALL = 7,
  SharingSpecificFields_EnabledFeatures_SHARED_CLIPBOARD = 8
};
bool SharingSpecificFields_EnabledFeatures_IsValid(int value);
constexpr SharingSpecificFields_EnabledFeatures SharingSpecificFields_EnabledFeatures_EnabledFeatures_MIN = SharingSpecificFields_EnabledFeatures_UNKNOWN;
constexpr SharingSpecificFields_EnabledFeatures SharingSpecificFields_EnabledFeatures_EnabledFeatures_MAX = SharingSpecificFields_EnabledFeatures_SHARED_CLIPBOARD;
constexpr int SharingSpecificFields_EnabledFeatures_EnabledFeatures_ARRAYSIZE = SharingSpecificFields_EnabledFeatures_EnabledFeatures_MAX + 1;

const std::string& SharingSpecificFields_EnabledFeatures_Name(SharingSpecificFields_EnabledFeatures value);
template<typename T>
inline const std::string& SharingSpecificFields_EnabledFeatures_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SharingSpecificFields_EnabledFeatures>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SharingSpecificFields_EnabledFeatures_Name.");
  return SharingSpecificFields_EnabledFeatures_Name(static_cast<SharingSpecificFields_EnabledFeatures>(enum_t_value));
}
bool SharingSpecificFields_EnabledFeatures_Parse(
    const std::string& name, SharingSpecificFields_EnabledFeatures* value);
// ===================================================================

class DeviceInfoSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.DeviceInfoSpecifics) */ {
 public:
  DeviceInfoSpecifics();
  virtual ~DeviceInfoSpecifics();

  DeviceInfoSpecifics(const DeviceInfoSpecifics& from);
  DeviceInfoSpecifics(DeviceInfoSpecifics&& from) noexcept
    : DeviceInfoSpecifics() {
    *this = ::std::move(from);
  }

  inline DeviceInfoSpecifics& operator=(const DeviceInfoSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfoSpecifics& operator=(DeviceInfoSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DeviceInfoSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfoSpecifics* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoSpecifics*>(
               &_DeviceInfoSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceInfoSpecifics& a, DeviceInfoSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfoSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfoSpecifics* New() const final {
    return CreateMaybeMessage<DeviceInfoSpecifics>(nullptr);
  }

  DeviceInfoSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfoSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeviceInfoSpecifics& from);
  void MergeFrom(const DeviceInfoSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceInfoSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.DeviceInfoSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheGuidFieldNumber = 1,
    kClientNameFieldNumber = 2,
    kSyncUserAgentFieldNumber = 4,
    kChromeVersionFieldNumber = 5,
    kSigninScopedDeviceIdFieldNumber = 7,
    kModelFieldNumber = 11,
    kManufacturerFieldNumber = 12,
    kFeatureFieldsFieldNumber = 9,
    kSharingFieldsFieldNumber = 10,
    kDeprecatedBackupTimestampFieldNumber = 6,
    kLastUpdatedTimestampFieldNumber = 8,
    kDeviceTypeFieldNumber = 3,
    kPulseIntervalInMinutesFieldNumber = 13,
  };
  // optional string cache_guid = 1;
  bool has_cache_guid() const;
  void clear_cache_guid();
  const std::string& cache_guid() const;
  void set_cache_guid(const std::string& value);
  void set_cache_guid(std::string&& value);
  void set_cache_guid(const char* value);
  void set_cache_guid(const char* value, size_t size);
  std::string* mutable_cache_guid();
  std::string* release_cache_guid();
  void set_allocated_cache_guid(std::string* cache_guid);

  // optional string client_name = 2;
  bool has_client_name() const;
  void clear_client_name();
  const std::string& client_name() const;
  void set_client_name(const std::string& value);
  void set_client_name(std::string&& value);
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  std::string* mutable_client_name();
  std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);

  // optional string sync_user_agent = 4;
  bool has_sync_user_agent() const;
  void clear_sync_user_agent();
  const std::string& sync_user_agent() const;
  void set_sync_user_agent(const std::string& value);
  void set_sync_user_agent(std::string&& value);
  void set_sync_user_agent(const char* value);
  void set_sync_user_agent(const char* value, size_t size);
  std::string* mutable_sync_user_agent();
  std::string* release_sync_user_agent();
  void set_allocated_sync_user_agent(std::string* sync_user_agent);

  // optional string chrome_version = 5;
  bool has_chrome_version() const;
  void clear_chrome_version();
  const std::string& chrome_version() const;
  void set_chrome_version(const std::string& value);
  void set_chrome_version(std::string&& value);
  void set_chrome_version(const char* value);
  void set_chrome_version(const char* value, size_t size);
  std::string* mutable_chrome_version();
  std::string* release_chrome_version();
  void set_allocated_chrome_version(std::string* chrome_version);

  // optional string signin_scoped_device_id = 7;
  bool has_signin_scoped_device_id() const;
  void clear_signin_scoped_device_id();
  const std::string& signin_scoped_device_id() const;
  void set_signin_scoped_device_id(const std::string& value);
  void set_signin_scoped_device_id(std::string&& value);
  void set_signin_scoped_device_id(const char* value);
  void set_signin_scoped_device_id(const char* value, size_t size);
  std::string* mutable_signin_scoped_device_id();
  std::string* release_signin_scoped_device_id();
  void set_allocated_signin_scoped_device_id(std::string* signin_scoped_device_id);

  // optional string model = 11;
  bool has_model() const;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);

  // optional string manufacturer = 12;
  bool has_manufacturer() const;
  void clear_manufacturer();
  const std::string& manufacturer() const;
  void set_manufacturer(const std::string& value);
  void set_manufacturer(std::string&& value);
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  std::string* mutable_manufacturer();
  std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);

  // optional .sync_pb.FeatureSpecificFields feature_fields = 9;
  bool has_feature_fields() const;
  void clear_feature_fields();
  const ::sync_pb::FeatureSpecificFields& feature_fields() const;
  ::sync_pb::FeatureSpecificFields* release_feature_fields();
  ::sync_pb::FeatureSpecificFields* mutable_feature_fields();
  void set_allocated_feature_fields(::sync_pb::FeatureSpecificFields* feature_fields);

  // optional .sync_pb.SharingSpecificFields sharing_fields = 10;
  bool has_sharing_fields() const;
  void clear_sharing_fields();
  const ::sync_pb::SharingSpecificFields& sharing_fields() const;
  ::sync_pb::SharingSpecificFields* release_sharing_fields();
  ::sync_pb::SharingSpecificFields* mutable_sharing_fields();
  void set_allocated_sharing_fields(::sync_pb::SharingSpecificFields* sharing_fields);

  // optional int64 deprecated_backup_timestamp = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_backup_timestamp() const;
  PROTOBUF_DEPRECATED void clear_deprecated_backup_timestamp();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 deprecated_backup_timestamp() const;
  PROTOBUF_DEPRECATED void set_deprecated_backup_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_updated_timestamp = 8;
  bool has_last_updated_timestamp() const;
  void clear_last_updated_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_updated_timestamp() const;
  void set_last_updated_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .sync_pb.SyncEnums.DeviceType device_type = 3;
  bool has_device_type() const;
  void clear_device_type();
  ::sync_pb::SyncEnums_DeviceType device_type() const;
  void set_device_type(::sync_pb::SyncEnums_DeviceType value);

  // optional int32 pulse_interval_in_minutes = 13;
  bool has_pulse_interval_in_minutes() const;
  void clear_pulse_interval_in_minutes();
  ::PROTOBUF_NAMESPACE_ID::int32 pulse_interval_in_minutes() const;
  void set_pulse_interval_in_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.DeviceInfoSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sync_user_agent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chrome_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signin_scoped_device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::sync_pb::FeatureSpecificFields* feature_fields_;
  ::sync_pb::SharingSpecificFields* sharing_fields_;
  ::PROTOBUF_NAMESPACE_ID::int64 deprecated_backup_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_updated_timestamp_;
  int device_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 pulse_interval_in_minutes_;
  friend struct ::TableStruct_device_5finfo_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class FeatureSpecificFields :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.FeatureSpecificFields) */ {
 public:
  FeatureSpecificFields();
  virtual ~FeatureSpecificFields();

  FeatureSpecificFields(const FeatureSpecificFields& from);
  FeatureSpecificFields(FeatureSpecificFields&& from) noexcept
    : FeatureSpecificFields() {
    *this = ::std::move(from);
  }

  inline FeatureSpecificFields& operator=(const FeatureSpecificFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureSpecificFields& operator=(FeatureSpecificFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FeatureSpecificFields& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureSpecificFields* internal_default_instance() {
    return reinterpret_cast<const FeatureSpecificFields*>(
               &_FeatureSpecificFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeatureSpecificFields& a, FeatureSpecificFields& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureSpecificFields* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureSpecificFields* New() const final {
    return CreateMaybeMessage<FeatureSpecificFields>(nullptr);
  }

  FeatureSpecificFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureSpecificFields>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FeatureSpecificFields& from);
  void MergeFrom(const FeatureSpecificFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureSpecificFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.FeatureSpecificFields";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendTabToSelfReceivingEnabledFieldNumber = 1,
  };
  // optional bool send_tab_to_self_receiving_enabled = 1;
  bool has_send_tab_to_self_receiving_enabled() const;
  void clear_send_tab_to_self_receiving_enabled();
  bool send_tab_to_self_receiving_enabled() const;
  void set_send_tab_to_self_receiving_enabled(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.FeatureSpecificFields)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool send_tab_to_self_receiving_enabled_;
  friend struct ::TableStruct_device_5finfo_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class SharingSpecificFields :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SharingSpecificFields) */ {
 public:
  SharingSpecificFields();
  virtual ~SharingSpecificFields();

  SharingSpecificFields(const SharingSpecificFields& from);
  SharingSpecificFields(SharingSpecificFields&& from) noexcept
    : SharingSpecificFields() {
    *this = ::std::move(from);
  }

  inline SharingSpecificFields& operator=(const SharingSpecificFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingSpecificFields& operator=(SharingSpecificFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SharingSpecificFields& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SharingSpecificFields* internal_default_instance() {
    return reinterpret_cast<const SharingSpecificFields*>(
               &_SharingSpecificFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SharingSpecificFields& a, SharingSpecificFields& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingSpecificFields* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SharingSpecificFields* New() const final {
    return CreateMaybeMessage<SharingSpecificFields>(nullptr);
  }

  SharingSpecificFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SharingSpecificFields>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SharingSpecificFields& from);
  void MergeFrom(const SharingSpecificFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingSpecificFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SharingSpecificFields";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SharingSpecificFields_EnabledFeatures EnabledFeatures;
  static constexpr EnabledFeatures UNKNOWN =
    SharingSpecificFields_EnabledFeatures_UNKNOWN;
  static constexpr EnabledFeatures CLICK_TO_CALL_VAPID =
    SharingSpecificFields_EnabledFeatures_CLICK_TO_CALL_VAPID;
  static constexpr EnabledFeatures SHARED_CLIPBOARD_VAPID =
    SharingSpecificFields_EnabledFeatures_SHARED_CLIPBOARD_VAPID;
  static constexpr EnabledFeatures SMS_FETCHER =
    SharingSpecificFields_EnabledFeatures_SMS_FETCHER;
  static constexpr EnabledFeatures REMOTE_COPY =
    SharingSpecificFields_EnabledFeatures_REMOTE_COPY;
  static constexpr EnabledFeatures PEER_CONNECTION =
    SharingSpecificFields_EnabledFeatures_PEER_CONNECTION;
  static constexpr EnabledFeatures DISCOVERY =
    SharingSpecificFields_EnabledFeatures_DISCOVERY;
  static constexpr EnabledFeatures CLICK_TO_CALL =
    SharingSpecificFields_EnabledFeatures_CLICK_TO_CALL;
  static constexpr EnabledFeatures SHARED_CLIPBOARD =
    SharingSpecificFields_EnabledFeatures_SHARED_CLIPBOARD;
  static inline bool EnabledFeatures_IsValid(int value) {
    return SharingSpecificFields_EnabledFeatures_IsValid(value);
  }
  static constexpr EnabledFeatures EnabledFeatures_MIN =
    SharingSpecificFields_EnabledFeatures_EnabledFeatures_MIN;
  static constexpr EnabledFeatures EnabledFeatures_MAX =
    SharingSpecificFields_EnabledFeatures_EnabledFeatures_MAX;
  static constexpr int EnabledFeatures_ARRAYSIZE =
    SharingSpecificFields_EnabledFeatures_EnabledFeatures_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EnabledFeatures_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EnabledFeatures>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EnabledFeatures_Name.");
    return SharingSpecificFields_EnabledFeatures_Name(enum_t_value);
  }
  static inline bool EnabledFeatures_Parse(const std::string& name,
      EnabledFeatures* value) {
    return SharingSpecificFields_EnabledFeatures_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFeaturesFieldNumber = 4,
    kVapidFcmTokenFieldNumber = 1,
    kVapidP256DhFieldNumber = 2,
    kVapidAuthSecretFieldNumber = 3,
    kSenderIdFcmTokenFieldNumber = 8,
    kSenderIdP256DhFieldNumber = 9,
    kSenderIdAuthSecretFieldNumber = 10,
  };
  // repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;
  int enabled_features_size() const;
  void clear_enabled_features();
  ::sync_pb::SharingSpecificFields_EnabledFeatures enabled_features(int index) const;
  void set_enabled_features(int index, ::sync_pb::SharingSpecificFields_EnabledFeatures value);
  void add_enabled_features(::sync_pb::SharingSpecificFields_EnabledFeatures value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enabled_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enabled_features();

  // optional string vapid_fcm_token = 1;
  bool has_vapid_fcm_token() const;
  void clear_vapid_fcm_token();
  const std::string& vapid_fcm_token() const;
  void set_vapid_fcm_token(const std::string& value);
  void set_vapid_fcm_token(std::string&& value);
  void set_vapid_fcm_token(const char* value);
  void set_vapid_fcm_token(const char* value, size_t size);
  std::string* mutable_vapid_fcm_token();
  std::string* release_vapid_fcm_token();
  void set_allocated_vapid_fcm_token(std::string* vapid_fcm_token);

  // optional bytes vapid_p256dh = 2;
  bool has_vapid_p256dh() const;
  void clear_vapid_p256dh();
  const std::string& vapid_p256dh() const;
  void set_vapid_p256dh(const std::string& value);
  void set_vapid_p256dh(std::string&& value);
  void set_vapid_p256dh(const char* value);
  void set_vapid_p256dh(const void* value, size_t size);
  std::string* mutable_vapid_p256dh();
  std::string* release_vapid_p256dh();
  void set_allocated_vapid_p256dh(std::string* vapid_p256dh);

  // optional bytes vapid_auth_secret = 3;
  bool has_vapid_auth_secret() const;
  void clear_vapid_auth_secret();
  const std::string& vapid_auth_secret() const;
  void set_vapid_auth_secret(const std::string& value);
  void set_vapid_auth_secret(std::string&& value);
  void set_vapid_auth_secret(const char* value);
  void set_vapid_auth_secret(const void* value, size_t size);
  std::string* mutable_vapid_auth_secret();
  std::string* release_vapid_auth_secret();
  void set_allocated_vapid_auth_secret(std::string* vapid_auth_secret);

  // optional string sender_id_fcm_token = 8;
  bool has_sender_id_fcm_token() const;
  void clear_sender_id_fcm_token();
  const std::string& sender_id_fcm_token() const;
  void set_sender_id_fcm_token(const std::string& value);
  void set_sender_id_fcm_token(std::string&& value);
  void set_sender_id_fcm_token(const char* value);
  void set_sender_id_fcm_token(const char* value, size_t size);
  std::string* mutable_sender_id_fcm_token();
  std::string* release_sender_id_fcm_token();
  void set_allocated_sender_id_fcm_token(std::string* sender_id_fcm_token);

  // optional bytes sender_id_p256dh = 9;
  bool has_sender_id_p256dh() const;
  void clear_sender_id_p256dh();
  const std::string& sender_id_p256dh() const;
  void set_sender_id_p256dh(const std::string& value);
  void set_sender_id_p256dh(std::string&& value);
  void set_sender_id_p256dh(const char* value);
  void set_sender_id_p256dh(const void* value, size_t size);
  std::string* mutable_sender_id_p256dh();
  std::string* release_sender_id_p256dh();
  void set_allocated_sender_id_p256dh(std::string* sender_id_p256dh);

  // optional bytes sender_id_auth_secret = 10;
  bool has_sender_id_auth_secret() const;
  void clear_sender_id_auth_secret();
  const std::string& sender_id_auth_secret() const;
  void set_sender_id_auth_secret(const std::string& value);
  void set_sender_id_auth_secret(std::string&& value);
  void set_sender_id_auth_secret(const char* value);
  void set_sender_id_auth_secret(const void* value, size_t size);
  std::string* mutable_sender_id_auth_secret();
  std::string* release_sender_id_auth_secret();
  void set_allocated_sender_id_auth_secret(std::string* sender_id_auth_secret);

  // @@protoc_insertion_point(class_scope:sync_pb.SharingSpecificFields)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enabled_features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vapid_fcm_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vapid_p256dh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vapid_auth_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_fcm_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_p256dh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_auth_secret_;
  friend struct ::TableStruct_device_5finfo_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceInfoSpecifics

// optional string cache_guid = 1;
inline bool DeviceInfoSpecifics::has_cache_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInfoSpecifics::clear_cache_guid() {
  cache_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceInfoSpecifics::cache_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.cache_guid)
  return cache_guid_.GetNoArena();
}
inline void DeviceInfoSpecifics::set_cache_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.cache_guid)
}
inline void DeviceInfoSpecifics::set_cache_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DeviceInfoSpecifics.cache_guid)
}
inline void DeviceInfoSpecifics::set_cache_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.cache_guid)
}
inline void DeviceInfoSpecifics::set_cache_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.cache_guid)
}
inline std::string* DeviceInfoSpecifics::mutable_cache_guid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.cache_guid)
  return cache_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfoSpecifics::release_cache_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.cache_guid)
  if (!has_cache_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cache_guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoSpecifics::set_allocated_cache_guid(std::string* cache_guid) {
  if (cache_guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cache_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.cache_guid)
}

// optional string client_name = 2;
inline bool DeviceInfoSpecifics::has_client_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInfoSpecifics::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeviceInfoSpecifics::client_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.client_name)
  return client_name_.GetNoArena();
}
inline void DeviceInfoSpecifics::set_client_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.client_name)
}
inline void DeviceInfoSpecifics::set_client_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  client_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DeviceInfoSpecifics.client_name)
}
inline void DeviceInfoSpecifics::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  client_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.client_name)
}
inline void DeviceInfoSpecifics::set_client_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  client_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.client_name)
}
inline std::string* DeviceInfoSpecifics::mutable_client_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.client_name)
  return client_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfoSpecifics::release_client_name() {
  // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.client_name)
  if (!has_client_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return client_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoSpecifics::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.client_name)
}

// optional .sync_pb.SyncEnums.DeviceType device_type = 3;
inline bool DeviceInfoSpecifics::has_device_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DeviceInfoSpecifics::clear_device_type() {
  device_type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::sync_pb::SyncEnums_DeviceType DeviceInfoSpecifics::device_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.device_type)
  return static_cast< ::sync_pb::SyncEnums_DeviceType >(device_type_);
}
inline void DeviceInfoSpecifics::set_device_type(::sync_pb::SyncEnums_DeviceType value) {
  assert(::sync_pb::SyncEnums_DeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  device_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.device_type)
}

// optional string sync_user_agent = 4;
inline bool DeviceInfoSpecifics::has_sync_user_agent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceInfoSpecifics::clear_sync_user_agent() {
  sync_user_agent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DeviceInfoSpecifics::sync_user_agent() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.sync_user_agent)
  return sync_user_agent_.GetNoArena();
}
inline void DeviceInfoSpecifics::set_sync_user_agent(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sync_user_agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.sync_user_agent)
}
inline void DeviceInfoSpecifics::set_sync_user_agent(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sync_user_agent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DeviceInfoSpecifics.sync_user_agent)
}
inline void DeviceInfoSpecifics::set_sync_user_agent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sync_user_agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.sync_user_agent)
}
inline void DeviceInfoSpecifics::set_sync_user_agent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sync_user_agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.sync_user_agent)
}
inline std::string* DeviceInfoSpecifics::mutable_sync_user_agent() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.sync_user_agent)
  return sync_user_agent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfoSpecifics::release_sync_user_agent() {
  // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.sync_user_agent)
  if (!has_sync_user_agent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sync_user_agent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoSpecifics::set_allocated_sync_user_agent(std::string* sync_user_agent) {
  if (sync_user_agent != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sync_user_agent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sync_user_agent);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.sync_user_agent)
}

// optional string chrome_version = 5;
inline bool DeviceInfoSpecifics::has_chrome_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceInfoSpecifics::clear_chrome_version() {
  chrome_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DeviceInfoSpecifics::chrome_version() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.chrome_version)
  return chrome_version_.GetNoArena();
}
inline void DeviceInfoSpecifics::set_chrome_version(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  chrome_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.chrome_version)
}
inline void DeviceInfoSpecifics::set_chrome_version(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  chrome_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DeviceInfoSpecifics.chrome_version)
}
inline void DeviceInfoSpecifics::set_chrome_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  chrome_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.chrome_version)
}
inline void DeviceInfoSpecifics::set_chrome_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  chrome_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.chrome_version)
}
inline std::string* DeviceInfoSpecifics::mutable_chrome_version() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.chrome_version)
  return chrome_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfoSpecifics::release_chrome_version() {
  // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.chrome_version)
  if (!has_chrome_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return chrome_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoSpecifics::set_allocated_chrome_version(std::string* chrome_version) {
  if (chrome_version != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  chrome_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chrome_version);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.chrome_version)
}

// optional int64 deprecated_backup_timestamp = 6 [deprecated = true];
inline bool DeviceInfoSpecifics::has_deprecated_backup_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeviceInfoSpecifics::clear_deprecated_backup_timestamp() {
  deprecated_backup_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceInfoSpecifics::deprecated_backup_timestamp() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.deprecated_backup_timestamp)
  return deprecated_backup_timestamp_;
}
inline void DeviceInfoSpecifics::set_deprecated_backup_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  deprecated_backup_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.deprecated_backup_timestamp)
}

// optional string signin_scoped_device_id = 7;
inline bool DeviceInfoSpecifics::has_signin_scoped_device_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceInfoSpecifics::clear_signin_scoped_device_id() {
  signin_scoped_device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DeviceInfoSpecifics::signin_scoped_device_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
  return signin_scoped_device_id_.GetNoArena();
}
inline void DeviceInfoSpecifics::set_signin_scoped_device_id(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  signin_scoped_device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
}
inline void DeviceInfoSpecifics::set_signin_scoped_device_id(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  signin_scoped_device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
}
inline void DeviceInfoSpecifics::set_signin_scoped_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  signin_scoped_device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
}
inline void DeviceInfoSpecifics::set_signin_scoped_device_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  signin_scoped_device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
}
inline std::string* DeviceInfoSpecifics::mutable_signin_scoped_device_id() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
  return signin_scoped_device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfoSpecifics::release_signin_scoped_device_id() {
  // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
  if (!has_signin_scoped_device_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return signin_scoped_device_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoSpecifics::set_allocated_signin_scoped_device_id(std::string* signin_scoped_device_id) {
  if (signin_scoped_device_id != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  signin_scoped_device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signin_scoped_device_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
}

// optional int64 last_updated_timestamp = 8;
inline bool DeviceInfoSpecifics::has_last_updated_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DeviceInfoSpecifics::clear_last_updated_timestamp() {
  last_updated_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceInfoSpecifics::last_updated_timestamp() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.last_updated_timestamp)
  return last_updated_timestamp_;
}
inline void DeviceInfoSpecifics::set_last_updated_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  last_updated_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.last_updated_timestamp)
}

// optional .sync_pb.FeatureSpecificFields feature_fields = 9;
inline bool DeviceInfoSpecifics::has_feature_fields() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceInfoSpecifics::clear_feature_fields() {
  if (feature_fields_ != nullptr) feature_fields_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::sync_pb::FeatureSpecificFields& DeviceInfoSpecifics::feature_fields() const {
  const ::sync_pb::FeatureSpecificFields* p = feature_fields_;
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.feature_fields)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::FeatureSpecificFields*>(
      &::sync_pb::_FeatureSpecificFields_default_instance_);
}
inline ::sync_pb::FeatureSpecificFields* DeviceInfoSpecifics::release_feature_fields() {
  // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.feature_fields)
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::FeatureSpecificFields* temp = feature_fields_;
  feature_fields_ = nullptr;
  return temp;
}
inline ::sync_pb::FeatureSpecificFields* DeviceInfoSpecifics::mutable_feature_fields() {
  _has_bits_[0] |= 0x00000080u;
  if (feature_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::FeatureSpecificFields>(GetArenaNoVirtual());
    feature_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.feature_fields)
  return feature_fields_;
}
inline void DeviceInfoSpecifics::set_allocated_feature_fields(::sync_pb::FeatureSpecificFields* feature_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete feature_fields_;
  }
  if (feature_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      feature_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature_fields, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  feature_fields_ = feature_fields;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.feature_fields)
}

// optional .sync_pb.SharingSpecificFields sharing_fields = 10;
inline bool DeviceInfoSpecifics::has_sharing_fields() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceInfoSpecifics::clear_sharing_fields() {
  if (sharing_fields_ != nullptr) sharing_fields_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::sync_pb::SharingSpecificFields& DeviceInfoSpecifics::sharing_fields() const {
  const ::sync_pb::SharingSpecificFields* p = sharing_fields_;
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.sharing_fields)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::SharingSpecificFields*>(
      &::sync_pb::_SharingSpecificFields_default_instance_);
}
inline ::sync_pb::SharingSpecificFields* DeviceInfoSpecifics::release_sharing_fields() {
  // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.sharing_fields)
  _has_bits_[0] &= ~0x00000100u;
  ::sync_pb::SharingSpecificFields* temp = sharing_fields_;
  sharing_fields_ = nullptr;
  return temp;
}
inline ::sync_pb::SharingSpecificFields* DeviceInfoSpecifics::mutable_sharing_fields() {
  _has_bits_[0] |= 0x00000100u;
  if (sharing_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SharingSpecificFields>(GetArenaNoVirtual());
    sharing_fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.sharing_fields)
  return sharing_fields_;
}
inline void DeviceInfoSpecifics::set_allocated_sharing_fields(::sync_pb::SharingSpecificFields* sharing_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sharing_fields_;
  }
  if (sharing_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sharing_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sharing_fields, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  sharing_fields_ = sharing_fields;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.sharing_fields)
}

// optional string model = 11;
inline bool DeviceInfoSpecifics::has_model() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceInfoSpecifics::clear_model() {
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& DeviceInfoSpecifics::model() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.model)
  return model_.GetNoArena();
}
inline void DeviceInfoSpecifics::set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.model)
}
inline void DeviceInfoSpecifics::set_model(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DeviceInfoSpecifics.model)
}
inline void DeviceInfoSpecifics::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.model)
}
inline void DeviceInfoSpecifics::set_model(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.model)
}
inline std::string* DeviceInfoSpecifics::mutable_model() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.model)
  return model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfoSpecifics::release_model() {
  // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.model)
  if (!has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return model_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoSpecifics::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.model)
}

// optional string manufacturer = 12;
inline bool DeviceInfoSpecifics::has_manufacturer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceInfoSpecifics::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& DeviceInfoSpecifics::manufacturer() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void DeviceInfoSpecifics::set_manufacturer(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.manufacturer)
}
inline void DeviceInfoSpecifics::set_manufacturer(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  manufacturer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DeviceInfoSpecifics.manufacturer)
}
inline void DeviceInfoSpecifics::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.manufacturer)
}
inline void DeviceInfoSpecifics::set_manufacturer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.manufacturer)
}
inline std::string* DeviceInfoSpecifics::mutable_manufacturer() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.manufacturer)
  return manufacturer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfoSpecifics::release_manufacturer() {
  // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.manufacturer)
  if (!has_manufacturer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return manufacturer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoSpecifics::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  manufacturer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.manufacturer)
}

// optional int32 pulse_interval_in_minutes = 13;
inline bool DeviceInfoSpecifics::has_pulse_interval_in_minutes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DeviceInfoSpecifics::clear_pulse_interval_in_minutes() {
  pulse_interval_in_minutes_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfoSpecifics::pulse_interval_in_minutes() const {
  // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.pulse_interval_in_minutes)
  return pulse_interval_in_minutes_;
}
inline void DeviceInfoSpecifics::set_pulse_interval_in_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  pulse_interval_in_minutes_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.pulse_interval_in_minutes)
}

// -------------------------------------------------------------------

// FeatureSpecificFields

// optional bool send_tab_to_self_receiving_enabled = 1;
inline bool FeatureSpecificFields::has_send_tab_to_self_receiving_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureSpecificFields::clear_send_tab_to_self_receiving_enabled() {
  send_tab_to_self_receiving_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FeatureSpecificFields::send_tab_to_self_receiving_enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.FeatureSpecificFields.send_tab_to_self_receiving_enabled)
  return send_tab_to_self_receiving_enabled_;
}
inline void FeatureSpecificFields::set_send_tab_to_self_receiving_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  send_tab_to_self_receiving_enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.FeatureSpecificFields.send_tab_to_self_receiving_enabled)
}

// -------------------------------------------------------------------

// SharingSpecificFields

// optional string vapid_fcm_token = 1;
inline bool SharingSpecificFields::has_vapid_fcm_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharingSpecificFields::clear_vapid_fcm_token() {
  vapid_fcm_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingSpecificFields::vapid_fcm_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingSpecificFields.vapid_fcm_token)
  return vapid_fcm_token_.GetNoArena();
}
inline void SharingSpecificFields::set_vapid_fcm_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vapid_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SharingSpecificFields.vapid_fcm_token)
}
inline void SharingSpecificFields::set_vapid_fcm_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  vapid_fcm_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SharingSpecificFields.vapid_fcm_token)
}
inline void SharingSpecificFields::set_vapid_fcm_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  vapid_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SharingSpecificFields.vapid_fcm_token)
}
inline void SharingSpecificFields::set_vapid_fcm_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  vapid_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SharingSpecificFields.vapid_fcm_token)
}
inline std::string* SharingSpecificFields::mutable_vapid_fcm_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingSpecificFields.vapid_fcm_token)
  return vapid_fcm_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SharingSpecificFields::release_vapid_fcm_token() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingSpecificFields.vapid_fcm_token)
  if (!has_vapid_fcm_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return vapid_fcm_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SharingSpecificFields::set_allocated_vapid_fcm_token(std::string* vapid_fcm_token) {
  if (vapid_fcm_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vapid_fcm_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vapid_fcm_token);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingSpecificFields.vapid_fcm_token)
}

// optional bytes vapid_p256dh = 2;
inline bool SharingSpecificFields::has_vapid_p256dh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharingSpecificFields::clear_vapid_p256dh() {
  vapid_p256dh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SharingSpecificFields::vapid_p256dh() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingSpecificFields.vapid_p256dh)
  return vapid_p256dh_.GetNoArena();
}
inline void SharingSpecificFields::set_vapid_p256dh(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vapid_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SharingSpecificFields.vapid_p256dh)
}
inline void SharingSpecificFields::set_vapid_p256dh(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  vapid_p256dh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SharingSpecificFields.vapid_p256dh)
}
inline void SharingSpecificFields::set_vapid_p256dh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  vapid_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SharingSpecificFields.vapid_p256dh)
}
inline void SharingSpecificFields::set_vapid_p256dh(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  vapid_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SharingSpecificFields.vapid_p256dh)
}
inline std::string* SharingSpecificFields::mutable_vapid_p256dh() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingSpecificFields.vapid_p256dh)
  return vapid_p256dh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SharingSpecificFields::release_vapid_p256dh() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingSpecificFields.vapid_p256dh)
  if (!has_vapid_p256dh()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return vapid_p256dh_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SharingSpecificFields::set_allocated_vapid_p256dh(std::string* vapid_p256dh) {
  if (vapid_p256dh != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vapid_p256dh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vapid_p256dh);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingSpecificFields.vapid_p256dh)
}

// optional bytes vapid_auth_secret = 3;
inline bool SharingSpecificFields::has_vapid_auth_secret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SharingSpecificFields::clear_vapid_auth_secret() {
  vapid_auth_secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SharingSpecificFields::vapid_auth_secret() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingSpecificFields.vapid_auth_secret)
  return vapid_auth_secret_.GetNoArena();
}
inline void SharingSpecificFields::set_vapid_auth_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  vapid_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SharingSpecificFields.vapid_auth_secret)
}
inline void SharingSpecificFields::set_vapid_auth_secret(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  vapid_auth_secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SharingSpecificFields.vapid_auth_secret)
}
inline void SharingSpecificFields::set_vapid_auth_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  vapid_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SharingSpecificFields.vapid_auth_secret)
}
inline void SharingSpecificFields::set_vapid_auth_secret(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  vapid_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SharingSpecificFields.vapid_auth_secret)
}
inline std::string* SharingSpecificFields::mutable_vapid_auth_secret() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingSpecificFields.vapid_auth_secret)
  return vapid_auth_secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SharingSpecificFields::release_vapid_auth_secret() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingSpecificFields.vapid_auth_secret)
  if (!has_vapid_auth_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return vapid_auth_secret_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SharingSpecificFields::set_allocated_vapid_auth_secret(std::string* vapid_auth_secret) {
  if (vapid_auth_secret != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vapid_auth_secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vapid_auth_secret);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingSpecificFields.vapid_auth_secret)
}

// repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;
inline int SharingSpecificFields::enabled_features_size() const {
  return enabled_features_.size();
}
inline void SharingSpecificFields::clear_enabled_features() {
  enabled_features_.Clear();
}
inline ::sync_pb::SharingSpecificFields_EnabledFeatures SharingSpecificFields::enabled_features(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingSpecificFields.enabled_features)
  return static_cast< ::sync_pb::SharingSpecificFields_EnabledFeatures >(enabled_features_.Get(index));
}
inline void SharingSpecificFields::set_enabled_features(int index, ::sync_pb::SharingSpecificFields_EnabledFeatures value) {
  assert(::sync_pb::SharingSpecificFields_EnabledFeatures_IsValid(value));
  enabled_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.SharingSpecificFields.enabled_features)
}
inline void SharingSpecificFields::add_enabled_features(::sync_pb::SharingSpecificFields_EnabledFeatures value) {
  assert(::sync_pb::SharingSpecificFields_EnabledFeatures_IsValid(value));
  enabled_features_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.SharingSpecificFields.enabled_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SharingSpecificFields::enabled_features() const {
  // @@protoc_insertion_point(field_list:sync_pb.SharingSpecificFields.enabled_features)
  return enabled_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SharingSpecificFields::mutable_enabled_features() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SharingSpecificFields.enabled_features)
  return &enabled_features_;
}

// optional string sender_id_fcm_token = 8;
inline bool SharingSpecificFields::has_sender_id_fcm_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SharingSpecificFields::clear_sender_id_fcm_token() {
  sender_id_fcm_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SharingSpecificFields::sender_id_fcm_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingSpecificFields.sender_id_fcm_token)
  return sender_id_fcm_token_.GetNoArena();
}
inline void SharingSpecificFields::set_sender_id_fcm_token(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sender_id_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SharingSpecificFields.sender_id_fcm_token)
}
inline void SharingSpecificFields::set_sender_id_fcm_token(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sender_id_fcm_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SharingSpecificFields.sender_id_fcm_token)
}
inline void SharingSpecificFields::set_sender_id_fcm_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sender_id_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SharingSpecificFields.sender_id_fcm_token)
}
inline void SharingSpecificFields::set_sender_id_fcm_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sender_id_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SharingSpecificFields.sender_id_fcm_token)
}
inline std::string* SharingSpecificFields::mutable_sender_id_fcm_token() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingSpecificFields.sender_id_fcm_token)
  return sender_id_fcm_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SharingSpecificFields::release_sender_id_fcm_token() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingSpecificFields.sender_id_fcm_token)
  if (!has_sender_id_fcm_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sender_id_fcm_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SharingSpecificFields::set_allocated_sender_id_fcm_token(std::string* sender_id_fcm_token) {
  if (sender_id_fcm_token != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sender_id_fcm_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id_fcm_token);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingSpecificFields.sender_id_fcm_token)
}

// optional bytes sender_id_p256dh = 9;
inline bool SharingSpecificFields::has_sender_id_p256dh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SharingSpecificFields::clear_sender_id_p256dh() {
  sender_id_p256dh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SharingSpecificFields::sender_id_p256dh() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingSpecificFields.sender_id_p256dh)
  return sender_id_p256dh_.GetNoArena();
}
inline void SharingSpecificFields::set_sender_id_p256dh(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  sender_id_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SharingSpecificFields.sender_id_p256dh)
}
inline void SharingSpecificFields::set_sender_id_p256dh(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  sender_id_p256dh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SharingSpecificFields.sender_id_p256dh)
}
inline void SharingSpecificFields::set_sender_id_p256dh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  sender_id_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SharingSpecificFields.sender_id_p256dh)
}
inline void SharingSpecificFields::set_sender_id_p256dh(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  sender_id_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SharingSpecificFields.sender_id_p256dh)
}
inline std::string* SharingSpecificFields::mutable_sender_id_p256dh() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingSpecificFields.sender_id_p256dh)
  return sender_id_p256dh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SharingSpecificFields::release_sender_id_p256dh() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingSpecificFields.sender_id_p256dh)
  if (!has_sender_id_p256dh()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return sender_id_p256dh_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SharingSpecificFields::set_allocated_sender_id_p256dh(std::string* sender_id_p256dh) {
  if (sender_id_p256dh != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sender_id_p256dh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id_p256dh);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingSpecificFields.sender_id_p256dh)
}

// optional bytes sender_id_auth_secret = 10;
inline bool SharingSpecificFields::has_sender_id_auth_secret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SharingSpecificFields::clear_sender_id_auth_secret() {
  sender_id_auth_secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SharingSpecificFields::sender_id_auth_secret() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingSpecificFields.sender_id_auth_secret)
  return sender_id_auth_secret_.GetNoArena();
}
inline void SharingSpecificFields::set_sender_id_auth_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  sender_id_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SharingSpecificFields.sender_id_auth_secret)
}
inline void SharingSpecificFields::set_sender_id_auth_secret(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  sender_id_auth_secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SharingSpecificFields.sender_id_auth_secret)
}
inline void SharingSpecificFields::set_sender_id_auth_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  sender_id_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SharingSpecificFields.sender_id_auth_secret)
}
inline void SharingSpecificFields::set_sender_id_auth_secret(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  sender_id_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SharingSpecificFields.sender_id_auth_secret)
}
inline std::string* SharingSpecificFields::mutable_sender_id_auth_secret() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingSpecificFields.sender_id_auth_secret)
  return sender_id_auth_secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SharingSpecificFields::release_sender_id_auth_secret() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingSpecificFields.sender_id_auth_secret)
  if (!has_sender_id_auth_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return sender_id_auth_secret_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SharingSpecificFields::set_allocated_sender_id_auth_secret(std::string* sender_id_auth_secret) {
  if (sender_id_auth_secret != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  sender_id_auth_secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id_auth_secret);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingSpecificFields.sender_id_auth_secret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::SharingSpecificFields_EnabledFeatures> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_device_5finfo_5fspecifics_2eproto
