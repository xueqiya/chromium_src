// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: managed_user_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_managed_5fuser_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_managed_5fuser_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_managed_5fuser_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_managed_5fuser_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class ManagedUserSpecifics;
class ManagedUserSpecificsDefaultTypeInternal;
extern ManagedUserSpecificsDefaultTypeInternal _ManagedUserSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::ManagedUserSpecifics* Arena::CreateMaybeMessage<::sync_pb::ManagedUserSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class ManagedUserSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ManagedUserSpecifics) */ {
 public:
  ManagedUserSpecifics();
  virtual ~ManagedUserSpecifics();

  ManagedUserSpecifics(const ManagedUserSpecifics& from);
  ManagedUserSpecifics(ManagedUserSpecifics&& from) noexcept
    : ManagedUserSpecifics() {
    *this = ::std::move(from);
  }

  inline ManagedUserSpecifics& operator=(const ManagedUserSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManagedUserSpecifics& operator=(ManagedUserSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ManagedUserSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagedUserSpecifics* internal_default_instance() {
    return reinterpret_cast<const ManagedUserSpecifics*>(
               &_ManagedUserSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ManagedUserSpecifics& a, ManagedUserSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(ManagedUserSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManagedUserSpecifics* New() const final {
    return CreateMaybeMessage<ManagedUserSpecifics>(nullptr);
  }

  ManagedUserSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManagedUserSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ManagedUserSpecifics& from);
  void MergeFrom(const ManagedUserSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ManagedUserSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ManagedUserSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kMasterKeyFieldNumber = 4,
    kChromeAvatarFieldNumber = 5,
    kChromeosAvatarFieldNumber = 6,
    kPasswordSignatureKeyFieldNumber = 7,
    kPasswordEncryptionKeyFieldNumber = 8,
    kAcknowledgedFieldNumber = 3,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string master_key = 4;
  bool has_master_key() const;
  void clear_master_key();
  const std::string& master_key() const;
  void set_master_key(const std::string& value);
  void set_master_key(std::string&& value);
  void set_master_key(const char* value);
  void set_master_key(const char* value, size_t size);
  std::string* mutable_master_key();
  std::string* release_master_key();
  void set_allocated_master_key(std::string* master_key);

  // optional string chrome_avatar = 5;
  bool has_chrome_avatar() const;
  void clear_chrome_avatar();
  const std::string& chrome_avatar() const;
  void set_chrome_avatar(const std::string& value);
  void set_chrome_avatar(std::string&& value);
  void set_chrome_avatar(const char* value);
  void set_chrome_avatar(const char* value, size_t size);
  std::string* mutable_chrome_avatar();
  std::string* release_chrome_avatar();
  void set_allocated_chrome_avatar(std::string* chrome_avatar);

  // optional string chromeos_avatar = 6;
  bool has_chromeos_avatar() const;
  void clear_chromeos_avatar();
  const std::string& chromeos_avatar() const;
  void set_chromeos_avatar(const std::string& value);
  void set_chromeos_avatar(std::string&& value);
  void set_chromeos_avatar(const char* value);
  void set_chromeos_avatar(const char* value, size_t size);
  std::string* mutable_chromeos_avatar();
  std::string* release_chromeos_avatar();
  void set_allocated_chromeos_avatar(std::string* chromeos_avatar);

  // optional string password_signature_key = 7;
  bool has_password_signature_key() const;
  void clear_password_signature_key();
  const std::string& password_signature_key() const;
  void set_password_signature_key(const std::string& value);
  void set_password_signature_key(std::string&& value);
  void set_password_signature_key(const char* value);
  void set_password_signature_key(const char* value, size_t size);
  std::string* mutable_password_signature_key();
  std::string* release_password_signature_key();
  void set_allocated_password_signature_key(std::string* password_signature_key);

  // optional string password_encryption_key = 8;
  bool has_password_encryption_key() const;
  void clear_password_encryption_key();
  const std::string& password_encryption_key() const;
  void set_password_encryption_key(const std::string& value);
  void set_password_encryption_key(std::string&& value);
  void set_password_encryption_key(const char* value);
  void set_password_encryption_key(const char* value, size_t size);
  std::string* mutable_password_encryption_key();
  std::string* release_password_encryption_key();
  void set_allocated_password_encryption_key(std::string* password_encryption_key);

  // optional bool acknowledged = 3 [default = false];
  bool has_acknowledged() const;
  void clear_acknowledged();
  bool acknowledged() const;
  void set_acknowledged(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.ManagedUserSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chrome_avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chromeos_avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_signature_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_encryption_key_;
  bool acknowledged_;
  friend struct ::TableStruct_managed_5fuser_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ManagedUserSpecifics

// optional string id = 1;
inline bool ManagedUserSpecifics::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManagedUserSpecifics::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ManagedUserSpecifics::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.id)
  return id_.GetNoArena();
}
inline void ManagedUserSpecifics::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.id)
}
inline void ManagedUserSpecifics::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.id)
}
inline void ManagedUserSpecifics::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.id)
}
inline void ManagedUserSpecifics::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.id)
}
inline std::string* ManagedUserSpecifics::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManagedUserSpecifics::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedUserSpecifics::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.id)
}

// optional string name = 2;
inline bool ManagedUserSpecifics::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManagedUserSpecifics::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ManagedUserSpecifics::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.name)
  return name_.GetNoArena();
}
inline void ManagedUserSpecifics::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.name)
}
inline void ManagedUserSpecifics::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.name)
}
inline void ManagedUserSpecifics::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.name)
}
inline void ManagedUserSpecifics::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.name)
}
inline std::string* ManagedUserSpecifics::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManagedUserSpecifics::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedUserSpecifics::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.name)
}

// optional bool acknowledged = 3 [default = false];
inline bool ManagedUserSpecifics::has_acknowledged() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ManagedUserSpecifics::clear_acknowledged() {
  acknowledged_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ManagedUserSpecifics::acknowledged() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.acknowledged)
  return acknowledged_;
}
inline void ManagedUserSpecifics::set_acknowledged(bool value) {
  _has_bits_[0] |= 0x00000080u;
  acknowledged_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.acknowledged)
}

// optional string master_key = 4;
inline bool ManagedUserSpecifics::has_master_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManagedUserSpecifics::clear_master_key() {
  master_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ManagedUserSpecifics::master_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.master_key)
  return master_key_.GetNoArena();
}
inline void ManagedUserSpecifics::set_master_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  master_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.master_key)
}
inline void ManagedUserSpecifics::set_master_key(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  master_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.master_key)
}
inline void ManagedUserSpecifics::set_master_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  master_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.master_key)
}
inline void ManagedUserSpecifics::set_master_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  master_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.master_key)
}
inline std::string* ManagedUserSpecifics::mutable_master_key() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.master_key)
  return master_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManagedUserSpecifics::release_master_key() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.master_key)
  if (!has_master_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return master_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedUserSpecifics::set_allocated_master_key(std::string* master_key) {
  if (master_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  master_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), master_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.master_key)
}

// optional string chrome_avatar = 5;
inline bool ManagedUserSpecifics::has_chrome_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ManagedUserSpecifics::clear_chrome_avatar() {
  chrome_avatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ManagedUserSpecifics::chrome_avatar() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.chrome_avatar)
  return chrome_avatar_.GetNoArena();
}
inline void ManagedUserSpecifics::set_chrome_avatar(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  chrome_avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
inline void ManagedUserSpecifics::set_chrome_avatar(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  chrome_avatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
inline void ManagedUserSpecifics::set_chrome_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  chrome_avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
inline void ManagedUserSpecifics::set_chrome_avatar(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  chrome_avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
inline std::string* ManagedUserSpecifics::mutable_chrome_avatar() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.chrome_avatar)
  return chrome_avatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManagedUserSpecifics::release_chrome_avatar() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.chrome_avatar)
  if (!has_chrome_avatar()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return chrome_avatar_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedUserSpecifics::set_allocated_chrome_avatar(std::string* chrome_avatar) {
  if (chrome_avatar != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  chrome_avatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chrome_avatar);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.chrome_avatar)
}

// optional string chromeos_avatar = 6;
inline bool ManagedUserSpecifics::has_chromeos_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ManagedUserSpecifics::clear_chromeos_avatar() {
  chromeos_avatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ManagedUserSpecifics::chromeos_avatar() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.chromeos_avatar)
  return chromeos_avatar_.GetNoArena();
}
inline void ManagedUserSpecifics::set_chromeos_avatar(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  chromeos_avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
inline void ManagedUserSpecifics::set_chromeos_avatar(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  chromeos_avatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
inline void ManagedUserSpecifics::set_chromeos_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  chromeos_avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
inline void ManagedUserSpecifics::set_chromeos_avatar(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  chromeos_avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
inline std::string* ManagedUserSpecifics::mutable_chromeos_avatar() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.chromeos_avatar)
  return chromeos_avatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManagedUserSpecifics::release_chromeos_avatar() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.chromeos_avatar)
  if (!has_chromeos_avatar()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return chromeos_avatar_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedUserSpecifics::set_allocated_chromeos_avatar(std::string* chromeos_avatar) {
  if (chromeos_avatar != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  chromeos_avatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chromeos_avatar);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}

// optional string password_signature_key = 7;
inline bool ManagedUserSpecifics::has_password_signature_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ManagedUserSpecifics::clear_password_signature_key() {
  password_signature_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ManagedUserSpecifics::password_signature_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.password_signature_key)
  return password_signature_key_.GetNoArena();
}
inline void ManagedUserSpecifics::set_password_signature_key(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  password_signature_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.password_signature_key)
}
inline void ManagedUserSpecifics::set_password_signature_key(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  password_signature_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.password_signature_key)
}
inline void ManagedUserSpecifics::set_password_signature_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  password_signature_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.password_signature_key)
}
inline void ManagedUserSpecifics::set_password_signature_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  password_signature_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.password_signature_key)
}
inline std::string* ManagedUserSpecifics::mutable_password_signature_key() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.password_signature_key)
  return password_signature_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManagedUserSpecifics::release_password_signature_key() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.password_signature_key)
  if (!has_password_signature_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return password_signature_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedUserSpecifics::set_allocated_password_signature_key(std::string* password_signature_key) {
  if (password_signature_key != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  password_signature_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_signature_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.password_signature_key)
}

// optional string password_encryption_key = 8;
inline bool ManagedUserSpecifics::has_password_encryption_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ManagedUserSpecifics::clear_password_encryption_key() {
  password_encryption_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ManagedUserSpecifics::password_encryption_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.password_encryption_key)
  return password_encryption_key_.GetNoArena();
}
inline void ManagedUserSpecifics::set_password_encryption_key(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  password_encryption_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
inline void ManagedUserSpecifics::set_password_encryption_key(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  password_encryption_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
inline void ManagedUserSpecifics::set_password_encryption_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  password_encryption_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
inline void ManagedUserSpecifics::set_password_encryption_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  password_encryption_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
inline std::string* ManagedUserSpecifics::mutable_password_encryption_key() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.password_encryption_key)
  return password_encryption_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManagedUserSpecifics::release_password_encryption_key() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.password_encryption_key)
  if (!has_password_encryption_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return password_encryption_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedUserSpecifics::set_allocated_password_encryption_key(std::string* password_encryption_key) {
  if (password_encryption_key != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  password_encryption_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_encryption_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.password_encryption_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_managed_5fuser_5fspecifics_2eproto
