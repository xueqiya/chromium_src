// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_notification_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_5fnotification_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_5fnotification_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_5fnotification_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_5fnotification_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class AppNotification;
class AppNotificationDefaultTypeInternal;
extern AppNotificationDefaultTypeInternal _AppNotification_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::AppNotification* Arena::CreateMaybeMessage<::sync_pb::AppNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class AppNotification :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AppNotification) */ {
 public:
  AppNotification();
  virtual ~AppNotification();

  AppNotification(const AppNotification& from);
  AppNotification(AppNotification&& from) noexcept
    : AppNotification() {
    *this = ::std::move(from);
  }

  inline AppNotification& operator=(const AppNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppNotification& operator=(AppNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppNotification* internal_default_instance() {
    return reinterpret_cast<const AppNotification*>(
               &_AppNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppNotification& a, AppNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(AppNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppNotification* New() const final {
    return CreateMaybeMessage<AppNotification>(nullptr);
  }

  AppNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppNotification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppNotification& from);
  void MergeFrom(const AppNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AppNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kTitleFieldNumber = 4,
    kBodyTextFieldNumber = 5,
    kLinkUrlFieldNumber = 6,
    kLinkTextFieldNumber = 7,
    kCreationTimestampMsFieldNumber = 3,
  };
  // optional string guid = 1;
  bool has_guid() const;
  void clear_guid();
  const std::string& guid() const;
  void set_guid(const std::string& value);
  void set_guid(std::string&& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  std::string* mutable_guid();
  std::string* release_guid();
  void set_allocated_guid(std::string* guid);

  // optional string app_id = 2;
  bool has_app_id() const;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);

  // optional string title = 4;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string body_text = 5;
  bool has_body_text() const;
  void clear_body_text();
  const std::string& body_text() const;
  void set_body_text(const std::string& value);
  void set_body_text(std::string&& value);
  void set_body_text(const char* value);
  void set_body_text(const char* value, size_t size);
  std::string* mutable_body_text();
  std::string* release_body_text();
  void set_allocated_body_text(std::string* body_text);

  // optional string link_url = 6;
  bool has_link_url() const;
  void clear_link_url();
  const std::string& link_url() const;
  void set_link_url(const std::string& value);
  void set_link_url(std::string&& value);
  void set_link_url(const char* value);
  void set_link_url(const char* value, size_t size);
  std::string* mutable_link_url();
  std::string* release_link_url();
  void set_allocated_link_url(std::string* link_url);

  // optional string link_text = 7;
  bool has_link_text() const;
  void clear_link_text();
  const std::string& link_text() const;
  void set_link_text(const std::string& value);
  void set_link_text(std::string&& value);
  void set_link_text(const char* value);
  void set_link_text(const char* value, size_t size);
  std::string* mutable_link_text();
  std::string* release_link_text();
  void set_allocated_link_text(std::string* link_text);

  // optional int64 creation_timestamp_ms = 3;
  bool has_creation_timestamp_ms() const;
  void clear_creation_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_timestamp_ms() const;
  void set_creation_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.AppNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_text_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_timestamp_ms_;
  friend struct ::TableStruct_app_5fnotification_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppNotification

// optional string guid = 1;
inline bool AppNotification::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppNotification::clear_guid() {
  guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppNotification::guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.guid)
  return guid_.GetNoArena();
}
inline void AppNotification::set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.guid)
}
inline void AppNotification::set_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppNotification.guid)
}
inline void AppNotification::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppNotification.guid)
}
inline void AppNotification::set_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppNotification.guid)
}
inline std::string* AppNotification::mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.guid)
  return guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppNotification::release_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.guid)
  if (!has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppNotification::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.guid)
}

// optional string app_id = 2;
inline bool AppNotification::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppNotification::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppNotification::app_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.app_id)
  return app_id_.GetNoArena();
}
inline void AppNotification::set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.app_id)
}
inline void AppNotification::set_app_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppNotification.app_id)
}
inline void AppNotification::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppNotification.app_id)
}
inline void AppNotification::set_app_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppNotification.app_id)
}
inline std::string* AppNotification::mutable_app_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.app_id)
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppNotification::release_app_id() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.app_id)
  if (!has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return app_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppNotification::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.app_id)
}

// optional int64 creation_timestamp_ms = 3;
inline bool AppNotification::has_creation_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppNotification::clear_creation_timestamp_ms() {
  creation_timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppNotification::creation_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.creation_timestamp_ms)
  return creation_timestamp_ms_;
}
inline void AppNotification::set_creation_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  creation_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.creation_timestamp_ms)
}

// optional string title = 4;
inline bool AppNotification::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppNotification::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppNotification::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.title)
  return title_.GetNoArena();
}
inline void AppNotification::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.title)
}
inline void AppNotification::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppNotification.title)
}
inline void AppNotification::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppNotification.title)
}
inline void AppNotification::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppNotification.title)
}
inline std::string* AppNotification::mutable_title() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppNotification::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppNotification::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.title)
}

// optional string body_text = 5;
inline bool AppNotification::has_body_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppNotification::clear_body_text() {
  body_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AppNotification::body_text() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.body_text)
  return body_text_.GetNoArena();
}
inline void AppNotification::set_body_text(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  body_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.body_text)
}
inline void AppNotification::set_body_text(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  body_text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppNotification.body_text)
}
inline void AppNotification::set_body_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  body_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppNotification.body_text)
}
inline void AppNotification::set_body_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  body_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppNotification.body_text)
}
inline std::string* AppNotification::mutable_body_text() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.body_text)
  return body_text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppNotification::release_body_text() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.body_text)
  if (!has_body_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return body_text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppNotification::set_allocated_body_text(std::string* body_text) {
  if (body_text != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  body_text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body_text);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.body_text)
}

// optional string link_url = 6;
inline bool AppNotification::has_link_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppNotification::clear_link_url() {
  link_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AppNotification::link_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.link_url)
  return link_url_.GetNoArena();
}
inline void AppNotification::set_link_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  link_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.link_url)
}
inline void AppNotification::set_link_url(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  link_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppNotification.link_url)
}
inline void AppNotification::set_link_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  link_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppNotification.link_url)
}
inline void AppNotification::set_link_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  link_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppNotification.link_url)
}
inline std::string* AppNotification::mutable_link_url() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.link_url)
  return link_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppNotification::release_link_url() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.link_url)
  if (!has_link_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return link_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppNotification::set_allocated_link_url(std::string* link_url) {
  if (link_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  link_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.link_url)
}

// optional string link_text = 7;
inline bool AppNotification::has_link_text() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppNotification::clear_link_text() {
  link_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AppNotification::link_text() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.link_text)
  return link_text_.GetNoArena();
}
inline void AppNotification::set_link_text(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  link_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.link_text)
}
inline void AppNotification::set_link_text(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  link_text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.AppNotification.link_text)
}
inline void AppNotification::set_link_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  link_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.AppNotification.link_text)
}
inline void AppNotification::set_link_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  link_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AppNotification.link_text)
}
inline std::string* AppNotification::mutable_link_text() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.link_text)
  return link_text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppNotification::release_link_text() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.link_text)
  if (!has_link_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return link_text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppNotification::set_allocated_link_text(std::string* link_text) {
  if (link_text != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  link_text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link_text);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.link_text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_5fnotification_5fspecifics_2eproto
