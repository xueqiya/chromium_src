// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: typed_url_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_typed_5furl_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_typed_5furl_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_typed_5furl_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_typed_5furl_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class TypedUrlSpecifics;
class TypedUrlSpecificsDefaultTypeInternal;
extern TypedUrlSpecificsDefaultTypeInternal _TypedUrlSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::TypedUrlSpecifics* Arena::CreateMaybeMessage<::sync_pb::TypedUrlSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class TypedUrlSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.TypedUrlSpecifics) */ {
 public:
  TypedUrlSpecifics();
  virtual ~TypedUrlSpecifics();

  TypedUrlSpecifics(const TypedUrlSpecifics& from);
  TypedUrlSpecifics(TypedUrlSpecifics&& from) noexcept
    : TypedUrlSpecifics() {
    *this = ::std::move(from);
  }

  inline TypedUrlSpecifics& operator=(const TypedUrlSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypedUrlSpecifics& operator=(TypedUrlSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TypedUrlSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypedUrlSpecifics* internal_default_instance() {
    return reinterpret_cast<const TypedUrlSpecifics*>(
               &_TypedUrlSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TypedUrlSpecifics& a, TypedUrlSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(TypedUrlSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypedUrlSpecifics* New() const final {
    return CreateMaybeMessage<TypedUrlSpecifics>(nullptr);
  }

  TypedUrlSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypedUrlSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TypedUrlSpecifics& from);
  void MergeFrom(const TypedUrlSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypedUrlSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.TypedUrlSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisitsFieldNumber = 7,
    kVisitTransitionsFieldNumber = 8,
    kUrlFieldNumber = 1,
    kTitleFieldNumber = 2,
    kHiddenFieldNumber = 4,
  };
  // repeated int64 visits = 7 [packed = true];
  int visits_size() const;
  void clear_visits();
  ::PROTOBUF_NAMESPACE_ID::int64 visits(int index) const;
  void set_visits(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_visits(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      visits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_visits();

  // repeated int32 visit_transitions = 8 [packed = true];
  int visit_transitions_size() const;
  void clear_visit_transitions();
  ::PROTOBUF_NAMESPACE_ID::int32 visit_transitions(int index) const;
  void set_visit_transitions(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_visit_transitions(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      visit_transitions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_visit_transitions();

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional bool hidden = 4;
  bool has_hidden() const;
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.TypedUrlSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > visits_;
  mutable std::atomic<int> _visits_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > visit_transitions_;
  mutable std::atomic<int> _visit_transitions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  bool hidden_;
  friend struct ::TableStruct_typed_5furl_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TypedUrlSpecifics

// optional string url = 1;
inline bool TypedUrlSpecifics::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TypedUrlSpecifics::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TypedUrlSpecifics::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.TypedUrlSpecifics.url)
  return url_.GetNoArena();
}
inline void TypedUrlSpecifics::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TypedUrlSpecifics.url)
}
inline void TypedUrlSpecifics::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TypedUrlSpecifics.url)
}
inline void TypedUrlSpecifics::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TypedUrlSpecifics.url)
}
inline void TypedUrlSpecifics::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TypedUrlSpecifics.url)
}
inline std::string* TypedUrlSpecifics::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.TypedUrlSpecifics.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TypedUrlSpecifics::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.TypedUrlSpecifics.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TypedUrlSpecifics::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TypedUrlSpecifics.url)
}

// optional string title = 2;
inline bool TypedUrlSpecifics::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TypedUrlSpecifics::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TypedUrlSpecifics::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.TypedUrlSpecifics.title)
  return title_.GetNoArena();
}
inline void TypedUrlSpecifics::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TypedUrlSpecifics.title)
}
inline void TypedUrlSpecifics::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TypedUrlSpecifics.title)
}
inline void TypedUrlSpecifics::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TypedUrlSpecifics.title)
}
inline void TypedUrlSpecifics::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TypedUrlSpecifics.title)
}
inline std::string* TypedUrlSpecifics::mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.TypedUrlSpecifics.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TypedUrlSpecifics::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.TypedUrlSpecifics.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TypedUrlSpecifics::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TypedUrlSpecifics.title)
}

// optional bool hidden = 4;
inline bool TypedUrlSpecifics::has_hidden() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TypedUrlSpecifics::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TypedUrlSpecifics::hidden() const {
  // @@protoc_insertion_point(field_get:sync_pb.TypedUrlSpecifics.hidden)
  return hidden_;
}
inline void TypedUrlSpecifics::set_hidden(bool value) {
  _has_bits_[0] |= 0x00000004u;
  hidden_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TypedUrlSpecifics.hidden)
}

// repeated int64 visits = 7 [packed = true];
inline int TypedUrlSpecifics::visits_size() const {
  return visits_.size();
}
inline void TypedUrlSpecifics::clear_visits() {
  visits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TypedUrlSpecifics::visits(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.TypedUrlSpecifics.visits)
  return visits_.Get(index);
}
inline void TypedUrlSpecifics::set_visits(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  visits_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.TypedUrlSpecifics.visits)
}
inline void TypedUrlSpecifics::add_visits(::PROTOBUF_NAMESPACE_ID::int64 value) {
  visits_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.TypedUrlSpecifics.visits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TypedUrlSpecifics::visits() const {
  // @@protoc_insertion_point(field_list:sync_pb.TypedUrlSpecifics.visits)
  return visits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TypedUrlSpecifics::mutable_visits() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.TypedUrlSpecifics.visits)
  return &visits_;
}

// repeated int32 visit_transitions = 8 [packed = true];
inline int TypedUrlSpecifics::visit_transitions_size() const {
  return visit_transitions_.size();
}
inline void TypedUrlSpecifics::clear_visit_transitions() {
  visit_transitions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TypedUrlSpecifics::visit_transitions(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.TypedUrlSpecifics.visit_transitions)
  return visit_transitions_.Get(index);
}
inline void TypedUrlSpecifics::set_visit_transitions(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  visit_transitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.TypedUrlSpecifics.visit_transitions)
}
inline void TypedUrlSpecifics::add_visit_transitions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  visit_transitions_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.TypedUrlSpecifics.visit_transitions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TypedUrlSpecifics::visit_transitions() const {
  // @@protoc_insertion_point(field_list:sync_pb.TypedUrlSpecifics.visit_transitions)
  return visit_transitions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TypedUrlSpecifics::mutable_visit_transitions() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.TypedUrlSpecifics.visit_transitions)
  return &visit_transitions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_typed_5furl_5fspecifics_2eproto
