// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_type_state.proto

#include "model_type_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataTypeContext_sync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataTypeProgressMarker_sync_2eproto;
namespace sync_pb {
class ModelTypeStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelTypeState> _instance;
} _ModelTypeState_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_ModelTypeState_model_5ftype_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_ModelTypeState_default_instance_;
    new (ptr) ::sync_pb::ModelTypeState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::ModelTypeState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelTypeState_model_5ftype_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ModelTypeState_model_5ftype_5fstate_2eproto}, {
      &scc_info_DataTypeProgressMarker_sync_2eproto.base,
      &scc_info_DataTypeContext_sync_2eproto.base,}};

namespace sync_pb {

// ===================================================================

void ModelTypeState::InitAsDefaultInstance() {
  ::sync_pb::_ModelTypeState_default_instance_._instance.get_mutable()->progress_marker_ = const_cast< ::sync_pb::DataTypeProgressMarker*>(
      ::sync_pb::DataTypeProgressMarker::internal_default_instance());
  ::sync_pb::_ModelTypeState_default_instance_._instance.get_mutable()->type_context_ = const_cast< ::sync_pb::DataTypeContext*>(
      ::sync_pb::DataTypeContext::internal_default_instance());
}
class ModelTypeState::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelTypeState>()._has_bits_);
  static const ::sync_pb::DataTypeProgressMarker& progress_marker(const ModelTypeState* msg);
  static void set_has_progress_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sync_pb::DataTypeContext& type_context(const ModelTypeState* msg);
  static void set_has_type_context(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encryption_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_sync_done(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cache_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_authenticated_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::DataTypeProgressMarker&
ModelTypeState::_Internal::progress_marker(const ModelTypeState* msg) {
  return *msg->progress_marker_;
}
const ::sync_pb::DataTypeContext&
ModelTypeState::_Internal::type_context(const ModelTypeState* msg) {
  return *msg->type_context_;
}
void ModelTypeState::clear_progress_marker() {
  if (progress_marker_ != nullptr) progress_marker_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ModelTypeState::clear_type_context() {
  if (type_context_ != nullptr) type_context_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ModelTypeState::ModelTypeState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ModelTypeState)
}
ModelTypeState::ModelTypeState(const ModelTypeState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encryption_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_key_name()) {
    encryption_key_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_key_name_);
  }
  cache_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_guid()) {
    cache_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
  }
  authenticated_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_authenticated_account_id()) {
    authenticated_account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.authenticated_account_id_);
  }
  if (from.has_progress_marker()) {
    progress_marker_ = new ::sync_pb::DataTypeProgressMarker(*from.progress_marker_);
  } else {
    progress_marker_ = nullptr;
  }
  if (from.has_type_context()) {
    type_context_ = new ::sync_pb::DataTypeContext(*from.type_context_);
  } else {
    type_context_ = nullptr;
  }
  initial_sync_done_ = from.initial_sync_done_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ModelTypeState)
}

void ModelTypeState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelTypeState_model_5ftype_5fstate_2eproto.base);
  encryption_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authenticated_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_marker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_sync_done_) -
      reinterpret_cast<char*>(&progress_marker_)) + sizeof(initial_sync_done_));
}

ModelTypeState::~ModelTypeState() {
  // @@protoc_insertion_point(destructor:sync_pb.ModelTypeState)
  SharedDtor();
}

void ModelTypeState::SharedDtor() {
  encryption_key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cache_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authenticated_account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete progress_marker_;
  if (this != internal_default_instance()) delete type_context_;
}

void ModelTypeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelTypeState& ModelTypeState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelTypeState_model_5ftype_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ModelTypeState::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ModelTypeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      encryption_key_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cache_guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      authenticated_account_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(progress_marker_ != nullptr);
      progress_marker_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(type_context_ != nullptr);
      type_context_->Clear();
    }
  }
  initial_sync_done_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelTypeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_progress_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.DataTypeContext type_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_type_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string encryption_key_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encryption_key_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool initial_sync_done = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_initial_sync_done(&has_bits);
          initial_sync_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cache_guid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cache_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string authenticated_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_authenticated_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelTypeState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ModelTypeState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_progress_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DataTypeContext type_context = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_type_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encryption_key_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_encryption_key_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool initial_sync_done = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_initial_sync_done(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initial_sync_done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cache_guid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string authenticated_account_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_authenticated_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ModelTypeState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ModelTypeState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelTypeState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ModelTypeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::progress_marker(this), output);
  }

  // optional .sync_pb.DataTypeContext type_context = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::type_context(this), output);
  }

  // optional string encryption_key_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->encryption_key_name(), output);
  }

  // optional bool initial_sync_done = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->initial_sync_done(), output);
  }

  // optional string cache_guid = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cache_guid(), output);
  }

  // optional string authenticated_account_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->authenticated_account_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ModelTypeState)
}

size_t ModelTypeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ModelTypeState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string encryption_key_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->encryption_key_name());
    }

    // optional string cache_guid = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cache_guid());
    }

    // optional string authenticated_account_id = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->authenticated_account_id());
    }

    // optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *progress_marker_);
    }

    // optional .sync_pb.DataTypeContext type_context = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_context_);
    }

    // optional bool initial_sync_done = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelTypeState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ModelTypeState*>(
      &from));
}

void ModelTypeState::MergeFrom(const ModelTypeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ModelTypeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encryption_key_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_key_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cache_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      authenticated_account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.authenticated_account_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_progress_marker()->::sync_pb::DataTypeProgressMarker::MergeFrom(from.progress_marker());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_type_context()->::sync_pb::DataTypeContext::MergeFrom(from.type_context());
    }
    if (cached_has_bits & 0x00000020u) {
      initial_sync_done_ = from.initial_sync_done_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelTypeState::CopyFrom(const ModelTypeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ModelTypeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTypeState::IsInitialized() const {
  return true;
}

void ModelTypeState::InternalSwap(ModelTypeState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encryption_key_name_.Swap(&other->encryption_key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cache_guid_.Swap(&other->cache_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  authenticated_account_id_.Swap(&other->authenticated_account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_marker_, other->progress_marker_);
  swap(type_context_, other->type_context_);
  swap(initial_sync_done_, other->initial_sync_done_);
}

std::string ModelTypeState::GetTypeName() const {
  return "sync_pb.ModelTypeState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::ModelTypeState* Arena::CreateMaybeMessage< ::sync_pb::ModelTypeState >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::ModelTypeState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
