// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: history_delete_directive_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_history_5fdelete_5fdirective_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_history_5fdelete_5fdirective_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_history_5fdelete_5fdirective_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_history_5fdelete_5fdirective_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class GlobalIdDirective;
class GlobalIdDirectiveDefaultTypeInternal;
extern GlobalIdDirectiveDefaultTypeInternal _GlobalIdDirective_default_instance_;
class HistoryDeleteDirectiveSpecifics;
class HistoryDeleteDirectiveSpecificsDefaultTypeInternal;
extern HistoryDeleteDirectiveSpecificsDefaultTypeInternal _HistoryDeleteDirectiveSpecifics_default_instance_;
class TimeRangeDirective;
class TimeRangeDirectiveDefaultTypeInternal;
extern TimeRangeDirectiveDefaultTypeInternal _TimeRangeDirective_default_instance_;
class UrlDirective;
class UrlDirectiveDefaultTypeInternal;
extern UrlDirectiveDefaultTypeInternal _UrlDirective_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::GlobalIdDirective* Arena::CreateMaybeMessage<::sync_pb::GlobalIdDirective>(Arena*);
template<> ::sync_pb::HistoryDeleteDirectiveSpecifics* Arena::CreateMaybeMessage<::sync_pb::HistoryDeleteDirectiveSpecifics>(Arena*);
template<> ::sync_pb::TimeRangeDirective* Arena::CreateMaybeMessage<::sync_pb::TimeRangeDirective>(Arena*);
template<> ::sync_pb::UrlDirective* Arena::CreateMaybeMessage<::sync_pb::UrlDirective>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class HistoryDeleteDirectiveSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.HistoryDeleteDirectiveSpecifics) */ {
 public:
  HistoryDeleteDirectiveSpecifics();
  virtual ~HistoryDeleteDirectiveSpecifics();

  HistoryDeleteDirectiveSpecifics(const HistoryDeleteDirectiveSpecifics& from);
  HistoryDeleteDirectiveSpecifics(HistoryDeleteDirectiveSpecifics&& from) noexcept
    : HistoryDeleteDirectiveSpecifics() {
    *this = ::std::move(from);
  }

  inline HistoryDeleteDirectiveSpecifics& operator=(const HistoryDeleteDirectiveSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryDeleteDirectiveSpecifics& operator=(HistoryDeleteDirectiveSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HistoryDeleteDirectiveSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryDeleteDirectiveSpecifics* internal_default_instance() {
    return reinterpret_cast<const HistoryDeleteDirectiveSpecifics*>(
               &_HistoryDeleteDirectiveSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HistoryDeleteDirectiveSpecifics& a, HistoryDeleteDirectiveSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryDeleteDirectiveSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryDeleteDirectiveSpecifics* New() const final {
    return CreateMaybeMessage<HistoryDeleteDirectiveSpecifics>(nullptr);
  }

  HistoryDeleteDirectiveSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryDeleteDirectiveSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HistoryDeleteDirectiveSpecifics& from);
  void MergeFrom(const HistoryDeleteDirectiveSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HistoryDeleteDirectiveSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.HistoryDeleteDirectiveSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalIdDirectiveFieldNumber = 1,
    kTimeRangeDirectiveFieldNumber = 2,
    kUrlDirectiveFieldNumber = 3,
  };
  // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
  bool has_global_id_directive() const;
  void clear_global_id_directive();
  const ::sync_pb::GlobalIdDirective& global_id_directive() const;
  ::sync_pb::GlobalIdDirective* release_global_id_directive();
  ::sync_pb::GlobalIdDirective* mutable_global_id_directive();
  void set_allocated_global_id_directive(::sync_pb::GlobalIdDirective* global_id_directive);

  // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
  bool has_time_range_directive() const;
  void clear_time_range_directive();
  const ::sync_pb::TimeRangeDirective& time_range_directive() const;
  ::sync_pb::TimeRangeDirective* release_time_range_directive();
  ::sync_pb::TimeRangeDirective* mutable_time_range_directive();
  void set_allocated_time_range_directive(::sync_pb::TimeRangeDirective* time_range_directive);

  // optional .sync_pb.UrlDirective url_directive = 3;
  bool has_url_directive() const;
  void clear_url_directive();
  const ::sync_pb::UrlDirective& url_directive() const;
  ::sync_pb::UrlDirective* release_url_directive();
  ::sync_pb::UrlDirective* mutable_url_directive();
  void set_allocated_url_directive(::sync_pb::UrlDirective* url_directive);

  // @@protoc_insertion_point(class_scope:sync_pb.HistoryDeleteDirectiveSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::GlobalIdDirective* global_id_directive_;
  ::sync_pb::TimeRangeDirective* time_range_directive_;
  ::sync_pb::UrlDirective* url_directive_;
  friend struct ::TableStruct_history_5fdelete_5fdirective_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class GlobalIdDirective :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GlobalIdDirective) */ {
 public:
  GlobalIdDirective();
  virtual ~GlobalIdDirective();

  GlobalIdDirective(const GlobalIdDirective& from);
  GlobalIdDirective(GlobalIdDirective&& from) noexcept
    : GlobalIdDirective() {
    *this = ::std::move(from);
  }

  inline GlobalIdDirective& operator=(const GlobalIdDirective& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalIdDirective& operator=(GlobalIdDirective&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalIdDirective& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalIdDirective* internal_default_instance() {
    return reinterpret_cast<const GlobalIdDirective*>(
               &_GlobalIdDirective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GlobalIdDirective& a, GlobalIdDirective& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalIdDirective* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalIdDirective* New() const final {
    return CreateMaybeMessage<GlobalIdDirective>(nullptr);
  }

  GlobalIdDirective* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalIdDirective>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalIdDirective& from);
  void MergeFrom(const GlobalIdDirective& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalIdDirective* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GlobalIdDirective";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalIdFieldNumber = 1,
    kStartTimeUsecFieldNumber = 2,
    kEndTimeUsecFieldNumber = 3,
  };
  // repeated int64 global_id = 1;
  int global_id_size() const;
  void clear_global_id();
  ::PROTOBUF_NAMESPACE_ID::int64 global_id(int index) const;
  void set_global_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_global_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      global_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_global_id();

  // optional int64 start_time_usec = 2;
  bool has_start_time_usec() const;
  void clear_start_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_usec() const;
  void set_start_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 end_time_usec = 3;
  bool has_end_time_usec() const;
  void clear_end_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_usec() const;
  void set_end_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.GlobalIdDirective)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > global_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_usec_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_usec_;
  friend struct ::TableStruct_history_5fdelete_5fdirective_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class TimeRangeDirective :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.TimeRangeDirective) */ {
 public:
  TimeRangeDirective();
  virtual ~TimeRangeDirective();

  TimeRangeDirective(const TimeRangeDirective& from);
  TimeRangeDirective(TimeRangeDirective&& from) noexcept
    : TimeRangeDirective() {
    *this = ::std::move(from);
  }

  inline TimeRangeDirective& operator=(const TimeRangeDirective& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRangeDirective& operator=(TimeRangeDirective&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TimeRangeDirective& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeRangeDirective* internal_default_instance() {
    return reinterpret_cast<const TimeRangeDirective*>(
               &_TimeRangeDirective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeRangeDirective& a, TimeRangeDirective& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeRangeDirective* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeRangeDirective* New() const final {
    return CreateMaybeMessage<TimeRangeDirective>(nullptr);
  }

  TimeRangeDirective* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeRangeDirective>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TimeRangeDirective& from);
  void MergeFrom(const TimeRangeDirective& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeRangeDirective* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.TimeRangeDirective";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeUsecFieldNumber = 1,
    kEndTimeUsecFieldNumber = 2,
  };
  // optional int64 start_time_usec = 1;
  bool has_start_time_usec() const;
  void clear_start_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_usec() const;
  void set_start_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 end_time_usec = 2;
  bool has_end_time_usec() const;
  void clear_end_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_usec() const;
  void set_end_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.TimeRangeDirective)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_usec_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_usec_;
  friend struct ::TableStruct_history_5fdelete_5fdirective_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UrlDirective :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UrlDirective) */ {
 public:
  UrlDirective();
  virtual ~UrlDirective();

  UrlDirective(const UrlDirective& from);
  UrlDirective(UrlDirective&& from) noexcept
    : UrlDirective() {
    *this = ::std::move(from);
  }

  inline UrlDirective& operator=(const UrlDirective& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrlDirective& operator=(UrlDirective&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UrlDirective& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UrlDirective* internal_default_instance() {
    return reinterpret_cast<const UrlDirective*>(
               &_UrlDirective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UrlDirective& a, UrlDirective& b) {
    a.Swap(&b);
  }
  inline void Swap(UrlDirective* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UrlDirective* New() const final {
    return CreateMaybeMessage<UrlDirective>(nullptr);
  }

  UrlDirective* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UrlDirective>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UrlDirective& from);
  void MergeFrom(const UrlDirective& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UrlDirective* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UrlDirective";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kEndTimeUsecFieldNumber = 2,
  };
  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional int64 end_time_usec = 2;
  bool has_end_time_usec() const;
  void clear_end_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_usec() const;
  void set_end_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.UrlDirective)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_usec_;
  friend struct ::TableStruct_history_5fdelete_5fdirective_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HistoryDeleteDirectiveSpecifics

// optional .sync_pb.GlobalIdDirective global_id_directive = 1;
inline bool HistoryDeleteDirectiveSpecifics::has_global_id_directive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HistoryDeleteDirectiveSpecifics::clear_global_id_directive() {
  if (global_id_directive_ != nullptr) global_id_directive_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sync_pb::GlobalIdDirective& HistoryDeleteDirectiveSpecifics::global_id_directive() const {
  const ::sync_pb::GlobalIdDirective* p = global_id_directive_;
  // @@protoc_insertion_point(field_get:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::GlobalIdDirective*>(
      &::sync_pb::_GlobalIdDirective_default_instance_);
}
inline ::sync_pb::GlobalIdDirective* HistoryDeleteDirectiveSpecifics::release_global_id_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::GlobalIdDirective* temp = global_id_directive_;
  global_id_directive_ = nullptr;
  return temp;
}
inline ::sync_pb::GlobalIdDirective* HistoryDeleteDirectiveSpecifics::mutable_global_id_directive() {
  _has_bits_[0] |= 0x00000001u;
  if (global_id_directive_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GlobalIdDirective>(GetArenaNoVirtual());
    global_id_directive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
  return global_id_directive_;
}
inline void HistoryDeleteDirectiveSpecifics::set_allocated_global_id_directive(::sync_pb::GlobalIdDirective* global_id_directive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_id_directive_;
  }
  if (global_id_directive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_id_directive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_id_directive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  global_id_directive_ = global_id_directive;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
}

// optional .sync_pb.TimeRangeDirective time_range_directive = 2;
inline bool HistoryDeleteDirectiveSpecifics::has_time_range_directive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HistoryDeleteDirectiveSpecifics::clear_time_range_directive() {
  if (time_range_directive_ != nullptr) time_range_directive_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::TimeRangeDirective& HistoryDeleteDirectiveSpecifics::time_range_directive() const {
  const ::sync_pb::TimeRangeDirective* p = time_range_directive_;
  // @@protoc_insertion_point(field_get:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::TimeRangeDirective*>(
      &::sync_pb::_TimeRangeDirective_default_instance_);
}
inline ::sync_pb::TimeRangeDirective* HistoryDeleteDirectiveSpecifics::release_time_range_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::TimeRangeDirective* temp = time_range_directive_;
  time_range_directive_ = nullptr;
  return temp;
}
inline ::sync_pb::TimeRangeDirective* HistoryDeleteDirectiveSpecifics::mutable_time_range_directive() {
  _has_bits_[0] |= 0x00000002u;
  if (time_range_directive_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::TimeRangeDirective>(GetArenaNoVirtual());
    time_range_directive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
  return time_range_directive_;
}
inline void HistoryDeleteDirectiveSpecifics::set_allocated_time_range_directive(::sync_pb::TimeRangeDirective* time_range_directive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_range_directive_;
  }
  if (time_range_directive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_range_directive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_range_directive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  time_range_directive_ = time_range_directive;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
}

// optional .sync_pb.UrlDirective url_directive = 3;
inline bool HistoryDeleteDirectiveSpecifics::has_url_directive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HistoryDeleteDirectiveSpecifics::clear_url_directive() {
  if (url_directive_ != nullptr) url_directive_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::UrlDirective& HistoryDeleteDirectiveSpecifics::url_directive() const {
  const ::sync_pb::UrlDirective* p = url_directive_;
  // @@protoc_insertion_point(field_get:sync_pb.HistoryDeleteDirectiveSpecifics.url_directive)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::UrlDirective*>(
      &::sync_pb::_UrlDirective_default_instance_);
}
inline ::sync_pb::UrlDirective* HistoryDeleteDirectiveSpecifics::release_url_directive() {
  // @@protoc_insertion_point(field_release:sync_pb.HistoryDeleteDirectiveSpecifics.url_directive)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::UrlDirective* temp = url_directive_;
  url_directive_ = nullptr;
  return temp;
}
inline ::sync_pb::UrlDirective* HistoryDeleteDirectiveSpecifics::mutable_url_directive() {
  _has_bits_[0] |= 0x00000004u;
  if (url_directive_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::UrlDirective>(GetArenaNoVirtual());
    url_directive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.HistoryDeleteDirectiveSpecifics.url_directive)
  return url_directive_;
}
inline void HistoryDeleteDirectiveSpecifics::set_allocated_url_directive(::sync_pb::UrlDirective* url_directive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete url_directive_;
  }
  if (url_directive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      url_directive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, url_directive, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_directive_ = url_directive;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.HistoryDeleteDirectiveSpecifics.url_directive)
}

// -------------------------------------------------------------------

// GlobalIdDirective

// repeated int64 global_id = 1;
inline int GlobalIdDirective::global_id_size() const {
  return global_id_.size();
}
inline void GlobalIdDirective::clear_global_id() {
  global_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GlobalIdDirective::global_id(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.GlobalIdDirective.global_id)
  return global_id_.Get(index);
}
inline void GlobalIdDirective::set_global_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  global_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.GlobalIdDirective.global_id)
}
inline void GlobalIdDirective::add_global_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  global_id_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.GlobalIdDirective.global_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GlobalIdDirective::global_id() const {
  // @@protoc_insertion_point(field_list:sync_pb.GlobalIdDirective.global_id)
  return global_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GlobalIdDirective::mutable_global_id() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.GlobalIdDirective.global_id)
  return &global_id_;
}

// optional int64 start_time_usec = 2;
inline bool GlobalIdDirective::has_start_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalIdDirective::clear_start_time_usec() {
  start_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GlobalIdDirective::start_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.GlobalIdDirective.start_time_usec)
  return start_time_usec_;
}
inline void GlobalIdDirective::set_start_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  start_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GlobalIdDirective.start_time_usec)
}

// optional int64 end_time_usec = 3;
inline bool GlobalIdDirective::has_end_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalIdDirective::clear_end_time_usec() {
  end_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GlobalIdDirective::end_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.GlobalIdDirective.end_time_usec)
  return end_time_usec_;
}
inline void GlobalIdDirective::set_end_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.GlobalIdDirective.end_time_usec)
}

// -------------------------------------------------------------------

// TimeRangeDirective

// optional int64 start_time_usec = 1;
inline bool TimeRangeDirective::has_start_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeRangeDirective::clear_start_time_usec() {
  start_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeRangeDirective::start_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.TimeRangeDirective.start_time_usec)
  return start_time_usec_;
}
inline void TimeRangeDirective::set_start_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  start_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TimeRangeDirective.start_time_usec)
}

// optional int64 end_time_usec = 2;
inline bool TimeRangeDirective::has_end_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeRangeDirective::clear_end_time_usec() {
  end_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeRangeDirective::end_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.TimeRangeDirective.end_time_usec)
  return end_time_usec_;
}
inline void TimeRangeDirective::set_end_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TimeRangeDirective.end_time_usec)
}

// -------------------------------------------------------------------

// UrlDirective

// optional string url = 1;
inline bool UrlDirective::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UrlDirective::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UrlDirective::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.UrlDirective.url)
  return url_.GetNoArena();
}
inline void UrlDirective::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UrlDirective.url)
}
inline void UrlDirective::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UrlDirective.url)
}
inline void UrlDirective::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UrlDirective.url)
}
inline void UrlDirective::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UrlDirective.url)
}
inline std::string* UrlDirective::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UrlDirective.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UrlDirective::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.UrlDirective.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UrlDirective::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UrlDirective.url)
}

// optional int64 end_time_usec = 2;
inline bool UrlDirective::has_end_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UrlDirective::clear_end_time_usec() {
  end_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UrlDirective::end_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UrlDirective.end_time_usec)
  return end_time_usec_;
}
inline void UrlDirective::set_end_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UrlDirective.end_time_usec)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_history_5fdelete_5fdirective_5fspecifics_2eproto
