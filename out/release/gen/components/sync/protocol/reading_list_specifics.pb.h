// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reading_list_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_reading_5flist_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_reading_5flist_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_reading_5flist_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_reading_5flist_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class ReadingListSpecifics;
class ReadingListSpecificsDefaultTypeInternal;
extern ReadingListSpecificsDefaultTypeInternal _ReadingListSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::ReadingListSpecifics* Arena::CreateMaybeMessage<::sync_pb::ReadingListSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum ReadingListSpecifics_ReadingListEntryStatus : int {
  ReadingListSpecifics_ReadingListEntryStatus_UNREAD = 0,
  ReadingListSpecifics_ReadingListEntryStatus_READ = 1,
  ReadingListSpecifics_ReadingListEntryStatus_UNSEEN = 2
};
bool ReadingListSpecifics_ReadingListEntryStatus_IsValid(int value);
constexpr ReadingListSpecifics_ReadingListEntryStatus ReadingListSpecifics_ReadingListEntryStatus_ReadingListEntryStatus_MIN = ReadingListSpecifics_ReadingListEntryStatus_UNREAD;
constexpr ReadingListSpecifics_ReadingListEntryStatus ReadingListSpecifics_ReadingListEntryStatus_ReadingListEntryStatus_MAX = ReadingListSpecifics_ReadingListEntryStatus_UNSEEN;
constexpr int ReadingListSpecifics_ReadingListEntryStatus_ReadingListEntryStatus_ARRAYSIZE = ReadingListSpecifics_ReadingListEntryStatus_ReadingListEntryStatus_MAX + 1;

const std::string& ReadingListSpecifics_ReadingListEntryStatus_Name(ReadingListSpecifics_ReadingListEntryStatus value);
template<typename T>
inline const std::string& ReadingListSpecifics_ReadingListEntryStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadingListSpecifics_ReadingListEntryStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadingListSpecifics_ReadingListEntryStatus_Name.");
  return ReadingListSpecifics_ReadingListEntryStatus_Name(static_cast<ReadingListSpecifics_ReadingListEntryStatus>(enum_t_value));
}
bool ReadingListSpecifics_ReadingListEntryStatus_Parse(
    const std::string& name, ReadingListSpecifics_ReadingListEntryStatus* value);
// ===================================================================

class ReadingListSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ReadingListSpecifics) */ {
 public:
  ReadingListSpecifics();
  virtual ~ReadingListSpecifics();

  ReadingListSpecifics(const ReadingListSpecifics& from);
  ReadingListSpecifics(ReadingListSpecifics&& from) noexcept
    : ReadingListSpecifics() {
    *this = ::std::move(from);
  }

  inline ReadingListSpecifics& operator=(const ReadingListSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingListSpecifics& operator=(ReadingListSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReadingListSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadingListSpecifics* internal_default_instance() {
    return reinterpret_cast<const ReadingListSpecifics*>(
               &_ReadingListSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadingListSpecifics& a, ReadingListSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingListSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingListSpecifics* New() const final {
    return CreateMaybeMessage<ReadingListSpecifics>(nullptr);
  }

  ReadingListSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingListSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReadingListSpecifics& from);
  void MergeFrom(const ReadingListSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadingListSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ReadingListSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ReadingListSpecifics_ReadingListEntryStatus ReadingListEntryStatus;
  static constexpr ReadingListEntryStatus UNREAD =
    ReadingListSpecifics_ReadingListEntryStatus_UNREAD;
  static constexpr ReadingListEntryStatus READ =
    ReadingListSpecifics_ReadingListEntryStatus_READ;
  static constexpr ReadingListEntryStatus UNSEEN =
    ReadingListSpecifics_ReadingListEntryStatus_UNSEEN;
  static inline bool ReadingListEntryStatus_IsValid(int value) {
    return ReadingListSpecifics_ReadingListEntryStatus_IsValid(value);
  }
  static constexpr ReadingListEntryStatus ReadingListEntryStatus_MIN =
    ReadingListSpecifics_ReadingListEntryStatus_ReadingListEntryStatus_MIN;
  static constexpr ReadingListEntryStatus ReadingListEntryStatus_MAX =
    ReadingListSpecifics_ReadingListEntryStatus_ReadingListEntryStatus_MAX;
  static constexpr int ReadingListEntryStatus_ARRAYSIZE =
    ReadingListSpecifics_ReadingListEntryStatus_ReadingListEntryStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ReadingListEntryStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReadingListEntryStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReadingListEntryStatus_Name.");
    return ReadingListSpecifics_ReadingListEntryStatus_Name(enum_t_value);
  }
  static inline bool ReadingListEntryStatus_Parse(const std::string& name,
      ReadingListEntryStatus* value) {
    return ReadingListSpecifics_ReadingListEntryStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntryIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kUrlFieldNumber = 3,
    kCreationTimeUsFieldNumber = 4,
    kUpdateTimeUsFieldNumber = 5,
    kFirstReadTimeUsFieldNumber = 7,
    kUpdateTitleTimeUsFieldNumber = 8,
    kStatusFieldNumber = 6,
  };
  // optional string entry_id = 1;
  bool has_entry_id() const;
  void clear_entry_id();
  const std::string& entry_id() const;
  void set_entry_id(const std::string& value);
  void set_entry_id(std::string&& value);
  void set_entry_id(const char* value);
  void set_entry_id(const char* value, size_t size);
  std::string* mutable_entry_id();
  std::string* release_entry_id();
  void set_allocated_entry_id(std::string* entry_id);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional int64 creation_time_us = 4;
  bool has_creation_time_us() const;
  void clear_creation_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_us() const;
  void set_creation_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 update_time_us = 5;
  bool has_update_time_us() const;
  void clear_update_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 update_time_us() const;
  void set_update_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 first_read_time_us = 7;
  bool has_first_read_time_us() const;
  void clear_first_read_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 first_read_time_us() const;
  void set_first_read_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 update_title_time_us = 8;
  bool has_update_title_time_us() const;
  void clear_update_title_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 update_title_time_us() const;
  void set_update_title_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .sync_pb.ReadingListSpecifics.ReadingListEntryStatus status = 6;
  bool has_status() const;
  void clear_status();
  ::sync_pb::ReadingListSpecifics_ReadingListEntryStatus status() const;
  void set_status(::sync_pb::ReadingListSpecifics_ReadingListEntryStatus value);

  // @@protoc_insertion_point(class_scope:sync_pb.ReadingListSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entry_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 update_time_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 first_read_time_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 update_title_time_us_;
  int status_;
  friend struct ::TableStruct_reading_5flist_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadingListSpecifics

// optional string entry_id = 1;
inline bool ReadingListSpecifics::has_entry_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadingListSpecifics::clear_entry_id() {
  entry_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadingListSpecifics::entry_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReadingListSpecifics.entry_id)
  return entry_id_.GetNoArena();
}
inline void ReadingListSpecifics::set_entry_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entry_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ReadingListSpecifics.entry_id)
}
inline void ReadingListSpecifics::set_entry_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  entry_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ReadingListSpecifics.entry_id)
}
inline void ReadingListSpecifics::set_entry_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  entry_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ReadingListSpecifics.entry_id)
}
inline void ReadingListSpecifics::set_entry_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  entry_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ReadingListSpecifics.entry_id)
}
inline std::string* ReadingListSpecifics::mutable_entry_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ReadingListSpecifics.entry_id)
  return entry_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadingListSpecifics::release_entry_id() {
  // @@protoc_insertion_point(field_release:sync_pb.ReadingListSpecifics.entry_id)
  if (!has_entry_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return entry_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadingListSpecifics::set_allocated_entry_id(std::string* entry_id) {
  if (entry_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entry_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entry_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ReadingListSpecifics.entry_id)
}

// optional string title = 2;
inline bool ReadingListSpecifics::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadingListSpecifics::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReadingListSpecifics::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReadingListSpecifics.title)
  return title_.GetNoArena();
}
inline void ReadingListSpecifics::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ReadingListSpecifics.title)
}
inline void ReadingListSpecifics::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ReadingListSpecifics.title)
}
inline void ReadingListSpecifics::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ReadingListSpecifics.title)
}
inline void ReadingListSpecifics::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ReadingListSpecifics.title)
}
inline std::string* ReadingListSpecifics::mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ReadingListSpecifics.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadingListSpecifics::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.ReadingListSpecifics.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadingListSpecifics::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ReadingListSpecifics.title)
}

// optional string url = 3;
inline bool ReadingListSpecifics::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadingListSpecifics::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ReadingListSpecifics::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReadingListSpecifics.url)
  return url_.GetNoArena();
}
inline void ReadingListSpecifics::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ReadingListSpecifics.url)
}
inline void ReadingListSpecifics::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ReadingListSpecifics.url)
}
inline void ReadingListSpecifics::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ReadingListSpecifics.url)
}
inline void ReadingListSpecifics::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ReadingListSpecifics.url)
}
inline std::string* ReadingListSpecifics::mutable_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ReadingListSpecifics.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadingListSpecifics::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.ReadingListSpecifics.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadingListSpecifics::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ReadingListSpecifics.url)
}

// optional int64 creation_time_us = 4;
inline bool ReadingListSpecifics::has_creation_time_us() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadingListSpecifics::clear_creation_time_us() {
  creation_time_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListSpecifics::creation_time_us() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReadingListSpecifics.creation_time_us)
  return creation_time_us_;
}
inline void ReadingListSpecifics::set_creation_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  creation_time_us_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ReadingListSpecifics.creation_time_us)
}

// optional int64 update_time_us = 5;
inline bool ReadingListSpecifics::has_update_time_us() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReadingListSpecifics::clear_update_time_us() {
  update_time_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListSpecifics::update_time_us() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReadingListSpecifics.update_time_us)
  return update_time_us_;
}
inline void ReadingListSpecifics::set_update_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  update_time_us_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ReadingListSpecifics.update_time_us)
}

// optional int64 first_read_time_us = 7;
inline bool ReadingListSpecifics::has_first_read_time_us() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReadingListSpecifics::clear_first_read_time_us() {
  first_read_time_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListSpecifics::first_read_time_us() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReadingListSpecifics.first_read_time_us)
  return first_read_time_us_;
}
inline void ReadingListSpecifics::set_first_read_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  first_read_time_us_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ReadingListSpecifics.first_read_time_us)
}

// optional int64 update_title_time_us = 8;
inline bool ReadingListSpecifics::has_update_title_time_us() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReadingListSpecifics::clear_update_title_time_us() {
  update_title_time_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListSpecifics::update_title_time_us() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReadingListSpecifics.update_title_time_us)
  return update_title_time_us_;
}
inline void ReadingListSpecifics::set_update_title_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  update_title_time_us_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ReadingListSpecifics.update_title_time_us)
}

// optional .sync_pb.ReadingListSpecifics.ReadingListEntryStatus status = 6;
inline bool ReadingListSpecifics::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReadingListSpecifics::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::sync_pb::ReadingListSpecifics_ReadingListEntryStatus ReadingListSpecifics::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReadingListSpecifics.status)
  return static_cast< ::sync_pb::ReadingListSpecifics_ReadingListEntryStatus >(status_);
}
inline void ReadingListSpecifics::set_status(::sync_pb::ReadingListSpecifics_ReadingListEntryStatus value) {
  assert(::sync_pb::ReadingListSpecifics_ReadingListEntryStatus_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ReadingListSpecifics.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::ReadingListSpecifics_ReadingListEntryStatus> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_reading_5flist_5fspecifics_2eproto
