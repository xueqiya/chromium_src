// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unique_position.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_unique_5fposition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_unique_5fposition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_unique_5fposition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_unique_5fposition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class UniquePosition;
class UniquePositionDefaultTypeInternal;
extern UniquePositionDefaultTypeInternal _UniquePosition_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::UniquePosition* Arena::CreateMaybeMessage<::sync_pb::UniquePosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class UniquePosition :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UniquePosition) */ {
 public:
  UniquePosition();
  virtual ~UniquePosition();

  UniquePosition(const UniquePosition& from);
  UniquePosition(UniquePosition&& from) noexcept
    : UniquePosition() {
    *this = ::std::move(from);
  }

  inline UniquePosition& operator=(const UniquePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniquePosition& operator=(UniquePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UniquePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniquePosition* internal_default_instance() {
    return reinterpret_cast<const UniquePosition*>(
               &_UniquePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UniquePosition& a, UniquePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(UniquePosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniquePosition* New() const final {
    return CreateMaybeMessage<UniquePosition>(nullptr);
  }

  UniquePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniquePosition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UniquePosition& from);
  void MergeFrom(const UniquePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UniquePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UniquePosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCompressedValueFieldNumber = 2,
    kCustomCompressedV1FieldNumber = 4,
    kUncompressedLengthFieldNumber = 3,
  };
  // optional bytes value = 1;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // optional bytes compressed_value = 2;
  bool has_compressed_value() const;
  void clear_compressed_value();
  const std::string& compressed_value() const;
  void set_compressed_value(const std::string& value);
  void set_compressed_value(std::string&& value);
  void set_compressed_value(const char* value);
  void set_compressed_value(const void* value, size_t size);
  std::string* mutable_compressed_value();
  std::string* release_compressed_value();
  void set_allocated_compressed_value(std::string* compressed_value);

  // optional bytes custom_compressed_v1 = 4;
  bool has_custom_compressed_v1() const;
  void clear_custom_compressed_v1();
  const std::string& custom_compressed_v1() const;
  void set_custom_compressed_v1(const std::string& value);
  void set_custom_compressed_v1(std::string&& value);
  void set_custom_compressed_v1(const char* value);
  void set_custom_compressed_v1(const void* value, size_t size);
  std::string* mutable_custom_compressed_v1();
  std::string* release_custom_compressed_v1();
  void set_allocated_custom_compressed_v1(std::string* custom_compressed_v1);

  // optional uint64 uncompressed_length = 3;
  bool has_uncompressed_length() const;
  void clear_uncompressed_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 uncompressed_length() const;
  void set_uncompressed_length(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.UniquePosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_compressed_v1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uncompressed_length_;
  friend struct ::TableStruct_unique_5fposition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UniquePosition

// optional bytes value = 1;
inline bool UniquePosition::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UniquePosition::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UniquePosition::value() const {
  // @@protoc_insertion_point(field_get:sync_pb.UniquePosition.value)
  return value_.GetNoArena();
}
inline void UniquePosition::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UniquePosition.value)
}
inline void UniquePosition::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UniquePosition.value)
}
inline void UniquePosition::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UniquePosition.value)
}
inline void UniquePosition::set_value(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UniquePosition.value)
}
inline std::string* UniquePosition::mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UniquePosition.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniquePosition::release_value() {
  // @@protoc_insertion_point(field_release:sync_pb.UniquePosition.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniquePosition::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UniquePosition.value)
}

// optional bytes compressed_value = 2;
inline bool UniquePosition::has_compressed_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UniquePosition::clear_compressed_value() {
  compressed_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UniquePosition::compressed_value() const {
  // @@protoc_insertion_point(field_get:sync_pb.UniquePosition.compressed_value)
  return compressed_value_.GetNoArena();
}
inline void UniquePosition::set_compressed_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  compressed_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UniquePosition.compressed_value)
}
inline void UniquePosition::set_compressed_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  compressed_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UniquePosition.compressed_value)
}
inline void UniquePosition::set_compressed_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  compressed_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UniquePosition.compressed_value)
}
inline void UniquePosition::set_compressed_value(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  compressed_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UniquePosition.compressed_value)
}
inline std::string* UniquePosition::mutable_compressed_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UniquePosition.compressed_value)
  return compressed_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniquePosition::release_compressed_value() {
  // @@protoc_insertion_point(field_release:sync_pb.UniquePosition.compressed_value)
  if (!has_compressed_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return compressed_value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniquePosition::set_allocated_compressed_value(std::string* compressed_value) {
  if (compressed_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  compressed_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compressed_value);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UniquePosition.compressed_value)
}

// optional uint64 uncompressed_length = 3;
inline bool UniquePosition::has_uncompressed_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UniquePosition::clear_uncompressed_length() {
  uncompressed_length_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniquePosition::uncompressed_length() const {
  // @@protoc_insertion_point(field_get:sync_pb.UniquePosition.uncompressed_length)
  return uncompressed_length_;
}
inline void UniquePosition::set_uncompressed_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  uncompressed_length_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UniquePosition.uncompressed_length)
}

// optional bytes custom_compressed_v1 = 4;
inline bool UniquePosition::has_custom_compressed_v1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UniquePosition::clear_custom_compressed_v1() {
  custom_compressed_v1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UniquePosition::custom_compressed_v1() const {
  // @@protoc_insertion_point(field_get:sync_pb.UniquePosition.custom_compressed_v1)
  return custom_compressed_v1_.GetNoArena();
}
inline void UniquePosition::set_custom_compressed_v1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_compressed_v1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UniquePosition.custom_compressed_v1)
}
inline void UniquePosition::set_custom_compressed_v1(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_compressed_v1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UniquePosition.custom_compressed_v1)
}
inline void UniquePosition::set_custom_compressed_v1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  custom_compressed_v1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UniquePosition.custom_compressed_v1)
}
inline void UniquePosition::set_custom_compressed_v1(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  custom_compressed_v1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UniquePosition.custom_compressed_v1)
}
inline std::string* UniquePosition::mutable_custom_compressed_v1() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.UniquePosition.custom_compressed_v1)
  return custom_compressed_v1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UniquePosition::release_custom_compressed_v1() {
  // @@protoc_insertion_point(field_release:sync_pb.UniquePosition.custom_compressed_v1)
  if (!has_custom_compressed_v1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return custom_compressed_v1_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UniquePosition::set_allocated_custom_compressed_v1(std::string* custom_compressed_v1) {
  if (custom_compressed_v1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  custom_compressed_v1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_compressed_v1);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UniquePosition.custom_compressed_v1)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_unique_5fposition_2eproto
