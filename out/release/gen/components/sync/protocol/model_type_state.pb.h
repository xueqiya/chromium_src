// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_type_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_5ftype_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_5ftype_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "sync.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_5ftype_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_5ftype_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class ModelTypeState;
class ModelTypeStateDefaultTypeInternal;
extern ModelTypeStateDefaultTypeInternal _ModelTypeState_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::ModelTypeState* Arena::CreateMaybeMessage<::sync_pb::ModelTypeState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class ModelTypeState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ModelTypeState) */ {
 public:
  ModelTypeState();
  virtual ~ModelTypeState();

  ModelTypeState(const ModelTypeState& from);
  ModelTypeState(ModelTypeState&& from) noexcept
    : ModelTypeState() {
    *this = ::std::move(from);
  }

  inline ModelTypeState& operator=(const ModelTypeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelTypeState& operator=(ModelTypeState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ModelTypeState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelTypeState* internal_default_instance() {
    return reinterpret_cast<const ModelTypeState*>(
               &_ModelTypeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelTypeState& a, ModelTypeState& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelTypeState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelTypeState* New() const final {
    return CreateMaybeMessage<ModelTypeState>(nullptr);
  }

  ModelTypeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelTypeState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ModelTypeState& from);
  void MergeFrom(const ModelTypeState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelTypeState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ModelTypeState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionKeyNameFieldNumber = 3,
    kCacheGuidFieldNumber = 5,
    kAuthenticatedAccountIdFieldNumber = 6,
    kProgressMarkerFieldNumber = 1,
    kTypeContextFieldNumber = 2,
    kInitialSyncDoneFieldNumber = 4,
  };
  // optional string encryption_key_name = 3;
  bool has_encryption_key_name() const;
  void clear_encryption_key_name();
  const std::string& encryption_key_name() const;
  void set_encryption_key_name(const std::string& value);
  void set_encryption_key_name(std::string&& value);
  void set_encryption_key_name(const char* value);
  void set_encryption_key_name(const char* value, size_t size);
  std::string* mutable_encryption_key_name();
  std::string* release_encryption_key_name();
  void set_allocated_encryption_key_name(std::string* encryption_key_name);

  // optional string cache_guid = 5;
  bool has_cache_guid() const;
  void clear_cache_guid();
  const std::string& cache_guid() const;
  void set_cache_guid(const std::string& value);
  void set_cache_guid(std::string&& value);
  void set_cache_guid(const char* value);
  void set_cache_guid(const char* value, size_t size);
  std::string* mutable_cache_guid();
  std::string* release_cache_guid();
  void set_allocated_cache_guid(std::string* cache_guid);

  // optional string authenticated_account_id = 6;
  bool has_authenticated_account_id() const;
  void clear_authenticated_account_id();
  const std::string& authenticated_account_id() const;
  void set_authenticated_account_id(const std::string& value);
  void set_authenticated_account_id(std::string&& value);
  void set_authenticated_account_id(const char* value);
  void set_authenticated_account_id(const char* value, size_t size);
  std::string* mutable_authenticated_account_id();
  std::string* release_authenticated_account_id();
  void set_allocated_authenticated_account_id(std::string* authenticated_account_id);

  // optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
  bool has_progress_marker() const;
  void clear_progress_marker();
  const ::sync_pb::DataTypeProgressMarker& progress_marker() const;
  ::sync_pb::DataTypeProgressMarker* release_progress_marker();
  ::sync_pb::DataTypeProgressMarker* mutable_progress_marker();
  void set_allocated_progress_marker(::sync_pb::DataTypeProgressMarker* progress_marker);

  // optional .sync_pb.DataTypeContext type_context = 2;
  bool has_type_context() const;
  void clear_type_context();
  const ::sync_pb::DataTypeContext& type_context() const;
  ::sync_pb::DataTypeContext* release_type_context();
  ::sync_pb::DataTypeContext* mutable_type_context();
  void set_allocated_type_context(::sync_pb::DataTypeContext* type_context);

  // optional bool initial_sync_done = 4;
  bool has_initial_sync_done() const;
  void clear_initial_sync_done();
  bool initial_sync_done() const;
  void set_initial_sync_done(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.ModelTypeState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authenticated_account_id_;
  ::sync_pb::DataTypeProgressMarker* progress_marker_;
  ::sync_pb::DataTypeContext* type_context_;
  bool initial_sync_done_;
  friend struct ::TableStruct_model_5ftype_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelTypeState

// optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
inline bool ModelTypeState::has_progress_marker() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::sync_pb::DataTypeProgressMarker& ModelTypeState::progress_marker() const {
  const ::sync_pb::DataTypeProgressMarker* p = progress_marker_;
  // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.progress_marker)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::DataTypeProgressMarker*>(
      &::sync_pb::_DataTypeProgressMarker_default_instance_);
}
inline ::sync_pb::DataTypeProgressMarker* ModelTypeState::release_progress_marker() {
  // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.progress_marker)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::DataTypeProgressMarker* temp = progress_marker_;
  progress_marker_ = nullptr;
  return temp;
}
inline ::sync_pb::DataTypeProgressMarker* ModelTypeState::mutable_progress_marker() {
  _has_bits_[0] |= 0x00000008u;
  if (progress_marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::DataTypeProgressMarker>(GetArenaNoVirtual());
    progress_marker_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.progress_marker)
  return progress_marker_;
}
inline void ModelTypeState::set_allocated_progress_marker(::sync_pb::DataTypeProgressMarker* progress_marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_marker_);
  }
  if (progress_marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      progress_marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress_marker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  progress_marker_ = progress_marker;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.progress_marker)
}

// optional .sync_pb.DataTypeContext type_context = 2;
inline bool ModelTypeState::has_type_context() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::sync_pb::DataTypeContext& ModelTypeState::type_context() const {
  const ::sync_pb::DataTypeContext* p = type_context_;
  // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.type_context)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::DataTypeContext*>(
      &::sync_pb::_DataTypeContext_default_instance_);
}
inline ::sync_pb::DataTypeContext* ModelTypeState::release_type_context() {
  // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.type_context)
  _has_bits_[0] &= ~0x00000010u;
  ::sync_pb::DataTypeContext* temp = type_context_;
  type_context_ = nullptr;
  return temp;
}
inline ::sync_pb::DataTypeContext* ModelTypeState::mutable_type_context() {
  _has_bits_[0] |= 0x00000010u;
  if (type_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::DataTypeContext>(GetArenaNoVirtual());
    type_context_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.type_context)
  return type_context_;
}
inline void ModelTypeState::set_allocated_type_context(::sync_pb::DataTypeContext* type_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_context_);
  }
  if (type_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_context, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  type_context_ = type_context;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.type_context)
}

// optional string encryption_key_name = 3;
inline bool ModelTypeState::has_encryption_key_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelTypeState::clear_encryption_key_name() {
  encryption_key_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelTypeState::encryption_key_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.encryption_key_name)
  return encryption_key_name_.GetNoArena();
}
inline void ModelTypeState::set_encryption_key_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encryption_key_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ModelTypeState.encryption_key_name)
}
inline void ModelTypeState::set_encryption_key_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encryption_key_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ModelTypeState.encryption_key_name)
}
inline void ModelTypeState::set_encryption_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encryption_key_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ModelTypeState.encryption_key_name)
}
inline void ModelTypeState::set_encryption_key_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encryption_key_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ModelTypeState.encryption_key_name)
}
inline std::string* ModelTypeState::mutable_encryption_key_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.encryption_key_name)
  return encryption_key_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelTypeState::release_encryption_key_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.encryption_key_name)
  if (!has_encryption_key_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encryption_key_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeState::set_allocated_encryption_key_name(std::string* encryption_key_name) {
  if (encryption_key_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encryption_key_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryption_key_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.encryption_key_name)
}

// optional bool initial_sync_done = 4;
inline bool ModelTypeState::has_initial_sync_done() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelTypeState::clear_initial_sync_done() {
  initial_sync_done_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ModelTypeState::initial_sync_done() const {
  // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.initial_sync_done)
  return initial_sync_done_;
}
inline void ModelTypeState::set_initial_sync_done(bool value) {
  _has_bits_[0] |= 0x00000020u;
  initial_sync_done_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ModelTypeState.initial_sync_done)
}

// optional string cache_guid = 5;
inline bool ModelTypeState::has_cache_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelTypeState::clear_cache_guid() {
  cache_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelTypeState::cache_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.cache_guid)
  return cache_guid_.GetNoArena();
}
inline void ModelTypeState::set_cache_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ModelTypeState.cache_guid)
}
inline void ModelTypeState::set_cache_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cache_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ModelTypeState.cache_guid)
}
inline void ModelTypeState::set_cache_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ModelTypeState.cache_guid)
}
inline void ModelTypeState::set_cache_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ModelTypeState.cache_guid)
}
inline std::string* ModelTypeState::mutable_cache_guid() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.cache_guid)
  return cache_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelTypeState::release_cache_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.cache_guid)
  if (!has_cache_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cache_guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeState::set_allocated_cache_guid(std::string* cache_guid) {
  if (cache_guid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cache_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.cache_guid)
}

// optional string authenticated_account_id = 6;
inline bool ModelTypeState::has_authenticated_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelTypeState::clear_authenticated_account_id() {
  authenticated_account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ModelTypeState::authenticated_account_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.authenticated_account_id)
  return authenticated_account_id_.GetNoArena();
}
inline void ModelTypeState::set_authenticated_account_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  authenticated_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ModelTypeState.authenticated_account_id)
}
inline void ModelTypeState::set_authenticated_account_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  authenticated_account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ModelTypeState.authenticated_account_id)
}
inline void ModelTypeState::set_authenticated_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  authenticated_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ModelTypeState.authenticated_account_id)
}
inline void ModelTypeState::set_authenticated_account_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  authenticated_account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ModelTypeState.authenticated_account_id)
}
inline std::string* ModelTypeState::mutable_authenticated_account_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.authenticated_account_id)
  return authenticated_account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelTypeState::release_authenticated_account_id() {
  // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.authenticated_account_id)
  if (!has_authenticated_account_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return authenticated_account_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeState::set_allocated_authenticated_account_id(std::string* authenticated_account_id) {
  if (authenticated_account_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  authenticated_account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authenticated_account_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.authenticated_account_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_5ftype_5fstate_2eproto
