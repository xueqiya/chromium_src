// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: send_tab_to_self_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_send_5ftab_5fto_5fself_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_send_5ftab_5fto_5fself_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_send_5ftab_5fto_5fself_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_send_5ftab_5fto_5fself_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class SendTabToSelfSpecifics;
class SendTabToSelfSpecificsDefaultTypeInternal;
extern SendTabToSelfSpecificsDefaultTypeInternal _SendTabToSelfSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::SendTabToSelfSpecifics* Arena::CreateMaybeMessage<::sync_pb::SendTabToSelfSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class SendTabToSelfSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SendTabToSelfSpecifics) */ {
 public:
  SendTabToSelfSpecifics();
  virtual ~SendTabToSelfSpecifics();

  SendTabToSelfSpecifics(const SendTabToSelfSpecifics& from);
  SendTabToSelfSpecifics(SendTabToSelfSpecifics&& from) noexcept
    : SendTabToSelfSpecifics() {
    *this = ::std::move(from);
  }

  inline SendTabToSelfSpecifics& operator=(const SendTabToSelfSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendTabToSelfSpecifics& operator=(SendTabToSelfSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SendTabToSelfSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendTabToSelfSpecifics* internal_default_instance() {
    return reinterpret_cast<const SendTabToSelfSpecifics*>(
               &_SendTabToSelfSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendTabToSelfSpecifics& a, SendTabToSelfSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(SendTabToSelfSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendTabToSelfSpecifics* New() const final {
    return CreateMaybeMessage<SendTabToSelfSpecifics>(nullptr);
  }

  SendTabToSelfSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendTabToSelfSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SendTabToSelfSpecifics& from);
  void MergeFrom(const SendTabToSelfSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendTabToSelfSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SendTabToSelfSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kUrlFieldNumber = 2,
    kDeviceNameFieldNumber = 4,
    kGuidFieldNumber = 5,
    kTargetDeviceSyncCacheGuidFieldNumber = 7,
    kSharedTimeUsecFieldNumber = 3,
    kNavigationTimeUsecFieldNumber = 6,
    kOpenedFieldNumber = 8,
    kNotificationDismissedFieldNumber = 9,
  };
  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string device_name = 4;
  bool has_device_name() const;
  void clear_device_name();
  const std::string& device_name() const;
  void set_device_name(const std::string& value);
  void set_device_name(std::string&& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  std::string* mutable_device_name();
  std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);

  // optional string guid = 5;
  bool has_guid() const;
  void clear_guid();
  const std::string& guid() const;
  void set_guid(const std::string& value);
  void set_guid(std::string&& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  std::string* mutable_guid();
  std::string* release_guid();
  void set_allocated_guid(std::string* guid);

  // optional string target_device_sync_cache_guid = 7;
  bool has_target_device_sync_cache_guid() const;
  void clear_target_device_sync_cache_guid();
  const std::string& target_device_sync_cache_guid() const;
  void set_target_device_sync_cache_guid(const std::string& value);
  void set_target_device_sync_cache_guid(std::string&& value);
  void set_target_device_sync_cache_guid(const char* value);
  void set_target_device_sync_cache_guid(const char* value, size_t size);
  std::string* mutable_target_device_sync_cache_guid();
  std::string* release_target_device_sync_cache_guid();
  void set_allocated_target_device_sync_cache_guid(std::string* target_device_sync_cache_guid);

  // optional int64 shared_time_usec = 3;
  bool has_shared_time_usec() const;
  void clear_shared_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 shared_time_usec() const;
  void set_shared_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 navigation_time_usec = 6;
  bool has_navigation_time_usec() const;
  void clear_navigation_time_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 navigation_time_usec() const;
  void set_navigation_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool opened = 8;
  bool has_opened() const;
  void clear_opened();
  bool opened() const;
  void set_opened(bool value);

  // optional bool notification_dismissed = 9;
  bool has_notification_dismissed() const;
  void clear_notification_dismissed();
  bool notification_dismissed() const;
  void set_notification_dismissed(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.SendTabToSelfSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_device_sync_cache_guid_;
  ::PROTOBUF_NAMESPACE_ID::int64 shared_time_usec_;
  ::PROTOBUF_NAMESPACE_ID::int64 navigation_time_usec_;
  bool opened_;
  bool notification_dismissed_;
  friend struct ::TableStruct_send_5ftab_5fto_5fself_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendTabToSelfSpecifics

// optional string guid = 5;
inline bool SendTabToSelfSpecifics::has_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendTabToSelfSpecifics::clear_guid() {
  guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SendTabToSelfSpecifics::guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.SendTabToSelfSpecifics.guid)
  return guid_.GetNoArena();
}
inline void SendTabToSelfSpecifics::set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SendTabToSelfSpecifics.guid)
}
inline void SendTabToSelfSpecifics::set_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SendTabToSelfSpecifics.guid)
}
inline void SendTabToSelfSpecifics::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SendTabToSelfSpecifics.guid)
}
inline void SendTabToSelfSpecifics::set_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SendTabToSelfSpecifics.guid)
}
inline std::string* SendTabToSelfSpecifics::mutable_guid() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SendTabToSelfSpecifics.guid)
  return guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendTabToSelfSpecifics::release_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.SendTabToSelfSpecifics.guid)
  if (!has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendTabToSelfSpecifics::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SendTabToSelfSpecifics.guid)
}

// optional string title = 1;
inline bool SendTabToSelfSpecifics::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendTabToSelfSpecifics::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SendTabToSelfSpecifics::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.SendTabToSelfSpecifics.title)
  return title_.GetNoArena();
}
inline void SendTabToSelfSpecifics::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SendTabToSelfSpecifics.title)
}
inline void SendTabToSelfSpecifics::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SendTabToSelfSpecifics.title)
}
inline void SendTabToSelfSpecifics::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SendTabToSelfSpecifics.title)
}
inline void SendTabToSelfSpecifics::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SendTabToSelfSpecifics.title)
}
inline std::string* SendTabToSelfSpecifics::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SendTabToSelfSpecifics.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendTabToSelfSpecifics::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.SendTabToSelfSpecifics.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendTabToSelfSpecifics::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SendTabToSelfSpecifics.title)
}

// optional string url = 2;
inline bool SendTabToSelfSpecifics::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendTabToSelfSpecifics::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SendTabToSelfSpecifics::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.SendTabToSelfSpecifics.url)
  return url_.GetNoArena();
}
inline void SendTabToSelfSpecifics::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SendTabToSelfSpecifics.url)
}
inline void SendTabToSelfSpecifics::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SendTabToSelfSpecifics.url)
}
inline void SendTabToSelfSpecifics::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SendTabToSelfSpecifics.url)
}
inline void SendTabToSelfSpecifics::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SendTabToSelfSpecifics.url)
}
inline std::string* SendTabToSelfSpecifics::mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SendTabToSelfSpecifics.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendTabToSelfSpecifics::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.SendTabToSelfSpecifics.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendTabToSelfSpecifics::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SendTabToSelfSpecifics.url)
}

// optional int64 shared_time_usec = 3;
inline bool SendTabToSelfSpecifics::has_shared_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendTabToSelfSpecifics::clear_shared_time_usec() {
  shared_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendTabToSelfSpecifics::shared_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.SendTabToSelfSpecifics.shared_time_usec)
  return shared_time_usec_;
}
inline void SendTabToSelfSpecifics::set_shared_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  shared_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SendTabToSelfSpecifics.shared_time_usec)
}

// optional int64 navigation_time_usec = 6;
inline bool SendTabToSelfSpecifics::has_navigation_time_usec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SendTabToSelfSpecifics::clear_navigation_time_usec() {
  navigation_time_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendTabToSelfSpecifics::navigation_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.SendTabToSelfSpecifics.navigation_time_usec)
  return navigation_time_usec_;
}
inline void SendTabToSelfSpecifics::set_navigation_time_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  navigation_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SendTabToSelfSpecifics.navigation_time_usec)
}

// optional string device_name = 4;
inline bool SendTabToSelfSpecifics::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendTabToSelfSpecifics::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SendTabToSelfSpecifics::device_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.SendTabToSelfSpecifics.device_name)
  return device_name_.GetNoArena();
}
inline void SendTabToSelfSpecifics::set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SendTabToSelfSpecifics.device_name)
}
inline void SendTabToSelfSpecifics::set_device_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SendTabToSelfSpecifics.device_name)
}
inline void SendTabToSelfSpecifics::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SendTabToSelfSpecifics.device_name)
}
inline void SendTabToSelfSpecifics::set_device_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SendTabToSelfSpecifics.device_name)
}
inline std::string* SendTabToSelfSpecifics::mutable_device_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SendTabToSelfSpecifics.device_name)
  return device_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendTabToSelfSpecifics::release_device_name() {
  // @@protoc_insertion_point(field_release:sync_pb.SendTabToSelfSpecifics.device_name)
  if (!has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return device_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendTabToSelfSpecifics::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  device_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SendTabToSelfSpecifics.device_name)
}

// optional string target_device_sync_cache_guid = 7;
inline bool SendTabToSelfSpecifics::has_target_device_sync_cache_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendTabToSelfSpecifics::clear_target_device_sync_cache_guid() {
  target_device_sync_cache_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SendTabToSelfSpecifics::target_device_sync_cache_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.SendTabToSelfSpecifics.target_device_sync_cache_guid)
  return target_device_sync_cache_guid_.GetNoArena();
}
inline void SendTabToSelfSpecifics::set_target_device_sync_cache_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  target_device_sync_cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SendTabToSelfSpecifics.target_device_sync_cache_guid)
}
inline void SendTabToSelfSpecifics::set_target_device_sync_cache_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  target_device_sync_cache_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SendTabToSelfSpecifics.target_device_sync_cache_guid)
}
inline void SendTabToSelfSpecifics::set_target_device_sync_cache_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  target_device_sync_cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SendTabToSelfSpecifics.target_device_sync_cache_guid)
}
inline void SendTabToSelfSpecifics::set_target_device_sync_cache_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  target_device_sync_cache_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SendTabToSelfSpecifics.target_device_sync_cache_guid)
}
inline std::string* SendTabToSelfSpecifics::mutable_target_device_sync_cache_guid() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.SendTabToSelfSpecifics.target_device_sync_cache_guid)
  return target_device_sync_cache_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendTabToSelfSpecifics::release_target_device_sync_cache_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.SendTabToSelfSpecifics.target_device_sync_cache_guid)
  if (!has_target_device_sync_cache_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return target_device_sync_cache_guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendTabToSelfSpecifics::set_allocated_target_device_sync_cache_guid(std::string* target_device_sync_cache_guid) {
  if (target_device_sync_cache_guid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  target_device_sync_cache_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_device_sync_cache_guid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SendTabToSelfSpecifics.target_device_sync_cache_guid)
}

// optional bool opened = 8;
inline bool SendTabToSelfSpecifics::has_opened() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SendTabToSelfSpecifics::clear_opened() {
  opened_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool SendTabToSelfSpecifics::opened() const {
  // @@protoc_insertion_point(field_get:sync_pb.SendTabToSelfSpecifics.opened)
  return opened_;
}
inline void SendTabToSelfSpecifics::set_opened(bool value) {
  _has_bits_[0] |= 0x00000080u;
  opened_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SendTabToSelfSpecifics.opened)
}

// optional bool notification_dismissed = 9;
inline bool SendTabToSelfSpecifics::has_notification_dismissed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SendTabToSelfSpecifics::clear_notification_dismissed() {
  notification_dismissed_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SendTabToSelfSpecifics::notification_dismissed() const {
  // @@protoc_insertion_point(field_get:sync_pb.SendTabToSelfSpecifics.notification_dismissed)
  return notification_dismissed_;
}
inline void SendTabToSelfSpecifics::set_notification_dismissed(bool value) {
  _has_bits_[0] |= 0x00000100u;
  notification_dismissed_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SendTabToSelfSpecifics.notification_dismissed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_send_5ftab_5fto_5fself_5fspecifics_2eproto
