// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_debug_info.proto

#include "client_debug_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_client_5fdebug_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatatypeAssociationStats_client_5fdebug_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fdebug_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DebugEventInfo_client_5fdebug_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_get_5fupdates_5fcaller_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUpdatesCallerInfo_get_5fupdates_5fcaller_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fdebug_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncCycleCompletedEventInfo_client_5fdebug_5finfo_2eproto;
namespace sync_pb {
class TypeHintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TypeHint> _instance;
} _TypeHint_default_instance_;
class SyncCycleCompletedEventInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncCycleCompletedEventInfo> _instance;
} _SyncCycleCompletedEventInfo_default_instance_;
class DatatypeAssociationStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatatypeAssociationStats> _instance;
} _DatatypeAssociationStats_default_instance_;
class DebugEventInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugEventInfo> _instance;
} _DebugEventInfo_default_instance_;
class DebugInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugInfo> _instance;
} _DebugInfo_default_instance_;
}  // namespace sync_pb
static void InitDefaultsscc_info_DatatypeAssociationStats_client_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_DatatypeAssociationStats_default_instance_;
    new (ptr) ::sync_pb::DatatypeAssociationStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::DatatypeAssociationStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatatypeAssociationStats_client_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DatatypeAssociationStats_client_5fdebug_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_DebugEventInfo_client_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_DebugEventInfo_default_instance_;
    new (ptr) ::sync_pb::DebugEventInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::DebugEventInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DebugEventInfo_client_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DebugEventInfo_client_5fdebug_5finfo_2eproto}, {
      &scc_info_SyncCycleCompletedEventInfo_client_5fdebug_5finfo_2eproto.base,
      &scc_info_DatatypeAssociationStats_client_5fdebug_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_DebugInfo_client_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_DebugInfo_default_instance_;
    new (ptr) ::sync_pb::DebugInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::DebugInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugInfo_client_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DebugInfo_client_5fdebug_5finfo_2eproto}, {
      &scc_info_DebugEventInfo_client_5fdebug_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_SyncCycleCompletedEventInfo_client_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_SyncCycleCompletedEventInfo_default_instance_;
    new (ptr) ::sync_pb::SyncCycleCompletedEventInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::SyncCycleCompletedEventInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncCycleCompletedEventInfo_client_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SyncCycleCompletedEventInfo_client_5fdebug_5finfo_2eproto}, {
      &scc_info_GetUpdatesCallerInfo_get_5fupdates_5fcaller_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_TypeHint_client_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sync_pb::_TypeHint_default_instance_;
    new (ptr) ::sync_pb::TypeHint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sync_pb::TypeHint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TypeHint_client_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TypeHint_client_5fdebug_5finfo_2eproto}, {}};

namespace sync_pb {

// ===================================================================

void TypeHint::InitAsDefaultInstance() {
}
class TypeHint::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeHint>()._has_bits_);
  static void set_has_data_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_valid_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TypeHint::TypeHint()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.TypeHint)
}
TypeHint::TypeHint(const TypeHint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_type_id_, &from.data_type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_valid_hint_) -
    reinterpret_cast<char*>(&data_type_id_)) + sizeof(has_valid_hint_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.TypeHint)
}

void TypeHint::SharedCtor() {
  ::memset(&data_type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_valid_hint_) -
      reinterpret_cast<char*>(&data_type_id_)) + sizeof(has_valid_hint_));
}

TypeHint::~TypeHint() {
  // @@protoc_insertion_point(destructor:sync_pb.TypeHint)
  SharedDtor();
}

void TypeHint::SharedDtor() {
}

void TypeHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TypeHint& TypeHint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TypeHint_client_5fdebug_5finfo_2eproto.base);
  return *internal_default_instance();
}


void TypeHint::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.TypeHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&data_type_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_valid_hint_) -
        reinterpret_cast<char*>(&data_type_id_)) + sizeof(has_valid_hint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TypeHint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 data_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data_type_id(&has_bits);
          data_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_valid_hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_has_valid_hint(&has_bits);
          has_valid_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TypeHint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.TypeHint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_data_type_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_valid_hint = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_has_valid_hint(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_valid_hint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.TypeHint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.TypeHint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TypeHint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.TypeHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->data_type_id(), output);
  }

  // optional bool has_valid_hint = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->has_valid_hint(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.TypeHint)
}

size_t TypeHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.TypeHint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 data_type_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->data_type_id());
    }

    // optional bool has_valid_hint = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeHint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TypeHint*>(
      &from));
}

void TypeHint::MergeFrom(const TypeHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.TypeHint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_type_id_ = from.data_type_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_valid_hint_ = from.has_valid_hint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TypeHint::CopyFrom(const TypeHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.TypeHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeHint::IsInitialized() const {
  return true;
}

void TypeHint::InternalSwap(TypeHint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_type_id_, other->data_type_id_);
  swap(has_valid_hint_, other->has_valid_hint_);
}

std::string TypeHint::GetTypeName() const {
  return "sync_pb.TypeHint";
}


// ===================================================================

void SyncCycleCompletedEventInfo::InitAsDefaultInstance() {
  ::sync_pb::_SyncCycleCompletedEventInfo_default_instance_._instance.get_mutable()->caller_info_ = const_cast< ::sync_pb::GetUpdatesCallerInfo*>(
      ::sync_pb::GetUpdatesCallerInfo::internal_default_instance());
}
class SyncCycleCompletedEventInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncCycleCompletedEventInfo>()._has_bits_);
  static void set_has_num_encryption_conflicts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_hierarchy_conflicts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_simple_conflicts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_server_conflicts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_updates_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_reflected_updates_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::GetUpdatesCallerInfo& caller_info(const SyncCycleCompletedEventInfo* msg);
  static void set_has_caller_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_get_updates_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::sync_pb::GetUpdatesCallerInfo&
SyncCycleCompletedEventInfo::_Internal::caller_info(const SyncCycleCompletedEventInfo* msg) {
  return *msg->caller_info_;
}
void SyncCycleCompletedEventInfo::clear_caller_info() {
  if (caller_info_ != nullptr) caller_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SyncCycleCompletedEventInfo::SyncCycleCompletedEventInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SyncCycleCompletedEventInfo)
}
SyncCycleCompletedEventInfo::SyncCycleCompletedEventInfo(const SyncCycleCompletedEventInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_caller_info()) {
    caller_info_ = new ::sync_pb::GetUpdatesCallerInfo(*from.caller_info_);
  } else {
    caller_info_ = nullptr;
  }
  ::memcpy(&num_encryption_conflicts_, &from.num_encryption_conflicts_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_updates_origin_) -
    reinterpret_cast<char*>(&num_encryption_conflicts_)) + sizeof(get_updates_origin_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SyncCycleCompletedEventInfo)
}

void SyncCycleCompletedEventInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncCycleCompletedEventInfo_client_5fdebug_5finfo_2eproto.base);
  ::memset(&caller_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_updates_origin_) -
      reinterpret_cast<char*>(&caller_info_)) + sizeof(get_updates_origin_));
}

SyncCycleCompletedEventInfo::~SyncCycleCompletedEventInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.SyncCycleCompletedEventInfo)
  SharedDtor();
}

void SyncCycleCompletedEventInfo::SharedDtor() {
  if (this != internal_default_instance()) delete caller_info_;
}

void SyncCycleCompletedEventInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncCycleCompletedEventInfo& SyncCycleCompletedEventInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncCycleCompletedEventInfo_client_5fdebug_5finfo_2eproto.base);
  return *internal_default_instance();
}


void SyncCycleCompletedEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SyncCycleCompletedEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caller_info_ != nullptr);
    caller_info_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&num_encryption_conflicts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&get_updates_origin_) -
        reinterpret_cast<char*>(&num_encryption_conflicts_)) + sizeof(get_updates_origin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncCycleCompletedEventInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_encryption_conflicts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_encryption_conflicts(&has_bits);
          num_encryption_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_hierarchy_conflicts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_hierarchy_conflicts(&has_bits);
          num_hierarchy_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_simple_conflicts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_simple_conflicts(&has_bits);
          num_simple_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_server_conflicts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_server_conflicts(&has_bits);
          num_server_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_updates_downloaded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_updates_downloaded(&has_bits);
          num_updates_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_reflected_updates_downloaded = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_num_reflected_updates_downloaded(&has_bits);
          num_reflected_updates_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_caller_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_GetUpdatesOrigin_IsValid(val))) {
            set_get_updates_origin(static_cast<::sync_pb::SyncEnums_GetUpdatesOrigin>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncCycleCompletedEventInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SyncCycleCompletedEventInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_encryption_conflicts = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_encryption_conflicts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_encryption_conflicts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_hierarchy_conflicts = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_num_hierarchy_conflicts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hierarchy_conflicts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_simple_conflicts = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_num_simple_conflicts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_simple_conflicts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_server_conflicts = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_num_server_conflicts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_server_conflicts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_updates_downloaded = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_num_updates_downloaded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_updates_downloaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_reflected_updates_downloaded = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_num_reflected_updates_downloaded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_reflected_updates_downloaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_caller_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_GetUpdatesOrigin_IsValid(value)) {
            set_get_updates_origin(static_cast< ::sync_pb::SyncEnums_GetUpdatesOrigin >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SyncCycleCompletedEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SyncCycleCompletedEventInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncCycleCompletedEventInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SyncCycleCompletedEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_encryption_conflicts = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_encryption_conflicts(), output);
  }

  // optional int32 num_hierarchy_conflicts = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->num_hierarchy_conflicts(), output);
  }

  // optional int32 num_simple_conflicts = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->num_simple_conflicts(), output);
  }

  // optional int32 num_server_conflicts = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->num_server_conflicts(), output);
  }

  // optional int32 num_updates_downloaded = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->num_updates_downloaded(), output);
  }

  // optional int32 num_reflected_updates_downloaded = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->num_reflected_updates_downloaded(), output);
  }

  // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::caller_info(this), output);
  }

  // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->get_updates_origin(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SyncCycleCompletedEventInfo)
}

size_t SyncCycleCompletedEventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SyncCycleCompletedEventInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caller_info_);
    }

    // optional int32 num_encryption_conflicts = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_encryption_conflicts());
    }

    // optional int32 num_hierarchy_conflicts = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_hierarchy_conflicts());
    }

    // optional int32 num_simple_conflicts = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_simple_conflicts());
    }

    // optional int32 num_server_conflicts = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_server_conflicts());
    }

    // optional int32 num_updates_downloaded = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_updates_downloaded());
    }

    // optional int32 num_reflected_updates_downloaded = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_reflected_updates_downloaded());
    }

    // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->get_updates_origin());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncCycleCompletedEventInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SyncCycleCompletedEventInfo*>(
      &from));
}

void SyncCycleCompletedEventInfo::MergeFrom(const SyncCycleCompletedEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SyncCycleCompletedEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_caller_info()->::sync_pb::GetUpdatesCallerInfo::MergeFrom(from.caller_info());
    }
    if (cached_has_bits & 0x00000002u) {
      num_encryption_conflicts_ = from.num_encryption_conflicts_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_hierarchy_conflicts_ = from.num_hierarchy_conflicts_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_simple_conflicts_ = from.num_simple_conflicts_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_server_conflicts_ = from.num_server_conflicts_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_updates_downloaded_ = from.num_updates_downloaded_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_reflected_updates_downloaded_ = from.num_reflected_updates_downloaded_;
    }
    if (cached_has_bits & 0x00000080u) {
      get_updates_origin_ = from.get_updates_origin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncCycleCompletedEventInfo::CopyFrom(const SyncCycleCompletedEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SyncCycleCompletedEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncCycleCompletedEventInfo::IsInitialized() const {
  if (has_caller_info()) {
    if (!this->caller_info_->IsInitialized()) return false;
  }
  return true;
}

void SyncCycleCompletedEventInfo::InternalSwap(SyncCycleCompletedEventInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(caller_info_, other->caller_info_);
  swap(num_encryption_conflicts_, other->num_encryption_conflicts_);
  swap(num_hierarchy_conflicts_, other->num_hierarchy_conflicts_);
  swap(num_simple_conflicts_, other->num_simple_conflicts_);
  swap(num_server_conflicts_, other->num_server_conflicts_);
  swap(num_updates_downloaded_, other->num_updates_downloaded_);
  swap(num_reflected_updates_downloaded_, other->num_reflected_updates_downloaded_);
  swap(get_updates_origin_, other->get_updates_origin_);
}

std::string SyncCycleCompletedEventInfo::GetTypeName() const {
  return "sync_pb.SyncCycleCompletedEventInfo";
}


// ===================================================================

void DatatypeAssociationStats::InitAsDefaultInstance() {
}
class DatatypeAssociationStats::_Internal {
 public:
  using HasBits = decltype(std::declval<DatatypeAssociationStats>()._has_bits_);
  static void set_has_data_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_local_items_before_association(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_sync_items_before_association(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_local_items_after_association(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_sync_items_after_association(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_local_items_added(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_local_items_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_local_items_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_sync_items_added(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_sync_items_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_sync_items_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_local_version_pre_association(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_sync_version_pre_association(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_had_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_download_wait_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_download_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_association_wait_time_for_high_priority_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_association_wait_time_for_same_priority_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_association_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

DatatypeAssociationStats::DatatypeAssociationStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.DatatypeAssociationStats)
}
DatatypeAssociationStats::DatatypeAssociationStats(const DatatypeAssociationStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      high_priority_type_configured_before_(from.high_priority_type_configured_before_),
      same_priority_type_configured_before_(from.same_priority_type_configured_before_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_type_id_, &from.data_type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_version_pre_association_) -
    reinterpret_cast<char*>(&data_type_id_)) + sizeof(sync_version_pre_association_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.DatatypeAssociationStats)
}

void DatatypeAssociationStats::SharedCtor() {
  ::memset(&data_type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_version_pre_association_) -
      reinterpret_cast<char*>(&data_type_id_)) + sizeof(sync_version_pre_association_));
}

DatatypeAssociationStats::~DatatypeAssociationStats() {
  // @@protoc_insertion_point(destructor:sync_pb.DatatypeAssociationStats)
  SharedDtor();
}

void DatatypeAssociationStats::SharedDtor() {
}

void DatatypeAssociationStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatatypeAssociationStats& DatatypeAssociationStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatatypeAssociationStats_client_5fdebug_5finfo_2eproto.base);
  return *internal_default_instance();
}


void DatatypeAssociationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DatatypeAssociationStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  high_priority_type_configured_before_.Clear();
  same_priority_type_configured_before_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&data_type_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_local_items_modified_) -
        reinterpret_cast<char*>(&data_type_id_)) + sizeof(num_local_items_modified_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&num_sync_items_added_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&association_wait_time_for_high_priority_us_) -
        reinterpret_cast<char*>(&num_sync_items_added_)) + sizeof(association_wait_time_for_high_priority_us_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&association_time_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_version_pre_association_) -
        reinterpret_cast<char*>(&association_time_us_)) + sizeof(sync_version_pre_association_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatatypeAssociationStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 data_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data_type_id(&has_bits);
          data_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_local_items_before_association = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_local_items_before_association(&has_bits);
          num_local_items_before_association_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sync_items_before_association = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_sync_items_before_association(&has_bits);
          num_sync_items_before_association_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_local_items_after_association = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_local_items_after_association(&has_bits);
          num_local_items_after_association_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sync_items_after_association = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_sync_items_after_association(&has_bits);
          num_sync_items_after_association_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_local_items_added = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_local_items_added(&has_bits);
          num_local_items_added_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_local_items_deleted = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_local_items_deleted(&has_bits);
          num_local_items_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_local_items_modified = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_local_items_modified(&has_bits);
          num_local_items_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sync_items_added = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_num_sync_items_added(&has_bits);
          num_sync_items_added_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sync_items_deleted = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_sync_items_deleted(&has_bits);
          num_sync_items_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sync_items_modified = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_num_sync_items_modified(&has_bits);
          num_sync_items_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool had_error = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_had_error(&has_bits);
          had_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 download_time_us = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_download_time_us(&has_bits);
          download_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 association_wait_time_for_same_priority_us = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_association_wait_time_for_same_priority_us(&has_bits);
          association_wait_time_for_same_priority_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 download_wait_time_us = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_download_wait_time_us(&has_bits);
          download_wait_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 association_wait_time_for_high_priority_us = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_association_wait_time_for_high_priority_us(&has_bits);
          association_wait_time_for_high_priority_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 association_time_us = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_association_time_us(&has_bits);
          association_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 high_priority_type_configured_before = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_high_priority_type_configured_before(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 400);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_high_priority_type_configured_before(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 same_priority_type_configured_before = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_same_priority_type_configured_before(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 408);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_same_priority_type_configured_before(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 local_version_pre_association = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_local_version_pre_association(&has_bits);
          local_version_pre_association_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 sync_version_pre_association = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_sync_version_pre_association(&has_bits);
          sync_version_pre_association_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatatypeAssociationStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.DatatypeAssociationStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_data_type_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_local_items_before_association = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_local_items_before_association(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_items_before_association_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sync_items_before_association = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_sync_items_before_association(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sync_items_before_association_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_local_items_after_association = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_local_items_after_association(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_items_after_association_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sync_items_after_association = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_num_sync_items_after_association(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sync_items_after_association_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_local_items_added = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_num_local_items_added(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_items_added_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_local_items_deleted = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_num_local_items_deleted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_items_deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_local_items_modified = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_num_local_items_modified(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_items_modified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sync_items_added = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_num_sync_items_added(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sync_items_added_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sync_items_deleted = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_num_sync_items_deleted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sync_items_deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sync_items_modified = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_num_sync_items_modified(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sync_items_modified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool had_error = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_had_error(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &had_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 download_time_us = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_download_time_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &download_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 association_wait_time_for_same_priority_us = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_association_wait_time_for_same_priority_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &association_wait_time_for_same_priority_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 download_wait_time_us = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_download_wait_time_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &download_wait_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 association_wait_time_for_high_priority_us = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_association_wait_time_for_high_priority_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &association_wait_time_for_high_priority_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 association_time_us = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_association_time_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &association_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 high_priority_type_configured_before = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 2, 144u, input, this->mutable_high_priority_type_configured_before())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_high_priority_type_configured_before())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 same_priority_type_configured_before = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 2, 152u, input, this->mutable_same_priority_type_configured_before())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_same_priority_type_configured_before())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 local_version_pre_association = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_local_version_pre_association(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_version_pre_association_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sync_version_pre_association = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_sync_version_pre_association(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sync_version_pre_association_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.DatatypeAssociationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.DatatypeAssociationStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatatypeAssociationStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.DatatypeAssociationStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->data_type_id(), output);
  }

  // optional int32 num_local_items_before_association = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_local_items_before_association(), output);
  }

  // optional int32 num_sync_items_before_association = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_sync_items_before_association(), output);
  }

  // optional int32 num_local_items_after_association = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_local_items_after_association(), output);
  }

  // optional int32 num_sync_items_after_association = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->num_sync_items_after_association(), output);
  }

  // optional int32 num_local_items_added = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->num_local_items_added(), output);
  }

  // optional int32 num_local_items_deleted = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->num_local_items_deleted(), output);
  }

  // optional int32 num_local_items_modified = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->num_local_items_modified(), output);
  }

  // optional int32 num_sync_items_added = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->num_sync_items_added(), output);
  }

  // optional int32 num_sync_items_deleted = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->num_sync_items_deleted(), output);
  }

  // optional int32 num_sync_items_modified = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->num_sync_items_modified(), output);
  }

  // optional bool had_error = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->had_error(), output);
  }

  // optional int64 download_time_us = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(13, this->download_time_us(), output);
  }

  // optional int64 association_wait_time_for_same_priority_us = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->association_wait_time_for_same_priority_us(), output);
  }

  // optional int64 download_wait_time_us = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->download_wait_time_us(), output);
  }

  // optional int64 association_wait_time_for_high_priority_us = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->association_wait_time_for_high_priority_us(), output);
  }

  // optional int64 association_time_us = 17;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->association_time_us(), output);
  }

  // repeated int32 high_priority_type_configured_before = 18;
  for (int i = 0, n = this->high_priority_type_configured_before_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      18, this->high_priority_type_configured_before(i), output);
  }

  // repeated int32 same_priority_type_configured_before = 19;
  for (int i = 0, n = this->same_priority_type_configured_before_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      19, this->same_priority_type_configured_before(i), output);
  }

  // optional int64 local_version_pre_association = 20;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->local_version_pre_association(), output);
  }

  // optional int64 sync_version_pre_association = 21;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->sync_version_pre_association(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.DatatypeAssociationStats)
}

size_t DatatypeAssociationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DatatypeAssociationStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 high_priority_type_configured_before = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->high_priority_type_configured_before_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->high_priority_type_configured_before_size());
    total_size += data_size;
  }

  // repeated int32 same_priority_type_configured_before = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->same_priority_type_configured_before_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->same_priority_type_configured_before_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 data_type_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->data_type_id());
    }

    // optional int32 num_local_items_before_association = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_local_items_before_association());
    }

    // optional int32 num_sync_items_before_association = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_sync_items_before_association());
    }

    // optional int32 num_local_items_after_association = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_local_items_after_association());
    }

    // optional int32 num_sync_items_after_association = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_sync_items_after_association());
    }

    // optional int32 num_local_items_added = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_local_items_added());
    }

    // optional int32 num_local_items_deleted = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_local_items_deleted());
    }

    // optional int32 num_local_items_modified = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_local_items_modified());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 num_sync_items_added = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_sync_items_added());
    }

    // optional int32 num_sync_items_deleted = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_sync_items_deleted());
    }

    // optional int32 num_sync_items_modified = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_sync_items_modified());
    }

    // optional bool had_error = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int64 download_time_us = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->download_time_us());
    }

    // optional int64 association_wait_time_for_same_priority_us = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->association_wait_time_for_same_priority_us());
    }

    // optional int64 download_wait_time_us = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->download_wait_time_us());
    }

    // optional int64 association_wait_time_for_high_priority_us = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->association_wait_time_for_high_priority_us());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int64 association_time_us = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->association_time_us());
    }

    // optional int64 local_version_pre_association = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->local_version_pre_association());
    }

    // optional int64 sync_version_pre_association = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->sync_version_pre_association());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatatypeAssociationStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DatatypeAssociationStats*>(
      &from));
}

void DatatypeAssociationStats::MergeFrom(const DatatypeAssociationStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DatatypeAssociationStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  high_priority_type_configured_before_.MergeFrom(from.high_priority_type_configured_before_);
  same_priority_type_configured_before_.MergeFrom(from.same_priority_type_configured_before_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      data_type_id_ = from.data_type_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_local_items_before_association_ = from.num_local_items_before_association_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_sync_items_before_association_ = from.num_sync_items_before_association_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_local_items_after_association_ = from.num_local_items_after_association_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_sync_items_after_association_ = from.num_sync_items_after_association_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_local_items_added_ = from.num_local_items_added_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_local_items_deleted_ = from.num_local_items_deleted_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_local_items_modified_ = from.num_local_items_modified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      num_sync_items_added_ = from.num_sync_items_added_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_sync_items_deleted_ = from.num_sync_items_deleted_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_sync_items_modified_ = from.num_sync_items_modified_;
    }
    if (cached_has_bits & 0x00000800u) {
      had_error_ = from.had_error_;
    }
    if (cached_has_bits & 0x00001000u) {
      download_time_us_ = from.download_time_us_;
    }
    if (cached_has_bits & 0x00002000u) {
      association_wait_time_for_same_priority_us_ = from.association_wait_time_for_same_priority_us_;
    }
    if (cached_has_bits & 0x00004000u) {
      download_wait_time_us_ = from.download_wait_time_us_;
    }
    if (cached_has_bits & 0x00008000u) {
      association_wait_time_for_high_priority_us_ = from.association_wait_time_for_high_priority_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      association_time_us_ = from.association_time_us_;
    }
    if (cached_has_bits & 0x00020000u) {
      local_version_pre_association_ = from.local_version_pre_association_;
    }
    if (cached_has_bits & 0x00040000u) {
      sync_version_pre_association_ = from.sync_version_pre_association_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DatatypeAssociationStats::CopyFrom(const DatatypeAssociationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DatatypeAssociationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatatypeAssociationStats::IsInitialized() const {
  return true;
}

void DatatypeAssociationStats::InternalSwap(DatatypeAssociationStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  high_priority_type_configured_before_.InternalSwap(&other->high_priority_type_configured_before_);
  same_priority_type_configured_before_.InternalSwap(&other->same_priority_type_configured_before_);
  swap(data_type_id_, other->data_type_id_);
  swap(num_local_items_before_association_, other->num_local_items_before_association_);
  swap(num_sync_items_before_association_, other->num_sync_items_before_association_);
  swap(num_local_items_after_association_, other->num_local_items_after_association_);
  swap(num_sync_items_after_association_, other->num_sync_items_after_association_);
  swap(num_local_items_added_, other->num_local_items_added_);
  swap(num_local_items_deleted_, other->num_local_items_deleted_);
  swap(num_local_items_modified_, other->num_local_items_modified_);
  swap(num_sync_items_added_, other->num_sync_items_added_);
  swap(num_sync_items_deleted_, other->num_sync_items_deleted_);
  swap(num_sync_items_modified_, other->num_sync_items_modified_);
  swap(had_error_, other->had_error_);
  swap(download_time_us_, other->download_time_us_);
  swap(association_wait_time_for_same_priority_us_, other->association_wait_time_for_same_priority_us_);
  swap(download_wait_time_us_, other->download_wait_time_us_);
  swap(association_wait_time_for_high_priority_us_, other->association_wait_time_for_high_priority_us_);
  swap(association_time_us_, other->association_time_us_);
  swap(local_version_pre_association_, other->local_version_pre_association_);
  swap(sync_version_pre_association_, other->sync_version_pre_association_);
}

std::string DatatypeAssociationStats::GetTypeName() const {
  return "sync_pb.DatatypeAssociationStats";
}


// ===================================================================

void DebugEventInfo::InitAsDefaultInstance() {
  ::sync_pb::_DebugEventInfo_default_instance_._instance.get_mutable()->sync_cycle_completed_event_info_ = const_cast< ::sync_pb::SyncCycleCompletedEventInfo*>(
      ::sync_pb::SyncCycleCompletedEventInfo::internal_default_instance());
  ::sync_pb::_DebugEventInfo_default_instance_._instance.get_mutable()->datatype_association_stats_ = const_cast< ::sync_pb::DatatypeAssociationStats*>(
      ::sync_pb::DatatypeAssociationStats::internal_default_instance());
}
class DebugEventInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugEventInfo>()._has_bits_);
  static void set_has_singleton_event(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sync_pb::SyncCycleCompletedEventInfo& sync_cycle_completed_event_info(const DebugEventInfo* msg);
  static void set_has_sync_cycle_completed_event_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nudging_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::DatatypeAssociationStats& datatype_association_stats(const DebugEventInfo* msg);
  static void set_has_datatype_association_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::SyncCycleCompletedEventInfo&
DebugEventInfo::_Internal::sync_cycle_completed_event_info(const DebugEventInfo* msg) {
  return *msg->sync_cycle_completed_event_info_;
}
const ::sync_pb::DatatypeAssociationStats&
DebugEventInfo::_Internal::datatype_association_stats(const DebugEventInfo* msg) {
  return *msg->datatype_association_stats_;
}
DebugEventInfo::DebugEventInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.DebugEventInfo)
}
DebugEventInfo::DebugEventInfo(const DebugEventInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datatypes_notified_from_server_(from.datatypes_notified_from_server_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sync_cycle_completed_event_info()) {
    sync_cycle_completed_event_info_ = new ::sync_pb::SyncCycleCompletedEventInfo(*from.sync_cycle_completed_event_info_);
  } else {
    sync_cycle_completed_event_info_ = nullptr;
  }
  if (from.has_datatype_association_stats()) {
    datatype_association_stats_ = new ::sync_pb::DatatypeAssociationStats(*from.datatype_association_stats_);
  } else {
    datatype_association_stats_ = nullptr;
  }
  ::memcpy(&nudging_datatype_, &from.nudging_datatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&singleton_event_) -
    reinterpret_cast<char*>(&nudging_datatype_)) + sizeof(singleton_event_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.DebugEventInfo)
}

void DebugEventInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugEventInfo_client_5fdebug_5finfo_2eproto.base);
  ::memset(&sync_cycle_completed_event_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nudging_datatype_) -
      reinterpret_cast<char*>(&sync_cycle_completed_event_info_)) + sizeof(nudging_datatype_));
  singleton_event_ = 1;
}

DebugEventInfo::~DebugEventInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.DebugEventInfo)
  SharedDtor();
}

void DebugEventInfo::SharedDtor() {
  if (this != internal_default_instance()) delete sync_cycle_completed_event_info_;
  if (this != internal_default_instance()) delete datatype_association_stats_;
}

void DebugEventInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugEventInfo& DebugEventInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugEventInfo_client_5fdebug_5finfo_2eproto.base);
  return *internal_default_instance();
}


void DebugEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DebugEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datatypes_notified_from_server_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sync_cycle_completed_event_info_ != nullptr);
      sync_cycle_completed_event_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(datatype_association_stats_ != nullptr);
      datatype_association_stats_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    nudging_datatype_ = 0;
    singleton_event_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DebugEventInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_SingletonDebugEventType_IsValid(val))) {
            set_singleton_event(static_cast<::sync_pb::SyncEnums_SingletonDebugEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_sync_cycle_completed_event_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nudging_datatype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nudging_datatype(&has_bits);
          nudging_datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 datatypes_notified_from_server = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_datatypes_notified_from_server(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_datatypes_notified_from_server(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sync_pb.DatatypeAssociationStats datatype_association_stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_datatype_association_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DebugEventInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.DebugEventInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_SingletonDebugEventType_IsValid(value)) {
            set_singleton_event(static_cast< ::sync_pb::SyncEnums_SingletonDebugEventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_cycle_completed_event_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nudging_datatype = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_nudging_datatype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nudging_datatype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 datatypes_notified_from_server = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_datatypes_notified_from_server())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_datatypes_notified_from_server())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.DatatypeAssociationStats datatype_association_stats = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_datatype_association_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.DebugEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.DebugEventInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DebugEventInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.DebugEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->singleton_event(), output);
  }

  // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::sync_cycle_completed_event_info(this), output);
  }

  // optional int32 nudging_datatype = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->nudging_datatype(), output);
  }

  // repeated int32 datatypes_notified_from_server = 4;
  for (int i = 0, n = this->datatypes_notified_from_server_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      4, this->datatypes_notified_from_server(i), output);
  }

  // optional .sync_pb.DatatypeAssociationStats datatype_association_stats = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::datatype_association_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.DebugEventInfo)
}

size_t DebugEventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DebugEventInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 datatypes_notified_from_server = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->datatypes_notified_from_server_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->datatypes_notified_from_server_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sync_cycle_completed_event_info_);
    }

    // optional .sync_pb.DatatypeAssociationStats datatype_association_stats = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *datatype_association_stats_);
    }

    // optional int32 nudging_datatype = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nudging_datatype());
    }

    // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->singleton_event());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugEventInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DebugEventInfo*>(
      &from));
}

void DebugEventInfo::MergeFrom(const DebugEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DebugEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datatypes_notified_from_server_.MergeFrom(from.datatypes_notified_from_server_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sync_cycle_completed_event_info()->::sync_pb::SyncCycleCompletedEventInfo::MergeFrom(from.sync_cycle_completed_event_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_datatype_association_stats()->::sync_pb::DatatypeAssociationStats::MergeFrom(from.datatype_association_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      nudging_datatype_ = from.nudging_datatype_;
    }
    if (cached_has_bits & 0x00000008u) {
      singleton_event_ = from.singleton_event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugEventInfo::CopyFrom(const DebugEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DebugEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugEventInfo::IsInitialized() const {
  if (has_sync_cycle_completed_event_info()) {
    if (!this->sync_cycle_completed_event_info_->IsInitialized()) return false;
  }
  return true;
}

void DebugEventInfo::InternalSwap(DebugEventInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datatypes_notified_from_server_.InternalSwap(&other->datatypes_notified_from_server_);
  swap(sync_cycle_completed_event_info_, other->sync_cycle_completed_event_info_);
  swap(datatype_association_stats_, other->datatype_association_stats_);
  swap(nudging_datatype_, other->nudging_datatype_);
  swap(singleton_event_, other->singleton_event_);
}

std::string DebugEventInfo::GetTypeName() const {
  return "sync_pb.DebugEventInfo";
}


// ===================================================================

void DebugInfo::InitAsDefaultInstance() {
}
class DebugInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugInfo>()._has_bits_);
  static void set_has_cryptographer_ready(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cryptographer_has_pending_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_events_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DebugInfo::DebugInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.DebugInfo)
}
DebugInfo::DebugInfo(const DebugInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cryptographer_ready_, &from.cryptographer_ready_,
    static_cast<size_t>(reinterpret_cast<char*>(&events_dropped_) -
    reinterpret_cast<char*>(&cryptographer_ready_)) + sizeof(events_dropped_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.DebugInfo)
}

void DebugInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugInfo_client_5fdebug_5finfo_2eproto.base);
  ::memset(&cryptographer_ready_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&events_dropped_) -
      reinterpret_cast<char*>(&cryptographer_ready_)) + sizeof(events_dropped_));
}

DebugInfo::~DebugInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.DebugInfo)
  SharedDtor();
}

void DebugInfo::SharedDtor() {
}

void DebugInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugInfo& DebugInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugInfo_client_5fdebug_5finfo_2eproto.base);
  return *internal_default_instance();
}


void DebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  ::memset(&cryptographer_ready_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&events_dropped_) -
      reinterpret_cast<char*>(&cryptographer_ready_)) + sizeof(events_dropped_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DebugInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sync_pb.DebugEventInfo events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional bool cryptographer_ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cryptographer_ready(&has_bits);
          cryptographer_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cryptographer_has_pending_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cryptographer_has_pending_keys(&has_bits);
          cryptographer_has_pending_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool events_dropped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_events_dropped(&has_bits);
          events_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DebugInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sync_pb.DebugInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.DebugEventInfo events = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cryptographer_ready = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cryptographer_ready(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cryptographer_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cryptographer_has_pending_keys = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_cryptographer_has_pending_keys(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cryptographer_has_pending_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool events_dropped = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_events_dropped(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &events_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.DebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.DebugInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DebugInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.DebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.DebugEventInfo events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->events(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool cryptographer_ready = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->cryptographer_ready(), output);
  }

  // optional bool cryptographer_has_pending_keys = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->cryptographer_has_pending_keys(), output);
  }

  // optional bool events_dropped = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->events_dropped(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.DebugInfo)
}

size_t DebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DebugInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.DebugEventInfo events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool cryptographer_ready = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool cryptographer_has_pending_keys = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool events_dropped = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DebugInfo*>(
      &from));
}

void DebugInfo::MergeFrom(const DebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cryptographer_ready_ = from.cryptographer_ready_;
    }
    if (cached_has_bits & 0x00000002u) {
      cryptographer_has_pending_keys_ = from.cryptographer_has_pending_keys_;
    }
    if (cached_has_bits & 0x00000004u) {
      events_dropped_ = from.events_dropped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugInfo::CopyFrom(const DebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void DebugInfo::InternalSwap(DebugInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  swap(cryptographer_ready_, other->cryptographer_ready_);
  swap(cryptographer_has_pending_keys_, other->cryptographer_has_pending_keys_);
  swap(events_dropped_, other->events_dropped_);
}

std::string DebugInfo::GetTypeName() const {
  return "sync_pb.DebugInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::TypeHint* Arena::CreateMaybeMessage< ::sync_pb::TypeHint >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::TypeHint >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SyncCycleCompletedEventInfo* Arena::CreateMaybeMessage< ::sync_pb::SyncCycleCompletedEventInfo >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::SyncCycleCompletedEventInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::DatatypeAssociationStats* Arena::CreateMaybeMessage< ::sync_pb::DatatypeAssociationStats >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::DatatypeAssociationStats >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::DebugEventInfo* Arena::CreateMaybeMessage< ::sync_pb::DebugEventInfo >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::DebugEventInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::DebugInfo* Arena::CreateMaybeMessage< ::sync_pb::DebugInfo >(Arena* arena) {
  return Arena::CreateInternal< ::sync_pb::DebugInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
