// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_password_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_password_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "encryption.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_password_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_password_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class PasswordSpecifics;
class PasswordSpecificsDefaultTypeInternal;
extern PasswordSpecificsDefaultTypeInternal _PasswordSpecifics_default_instance_;
class PasswordSpecificsData;
class PasswordSpecificsDataDefaultTypeInternal;
extern PasswordSpecificsDataDefaultTypeInternal _PasswordSpecificsData_default_instance_;
class PasswordSpecificsMetadata;
class PasswordSpecificsMetadataDefaultTypeInternal;
extern PasswordSpecificsMetadataDefaultTypeInternal _PasswordSpecificsMetadata_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::PasswordSpecifics* Arena::CreateMaybeMessage<::sync_pb::PasswordSpecifics>(Arena*);
template<> ::sync_pb::PasswordSpecificsData* Arena::CreateMaybeMessage<::sync_pb::PasswordSpecificsData>(Arena*);
template<> ::sync_pb::PasswordSpecificsMetadata* Arena::CreateMaybeMessage<::sync_pb::PasswordSpecificsMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class PasswordSpecificsData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PasswordSpecificsData) */ {
 public:
  PasswordSpecificsData();
  virtual ~PasswordSpecificsData();

  PasswordSpecificsData(const PasswordSpecificsData& from);
  PasswordSpecificsData(PasswordSpecificsData&& from) noexcept
    : PasswordSpecificsData() {
    *this = ::std::move(from);
  }

  inline PasswordSpecificsData& operator=(const PasswordSpecificsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordSpecificsData& operator=(PasswordSpecificsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PasswordSpecificsData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PasswordSpecificsData* internal_default_instance() {
    return reinterpret_cast<const PasswordSpecificsData*>(
               &_PasswordSpecificsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PasswordSpecificsData& a, PasswordSpecificsData& b) {
    a.Swap(&b);
  }
  inline void Swap(PasswordSpecificsData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasswordSpecificsData* New() const final {
    return CreateMaybeMessage<PasswordSpecificsData>(nullptr);
  }

  PasswordSpecificsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasswordSpecificsData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PasswordSpecificsData& from);
  void MergeFrom(const PasswordSpecificsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordSpecificsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PasswordSpecificsData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignonRealmFieldNumber = 2,
    kOriginFieldNumber = 3,
    kActionFieldNumber = 4,
    kUsernameElementFieldNumber = 5,
    kUsernameValueFieldNumber = 6,
    kPasswordElementFieldNumber = 7,
    kPasswordValueFieldNumber = 8,
    kDisplayNameFieldNumber = 15,
    kAvatarUrlFieldNumber = 16,
    kFederationUrlFieldNumber = 17,
    kSchemeFieldNumber = 1,
    kSslValidFieldNumber = 9,
    kPreferredFieldNumber = 10,
    kBlacklistedFieldNumber = 12,
    kDateCreatedFieldNumber = 11,
    kTypeFieldNumber = 13,
    kTimesUsedFieldNumber = 14,
    kDateLastUsedFieldNumber = 18,
  };
  // optional string signon_realm = 2;
  bool has_signon_realm() const;
  void clear_signon_realm();
  const std::string& signon_realm() const;
  void set_signon_realm(const std::string& value);
  void set_signon_realm(std::string&& value);
  void set_signon_realm(const char* value);
  void set_signon_realm(const char* value, size_t size);
  std::string* mutable_signon_realm();
  std::string* release_signon_realm();
  void set_allocated_signon_realm(std::string* signon_realm);

  // optional string origin = 3;
  bool has_origin() const;
  void clear_origin();
  const std::string& origin() const;
  void set_origin(const std::string& value);
  void set_origin(std::string&& value);
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  std::string* mutable_origin();
  std::string* release_origin();
  void set_allocated_origin(std::string* origin);

  // optional string action = 4;
  bool has_action() const;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);

  // optional string username_element = 5;
  bool has_username_element() const;
  void clear_username_element();
  const std::string& username_element() const;
  void set_username_element(const std::string& value);
  void set_username_element(std::string&& value);
  void set_username_element(const char* value);
  void set_username_element(const char* value, size_t size);
  std::string* mutable_username_element();
  std::string* release_username_element();
  void set_allocated_username_element(std::string* username_element);

  // optional string username_value = 6;
  bool has_username_value() const;
  void clear_username_value();
  const std::string& username_value() const;
  void set_username_value(const std::string& value);
  void set_username_value(std::string&& value);
  void set_username_value(const char* value);
  void set_username_value(const char* value, size_t size);
  std::string* mutable_username_value();
  std::string* release_username_value();
  void set_allocated_username_value(std::string* username_value);

  // optional string password_element = 7;
  bool has_password_element() const;
  void clear_password_element();
  const std::string& password_element() const;
  void set_password_element(const std::string& value);
  void set_password_element(std::string&& value);
  void set_password_element(const char* value);
  void set_password_element(const char* value, size_t size);
  std::string* mutable_password_element();
  std::string* release_password_element();
  void set_allocated_password_element(std::string* password_element);

  // optional string password_value = 8;
  bool has_password_value() const;
  void clear_password_value();
  const std::string& password_value() const;
  void set_password_value(const std::string& value);
  void set_password_value(std::string&& value);
  void set_password_value(const char* value);
  void set_password_value(const char* value, size_t size);
  std::string* mutable_password_value();
  std::string* release_password_value();
  void set_allocated_password_value(std::string* password_value);

  // optional string display_name = 15;
  bool has_display_name() const;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);

  // optional string avatar_url = 16;
  bool has_avatar_url() const;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);

  // optional string federation_url = 17;
  bool has_federation_url() const;
  void clear_federation_url();
  const std::string& federation_url() const;
  void set_federation_url(const std::string& value);
  void set_federation_url(std::string&& value);
  void set_federation_url(const char* value);
  void set_federation_url(const char* value, size_t size);
  std::string* mutable_federation_url();
  std::string* release_federation_url();
  void set_allocated_federation_url(std::string* federation_url);

  // optional int32 scheme = 1;
  bool has_scheme() const;
  void clear_scheme();
  ::PROTOBUF_NAMESPACE_ID::int32 scheme() const;
  void set_scheme(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool ssl_valid = 9;
  bool has_ssl_valid() const;
  void clear_ssl_valid();
  bool ssl_valid() const;
  void set_ssl_valid(bool value);

  // optional bool preferred = 10;
  bool has_preferred() const;
  void clear_preferred();
  bool preferred() const;
  void set_preferred(bool value);

  // optional bool blacklisted = 12;
  bool has_blacklisted() const;
  void clear_blacklisted();
  bool blacklisted() const;
  void set_blacklisted(bool value);

  // optional int64 date_created = 11;
  bool has_date_created() const;
  void clear_date_created();
  ::PROTOBUF_NAMESPACE_ID::int64 date_created() const;
  void set_date_created(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 type = 13;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 times_used = 14;
  bool has_times_used() const;
  void clear_times_used();
  ::PROTOBUF_NAMESPACE_ID::int32 times_used() const;
  void set_times_used(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 date_last_used = 18;
  bool has_date_last_used() const;
  void clear_date_last_used();
  ::PROTOBUF_NAMESPACE_ID::int64 date_last_used() const;
  void set_date_last_used(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signon_realm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_element_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_element_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr federation_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 scheme_;
  bool ssl_valid_;
  bool preferred_;
  bool blacklisted_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_created_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_used_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_last_used_;
  friend struct ::TableStruct_password_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PasswordSpecificsMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PasswordSpecificsMetadata) */ {
 public:
  PasswordSpecificsMetadata();
  virtual ~PasswordSpecificsMetadata();

  PasswordSpecificsMetadata(const PasswordSpecificsMetadata& from);
  PasswordSpecificsMetadata(PasswordSpecificsMetadata&& from) noexcept
    : PasswordSpecificsMetadata() {
    *this = ::std::move(from);
  }

  inline PasswordSpecificsMetadata& operator=(const PasswordSpecificsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordSpecificsMetadata& operator=(PasswordSpecificsMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PasswordSpecificsMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PasswordSpecificsMetadata* internal_default_instance() {
    return reinterpret_cast<const PasswordSpecificsMetadata*>(
               &_PasswordSpecificsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PasswordSpecificsMetadata& a, PasswordSpecificsMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PasswordSpecificsMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasswordSpecificsMetadata* New() const final {
    return CreateMaybeMessage<PasswordSpecificsMetadata>(nullptr);
  }

  PasswordSpecificsMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasswordSpecificsMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PasswordSpecificsMetadata& from);
  void MergeFrom(const PasswordSpecificsMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordSpecificsMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PasswordSpecificsMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_password_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PasswordSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PasswordSpecifics) */ {
 public:
  PasswordSpecifics();
  virtual ~PasswordSpecifics();

  PasswordSpecifics(const PasswordSpecifics& from);
  PasswordSpecifics(PasswordSpecifics&& from) noexcept
    : PasswordSpecifics() {
    *this = ::std::move(from);
  }

  inline PasswordSpecifics& operator=(const PasswordSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordSpecifics& operator=(PasswordSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PasswordSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PasswordSpecifics* internal_default_instance() {
    return reinterpret_cast<const PasswordSpecifics*>(
               &_PasswordSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PasswordSpecifics& a, PasswordSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(PasswordSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasswordSpecifics* New() const final {
    return CreateMaybeMessage<PasswordSpecifics>(nullptr);
  }

  PasswordSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasswordSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PasswordSpecifics& from);
  void MergeFrom(const PasswordSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PasswordSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedFieldNumber = 1,
    kClientOnlyEncryptedDataFieldNumber = 2,
    kUnencryptedMetadataFieldNumber = 3,
  };
  // optional .sync_pb.EncryptedData encrypted = 1;
  bool has_encrypted() const;
  void clear_encrypted();
  const ::sync_pb::EncryptedData& encrypted() const;
  ::sync_pb::EncryptedData* release_encrypted();
  ::sync_pb::EncryptedData* mutable_encrypted();
  void set_allocated_encrypted(::sync_pb::EncryptedData* encrypted);

  // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
  bool has_client_only_encrypted_data() const;
  void clear_client_only_encrypted_data();
  const ::sync_pb::PasswordSpecificsData& client_only_encrypted_data() const;
  ::sync_pb::PasswordSpecificsData* release_client_only_encrypted_data();
  ::sync_pb::PasswordSpecificsData* mutable_client_only_encrypted_data();
  void set_allocated_client_only_encrypted_data(::sync_pb::PasswordSpecificsData* client_only_encrypted_data);

  // optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
  bool has_unencrypted_metadata() const;
  void clear_unencrypted_metadata();
  const ::sync_pb::PasswordSpecificsMetadata& unencrypted_metadata() const;
  ::sync_pb::PasswordSpecificsMetadata* release_unencrypted_metadata();
  ::sync_pb::PasswordSpecificsMetadata* mutable_unencrypted_metadata();
  void set_allocated_unencrypted_metadata(::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata);

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::EncryptedData* encrypted_;
  ::sync_pb::PasswordSpecificsData* client_only_encrypted_data_;
  ::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata_;
  friend struct ::TableStruct_password_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PasswordSpecificsData

// optional int32 scheme = 1;
inline bool PasswordSpecificsData::has_scheme() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PasswordSpecificsData::clear_scheme() {
  scheme_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PasswordSpecificsData::scheme() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.scheme)
  return scheme_;
}
inline void PasswordSpecificsData::set_scheme(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  scheme_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.scheme)
}

// optional string signon_realm = 2;
inline bool PasswordSpecificsData::has_signon_realm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PasswordSpecificsData::clear_signon_realm() {
  signon_realm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasswordSpecificsData::signon_realm() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.signon_realm)
  return signon_realm_.GetNoArena();
}
inline void PasswordSpecificsData::set_signon_realm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signon_realm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.signon_realm)
}
inline void PasswordSpecificsData::set_signon_realm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signon_realm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.signon_realm)
}
inline void PasswordSpecificsData::set_signon_realm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signon_realm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.signon_realm)
}
inline void PasswordSpecificsData::set_signon_realm(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signon_realm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.signon_realm)
}
inline std::string* PasswordSpecificsData::mutable_signon_realm() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.signon_realm)
  return signon_realm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsData::release_signon_realm() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.signon_realm)
  if (!has_signon_realm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signon_realm_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_signon_realm(std::string* signon_realm) {
  if (signon_realm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signon_realm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signon_realm);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.signon_realm)
}

// optional string origin = 3;
inline bool PasswordSpecificsData::has_origin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PasswordSpecificsData::clear_origin() {
  origin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PasswordSpecificsData::origin() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.origin)
  return origin_.GetNoArena();
}
inline void PasswordSpecificsData::set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.origin)
}
inline void PasswordSpecificsData::set_origin(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  origin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.origin)
}
inline void PasswordSpecificsData::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.origin)
}
inline void PasswordSpecificsData::set_origin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.origin)
}
inline std::string* PasswordSpecificsData::mutable_origin() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.origin)
  return origin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsData::release_origin() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.origin)
  if (!has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return origin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  origin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.origin)
}

// optional string action = 4;
inline bool PasswordSpecificsData::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PasswordSpecificsData::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PasswordSpecificsData::action() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.action)
  return action_.GetNoArena();
}
inline void PasswordSpecificsData::set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.action)
}
inline void PasswordSpecificsData::set_action(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.action)
}
inline void PasswordSpecificsData::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.action)
}
inline void PasswordSpecificsData::set_action(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.action)
}
inline std::string* PasswordSpecificsData::mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.action)
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsData::release_action() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.action)
  if (!has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return action_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.action)
}

// optional string username_element = 5;
inline bool PasswordSpecificsData::has_username_element() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PasswordSpecificsData::clear_username_element() {
  username_element_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PasswordSpecificsData::username_element() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.username_element)
  return username_element_.GetNoArena();
}
inline void PasswordSpecificsData::set_username_element(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  username_element_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.username_element)
}
inline void PasswordSpecificsData::set_username_element(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  username_element_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.username_element)
}
inline void PasswordSpecificsData::set_username_element(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  username_element_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.username_element)
}
inline void PasswordSpecificsData::set_username_element(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  username_element_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.username_element)
}
inline std::string* PasswordSpecificsData::mutable_username_element() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.username_element)
  return username_element_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsData::release_username_element() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.username_element)
  if (!has_username_element()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return username_element_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_username_element(std::string* username_element) {
  if (username_element != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  username_element_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username_element);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.username_element)
}

// optional string username_value = 6;
inline bool PasswordSpecificsData::has_username_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PasswordSpecificsData::clear_username_value() {
  username_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PasswordSpecificsData::username_value() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.username_value)
  return username_value_.GetNoArena();
}
inline void PasswordSpecificsData::set_username_value(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  username_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.username_value)
}
inline void PasswordSpecificsData::set_username_value(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  username_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.username_value)
}
inline void PasswordSpecificsData::set_username_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  username_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.username_value)
}
inline void PasswordSpecificsData::set_username_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  username_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.username_value)
}
inline std::string* PasswordSpecificsData::mutable_username_value() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.username_value)
  return username_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsData::release_username_value() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.username_value)
  if (!has_username_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return username_value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_username_value(std::string* username_value) {
  if (username_value != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  username_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username_value);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.username_value)
}

// optional string password_element = 7;
inline bool PasswordSpecificsData::has_password_element() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PasswordSpecificsData::clear_password_element() {
  password_element_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PasswordSpecificsData::password_element() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_element)
  return password_element_.GetNoArena();
}
inline void PasswordSpecificsData::set_password_element(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  password_element_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.password_element)
}
inline void PasswordSpecificsData::set_password_element(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  password_element_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.password_element)
}
inline void PasswordSpecificsData::set_password_element(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  password_element_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.password_element)
}
inline void PasswordSpecificsData::set_password_element(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  password_element_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.password_element)
}
inline std::string* PasswordSpecificsData::mutable_password_element() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_element)
  return password_element_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsData::release_password_element() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_element)
  if (!has_password_element()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return password_element_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_password_element(std::string* password_element) {
  if (password_element != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  password_element_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_element);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_element)
}

// optional string password_value = 8;
inline bool PasswordSpecificsData::has_password_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PasswordSpecificsData::clear_password_value() {
  password_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PasswordSpecificsData::password_value() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_value)
  return password_value_.GetNoArena();
}
inline void PasswordSpecificsData::set_password_value(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  password_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.password_value)
}
inline void PasswordSpecificsData::set_password_value(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  password_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.password_value)
}
inline void PasswordSpecificsData::set_password_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  password_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.password_value)
}
inline void PasswordSpecificsData::set_password_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  password_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.password_value)
}
inline std::string* PasswordSpecificsData::mutable_password_value() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_value)
  return password_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsData::release_password_value() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_value)
  if (!has_password_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return password_value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_password_value(std::string* password_value) {
  if (password_value != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  password_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_value);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_value)
}

// optional bool ssl_valid = 9;
inline bool PasswordSpecificsData::has_ssl_valid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PasswordSpecificsData::clear_ssl_valid() {
  ssl_valid_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PasswordSpecificsData::ssl_valid() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.ssl_valid)
  return ssl_valid_;
}
inline void PasswordSpecificsData::set_ssl_valid(bool value) {
  _has_bits_[0] |= 0x00000800u;
  ssl_valid_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.ssl_valid)
}

// optional bool preferred = 10;
inline bool PasswordSpecificsData::has_preferred() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PasswordSpecificsData::clear_preferred() {
  preferred_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool PasswordSpecificsData::preferred() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.preferred)
  return preferred_;
}
inline void PasswordSpecificsData::set_preferred(bool value) {
  _has_bits_[0] |= 0x00001000u;
  preferred_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.preferred)
}

// optional int64 date_created = 11;
inline bool PasswordSpecificsData::has_date_created() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PasswordSpecificsData::clear_date_created() {
  date_created_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PasswordSpecificsData::date_created() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.date_created)
  return date_created_;
}
inline void PasswordSpecificsData::set_date_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  date_created_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.date_created)
}

// optional bool blacklisted = 12;
inline bool PasswordSpecificsData::has_blacklisted() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PasswordSpecificsData::clear_blacklisted() {
  blacklisted_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool PasswordSpecificsData::blacklisted() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.blacklisted)
  return blacklisted_;
}
inline void PasswordSpecificsData::set_blacklisted(bool value) {
  _has_bits_[0] |= 0x00002000u;
  blacklisted_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.blacklisted)
}

// optional int32 type = 13;
inline bool PasswordSpecificsData::has_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PasswordSpecificsData::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PasswordSpecificsData::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.type)
  return type_;
}
inline void PasswordSpecificsData::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.type)
}

// optional int32 times_used = 14;
inline bool PasswordSpecificsData::has_times_used() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PasswordSpecificsData::clear_times_used() {
  times_used_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PasswordSpecificsData::times_used() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.times_used)
  return times_used_;
}
inline void PasswordSpecificsData::set_times_used(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  times_used_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.times_used)
}

// optional string display_name = 15;
inline bool PasswordSpecificsData::has_display_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PasswordSpecificsData::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PasswordSpecificsData::display_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.display_name)
  return display_name_.GetNoArena();
}
inline void PasswordSpecificsData::set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.display_name)
}
inline void PasswordSpecificsData::set_display_name(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.display_name)
}
inline void PasswordSpecificsData::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.display_name)
}
inline void PasswordSpecificsData::set_display_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.display_name)
}
inline std::string* PasswordSpecificsData::mutable_display_name() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.display_name)
  return display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsData::release_display_name() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.display_name)
  if (!has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return display_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.display_name)
}

// optional string avatar_url = 16;
inline bool PasswordSpecificsData::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PasswordSpecificsData::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& PasswordSpecificsData::avatar_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.avatar_url)
  return avatar_url_.GetNoArena();
}
inline void PasswordSpecificsData::set_avatar_url(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  avatar_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.avatar_url)
}
inline void PasswordSpecificsData::set_avatar_url(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  avatar_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.avatar_url)
}
inline void PasswordSpecificsData::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  avatar_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.avatar_url)
}
inline void PasswordSpecificsData::set_avatar_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  avatar_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.avatar_url)
}
inline std::string* PasswordSpecificsData::mutable_avatar_url() {
  _has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.avatar_url)
  return avatar_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsData::release_avatar_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.avatar_url)
  if (!has_avatar_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return avatar_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  avatar_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.avatar_url)
}

// optional string federation_url = 17;
inline bool PasswordSpecificsData::has_federation_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PasswordSpecificsData::clear_federation_url() {
  federation_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& PasswordSpecificsData::federation_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.federation_url)
  return federation_url_.GetNoArena();
}
inline void PasswordSpecificsData::set_federation_url(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  federation_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.federation_url)
}
inline void PasswordSpecificsData::set_federation_url(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  federation_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.federation_url)
}
inline void PasswordSpecificsData::set_federation_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  federation_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.federation_url)
}
inline void PasswordSpecificsData::set_federation_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  federation_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.federation_url)
}
inline std::string* PasswordSpecificsData::mutable_federation_url() {
  _has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.federation_url)
  return federation_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsData::release_federation_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.federation_url)
  if (!has_federation_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return federation_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_federation_url(std::string* federation_url) {
  if (federation_url != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  federation_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), federation_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.federation_url)
}

// optional int64 date_last_used = 18;
inline bool PasswordSpecificsData::has_date_last_used() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PasswordSpecificsData::clear_date_last_used() {
  date_last_used_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PasswordSpecificsData::date_last_used() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.date_last_used)
  return date_last_used_;
}
inline void PasswordSpecificsData::set_date_last_used(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  date_last_used_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.date_last_used)
}

// -------------------------------------------------------------------

// PasswordSpecificsMetadata

// optional string url = 1;
inline bool PasswordSpecificsMetadata::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PasswordSpecificsMetadata::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasswordSpecificsMetadata::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsMetadata.url)
  return url_.GetNoArena();
}
inline void PasswordSpecificsMetadata::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsMetadata.url)
}
inline void PasswordSpecificsMetadata::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsMetadata.url)
}
inline void PasswordSpecificsMetadata::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsMetadata.url)
}
inline void PasswordSpecificsMetadata::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsMetadata.url)
}
inline std::string* PasswordSpecificsMetadata::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsMetadata.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordSpecificsMetadata::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsMetadata.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsMetadata::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsMetadata.url)
}

// -------------------------------------------------------------------

// PasswordSpecifics

// optional .sync_pb.EncryptedData encrypted = 1;
inline bool PasswordSpecifics::has_encrypted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::sync_pb::EncryptedData& PasswordSpecifics::encrypted() const {
  const ::sync_pb::EncryptedData* p = encrypted_;
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.encrypted)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::EncryptedData*>(
      &::sync_pb::_EncryptedData_default_instance_);
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::release_encrypted() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.encrypted)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::EncryptedData* temp = encrypted_;
  encrypted_ = nullptr;
  return temp;
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::mutable_encrypted() {
  _has_bits_[0] |= 0x00000001u;
  if (encrypted_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EncryptedData>(GetArenaNoVirtual());
    encrypted_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.encrypted)
  return encrypted_;
}
inline void PasswordSpecifics::set_allocated_encrypted(::sync_pb::EncryptedData* encrypted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_);
  }
  if (encrypted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encrypted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_ = encrypted;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.encrypted)
}

// optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
inline bool PasswordSpecifics::has_client_only_encrypted_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PasswordSpecifics::clear_client_only_encrypted_data() {
  if (client_only_encrypted_data_ != nullptr) client_only_encrypted_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::PasswordSpecificsData& PasswordSpecifics::client_only_encrypted_data() const {
  const ::sync_pb::PasswordSpecificsData* p = client_only_encrypted_data_;
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.client_only_encrypted_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::PasswordSpecificsData*>(
      &::sync_pb::_PasswordSpecificsData_default_instance_);
}
inline ::sync_pb::PasswordSpecificsData* PasswordSpecifics::release_client_only_encrypted_data() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.client_only_encrypted_data)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::PasswordSpecificsData* temp = client_only_encrypted_data_;
  client_only_encrypted_data_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsData* PasswordSpecifics::mutable_client_only_encrypted_data() {
  _has_bits_[0] |= 0x00000002u;
  if (client_only_encrypted_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsData>(GetArenaNoVirtual());
    client_only_encrypted_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.client_only_encrypted_data)
  return client_only_encrypted_data_;
}
inline void PasswordSpecifics::set_allocated_client_only_encrypted_data(::sync_pb::PasswordSpecificsData* client_only_encrypted_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_only_encrypted_data_;
  }
  if (client_only_encrypted_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_only_encrypted_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_only_encrypted_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_only_encrypted_data_ = client_only_encrypted_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.client_only_encrypted_data)
}

// optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
inline bool PasswordSpecifics::has_unencrypted_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PasswordSpecifics::clear_unencrypted_metadata() {
  if (unencrypted_metadata_ != nullptr) unencrypted_metadata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::PasswordSpecificsMetadata& PasswordSpecifics::unencrypted_metadata() const {
  const ::sync_pb::PasswordSpecificsMetadata* p = unencrypted_metadata_;
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.unencrypted_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::PasswordSpecificsMetadata*>(
      &::sync_pb::_PasswordSpecificsMetadata_default_instance_);
}
inline ::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::release_unencrypted_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.unencrypted_metadata)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::PasswordSpecificsMetadata* temp = unencrypted_metadata_;
  unencrypted_metadata_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::mutable_unencrypted_metadata() {
  _has_bits_[0] |= 0x00000004u;
  if (unencrypted_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsMetadata>(GetArenaNoVirtual());
    unencrypted_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.unencrypted_metadata)
  return unencrypted_metadata_;
}
inline void PasswordSpecifics::set_allocated_unencrypted_metadata(::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete unencrypted_metadata_;
  }
  if (unencrypted_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unencrypted_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unencrypted_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  unencrypted_metadata_ = unencrypted_metadata;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.unencrypted_metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_password_5fspecifics_2eproto
