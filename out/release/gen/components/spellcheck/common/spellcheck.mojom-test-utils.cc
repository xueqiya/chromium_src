// components/spellcheck/common/spellcheck.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "components/spellcheck/common/spellcheck.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/file.mojom.h"
#include "mojo/public/mojom/base/string16.mojom.h"


#ifndef COMPONENTS_SPELLCHECK_COMMON_SPELLCHECK_MOJOM_JUMBO_H_
#define COMPONENTS_SPELLCHECK_COMMON_SPELLCHECK_MOJOM_JUMBO_H_
#include "components/spellcheck/common/spellcheck_mojom_traits.h"
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/string16_mojom_traits.h"
#endif


namespace spellcheck {
namespace mojom {


void SpellCheckerInterceptorForTesting::Initialize(std::vector<SpellCheckBDictLanguagePtr> dictionaries, const std::vector<std::string>& custom_words, bool enable) {
  GetForwardingInterface()->Initialize(std::move(dictionaries), std::move(custom_words), std::move(enable));
}
void SpellCheckerInterceptorForTesting::CustomDictionaryChanged(const std::vector<std::string>& words_added, const std::vector<std::string>& words_removed) {
  GetForwardingInterface()->CustomDictionaryChanged(std::move(words_added), std::move(words_removed));
}
SpellCheckerAsyncWaiter::SpellCheckerAsyncWaiter(
    SpellChecker* proxy) : proxy_(proxy) {}

SpellCheckerAsyncWaiter::~SpellCheckerAsyncWaiter() = default;




void SpellCheckHostInterceptorForTesting::RequestDictionary() {
  GetForwardingInterface()->RequestDictionary();
}
void SpellCheckHostInterceptorForTesting::NotifyChecked(const ::base::string16& word, bool misspelled) {
  GetForwardingInterface()->NotifyChecked(std::move(word), std::move(misspelled));
}
void SpellCheckHostInterceptorForTesting::RequestTextCheck(const ::base::string16& text, int32_t route_id, RequestTextCheckCallback callback) {
  GetForwardingInterface()->RequestTextCheck(std::move(text), std::move(route_id), std::move(callback));
}
void SpellCheckHostInterceptorForTesting::DisconnectSessionBridge() {
  GetForwardingInterface()->DisconnectSessionBridge();
}
void SpellCheckHostInterceptorForTesting::CheckSpelling(const ::base::string16& word, int32_t route_id, CheckSpellingCallback callback) {
  GetForwardingInterface()->CheckSpelling(std::move(word), std::move(route_id), std::move(callback));
}
void SpellCheckHostInterceptorForTesting::FillSuggestionList(const ::base::string16& word, FillSuggestionListCallback callback) {
  GetForwardingInterface()->FillSuggestionList(std::move(word), std::move(callback));
}
SpellCheckHostAsyncWaiter::SpellCheckHostAsyncWaiter(
    SpellCheckHost* proxy) : proxy_(proxy) {}

SpellCheckHostAsyncWaiter::~SpellCheckHostAsyncWaiter() = default;

void SpellCheckHostAsyncWaiter::RequestTextCheck(
    const ::base::string16& text, int32_t route_id, std::vector<::SpellCheckResult>* out_results) {
  base::RunLoop loop;
  proxy_->RequestTextCheck(std::move(text),std::move(route_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<::SpellCheckResult>* out_results
,
             const std::vector<::SpellCheckResult>& results) {*out_results = std::move(results);
            loop->Quit();
          },
          &loop,
          out_results));
  loop.Run();
}
void SpellCheckHostAsyncWaiter::CheckSpelling(
    const ::base::string16& word, int32_t route_id, bool* out_correct) {
  base::RunLoop loop;
  proxy_->CheckSpelling(std::move(word),std::move(route_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_correct
,
             bool correct) {*out_correct = std::move(correct);
            loop->Quit();
          },
          &loop,
          out_correct));
  loop.Run();
}
void SpellCheckHostAsyncWaiter::FillSuggestionList(
    const ::base::string16& word, std::vector<::base::string16>* out_suggestions) {
  base::RunLoop loop;
  proxy_->FillSuggestionList(std::move(word),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<::base::string16>* out_suggestions
,
             const std::vector<::base::string16>& suggestions) {*out_suggestions = std::move(suggestions);
            loop->Quit();
          },
          &loop,
          out_suggestions));
  loop.Run();
}





}  // namespace mojom
}  // namespace spellcheck

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif