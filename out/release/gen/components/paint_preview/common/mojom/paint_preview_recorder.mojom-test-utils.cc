// components/paint_preview/common/mojom/paint_preview_recorder.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4056)
#pragma warning(disable:4065)
#pragma warning(disable:4756)
#endif


#include "components/paint_preview/common/mojom/paint_preview_recorder.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/file.mojom.h"
#include "mojo/public/mojom/base/unguessable_token.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include "url/mojom/url.mojom.h"


#ifndef COMPONENTS_PAINT_PREVIEW_COMMON_MOJOM_PAINT_PREVIEW_RECORDER_MOJOM_JUMBO_H_
#define COMPONENTS_PAINT_PREVIEW_COMMON_MOJOM_PAINT_PREVIEW_RECORDER_MOJOM_JUMBO_H_
#include "mojo/public/cpp/base/file_mojom_traits.h"
#include "mojo/public/cpp/base/unguessable_token_mojom_traits.h"
#include "ui/gfx/geometry/mojom/geometry_mojom_traits.h"
#include "url/mojom/url_gurl_mojom_traits.h"
#endif


namespace paint_preview {
namespace mojom {


void PaintPreviewRecorderInterceptorForTesting::CapturePaintPreview(PaintPreviewCaptureParamsPtr params, CapturePaintPreviewCallback callback) {
  GetForwardingInterface()->CapturePaintPreview(std::move(params), std::move(callback));
}
PaintPreviewRecorderAsyncWaiter::PaintPreviewRecorderAsyncWaiter(
    PaintPreviewRecorder* proxy) : proxy_(proxy) {}

PaintPreviewRecorderAsyncWaiter::~PaintPreviewRecorderAsyncWaiter() = default;

void PaintPreviewRecorderAsyncWaiter::CapturePaintPreview(
    PaintPreviewCaptureParamsPtr params, PaintPreviewStatus* out_status, PaintPreviewCaptureResponsePtr* out_response) {
  base::RunLoop loop;
  proxy_->CapturePaintPreview(std::move(params),
      base::BindOnce(
          [](base::RunLoop* loop,
             PaintPreviewStatus* out_status
,
             PaintPreviewCaptureResponsePtr* out_response
,
             PaintPreviewStatus status,
             PaintPreviewCaptureResponsePtr response) {*out_status = std::move(status);*out_response = std::move(response);
            loop->Quit();
          },
          &loop,
          out_status,
          out_response));
  loop.Run();
}





}  // namespace mojom
}  // namespace paint_preview

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif