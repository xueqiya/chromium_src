// components/paint_preview/common/mojom/paint_preview_recorder.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PAINT_PREVIEW_COMMON_MOJOM_PAINT_PREVIEW_RECORDER_MOJOM_SHARED_INTERNAL_H_
#define COMPONENTS_PAINT_PREVIEW_COMMON_MOJOM_PAINT_PREVIEW_RECORDER_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/file.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace paint_preview {
namespace mojom {
namespace internal {
class PaintPreviewCaptureParams_Data;
class LinkData_Data;
class PaintPreviewCaptureResponse_Data;

struct PaintPreviewStatus_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class  PaintPreviewCaptureParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PaintPreviewCaptureParams_Data));
      new (data()) PaintPreviewCaptureParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PaintPreviewCaptureParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PaintPreviewCaptureParams_Data>(index_);
    }
    PaintPreviewCaptureParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> guid;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> clip_rect;
  uint8_t is_main_frame : 1;
  uint8_t pad2_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> file;

 private:
  PaintPreviewCaptureParams_Data();
  ~PaintPreviewCaptureParams_Data() = delete;
};
static_assert(sizeof(PaintPreviewCaptureParams_Data) == 40,
              "Bad sizeof(PaintPreviewCaptureParams_Data)");
// Used by PaintPreviewCaptureParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PaintPreviewCaptureParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PaintPreviewCaptureParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PaintPreviewCaptureParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    PaintPreviewCaptureParams_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PaintPreviewCaptureParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  LinkData_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LinkData_Data));
      new (data()) LinkData_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LinkData_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LinkData_Data>(index_);
    }
    LinkData_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> rect;

 private:
  LinkData_Data();
  ~LinkData_Data() = delete;
};
static_assert(sizeof(LinkData_Data) == 24,
              "Bad sizeof(LinkData_Data)");
// Used by LinkData::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct LinkData_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  LinkData_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~LinkData_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    LinkData_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    LinkData_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  PaintPreviewCaptureResponse_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PaintPreviewCaptureResponse_Data));
      new (data()) PaintPreviewCaptureResponse_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PaintPreviewCaptureResponse_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PaintPreviewCaptureResponse_Data>(index_);
    }
    PaintPreviewCaptureResponse_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> embedding_token;
  mojo::internal::Pointer<mojo::internal::Map_Data<uint32_t, mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data>>> content_id_to_embedding_token;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::LinkData_Data>>> links;

 private:
  PaintPreviewCaptureResponse_Data();
  ~PaintPreviewCaptureResponse_Data() = delete;
};
static_assert(sizeof(PaintPreviewCaptureResponse_Data) == 32,
              "Bad sizeof(PaintPreviewCaptureResponse_Data)");
// Used by PaintPreviewCaptureResponse::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PaintPreviewCaptureResponse_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PaintPreviewCaptureResponse_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PaintPreviewCaptureResponse_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    PaintPreviewCaptureResponse_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PaintPreviewCaptureResponse_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace paint_preview

#endif  // COMPONENTS_PAINT_PREVIEW_COMMON_MOJOM_PAINT_PREVIEW_RECORDER_MOJOM_SHARED_INTERNAL_H_